{"instruction":"Construct a Python program to classify the data given.","input":"Classify the following data points into two categories: red and green\n[1, 2, 3, 4, 5, 6, 7]","output":"def classify_data(data_points):\n    classified_data = []\n    for point in data_points:\n        if point % 2 == 0:\n            classified_data.append('green')\n        else:\n            classified_data.append('red')\n    return classified_data","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to classify the data given.\n\n### Input:\nClassify the following data points into two categories: red and green\n[1, 2, 3, 4, 5, 6, 7]\n\n### Output:\ndef classify_data(data_points):\n    classified_data = []\n    for point in data_points:\n        if point % 2 == 0:\n            classified_data.append('green')\n        else:\n            classified_data.append('red')\n    return classified_data"}
{"instruction":"Write a Python script to print the frequency of all unique words in a given string.","input":"\"Hello world, hello programmer\"","output":"words = \"Hello world, hello programmer\".split()\n\nword_freq = {}\nfor word in words:\n    if word not in word_freq:\n        word_freq[word] = 1 \n    else:\n        word_freq[word] += 1\n\nfor key, value in word_freq.items():\n    print(f\"{key} : {value}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to print the frequency of all unique words in a given string.\n\n### Input:\n\"Hello world, hello programmer\"\n\n### Output:\nwords = \"Hello world, hello programmer\".split()\n\nword_freq = {}\nfor word in words:\n    if word not in word_freq:\n        word_freq[word] = 1 \n    else:\n        word_freq[word] += 1\n\nfor key, value in word_freq.items():\n    print(f\"{key} : {value}\")"}
{"instruction":"Design a Python class with methods to compute the square and cube of a given number.","input":"","output":"\"\"\"\nDesign a Python class with methods to compute the square and cube of a \ngiven number.\n\"\"\"\n\nclass MathOperations:\n\n    # constructor\n    def __init__(self, number):\n        self.number = number\n\n    # method to compute the square\n    def square(self):\n        return self.number * self.number\n\n    # method to compute the cube\n    def cube(self):\n        return self.number * self.number * self.number\n\n# create an object of the MathOperations class\nobj = MathOperations(2)\n\n# calling methods\nprint(\"Square of 2 is:\", obj.square())\nprint(\"Cube of 2 is:\", obj.cube())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class with methods to compute the square and cube of a given number.\n\n### Input:\n\n\n### Output:\n\"\"\"\nDesign a Python class with methods to compute the square and cube of a \ngiven number.\n\"\"\"\n\nclass MathOperations:\n\n    # constructor\n    def __init__(self, number):\n        self.number = number\n\n    # method to compute the square\n    def square(self):\n        return self.number * self.number\n\n    # method to compute the cube\n    def cube(self):\n        return self.number * self.number * self.number\n\n# create an object of the MathOperations class\nobj = MathOperations(2)\n\n# calling methods\nprint(\"Square of 2 is:\", obj.square())\nprint(\"Cube of 2 is:\", obj.cube())"}
{"instruction":"Write a python program to classify an object based on its features.","input":"[2.5, 4.5, 2.5], Classes: [\"apple\", \"orange\", \"pear\"]","output":"def classify_object(features, classes):\n    max_feature = max(features)\n    index = features.index(max_feature)\n    return classes[index]\n\nprint(classify_object([2.5, 4.5, 2.5], [\"apple\", \"orange\", \"pear\"]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to classify an object based on its features.\n\n### Input:\n[2.5, 4.5, 2.5], Classes: [\"apple\", \"orange\", \"pear\"]\n\n### Output:\ndef classify_object(features, classes):\n    max_feature = max(features)\n    index = features.index(max_feature)\n    return classes[index]\n\nprint(classify_object([2.5, 4.5, 2.5], [\"apple\", \"orange\", \"pear\"]))"}
{"instruction":"Write a function in Python to create a list containing all even numbers between 1 and 20 (inclusive).","input":"","output":"def even_numbers():\n    even_list = []\n    for number in range(1, 21):\n        if number % 2 == 0:\n            even_list.append(number)\n    return even_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to create a list containing all even numbers between 1 and 20 (inclusive).\n\n### Input:\n\n\n### Output:\ndef even_numbers():\n    even_list = []\n    for number in range(1, 21):\n        if number % 2 == 0:\n            even_list.append(number)\n    return even_list"}
{"instruction":"Generate a program in Python to evaluate the following expression: (x*x) \u2212 (\ud835\udc66*\ud835\udc66)","input":"x=10\ny=5","output":"x = 10\ny = 5\n\nresult = (x*x) - (y*y)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to evaluate the following expression: (x*x) \u2212 (\ud835\udc66*\ud835\udc66)\n\n### Input:\nx=10\ny=5\n\n### Output:\nx = 10\ny = 5\n\nresult = (x*x) - (y*y)\nprint(result)"}
{"instruction":"Develop a program for solving the traveling salesman problem in Python.","input":"","output":"import pulp\n\n#Create the \u2018prob\u2019 variable to contain the problem data\nprob = pulp.LpProblem('Travelling_Salesman_Problem', pulp.LpMinimize)\n\n#Create problem Variables\nroute = list(range(1,nodes+1))\n\n# Define Cost Matrix\nweights = [[0, 8, 2, 10], [8, 0, 4, 12], [2, 4, 0, 9], [10, 12, 9, 0]]\n\n# Create a list of tuples containing all the possible routes\nall_pairs = [(i,j) for i in route for j in route if i != j]\n \n# Create a list of tuples containing all the possible routes for two stops\nall_trips = [(i,j,k) for i in route for j in route for k in route if i!=j and j!=k and i != k]\n \n# Create a list of tuples containing all the possible routes for three stops\nall_trips = [(i,j,k,l) for i in route for j in route for k in route for l in route if i!=j and j!=k and k!=l and i != k and i != l and j != l]\n\n# Create a dictionary of all the routes and the associated cost\ncosts = dict(zip(all_trips, weights))\n\n# Create dictionary of refular pairs and the associated cost\npair_costs = dict(zip(all_pairs, weights))\n\n# Create a list of tuples containing all possible routes for the given number of stops\ntrip_vars = pulp.LpVariable.dicts('trip',all_trips, lowBound=0, upBound=1,cat=pulp.LpInteger)\n\n# Objective Function\nprob += pulp.lpSum([trip_vars[i] * costs[i]for i in all_trips]), \"Sum_of_Transporting_Costs\"\n\n# Constraints\n# Ensure that the total number of trips are healthy\nprob += pulp.lpSum([trip_vars[i] for i in all_trips]) == 1, \"Sum_of_Trips\"\n\n# Ensure that the total number of trips each city is healthy\nfor k in route:\n    prob += pulp.lpSum([trip_vars[i] for i in all_trips if k in i]) <= 1, \"Sum_of_Trips_out_of_City_%d\"%k\n\n#Ensure that each stop is usually used\nfor pairs in all_pairs:\n    prob += pulp.lpSum([trip_vars[i] for i in all_trips if pairs[0] in i and pairs[1] in i]) <= pair_costs[pairs], \"Sum_of_Trips_%s_%s\"%pairs\n\n# The problem is solved using PuLP's choice of Solver\nprob.solve()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program for solving the traveling salesman problem in Python.\n\n### Input:\n\n\n### Output:\nimport pulp\n\n#Create the \u2018prob\u2019 variable to contain the problem data\nprob = pulp.LpProblem('Travelling_Salesman_Problem', pulp.LpMinimize)\n\n#Create problem Variables\nroute = list(range(1,nodes+1))\n\n# Define Cost Matrix\nweights = [[0, 8, 2, 10], [8, 0, 4, 12], [2, 4, 0, 9], [10, 12, 9, 0]]\n\n# Create a list of tuples containing all the possible routes\nall_pairs = [(i,j) for i in route for j in route if i != j]\n \n# Create a list of tuples containing all the possible routes for two stops\nall_trips = [(i,j,k) for i in route for j in route for k in route if i!=j and j!=k and i != k]\n \n# Create a list of tuples containing all the possible routes for three stops\nall_trips = [(i,j,k,l) for i in route for j in route for k in route for l in route if i!=j and j!=k and k!=l and i != k and i != l and j != l]\n\n# Create a dictionary of all the routes and the associated cost\ncosts = dict(zip(all_trips, weights))\n\n# Create dictionary of refular pairs and the associated cost\npair_costs = dict(zip(all_pairs, weights))\n\n# Create a list of tuples containing all possible routes for the given number of stops\ntrip_vars = pulp.LpVariable.dicts('trip',all_trips, lowBound=0, upBound=1,cat=pulp.LpInteger)\n\n# Objective Function\nprob += pulp.lpSum([trip_vars[i] * costs[i]for i in all_trips]), \"Sum_of_Transporting_Costs\"\n\n# Constraints\n# Ensure that the total number of trips are healthy\nprob += pulp.lpSum([trip_vars[i] for i in all_trips]) == 1, \"Sum_of_Trips\"\n\n# Ensure that the total number of trips each city is healthy\nfor k in route:\n    prob += pulp.lpSum([trip_vars[i] for i in all_trips if k in i]) <= 1, \"Sum_of_Trips_out_of_City_%d\"%k\n\n#Ensure that each stop is usually used\nfor pairs in all_pairs:\n    prob += pulp.lpSum([trip_vars[i] for i in all_trips if pairs[0] in i and pairs[1] in i]) <= pair_costs[pairs], \"Sum_of_Trips_%s_%s\"%pairs\n\n# The problem is solved using PuLP's choice of Solver\nprob.solve()"}
{"instruction":"Write a Python program to extract the n-th element from the given list of lists.","input":"[[1,2,3], [4,5,6], [7,8,9]]","output":"def get_nth_element(list_of_lists, n):\n    return [item[n] for item in list_of_lists]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to extract the n-th element from the given list of lists.\n\n### Input:\n[[1,2,3], [4,5,6], [7,8,9]]\n\n### Output:\ndef get_nth_element(list_of_lists, n):\n    return [item[n] for item in list_of_lists]"}
{"instruction":"Create an algorithm in Python to calculate the Fibonacci sequence up to a given number.","input":"Not applicable","output":"def fibonacci(n):\n  a, b = 0, 1\n  while a < n:\n    print(a, end=' ')\n    a, b = b, a+b\n\nfibonacci(100)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to calculate the Fibonacci sequence up to a given number.\n\n### Input:\nNot applicable\n\n### Output:\ndef fibonacci(n):\n  a, b = 0, 1\n  while a < n:\n    print(a, end=' ')\n    a, b = b, a+b\n\nfibonacci(100)"}
{"instruction":"This code implements a B-Tree and a B+-Tree data structure. To use the","input":"","output":"#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nimport bisect\nimport itertools\nimport operator\n\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n\nclass _BNode(object):\n    __slots__ = [\"tree\", \"contents\", \"children\"]\n\n    def __init__(self, tree, contents=None, children=None):\n        self.tree = tree\n        self.contents = contents or []\n        self.children = children or []\n        if self.children:\n            assert len(self.contents) + 1 == len(self.children), \\\n                \"one more child than data item required\"\n\n    def __repr__(self):\n        name = getattr(self, \"children\", 0) and \"Branch\" or \"Leaf\"\n        return \"<%s %s>\" % (name, \", \".join(map(str, self.contents)))\n\n    def lateral(self, parent, parent_index, dest, dest_index):\n        if parent_index > dest_index:\n            dest.contents.append(parent.contents[dest_index])\n            parent.contents[dest_index] = self.contents.pop(0)\n            if self.children:\n                dest.children.append(self.children.pop(0))\n        else:\n            dest.contents.insert(0, parent.contents[parent_index])\n            parent.contents[parent_index] = self.contents.pop()\n            if self.children:\n                dest.children.insert(0, self.children.pop())\n\n    def shrink(self, ancestors):\n        parent = None\n\n        if ancestors:\n            parent, parent_index = ancestors.pop()\n            # try to lend to the left neighboring sibling\n            if parent_index:\n                left_sib = parent.children[parent_index - 1]\n                if len(left_sib.contents) < self.tree.order:\n                    self.lateral(\n                        parent, parent_index, left_sib, parent_index - 1)\n                    return\n\n            # try the right neighbor\n            if parent_index + 1 < len(parent.children):\n                right_sib = parent.children[parent_index + 1]\n                if len(right_sib.contents) < self.tree.order:\n                    self.lateral(\n                        parent, parent_index, right_sib, parent_index + 1)\n                    return\n\n        center = len(self.contents) \/\/ 2\n        sibling, push = self.split()\n\n        if not parent:\n            parent, parent_index = self.tree.BRANCH(\n                self.tree, children=[self]), 0\n            self.tree._root = parent\n\n        # pass the median up to the parent\n        parent.contents.insert(parent_index, push)\n        parent.children.insert(parent_index + 1, sibling)\n        if len(parent.contents) > parent.tree.order:\n            parent.shrink(ancestors)\n\n    def grow(self, ancestors):\n        parent, parent_index = ancestors.pop()\n\n        minimum = self.tree.order \/\/ 2\n        left_sib = right_sib = None\n\n        # try to borrow from the right sibling\n        if parent_index + 1 < len(parent.children):\n            right_sib = parent.children[parent_index + 1]\n            if len(right_sib.contents) > minimum:\n                right_sib.lateral(parent, parent_index + 1, self, parent_index)\n                return\n\n        # try to borrow from the left sibling\n        if parent_index:\n            left_sib = parent.children[parent_index - 1]\n            if len(left_sib.contents) > minimum:\n                left_sib.lateral(parent, parent_index - 1, self, parent_index)\n                return\n\n        # consolidate with a sibling - try left first\n        if left_sib:\n            left_sib.contents.append(parent.contents[parent_index - 1])\n            left_sib.contents.extend(self.contents)\n            if self.children:\n                left_sib.children.extend(self.children)\n            parent.contents.pop(parent_index - 1)\n            parent.children.pop(parent_index)\n        else:\n            self.contents.append(parent.contents[parent_index])\n            self.contents.extend(right_sib.contents)\n            if self.children:\n                self.children.extend(right_sib.children)\n            parent.contents.pop(parent_index)\n            parent.children.pop(parent_index + 1)\n\n        if len(parent.contents) < minimum:\n            if ancestors:\n                # parent is not the root\n                parent.grow(ancestors)\n            elif not parent.contents:\n                # parent is root, and its now empty\n                self.tree._root = left_sib or self\n\n    def split(self):\n        center = len(self.contents) \/\/ 2\n        median = self.contents[center]\n        sibling = type(self)(\n            self.tree,\n            self.contents[center + 1:],\n            self.children[center + 1:])\n        self.contents = self.contents[:center]\n        self.children = self.children[:center + 1]\n        return sibling, median\n\n    def insert(self, index, item, ancestors):\n        self.contents.insert(index, item)\n        if len(self.contents) > self.tree.order:\n            self.shrink(ancestors)\n\n    def remove(self, index, ancestors):\n        minimum = self.tree.order \/\/ 2\n\n        if self.children:\n            # find the smallest in the right subtree, exchange the value with the current node\n            # then delete the smallest one, just like the idea in the binary search tree.\n            # Note: only if len(descendent.contents) > minimum, we do this way in order to avoid 'grow' operation.\n            # Or we will inspect the left tree and do it any way\n            # all internal nodes have both left and right subtree.\n            additional_ancestors = [(self, index + 1)]\n            descendent = self.children[index + 1]\n            while descendent.children:\n                additional_ancestors.append((descendent, 0))\n                descendent = descendent.children[0]\n            if len(descendent.contents) > minimum:\n                ancestors.extend(additional_ancestors)\n                self.contents[index] = descendent.contents[0]\n                descendent.remove(0, ancestors)\n                return\n\n            # fall back to the left child, and exchange with the biggest, then delete the biggest anyway.\n            additional_ancestors = [(self, index)]\n            descendent = self.children[index]\n            while descendent.children:\n                additional_ancestors.append(\n                    (descendent, len(descendent.children) - 1))\n                descendent = descendent.children[-1]\n            ancestors.extend(additional_ancestors)\n            self.contents[index] = descendent.contents[-1]\n            descendent.remove(len(descendent.children) - 1, ancestors)\n        else:\n            self.contents.pop(index)\n            if len(self.contents) < minimum and ancestors:\n                self.grow(ancestors)\n\nclass _BPlusLeaf(_BNode):\n    __slots__ = [\"tree\", \"contents\", \"data\", \"next\"]\n\n    def __init__(self, tree, contents=None, data=None, next=None):\n        self.tree = tree\n        self.contents = contents or []\n        self.data = data or []\n        self.next = next\n        assert len(self.contents) == len(self.data), \"one data per key\"\n\n    def insert(self, index, key, data, ancestors):\n        self.contents.insert(index, key)\n        self.data.insert(index, data)\n\n        if len(self.contents) > self.tree.order:\n            self.shrink(ancestors)\n\n    def lateral(self, parent, parent_index, dest, dest_index):\n        if parent_index > dest_index:\n            dest.contents.append(self.contents.pop(0))\n            dest.data.append(self.data.pop(0))\n            parent.contents[dest_index] = self.contents[0]\n        else:\n            dest.contents.insert(0, self.contents.pop())\n            dest.data.insert(0, self.data.pop())\n            parent.contents[parent_index] = dest.contents[0]\n\n    def split(self):\n        center = len(self.contents) \/\/ 2\n        median = self.contents[center - 1]\n        sibling = type(self)(\n            self.tree,\n            self.contents[center:],\n            self.data[center:],\n            self.next)\n        self.contents = self.contents[:center]\n        self.data = self.data[:center]\n        self.next = sibling\n        return sibling, sibling.contents[0]\n\n    def remove(self, index, ancestors):\n        minimum = self.tree.order \/\/ 2\n        if index >= len(self.contents):\n            self, index = self.next, 0\n\n        key = self.contents[index]\n\n        # if any leaf that could accept the key can do so\n        # without any rebalancing necessary, then go that route\n        current = self\n        while current is not None and current.contents[0] == key:\n            if len(current.contents) > minimum:\n                if current.contents[0] == key:\n                    index = 0\n                else:\n                    index = bisect.bisect_left(current.contents, key)\n                current.contents.pop(index)\n                current.data.pop(index)\n                return\n            current = current.next\n\n        self.grow(ancestors)\n\n    def grow(self, ancestors):\n        minimum = self.tree.order \/\/ 2\n        parent, parent_index = ancestors.pop()\n        left_sib = right_sib = None\n\n        # try borrowing from a neighbor - try right first\n        if parent_index + 1 < len(parent.children):\n            right_sib = parent.children[parent_index + 1]\n            if len(right_sib.contents) > minimum:\n                right_sib.lateral(parent, parent_index + 1, self, parent_index)\n                return\n\n        # fallback to left\n        if parent_index:\n            left_sib = parent.children[parent_index - 1]\n            if len(left_sib.contents) > minimum:\n                left_sib.lateral(parent, parent_index - 1, self, parent_index)\n                return\n\n        # join with a neighbor - try left first\n        if left_sib:\n            left_sib.contents.extend(self.contents)\n            left_sib.data.extend(self.data)\n            parent.remove(parent_index - 1, ancestors)\n            return\n\n        # fallback to right\n        self.contents.extend(right_sib.contents)\n        self.data.extend(right_sib.data)\n        parent.remove(parent_index, ancestors)\n\nclass BTree(object):\n    BRANCH = LEAF = _BNode\n\n    def __init__(self, order):\n        self.order = order\n        self._root = self._bottom = self.LEAF(self)\n\n    def _path_to(self, item):\n        \"\"\"\n\n        \"\"\"\n        current = self._root\n        ancestry = []\n\n        while getattr(current, \"children\", None):\n            index = bisect.bisect_left(current.contents, item)\n            ancestry.append((current, index))\n            if index < len(current.contents) \\\n                and current.contents[index] == item:\n                return ancestry\n            current = current.children[index]\n\n        index = bisect.bisect_left(current.contents, item)\n        ancestry.append((current, index))\n        present = index < len(current.contents)\n        present = present and current.contents[index] == item\n        return ancestry\n\n    def _present(self, item, ancestors):\n        last, index = ancestors[-1]\n        return index < len(last.contents) and last.contents[index] == item\n\n    def insert(self, item):\n        current = self._root\n        ancestors = self._path_to(item)\n        node, index = ancestors[-1]\n        while getattr(node, \"children\", None):\n            node = node.children[index]\n            index = bisect.bisect_left(node.contents, item)\n            ancestors.append((node, index))\n        node, index = ancestors.pop()\n        node.insert(index, item, ancestors)\n\n    def remove(self, item):\n        current = self._root\n        ancestors = self._path_to(item)\n\n        if self._present(item, ancestors):\n            node, index = ancestors.pop()\n            node.remove(index, ancestors)\n        else:\n            raise ValueError(\"%r not in %s\" % (item, self.__class__.__name__))\n\n    def __contains__(self, item):\n        return self._present(item, self._path_to(item))\n\n    def __iter__(self):\n        def _recurse(node):\n            if node.children:\n                for child, item in zip(node.children, node.contents):\n                    for child_item in _recurse(child):\n                        yield child_item\n                    yield item\n                for child_item in _recurse(node.children[-1]):\n                    yield child_item\n            else:\n                for item in node.contents:\n                    yield item\n\n        for item in _recurse(self._root):\n            yield item\n\n    def __repr__(self):\n        def recurse(node, accum, depth):\n            accum.append((\"  \" * depth) + repr(node))\n            for node in getattr(node, \"children\", []):\n                recurse(node, accum, depth + 1)\n\n        accum = []\n        recurse(self._root, accum, 0)\n        return \"\\n\".join(accum)\n\n    @classmethod\n    def bulkload(cls, items, order):\n        tree = object.__new__(cls)\n        tree.order = order\n\n        leaves = tree._build_bulkloaded_leaves(items)\n        tree._build_bulkloaded_branches(leaves)\n\n        return tree\n\n    def _build_bulkloaded_leaves(self, items):\n        minimum = self.order \/\/ 2\n        leaves, seps = [[]], []\n\n        for item in items:\n            if len(leaves[-1]) < self.order:\n                leaves[-1].append(item)\n            else:\n                seps.append(item)\n                leaves.append([])\n\n        if len(leaves[-1]) < minimum and seps:\n            last_two = leaves[-2] + [seps.pop()] + leaves[-1]\n            leaves[-2] = last_two[:minimum]\n            leaves[-1] = last_two[minimum + 1:]\n            seps.append(last_two[minimum])\n\n        return [self.LEAF(self, contents=node) for node in leaves], seps\n\n    def _build_bulkloaded_branches(self, (leaves, seps)):\n        minimum = self.order \/\/ 2\n        levels = [leaves]\n\n        while len(seps) > self.order + 1:\n            items, nodes, seps = seps, [[]], []\n\n            for item in items:\n                if len(nodes[-1]) < self.order:\n                    nodes[-1].append(item)\n                else:\n                    seps.append(item)\n                    nodes.append([])\n\n            if len(nodes[-1]) < minimum and seps:\n                last_two = nodes[-2] + [seps.pop()] + nodes[-1]\n                nodes[-2] = last_two[:minimum]\n                nodes[-1] = last_two[minimum + 1:]\n                seps.append(last_two[minimum])\n\n            offset = 0\n            for i, node in enumerate(nodes):\n                children = levels[-1][offset:offset + len(node) + 1]\n                nodes[i] = self.BRANCH(self, contents=node, children=children)\n                offset += len(node) + 1\n\n            levels.append(nodes)\n\n        self._root = self.BRANCH(self, contents=seps, children=levels[-1])\n\nclass BPlusTree(BTree):\n    LEAF = _BPlusLeaf\n\n    def _get(self, key):\n        node, index = self._path_to(key)[-1]\n\n        if index == len(node.contents):\n            if node.next:\n                node, index = node.next, 0\n            else:\n                return\n\n        while node.contents[index] == key:\n            yield node.data[index]\n            index += 1\n            if index == len(node.contents):\n                if node.next:\n                    node, index = node.next, 0\n                else:\n                    return\n\n    def _path_to(self, item):\n        path = super(BPlusTree, self)._path_to(item)\n        node, index = path[-1]\n        while hasattr(node, \"children\"):\n            node = node.children[index]\n            index = bisect.bisect_left(node.contents, item)\n            path.append((node, index))\n        return path\n\n    def get(self, key, default=None):\n        try:\n            return self._get(key).next()\n        except StopIteration:\n            return default\n\n    def getlist(self, key):\n        return list(self._get(key))\n\n    def insert(self, key, data):\n        path = self._path_to(key)\n        node, index = path.pop()\n        node.insert(index, key, data, path)\n\n    def remove(self, key):\n        path = self._path_to(key)\n        node, index = path.pop()\n        node.remove(index, path)\n\n    __getitem__ = get\n    __setitem__ = insert\n    __delitem__ = remove\n\n    def __contains__(self, key):\n        for item in self._get(key):\n            return True\n        return False\n\n    def iteritems(self):\n        node = self._root\n        while hasattr(node, \"children\"):\n            node = node.children[0]\n\n        while node:\n            for pair in itertools.izip(node.contents, node.data):\n                yield pair\n            node = node.next\n\n    def iterkeys(self):\n        return itertools.imap(operator.itemgetter(0), self.iteritems())\n\n    def itervalues(self):\n        return itertools.imap(operator.itemgetter(1), self.iteritems())\n\n    __iter__ = iterkeys\n\n    def items(self):\n        return list(self.iteritems())\n\n    def keys(self):\n        return list(self.iterkeys())\n\n    def values(self):\n        return list(self.itervalues())\n\n    def _build_bulkloaded_leaves(self, items):\n        minimum = self.order \/\/ 2\n        leaves, seps = [[]], []\n\n        for item in items:\n            if len(leaves[-1]) >= self.order:\n                seps.append(item)\n                leaves.append([])\n            leaves[-1].append(item)\n\n        if len(leaves[-1]) < minimum and seps:\n            last_two = leaves[-2] + leaves[-1]\n            leaves[-2] = last_two[:minimum]\n            leaves[-1] = last_two[minimum:]\n            seps.append(last_two[minimum])\n\n        leaves = [self.LEAF(\n            self,\n            contents=[p[0] for p in pairs],\n            data=[p[1] for p in pairs])\n                  for pairs in leaves]\n\n        for i in xrange(len(leaves) - 1):\n            leaves[i].next = leaves[i + 1]\n\n        return leaves, [s[0] for s in seps]\n\ndef main():\n    bt = BTree(2)\n    l = range(20, 0, -1)\n    bt.insert('\ubc15\uc528')\n    bt.insert('\uc815\uc528')\n    bt.insert('\uae40\uc528')\n    bt.insert('\uc774\uc528')\n    bt.insert('\ud669\uc528')\n\n    BP = BPlusTree(bt)\n\n    BP.insert('\ubc15', '\ubc15\uc528')   \n    for i in range(0,5):\n        print list(bt)[i]\n\n    print BP.values()[0]\n    print BP.keys()[0]\n    print BP.items()[0]\n\n    print BP.get('\ubc15\uc528')\n    #for i, item in enumerate(l):\n    #    bt.insert(item)\n    #    print list(bt)\n\nif __name__ == '__main__':\n    #unittest.main()\n    main()\n\n\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code implements a B-Tree and a B+-Tree data structure. To use the\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nimport bisect\nimport itertools\nimport operator\n\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n\nclass _BNode(object):\n    __slots__ = [\"tree\", \"contents\", \"children\"]\n\n    def __init__(self, tree, contents=None, children=None):\n        self.tree = tree\n        self.contents = contents or []\n        self.children = children or []\n        if self.children:\n            assert len(self.contents) + 1 == len(self.children), \\\n                \"one more child than data item required\"\n\n    def __repr__(self):\n        name = getattr(self, \"children\", 0) and \"Branch\" or \"Leaf\"\n        return \"<%s %s>\" % (name, \", \".join(map(str, self.contents)))\n\n    def lateral(self, parent, parent_index, dest, dest_index):\n        if parent_index > dest_index:\n            dest.contents.append(parent.contents[dest_index])\n            parent.contents[dest_index] = self.contents.pop(0)\n            if self.children:\n                dest.children.append(self.children.pop(0))\n        else:\n            dest.contents.insert(0, parent.contents[parent_index])\n            parent.contents[parent_index] = self.contents.pop()\n            if self.children:\n                dest.children.insert(0, self.children.pop())\n\n    def shrink(self, ancestors):\n        parent = None\n\n        if ancestors:\n            parent, parent_index = ancestors.pop()\n            # try to lend to the left neighboring sibling\n            if parent_index:\n                left_sib = parent.children[parent_index - 1]\n                if len(left_sib.contents) < self.tree.order:\n                    self.lateral(\n                        parent, parent_index, left_sib, parent_index - 1)\n                    return\n\n            # try the right neighbor\n            if parent_index + 1 < len(parent.children):\n                right_sib = parent.children[parent_index + 1]\n                if len(right_sib.contents) < self.tree.order:\n                    self.lateral(\n                        parent, parent_index, right_sib, parent_index + 1)\n                    return\n\n        center = len(self.contents) \/\/ 2\n        sibling, push = self.split()\n\n        if not parent:\n            parent, parent_index = self.tree.BRANCH(\n                self.tree, children=[self]), 0\n            self.tree._root = parent\n\n        # pass the median up to the parent\n        parent.contents.insert(parent_index, push)\n        parent.children.insert(parent_index + 1, sibling)\n        if len(parent.contents) > parent.tree.order:\n            parent.shrink(ancestors)\n\n    def grow(self, ancestors):\n        parent, parent_index = ancestors.pop()\n\n        minimum = self.tree.order \/\/ 2\n        left_sib = right_sib = None\n\n        # try to borrow from the right sibling\n        if parent_index + 1 < len(parent.children):\n            right_sib = parent.children[parent_index + 1]\n            if len(right_sib.contents) > minimum:\n                right_sib.lateral(parent, parent_index + 1, self, parent_index)\n                return\n\n        # try to borrow from the left sibling\n        if parent_index:\n            left_sib = parent.children[parent_index - 1]\n            if len(left_sib.contents) > minimum:\n                left_sib.lateral(parent, parent_index - 1, self, parent_index)\n                return\n\n        # consolidate with a sibling - try left first\n        if left_sib:\n            left_sib.contents.append(parent.contents[parent_index - 1])\n            left_sib.contents.extend(self.contents)\n            if self.children:\n                left_sib.children.extend(self.children)\n            parent.contents.pop(parent_index - 1)\n            parent.children.pop(parent_index)\n        else:\n            self.contents.append(parent.contents[parent_index])\n            self.contents.extend(right_sib.contents)\n            if self.children:\n                self.children.extend(right_sib.children)\n            parent.contents.pop(parent_index)\n            parent.children.pop(parent_index + 1)\n\n        if len(parent.contents) < minimum:\n            if ancestors:\n                # parent is not the root\n                parent.grow(ancestors)\n            elif not parent.contents:\n                # parent is root, and its now empty\n                self.tree._root = left_sib or self\n\n    def split(self):\n        center = len(self.contents) \/\/ 2\n        median = self.contents[center]\n        sibling = type(self)(\n            self.tree,\n            self.contents[center + 1:],\n            self.children[center + 1:])\n        self.contents = self.contents[:center]\n        self.children = self.children[:center + 1]\n        return sibling, median\n\n    def insert(self, index, item, ancestors):\n        self.contents.insert(index, item)\n        if len(self.contents) > self.tree.order:\n            self.shrink(ancestors)\n\n    def remove(self, index, ancestors):\n        minimum = self.tree.order \/\/ 2\n\n        if self.children:\n            # find the smallest in the right subtree, exchange the value with the current node\n            # then delete the smallest one, just like the idea in the binary search tree.\n            # Note: only if len(descendent.contents) > minimum, we do this way in order to avoid 'grow' operation.\n            # Or we will inspect the left tree and do it any way\n            # all internal nodes have both left and right subtree.\n            additional_ancestors = [(self, index + 1)]\n            descendent = self.children[index + 1]\n            while descendent.children:\n                additional_ancestors.append((descendent, 0))\n                descendent = descendent.children[0]\n            if len(descendent.contents) > minimum:\n                ancestors.extend(additional_ancestors)\n                self.contents[index] = descendent.contents[0]\n                descendent.remove(0, ancestors)\n                return\n\n            # fall back to the left child, and exchange with the biggest, then delete the biggest anyway.\n            additional_ancestors = [(self, index)]\n            descendent = self.children[index]\n            while descendent.children:\n                additional_ancestors.append(\n                    (descendent, len(descendent.children) - 1))\n                descendent = descendent.children[-1]\n            ancestors.extend(additional_ancestors)\n            self.contents[index] = descendent.contents[-1]\n            descendent.remove(len(descendent.children) - 1, ancestors)\n        else:\n            self.contents.pop(index)\n            if len(self.contents) < minimum and ancestors:\n                self.grow(ancestors)\n\nclass _BPlusLeaf(_BNode):\n    __slots__ = [\"tree\", \"contents\", \"data\", \"next\"]\n\n    def __init__(self, tree, contents=None, data=None, next=None):\n        self.tree = tree\n        self.contents = contents or []\n        self.data = data or []\n        self.next = next\n        assert len(self.contents) == len(self.data), \"one data per key\"\n\n    def insert(self, index, key, data, ancestors):\n        self.contents.insert(index, key)\n        self.data.insert(index, data)\n\n        if len(self.contents) > self.tree.order:\n            self.shrink(ancestors)\n\n    def lateral(self, parent, parent_index, dest, dest_index):\n        if parent_index > dest_index:\n            dest.contents.append(self.contents.pop(0))\n            dest.data.append(self.data.pop(0))\n            parent.contents[dest_index] = self.contents[0]\n        else:\n            dest.contents.insert(0, self.contents.pop())\n            dest.data.insert(0, self.data.pop())\n            parent.contents[parent_index] = dest.contents[0]\n\n    def split(self):\n        center = len(self.contents) \/\/ 2\n        median = self.contents[center - 1]\n        sibling = type(self)(\n            self.tree,\n            self.contents[center:],\n            self.data[center:],\n            self.next)\n        self.contents = self.contents[:center]\n        self.data = self.data[:center]\n        self.next = sibling\n        return sibling, sibling.contents[0]\n\n    def remove(self, index, ancestors):\n        minimum = self.tree.order \/\/ 2\n        if index >= len(self.contents):\n            self, index = self.next, 0\n\n        key = self.contents[index]\n\n        # if any leaf that could accept the key can do so\n        # without any rebalancing necessary, then go that route\n        current = self\n        while current is not None and current.contents[0] == key:\n            if len(current.contents) > minimum:\n                if current.contents[0] == key:\n                    index = 0\n                else:\n                    index = bisect.bisect_left(current.contents, key)\n                current.contents.pop(index)\n                current.data.pop(index)\n                return\n            current = current.next\n\n        self.grow(ancestors)\n\n    def grow(self, ancestors):\n        minimum = self.tree.order \/\/ 2\n        parent, parent_index = ancestors.pop()\n        left_sib = right_sib = None\n\n        # try borrowing from a neighbor - try right first\n        if parent_index + 1 < len(parent.children):\n            right_sib = parent.children[parent_index + 1]\n            if len(right_sib.contents) > minimum:\n                right_sib.lateral(parent, parent_index + 1, self, parent_index)\n                return\n\n        # fallback to left\n        if parent_index:\n            left_sib = parent.children[parent_index - 1]\n            if len(left_sib.contents) > minimum:\n                left_sib.lateral(parent, parent_index - 1, self, parent_index)\n                return\n\n        # join with a neighbor - try left first\n        if left_sib:\n            left_sib.contents.extend(self.contents)\n            left_sib.data.extend(self.data)\n            parent.remove(parent_index - 1, ancestors)\n            return\n\n        # fallback to right\n        self.contents.extend(right_sib.contents)\n        self.data.extend(right_sib.data)\n        parent.remove(parent_index, ancestors)\n\nclass BTree(object):\n    BRANCH = LEAF = _BNode\n\n    def __init__(self, order):\n        self.order = order\n        self._root = self._bottom = self.LEAF(self)\n\n    def _path_to(self, item):\n        \"\"\"\n\n        \"\"\"\n        current = self._root\n        ancestry = []\n\n        while getattr(current, \"children\", None):\n            index = bisect.bisect_left(current.contents, item)\n            ancestry.append((current, index))\n            if index < len(current.contents) \\\n                and current.contents[index] == item:\n                return ancestry\n            current = current.children[index]\n\n        index = bisect.bisect_left(current.contents, item)\n        ancestry.append((current, index))\n        present = index < len(current.contents)\n        present = present and current.contents[index] == item\n        return ancestry\n\n    def _present(self, item, ancestors):\n        last, index = ancestors[-1]\n        return index < len(last.contents) and last.contents[index] == item\n\n    def insert(self, item):\n        current = self._root\n        ancestors = self._path_to(item)\n        node, index = ancestors[-1]\n        while getattr(node, \"children\", None):\n            node = node.children[index]\n            index = bisect.bisect_left(node.contents, item)\n            ancestors.append((node, index))\n        node, index = ancestors.pop()\n        node.insert(index, item, ancestors)\n\n    def remove(self, item):\n        current = self._root\n        ancestors = self._path_to(item)\n\n        if self._present(item, ancestors):\n            node, index = ancestors.pop()\n            node.remove(index, ancestors)\n        else:\n            raise ValueError(\"%r not in %s\" % (item, self.__class__.__name__))\n\n    def __contains__(self, item):\n        return self._present(item, self._path_to(item))\n\n    def __iter__(self):\n        def _recurse(node):\n            if node.children:\n                for child, item in zip(node.children, node.contents):\n                    for child_item in _recurse(child):\n                        yield child_item\n                    yield item\n                for child_item in _recurse(node.children[-1]):\n                    yield child_item\n            else:\n                for item in node.contents:\n                    yield item\n\n        for item in _recurse(self._root):\n            yield item\n\n    def __repr__(self):\n        def recurse(node, accum, depth):\n            accum.append((\"  \" * depth) + repr(node))\n            for node in getattr(node, \"children\", []):\n                recurse(node, accum, depth + 1)\n\n        accum = []\n        recurse(self._root, accum, 0)\n        return \"\\n\".join(accum)\n\n    @classmethod\n    def bulkload(cls, items, order):\n        tree = object.__new__(cls)\n        tree.order = order\n\n        leaves = tree._build_bulkloaded_leaves(items)\n        tree._build_bulkloaded_branches(leaves)\n\n        return tree\n\n    def _build_bulkloaded_leaves(self, items):\n        minimum = self.order \/\/ 2\n        leaves, seps = [[]], []\n\n        for item in items:\n            if len(leaves[-1]) < self.order:\n                leaves[-1].append(item)\n            else:\n                seps.append(item)\n                leaves.append([])\n\n        if len(leaves[-1]) < minimum and seps:\n            last_two = leaves[-2] + [seps.pop()] + leaves[-1]\n            leaves[-2] = last_two[:minimum]\n            leaves[-1] = last_two[minimum + 1:]\n            seps.append(last_two[minimum])\n\n        return [self.LEAF(self, contents=node) for node in leaves], seps\n\n    def _build_bulkloaded_branches(self, (leaves, seps)):\n        minimum = self.order \/\/ 2\n        levels = [leaves]\n\n        while len(seps) > self.order + 1:\n            items, nodes, seps = seps, [[]], []\n\n            for item in items:\n                if len(nodes[-1]) < self.order:\n                    nodes[-1].append(item)\n                else:\n                    seps.append(item)\n                    nodes.append([])\n\n            if len(nodes[-1]) < minimum and seps:\n                last_two = nodes[-2] + [seps.pop()] + nodes[-1]\n                nodes[-2] = last_two[:minimum]\n                nodes[-1] = last_two[minimum + 1:]\n                seps.append(last_two[minimum])\n\n            offset = 0\n            for i, node in enumerate(nodes):\n                children = levels[-1][offset:offset + len(node) + 1]\n                nodes[i] = self.BRANCH(self, contents=node, children=children)\n                offset += len(node) + 1\n\n            levels.append(nodes)\n\n        self._root = self.BRANCH(self, contents=seps, children=levels[-1])\n\nclass BPlusTree(BTree):\n    LEAF = _BPlusLeaf\n\n    def _get(self, key):\n        node, index = self._path_to(key)[-1]\n\n        if index == len(node.contents):\n            if node.next:\n                node, index = node.next, 0\n            else:\n                return\n\n        while node.contents[index] == key:\n            yield node.data[index]\n            index += 1\n            if index == len(node.contents):\n                if node.next:\n                    node, index = node.next, 0\n                else:\n                    return\n\n    def _path_to(self, item):\n        path = super(BPlusTree, self)._path_to(item)\n        node, index = path[-1]\n        while hasattr(node, \"children\"):\n            node = node.children[index]\n            index = bisect.bisect_left(node.contents, item)\n            path.append((node, index))\n        return path\n\n    def get(self, key, default=None):\n        try:\n            return self._get(key).next()\n        except StopIteration:\n            return default\n\n    def getlist(self, key):\n        return list(self._get(key))\n\n    def insert(self, key, data):\n        path = self._path_to(key)\n        node, index = path.pop()\n        node.insert(index, key, data, path)\n\n    def remove(self, key):\n        path = self._path_to(key)\n        node, index = path.pop()\n        node.remove(index, path)\n\n    __getitem__ = get\n    __setitem__ = insert\n    __delitem__ = remove\n\n    def __contains__(self, key):\n        for item in self._get(key):\n            return True\n        return False\n\n    def iteritems(self):\n        node = self._root\n        while hasattr(node, \"children\"):\n            node = node.children[0]\n\n        while node:\n            for pair in itertools.izip(node.contents, node.data):\n                yield pair\n            node = node.next\n\n    def iterkeys(self):\n        return itertools.imap(operator.itemgetter(0), self.iteritems())\n\n    def itervalues(self):\n        return itertools.imap(operator.itemgetter(1), self.iteritems())\n\n    __iter__ = iterkeys\n\n    def items(self):\n        return list(self.iteritems())\n\n    def keys(self):\n        return list(self.iterkeys())\n\n    def values(self):\n        return list(self.itervalues())\n\n    def _build_bulkloaded_leaves(self, items):\n        minimum = self.order \/\/ 2\n        leaves, seps = [[]], []\n\n        for item in items:\n            if len(leaves[-1]) >= self.order:\n                seps.append(item)\n                leaves.append([])\n            leaves[-1].append(item)\n\n        if len(leaves[-1]) < minimum and seps:\n            last_two = leaves[-2] + leaves[-1]\n            leaves[-2] = last_two[:minimum]\n            leaves[-1] = last_two[minimum:]\n            seps.append(last_two[minimum])\n\n        leaves = [self.LEAF(\n            self,\n            contents=[p[0] for p in pairs],\n            data=[p[1] for p in pairs])\n                  for pairs in leaves]\n\n        for i in xrange(len(leaves) - 1):\n            leaves[i].next = leaves[i + 1]\n\n        return leaves, [s[0] for s in seps]\n\ndef main():\n    bt = BTree(2)\n    l = range(20, 0, -1)\n    bt.insert('\ubc15\uc528')\n    bt.insert('\uc815\uc528')\n    bt.insert('\uae40\uc528')\n    bt.insert('\uc774\uc528')\n    bt.insert('\ud669\uc528')\n\n    BP = BPlusTree(bt)\n\n    BP.insert('\ubc15', '\ubc15\uc528')   \n    for i in range(0,5):\n        print list(bt)[i]\n\n    print BP.values()[0]\n    print BP.keys()[0]\n    print BP.items()[0]\n\n    print BP.get('\ubc15\uc528')\n    #for i, item in enumerate(l):\n    #    bt.insert(item)\n    #    print list(bt)\n\nif __name__ == '__main__':\n    #unittest.main()\n    main()\n\n\n"}
{"instruction":"Create a sorting algorithm that sorts a list of strings alphabetically in Python.","input":"[\"list\", \"of\", \"unsorted\", \"strings\"]","output":"def sortAlphabetically(stringList):\n  sortedList = sorted(stringList)\n  return sortedList\n\nunsortedList = [\"list\", \"of\", \"unsorted\", \"strings\"]\nsortedList = sortAlphabetically(unsortedList)\n\nprint(sortedList)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sorting algorithm that sorts a list of strings alphabetically in Python.\n\n### Input:\n[\"list\", \"of\", \"unsorted\", \"strings\"]\n\n### Output:\ndef sortAlphabetically(stringList):\n  sortedList = sorted(stringList)\n  return sortedList\n\nunsortedList = [\"list\", \"of\", \"unsorted\", \"strings\"]\nsortedList = sortAlphabetically(unsortedList)\n\nprint(sortedList)"}
{"instruction":"Design a function in Python that takes a list of integers and returns the difference between the maximum and the minimum values.","input":"data = [1, 5, 2, 3, 7, 9]","output":"def getDifference(data):\n min_value = min(data)\n max_value = max(data)\n return max_value - min_value\n\ndifference = getDifference(data)\nprint(difference) # 8","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python that takes a list of integers and returns the difference between the maximum and the minimum values.\n\n### Input:\ndata = [1, 5, 2, 3, 7, 9]\n\n### Output:\ndef getDifference(data):\n min_value = min(data)\n max_value = max(data)\n return max_value - min_value\n\ndifference = getDifference(data)\nprint(difference) # 8"}
{"instruction":"Concatenate two strings using Python","input":"string1 = \"Hello\"\nstring2 = \"World\"","output":"string1 + string2\n\nresult = string1 + string2\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConcatenate two strings using Python\n\n### Input:\nstring1 = \"Hello\"\nstring2 = \"World\"\n\n### Output:\nstring1 + string2\n\nresult = string1 + string2\nprint(result)"}
{"instruction":"Create a python script to calculate the average of 10 numbers.","input":"1, 2, 3, 4, 5, 6, 7, 8, 9, 10","output":"def calculate_avg(nums):\n sum = 0\n for num in nums:\n sum += num\n avg = sum\/len(nums)\n return avg\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(calculate_avg(numbers))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to calculate the average of 10 numbers.\n\n### Input:\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\n### Output:\ndef calculate_avg(nums):\n sum = 0\n for num in nums:\n sum += num\n avg = sum\/len(nums)\n return avg\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(calculate_avg(numbers))"}
{"instruction":"Generate a function in Python to calculate the value of an employee\u2019s paycheck given the hours worked and the hourly rate.","input":"","output":"def calc_paycheck(hours_worked, hourly_rate):\n return hours_worked * hourly_rate","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python to calculate the value of an employee\u2019s paycheck given the hours worked and the hourly rate.\n\n### Input:\n\n\n### Output:\ndef calc_paycheck(hours_worked, hourly_rate):\n return hours_worked * hourly_rate"}
{"instruction":"Write a Python code to create an API endpoint with the Flask framework that can store user-submitted comments in a database.","input":"Not applicable","output":"# imports\nfrom flask import Flask, jsonify, request\nfrom flask_sqlalchemy import SQLAlchemy\n\n# Set up application\napp = Flask(__name__)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:\/\/\/database.db\"\ndb = SQLAlchemy(app)\n\n# Model for comment table\nclass Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(256), nullable=False)\n    comment = db.Column(db.String(256), nullable=False)\n\n# Endpoint to store comments\n@app.route('\/comments', methods=[\"POST\"])\ndef store_comment():\n    data = request.get_json()\n    name = data[\"name\"]\n    comment = data[\"comment\"]\n    comment = Comment(name=name, comment=comment)\n    db.session.add(comment)\n    db.session.commit()\n    return jsonify({\"message\": \"comment stored successfully\"})\n\n# Endpoint to get all comments\n@app.route('\/comments', methods=[\"GET\"])\ndef get_comments():\n    all_comments = Comment.query.all()\n    result = []\n    for comment in all_comments:\n        result.append({\n            \"name\" : comment.name,\n            \"comment\" : comment.comment\n        })\n    return jsonify(result)\n\n# Run the app\nif __name__ == '__main__':\n    app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to create an API endpoint with the Flask framework that can store user-submitted comments in a database.\n\n### Input:\nNot applicable\n\n### Output:\n# imports\nfrom flask import Flask, jsonify, request\nfrom flask_sqlalchemy import SQLAlchemy\n\n# Set up application\napp = Flask(__name__)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:\/\/\/database.db\"\ndb = SQLAlchemy(app)\n\n# Model for comment table\nclass Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(256), nullable=False)\n    comment = db.Column(db.String(256), nullable=False)\n\n# Endpoint to store comments\n@app.route('\/comments', methods=[\"POST\"])\ndef store_comment():\n    data = request.get_json()\n    name = data[\"name\"]\n    comment = data[\"comment\"]\n    comment = Comment(name=name, comment=comment)\n    db.session.add(comment)\n    db.session.commit()\n    return jsonify({\"message\": \"comment stored successfully\"})\n\n# Endpoint to get all comments\n@app.route('\/comments', methods=[\"GET\"])\ndef get_comments():\n    all_comments = Comment.query.all()\n    result = []\n    for comment in all_comments:\n        result.append({\n            \"name\" : comment.name,\n            \"comment\" : comment.comment\n        })\n    return jsonify(result)\n\n# Run the app\nif __name__ == '__main__':\n    app.run()"}
{"instruction":"Create a Python program to convert a currency from one denomination to another.","input":"amount: 27\nsource: USD\ndestination: USD","output":"def convert_currency(amount, source, destination):\n source_rate = 1.00\n destination_rate = 1.00\n result = 0.0\n\n # Get exchange rates from external API\n # ...\n\n result = (source_rate * amount) \/ destination_rate\n\n return result\n\namount = 27\nsource = 'USD'\ndestination = 'EUR'\n\nresult = convert_currency(amount, source, destination)\nprint(result) # Output: 23.838 EUR","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to convert a currency from one denomination to another.\n\n### Input:\namount: 27\nsource: USD\ndestination: USD\n\n### Output:\ndef convert_currency(amount, source, destination):\n source_rate = 1.00\n destination_rate = 1.00\n result = 0.0\n\n # Get exchange rates from external API\n # ...\n\n result = (source_rate * amount) \/ destination_rate\n\n return result\n\namount = 27\nsource = 'USD'\ndestination = 'EUR'\n\nresult = convert_currency(amount, source, destination)\nprint(result) # Output: 23.838 EUR"}
{"instruction":"Create a web scraping algorithm using Python to extract all the links from a webpage.","input":"","output":"import requests\nfrom bs4 import BeautifulSoup\n\ndef get_links(url):\n    req = requests.get(url)\n    if req.status_code == 200:\n        soup = BeautifulSoup(req.content, 'lxml')\n        links = []\n        for link in soup.find_all('a', href=True):\n            links.append(link.get('href'))\n        return links","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraping algorithm using Python to extract all the links from a webpage.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef get_links(url):\n    req = requests.get(url)\n    if req.status_code == 200:\n        soup = BeautifulSoup(req.content, 'lxml')\n        links = []\n        for link in soup.find_all('a', href=True):\n            links.append(link.get('href'))\n        return links"}
{"instruction":"Write a code in Python that fills a two-dimensional list of given sizes with increasing numbers starting from 1.","input":"","output":"def fill_2d_list(x, y):\n    new_list = [[i+j for i in range(x)] for j in range(0, x*y, x) ]\n    return new_list\n\nfill_2d_list(3, 5) \n\n# Output:\n# [[1, 2, 3], \n# [4, 5, 6], \n# [7, 8, 9], \n# [10, 11, 12], \n# [13, 14, 15]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python that fills a two-dimensional list of given sizes with increasing numbers starting from 1.\n\n### Input:\n\n\n### Output:\ndef fill_2d_list(x, y):\n    new_list = [[i+j for i in range(x)] for j in range(0, x*y, x) ]\n    return new_list\n\nfill_2d_list(3, 5) \n\n# Output:\n# [[1, 2, 3], \n# [4, 5, 6], \n# [7, 8, 9], \n# [10, 11, 12], \n# [13, 14, 15]]"}
{"instruction":"Create a python program to convert the given time value to 24-hour time format.","input":"time = '08:45 PM'","output":"time_24_hour = '20:45'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to convert the given time value to 24-hour time format.\n\n### Input:\ntime = '08:45 PM'\n\n### Output:\ntime_24_hour = '20:45'"}
{"instruction":"Describe the given Python code snippet.","input":"def count_ones(n):\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count","output":"The given code snippet defines a function called 'count_ones' which takes a single integer argument 'n'. It then initializes a count variable which is used to keep track of the number of ones in binary representation of the given argument. It then executes a loop which runs until all bits of the argument are processed in binary representation. It uses bitwise & operation on the argument with 1 and then compares the result with 1 to recognize whether the bit is 1 or 0. If it is 1, it increments the count by 1, and if it is 0, it does nothing. Finally, it shifts the argument to the right by 1 bit before looping back and processes the next bit.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDescribe the given Python code snippet.\n\n### Input:\ndef count_ones(n):\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count\n\n### Output:\nThe given code snippet defines a function called 'count_ones' which takes a single integer argument 'n'. It then initializes a count variable which is used to keep track of the number of ones in binary representation of the given argument. It then executes a loop which runs until all bits of the argument are processed in binary representation. It uses bitwise & operation on the argument with 1 and then compares the result with 1 to recognize whether the bit is 1 or 0. If it is 1, it increments the count by 1, and if it is 0, it does nothing. Finally, it shifts the argument to the right by 1 bit before looping back and processes the next bit."}
{"instruction":"Write Python code to print the fibonnaci sequence up to the given number.","input":"Input: 10","output":"\"\"\"\nPrint the Fibonacci sequence up to the given number\n\"\"\"\n\ndef fibonacci(n):\n    # Base case\n    if n == 0 or n == 1:\n        return n\n \n    # Recursive case\n    return fibonacci(n-1) + fibonacci(n-2)\n \n# Print the Fibonacci sequence up to the given number\nn = 10\nfor i in range(n + 1):\n    print(fibonacci(i))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to print the fibonnaci sequence up to the given number.\n\n### Input:\nInput: 10\n\n### Output:\n\"\"\"\nPrint the Fibonacci sequence up to the given number\n\"\"\"\n\ndef fibonacci(n):\n    # Base case\n    if n == 0 or n == 1:\n        return n\n \n    # Recursive case\n    return fibonacci(n-1) + fibonacci(n-2)\n \n# Print the Fibonacci sequence up to the given number\nn = 10\nfor i in range(n + 1):\n    print(fibonacci(i))"}
{"instruction":"Optimize the following Python code to remove unnecessary operations or code.","input":"def count(list_data):\n    total = 0\n    for i in list_data:\n        total += i\n    return total","output":"def count(list_data):\n    return sum(list_data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python code to remove unnecessary operations or code.\n\n### Input:\ndef count(list_data):\n    total = 0\n    for i in list_data:\n        total += i\n    return total\n\n### Output:\ndef count(list_data):\n    return sum(list_data)"}
{"instruction":"Create a loop using Python that prints the numbers from 0 to 10 and stops if the number is 8.","input":"","output":"for i in range(11):\n    if i == 8:\n        break \n    else:\n        print(i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a loop using Python that prints the numbers from 0 to 10 and stops if the number is 8.\n\n### Input:\n\n\n### Output:\nfor i in range(11):\n    if i == 8:\n        break \n    else:\n        print(i)"}
{"instruction":"Develop an algorithm in Python to cluster a given set of documents.","input":"Set of documents (in text format)","output":"import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Convert documents to tf-idf matrix\nvectorizer = TfidfVectorizer(stop_words=\"english\")\ndocuments = [doc1, doc2, ...]\nmatrix = vectorizer.fit_transform(documents)\n\n# K-means Clustering\nkmeans = KMeans(n_clusters=2, random_state=0).fit(matrix)\nlabels = kmeans.labels_\n\n# Cluster documents\nclusters = {}\nfor i in range(len(documents)):\n  label = labels[i]\n  if label not in clusters:\n    clusters[label] = []\n  clusters[label].append(documents[i])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to cluster a given set of documents.\n\n### Input:\nSet of documents (in text format)\n\n### Output:\nimport numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Convert documents to tf-idf matrix\nvectorizer = TfidfVectorizer(stop_words=\"english\")\ndocuments = [doc1, doc2, ...]\nmatrix = vectorizer.fit_transform(documents)\n\n# K-means Clustering\nkmeans = KMeans(n_clusters=2, random_state=0).fit(matrix)\nlabels = kmeans.labels_\n\n# Cluster documents\nclusters = {}\nfor i in range(len(documents)):\n  label = labels[i]\n  if label not in clusters:\n    clusters[label] = []\n  clusters[label].append(documents[i])"}
{"instruction":"Identify the output of the following python code snippet:","input":"arr = [1, 2, 4, 8, 16]\nnew_arr = [i * 2 for i in arr]","output":"[2, 4, 8, 16, 32]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIdentify the output of the following python code snippet:\n\n### Input:\narr = [1, 2, 4, 8, 16]\nnew_arr = [i * 2 for i in arr]\n\n### Output:\n[2, 4, 8, 16, 32]"}
{"instruction":"Write an algorithm in Python to find the largest and smallest element in an array.","input":"arr = [3, 7, 1, 12, 5]","output":"def find_min_max(arr):\n    min, max = arr[0], arr[0]\n    for item in arr:\n        if item < min:\n            min = item\n        if item > max:\n            max = item\n    return min, max\n\n# test\narr = [3, 7, 1, 12, 5]\nmin, max = find_min_max(arr)\nprint(f'min: {min}, max: {max}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to find the largest and smallest element in an array.\n\n### Input:\narr = [3, 7, 1, 12, 5]\n\n### Output:\ndef find_min_max(arr):\n    min, max = arr[0], arr[0]\n    for item in arr:\n        if item < min:\n            min = item\n        if item > max:\n            max = item\n    return min, max\n\n# test\narr = [3, 7, 1, 12, 5]\nmin, max = find_min_max(arr)\nprint(f'min: {min}, max: {max}')"}
{"instruction":"Create an optimization function to maximize a given function over a range of values in Python. The range should be given by [-5, 5], and the function is sin(x)","input":"[-5, 5]","output":"import numpy as np\nfrom scipy import optimize\n\ndef optimization_function(x):\n return np.sin(x)\n\nres = optimize.minimize_scalar(optimization_function, bounds=[-5, 5])\n\nprint(res.x)\n# Result: -0.90898","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an optimization function to maximize a given function over a range of values in Python. The range should be given by [-5, 5], and the function is sin(x)\n\n### Input:\n[-5, 5]\n\n### Output:\nimport numpy as np\nfrom scipy import optimize\n\ndef optimization_function(x):\n return np.sin(x)\n\nres = optimize.minimize_scalar(optimization_function, bounds=[-5, 5])\n\nprint(res.x)\n# Result: -0.90898"}
{"instruction":"Create a function in Python to perform a linear search on a list of numbers.","input":"def linear_search(numbers, x):","output":"def linear_search(numbers, x):\n    \"\"\"This function will perform a linear search on a list of numbers and return the index of the number if it is present in the list.\"\"\"\n    for i in range(len(numbers)):\n        if numbers[i] == x:\n            return i \n    # if the number is not found\n    return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to perform a linear search on a list of numbers.\n\n### Input:\ndef linear_search(numbers, x):\n\n### Output:\ndef linear_search(numbers, x):\n    \"\"\"This function will perform a linear search on a list of numbers and return the index of the number if it is present in the list.\"\"\"\n    for i in range(len(numbers)):\n        if numbers[i] == x:\n            return i \n    # if the number is not found\n    return -1"}
{"instruction":"Can you convert this Python code to Ruby?","input":"def my_func(a, b): \n    return a + b","output":"def my_func(a, b)\n  a + b\nend","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you convert this Python code to Ruby?\n\n### Input:\ndef my_func(a, b): \n    return a + b\n\n### Output:\ndef my_func(a, b)\n  a + b\nend"}
{"instruction":"Design a Python Program to convert a given DNA sequence into its RNA equivalent.","input":"DNA = \"ATCGATCG\"","output":"def convert_to_rna(DNA):\n    rna = \"\"\n    # iterate through each character\n    for char in DNA:\n        # check character\n        if char == \"A\":\n            rna += \"U\"\n        elif char == \"T\":\n            rna += \"A\"\n        elif char == \"C\":\n            rna += \"G\"\n        elif char == \"G\":\n            rna += \"C\"\n    return rna","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python Program to convert a given DNA sequence into its RNA equivalent.\n\n### Input:\nDNA = \"ATCGATCG\"\n\n### Output:\ndef convert_to_rna(DNA):\n    rna = \"\"\n    # iterate through each character\n    for char in DNA:\n        # check character\n        if char == \"A\":\n            rna += \"U\"\n        elif char == \"T\":\n            rna += \"A\"\n        elif char == \"C\":\n            rna += \"G\"\n        elif char == \"G\":\n            rna += \"C\"\n    return rna"}
{"instruction":"Find the maximum value of a 10 element array in Python.","input":"array = [1, 7, 3, 4, 5, 9, 8, 0, 2, 6]","output":"# Max value in array\n\ndef max_val(array):\n    max_val = array[0]\n    for num in array[1:]:\n        if num > max_val:\n            max_val = num\n    return max_val","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the maximum value of a 10 element array in Python.\n\n### Input:\narray = [1, 7, 3, 4, 5, 9, 8, 0, 2, 6]\n\n### Output:\n# Max value in array\n\ndef max_val(array):\n    max_val = array[0]\n    for num in array[1:]:\n        if num > max_val:\n            max_val = num\n    return max_val"}
{"instruction":"Create a Python script that does linear regression on a given dataset.","input":"Not applicable","output":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport statsmodels.api as sm\n\n# Load the data \ndata = pd.read_csv('data.csv')\n\n# Add constant to the dataset \ndata = sm.add_constant(data)\n# Fit the model \nresults = sm.OLS(data['x'], data[['const','y']]).fit()\n\n# Get the fitted parameters\nparameters = results.params\n\n# Get the current values of x and y\nx = data['x']\ny = data['y']\n\n# Calculate the predicted values\ny_pred = parameters[0] + parameters[1] * x \n\n# Plot the data and the prediction \nplt.scatter(x, y, label='Data')\nplt.plot(x, y_pred, color='r', label='Prediction')\nplt.legend()\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that does linear regression on a given dataset.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport statsmodels.api as sm\n\n# Load the data \ndata = pd.read_csv('data.csv')\n\n# Add constant to the dataset \ndata = sm.add_constant(data)\n# Fit the model \nresults = sm.OLS(data['x'], data[['const','y']]).fit()\n\n# Get the fitted parameters\nparameters = results.params\n\n# Get the current values of x and y\nx = data['x']\ny = data['y']\n\n# Calculate the predicted values\ny_pred = parameters[0] + parameters[1] * x \n\n# Plot the data and the prediction \nplt.scatter(x, y, label='Data')\nplt.plot(x, y_pred, color='r', label='Prediction')\nplt.legend()\nplt.show()"}
{"instruction":"modify the following Python program such that it returns an error if the input is an empty string.","input":"def print_string(text):\n    print(text)","output":"def print_string(text):\n    if len(text) > 0:\n        print(text)\n    else:\n        raise Exception('The input string is empty')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nmodify the following Python program such that it returns an error if the input is an empty string.\n\n### Input:\ndef print_string(text):\n    print(text)\n\n### Output:\ndef print_string(text):\n    if len(text) > 0:\n        print(text)\n    else:\n        raise Exception('The input string is empty')"}
{"instruction":"Generate a Python program to classify digits from 0 to 9 in a given dataset.","input":"Numbers from 0 to 9 are represented in the dataset as any number from 0 to 100.","output":"import tensorflow as tf \n\n# Dataset contains numbers from 0 to 100\nx = tf.placeholder('float', [None, 100]) \n\n# Output a one-hot encoded vector\ny = tf.placeholder('float') \n\n# Initialize weights and bias\nW = tf.Variable(tf.zeros([100, 10]))\nb = tf.Variable(tf.zeros([10]))\n\n# Softmax\npred = tf.nn.softmax(tf.matmul(x, W) + b)\n\n# Cross entropy\ncost = tf.reduce_mean(-tf.reduce_sum(y * tf.log(pred), reduction_indices = 1)) \n\n# Gradient descent\noptimizer = tf.train.GradientDescentOptimizer(learning_rate = 0.5).minimize(cost) \n\n# Train\nwith tf.Session() as sess: \n\tsess.run(tf.global_variables_initializer()) \n    \n\tfor epoch in range(10): \n\t\t_, c = sess.run([optimizer, cost], feed_dict = {x: data, \n                                                   \t\t\ty: labels}) \n\t\t\n\t\t# Label the numbers 0 to 9\n\t\tcorrect_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1)) \n\t\t\n\t\t# Accuracy\n\t\taccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32)) \n\t\t\n\t\tprint(\"Epoch {}\".format(epoch + 1))\n\t\tprint(\"Accuracy {}\".format(accuracy.eval({x: data, y: labels}))) \n\t\t\n\t\t# Get the weights and bias\n\t\tweight, bias = sess.run([W, b])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to classify digits from 0 to 9 in a given dataset.\n\n### Input:\nNumbers from 0 to 9 are represented in the dataset as any number from 0 to 100.\n\n### Output:\nimport tensorflow as tf \n\n# Dataset contains numbers from 0 to 100\nx = tf.placeholder('float', [None, 100]) \n\n# Output a one-hot encoded vector\ny = tf.placeholder('float') \n\n# Initialize weights and bias\nW = tf.Variable(tf.zeros([100, 10]))\nb = tf.Variable(tf.zeros([10]))\n\n# Softmax\npred = tf.nn.softmax(tf.matmul(x, W) + b)\n\n# Cross entropy\ncost = tf.reduce_mean(-tf.reduce_sum(y * tf.log(pred), reduction_indices = 1)) \n\n# Gradient descent\noptimizer = tf.train.GradientDescentOptimizer(learning_rate = 0.5).minimize(cost) \n\n# Train\nwith tf.Session() as sess: \n\tsess.run(tf.global_variables_initializer()) \n    \n\tfor epoch in range(10): \n\t\t_, c = sess.run([optimizer, cost], feed_dict = {x: data, \n                                                   \t\t\ty: labels}) \n\t\t\n\t\t# Label the numbers 0 to 9\n\t\tcorrect_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1)) \n\t\t\n\t\t# Accuracy\n\t\taccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32)) \n\t\t\n\t\tprint(\"Epoch {}\".format(epoch + 1))\n\t\tprint(\"Accuracy {}\".format(accuracy.eval({x: data, y: labels}))) \n\t\t\n\t\t# Get the weights and bias\n\t\tweight, bias = sess.run([W, b])"}
{"instruction":"Write Python code to build an ensembler for sentiment analysis","input":"","output":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.feature_extraction import DictVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\nclass Ensembler(object):\n\n    def __init__(self):\n        self.ensemble_model = None\n\n    def build_model(self, X, y):\n        # Ensembler consists of Naive Bayes, Logistic Regression and Voting classifier\n        nb_classifier = BernoulliNB()\n        log_classifier = LogisticRegression()\n        vectorizer = DictVectorizer()\n\n        X_vectorized = vectorizer.fit_transform(X).toarray()\n\n        voting_model = VotingClassifier(\n            estimators=[\n                ('nb', nb_classifier), \n                ('log', log_classifier)\n            ], \n            voting='soft', \n            n_jobs=-1\n            )\n\n        self.ensemble_model = voting_model.fit(X_vectorized, y)\n\n    def predict(self, X):\n        X_vectorized = self.vectorizer.transform(X).toarray()\n        return self.ensemble_model.predict(X_vectorized)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to build an ensembler for sentiment analysis\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.feature_extraction import DictVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\nclass Ensembler(object):\n\n    def __init__(self):\n        self.ensemble_model = None\n\n    def build_model(self, X, y):\n        # Ensembler consists of Naive Bayes, Logistic Regression and Voting classifier\n        nb_classifier = BernoulliNB()\n        log_classifier = LogisticRegression()\n        vectorizer = DictVectorizer()\n\n        X_vectorized = vectorizer.fit_transform(X).toarray()\n\n        voting_model = VotingClassifier(\n            estimators=[\n                ('nb', nb_classifier), \n                ('log', log_classifier)\n            ], \n            voting='soft', \n            n_jobs=-1\n            )\n\n        self.ensemble_model = voting_model.fit(X_vectorized, y)\n\n    def predict(self, X):\n        X_vectorized = self.vectorizer.transform(X).toarray()\n        return self.ensemble_model.predict(X_vectorized)"}
{"instruction":"Create a program in Python to compress a given string using Run-length Encoding algorithm.","input":"Input string: \u201cwwwwaaadexxxxxx\u201d","output":"def compress(string): \n    # Initialize dictionary \n    dict_rle = {} \n   \n    # Traverse input string \n    # and keep count of each \n    # character \n    for ch in string : \n        dict_rle[ch] = dict_rle.get(ch, 0) + 1\n        \n    # Store encoded string \n    encoded_string = \"\" \n   \n    # Encode each character and its count \n    for key,value in dict_rle.items(): \n        # print \"%s%s\" % (key,value) \n        encoded_string += key + str(value) \n   \n    return encoded_string \n\nlen_encoded_string = compress(string) \nprint \"Encoded String: \", encoded_string","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to compress a given string using Run-length Encoding algorithm.\n\n### Input:\nInput string: \u201cwwwwaaadexxxxxx\u201d\n\n### Output:\ndef compress(string): \n    # Initialize dictionary \n    dict_rle = {} \n   \n    # Traverse input string \n    # and keep count of each \n    # character \n    for ch in string : \n        dict_rle[ch] = dict_rle.get(ch, 0) + 1\n        \n    # Store encoded string \n    encoded_string = \"\" \n   \n    # Encode each character and its count \n    for key,value in dict_rle.items(): \n        # print \"%s%s\" % (key,value) \n        encoded_string += key + str(value) \n   \n    return encoded_string \n\nlen_encoded_string = compress(string) \nprint \"Encoded String: \", encoded_string"}
{"instruction":"Design a Python function to check if two given strings are anagrams or not.","input":"\"abc\", \"cab\"","output":"def check_anagram(str1, str2):\n \n    if sorted(str1) == sorted(str2):\n        return True\n    else:\n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python function to check if two given strings are anagrams or not.\n\n### Input:\n\"abc\", \"cab\"\n\n### Output:\ndef check_anagram(str1, str2):\n \n    if sorted(str1) == sorted(str2):\n        return True\n    else:\n        return False"}
{"instruction":"Generate Python code to perform a binary search on a given array.","input":"array = [1, 2, 3, 4, 5, 6, 7, 8, 9]","output":"def binary_search(arr, item):\n    start = 0\n    end = len(arr)-1\n    \n    while start <= end:\n        mid = (start + end) \/\/ 2\n        guess = arr[mid]\n        if guess == item:\n            return mid\n        else:\n            if guess > item:\n                end = end - 1\n            else:\n                start = start + 1\n    return None","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to perform a binary search on a given array.\n\n### Input:\narray = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n### Output:\ndef binary_search(arr, item):\n    start = 0\n    end = len(arr)-1\n    \n    while start <= end:\n        mid = (start + end) \/\/ 2\n        guess = arr[mid]\n        if guess == item:\n            return mid\n        else:\n            if guess > item:\n                end = end - 1\n            else:\n                start = start + 1\n    return None"}
{"instruction":"Develop a Python program to compact a given list of integers by removing its duplicate elements.","input":"[1, 1, 2, 2, 3, 4, 4, 5]","output":"def compact_list(array):\n    return list(set(array))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to compact a given list of integers by removing its duplicate elements.\n\n### Input:\n[1, 1, 2, 2, 3, 4, 4, 5]\n\n### Output:\ndef compact_list(array):\n    return list(set(array))"}
{"instruction":"Can you design an algorithm in Python to find the longest palindrome in a given string?","input":"","output":"def longest_palindrome(s):\n    n = len(s)\n    T = [[False for i in range(n)] for i in range(n)] \n    maxLength = 0\n\n    # Find palindromes of single characters \n    for i in range(n):\n      T[i][i] = True\n\n    # Find palindromes of double characters \n    for i in range(n-1):\n      if s[i] == s[i+1]:\n        T[i][i+1] = True\n        maxLength = 2\n\n    # Find palindromes of length greater than 2 \n    for k in range(3, n+1):\n      for i in range(n-k+1):\n        j = i+k-1\n        if s[i] == s[j] and T[i+1][j-1]:\n          T[i][j] = True\n          maxLength = k\n\n    #Find the start and end of the longest one \n    startIndex=0\n    endIndex=0\n    for i in range(n):\n      for j in range(n):\n        if T[i][j] and j-i+1 >= maxLength:\n          maxLength = j-i+1\n          startIndex = i\n          endIndex = j\n    \n    longestPalindrome = s[startIndex:endIndex+1]\n\n    return longestPalindrome","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you design an algorithm in Python to find the longest palindrome in a given string?\n\n### Input:\n\n\n### Output:\ndef longest_palindrome(s):\n    n = len(s)\n    T = [[False for i in range(n)] for i in range(n)] \n    maxLength = 0\n\n    # Find palindromes of single characters \n    for i in range(n):\n      T[i][i] = True\n\n    # Find palindromes of double characters \n    for i in range(n-1):\n      if s[i] == s[i+1]:\n        T[i][i+1] = True\n        maxLength = 2\n\n    # Find palindromes of length greater than 2 \n    for k in range(3, n+1):\n      for i in range(n-k+1):\n        j = i+k-1\n        if s[i] == s[j] and T[i+1][j-1]:\n          T[i][j] = True\n          maxLength = k\n\n    #Find the start and end of the longest one \n    startIndex=0\n    endIndex=0\n    for i in range(n):\n      for j in range(n):\n        if T[i][j] and j-i+1 >= maxLength:\n          maxLength = j-i+1\n          startIndex = i\n          endIndex = j\n    \n    longestPalindrome = s[startIndex:endIndex+1]\n\n    return longestPalindrome"}
{"instruction":"Given a list of numbers, write a Python program to find the element in the list having the highest value.","input":"","output":"def find_max(list):\n    max_value = list[0]\n    for num in list:\n        if num > max_value:\n            max_value = num\n    return max_value","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers, write a Python program to find the element in the list having the highest value.\n\n### Input:\n\n\n### Output:\ndef find_max(list):\n    max_value = list[0]\n    for num in list:\n        if num > max_value:\n            max_value = num\n    return max_value"}
{"instruction":"Build a REST API endpoint in Python that takes a user's name and returns a personalized greeting message.","input":"name = \"John\"","output":"from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('\/greeting', methods=['GET'])\ndef get_greeting(name):\n return 'Hello, ' + name + '!'\n\nif __name__ == '__main__':\n app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a REST API endpoint in Python that takes a user's name and returns a personalized greeting message.\n\n### Input:\nname = \"John\"\n\n### Output:\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('\/greeting', methods=['GET'])\ndef get_greeting(name):\n return 'Hello, ' + name + '!'\n\nif __name__ == '__main__':\n app.run()"}
{"instruction":"Write a Python program to allow a user to input a sentence and print the words in the sentence in reverse order.","input":"This is my sentence.","output":"def reverse_words_in_sentence(sentence):\n    words_list = sentence.split()\n    words_list.reverse()\n    reversed_sentence = \" \".join(words_list)\n    return reversed_sentence\n\nsentence = \"This is my sentence.\"\nresult = reverse_words_in_sentence(sentence)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to allow a user to input a sentence and print the words in the sentence in reverse order.\n\n### Input:\nThis is my sentence.\n\n### Output:\ndef reverse_words_in_sentence(sentence):\n    words_list = sentence.split()\n    words_list.reverse()\n    reversed_sentence = \" \".join(words_list)\n    return reversed_sentence\n\nsentence = \"This is my sentence.\"\nresult = reverse_words_in_sentence(sentence)\nprint(result)"}
{"instruction":"Create a JavaScript object containing a list of programming languages and their respective paradigms.","input":"Not applicable","output":"const languages = {\n 'C': 'Imperative',\n 'C++': 'Imperative',\n 'Java': 'Object-Oriented',\n 'Scala': 'Object-Oriented',\n 'Python': 'Object-Oriented',\n 'PHP': 'Object-Oriented',\n 'Go': 'Imperative\/Functional',\n 'Ruby': 'Object-Oriented\/Functional',\n ' JavaScript': 'Functional\/Prototype-based',\n};","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a JavaScript object containing a list of programming languages and their respective paradigms.\n\n### Input:\nNot applicable\n\n### Output:\nconst languages = {\n 'C': 'Imperative',\n 'C++': 'Imperative',\n 'Java': 'Object-Oriented',\n 'Scala': 'Object-Oriented',\n 'Python': 'Object-Oriented',\n 'PHP': 'Object-Oriented',\n 'Go': 'Imperative\/Functional',\n 'Ruby': 'Object-Oriented\/Functional',\n ' JavaScript': 'Functional\/Prototype-based',\n};"}
{"instruction":"Optimize a Python script that takes an array of integers and counts the number of pairs whose sum is equal to a given number.","input":"Array = [-2, 0, 4, 8, 10]\nNumber = 8","output":"def count_pairs(array, num): \n pairs = 0\n N = len(array) \n  \n # Version 1 \n for i in range(0, N): \n     for j in range(i+1, N): \n         if array[i] + array[j] == num: \n             pairs+= 1\n  \n # Version 2 \n processed = set() \n for element in array: \n     if num-element in processed: \n         pairs+= 1\n     else: \n         processed.add(element) \n  \n return pairs \n\nif __name__ == '__main__': \n array = [-2, 0, 4, 8 , 10] \n number = 8\n  \n print(\"Number of pairs that add upto {} is {}\".format(number, \n                              count_pairs(array, number)))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Python script that takes an array of integers and counts the number of pairs whose sum is equal to a given number.\n\n### Input:\nArray = [-2, 0, 4, 8, 10]\nNumber = 8\n\n### Output:\ndef count_pairs(array, num): \n pairs = 0\n N = len(array) \n  \n # Version 1 \n for i in range(0, N): \n     for j in range(i+1, N): \n         if array[i] + array[j] == num: \n             pairs+= 1\n  \n # Version 2 \n processed = set() \n for element in array: \n     if num-element in processed: \n         pairs+= 1\n     else: \n         processed.add(element) \n  \n return pairs \n\nif __name__ == '__main__': \n array = [-2, 0, 4, 8 , 10] \n number = 8\n  \n print(\"Number of pairs that add upto {} is {}\".format(number, \n                              count_pairs(array, number)))"}
{"instruction":"Create a Python script to evaluate an expression given as a string.","input":"Expression string: \"2 * (3 + 1)\"","output":"# input expression as a string\nexpr = \"2 * (3 + 1)\"\n\n# Evaluate the expression using eval()\nresult = eval(expr)\n\n# print the result\nprint(\"Result:\", result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to evaluate an expression given as a string.\n\n### Input:\nExpression string: \"2 * (3 + 1)\"\n\n### Output:\n# input expression as a string\nexpr = \"2 * (3 + 1)\"\n\n# Evaluate the expression using eval()\nresult = eval(expr)\n\n# print the result\nprint(\"Result:\", result)"}
{"instruction":"Convert GenBank flat files to GFF3 format using the provided Python script. Run the script with the following arguments: \n- '-i' or '--input_file' followed by the path to the input GBK file \n- '-o' or '--output_file' followed by the path to the output GFF file to be created (optional)\n- '--with_fasta' to include the FASTA section with genomic sequence at the end of the file (default)\n- '--no_fasta' to exclude the FASTA section \nThe script supports the following features: gene, CDS, mRNA, tRNA, rRNA and primary identifiers, gene product name annotations. The script links parent\/child features using the expected format convention of shared \/locus_tag entries for each feature of the gene graph (gene, mRNA, CDS). The script has only been tested with prokaryotic (non-spliced) genes.","input":"","output":"#!\/usr\/bin\/env python3\n\n\"\"\"\nThis is a script to convert GenBank flat files to GFF3 format with a specific focus on\ninitially maintaining as much structural annotation as possible, then expanding into\nfunctional annotation support.\n\nThis is not guaranteed to convert all features, but warnings will be printed wherever possible\nfor features which aren't included.\n\nCurrently supported:\n  Structural features:  gene, CDS, mRNA, tRNA, rRNA\n  Annotations: primary identifiers, gene product name\n\nThis is written to handle multi-entry GBK files\n\nCaveats:\n- Because the GBK flatfile format doesn't explicitly model parent\/child features, this script\n  links them using the expected format convention of shared \/locus_tag entries for each feature\n  of the gene graph (gene, mRNA, CDS)\n- It has only been tested with prokaryotic (non-spliced) genes\n\nAuthor: Joshua Orvis (jorvis AT gmail)\n\"\"\"\n\nimport argparse\nimport sys\nfrom collections import defaultdict\n\nfrom Bio import SeqIO\nfrom biocode import annotation, things, utils\n\n\ndef main():\n    parser = argparse.ArgumentParser( description='Convert GenBank flat files to GFF3 format')\n\n    ## output file to be written\n    parser.add_argument('-i', '--input_file', type=str, required=True, help='Path to an input GBK file' )\n    parser.add_argument('-o', '--output_file', type=str, required=False, help='Path to an output GFF file to be created' )\n    parser.add_argument('--with_fasta', dest='fasta', action='store_true', help='Include the FASTA section with genomic sequence at end of file.  (default)' )\n    parser.add_argument('--no_fasta', dest='fasta', action='store_false' )\n    parser.set_defaults(fasta=True)\n    args = parser.parse_args()\n\n    ## output will either be a file or STDOUT\n    ofh = sys.stdout\n    if args.output_file is not None:\n        ofh = open(args.output_file, 'wt')\n\n    ofh.write(\"##gff-version 3\\n\")\n\n    assemblies = dict()\n    current_assembly = None\n    current_gene = None\n    current_RNA = None\n\n    rna_count_by_gene = defaultdict(int)\n    exon_count_by_RNA = defaultdict(int)\n\n    seqs_pending_writes = False\n\n    features_skipped_count = 0\n\n    # each gb_record is a SeqRecord object\n    for gb_record in SeqIO.parse(open(args.input_file, \"r\"), \"genbank\"):\n        mol_id = gb_record.name\n\n        if mol_id not in assemblies:\n            assemblies[mol_id] = things.Assembly(id=mol_id)\n\n        if len(str(gb_record.seq)) > 0:\n            seqs_pending_writes = True\n            assemblies[mol_id].residues = str(gb_record.seq)\n            assemblies[mol_id].length = len(str(gb_record.seq))\n\n        current_assembly = assemblies[mol_id]\n            \n        # each feat is a SeqFeature object\n        for feat in gb_record.features:\n            #print(feat)\n            fmin = int(feat.location.start)\n            fmax = int(feat.location.end)\n\n            if feat.location.strand == 1:\n                strand = '+'\n            elif feat.location.strand == -1:\n                strand = '-'\n            else:\n                raise Exception(\"ERROR: unstranded feature encountered: {0}\".format(feat))\n\n            #print(\"{0} located at {1}-{2} strand:{3}\".format( locus_tag, fmin, fmax, strand ) )\n            if feat.type == 'source':\n                continue\n            \n            if feat.type == 'gene':\n                # print the previous gene (if there is one)\n                if current_gene is not None:\n                    gene.print_as(fh=ofh, source='GenBank', format='gff3')\n                \n                locus_tag = feat.qualifiers['locus_tag'][0]\n                gene = things.Gene(id=locus_tag, locus_tag=locus_tag)\n                gene.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand )\n                current_gene = gene\n                current_RNA = None\n\n            elif feat.type == 'mRNA':\n                locus_tag = feat.qualifiers['locus_tag'][0]\n                rna_count_by_gene[locus_tag] += 1\n                feat_id = \"{0}.mRNA.{1}\".format( locus_tag, rna_count_by_gene[locus_tag] )\n                \n                mRNA = things.mRNA(id=feat_id, parent=current_gene, locus_tag=locus_tag)\n                mRNA.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand )\n                gene.add_mRNA(mRNA)\n                current_RNA = mRNA\n\n                if feat_id in exon_count_by_RNA:\n                    raise Exception( \"ERROR: two different RNAs found with same ID: {0}\".format(feat_id) )\n                else:\n                    exon_count_by_RNA[feat_id] = 0\n\n            elif feat.type == 'tRNA':\n                locus_tag = feat.qualifiers['locus_tag'][0]\n                rna_count_by_gene[locus_tag] += 1\n                feat_id = \"{0}.tRNA.{1}\".format(locus_tag, rna_count_by_gene[locus_tag])\n\n                if 'product' in feat.qualifiers:\n                    anticodon = feat.qualifiers['product'][0]\n                else:\n                    anticodon = None\n                \n                tRNA = things.tRNA(id=feat_id, parent=current_gene, anticodon=anticodon)\n                tRNA.locate_on(target=current_assembly, fmin=fmin, fmax=fmax, strand=strand)\n                gene.add_tRNA(tRNA)\n                current_RNA = tRNA\n\n                if feat_id in exon_count_by_RNA:\n                    raise Exception( \"ERROR: two different RNAs found with same ID: {0}\".format(feat_id) )\n                else:\n                    exon_count_by_RNA[feat_id] = 0\n\n            elif feat.type == 'rRNA':\n                locus_tag = feat.qualifiers['locus_tag'][0]\n                rna_count_by_gene[locus_tag] += 1\n                feat_id = \"{0}.rRNA.{1}\".format(locus_tag, rna_count_by_gene[locus_tag])\n\n                if 'product' in feat.qualifiers:\n                    product = feat.qualifiers['product'][0]\n                else:\n                    product = None\n\n                annot = annotation.FunctionalAnnotation(product_name=product)\n                \n                rRNA = things.rRNA(id=feat_id, parent=current_gene, annotation=annot)\n                rRNA.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand )\n                gene.add_rRNA(rRNA)\n                current_RNA = rRNA\n\n                if feat_id in exon_count_by_RNA:\n                    raise Exception( \"ERROR: two different RNAs found with same ID: {0}\".format(feat_id) )\n                else:\n                    exon_count_by_RNA[feat_id] = 0\n\n            elif feat.type == 'CDS':\n                locus_tag = feat.qualifiers['locus_tag'][0]\n                # If processing a prokaryotic GBK, we'll encounter CDS before mRNA, so we have to\n                #  manually make one\n                if current_RNA is None:\n                    feat_id = \"{0}.mRNA.{1}\".format( locus_tag, rna_count_by_gene[locus_tag] )\n                    mRNA = things.mRNA(id=feat_id, parent=current_gene)\n                    mRNA.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand )\n                    gene.add_mRNA(mRNA)\n                    current_RNA = mRNA\n\n                    if 'product' in feat.qualifiers:\n                        product = feat.qualifiers['product'][0]\n                    else:\n                        product = None\n\n                    if 'gene' in feat.qualifiers:\n                        gene_symbol = feat.qualifiers['gene'][0]\n                    else:\n                        gene_symbol = None\n                        \n                    annot = annotation.FunctionalAnnotation(product_name=product, gene_symbol=gene_symbol)\n\n                    if 'db_xref' in feat.qualifiers:\n                        for dbxref in feat.qualifiers['db_xref']:\n                            annot.add_dbxref(dbxref)\n                    \n                    polypeptide_id = \"{0}.polypeptide.{1}\".format( locus_tag, rna_count_by_gene[locus_tag] )\n                    polypeptide = things.Polypeptide(id=polypeptide_id, parent=mRNA, annotation=annot)\n                    mRNA.add_polypeptide(polypeptide)\n                \n                exon_count_by_RNA[current_RNA.id] += 1\n                cds_id = \"{0}.CDS.{1}\".format( current_RNA.id, exon_count_by_RNA[current_RNA.id] )\n                current_CDS_phase = 0\n                \n                for loc in feat.location.parts:\n                    subfmin = int(loc.start)\n                    subfmax = int(loc.end)\n                    \n                    CDS = things.CDS(id=cds_id, parent=current_RNA)\n                    CDS.locate_on( target=current_assembly, fmin=subfmin, fmax=subfmax, strand=strand, phase=current_CDS_phase )\n                    current_RNA.add_CDS(CDS)\n\n                    # calculate the starting phase for the next CDS feature (in case there is one)\n                    # 0 + 6 = 0     TTGCAT\n                    # 0 + 7 = 2     TTGCATG\n                    # 1 + 6 = 1     TTGCAT\n                    # 2 + 7 = 1     TTGCATG\n                    # general: 3 - ((length - previous phase) % 3)\n                    current_CDS_phase = 3 - (((subfmax - subfmin) - current_CDS_phase) % 3)\n                    if current_CDS_phase == 3:\n                        current_CDS_phase = 0\n\n                    exon_id = \"{0}.exon.{1}\".format( current_RNA.id, exon_count_by_RNA[current_RNA.id] )\n                    exon = things.Exon(id=exon_id, parent=current_RNA)\n                    exon.locate_on( target=current_assembly, fmin=subfmin, fmax=subfmax, strand=strand )\n                    current_RNA.add_exon(exon)\n                    exon_count_by_RNA[current_RNA.id] += 1\n                \n            else:\n                print(\"WARNING: The following feature was skipped:\\n{0}\".format(feat))\n                features_skipped_count += 1\n\n    # don't forget to do the last gene, if there were any\n    if current_gene is not None:\n        gene.print_as(fh=ofh, source='GenBank', format='gff3')\n\n    if args.fasta is True:\n        if seqs_pending_writes is True:\n            ofh.write(\"##FASTA\\n\")\n            for assembly_id in assemblies:\n                ofh.write(\">{0}\\n\".format(assembly_id))\n                ofh.write(\"{0}\\n\".format(utils.wrapped_fasta(assemblies[assembly_id].residues)))\n\n    if features_skipped_count > 0:\n        print(\"Warning: {0} unsupported feature types were skipped\".format(features_skipped_count))\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert GenBank flat files to GFF3 format using the provided Python script. Run the script with the following arguments: \n- '-i' or '--input_file' followed by the path to the input GBK file \n- '-o' or '--output_file' followed by the path to the output GFF file to be created (optional)\n- '--with_fasta' to include the FASTA section with genomic sequence at the end of the file (default)\n- '--no_fasta' to exclude the FASTA section \nThe script supports the following features: gene, CDS, mRNA, tRNA, rRNA and primary identifiers, gene product name annotations. The script links parent\/child features using the expected format convention of shared \/locus_tag entries for each feature of the gene graph (gene, mRNA, CDS). The script has only been tested with prokaryotic (non-spliced) genes.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python3\n\n\"\"\"\nThis is a script to convert GenBank flat files to GFF3 format with a specific focus on\ninitially maintaining as much structural annotation as possible, then expanding into\nfunctional annotation support.\n\nThis is not guaranteed to convert all features, but warnings will be printed wherever possible\nfor features which aren't included.\n\nCurrently supported:\n  Structural features:  gene, CDS, mRNA, tRNA, rRNA\n  Annotations: primary identifiers, gene product name\n\nThis is written to handle multi-entry GBK files\n\nCaveats:\n- Because the GBK flatfile format doesn't explicitly model parent\/child features, this script\n  links them using the expected format convention of shared \/locus_tag entries for each feature\n  of the gene graph (gene, mRNA, CDS)\n- It has only been tested with prokaryotic (non-spliced) genes\n\nAuthor: Joshua Orvis (jorvis AT gmail)\n\"\"\"\n\nimport argparse\nimport sys\nfrom collections import defaultdict\n\nfrom Bio import SeqIO\nfrom biocode import annotation, things, utils\n\n\ndef main():\n    parser = argparse.ArgumentParser( description='Convert GenBank flat files to GFF3 format')\n\n    ## output file to be written\n    parser.add_argument('-i', '--input_file', type=str, required=True, help='Path to an input GBK file' )\n    parser.add_argument('-o', '--output_file', type=str, required=False, help='Path to an output GFF file to be created' )\n    parser.add_argument('--with_fasta', dest='fasta', action='store_true', help='Include the FASTA section with genomic sequence at end of file.  (default)' )\n    parser.add_argument('--no_fasta', dest='fasta', action='store_false' )\n    parser.set_defaults(fasta=True)\n    args = parser.parse_args()\n\n    ## output will either be a file or STDOUT\n    ofh = sys.stdout\n    if args.output_file is not None:\n        ofh = open(args.output_file, 'wt')\n\n    ofh.write(\"##gff-version 3\\n\")\n\n    assemblies = dict()\n    current_assembly = None\n    current_gene = None\n    current_RNA = None\n\n    rna_count_by_gene = defaultdict(int)\n    exon_count_by_RNA = defaultdict(int)\n\n    seqs_pending_writes = False\n\n    features_skipped_count = 0\n\n    # each gb_record is a SeqRecord object\n    for gb_record in SeqIO.parse(open(args.input_file, \"r\"), \"genbank\"):\n        mol_id = gb_record.name\n\n        if mol_id not in assemblies:\n            assemblies[mol_id] = things.Assembly(id=mol_id)\n\n        if len(str(gb_record.seq)) > 0:\n            seqs_pending_writes = True\n            assemblies[mol_id].residues = str(gb_record.seq)\n            assemblies[mol_id].length = len(str(gb_record.seq))\n\n        current_assembly = assemblies[mol_id]\n            \n        # each feat is a SeqFeature object\n        for feat in gb_record.features:\n            #print(feat)\n            fmin = int(feat.location.start)\n            fmax = int(feat.location.end)\n\n            if feat.location.strand == 1:\n                strand = '+'\n            elif feat.location.strand == -1:\n                strand = '-'\n            else:\n                raise Exception(\"ERROR: unstranded feature encountered: {0}\".format(feat))\n\n            #print(\"{0} located at {1}-{2} strand:{3}\".format( locus_tag, fmin, fmax, strand ) )\n            if feat.type == 'source':\n                continue\n            \n            if feat.type == 'gene':\n                # print the previous gene (if there is one)\n                if current_gene is not None:\n                    gene.print_as(fh=ofh, source='GenBank', format='gff3')\n                \n                locus_tag = feat.qualifiers['locus_tag'][0]\n                gene = things.Gene(id=locus_tag, locus_tag=locus_tag)\n                gene.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand )\n                current_gene = gene\n                current_RNA = None\n\n            elif feat.type == 'mRNA':\n                locus_tag = feat.qualifiers['locus_tag'][0]\n                rna_count_by_gene[locus_tag] += 1\n                feat_id = \"{0}.mRNA.{1}\".format( locus_tag, rna_count_by_gene[locus_tag] )\n                \n                mRNA = things.mRNA(id=feat_id, parent=current_gene, locus_tag=locus_tag)\n                mRNA.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand )\n                gene.add_mRNA(mRNA)\n                current_RNA = mRNA\n\n                if feat_id in exon_count_by_RNA:\n                    raise Exception( \"ERROR: two different RNAs found with same ID: {0}\".format(feat_id) )\n                else:\n                    exon_count_by_RNA[feat_id] = 0\n\n            elif feat.type == 'tRNA':\n                locus_tag = feat.qualifiers['locus_tag'][0]\n                rna_count_by_gene[locus_tag] += 1\n                feat_id = \"{0}.tRNA.{1}\".format(locus_tag, rna_count_by_gene[locus_tag])\n\n                if 'product' in feat.qualifiers:\n                    anticodon = feat.qualifiers['product'][0]\n                else:\n                    anticodon = None\n                \n                tRNA = things.tRNA(id=feat_id, parent=current_gene, anticodon=anticodon)\n                tRNA.locate_on(target=current_assembly, fmin=fmin, fmax=fmax, strand=strand)\n                gene.add_tRNA(tRNA)\n                current_RNA = tRNA\n\n                if feat_id in exon_count_by_RNA:\n                    raise Exception( \"ERROR: two different RNAs found with same ID: {0}\".format(feat_id) )\n                else:\n                    exon_count_by_RNA[feat_id] = 0\n\n            elif feat.type == 'rRNA':\n                locus_tag = feat.qualifiers['locus_tag'][0]\n                rna_count_by_gene[locus_tag] += 1\n                feat_id = \"{0}.rRNA.{1}\".format(locus_tag, rna_count_by_gene[locus_tag])\n\n                if 'product' in feat.qualifiers:\n                    product = feat.qualifiers['product'][0]\n                else:\n                    product = None\n\n                annot = annotation.FunctionalAnnotation(product_name=product)\n                \n                rRNA = things.rRNA(id=feat_id, parent=current_gene, annotation=annot)\n                rRNA.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand )\n                gene.add_rRNA(rRNA)\n                current_RNA = rRNA\n\n                if feat_id in exon_count_by_RNA:\n                    raise Exception( \"ERROR: two different RNAs found with same ID: {0}\".format(feat_id) )\n                else:\n                    exon_count_by_RNA[feat_id] = 0\n\n            elif feat.type == 'CDS':\n                locus_tag = feat.qualifiers['locus_tag'][0]\n                # If processing a prokaryotic GBK, we'll encounter CDS before mRNA, so we have to\n                #  manually make one\n                if current_RNA is None:\n                    feat_id = \"{0}.mRNA.{1}\".format( locus_tag, rna_count_by_gene[locus_tag] )\n                    mRNA = things.mRNA(id=feat_id, parent=current_gene)\n                    mRNA.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand )\n                    gene.add_mRNA(mRNA)\n                    current_RNA = mRNA\n\n                    if 'product' in feat.qualifiers:\n                        product = feat.qualifiers['product'][0]\n                    else:\n                        product = None\n\n                    if 'gene' in feat.qualifiers:\n                        gene_symbol = feat.qualifiers['gene'][0]\n                    else:\n                        gene_symbol = None\n                        \n                    annot = annotation.FunctionalAnnotation(product_name=product, gene_symbol=gene_symbol)\n\n                    if 'db_xref' in feat.qualifiers:\n                        for dbxref in feat.qualifiers['db_xref']:\n                            annot.add_dbxref(dbxref)\n                    \n                    polypeptide_id = \"{0}.polypeptide.{1}\".format( locus_tag, rna_count_by_gene[locus_tag] )\n                    polypeptide = things.Polypeptide(id=polypeptide_id, parent=mRNA, annotation=annot)\n                    mRNA.add_polypeptide(polypeptide)\n                \n                exon_count_by_RNA[current_RNA.id] += 1\n                cds_id = \"{0}.CDS.{1}\".format( current_RNA.id, exon_count_by_RNA[current_RNA.id] )\n                current_CDS_phase = 0\n                \n                for loc in feat.location.parts:\n                    subfmin = int(loc.start)\n                    subfmax = int(loc.end)\n                    \n                    CDS = things.CDS(id=cds_id, parent=current_RNA)\n                    CDS.locate_on( target=current_assembly, fmin=subfmin, fmax=subfmax, strand=strand, phase=current_CDS_phase )\n                    current_RNA.add_CDS(CDS)\n\n                    # calculate the starting phase for the next CDS feature (in case there is one)\n                    # 0 + 6 = 0     TTGCAT\n                    # 0 + 7 = 2     TTGCATG\n                    # 1 + 6 = 1     TTGCAT\n                    # 2 + 7 = 1     TTGCATG\n                    # general: 3 - ((length - previous phase) % 3)\n                    current_CDS_phase = 3 - (((subfmax - subfmin) - current_CDS_phase) % 3)\n                    if current_CDS_phase == 3:\n                        current_CDS_phase = 0\n\n                    exon_id = \"{0}.exon.{1}\".format( current_RNA.id, exon_count_by_RNA[current_RNA.id] )\n                    exon = things.Exon(id=exon_id, parent=current_RNA)\n                    exon.locate_on( target=current_assembly, fmin=subfmin, fmax=subfmax, strand=strand )\n                    current_RNA.add_exon(exon)\n                    exon_count_by_RNA[current_RNA.id] += 1\n                \n            else:\n                print(\"WARNING: The following feature was skipped:\\n{0}\".format(feat))\n                features_skipped_count += 1\n\n    # don't forget to do the last gene, if there were any\n    if current_gene is not None:\n        gene.print_as(fh=ofh, source='GenBank', format='gff3')\n\n    if args.fasta is True:\n        if seqs_pending_writes is True:\n            ofh.write(\"##FASTA\\n\")\n            for assembly_id in assemblies:\n                ofh.write(\">{0}\\n\".format(assembly_id))\n                ofh.write(\"{0}\\n\".format(utils.wrapped_fasta(assemblies[assembly_id].residues)))\n\n    if features_skipped_count > 0:\n        print(\"Warning: {0} unsupported feature types were skipped\".format(features_skipped_count))\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n"}
{"instruction":"Create a machine learning model in Python that predicts the amount of weekly sales of a store.","input":"Weekly sales Data of the store (2019-2020).","output":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# load dataset\ndf = pd.read_csv('sales_data.csv')\n\n# features and target values\nX = df.drop(['Weekly_Sales'], axis = 1)\ny = df.Weekly_Sales\n\n# split into train and test\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# train the model\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n\n# predict values\ny_pred = regressor.predict(X_test)\n\n# model evaluation\nfrom sklearn.metrics import mean_squared_error, r2_score\nrmse = np.sqrt(mean_squared_error(y_test, y_pred))\nr2 = r2_score(y_test, y_pred)\n\n# print results\nprint(\"Root Mean Squared Error: {}\".format(rmse))\nprint(\"R2 Score: {}\".format(r2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python that predicts the amount of weekly sales of a store.\n\n### Input:\nWeekly sales Data of the store (2019-2020).\n\n### Output:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# load dataset\ndf = pd.read_csv('sales_data.csv')\n\n# features and target values\nX = df.drop(['Weekly_Sales'], axis = 1)\ny = df.Weekly_Sales\n\n# split into train and test\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# train the model\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n\n# predict values\ny_pred = regressor.predict(X_test)\n\n# model evaluation\nfrom sklearn.metrics import mean_squared_error, r2_score\nrmse = np.sqrt(mean_squared_error(y_test, y_pred))\nr2 = r2_score(y_test, y_pred)\n\n# print results\nprint(\"Root Mean Squared Error: {}\".format(rmse))\nprint(\"R2 Score: {}\".format(r2))"}
{"instruction":"Write a valid Python program that takes a list and outputs the sum of the elements.","input":"[1, 2, 3]","output":"def sumListElements(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n\nresult = sumListElements([1,2,3]) \nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a valid Python program that takes a list and outputs the sum of the elements.\n\n### Input:\n[1, 2, 3]\n\n### Output:\ndef sumListElements(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n\nresult = sumListElements([1,2,3]) \nprint(result)"}
{"instruction":"Create a Python script to detect if a certain item is in a given list of items. The script should work for any type of item.","input":"items = [1,2,3,4,5]","output":"def detect_item(items, item):\n  if item in items:\n    return True\n  else:\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to detect if a certain item is in a given list of items. The script should work for any type of item.\n\n### Input:\nitems = [1,2,3,4,5]\n\n### Output:\ndef detect_item(items, item):\n  if item in items:\n    return True\n  else:\n    return False"}
{"instruction":"This code defines a Python class called `BTConfiguredValuesColumnInfo1025` that inherits from `ModelComposed`. It contains attributes such as `bt_type`, `parent_id`, `parent_name`, `parent_type`, `id`, `node_id`, and `specification`. To use this class, import it from the `bt_configured_values_column_info1025` module.","input":"","output":"# coding: utf-8\n\n\"\"\"\n    Onshape REST API\n\n    The Onshape REST API consumed by all clients.  # noqa: E501\n\n    The version of the OpenAPI document: 1.113\n    Contact: api-support@onshape.zendesk.com\n    Generated by: https:\/\/openapi-generator.tech\n\"\"\"\n\n\nfrom __future__ import absolute_import\nimport re  # noqa: F401\nimport sys  # noqa: F401\n\nimport six  # noqa: F401\nimport nulltype  # noqa: F401\n\nfrom onshape_client.oas.model_utils import (  # noqa: F401\n    ModelComposed,\n    ModelNormal,\n    ModelSimple,\n    date,\n    datetime,\n    file_type,\n    int,\n    none_type,\n    str,\n    validate_get_composed_info,\n)\n\ntry:\n    from onshape_client.oas.models import bt_configured_dimension_column_info2168\nexcept ImportError:\n    bt_configured_dimension_column_info2168 = sys.modules[\n        \"onshape_client.oas.models.bt_configured_dimension_column_info2168\"\n    ]\ntry:\n    from onshape_client.oas.models import bt_configured_feature_column_info1014\nexcept ImportError:\n    bt_configured_feature_column_info1014 = sys.modules[\n        \"onshape_client.oas.models.bt_configured_feature_column_info1014\"\n    ]\ntry:\n    from onshape_client.oas.models import bt_configured_parameter_column_info2900\nexcept ImportError:\n    bt_configured_parameter_column_info2900 = sys.modules[\n        \"onshape_client.oas.models.bt_configured_parameter_column_info2900\"\n    ]\ntry:\n    from onshape_client.oas.models import bt_configured_suppression_column_info2498\nexcept ImportError:\n    bt_configured_suppression_column_info2498 = sys.modules[\n        \"onshape_client.oas.models.bt_configured_suppression_column_info2498\"\n    ]\ntry:\n    from onshape_client.oas.models import bt_configured_values_column_info1025_all_of\nexcept ImportError:\n    bt_configured_values_column_info1025_all_of = sys.modules[\n        \"onshape_client.oas.models.bt_configured_values_column_info1025_all_of\"\n    ]\ntry:\n    from onshape_client.oas.models import bt_table_column_info1222\nexcept ImportError:\n    bt_table_column_info1222 = sys.modules[\n        \"onshape_client.oas.models.bt_table_column_info1222\"\n    ]\ntry:\n    from onshape_client.oas.models import bt_table_column_spec1967\nexcept ImportError:\n    bt_table_column_spec1967 = sys.modules[\n        \"onshape_client.oas.models.bt_table_column_spec1967\"\n    ]\n\n\nclass BTConfiguredValuesColumnInfo1025(ModelComposed):\n    \"\"\"NOTE: This class is auto generated by OpenAPI Generator.\n    Ref: https:\/\/openapi-generator.tech\n\n    Do not edit the class manually.\n\n    Attributes:\n      allowed_values (dict): The key is the tuple path to the attribute\n          and the for var_name this is (var_name,). The value is a dict\n          with a capitalized key describing the allowed value and an allowed\n          value. These dicts store the allowed enum values.\n      attribute_map (dict): The key is attribute name\n          and the value is json key in definition.\n      discriminator_value_class_map (dict): A dict to go from the discriminator\n          variable value to the discriminator class name.\n      validations (dict): The key is the tuple path to the attribute\n          and the for var_name this is (var_name,). The value is a dict\n          that stores validations for max_length, min_length, max_items,\n          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,\n          inclusive_minimum, and regex.\n      additional_properties_type (tuple): A tuple of classes accepted\n          as additional properties values.\n    \"\"\"\n\n    allowed_values = {\n        (\"parent_type\",): {\n            \"FEATURE\": \"FEATURE\",\n            \"INSTANCE\": \"INSTANCE\",\n            \"MATE\": \"MATE\",\n            \"MATE_CONNECTOR\": \"MATE_CONNECTOR\",\n            \"UNKNOWN\": \"UNKNOWN\",\n        },\n    }\n\n    validations = {}\n\n    additional_properties_type = None\n\n    @staticmethod\n    def openapi_types():\n        \"\"\"\n        This must be a class method so a model may have properties that are\n        of type self, this ensures that we don't create a cyclic import\n\n        Returns\n            openapi_types (dict): The key is attribute name\n                and the value is attribute type.\n        \"\"\"\n        return {\n            \"bt_type\": (str,),  # noqa: E501\n            \"parent_id\": (str,),  # noqa: E501\n            \"parent_name\": (str,),  # noqa: E501\n            \"parent_type\": (str,),  # noqa: E501\n            \"id\": (str,),  # noqa: E501\n            \"node_id\": (str,),  # noqa: E501\n            \"specification\": (\n                bt_table_column_spec1967.BTTableColumnSpec1967,\n            ),  # noqa: E501\n        }\n\n    @staticmethod\n    def discriminator():\n        return {\n            \"bt_type\": {\n                \"BTConfiguredFeatureColumnInfo-1014\": bt_configured_feature_column_info1014.BTConfiguredFeatureColumnInfo1014,\n                \"BTConfiguredDimensionColumnInfo-2168\": bt_configured_dimension_column_info2168.BTConfiguredDimensionColumnInfo2168,\n                \"BTConfiguredSuppressionColumnInfo-2498\": bt_configured_suppression_column_info2498.BTConfiguredSuppressionColumnInfo2498,\n                \"BTConfiguredParameterColumnInfo-2900\": bt_configured_parameter_column_info2900.BTConfiguredParameterColumnInfo2900,\n            },\n        }\n\n    attribute_map = {\n        \"bt_type\": \"btType\",  # noqa: E501\n        \"parent_id\": \"parentId\",  # noqa: E501\n        \"parent_name\": \"parentName\",  # noqa: E501\n        \"parent_type\": \"parentType\",  # noqa: E501\n        \"id\": \"id\",  # noqa: E501\n        \"node_id\": \"nodeId\",  # noqa: E501\n        \"specification\": \"specification\",  # noqa: E501\n    }\n\n    required_properties = set(\n        [\n            \"_data_store\",\n            \"_check_type\",\n            \"_from_server\",\n            \"_path_to_item\",\n            \"_configuration\",\n            \"_composed_instances\",\n            \"_var_name_to_model_instances\",\n            \"_additional_properties_model_instances\",\n        ]\n    )\n\n    def __init__(\n        self,\n        _check_type=True,\n        _from_server=False,\n        _path_to_item=(),\n        _configuration=None,\n        **kwargs\n    ):  # noqa: E501\n        \"\"\"bt_configured_values_column_info1025.BTConfiguredValuesColumnInfo1025 - a model defined in OpenAPI\n\n        Keyword Args:\n            _check_type (bool): if True, values for parameters in openapi_types\n                                will be type checked and a TypeError will be\n                                raised if the wrong type is input.\n                                Defaults to True\n            _path_to_item (tuple\/list): This is a list of keys or values to\n                                drill down to the model in received_data\n                                when deserializing a response\n            _from_server (bool): True if the data is from the server\n                                False if the data is from the client (default)\n            _configuration (Configuration): the instance to use when\n                                deserializing a file_type parameter.\n                                If passed, type conversion is attempted\n                                If omitted no type conversion is done.\n            bt_type (str): [optional]  # noqa: E501\n            parent_id (str): [optional]  # noqa: E501\n            parent_name (str): [optional]  # noqa: E501\n            parent_type (str): [optional]  # noqa: E501\n            id (str): [optional]  # noqa: E501\n            node_id (str): [optional]  # noqa: E501\n            specification (bt_table_column_spec1967.BTTableColumnSpec1967): [optional]  # noqa: E501\n        \"\"\"\n\n        self._data_store = {}\n        self._check_type = _check_type\n        self._from_server = _from_server\n        self._path_to_item = _path_to_item\n        self._configuration = _configuration\n\n        constant_args = {\n            \"_check_type\": _check_type,\n            \"_path_to_item\": _path_to_item,\n            \"_from_server\": _from_server,\n            \"_configuration\": _configuration,\n        }\n        required_args = {}\n        # remove args whose value is Null because they are unset\n        required_arg_names = list(required_args.keys())\n        for required_arg_name in required_arg_names:\n            if required_args[required_arg_name] is nulltype.Null:\n                del required_args[required_arg_name]\n        model_args = {}\n        model_args.update(required_args)\n        model_args.update(kwargs)\n        composed_info = validate_get_composed_info(constant_args, model_args, self)\n        self._composed_instances = composed_info[0]\n        self._var_name_to_model_instances = composed_info[1]\n        self._additional_properties_model_instances = composed_info[2]\n        unused_args = composed_info[3]\n\n        for var_name, var_value in required_args.items():\n            setattr(self, var_name, var_value)\n        for var_name, var_value in six.iteritems(kwargs):\n            if (\n                var_name in unused_args\n                and self._configuration is not None\n                and self._configuration.discard_unknown_keys\n                and not self._additional_properties_model_instances\n            ):\n                # discard variable.\n                continue\n            setattr(self, var_name, var_value)\n\n    @staticmethod\n    def _composed_schemas():\n        # we need this here to make our import statements work\n        # we must store _composed_schemas in here so the code is only run\n        # when we invoke this method. If we kept this at the class\n        # level we would get an error beause the class level\n        # code would be run when this module is imported, and these composed\n        # classes don't exist yet because their module has not finished\n        # loading\n        return {\n            \"anyOf\": [],\n            \"allOf\": [\n                bt_configured_values_column_info1025_all_of.BTConfiguredValuesColumnInfo1025AllOf,\n                bt_table_column_info1222.BTTableColumnInfo1222,\n            ],\n            \"oneOf\": [],\n        }\n\n    @classmethod\n    def get_discriminator_class(cls, from_server, data):\n        \"\"\"Returns the child class specified by the discriminator\"\"\"\n        discriminator = cls.discriminator()\n        discr_propertyname_py = list(discriminator.keys())[0]\n        discr_propertyname_js = cls.attribute_map[discr_propertyname_py]\n        if from_server:\n            class_name = data[discr_propertyname_js]\n        else:\n            class_name = data[discr_propertyname_py]\n        class_name_to_discr_class = discriminator[discr_propertyname_py]\n        return class_name_to_discr_class.get(class_name)\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code defines a Python class called `BTConfiguredValuesColumnInfo1025` that inherits from `ModelComposed`. It contains attributes such as `bt_type`, `parent_id`, `parent_name`, `parent_type`, `id`, `node_id`, and `specification`. To use this class, import it from the `bt_configured_values_column_info1025` module.\n\n### Input:\n\n\n### Output:\n# coding: utf-8\n\n\"\"\"\n    Onshape REST API\n\n    The Onshape REST API consumed by all clients.  # noqa: E501\n\n    The version of the OpenAPI document: 1.113\n    Contact: api-support@onshape.zendesk.com\n    Generated by: https:\/\/openapi-generator.tech\n\"\"\"\n\n\nfrom __future__ import absolute_import\nimport re  # noqa: F401\nimport sys  # noqa: F401\n\nimport six  # noqa: F401\nimport nulltype  # noqa: F401\n\nfrom onshape_client.oas.model_utils import (  # noqa: F401\n    ModelComposed,\n    ModelNormal,\n    ModelSimple,\n    date,\n    datetime,\n    file_type,\n    int,\n    none_type,\n    str,\n    validate_get_composed_info,\n)\n\ntry:\n    from onshape_client.oas.models import bt_configured_dimension_column_info2168\nexcept ImportError:\n    bt_configured_dimension_column_info2168 = sys.modules[\n        \"onshape_client.oas.models.bt_configured_dimension_column_info2168\"\n    ]\ntry:\n    from onshape_client.oas.models import bt_configured_feature_column_info1014\nexcept ImportError:\n    bt_configured_feature_column_info1014 = sys.modules[\n        \"onshape_client.oas.models.bt_configured_feature_column_info1014\"\n    ]\ntry:\n    from onshape_client.oas.models import bt_configured_parameter_column_info2900\nexcept ImportError:\n    bt_configured_parameter_column_info2900 = sys.modules[\n        \"onshape_client.oas.models.bt_configured_parameter_column_info2900\"\n    ]\ntry:\n    from onshape_client.oas.models import bt_configured_suppression_column_info2498\nexcept ImportError:\n    bt_configured_suppression_column_info2498 = sys.modules[\n        \"onshape_client.oas.models.bt_configured_suppression_column_info2498\"\n    ]\ntry:\n    from onshape_client.oas.models import bt_configured_values_column_info1025_all_of\nexcept ImportError:\n    bt_configured_values_column_info1025_all_of = sys.modules[\n        \"onshape_client.oas.models.bt_configured_values_column_info1025_all_of\"\n    ]\ntry:\n    from onshape_client.oas.models import bt_table_column_info1222\nexcept ImportError:\n    bt_table_column_info1222 = sys.modules[\n        \"onshape_client.oas.models.bt_table_column_info1222\"\n    ]\ntry:\n    from onshape_client.oas.models import bt_table_column_spec1967\nexcept ImportError:\n    bt_table_column_spec1967 = sys.modules[\n        \"onshape_client.oas.models.bt_table_column_spec1967\"\n    ]\n\n\nclass BTConfiguredValuesColumnInfo1025(ModelComposed):\n    \"\"\"NOTE: This class is auto generated by OpenAPI Generator.\n    Ref: https:\/\/openapi-generator.tech\n\n    Do not edit the class manually.\n\n    Attributes:\n      allowed_values (dict): The key is the tuple path to the attribute\n          and the for var_name this is (var_name,). The value is a dict\n          with a capitalized key describing the allowed value and an allowed\n          value. These dicts store the allowed enum values.\n      attribute_map (dict): The key is attribute name\n          and the value is json key in definition.\n      discriminator_value_class_map (dict): A dict to go from the discriminator\n          variable value to the discriminator class name.\n      validations (dict): The key is the tuple path to the attribute\n          and the for var_name this is (var_name,). The value is a dict\n          that stores validations for max_length, min_length, max_items,\n          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,\n          inclusive_minimum, and regex.\n      additional_properties_type (tuple): A tuple of classes accepted\n          as additional properties values.\n    \"\"\"\n\n    allowed_values = {\n        (\"parent_type\",): {\n            \"FEATURE\": \"FEATURE\",\n            \"INSTANCE\": \"INSTANCE\",\n            \"MATE\": \"MATE\",\n            \"MATE_CONNECTOR\": \"MATE_CONNECTOR\",\n            \"UNKNOWN\": \"UNKNOWN\",\n        },\n    }\n\n    validations = {}\n\n    additional_properties_type = None\n\n    @staticmethod\n    def openapi_types():\n        \"\"\"\n        This must be a class method so a model may have properties that are\n        of type self, this ensures that we don't create a cyclic import\n\n        Returns\n            openapi_types (dict): The key is attribute name\n                and the value is attribute type.\n        \"\"\"\n        return {\n            \"bt_type\": (str,),  # noqa: E501\n            \"parent_id\": (str,),  # noqa: E501\n            \"parent_name\": (str,),  # noqa: E501\n            \"parent_type\": (str,),  # noqa: E501\n            \"id\": (str,),  # noqa: E501\n            \"node_id\": (str,),  # noqa: E501\n            \"specification\": (\n                bt_table_column_spec1967.BTTableColumnSpec1967,\n            ),  # noqa: E501\n        }\n\n    @staticmethod\n    def discriminator():\n        return {\n            \"bt_type\": {\n                \"BTConfiguredFeatureColumnInfo-1014\": bt_configured_feature_column_info1014.BTConfiguredFeatureColumnInfo1014,\n                \"BTConfiguredDimensionColumnInfo-2168\": bt_configured_dimension_column_info2168.BTConfiguredDimensionColumnInfo2168,\n                \"BTConfiguredSuppressionColumnInfo-2498\": bt_configured_suppression_column_info2498.BTConfiguredSuppressionColumnInfo2498,\n                \"BTConfiguredParameterColumnInfo-2900\": bt_configured_parameter_column_info2900.BTConfiguredParameterColumnInfo2900,\n            },\n        }\n\n    attribute_map = {\n        \"bt_type\": \"btType\",  # noqa: E501\n        \"parent_id\": \"parentId\",  # noqa: E501\n        \"parent_name\": \"parentName\",  # noqa: E501\n        \"parent_type\": \"parentType\",  # noqa: E501\n        \"id\": \"id\",  # noqa: E501\n        \"node_id\": \"nodeId\",  # noqa: E501\n        \"specification\": \"specification\",  # noqa: E501\n    }\n\n    required_properties = set(\n        [\n            \"_data_store\",\n            \"_check_type\",\n            \"_from_server\",\n            \"_path_to_item\",\n            \"_configuration\",\n            \"_composed_instances\",\n            \"_var_name_to_model_instances\",\n            \"_additional_properties_model_instances\",\n        ]\n    )\n\n    def __init__(\n        self,\n        _check_type=True,\n        _from_server=False,\n        _path_to_item=(),\n        _configuration=None,\n        **kwargs\n    ):  # noqa: E501\n        \"\"\"bt_configured_values_column_info1025.BTConfiguredValuesColumnInfo1025 - a model defined in OpenAPI\n\n        Keyword Args:\n            _check_type (bool): if True, values for parameters in openapi_types\n                                will be type checked and a TypeError will be\n                                raised if the wrong type is input.\n                                Defaults to True\n            _path_to_item (tuple\/list): This is a list of keys or values to\n                                drill down to the model in received_data\n                                when deserializing a response\n            _from_server (bool): True if the data is from the server\n                                False if the data is from the client (default)\n            _configuration (Configuration): the instance to use when\n                                deserializing a file_type parameter.\n                                If passed, type conversion is attempted\n                                If omitted no type conversion is done.\n            bt_type (str): [optional]  # noqa: E501\n            parent_id (str): [optional]  # noqa: E501\n            parent_name (str): [optional]  # noqa: E501\n            parent_type (str): [optional]  # noqa: E501\n            id (str): [optional]  # noqa: E501\n            node_id (str): [optional]  # noqa: E501\n            specification (bt_table_column_spec1967.BTTableColumnSpec1967): [optional]  # noqa: E501\n        \"\"\"\n\n        self._data_store = {}\n        self._check_type = _check_type\n        self._from_server = _from_server\n        self._path_to_item = _path_to_item\n        self._configuration = _configuration\n\n        constant_args = {\n            \"_check_type\": _check_type,\n            \"_path_to_item\": _path_to_item,\n            \"_from_server\": _from_server,\n            \"_configuration\": _configuration,\n        }\n        required_args = {}\n        # remove args whose value is Null because they are unset\n        required_arg_names = list(required_args.keys())\n        for required_arg_name in required_arg_names:\n            if required_args[required_arg_name] is nulltype.Null:\n                del required_args[required_arg_name]\n        model_args = {}\n        model_args.update(required_args)\n        model_args.update(kwargs)\n        composed_info = validate_get_composed_info(constant_args, model_args, self)\n        self._composed_instances = composed_info[0]\n        self._var_name_to_model_instances = composed_info[1]\n        self._additional_properties_model_instances = composed_info[2]\n        unused_args = composed_info[3]\n\n        for var_name, var_value in required_args.items():\n            setattr(self, var_name, var_value)\n        for var_name, var_value in six.iteritems(kwargs):\n            if (\n                var_name in unused_args\n                and self._configuration is not None\n                and self._configuration.discard_unknown_keys\n                and not self._additional_properties_model_instances\n            ):\n                # discard variable.\n                continue\n            setattr(self, var_name, var_value)\n\n    @staticmethod\n    def _composed_schemas():\n        # we need this here to make our import statements work\n        # we must store _composed_schemas in here so the code is only run\n        # when we invoke this method. If we kept this at the class\n        # level we would get an error beause the class level\n        # code would be run when this module is imported, and these composed\n        # classes don't exist yet because their module has not finished\n        # loading\n        return {\n            \"anyOf\": [],\n            \"allOf\": [\n                bt_configured_values_column_info1025_all_of.BTConfiguredValuesColumnInfo1025AllOf,\n                bt_table_column_info1222.BTTableColumnInfo1222,\n            ],\n            \"oneOf\": [],\n        }\n\n    @classmethod\n    def get_discriminator_class(cls, from_server, data):\n        \"\"\"Returns the child class specified by the discriminator\"\"\"\n        discriminator = cls.discriminator()\n        discr_propertyname_py = list(discriminator.keys())[0]\n        discr_propertyname_js = cls.attribute_map[discr_propertyname_py]\n        if from_server:\n            class_name = data[discr_propertyname_js]\n        else:\n            class_name = data[discr_propertyname_py]\n        class_name_to_discr_class = discriminator[discr_propertyname_py]\n        return class_name_to_discr_class.get(class_name)\n"}
{"instruction":"Write a code in Python to find the sum of all the prime numbers less than or equal to a given number.","input":"","output":"def sum_of_primes_below(n):\n    prime_sum = 0\n    for num in range(2, n+1):\n        for i in range(2,num):\n            if (num % i == 0):\n                break\n        else:\n            prime_sum += num\n    return prime_sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python to find the sum of all the prime numbers less than or equal to a given number.\n\n### Input:\n\n\n### Output:\ndef sum_of_primes_below(n):\n    prime_sum = 0\n    for num in range(2, n+1):\n        for i in range(2,num):\n            if (num % i == 0):\n                break\n        else:\n            prime_sum += num\n    return prime_sum"}
{"instruction":"Suggest a function to round a float number to two decimal places in Python.","input":"","output":"def round_to_two_decimals(x):\n    return round(x, 2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a function to round a float number to two decimal places in Python.\n\n### Input:\n\n\n### Output:\ndef round_to_two_decimals(x):\n    return round(x, 2)"}
{"instruction":"Develop an automated tool that can convert Python code to C++ code.","input":"Not applicable","output":"import ast\nimport sys\n \nfrom cpp import parser, generator\n \n \ndef py2cpp(py_code):\n    py_ast = ast.parse(py_code)\n    cpp_ast = parser.convert(py_ast)\n    cpp_code = generator.convert(cpp_ast)\n    return cpp_code\n \nif __name__ == '__main__':\n    py_code = sys.stdin.read()\n    cpp_code = py2cpp(py_code)\n    sys.stdout.write(cpp_code)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an automated tool that can convert Python code to C++ code.\n\n### Input:\nNot applicable\n\n### Output:\nimport ast\nimport sys\n \nfrom cpp import parser, generator\n \n \ndef py2cpp(py_code):\n    py_ast = ast.parse(py_code)\n    cpp_ast = parser.convert(py_ast)\n    cpp_code = generator.convert(cpp_ast)\n    return cpp_code\n \nif __name__ == '__main__':\n    py_code = sys.stdin.read()\n    cpp_code = py2cpp(py_code)\n    sys.stdout.write(cpp_code)"}
{"instruction":"Convert the following Python program to a JavaScript program.","input":"def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)","output":"function factorial(n) {\n   if (n === 0) {\n      return 1;\n   } else {\n      return n * factorial(n - 1);\n   }\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following Python program to a JavaScript program.\n\n### Input:\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n### Output:\nfunction factorial(n) {\n   if (n === 0) {\n      return 1;\n   } else {\n      return n * factorial(n - 1);\n   }\n}"}
{"instruction":"Generate a web service in Python Flask to provide the weather data for a given date and region.","input":"","output":"# Import packages\nfrom flask import Flask, jsonify, request \nimport requests\n\n# Create Flask app \napp = Flask(__name__) \n\n# Make a GET request to fetch weather data for a given date and region \n@app.route('\/weather', methods=['GET'])\n\ndef get_weather_data(): \n    region = request.args.get('region') \n    date = request.args.get('date') \n    url = 'http:\/\/api.openweathermap.org\/data\/2.5\/forecast?q='+region+'&appid= YOUR_API_KEY'+'&date='+date \n    data = requests.get(url).json()\n\n    return jsonify(data)\n\nif __name__ == '__main__': \n app.run(host='0.0.0.0', port=8000, debug = True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a web service in Python Flask to provide the weather data for a given date and region.\n\n### Input:\n\n\n### Output:\n# Import packages\nfrom flask import Flask, jsonify, request \nimport requests\n\n# Create Flask app \napp = Flask(__name__) \n\n# Make a GET request to fetch weather data for a given date and region \n@app.route('\/weather', methods=['GET'])\n\ndef get_weather_data(): \n    region = request.args.get('region') \n    date = request.args.get('date') \n    url = 'http:\/\/api.openweathermap.org\/data\/2.5\/forecast?q='+region+'&appid= YOUR_API_KEY'+'&date='+date \n    data = requests.get(url).json()\n\n    return jsonify(data)\n\nif __name__ == '__main__': \n app.run(host='0.0.0.0', port=8000, debug = True)"}
{"instruction":"Construct an algorithm in Python that takes an array of numbers and removes all duplicates while maintaining the original order of the array.","input":"[1, 3, 2, 1, 5, 4, 8, 6, 7, 5]","output":"def remove_duplicates(arr):\n    seen = set()\n    seen_add = seen.add\n    return [x for x in arr if not (x in seen or seen_add(x))]\n\narr = [1, 3, 2, 1, 5, 4, 8, 6, 7, 5]\nresult = remove_duplicates(arr)\n\nprint(result)\n# Output: [1, 3, 2, 5, 4, 8, 6, 7]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm in Python that takes an array of numbers and removes all duplicates while maintaining the original order of the array.\n\n### Input:\n[1, 3, 2, 1, 5, 4, 8, 6, 7, 5]\n\n### Output:\ndef remove_duplicates(arr):\n    seen = set()\n    seen_add = seen.add\n    return [x for x in arr if not (x in seen or seen_add(x))]\n\narr = [1, 3, 2, 1, 5, 4, 8, 6, 7, 5]\nresult = remove_duplicates(arr)\n\nprint(result)\n# Output: [1, 3, 2, 5, 4, 8, 6, 7]"}
{"instruction":"Evaluate the following expression in Python.","input":"(4 + 6) * 5 - 8","output":"44","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEvaluate the following expression in Python.\n\n### Input:\n(4 + 6) * 5 - 8\n\n### Output:\n44"}
{"instruction":"Generate a function in Python that displays the Fibonacci sequence for a given value.","input":"n = 10","output":"def fibonacci(n):\n a, b = 0, 1\n result = []\n \n while a < n:\n result.append(a)\n a, b = b, a + b\n\n return result\n\nprint(fibonacci(n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python that displays the Fibonacci sequence for a given value.\n\n### Input:\nn = 10\n\n### Output:\ndef fibonacci(n):\n a, b = 0, 1\n result = []\n \n while a < n:\n result.append(a)\n a, b = b, a + b\n\n return result\n\nprint(fibonacci(n))"}
{"instruction":"Write a Python program to capitalize the first letter of each word in a sentence.","input":"","output":"# Capitalize the first letter of each word in a sentence\n\nsentence = \"python is a popular programming language\"\n\n# split the sentence into words \nwords = sentence.split(\" \") \n# capitalize the first letter of each word \nwords = [word.capitalize() for word in words] \n# join the edited words \nsentence = \" \".join(words) \n\nprint(sentence) # Output: Python Is A Popular Programming Language","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to capitalize the first letter of each word in a sentence.\n\n### Input:\n\n\n### Output:\n# Capitalize the first letter of each word in a sentence\n\nsentence = \"python is a popular programming language\"\n\n# split the sentence into words \nwords = sentence.split(\" \") \n# capitalize the first letter of each word \nwords = [word.capitalize() for word in words] \n# join the edited words \nsentence = \" \".join(words) \n\nprint(sentence) # Output: Python Is A Popular Programming Language"}
{"instruction":"Create a program in Python to detect the language of the given text.","input":"Text: \"Bonjour tout le monde!\"","output":"import nltk\nfrom nltk.classify import AffinityPropagation\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\ntext = \"Bonjour tout le monde!\"\nvectorizer = TfidfVectorizer(min_df = 1, analyzer = nltk.word_tokenize)\nX = vectorizer.fit_transform([text])\nclf = AffinityPropagation()\nclf.fit(X)\n\nlabels = clf.labels_\nlanguage = clf.cluster_centers_indices_[labels[0]]\nprint(vectorizer.get_feature_names()[language])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to detect the language of the given text.\n\n### Input:\nText: \"Bonjour tout le monde!\"\n\n### Output:\nimport nltk\nfrom nltk.classify import AffinityPropagation\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\ntext = \"Bonjour tout le monde!\"\nvectorizer = TfidfVectorizer(min_df = 1, analyzer = nltk.word_tokenize)\nX = vectorizer.fit_transform([text])\nclf = AffinityPropagation()\nclf.fit(X)\n\nlabels = clf.labels_\nlanguage = clf.cluster_centers_indices_[labels[0]]\nprint(vectorizer.get_feature_names()[language])"}
{"instruction":"Create a Python program to calculate the distance between two points given their x and y coordinates.","input":"x1 = 0\ny1 = 0\nx2 = 10\ny2 = 10","output":"def calculateDistance(x1, y1, x2, y2):\n distance = ((x2 - x1)**2 + (y2 - y1)**2)**(1\/2)\n return distance\n\n# main\nx1 = 0\ny1 = 0\nx2 = 10\ny2 = 10\n\ndist = calculateDistance(x1, y1, x2, y2)\n\nprint(\"Distance between the two points is\", dist)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the distance between two points given their x and y coordinates.\n\n### Input:\nx1 = 0\ny1 = 0\nx2 = 10\ny2 = 10\n\n### Output:\ndef calculateDistance(x1, y1, x2, y2):\n distance = ((x2 - x1)**2 + (y2 - y1)**2)**(1\/2)\n return distance\n\n# main\nx1 = 0\ny1 = 0\nx2 = 10\ny2 = 10\n\ndist = calculateDistance(x1, y1, x2, y2)\n\nprint(\"Distance between the two points is\", dist)"}
{"instruction":"Optimize the following Python code","input":"def sum_of_list(list):\nsum=0\nfor x in list:\nsum=sum+x\nreturn sum","output":"def sum_of_list(list):\n    return sum(list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python code\n\n### Input:\ndef sum_of_list(list):\nsum=0\nfor x in list:\nsum=sum+x\nreturn sum\n\n### Output:\ndef sum_of_list(list):\n    return sum(list)"}
{"instruction":"Write a Python program to print the number of prime numbers that exist within a given range.","input":"","output":"def primeCounet(start, end):\n    count = 0\n    for num in range(start, end + 1): \n        if num > 1: \n            for i in range(2, num): \n                if (num % i) == 0: \n                    break \n            else: \n                count = count + 1\n    return count\n\nif __name__ == \"__main__\":\n    start = 10\n    end = 30\n    print(primeCounet(start, end))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print the number of prime numbers that exist within a given range.\n\n### Input:\n\n\n### Output:\ndef primeCounet(start, end):\n    count = 0\n    for num in range(start, end + 1): \n        if num > 1: \n            for i in range(2, num): \n                if (num % i) == 0: \n                    break \n            else: \n                count = count + 1\n    return count\n\nif __name__ == \"__main__\":\n    start = 10\n    end = 30\n    print(primeCounet(start, end))"}
{"instruction":"Given the list of numbers, create a Python program that counts the number of even numbers in the list.","input":"[1,2,3,4,5]","output":"def count_evens(nums):\n    count = 0\n    for n in nums:\n        if n % 2 == 0:\n            count += 1\n    return count\n\nnums = [1,2,3,4,5]\nprint(count_evens(nums)) # prints 2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven the list of numbers, create a Python program that counts the number of even numbers in the list.\n\n### Input:\n[1,2,3,4,5]\n\n### Output:\ndef count_evens(nums):\n    count = 0\n    for n in nums:\n        if n % 2 == 0:\n            count += 1\n    return count\n\nnums = [1,2,3,4,5]\nprint(count_evens(nums)) # prints 2"}
{"instruction":"Code a web scraper in Python to extract information from a medium-size website","input":"The website to scrape is https:\/\/www.example.com\/.","output":"# Import the necessary libraries\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Set the URL to scrape\nURL = 'https:\/\/www.example.com\/'\n\n# Make the request\nr = requests.get(URL)\n\n# Parse the HTML response\nhtml_doc = r.text\nsoup = BeautifulSoup(html_doc, 'html.parser')\n\n# Extract the desired information\nfor link in soup.find_all('a'):\n print(link.get('href'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a web scraper in Python to extract information from a medium-size website\n\n### Input:\nThe website to scrape is https:\/\/www.example.com\/.\n\n### Output:\n# Import the necessary libraries\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Set the URL to scrape\nURL = 'https:\/\/www.example.com\/'\n\n# Make the request\nr = requests.get(URL)\n\n# Parse the HTML response\nhtml_doc = r.text\nsoup = BeautifulSoup(html_doc, 'html.parser')\n\n# Extract the desired information\nfor link in soup.find_all('a'):\n print(link.get('href'))"}
{"instruction":"Write a Python program to optimize a given code by introducing a divide and conquer strategy.","input":"# Function to find sum of all elements in a list \ndef list_sum_recursive(nums): \n    # Base case \n\tif len(nums) == 1: \n\t\treturn nums[0] \n\telse: \n\t\treturn nums[0] + list_sum_recursive(nums[1:]) \n\t\n# Driver code \nnums = [1, 2, 3, 4, 5] \nsum_nums = list_sum_recursive(nums) \nprint(sum_nums)","output":"# Function to find sum of all elements in a list \ndef list_sum_recursive(nums): \n    # Base case \n\tif len(nums) == 1: \n\t\treturn nums[0] \n\telse: \n\t\t# Divide & Conquer\n\t\tmid = len(nums) \/\/ 2\n\t\tleftsum = list_sum_recursive(nums[:mid])\n\t\trightsum = list_sum_recursive(nums[mid:])\n\t\treturn leftsum + rightsum\n\t\n# Driver code \nnums = [1, 2, 3, 4, 5] \nsum_nums = list_sum_recursive(nums) \nprint(sum_nums)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize a given code by introducing a divide and conquer strategy.\n\n### Input:\n# Function to find sum of all elements in a list \ndef list_sum_recursive(nums): \n    # Base case \n\tif len(nums) == 1: \n\t\treturn nums[0] \n\telse: \n\t\treturn nums[0] + list_sum_recursive(nums[1:]) \n\t\n# Driver code \nnums = [1, 2, 3, 4, 5] \nsum_nums = list_sum_recursive(nums) \nprint(sum_nums)\n\n### Output:\n# Function to find sum of all elements in a list \ndef list_sum_recursive(nums): \n    # Base case \n\tif len(nums) == 1: \n\t\treturn nums[0] \n\telse: \n\t\t# Divide & Conquer\n\t\tmid = len(nums) \/\/ 2\n\t\tleftsum = list_sum_recursive(nums[:mid])\n\t\trightsum = list_sum_recursive(nums[mid:])\n\t\treturn leftsum + rightsum\n\t\n# Driver code \nnums = [1, 2, 3, 4, 5] \nsum_nums = list_sum_recursive(nums) \nprint(sum_nums)"}
{"instruction":"Write a Python script to apply the Polynomial Regression model to analyse a dataset.","input":"The dataset consists of 10 observations with 2 features (X and Y).","output":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n\n# create the dataset\nx_train = np.array([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]])\ny_train = np.array([[3], [5], [7], [9], [11], [14], [17], [22], [25], [27]])\n\n# create and fit the polynomial regression model\npr = LinearRegression()\nquadratic = PolynomialFeatures(degree=2)\nx_train_quad = quadratic.fit_transform(x_train)\n\n# fit the model\npr.fit(x_train_quad, y_train)\n\n# predict the output for the values in x\ny_pred = pr.predict(x_train_quad)\n\n# visualize the input and output\nplt.scatter(x_train, y_train, label='Training Data')\nplt.plot(x_train, y_pred, label='Polynomial Regression', color='red')\nplt.legend()\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to apply the Polynomial Regression model to analyse a dataset.\n\n### Input:\nThe dataset consists of 10 observations with 2 features (X and Y).\n\n### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n\n# create the dataset\nx_train = np.array([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]])\ny_train = np.array([[3], [5], [7], [9], [11], [14], [17], [22], [25], [27]])\n\n# create and fit the polynomial regression model\npr = LinearRegression()\nquadratic = PolynomialFeatures(degree=2)\nx_train_quad = quadratic.fit_transform(x_train)\n\n# fit the model\npr.fit(x_train_quad, y_train)\n\n# predict the output for the values in x\ny_pred = pr.predict(x_train_quad)\n\n# visualize the input and output\nplt.scatter(x_train, y_train, label='Training Data')\nplt.plot(x_train, y_pred, label='Polynomial Regression', color='red')\nplt.legend()\nplt.show()"}
{"instruction":"Write a Python program that checks whether two given strings are anagrams or not.","input":"String1: bad\nString2: dab","output":"def is_anagram(s1, s2):\n    s1_dict = {}\n    s2_dict = {}\n\n    for char in s1:\n        if char in s1_dict:\n            s1_dict[char] += 1\n        else:\n            s1_dict[char] = 1\n\n    for char in s2:\n        if char in s2_dict:\n            s2_dict[char] += 1\n        else:\n            s2_dict[char] = 1\n\n    return s1_dict == s2_dict","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that checks whether two given strings are anagrams or not.\n\n### Input:\nString1: bad\nString2: dab\n\n### Output:\ndef is_anagram(s1, s2):\n    s1_dict = {}\n    s2_dict = {}\n\n    for char in s1:\n        if char in s1_dict:\n            s1_dict[char] += 1\n        else:\n            s1_dict[char] = 1\n\n    for char in s2:\n        if char in s2_dict:\n            s2_dict[char] += 1\n        else:\n            s2_dict[char] = 1\n\n    return s1_dict == s2_dict"}
{"instruction":"Write a Python program to create a dictionary with keys numbers and their squares as the values.","input":"","output":"def num_squares():\n  squares_dict = {}\n  for i in range(1,11):\n    squares_dict[i] = i*i \n  return squares_dict","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a dictionary with keys numbers and their squares as the values.\n\n### Input:\n\n\n### Output:\ndef num_squares():\n  squares_dict = {}\n  for i in range(1,11):\n    squares_dict[i] = i*i \n  return squares_dict"}
{"instruction":"Generate a list of combinations of three numbers from a given array in Python.","input":"[1, 2, 3, 4, 5]","output":"combinations = []\nfor i in range(len(arr)):\n    for j in range(i+1, len(arr)):\n        for k in range(j+1, len(arr)):\n            combinations.append([arr[i], arr[j], arr[k]])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of combinations of three numbers from a given array in Python.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ncombinations = []\nfor i in range(len(arr)):\n    for j in range(i+1, len(arr)):\n        for k in range(j+1, len(arr)):\n            combinations.append([arr[i], arr[j], arr[k]])"}
{"instruction":"Write a Python program for predicting the trend of a stock based on historical data.","input":"Not applicable","output":"import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Read the data into a pandas DataFrame \ndf = pd.read_csv('StockData.csv') \n\n# Create the independent variable x which is a 2D array \nx = df['Days'].values.reshape(-1,1) \n  \n# Create the dependent variable Y \ny = df['Price'].values.reshape(-1,1) \n  \n# Create the linear regression model  \nlr = LinearRegression() \n  \n# Fit the model  \nlr.fit(x, y) \n  \n# Get the slope of the model \nslope = lr.coef_ \nprint(\"Slope of the model is\", slope) \n  \n# Get the y-intercept of the model \nintercept = lr.intercept_ \nprint(\"y-intercept of the model is\", intercept) \n  \n# Get the predictions for the x values\ny_pred = lr.predict(x)\n\n# Get the trend of the stock\ntrend = np.sign(np.mean(y_pred)).astype('int')\nprint(\"Trend of the stock is\", trend)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program for predicting the trend of a stock based on historical data.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Read the data into a pandas DataFrame \ndf = pd.read_csv('StockData.csv') \n\n# Create the independent variable x which is a 2D array \nx = df['Days'].values.reshape(-1,1) \n  \n# Create the dependent variable Y \ny = df['Price'].values.reshape(-1,1) \n  \n# Create the linear regression model  \nlr = LinearRegression() \n  \n# Fit the model  \nlr.fit(x, y) \n  \n# Get the slope of the model \nslope = lr.coef_ \nprint(\"Slope of the model is\", slope) \n  \n# Get the y-intercept of the model \nintercept = lr.intercept_ \nprint(\"y-intercept of the model is\", intercept) \n  \n# Get the predictions for the x values\ny_pred = lr.predict(x)\n\n# Get the trend of the stock\ntrend = np.sign(np.mean(y_pred)).astype('int')\nprint(\"Trend of the stock is\", trend)"}
{"instruction":"Create a function in Python to get the largest element in a given list.","input":"[4,8,2,9,10]","output":"def get_largest_element(nums):\n    largest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n    return largest\n\n# Test the function\nnumbers = [4,8,2,9,10]\nprint(get_largest_element(numbers)) # Output: 10","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to get the largest element in a given list.\n\n### Input:\n[4,8,2,9,10]\n\n### Output:\ndef get_largest_element(nums):\n    largest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n    return largest\n\n# Test the function\nnumbers = [4,8,2,9,10]\nprint(get_largest_element(numbers)) # Output: 10"}
{"instruction":"Write a Python script to print the Fibonacci series from 0 to n.","input":"10","output":"def Fibonacci(n): \n   a = 0\n   b = 1\n   if n < 0: \n      print(\"Incorrect input\") \n   elif n == 0: \n      return a \n   elif n == 1: \n      return b \n   else: \n      for i in range(2,n+1): \n          c = a + b \n          a = b \n          b = c \n      return b \n  \nprint(Fibonacci(10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to print the Fibonacci series from 0 to n.\n\n### Input:\n10\n\n### Output:\ndef Fibonacci(n): \n   a = 0\n   b = 1\n   if n < 0: \n      print(\"Incorrect input\") \n   elif n == 0: \n      return a \n   elif n == 1: \n      return b \n   else: \n      for i in range(2,n+1): \n          c = a + b \n          a = b \n          b = c \n      return b \n  \nprint(Fibonacci(10))"}
{"instruction":"Create a Python code snippet toshuffle a given list of numbers.","input":"[1, 2, 3, 4, 5]","output":"import random \n  \ndef shuffle_list(list_nums):\n    random.shuffle(list_nums)\n    print(\"Shuffled list :\",  list_nums)\n\nlist_nums = [1, 2, 3, 4, 5]\nshuffle_list(list_nums)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code snippet toshuffle a given list of numbers.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\nimport random \n  \ndef shuffle_list(list_nums):\n    random.shuffle(list_nums)\n    print(\"Shuffled list :\",  list_nums)\n\nlist_nums = [1, 2, 3, 4, 5]\nshuffle_list(list_nums)"}
{"instruction":"Create a script to encode and decode Base64 strings using Python.","input":"Not applicable","output":"# encode\nimport base64\n\nstring = \"Hello World!\"\n\n#Encode to Base64\nencodedBytes = base64.b64encode(string.encode(\"utf-8\"))\nencodedString = str(encodedBytes, \"utf-8\")\n\nprint(encodedString)\n\n# decode\nencodedString = 'SGVsbG8gV29ybGQh'\n\n#Decode from Base64\ndecodedBytes = base64.b64decode(encodedString)\ndecodedString = str(decodedBytes, \"utf-8\")\n\nprint(decodedString)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a script to encode and decode Base64 strings using Python.\n\n### Input:\nNot applicable\n\n### Output:\n# encode\nimport base64\n\nstring = \"Hello World!\"\n\n#Encode to Base64\nencodedBytes = base64.b64encode(string.encode(\"utf-8\"))\nencodedString = str(encodedBytes, \"utf-8\")\n\nprint(encodedString)\n\n# decode\nencodedString = 'SGVsbG8gV29ybGQh'\n\n#Decode from Base64\ndecodedBytes = base64.b64decode(encodedString)\ndecodedString = str(decodedBytes, \"utf-8\")\n\nprint(decodedString)"}
{"instruction":"Write a python program to print the current date in ISO format","input":"","output":"import datetime\n\ndate_iso = datetime.datetime.now().isoformat()\nprint(date_iso)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to print the current date in ISO format\n\n### Input:\n\n\n### Output:\nimport datetime\n\ndate_iso = datetime.datetime.now().isoformat()\nprint(date_iso)"}
{"instruction":"Construct a Markov chain using Python to predict the next word in a sentence.","input":"Not applicable","output":"import random\n \n# Build the Markov chain\ndef build_chain(data):\n  chain = {}\n \n  for i in range(len(data)-2):\n    key = (data[i], data[i+1])\n    value = data[i+2]\n \n    if key in chain:\n      chain[key].append(value)\n    else:\n      chain[key] = [value]\n \n  return chain\n \n# Generate the output\ndef generate_output(chain, seed):\n  output = list(seed)\n \n  while True:\n    key = (seed[-2], seed[-1])\n    if key not in chain:\n      break\n    value = random.choice(chain[key])\n    output.append(value)\n    seed = seed[1:] + [value]\n   \n  return ' '.join(output)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Markov chain using Python to predict the next word in a sentence.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n \n# Build the Markov chain\ndef build_chain(data):\n  chain = {}\n \n  for i in range(len(data)-2):\n    key = (data[i], data[i+1])\n    value = data[i+2]\n \n    if key in chain:\n      chain[key].append(value)\n    else:\n      chain[key] = [value]\n \n  return chain\n \n# Generate the output\ndef generate_output(chain, seed):\n  output = list(seed)\n \n  while True:\n    key = (seed[-2], seed[-1])\n    if key not in chain:\n      break\n    value = random.choice(chain[key])\n    output.append(value)\n    seed = seed[1:] + [value]\n   \n  return ' '.join(output)"}
{"instruction":"Create a web scraper in Python to extract all links from a website.","input":"","output":"import requests\nfrom bs4 import BeautifulSoup\n\ndef get_all_links(url):\n  \n  # make a GET request to fetch the raw HTML content\n  html_content = requests.get(url).text\n  \n  # parse the html content\n  soup = BeautifulSoup(html_content, \"lxml\")\n  \n  # extract all links from web page \n  links = soup.find_all(\"a\")\n  return links","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python to extract all links from a website.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef get_all_links(url):\n  \n  # make a GET request to fetch the raw HTML content\n  html_content = requests.get(url).text\n  \n  # parse the html content\n  soup = BeautifulSoup(html_content, \"lxml\")\n  \n  # extract all links from web page \n  links = soup.find_all(\"a\")\n  return links"}
{"instruction":"Create a Python program to generate a random list of length 10 involving integers between 0 and 10.","input":"","output":"import random\n\nrandom_list = [random.randint(0, 10) for _ in range(10)]\nprint(random_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a random list of length 10 involving integers between 0 and 10.\n\n### Input:\n\n\n### Output:\nimport random\n\nrandom_list = [random.randint(0, 10) for _ in range(10)]\nprint(random_list)"}
{"instruction":"Explain how the fast Fourier transform algorithm works in Python.","input":"","output":"The Fast Fourier Transform (FFT) is an efficient algorithm used to compute the discrete Fourier transform (DFT). The algorithm works by decomposing a signal into its real and imaginary components and then applying a simple vector algorithm to compute the imaginary and real components simultaneously. In Python, the FFT algorithm can be implemented by using Numpy's fft function. In order to compute the FFT, the signal must first be broken into overlapping blocks and the DFT of each block must be computed separately. The blocks are then stitched together to form the final FFT result. The algorithm has several advantages, such as its ability to reduce the number of computations necessary to compute the DFT, as well as its parallelizability, meaning it can be efficiently executed on multiple CPUs.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain how the fast Fourier transform algorithm works in Python.\n\n### Input:\n\n\n### Output:\nThe Fast Fourier Transform (FFT) is an efficient algorithm used to compute the discrete Fourier transform (DFT). The algorithm works by decomposing a signal into its real and imaginary components and then applying a simple vector algorithm to compute the imaginary and real components simultaneously. In Python, the FFT algorithm can be implemented by using Numpy's fft function. In order to compute the FFT, the signal must first be broken into overlapping blocks and the DFT of each block must be computed separately. The blocks are then stitched together to form the final FFT result. The algorithm has several advantages, such as its ability to reduce the number of computations necessary to compute the DFT, as well as its parallelizability, meaning it can be efficiently executed on multiple CPUs."}
{"instruction":"Generate a code in Python that takes a string as input and removes duplicate characters from it","input":"St = \"DaSSmmoonnd\"","output":"st = \"DaSSmmoonnd\"\nst_list = list(st)\nst_set = set(st_list)\nst_nodupes = ''.join(st_set)\nprint(st_nodupes)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code in Python that takes a string as input and removes duplicate characters from it\n\n### Input:\nSt = \"DaSSmmoonnd\"\n\n### Output:\nst = \"DaSSmmoonnd\"\nst_list = list(st)\nst_set = set(st_list)\nst_nodupes = ''.join(st_set)\nprint(st_nodupes)"}
{"instruction":"Identify all bugs in the following Python code and suggest fixes.","input":"a = input('Enter a number: ')\nb = input('Enter a number: ')\nif a > b\n print('a is greater than b')","output":"a = int(input('Enter a number: '))\nb = int(input('Enter a number: '))\nif a > b:\n print('a is greater than b')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIdentify all bugs in the following Python code and suggest fixes.\n\n### Input:\na = input('Enter a number: ')\nb = input('Enter a number: ')\nif a > b\n print('a is greater than b')\n\n### Output:\na = int(input('Enter a number: '))\nb = int(input('Enter a number: '))\nif a > b:\n print('a is greater than b')"}
{"instruction":"Create a virtual environment using Python with the name \"myenv\"","input":"","output":"python -m venv myenv","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a virtual environment using Python with the name \"myenv\"\n\n### Input:\n\n\n### Output:\npython -m venv myenv"}
{"instruction":"Write a Python program to generate Pascal's Triangle up to n rows.","input":"","output":"def pascal_triangle(n): \n\t\n\t# 1st base case \n\tif n == 0: \n\t\treturn [] \n\telif n == 1: \n\t\treturn [[1]]\n\t  \n\t# 2nd base case \n\telse: \n\t\tnew_row = [1] \n\t\tresult = pascal_triangle(n-1) \n\t\tprevious_row = result[-1] \n\n\t\t# making the current row \n\t\tfor i in range(len(previous_row)-1): \n\t\t\tvalue = previous_row[i] + previous_row[i+1] \n\t\t\tnew_row.append(value) \n\n\t\tnew_row += [1] \n\t\tresult.append(new_row) \n\t\t\n\treturn result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate Pascal's Triangle up to n rows.\n\n### Input:\n\n\n### Output:\ndef pascal_triangle(n): \n\t\n\t# 1st base case \n\tif n == 0: \n\t\treturn [] \n\telif n == 1: \n\t\treturn [[1]]\n\t  \n\t# 2nd base case \n\telse: \n\t\tnew_row = [1] \n\t\tresult = pascal_triangle(n-1) \n\t\tprevious_row = result[-1] \n\n\t\t# making the current row \n\t\tfor i in range(len(previous_row)-1): \n\t\t\tvalue = previous_row[i] + previous_row[i+1] \n\t\t\tnew_row.append(value) \n\n\t\tnew_row += [1] \n\t\tresult.append(new_row) \n\t\t\n\treturn result"}
{"instruction":"Create a basic chatbot in Python to respond to user queries","input":"Not applicable","output":"import re\n\ndef chatbot_response(user_input):\n    user_input = user_input.lower()\n    \n    # Check for Greeting\n    if re.search(\"hello|hi|sup\", user_input):\n        return \"Hey there!\"\n    elif re.search(\"bye\", user_input):\n        return \"Goodbye\"\n    elif re.search(\"what's your name\", user_input):\n        return \"My name is ChatBot\"\n    else:\n        return \"I don't understand\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic chatbot in Python to respond to user queries\n\n### Input:\nNot applicable\n\n### Output:\nimport re\n\ndef chatbot_response(user_input):\n    user_input = user_input.lower()\n    \n    # Check for Greeting\n    if re.search(\"hello|hi|sup\", user_input):\n        return \"Hey there!\"\n    elif re.search(\"bye\", user_input):\n        return \"Goodbye\"\n    elif re.search(\"what's your name\", user_input):\n        return \"My name is ChatBot\"\n    else:\n        return \"I don't understand\""}
{"instruction":"Update the given Python program to print the result in reverse order.","input":"numbers = [1, 2, 3, 4, 5, 6]","output":"numbers = [1, 2, 3, 4, 5, 6]\n\nfor x in reversed(numbers):\n    print(x)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUpdate the given Python program to print the result in reverse order.\n\n### Input:\nnumbers = [1, 2, 3, 4, 5, 6]\n\n### Output:\nnumbers = [1, 2, 3, 4, 5, 6]\n\nfor x in reversed(numbers):\n    print(x)"}
{"instruction":"Assume a dataset X that contains columns with features and labels. Write a python script to process the dataset for pre-processing steps for machine learning model training.","input":"","output":"#import dataset\nimport pandas as pd \n\n#define data\nX = pd.DataFrame()\n\n#perform data normalization\nX = (X-X.mean())\/X.std()\n\n#one-hot encode the labels\nX = pd.get_dummies(X, columns=['label'])\n\n#split dataset into train and test\nx_train, x_test, y_train, y_test = train_test_split(X.drop(labels = 'label',axis = 1), X['label'], test_size = 0.2)\n\n#transform the train and test data\nscaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAssume a dataset X that contains columns with features and labels. Write a python script to process the dataset for pre-processing steps for machine learning model training.\n\n### Input:\n\n\n### Output:\n#import dataset\nimport pandas as pd \n\n#define data\nX = pd.DataFrame()\n\n#perform data normalization\nX = (X-X.mean())\/X.std()\n\n#one-hot encode the labels\nX = pd.get_dummies(X, columns=['label'])\n\n#split dataset into train and test\nx_train, x_test, y_train, y_test = train_test_split(X.drop(labels = 'label',axis = 1), X['label'], test_size = 0.2)\n\n#transform the train and test data\nscaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)"}
{"instruction":"Create a Python script that accesses a website's HTML.","input":"","output":"# Import the requests library \nimport requests \n\n# Get the website's content \nr = requests.get('https:\/\/www.example.com\/') \n\n# Get the webpage's HTML \nhtml = r.text\n\n# Print the HTML \nprint(html)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that accesses a website's HTML.\n\n### Input:\n\n\n### Output:\n# Import the requests library \nimport requests \n\n# Get the website's content \nr = requests.get('https:\/\/www.example.com\/') \n\n# Get the webpage's HTML \nhtml = r.text\n\n# Print the HTML \nprint(html)"}
{"instruction":"Create a Python program to generate a random forest model for the given dataset.","input":"The dataset contains the following columns:\n- age\n- gender\n- hours per week \n- marital status\n- education","output":"import pandas as pd\n\n# Read in the dataset\ndf = pd.read_csv('data.csv')\n\n# Specify the feature and target columns\nfeatures = ['age', 'gender', 'hours_per_week',\n            'marital_status', 'education']\ntarget = 'income'\n\n# Create the random forest model\nrf = RandomForestClassifier(n_estimators=100)\nrf.fit(df[features], df[target])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a random forest model for the given dataset.\n\n### Input:\nThe dataset contains the following columns:\n- age\n- gender\n- hours per week \n- marital status\n- education\n\n### Output:\nimport pandas as pd\n\n# Read in the dataset\ndf = pd.read_csv('data.csv')\n\n# Specify the feature and target columns\nfeatures = ['age', 'gender', 'hours_per_week',\n            'marital_status', 'education']\ntarget = 'income'\n\n# Create the random forest model\nrf = RandomForestClassifier(n_estimators=100)\nrf.fit(df[features], df[target])"}
{"instruction":"Given the following array of numbers, write a Python program to find the maximum element.","input":"numbers = [1, 43, 78, 3, 92, 42]","output":"#import max from the built-in library\nfrom max import max\n\n#initialize array of numbers\nnumbers = [1, 43, 78, 3, 92, 42]\n\n#find maximum element\nprint(max(numbers))\n\n#output\n92","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven the following array of numbers, write a Python program to find the maximum element.\n\n### Input:\nnumbers = [1, 43, 78, 3, 92, 42]\n\n### Output:\n#import max from the built-in library\nfrom max import max\n\n#initialize array of numbers\nnumbers = [1, 43, 78, 3, 92, 42]\n\n#find maximum element\nprint(max(numbers))\n\n#output\n92"}
{"instruction":"Create a function in Python that takes in two dates and returns the number of days between them.","input":"today = \"2020\/05\/20\"\ntomorrow = \"2020\/05\/21\"","output":"def compute_days_between_dates(date1, date2):\n    today_datetime = datetime.datetime.strptime(date1, '%Y\/%m\/%d')\n    tomorrow_datetime = datetime.datetime.strptime(date2, '%Y\/%m\/%d')\n    return (tomorrow_datetime-today_datetime).days\n\nprint(compute_days_between_dates(\"2020\/05\/20\", \"2020\/05\/21\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes in two dates and returns the number of days between them.\n\n### Input:\ntoday = \"2020\/05\/20\"\ntomorrow = \"2020\/05\/21\"\n\n### Output:\ndef compute_days_between_dates(date1, date2):\n    today_datetime = datetime.datetime.strptime(date1, '%Y\/%m\/%d')\n    tomorrow_datetime = datetime.datetime.strptime(date2, '%Y\/%m\/%d')\n    return (tomorrow_datetime-today_datetime).days\n\nprint(compute_days_between_dates(\"2020\/05\/20\", \"2020\/05\/21\"))"}
{"instruction":"Create a Python program to calculate the square root of a user-defined positive number.","input":"n = 100","output":"import math\n\nn = 100\n\n#Calculate the square root of a number\nsquare_root = math.sqrt(n)\n\nprint(f'Square root of {n} is {square_root}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the square root of a user-defined positive number.\n\n### Input:\nn = 100\n\n### Output:\nimport math\n\nn = 100\n\n#Calculate the square root of a number\nsquare_root = math.sqrt(n)\n\nprint(f'Square root of {n} is {square_root}')"}
{"instruction":"Design a Python program to print prime numbers between two given integer numbers.","input":"30, 50","output":"#Function to check if a number is prime\ndef checkPrime(num):\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n    else:\n        return False\n\n#Function to find prime numbers in given range\ndef getPrimeNumbersInRange(low,high):\n    if low < high:\n        for i in range(low,high + 1):\n            if checkPrime(i):\n                print(i,\" is a prime number\")\n\n#Call the function\nlow = 30\nhigh = 50\ngetPrimeNumbersInRange(low, high)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to print prime numbers between two given integer numbers.\n\n### Input:\n30, 50\n\n### Output:\n#Function to check if a number is prime\ndef checkPrime(num):\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n    else:\n        return False\n\n#Function to find prime numbers in given range\ndef getPrimeNumbersInRange(low,high):\n    if low < high:\n        for i in range(low,high + 1):\n            if checkPrime(i):\n                print(i,\" is a prime number\")\n\n#Call the function\nlow = 30\nhigh = 50\ngetPrimeNumbersInRange(low, high)"}
{"instruction":"Generate a Python program that displays all prime numbers between two numbers.","input":"50, 75","output":"def display_prime_numbers(min, max):\n    for n in range(min, max):\n        if is_prime(n):\n            print(n)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndisplay_prime_numbers(50, 75)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that displays all prime numbers between two numbers.\n\n### Input:\n50, 75\n\n### Output:\ndef display_prime_numbers(min, max):\n    for n in range(min, max):\n        if is_prime(n):\n            print(n)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndisplay_prime_numbers(50, 75)"}
{"instruction":"Given a duration in seconds, write a Python code to convert it into a string showing hours, minutes and seconds.","input":"32400","output":"def to_time_string(duration):\n    hours, remainder = divmod(duration, 3600)\n    minutes, seconds = divmod(remainder, 60)\n    return \"%02d:%02d:%02d\" % (hours, minutes, seconds)\n\nprint(to_time_string(32400))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a duration in seconds, write a Python code to convert it into a string showing hours, minutes and seconds.\n\n### Input:\n32400\n\n### Output:\ndef to_time_string(duration):\n    hours, remainder = divmod(duration, 3600)\n    minutes, seconds = divmod(remainder, 60)\n    return \"%02d:%02d:%02d\" % (hours, minutes, seconds)\n\nprint(to_time_string(32400))"}
{"instruction":"Write a function in Python to find the closest pair of points from a given set of points.","input":"[(-2, -4), (0, -2), (-1, 0), (3, -5), (-2, -3), (3, 2)]","output":"def find_closest_pair_of_points(points): \n  min_dist = float(\"inf\") \n  pair=[None, None]\n  for i in range(len(points)): \n    for j in range(i + 1, len(points)): \n      dist = dist_between_points(points[i], points[j]) \n      if dist < min_dist: \n        min_dist = dist \n        pair[0], pair[1] = points[i], points[j] \n  return pair \n\ndef dist_between_points(p1, p2): \n  x1, y1 = p1 \n  x2, y2 = p2 \n  return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to find the closest pair of points from a given set of points.\n\n### Input:\n[(-2, -4), (0, -2), (-1, 0), (3, -5), (-2, -3), (3, 2)]\n\n### Output:\ndef find_closest_pair_of_points(points): \n  min_dist = float(\"inf\") \n  pair=[None, None]\n  for i in range(len(points)): \n    for j in range(i + 1, len(points)): \n      dist = dist_between_points(points[i], points[j]) \n      if dist < min_dist: \n        min_dist = dist \n        pair[0], pair[1] = points[i], points[j] \n  return pair \n\ndef dist_between_points(p1, p2): \n  x1, y1 = p1 \n  x2, y2 = p2 \n  return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)"}
{"instruction":"Create a Python program that can print out a sentence in reverse using recursion.","input":"","output":"def reverse_sentence(sentence): \n  \n    # base condition for recursion\n    if len(sentence) == 0: \n        return \"\" \n  \n    # calling reverse_sentence recursively\n    return reverse_sentence(sentence[1:]) + sentence[0] \n  \n# driver code \nsentence = \"Geeks For Geeks\"\nprint(reverse_sentence(sentence)) \n\n# Output: skeeG roF skeeG","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that can print out a sentence in reverse using recursion.\n\n### Input:\n\n\n### Output:\ndef reverse_sentence(sentence): \n  \n    # base condition for recursion\n    if len(sentence) == 0: \n        return \"\" \n  \n    # calling reverse_sentence recursively\n    return reverse_sentence(sentence[1:]) + sentence[0] \n  \n# driver code \nsentence = \"Geeks For Geeks\"\nprint(reverse_sentence(sentence)) \n\n# Output: skeeG roF skeeG"}
{"instruction":"Generate a function in Python for generating a random integer between two given numbers (inclusive).","input":"","output":"import random\n\ndef random_integer(start, end):\n  return random.randint(start, end)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python for generating a random integer between two given numbers (inclusive).\n\n### Input:\n\n\n### Output:\nimport random\n\ndef random_integer(start, end):\n  return random.randint(start, end)"}
{"instruction":"Write a Python script to predict the expected values given some input data.","input":"Input data:\n\nX1 = [1, 2, 3, 4, 5] \nY1 = [5, 7, 4, 8, 3]\n\nX2 = [1, 4, 9, 16, 25]\nY2 = [6, 8, 10, 12, 15]","output":"#Linear regression\n\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nx1 = np.array(X1).reshape(-1,1)\ny1 = np.array(Y1).reshape(-1,1)\n\nx2 = np.array(X2).reshape(-1,1)\ny2 = np.array(Y2).reshape(-1,1)\n\nmodel1 = LinearRegression().fit(x1,y1)\nmodel2 = LinearRegression().fit(x2,y2)\n\npredictions1 = model1.predict(x1)\npredictions2 = model2.predict(x2)\n\nprint (\"Predicted values: \")\nprint (predictions1)\nprint (predictions2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to predict the expected values given some input data.\n\n### Input:\nInput data:\n\nX1 = [1, 2, 3, 4, 5] \nY1 = [5, 7, 4, 8, 3]\n\nX2 = [1, 4, 9, 16, 25]\nY2 = [6, 8, 10, 12, 15]\n\n### Output:\n#Linear regression\n\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nx1 = np.array(X1).reshape(-1,1)\ny1 = np.array(Y1).reshape(-1,1)\n\nx2 = np.array(X2).reshape(-1,1)\ny2 = np.array(Y2).reshape(-1,1)\n\nmodel1 = LinearRegression().fit(x1,y1)\nmodel2 = LinearRegression().fit(x2,y2)\n\npredictions1 = model1.predict(x1)\npredictions2 = model2.predict(x2)\n\nprint (\"Predicted values: \")\nprint (predictions1)\nprint (predictions2)"}
{"instruction":"Create a python program to remove duplicate entries in a list and return the unique items.","input":"[1, 1, 2, 3, 4, 4]","output":"def remove_duplicate(list): \n\treturn list(set(list)) \n\nremove_duplicate([1,1,2,3,4,4]) #returns [1, 2, 3, 4]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to remove duplicate entries in a list and return the unique items.\n\n### Input:\n[1, 1, 2, 3, 4, 4]\n\n### Output:\ndef remove_duplicate(list): \n\treturn list(set(list)) \n\nremove_duplicate([1,1,2,3,4,4]) #returns [1, 2, 3, 4]"}
{"instruction":"Generate a code in Python to check whether a number is a perfect square or not","input":"","output":"def is_perfect_square(num):\n    if num < 0:\n        return False\n\n    x = num \/\/ 2\n    seen = {x}\n    while x * x != num:\n        x = (x + (num \/\/ x)) \/\/ 2\n        if x in seen:\n            return False\n        seen.add(x)\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code in Python to check whether a number is a perfect square or not\n\n### Input:\n\n\n### Output:\ndef is_perfect_square(num):\n    if num < 0:\n        return False\n\n    x = num \/\/ 2\n    seen = {x}\n    while x * x != num:\n        x = (x + (num \/\/ x)) \/\/ 2\n        if x in seen:\n            return False\n        seen.add(x)\n    return True"}
{"instruction":"Create a program in Python that takes a list of strings and returns a new list with each string reversed.","input":"[\"Hello\", \"World\"]","output":"def reverse_list(strings):\n    return [s[::-1] for s in strings]\n\nstrings = [\"Hello\", \"World\"]\nprint(reverse_list(strings))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes a list of strings and returns a new list with each string reversed.\n\n### Input:\n[\"Hello\", \"World\"]\n\n### Output:\ndef reverse_list(strings):\n    return [s[::-1] for s in strings]\n\nstrings = [\"Hello\", \"World\"]\nprint(reverse_list(strings))"}
{"instruction":"Create a function in Python for evaluating a given polynomial expression.","input":"Expression: 4x4 + 7x3 + 5x2 + 8x","output":"def evaluate_polynomial(expression):\n  expression = expression.strip()\n  tokens  = expression.split(\"+\")\n  result = 0\n  for term in tokens:\n    term = term.strip()\n    coefficient, exponent = term.split(\"x\")\n    result += float(coefficient) * float(expoent)\n\n  return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python for evaluating a given polynomial expression.\n\n### Input:\nExpression: 4x4 + 7x3 + 5x2 + 8x\n\n### Output:\ndef evaluate_polynomial(expression):\n  expression = expression.strip()\n  tokens  = expression.split(\"+\")\n  result = 0\n  for term in tokens:\n    term = term.strip()\n    coefficient, exponent = term.split(\"x\")\n    result += float(coefficient) * float(expoent)\n\n  return result"}
{"instruction":"Build a command line application in Python to flatten an array of elements.","input":"arr = [1, [], [2, [[3], [4, 2]], 5, [[[[[[[[[[]]]]]]]]]]]","output":"def flatten(arr):\n    result = []\n \n    for item in arr:\n        if isinstance(item, list):\n            result.extend(flatten(item))\n        else:\n            result.append(item)\n \n    return result\n \nflattenedArr = flatten(arr)\nprint(flattenedArr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a command line application in Python to flatten an array of elements.\n\n### Input:\narr = [1, [], [2, [[3], [4, 2]], 5, [[[[[[[[[[]]]]]]]]]]]\n\n### Output:\ndef flatten(arr):\n    result = []\n \n    for item in arr:\n        if isinstance(item, list):\n            result.extend(flatten(item))\n        else:\n            result.append(item)\n \n    return result\n \nflattenedArr = flatten(arr)\nprint(flattenedArr)"}
{"instruction":"Create a Python function that takes in a string of text and returns it with all its vowels capitalized.","input":"\"amazing\"","output":"def capitalize_vowels(s): \n  \n # Converting string to list.  \n s_list = list(s) \n  \n # Defining a set of vowels  \n vowels = {'a', 'e', 'i', 'o', 'u'} \n \n # Iterate over list and capitalize vowels \n for i in range(0, len(s_list)): \n if s_list[i] in vowels: \n s_list[i] = s_list[i].upper() \n  \n # Joining list to string \n return ''.join(s_list) \n\ntext = 'amazing'\ncapitalized = capitalize_vowels(text)\n\nprint(capitalized)\n# Output:  \"AmAzIng\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes in a string of text and returns it with all its vowels capitalized.\n\n### Input:\n\"amazing\"\n\n### Output:\ndef capitalize_vowels(s): \n  \n # Converting string to list.  \n s_list = list(s) \n  \n # Defining a set of vowels  \n vowels = {'a', 'e', 'i', 'o', 'u'} \n \n # Iterate over list and capitalize vowels \n for i in range(0, len(s_list)): \n if s_list[i] in vowels: \n s_list[i] = s_list[i].upper() \n  \n # Joining list to string \n return ''.join(s_list) \n\ntext = 'amazing'\ncapitalized = capitalize_vowels(text)\n\nprint(capitalized)\n# Output:  \"AmAzIng\""}
{"instruction":"Use the Paginator library in Python to create a list of items divided into multiple pages.","input":"Items: [\"apple\", \"banana\", \"carrot\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"iceberg lettuce\"]","output":"from paginator import Paginator\n\ndef page_items(items, page_number):\n    p = Paginator(items, 3) # items per page\n    return p.page(page_number).object_list\n\npage_1 = page_items([\"apple\", \"banana\", \"carrot\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"iceberg lettuce\"], 1)\nprint(page_1) # [\"apple\", \"banana\", \"carrot\"]\n\npage_2 = page_items([\"apple\", \"banana\", \"carrot\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"iceberg lettuce\"], 2)\nprint(page_2) # [\"date\", \"elderberry\", \"fig\"]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the Paginator library in Python to create a list of items divided into multiple pages.\n\n### Input:\nItems: [\"apple\", \"banana\", \"carrot\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"iceberg lettuce\"]\n\n### Output:\nfrom paginator import Paginator\n\ndef page_items(items, page_number):\n    p = Paginator(items, 3) # items per page\n    return p.page(page_number).object_list\n\npage_1 = page_items([\"apple\", \"banana\", \"carrot\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"iceberg lettuce\"], 1)\nprint(page_1) # [\"apple\", \"banana\", \"carrot\"]\n\npage_2 = page_items([\"apple\", \"banana\", \"carrot\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"iceberg lettuce\"], 2)\nprint(page_2) # [\"date\", \"elderberry\", \"fig\"]"}
{"instruction":"Create a function in Python that takes a list of numbers as an argument and prints the highest value in the list.","input":"[13, 6, 8, -2, 20]","output":"def get_largest(nums):\n    largest = nums[0]\n    for num in nums[1:]:\n        if num > largest:\n            largest = num\n    return largest\n\nprint(get_largest([13, 6, 8, -2, 20]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes a list of numbers as an argument and prints the highest value in the list.\n\n### Input:\n[13, 6, 8, -2, 20]\n\n### Output:\ndef get_largest(nums):\n    largest = nums[0]\n    for num in nums[1:]:\n        if num > largest:\n            largest = num\n    return largest\n\nprint(get_largest([13, 6, 8, -2, 20]))"}
{"instruction":"Write an algorithm in Python to optimize the ordering of the items in an online shopping cart. The algorithm should optimize for the lowest shipping cost and the fastest delivery time.","input":"Items: \nitem1: weight- 5oz, cost- $2\nitem2: weight- 12oz, cost- $5\nitem3: weight- 8oz, cost- $3\nitem4: weight- 3oz, cost- $1\nShipping cost options: \nOption 1- $2 for first 5oz and +50\u00a2 per additional oz\nOption 2- $3 for first 6oz and +20\u00a2 per additional oz","output":"def optimize_shipping_cost(items):\n # sort items by cost\n items_by_cost = sorted(items, key=lambda x: x['cost'])\n \n # traverse the sorted list from the lowest to highest cost\n total_cost = 0 # total cost of the cart \n weight = 0 # total weight of the cart\n for item in items_by_cost:\n weight += item['weight']\n \n # select the least expensive shipping option\n if weight <= 5:\n total_cost = 2 \n elif 6 < weight < 12:\n total_cost = 3 + (weight - 6) * 0.2\n else:\n total_cost = 2 + (weight - 5) * 0.5\n \n return total_cost","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to optimize the ordering of the items in an online shopping cart. The algorithm should optimize for the lowest shipping cost and the fastest delivery time.\n\n### Input:\nItems: \nitem1: weight- 5oz, cost- $2\nitem2: weight- 12oz, cost- $5\nitem3: weight- 8oz, cost- $3\nitem4: weight- 3oz, cost- $1\nShipping cost options: \nOption 1- $2 for first 5oz and +50\u00a2 per additional oz\nOption 2- $3 for first 6oz and +20\u00a2 per additional oz\n\n### Output:\ndef optimize_shipping_cost(items):\n # sort items by cost\n items_by_cost = sorted(items, key=lambda x: x['cost'])\n \n # traverse the sorted list from the lowest to highest cost\n total_cost = 0 # total cost of the cart \n weight = 0 # total weight of the cart\n for item in items_by_cost:\n weight += item['weight']\n \n # select the least expensive shipping option\n if weight <= 5:\n total_cost = 2 \n elif 6 < weight < 12:\n total_cost = 3 + (weight - 6) * 0.2\n else:\n total_cost = 2 + (weight - 5) * 0.5\n \n return total_cost"}
{"instruction":"Train a machine learning model in Python using a given dataset and generate a confusion matrix.","input":"\/\/ Dataset of 1000 samples and 30 features","output":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0) \nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\nconfusion_matrix(y_test, predictions)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTrain a machine learning model in Python using a given dataset and generate a confusion matrix.\n\n### Input:\n\/\/ Dataset of 1000 samples and 30 features\n\n### Output:\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0) \nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\nconfusion_matrix(y_test, predictions)"}
{"instruction":"Create a program to perform a tf-idf calculation in Python.","input":"","output":"import re\nfrom collections import Counter\n\ndef tf_idf(documents):\n  # Split documents into tokens\n  tokens = [tokenize(document) for document in documents]\n  \n  # Get vocabulary\n  vocabulary = get_vocabulary(tokens)\n  \n  # Calculate Term Frequency \n  tf = get_termfrequency(tokens, vocabulary)\n  \n  # Calculate Document Frequency\n  df = get_documentfrequency(tokens, vocabulary)\n  \n  # Calculate Inverse Document Frequency \n  idf = get_inverse_documentfrequency(df, len(documents))\n  \n  # Calculate TF-IDF \n  tf_idf = get_tf_idf(tf, idf)\n  \n  # Return TF-IDF scores\n  return tf_idf\n\ndef tokenize(document):\n  # Tokenize document\n  tokens = re.findall(r\"[\\w']+\", document)\n  \n  # Return tokens\n  return tokens\n\ndef get_vocabulary(tokens):\n  # Get vocabulary\n  vocabulary = set()\n  for token_list in tokens:\n    vocabulary.update(set(token_list))\n  \n  # Return vocabulary\n  return vocabulary\n\ndef get_termfrequency(tokens, vocabulary):\n  # Initialize term frequency\n  tf = {word: [] for word in vocabulary}\n  \n  for token_list in tokens:\n    # Get word frequency\n    counter = Counter(token_list)\n    \n    # Update term frequency\n    for word in vocabulary:\n      tf[word] = tf[word] + [counter[word]]\n    \n  # Return term frequency\n  return tf\n\ndef get_documentfrequency(tokens, vocabulary):\n  # Initialize document frequency\n  df = {word: 0 for word in vocabulary}\n  \n  for token_list in tokens:\n    # Update document frequency\n    for word in vocabulary:\n      if word in token_list:\n        df[word] += 1\n  \n  # Return document frequency\n  return df\n\ndef get_inverse_documentfrequency(df, num_documents):\n  # Initialize Inverse document frequency\n  idf = {word: 0 for word in df.keys()}\n  \n  # Calculate inverse document frequency\n  for word in df.keys():\n    idf[word] = math.log(num_documents \/ df[word])\n  \n  # Return Inverse Document Frequency\n  return idf\n\ndef get_tf_idf(tf, idf):\n  # Initialize tf-idf\n  tf_idf = {word: [] for word in tf.keys()}\n  \n  # Calculate tf-idf\n  for word in tf.keys():\n    scores = [tf[word][k] * idf[word] for k in range(len(tf[word])) ]\n    tf_idf[word] = scores\n  \n  # Return tf-idf\n  return tf_idf","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to perform a tf-idf calculation in Python.\n\n### Input:\n\n\n### Output:\nimport re\nfrom collections import Counter\n\ndef tf_idf(documents):\n  # Split documents into tokens\n  tokens = [tokenize(document) for document in documents]\n  \n  # Get vocabulary\n  vocabulary = get_vocabulary(tokens)\n  \n  # Calculate Term Frequency \n  tf = get_termfrequency(tokens, vocabulary)\n  \n  # Calculate Document Frequency\n  df = get_documentfrequency(tokens, vocabulary)\n  \n  # Calculate Inverse Document Frequency \n  idf = get_inverse_documentfrequency(df, len(documents))\n  \n  # Calculate TF-IDF \n  tf_idf = get_tf_idf(tf, idf)\n  \n  # Return TF-IDF scores\n  return tf_idf\n\ndef tokenize(document):\n  # Tokenize document\n  tokens = re.findall(r\"[\\w']+\", document)\n  \n  # Return tokens\n  return tokens\n\ndef get_vocabulary(tokens):\n  # Get vocabulary\n  vocabulary = set()\n  for token_list in tokens:\n    vocabulary.update(set(token_list))\n  \n  # Return vocabulary\n  return vocabulary\n\ndef get_termfrequency(tokens, vocabulary):\n  # Initialize term frequency\n  tf = {word: [] for word in vocabulary}\n  \n  for token_list in tokens:\n    # Get word frequency\n    counter = Counter(token_list)\n    \n    # Update term frequency\n    for word in vocabulary:\n      tf[word] = tf[word] + [counter[word]]\n    \n  # Return term frequency\n  return tf\n\ndef get_documentfrequency(tokens, vocabulary):\n  # Initialize document frequency\n  df = {word: 0 for word in vocabulary}\n  \n  for token_list in tokens:\n    # Update document frequency\n    for word in vocabulary:\n      if word in token_list:\n        df[word] += 1\n  \n  # Return document frequency\n  return df\n\ndef get_inverse_documentfrequency(df, num_documents):\n  # Initialize Inverse document frequency\n  idf = {word: 0 for word in df.keys()}\n  \n  # Calculate inverse document frequency\n  for word in df.keys():\n    idf[word] = math.log(num_documents \/ df[word])\n  \n  # Return Inverse Document Frequency\n  return idf\n\ndef get_tf_idf(tf, idf):\n  # Initialize tf-idf\n  tf_idf = {word: [] for word in tf.keys()}\n  \n  # Calculate tf-idf\n  for word in tf.keys():\n    scores = [tf[word][k] * idf[word] for k in range(len(tf[word])) ]\n    tf_idf[word] = scores\n  \n  # Return tf-idf\n  return tf_idf"}
{"instruction":"Create a Python program to generate a boolean expression from an algebraic expression.","input":"expression = \"x + (y - z) > 0\"","output":"def convert_to_boolean(expression):\n    expression = expression.replace(\" \", \"\")\n    expression = expression.replace(\"(\", \"\")\n    expression = expression.replace(\")\", \"\")\n    \n    tokens = expression.split(\"+\")\n    for i in range(len(tokens)):\n        tokens[i] = tokens[i].replace(\"-\",\"+-\")\n    \n    expression = \"\".join(tokens)\n    expression = expression.replace(\" > 0\", \"\")\n    expression = expression.split(\"+\")\n    \n    boolean_expression = \" \".join(expression)\n    boolean_expression = boolean_expression.replace(\" x\", \"True\")\n    boolean_expression = boolean_expression.replace(\"y\", \"True\")\n    boolean_expression = boolean_expression.replace(\"z\", \"False\")\n    \n    return boolean_expression","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a boolean expression from an algebraic expression.\n\n### Input:\nexpression = \"x + (y - z) > 0\"\n\n### Output:\ndef convert_to_boolean(expression):\n    expression = expression.replace(\" \", \"\")\n    expression = expression.replace(\"(\", \"\")\n    expression = expression.replace(\")\", \"\")\n    \n    tokens = expression.split(\"+\")\n    for i in range(len(tokens)):\n        tokens[i] = tokens[i].replace(\"-\",\"+-\")\n    \n    expression = \"\".join(tokens)\n    expression = expression.replace(\" > 0\", \"\")\n    expression = expression.split(\"+\")\n    \n    boolean_expression = \" \".join(expression)\n    boolean_expression = boolean_expression.replace(\" x\", \"True\")\n    boolean_expression = boolean_expression.replace(\"y\", \"True\")\n    boolean_expression = boolean_expression.replace(\"z\", \"False\")\n    \n    return boolean_expression"}
{"instruction":"Develop an algorithm in Python that reverses a given string.","input":"\"hello world\"","output":"def reverseString(s): \n    return s[::-1] \n  \nstring = \"hello world\"\n\nprint(\"Original String:\", string) \nprint(\"Reversed String:\", reverseString(string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python that reverses a given string.\n\n### Input:\n\"hello world\"\n\n### Output:\ndef reverseString(s): \n    return s[::-1] \n  \nstring = \"hello world\"\n\nprint(\"Original String:\", string) \nprint(\"Reversed String:\", reverseString(string))"}
{"instruction":"To reproduce Figure 8 from Prsa et al. 2016, first set up a binary system with reasonable albedos and relevant parameters. Then compute light curves with wilson and horvat irradiation and plot the relative differences between the two as a function of phase, for several different values of the inclination. Use the given code as a reference.","input":"","output":"#!\/usr\/bin\/env python\n# coding: utf-8\n\n# Lambert Scattering (irrad_method='horvat')\n# ============================\n# \n# Setup\n# -----------------------------\n\n# Let's first make sure we have the latest version of PHOEBE 2.0 installed. (You can comment out this line if you don't use pip for your installation or don't want to update to the latest release).\n\n# In[ ]:\n\n\nget_ipython().system('pip install -I \"phoebe>=2.0,<2.1\"')\n\n\n# As always, let's do imports and initialize a logger and a new bundle.  See [Building a System](..\/tutorials\/building_a_system.html) for more details.\n\n# In[1]:\n\n\nget_ipython().run_line_magic('matplotlib', 'inline')\n\n\n# In[2]:\n\n\nimport phoebe\nfrom phoebe import u # units\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nlogger = phoebe.logger('error')\n\nb = phoebe.default_binary()\n\n\n# Relevant Parameters\n# ---------------------------------\n\n# For parameters that affect reflection and heating (irrad_frac_\\*) see the tutorial on [reflection and heating](.\/reflection_heating.ipynb).\n# \n# The 'irrad_method' compute option dictates whether irradiation is handled according to the new Horvat scheme which includes Lambert Scattering, Wilson's original reflection scheme, or ignored entirely.\n\n# In[3]:\n\n\nprint(b['irrad_method'])\n\n\n# Influence on Light Curves (fluxes)\n# ---------------------------------\n# \n# Let's (roughtly) reproduce Figure 8 from [Prsa et al. 2016](http:\/\/phoebe-project.org\/publications\/2016Prsa+) which shows the difference between Wilson and Horvat schemes for various inclinations.\n# \n# <img src=\"prsa+2016_fig8.png\" alt=\"Figure 8\" width=\"600px\"\/>\n# \n# First we'll roughly create a A0-K0 binary and set reasonable albedos.\n\n# In[4]:\n\n\nb['teff@primary'] = 11000\nb['rpole@primary'] = 2.5\nb['gravb_bol@primary'] = 1.0\n\nb['teff@secondary'] = 5000\nb['rpole@secondary'] = 0.85\n\nb['q@binary'] = 0.8\/3.0\n\nb.flip_constraint('mass@primary', solve_for='sma@binary')\nb['mass@primary'] = 3.0\n\n\n# In[5]:\n\n\nprint(b.filter(qualifier=['mass', 'rpole', 'teff'], context='component'))\n\n\n# In[6]:\n\n\nb['irrad_frac_refl_bol@primary'] = 1.0\nb['irrad_frac_refl_bol@secondary'] = 0.6\n\n\n# Now we'll compute the light curves with wilson and horvat irradiation, and plot the relative differences between the two as a function of phase, for several different values of the inclination.\n# \n# Note that Figure 8 excluded eclipse effects, but that ability is not included in PHOEBE 2.0, so there will be a slight discrepancy for inclinations which exhibit eclipses.\n\n# In[7]:\n\n\nphases = np.linspace(0,1,101)\nb.add_dataset('lc', times=b.to_time(phases))\n\n\n# In[8]:\n\n\nfor incl in [0,30,60,90]:\n    b.set_value('incl@binary', incl)\n    b.run_compute(irrad_method='wilson')\n    fluxes_wilson = b.get_value('fluxes', context='model')\n    b.run_compute(irrad_method='horvat')\n    fluxes_horvat = b.get_value('fluxes', context='model')\n    plt.plot(phases, (fluxes_wilson-fluxes_horvat)\/fluxes_wilson, label='i={}'.format(incl))\n    \nplt.xlabel('phase')\nplt.ylabel('[F(wilson) - F(horvat)] \/ F(wilson)')\nplt.legend(loc='upper center')\nplt.show()\n\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTo reproduce Figure 8 from Prsa et al. 2016, first set up a binary system with reasonable albedos and relevant parameters. Then compute light curves with wilson and horvat irradiation and plot the relative differences between the two as a function of phase, for several different values of the inclination. Use the given code as a reference.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n# coding: utf-8\n\n# Lambert Scattering (irrad_method='horvat')\n# ============================\n# \n# Setup\n# -----------------------------\n\n# Let's first make sure we have the latest version of PHOEBE 2.0 installed. (You can comment out this line if you don't use pip for your installation or don't want to update to the latest release).\n\n# In[ ]:\n\n\nget_ipython().system('pip install -I \"phoebe>=2.0,<2.1\"')\n\n\n# As always, let's do imports and initialize a logger and a new bundle.  See [Building a System](..\/tutorials\/building_a_system.html) for more details.\n\n# In[1]:\n\n\nget_ipython().run_line_magic('matplotlib', 'inline')\n\n\n# In[2]:\n\n\nimport phoebe\nfrom phoebe import u # units\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nlogger = phoebe.logger('error')\n\nb = phoebe.default_binary()\n\n\n# Relevant Parameters\n# ---------------------------------\n\n# For parameters that affect reflection and heating (irrad_frac_\\*) see the tutorial on [reflection and heating](.\/reflection_heating.ipynb).\n# \n# The 'irrad_method' compute option dictates whether irradiation is handled according to the new Horvat scheme which includes Lambert Scattering, Wilson's original reflection scheme, or ignored entirely.\n\n# In[3]:\n\n\nprint(b['irrad_method'])\n\n\n# Influence on Light Curves (fluxes)\n# ---------------------------------\n# \n# Let's (roughtly) reproduce Figure 8 from [Prsa et al. 2016](http:\/\/phoebe-project.org\/publications\/2016Prsa+) which shows the difference between Wilson and Horvat schemes for various inclinations.\n# \n# <img src=\"prsa+2016_fig8.png\" alt=\"Figure 8\" width=\"600px\"\/>\n# \n# First we'll roughly create a A0-K0 binary and set reasonable albedos.\n\n# In[4]:\n\n\nb['teff@primary'] = 11000\nb['rpole@primary'] = 2.5\nb['gravb_bol@primary'] = 1.0\n\nb['teff@secondary'] = 5000\nb['rpole@secondary'] = 0.85\n\nb['q@binary'] = 0.8\/3.0\n\nb.flip_constraint('mass@primary', solve_for='sma@binary')\nb['mass@primary'] = 3.0\n\n\n# In[5]:\n\n\nprint(b.filter(qualifier=['mass', 'rpole', 'teff'], context='component'))\n\n\n# In[6]:\n\n\nb['irrad_frac_refl_bol@primary'] = 1.0\nb['irrad_frac_refl_bol@secondary'] = 0.6\n\n\n# Now we'll compute the light curves with wilson and horvat irradiation, and plot the relative differences between the two as a function of phase, for several different values of the inclination.\n# \n# Note that Figure 8 excluded eclipse effects, but that ability is not included in PHOEBE 2.0, so there will be a slight discrepancy for inclinations which exhibit eclipses.\n\n# In[7]:\n\n\nphases = np.linspace(0,1,101)\nb.add_dataset('lc', times=b.to_time(phases))\n\n\n# In[8]:\n\n\nfor incl in [0,30,60,90]:\n    b.set_value('incl@binary', incl)\n    b.run_compute(irrad_method='wilson')\n    fluxes_wilson = b.get_value('fluxes', context='model')\n    b.run_compute(irrad_method='horvat')\n    fluxes_horvat = b.get_value('fluxes', context='model')\n    plt.plot(phases, (fluxes_wilson-fluxes_horvat)\/fluxes_wilson, label='i={}'.format(incl))\n    \nplt.xlabel('phase')\nplt.ylabel('[F(wilson) - F(horvat)] \/ F(wilson)')\nplt.legend(loc='upper center')\nplt.show()\n\n"}
{"instruction":"Generate a Python program to generate a dictionary from two lists.","input":"list1 = [1, 2, 3]\nlist2 = ['a', 'b', 'c']","output":"def generate_dictionary(list1, list2):\n  \"\"\"Generate a dictionary from two lists\"\"\"\n  # Check if both the lists have the same length\n  if len(list1) == len(list2):\n    # Create a dictionary\n    dictionary = {}\n    # Create a loop\n    for i in range(len(list1)):\n      # Map the corresponding elements of the lists\n      dictionary[list1[i]] = list2[i]\n    return dictionary\n  else:\n    raise Exception('Two lists must have the same length')\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = ['a', 'b', 'c']\n    result = generate_dictionary(list1, list2)\n    print('Dictionary from two lists: ', result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to generate a dictionary from two lists.\n\n### Input:\nlist1 = [1, 2, 3]\nlist2 = ['a', 'b', 'c']\n\n### Output:\ndef generate_dictionary(list1, list2):\n  \"\"\"Generate a dictionary from two lists\"\"\"\n  # Check if both the lists have the same length\n  if len(list1) == len(list2):\n    # Create a dictionary\n    dictionary = {}\n    # Create a loop\n    for i in range(len(list1)):\n      # Map the corresponding elements of the lists\n      dictionary[list1[i]] = list2[i]\n    return dictionary\n  else:\n    raise Exception('Two lists must have the same length')\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = ['a', 'b', 'c']\n    result = generate_dictionary(list1, list2)\n    print('Dictionary from two lists: ', result)"}
{"instruction":"Write a Python program to filter strings linked by commas and return only strings longer than three characters in length.","input":"\"Code,Generation,Task,Instructions\"","output":"def filter_strings(string):\n    strings = string.split(',')\n    filtered = []\n    for s in strings:\n        if len(s) > 3:\n            filtered.append(s)\n    return filtered\n\nfiltered_strings = filter_strings(\"Code,Generation,Task,Instructions\")\nprint(filtered_strings)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to filter strings linked by commas and return only strings longer than three characters in length.\n\n### Input:\n\"Code,Generation,Task,Instructions\"\n\n### Output:\ndef filter_strings(string):\n    strings = string.split(',')\n    filtered = []\n    for s in strings:\n        if len(s) > 3:\n            filtered.append(s)\n    return filtered\n\nfiltered_strings = filter_strings(\"Code,Generation,Task,Instructions\")\nprint(filtered_strings)"}
{"instruction":"Generate a python dictionary with all prime numbers between 10 and 30 as keys and their squares as values.","input":"","output":"prime_nos = {11, 13, 17, 19, 23, 29}\n\noutput_dict = {prime_no: prime_no**2 for prime_no in prime_nos}\nprint(output_dict)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python dictionary with all prime numbers between 10 and 30 as keys and their squares as values.\n\n### Input:\n\n\n### Output:\nprime_nos = {11, 13, 17, 19, 23, 29}\n\noutput_dict = {prime_no: prime_no**2 for prime_no in prime_nos}\nprint(output_dict)"}
{"instruction":"Create a program in Python which seeks for a number in a given list.","input":"[2, 5, 7, 8, 11, 13]\nseek: 8","output":"list = [2, 5, 7, 8, 11, 13]\nseek = 8\n\nif seek in list:\n    print(\"Found!\")\nelse:\n    print(\"Not Found\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python which seeks for a number in a given list.\n\n### Input:\n[2, 5, 7, 8, 11, 13]\nseek: 8\n\n### Output:\nlist = [2, 5, 7, 8, 11, 13]\nseek = 8\n\nif seek in list:\n    print(\"Found!\")\nelse:\n    print(\"Not Found\")"}
{"instruction":"Design a function in Python that takes in two numbers and outputs their sum.","input":"2, 3","output":"def sumTwo(a, b):\n  return a + b\n\nprint(sumTwo(2, 3))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python that takes in two numbers and outputs their sum.\n\n### Input:\n2, 3\n\n### Output:\ndef sumTwo(a, b):\n  return a + b\n\nprint(sumTwo(2, 3))"}
{"instruction":"Write a Python program to collect user input and determine how many numbers in the list are greater than the user's number.","input":"User input: 9\nList: [6, 7, 8, 9, 10]","output":"def count_greater_than_user(user_num, num_list):\n    count = 0\n    for number in num_list:\n       if number > user_num:\n           count += 1\n    return count\n\nuser_num = int(input(\"User input: \"))  \nnum_list = [6, 7, 8, 9, 10]\n\nresult = count_greater_than_user(user_num, num_list)\nprint(f\"Number of numbers greater than {user_num}: {result}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to collect user input and determine how many numbers in the list are greater than the user's number.\n\n### Input:\nUser input: 9\nList: [6, 7, 8, 9, 10]\n\n### Output:\ndef count_greater_than_user(user_num, num_list):\n    count = 0\n    for number in num_list:\n       if number > user_num:\n           count += 1\n    return count\n\nuser_num = int(input(\"User input: \"))  \nnum_list = [6, 7, 8, 9, 10]\n\nresult = count_greater_than_user(user_num, num_list)\nprint(f\"Number of numbers greater than {user_num}: {result}\")"}
{"instruction":"Write a Python program to find the missing number from a given list.","input":"[2, 3, 1, 5]","output":"def find_missing_number(list_of_numbers):\n    max_number = max(list_of_numbers)\n    total_sum = (max_number * (max_number + 1)) \/\/ 2\n    actual_sum = 0\n    \n    for number in list_of_numbers:\n        actual_sum += number\n    return total_sum - actual_sum\n\nlist_of_numbers = [2, 3, 1, 5]\nmissing_number = find_missing_number(list_of_numbers)\nprint(\"Missing number: \", missing_number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the missing number from a given list.\n\n### Input:\n[2, 3, 1, 5]\n\n### Output:\ndef find_missing_number(list_of_numbers):\n    max_number = max(list_of_numbers)\n    total_sum = (max_number * (max_number + 1)) \/\/ 2\n    actual_sum = 0\n    \n    for number in list_of_numbers:\n        actual_sum += number\n    return total_sum - actual_sum\n\nlist_of_numbers = [2, 3, 1, 5]\nmissing_number = find_missing_number(list_of_numbers)\nprint(\"Missing number: \", missing_number)"}
{"instruction":"Construct a decision tree model using a given dataset using Python.","input":"","output":"import numpy as np\nimport pandas as pd\nfrom sklearn import tree\n\n# Load the dataset\ndata = pd.read_csv(\"data.csv\")\n\n# Create target variable\ntarget = data[\"target\"]\n\n# Create feature variables\nfeatures = data.drop(columns = [\"target\"])\n\n# Create decision tree model\nmodel = tree.DecisionTreeClassifier()\nmodel.fit(features, target)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a decision tree model using a given dataset using Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn import tree\n\n# Load the dataset\ndata = pd.read_csv(\"data.csv\")\n\n# Create target variable\ntarget = data[\"target\"]\n\n# Create feature variables\nfeatures = data.drop(columns = [\"target\"])\n\n# Create decision tree model\nmodel = tree.DecisionTreeClassifier()\nmodel.fit(features, target)"}
{"instruction":"Write a code snippet in Python to split a string by its whitespaces.","input":"string = \"This is a sample string\"","output":"string = \"This is a sample string\"\nstr_list = string.split()\nprint(str_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet in Python to split a string by its whitespaces.\n\n### Input:\nstring = \"This is a sample string\"\n\n### Output:\nstring = \"This is a sample string\"\nstr_list = string.split()\nprint(str_list)"}
{"instruction":"Design an algorithm using Python to select the kth largest element from a list.","input":"[5, 10, 15, 20, 25]","output":"def getKthLargest(arr, k): \n    arr.sort() \n  \n    # Return the k'th largest element\n    return arr[len(arr)-k]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm using Python to select the kth largest element from a list.\n\n### Input:\n[5, 10, 15, 20, 25]\n\n### Output:\ndef getKthLargest(arr, k): \n    arr.sort() \n  \n    # Return the k'th largest element\n    return arr[len(arr)-k]"}
{"instruction":"Edit this Python code to improve the runtime complexity of the program.","input":"def solve(list):\n    max_len = 0\n    for i in range(len(list)-1):\n        for j in range(i+1, len(list)):\n            if list[i] == list[j]:\n                cur_len = 0\n                k = 0\n                while i+k < len(list) and j+k < len(list) and list[i+k] == list[j+k]:\n                    cur_len += 1\n                    k += 1\n                max_len = max(max_len, cur_len)\n    return max_len","output":"def solve(list):\n    max_len = 0\n    longest_prefix = [0] * len(list)\n    for i in range(1, len(list)):\n        if list[i] == list[i-1]:\n            longest_prefix[i] = longest_prefix[i-1] + 1\n        else:\n            longest_prefix[i] = 0\n        max_len = max(max_len, longest_prefix[i])\n    return max_len","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit this Python code to improve the runtime complexity of the program.\n\n### Input:\ndef solve(list):\n    max_len = 0\n    for i in range(len(list)-1):\n        for j in range(i+1, len(list)):\n            if list[i] == list[j]:\n                cur_len = 0\n                k = 0\n                while i+k < len(list) and j+k < len(list) and list[i+k] == list[j+k]:\n                    cur_len += 1\n                    k += 1\n                max_len = max(max_len, cur_len)\n    return max_len\n\n### Output:\ndef solve(list):\n    max_len = 0\n    longest_prefix = [0] * len(list)\n    for i in range(1, len(list)):\n        if list[i] == list[i-1]:\n            longest_prefix[i] = longest_prefix[i-1] + 1\n        else:\n            longest_prefix[i] = 0\n        max_len = max(max_len, longest_prefix[i])\n    return max_len"}
{"instruction":"Write a function in Python to classify a given number into even or odd.","input":"","output":"def classify_num(num):\n    if (num % 2 == 0):\n        return \"Even\"\n    else:\n        return \"Odd\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to classify a given number into even or odd.\n\n### Input:\n\n\n### Output:\ndef classify_num(num):\n    if (num % 2 == 0):\n        return \"Even\"\n    else:\n        return \"Odd\""}
{"instruction":"Translate the following pseudocode to Python language.","input":"\/\/ set n to the number of array elements\n\/\/ find max value of array\nmax_val = array[1]\nfor i = 2 to n\n    if (array[i] > max_val)\n        max_val = array[i]","output":"def find_max_val(array):\n    n = len(array)\n    max_val = array[0]\n    for i in range(1, n):\n        if array[i] > max_val:\n            max_val = array[i]\n    return max_val\n\nif __name__ == '__main__':\n    array = [1, 2, 3, 4, 5]\n    print(find_max_val(array))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTranslate the following pseudocode to Python language.\n\n### Input:\n\/\/ set n to the number of array elements\n\/\/ find max value of array\nmax_val = array[1]\nfor i = 2 to n\n    if (array[i] > max_val)\n        max_val = array[i]\n\n### Output:\ndef find_max_val(array):\n    n = len(array)\n    max_val = array[0]\n    for i in range(1, n):\n        if array[i] > max_val:\n            max_val = array[i]\n    return max_val\n\nif __name__ == '__main__':\n    array = [1, 2, 3, 4, 5]\n    print(find_max_val(array))"}
{"instruction":"Design a Python program to switch the indices of two values in a given 2-dimensional array.","input":"arr = [[1, 2], [3, 4]]","output":"def switchIndexes(arr): \n    result = [[0 for i in range(len(arr[0]))] for j in range(len(arr))] \n    for i in range(0, len(arr)): \n        for j in range(0, len(arr[0])): \n            result[j][i] = arr[i][j] \n    return result \n\nswitchIndexes(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to switch the indices of two values in a given 2-dimensional array.\n\n### Input:\narr = [[1, 2], [3, 4]]\n\n### Output:\ndef switchIndexes(arr): \n    result = [[0 for i in range(len(arr[0]))] for j in range(len(arr))] \n    for i in range(0, len(arr)): \n        for j in range(0, len(arr[0])): \n            result[j][i] = arr[i][j] \n    return result \n\nswitchIndexes(arr)"}
{"instruction":"Can you suggest a code snippet that fetches the last element from a list in Python?","input":"","output":"my_list = [3, 5, 7, 9, 2]\n\nlast_element = my_list[-1]\nprint('Last element in the list is %d' % (last_element))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you suggest a code snippet that fetches the last element from a list in Python?\n\n### Input:\n\n\n### Output:\nmy_list = [3, 5, 7, 9, 2]\n\nlast_element = my_list[-1]\nprint('Last element in the list is %d' % (last_element))"}
{"instruction":"Develop a Python function that can detect loops in a given linked list.","input":"Linked List: head -> 1 -> 2 -> 3 -> 4 -> 5","output":"def detectLoop(head):\n    slow_p = head \n    fast_p = head \n    while(slow_p and fast_p and fast_p.next): \n        slow_p = slow_p.next\n        fast_p = fast_p.next.next\n        if slow_p == fast_p:\n            return True\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function that can detect loops in a given linked list.\n\n### Input:\nLinked List: head -> 1 -> 2 -> 3 -> 4 -> 5\n\n### Output:\ndef detectLoop(head):\n    slow_p = head \n    fast_p = head \n    while(slow_p and fast_p and fast_p.next): \n        slow_p = slow_p.next\n        fast_p = fast_p.next.next\n        if slow_p == fast_p:\n            return True\n    return False"}
{"instruction":"Write a Python program to classify a given list of numbers into three groups based on their range.","input":"[1, 2, 5, 9, 20]","output":"def classify_list(list):\n    result = {\"low\": [], \"mid\": [], \"high\": []}\n    for num in list:\n        if num < 4:\n            result[\"low\"].append(num)\n        elif num < 10:\n            result[\"mid\"].append(num)\n        else:\n            result[\"high\"].append(num)\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify a given list of numbers into three groups based on their range.\n\n### Input:\n[1, 2, 5, 9, 20]\n\n### Output:\ndef classify_list(list):\n    result = {\"low\": [], \"mid\": [], \"high\": []}\n    for num in list:\n        if num < 4:\n            result[\"low\"].append(num)\n        elif num < 10:\n            result[\"mid\"].append(num)\n        else:\n            result[\"high\"].append(num)\n    return result"}
{"instruction":"Create a program in Python to count the number of time a particular character appears in a given string.","input":"Input string: \"Hello, World!\"\nCharacter: \"l\"","output":"def count_char_in_string(string, char):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == char:\n            count += 1\n    return count\n\nstring = \"Hello, World!\"\nchar = \"l\"\ncount = count_char_in_string(string, char)\nprint(\"The number of times\", char, \"appears in the string is:\", count)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to count the number of time a particular character appears in a given string.\n\n### Input:\nInput string: \"Hello, World!\"\nCharacter: \"l\"\n\n### Output:\ndef count_char_in_string(string, char):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == char:\n            count += 1\n    return count\n\nstring = \"Hello, World!\"\nchar = \"l\"\ncount = count_char_in_string(string, char)\nprint(\"The number of times\", char, \"appears in the string is:\", count)"}
{"instruction":"Create a web application using Python and Flask with an endpoint that takes a customers address as an input and matches it with the nearest store from a list of stores.","input":"address: \"1 Main Street, Anytown, US\"\n\nstores: \n{\n  id: 1,\n  name: \"Store A\",\n  address: \"2 Main Street, Anytown, US\"\n}, \n{\n  id: 2,\n  name: \"Store B\",\n  address: \"3 Main Street, Anytown, US\"\n}, \n{\n  id: 3,\n  name: \"Store C\",\n  address: \"4 Main Street, Anytown, US\"\n}","output":"import flask\nfrom geopy.distance import geodesic\n\n\napp = flask.Flask('__name__')\n\nstores = [\n    {\n        'store_id': 1,\n        'name': 'Store A',\n        'address': '2 Main Street, Anytown, US'\n    },\n    {\n        'store_id': 2,\n        'name': 'Store B',\n        'address': '3 Main Street, Anytown, US'\n    },\n    {\n        'store_id': 3,\n        'name': 'Store C',\n        'address': '4 Main Street, Anytown, US'\n    },\n]\n\n@app.route('\/nearest-store', methods=['POST'])\ndef find_nearest_store():\n    request_data = flask.request.get_json()\n    address = request_data.get('address')\n\n    nearest_store = None\n    min_distance = None\n\n    for store in stores:\n        store_distance = geodesic(address, store['address']).kilometers\n        if not min_distance or store_distance < min_distance:\n            nearest_store = store\n            min_distance = store_distance\n\n    return flask.jsonify({\n        'store': nearest_store\n    })\n\nif __name__ == '__main__':\n    app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application using Python and Flask with an endpoint that takes a customers address as an input and matches it with the nearest store from a list of stores.\n\n### Input:\naddress: \"1 Main Street, Anytown, US\"\n\nstores: \n{\n  id: 1,\n  name: \"Store A\",\n  address: \"2 Main Street, Anytown, US\"\n}, \n{\n  id: 2,\n  name: \"Store B\",\n  address: \"3 Main Street, Anytown, US\"\n}, \n{\n  id: 3,\n  name: \"Store C\",\n  address: \"4 Main Street, Anytown, US\"\n}\n\n### Output:\nimport flask\nfrom geopy.distance import geodesic\n\n\napp = flask.Flask('__name__')\n\nstores = [\n    {\n        'store_id': 1,\n        'name': 'Store A',\n        'address': '2 Main Street, Anytown, US'\n    },\n    {\n        'store_id': 2,\n        'name': 'Store B',\n        'address': '3 Main Street, Anytown, US'\n    },\n    {\n        'store_id': 3,\n        'name': 'Store C',\n        'address': '4 Main Street, Anytown, US'\n    },\n]\n\n@app.route('\/nearest-store', methods=['POST'])\ndef find_nearest_store():\n    request_data = flask.request.get_json()\n    address = request_data.get('address')\n\n    nearest_store = None\n    min_distance = None\n\n    for store in stores:\n        store_distance = geodesic(address, store['address']).kilometers\n        if not min_distance or store_distance < min_distance:\n            nearest_store = store\n            min_distance = store_distance\n\n    return flask.jsonify({\n        'store': nearest_store\n    })\n\nif __name__ == '__main__':\n    app.run()"}
{"instruction":"Create a python function that takes two inputs as a string and returns their concatenated output.","input":"String a = 'Hello'\nString b = 'World'","output":"def concat(a,b):\n    return a+b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function that takes two inputs as a string and returns their concatenated output.\n\n### Input:\nString a = 'Hello'\nString b = 'World'\n\n### Output:\ndef concat(a,b):\n    return a+b"}
{"instruction":"The given code is a Python function that creates a natural language game creation program. To use the program, call the function \"start_dialog\" with an optional output file name as an argument. The program will prompt the user for input to define the game environment, including board size, number of players, game pieces, player moves, win conditions, and game end conditions. The program will then generate a GDL file based on the user's input and write it to the output file. If no output file name is provided, the program will write the GDL file to a file named \"test.txt\".","input":"","output":"import re\nimport nltk\nimport ngdl_classes\nimport global_vars\nimport ngdl_parse\nimport ngdl_write\n\ndef start_dialog(output_file=\"test.txt\"):\n    if not global_vars.initialized:\n        global_vars.init()\n    else:\n        reset_global_vars()\n\n    output = open(output_file, \"w\")\n    print \"Welcome to the natural language game creation program for general game playing!\"\n    #print \"First we'll work on defining the game environment\"\n    board_size_dialog()\n    player_num_dialog()\n    game_pieces_dialog()\n    player_move_dialog()\n    goal_dialog()\n    terminal_dialog()\n    ngdl_write.write_gdl_file(output)\n    output.close()\n\ndef reset_global_vars():\n    global_vars.write_queue = [[\"noop\", []], [\"goals\", []], [\"terminal\", []], [\"distinct_cells\", []], [\"successors\", [50]]]\n    global_vars.game = ngdl_classes.Game()\n    \ndef board_size_dialog():\n    in_board_size = raw_input(\"What size would you like your board to be?: \")\n    valid_input = re.search(\"([0-9]+)\\s?(by|x|X)\\s?([0-9]+)\", in_board_size)\n\n    while not valid_input:\n        print \"Sorry, I can't understand that input yet, can you try again?\"\n        in_board_size = raw_input(\"What size would you like your game to be?: \")\n        valid_input = re.search(\"([0-9]+)\\s?(by|x|X)\\s?([0-9]+)\", in_board_size)\n\n    board_size = (valid_input.group(1), valid_input.group(3))\n\n    #confirmation = raw_input(\"To confirm, there will be \" + board_size[0] + \" columns and \" + board_size[1] + \" rows?: \")\n\n    global_vars.game.board = ngdl_classes.Board((int(board_size[0]), int(board_size[1])))\n    global_vars.write_queue.append([\"board\" , []])\n\ndef player_num_dialog():\n    in_player_num = raw_input(\"How many players does your game have?: \")\n    valid_input = re.search(\"[0-9]+\", in_player_num)\n\n    while not valid_input:\n        print \"Sorry, I can't understand that input yet, can you try again?\"\n        in_player_num = raw_input(\"How many players does your game have?: \")\n        valid_input = re.search(\"[0-9]+\", in_player_num)\n\n    num_players = int(valid_input.group())\n\n    for p in range(1,num_players+1):\n        global_vars.game.players.append(ngdl_classes.Player(\"player\" + str(p)))\n\n    global_vars.write_queue.append([\"players\", []])\n\ndef game_pieces_dialog():\n\n    for player in global_vars.game.players:\n        in_piece_names = raw_input(\"What types of pieces does \" + player.name + \" have?: \")\n        pieces = re.findall(\"([0-9]*)\\s|^([^\\W\\d]+)\", in_piece_names)\n\n        for p in pieces:\n            global_vars.game.pieces[p[1]] = ngdl_classes.Piece(p[1])\n            player.pieces.append(p[1])\n\n        on_board_response = raw_input(\"Do any of \" + player.name + \"'s pieces start on the board?: \")\n        on_board_response = on_board_response.lower()\n        if not re.match(\"[no|n]\", on_board_response):\n            for p in pieces:\n\n                if p[0] == \"\" or int(p[0]) > 1:\n                    p_positions = raw_input(\"What are the starting positions <col, row> of the \" +\n                                            p[1] + \" that start on the board? (enter to skip): \")\n                else:\n                    p_positions = raw_input(\"What is the starting position <col, row> of the \" +\n                                            p[1] + \" if it starts on the board? (enter to skip): \")\n\n                positions = re.findall(\"([0-9]+),\\s?([0-9]+)\", p_positions)\n                if positions:\n                    for pos in positions:\n                        global_vars.game.board.starting_positions[(int(pos[0]), int(pos[1]))] = player.name + \" \" + piece.name\n                \n\ndef player_move_dialog():\n    move_conditions = raw_input(\"What can a player do on their turn?: \")\n    parse_trees = ngdl_parse.parse(move_conditions, 2)\n        \n    nltk_tree = parse_trees[0]\n    tree = translate_tree(nltk_tree)\n\n    conditions = process_condition(tree)\n    \n    action = tree.find_closest_node(\"ACTION\")\n    while action.children:\n        index = [child.name for child in action.children].index(\"ACTION\")\n        action = action[index]\n\n    if action.value == \"drop\":\n        drop_response = raw_input(\"By 'drop', do you mean dropping a piece like in Connect-4, or placing a piece like in Shogi?: \")        \n        drop_response.lower()\n        if re.match(\"[connect\\-4|drop]\", drop_response):\n            global_vars.write_queue.append([\"drop_occupant_conditions\", [[conditions]]])\n            global_vars.write_queue.append([\"perpetuate_untouched_cells\", [[\"drop\"]]])\n        else:\n            global_vars.write_queue.append([\"place_occupant_conditions\", [[conditions]]])\n            global_vars.write_queue.append([\"perpetuate_untouched_cells\", [[\"place\"]]])\n    elif action.value in [\"place\", \"mark\"]:\n        global_vars.write_queue.append([\"place_occupant_conditions\", [[conditions]]])\n        global_vars.write_queue.append([\"perpetuate_untouched_cells\", [[\"place\"]]])\n            \n\n\n#def piece_move_dialog():\n\ndef goal_dialog():\n    win_conditions = raw_input(\"How does a player win?: \")\n    parse_trees = ngdl_parse.parse(win_conditions, 1)\n\n    nltk_tree = parse_trees[0]\n    tree = translate_tree(nltk_tree)\n\n    #result = tree.find_closest_node(\"RESULT\")\n    conditions_tree = tree.find_closest_node(\"COND\")\n    conditions = process_condition(conditions_tree)\n    global_vars.write_queue.append([\"win_conditions\", [[conditions], \"\"]])\n\ndef terminal_dialog():\n    game_end_conditions = raw_input(\"Aside from a player winning, how does the game end?: \")\n    parse_trees = ngdl_parse.parse(game_end_conditions, 1)\n\n    nltk_tree = parse_trees[0]\n    tree = translate_tree(nltk_tree)\n\n    conditions_tree = tree.find_closest_node(\"COND\")\n    conditions = process_condition(conditions_tree)\n    global_vars.write_queue.append([\"game_end_conditions\", [[conditions]]])\n\ndef process_result(result):\n    return\n\ndef process_conditions(conds):\n    conditions = []\n    if \"OR\" in [child.name for child in conds.children]:\n        conditions.append(\"OR\")\n        for child in conds.children:\n            if child.name == \"COND\":\n                conditions.append(process_condition(child))\n    elif \"AND\" in [child.name for child in conds.children]:\n        conditions.append(\"AND\")\n        for child in conds.children:\n            if child.name == \"COND\":\n                conditions.append(process_condition(child))\n    else:\n        conditions.append(\"COND\")\n        conditions.append(process_condition(conds))\n    return conditions\n\ndef process_condition(cond_node):\n    for leaf in cond_node.leaves():\n        if leaf.value in cond_dictionary:\n            cond_definition = cond_dictionary[leaf.value]\n            slot_values = []\n            for slot in cond_definition[0]:\n                slot_node = leaf.find_closest_node(slot[0])\n                if not slot_node:\n                    if len(slot) == 2:\n                        slot_values.append(slot[1])\n                    else:\n                        print \"Slot fill error1!\"\n                elif cond_node not in slot_node.ancestors():\n                    if len(slot) == 2:\n                        slot_values.append(slot[1])\n                    else:\n                        print \"Slot fill error2!\"\n                elif slot_node.name == \"PLAYER\":\n                    slot_values.append(process_player(slot_node))\n                elif slot_node.name == \"BOARD_PART\":\n                    slot_values.append(process_board_part(slot_node))\n                elif slot_node.name == \"PIECE\":\n                    slot_values.append(process_piece(slot_node))\n                else:\n                    slot_values.append(slot_node.value)\n\n            if cond_definition[-1]:\n                global_vars.write_queue.append([cond_definition[2], slot_values])\n            else:\n                global_vars.write_queue.append([cond_definition[2], []])\n            return cond_definition[1].format(*slot_values)\n                    \n\ndef process_player(player_node):\n    return \"?player\"\n\ndef process_board_part(board_part_node):\n    square_equivalents = [\"cell\"]\n    board_part = board_part_node\n    while board_part.children:\n        index = [child.name for child in board_part.children].index(\"BOARD_PART\")\n        board_part = board_part[index]\n    if board_part.value in square_equivalents:\n        return \"square\"\n    else:\n        return board_part.value\n\ndef process_piece(piece_node):\n    piece = piece_node\n    while piece.children:\n        index = [child.name for child in piece.children].index(\"PIECE\")\n        piece = piece[index]\n\n    if piece.value == \"piece\":\n        return \"?piece\"\n    else:\n        return piece.value\n\n\ndef translate_tree(nltk_tree):\n    if nltk_tree.height() == 2:\n        tree = ngdl_classes.Tree(nltk_tree.node)\n        tree.value = nltk_tree[0]\n        return tree\n        \n    tree = ngdl_classes.Tree(nltk_tree.node)\n    for subtree in nltk_tree:\n        if type(subtree) == str:\n            tree.value = subtree\n        else:\n            tree.children.append(translate_tree(subtree))\n\n    for subtree in tree.children:\n        subtree.parent = tree\n\n    return tree\n        \n\ncond_dictionary = {\"empty\": [[[\"BOARD_PART\"], [\"NUM\", \"?col\"], [\"NUM\", \"?row\"]], \"(empty {0} {1} {2})\", \"board_part_empty\", False],\n                   \"open\": [[[\"BOARD_PART\"], [\"NUM\", \"?col\"], [\"NUM\", \"?row\"]], \"(open {0} {1} {2})\", \"board_part_open\", False],\n                   \"full\": [[[\"BOARD_PART\"], [\"NUM\", \"?col\"], [\"NUM\", \"?row\"]], \"(full {0} {1} {2})\", \"board_part_full\", False],\n                   \"in-a-row\": [[[\"NUM\"], [\"PLAYER\", \"?player\"], [\"PIECE\", \"?piece\"]], \"({0}_in_a_row {1} {2})\", \"x_in_a_row\", True]\n                   }\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python function that creates a natural language game creation program. To use the program, call the function \"start_dialog\" with an optional output file name as an argument. The program will prompt the user for input to define the game environment, including board size, number of players, game pieces, player moves, win conditions, and game end conditions. The program will then generate a GDL file based on the user's input and write it to the output file. If no output file name is provided, the program will write the GDL file to a file named \"test.txt\".\n\n### Input:\n\n\n### Output:\nimport re\nimport nltk\nimport ngdl_classes\nimport global_vars\nimport ngdl_parse\nimport ngdl_write\n\ndef start_dialog(output_file=\"test.txt\"):\n    if not global_vars.initialized:\n        global_vars.init()\n    else:\n        reset_global_vars()\n\n    output = open(output_file, \"w\")\n    print \"Welcome to the natural language game creation program for general game playing!\"\n    #print \"First we'll work on defining the game environment\"\n    board_size_dialog()\n    player_num_dialog()\n    game_pieces_dialog()\n    player_move_dialog()\n    goal_dialog()\n    terminal_dialog()\n    ngdl_write.write_gdl_file(output)\n    output.close()\n\ndef reset_global_vars():\n    global_vars.write_queue = [[\"noop\", []], [\"goals\", []], [\"terminal\", []], [\"distinct_cells\", []], [\"successors\", [50]]]\n    global_vars.game = ngdl_classes.Game()\n    \ndef board_size_dialog():\n    in_board_size = raw_input(\"What size would you like your board to be?: \")\n    valid_input = re.search(\"([0-9]+)\\s?(by|x|X)\\s?([0-9]+)\", in_board_size)\n\n    while not valid_input:\n        print \"Sorry, I can't understand that input yet, can you try again?\"\n        in_board_size = raw_input(\"What size would you like your game to be?: \")\n        valid_input = re.search(\"([0-9]+)\\s?(by|x|X)\\s?([0-9]+)\", in_board_size)\n\n    board_size = (valid_input.group(1), valid_input.group(3))\n\n    #confirmation = raw_input(\"To confirm, there will be \" + board_size[0] + \" columns and \" + board_size[1] + \" rows?: \")\n\n    global_vars.game.board = ngdl_classes.Board((int(board_size[0]), int(board_size[1])))\n    global_vars.write_queue.append([\"board\" , []])\n\ndef player_num_dialog():\n    in_player_num = raw_input(\"How many players does your game have?: \")\n    valid_input = re.search(\"[0-9]+\", in_player_num)\n\n    while not valid_input:\n        print \"Sorry, I can't understand that input yet, can you try again?\"\n        in_player_num = raw_input(\"How many players does your game have?: \")\n        valid_input = re.search(\"[0-9]+\", in_player_num)\n\n    num_players = int(valid_input.group())\n\n    for p in range(1,num_players+1):\n        global_vars.game.players.append(ngdl_classes.Player(\"player\" + str(p)))\n\n    global_vars.write_queue.append([\"players\", []])\n\ndef game_pieces_dialog():\n\n    for player in global_vars.game.players:\n        in_piece_names = raw_input(\"What types of pieces does \" + player.name + \" have?: \")\n        pieces = re.findall(\"([0-9]*)\\s|^([^\\W\\d]+)\", in_piece_names)\n\n        for p in pieces:\n            global_vars.game.pieces[p[1]] = ngdl_classes.Piece(p[1])\n            player.pieces.append(p[1])\n\n        on_board_response = raw_input(\"Do any of \" + player.name + \"'s pieces start on the board?: \")\n        on_board_response = on_board_response.lower()\n        if not re.match(\"[no|n]\", on_board_response):\n            for p in pieces:\n\n                if p[0] == \"\" or int(p[0]) > 1:\n                    p_positions = raw_input(\"What are the starting positions <col, row> of the \" +\n                                            p[1] + \" that start on the board? (enter to skip): \")\n                else:\n                    p_positions = raw_input(\"What is the starting position <col, row> of the \" +\n                                            p[1] + \" if it starts on the board? (enter to skip): \")\n\n                positions = re.findall(\"([0-9]+),\\s?([0-9]+)\", p_positions)\n                if positions:\n                    for pos in positions:\n                        global_vars.game.board.starting_positions[(int(pos[0]), int(pos[1]))] = player.name + \" \" + piece.name\n                \n\ndef player_move_dialog():\n    move_conditions = raw_input(\"What can a player do on their turn?: \")\n    parse_trees = ngdl_parse.parse(move_conditions, 2)\n        \n    nltk_tree = parse_trees[0]\n    tree = translate_tree(nltk_tree)\n\n    conditions = process_condition(tree)\n    \n    action = tree.find_closest_node(\"ACTION\")\n    while action.children:\n        index = [child.name for child in action.children].index(\"ACTION\")\n        action = action[index]\n\n    if action.value == \"drop\":\n        drop_response = raw_input(\"By 'drop', do you mean dropping a piece like in Connect-4, or placing a piece like in Shogi?: \")        \n        drop_response.lower()\n        if re.match(\"[connect\\-4|drop]\", drop_response):\n            global_vars.write_queue.append([\"drop_occupant_conditions\", [[conditions]]])\n            global_vars.write_queue.append([\"perpetuate_untouched_cells\", [[\"drop\"]]])\n        else:\n            global_vars.write_queue.append([\"place_occupant_conditions\", [[conditions]]])\n            global_vars.write_queue.append([\"perpetuate_untouched_cells\", [[\"place\"]]])\n    elif action.value in [\"place\", \"mark\"]:\n        global_vars.write_queue.append([\"place_occupant_conditions\", [[conditions]]])\n        global_vars.write_queue.append([\"perpetuate_untouched_cells\", [[\"place\"]]])\n            \n\n\n#def piece_move_dialog():\n\ndef goal_dialog():\n    win_conditions = raw_input(\"How does a player win?: \")\n    parse_trees = ngdl_parse.parse(win_conditions, 1)\n\n    nltk_tree = parse_trees[0]\n    tree = translate_tree(nltk_tree)\n\n    #result = tree.find_closest_node(\"RESULT\")\n    conditions_tree = tree.find_closest_node(\"COND\")\n    conditions = process_condition(conditions_tree)\n    global_vars.write_queue.append([\"win_conditions\", [[conditions], \"\"]])\n\ndef terminal_dialog():\n    game_end_conditions = raw_input(\"Aside from a player winning, how does the game end?: \")\n    parse_trees = ngdl_parse.parse(game_end_conditions, 1)\n\n    nltk_tree = parse_trees[0]\n    tree = translate_tree(nltk_tree)\n\n    conditions_tree = tree.find_closest_node(\"COND\")\n    conditions = process_condition(conditions_tree)\n    global_vars.write_queue.append([\"game_end_conditions\", [[conditions]]])\n\ndef process_result(result):\n    return\n\ndef process_conditions(conds):\n    conditions = []\n    if \"OR\" in [child.name for child in conds.children]:\n        conditions.append(\"OR\")\n        for child in conds.children:\n            if child.name == \"COND\":\n                conditions.append(process_condition(child))\n    elif \"AND\" in [child.name for child in conds.children]:\n        conditions.append(\"AND\")\n        for child in conds.children:\n            if child.name == \"COND\":\n                conditions.append(process_condition(child))\n    else:\n        conditions.append(\"COND\")\n        conditions.append(process_condition(conds))\n    return conditions\n\ndef process_condition(cond_node):\n    for leaf in cond_node.leaves():\n        if leaf.value in cond_dictionary:\n            cond_definition = cond_dictionary[leaf.value]\n            slot_values = []\n            for slot in cond_definition[0]:\n                slot_node = leaf.find_closest_node(slot[0])\n                if not slot_node:\n                    if len(slot) == 2:\n                        slot_values.append(slot[1])\n                    else:\n                        print \"Slot fill error1!\"\n                elif cond_node not in slot_node.ancestors():\n                    if len(slot) == 2:\n                        slot_values.append(slot[1])\n                    else:\n                        print \"Slot fill error2!\"\n                elif slot_node.name == \"PLAYER\":\n                    slot_values.append(process_player(slot_node))\n                elif slot_node.name == \"BOARD_PART\":\n                    slot_values.append(process_board_part(slot_node))\n                elif slot_node.name == \"PIECE\":\n                    slot_values.append(process_piece(slot_node))\n                else:\n                    slot_values.append(slot_node.value)\n\n            if cond_definition[-1]:\n                global_vars.write_queue.append([cond_definition[2], slot_values])\n            else:\n                global_vars.write_queue.append([cond_definition[2], []])\n            return cond_definition[1].format(*slot_values)\n                    \n\ndef process_player(player_node):\n    return \"?player\"\n\ndef process_board_part(board_part_node):\n    square_equivalents = [\"cell\"]\n    board_part = board_part_node\n    while board_part.children:\n        index = [child.name for child in board_part.children].index(\"BOARD_PART\")\n        board_part = board_part[index]\n    if board_part.value in square_equivalents:\n        return \"square\"\n    else:\n        return board_part.value\n\ndef process_piece(piece_node):\n    piece = piece_node\n    while piece.children:\n        index = [child.name for child in piece.children].index(\"PIECE\")\n        piece = piece[index]\n\n    if piece.value == \"piece\":\n        return \"?piece\"\n    else:\n        return piece.value\n\n\ndef translate_tree(nltk_tree):\n    if nltk_tree.height() == 2:\n        tree = ngdl_classes.Tree(nltk_tree.node)\n        tree.value = nltk_tree[0]\n        return tree\n        \n    tree = ngdl_classes.Tree(nltk_tree.node)\n    for subtree in nltk_tree:\n        if type(subtree) == str:\n            tree.value = subtree\n        else:\n            tree.children.append(translate_tree(subtree))\n\n    for subtree in tree.children:\n        subtree.parent = tree\n\n    return tree\n        \n\ncond_dictionary = {\"empty\": [[[\"BOARD_PART\"], [\"NUM\", \"?col\"], [\"NUM\", \"?row\"]], \"(empty {0} {1} {2})\", \"board_part_empty\", False],\n                   \"open\": [[[\"BOARD_PART\"], [\"NUM\", \"?col\"], [\"NUM\", \"?row\"]], \"(open {0} {1} {2})\", \"board_part_open\", False],\n                   \"full\": [[[\"BOARD_PART\"], [\"NUM\", \"?col\"], [\"NUM\", \"?row\"]], \"(full {0} {1} {2})\", \"board_part_full\", False],\n                   \"in-a-row\": [[[\"NUM\"], [\"PLAYER\", \"?player\"], [\"PIECE\", \"?piece\"]], \"({0}_in_a_row {1} {2})\", \"x_in_a_row\", True]\n                   }\n"}
{"instruction":"Generate a python program to parse a string and extract the number of vowels.","input":"Input string: \u201cHello World!\"","output":"def count_vowels(s):\n    vowels = [\"a\", \"e\", \"i\" , \"o\", \"u\"]\n    count = 0 \n    for character in s.lower():\n        if character in vowels:\n            count += 1\n    print(\"Number of vowels :\", count)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to parse a string and extract the number of vowels.\n\n### Input:\nInput string: \u201cHello World!\"\n\n### Output:\ndef count_vowels(s):\n    vowels = [\"a\", \"e\", \"i\" , \"o\", \"u\"]\n    count = 0 \n    for character in s.lower():\n        if character in vowels:\n            count += 1\n    print(\"Number of vowels :\", count)"}
{"instruction":"Write a code in Python to classify the given input into two categories - healthy and unhealthy.","input":"[{\"protein\":20,\"fat\":20,\"carbs\":30},{\"protein\":10,\"fat\":45,\"carbs\":30}]","output":"# Defining the model\ndef classify(data):\n    healthy = []\n    unhealthy = []\n    for item in data:\n        protein = item[\"protein\"]\n        fat = item[\"fat\"]\n        carbs = item[\"carbs\"]\n        if protein >= 10 and fat <= 20 and carbs <= 50:\n            healthy.append(item)\n        else:\n            unhealthy.append(item)\n    return { \"healthy\": healthy, \"unhealthy\": unhealthy}\n\n# Running the program\ndata = [{\"protein\":20,\"fat\":20,\"carbs\":30},{\"protein\":10,\"fat\":45,\"carbs\":30}]\nresult = classify(data)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python to classify the given input into two categories - healthy and unhealthy.\n\n### Input:\n[{\"protein\":20,\"fat\":20,\"carbs\":30},{\"protein\":10,\"fat\":45,\"carbs\":30}]\n\n### Output:\n# Defining the model\ndef classify(data):\n    healthy = []\n    unhealthy = []\n    for item in data:\n        protein = item[\"protein\"]\n        fat = item[\"fat\"]\n        carbs = item[\"carbs\"]\n        if protein >= 10 and fat <= 20 and carbs <= 50:\n            healthy.append(item)\n        else:\n            unhealthy.append(item)\n    return { \"healthy\": healthy, \"unhealthy\": unhealthy}\n\n# Running the program\ndata = [{\"protein\":20,\"fat\":20,\"carbs\":30},{\"protein\":10,\"fat\":45,\"carbs\":30}]\nresult = classify(data)\nprint(result)"}
{"instruction":"Create a Python class for representing a vector as a list of three numbers.","input":"","output":"class Vector3D:\n  def __init__(self, x, y, z):\n    self.x = x\n    self.y = y\n    self.z = z","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for representing a vector as a list of three numbers.\n\n### Input:\n\n\n### Output:\nclass Vector3D:\n  def __init__(self, x, y, z):\n    self.x = x\n    self.y = y\n    self.z = z"}
{"instruction":"Write a Python program to generate descriptive statistics of a given list of numbers.","input":"numbers = [2.3, 4.7, 5.2, 3.7]","output":"import statistics\n\ndef descriptice_stats(numbers):\n    print(\"Mean:\", statistics.mean(numbers))\n    print(\"Median:\", statistics.median(numbers))\n    print(\"Mode:\", statistics.mode(numbers))\n    print(\"Standard Deviation:\", statistics.stdev(numbers))\n    print(\"Variance:\", statistics.variance(numbers))\n\nif __name__ == '__main__':\n    numbers = [2.3, 4.7, 5.2, 3.7]\n    descriptice_stats(numbers)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate descriptive statistics of a given list of numbers.\n\n### Input:\nnumbers = [2.3, 4.7, 5.2, 3.7]\n\n### Output:\nimport statistics\n\ndef descriptice_stats(numbers):\n    print(\"Mean:\", statistics.mean(numbers))\n    print(\"Median:\", statistics.median(numbers))\n    print(\"Mode:\", statistics.mode(numbers))\n    print(\"Standard Deviation:\", statistics.stdev(numbers))\n    print(\"Variance:\", statistics.variance(numbers))\n\nif __name__ == '__main__':\n    numbers = [2.3, 4.7, 5.2, 3.7]\n    descriptice_stats(numbers)"}
{"instruction":"Create a function in Python for calculating Factorial of a number (n!).","input":"","output":"def factorial(n): \n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python for calculating Factorial of a number (n!).\n\n### Input:\n\n\n### Output:\ndef factorial(n): \n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)"}
{"instruction":"Generate a Python decorator for calculating the time taken for a function to execute.","input":"Not applicable","output":"import time\n\ndef timeit(func):\n def wrapper(*args, **kwargs):\n start = time.time()\n result = func(*args, **kwargs)\n end = time.time()\n print(f\"Time taken for {func.__name__}: {end-start} seconds\")\n return result\n return wrapper","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python decorator for calculating the time taken for a function to execute.\n\n### Input:\nNot applicable\n\n### Output:\nimport time\n\ndef timeit(func):\n def wrapper(*args, **kwargs):\n start = time.time()\n result = func(*args, **kwargs)\n end = time.time()\n print(f\"Time taken for {func.__name__}: {end-start} seconds\")\n return result\n return wrapper"}
{"instruction":"Write an algorithm in Python that takes a list of elements and determines if the list is sorted or not.","input":"[4, 3, 1, 2, 5]","output":"def is_sorted(lst):\n # base case: if the list is empty then it is sorted\n if not lst:\n  return True\n # compare the first two element\n if lst[0] > lst[1]:\n  return False\n # recursively call the function with the remaining elements in the list\n return is_sorted(lst[1:])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python that takes a list of elements and determines if the list is sorted or not.\n\n### Input:\n[4, 3, 1, 2, 5]\n\n### Output:\ndef is_sorted(lst):\n # base case: if the list is empty then it is sorted\n if not lst:\n  return True\n # compare the first two element\n if lst[0] > lst[1]:\n  return False\n # recursively call the function with the remaining elements in the list\n return is_sorted(lst[1:])"}
{"instruction":"Create a class in Python that represents a tennis match.","input":"","output":"class TennisMatch:\n    def __init__(self):\n        self.player_one = None\n        self.player_two = None\n    \n    def set_players(self, player_one, player_two):\n        self.player_one = player_one\n        self.player_two = player_two\n    \n    def start_match(self):\n        pass\n    \n    def end_match(self):\n        pass","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that represents a tennis match.\n\n### Input:\n\n\n### Output:\nclass TennisMatch:\n    def __init__(self):\n        self.player_one = None\n        self.player_two = None\n    \n    def set_players(self, player_one, player_two):\n        self.player_one = player_one\n        self.player_two = player_two\n    \n    def start_match(self):\n        pass\n    \n    def end_match(self):\n        pass"}
{"instruction":"Identify which of the following two Python codes is more memory efficient.","input":"# Code A\ndef foo():\n    lst = []\n    for i in range(1, 100):\n        lst.append(i)\n\n# Code B\ndef foo():\n    lst = [i for i in range(1, 100)]","output":"Code B is more memory efficient than Code A since it uses list comprehension instead of appending items to a list.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIdentify which of the following two Python codes is more memory efficient.\n\n### Input:\n# Code A\ndef foo():\n    lst = []\n    for i in range(1, 100):\n        lst.append(i)\n\n# Code B\ndef foo():\n    lst = [i for i in range(1, 100)]\n\n### Output:\nCode B is more memory efficient than Code A since it uses list comprehension instead of appending items to a list."}
{"instruction":"Write an algorithm for detecting a cycle in a linked list in Python.","input":"Not applicable","output":"def detectLoop(head):\n    # Base Case: List is empty\n    if head is None:\n        return False\n    \n    # Initialize slow and fast pointers\n    slow = head\n    fast = head\n    \n    while slow and fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n        \n        # If slow and fast meet at same point then loop is found\n        if slow == fast:\n            return True\n        \n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm for detecting a cycle in a linked list in Python.\n\n### Input:\nNot applicable\n\n### Output:\ndef detectLoop(head):\n    # Base Case: List is empty\n    if head is None:\n        return False\n    \n    # Initialize slow and fast pointers\n    slow = head\n    fast = head\n    \n    while slow and fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n        \n        # If slow and fast meet at same point then loop is found\n        if slow == fast:\n            return True\n        \n    return False"}
{"instruction":"Create a class to store the details of a person in Python.","input":"","output":"class Person:\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class to store the details of a person in Python.\n\n### Input:\n\n\n### Output:\nclass Person:\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address"}
{"instruction":"Write a Python program to convert a date string to the corresponding Unix timestamp.","input":"date_string = \"October 15, 2020\"","output":"import time \n\ndef convert_to_timestamp(date_string): \n    return time.mktime(time.strptime(date_string, \"%B %d, %Y\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a date string to the corresponding Unix timestamp.\n\n### Input:\ndate_string = \"October 15, 2020\"\n\n### Output:\nimport time \n\ndef convert_to_timestamp(date_string): \n    return time.mktime(time.strptime(date_string, \"%B %d, %Y\"))"}
{"instruction":"Construct a Python program that reverses an array.","input":"[1, 5, 3, 10, 4, 8]","output":"def reverse_array(arr): \n    low = 0\n    high = len(arr) - 1\n    \n    while low < high: \n        arr[low], arr[high] = arr[high], arr[low] \n        low += 1\n        high -= 1\n  \n    return arr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program that reverses an array.\n\n### Input:\n[1, 5, 3, 10, 4, 8]\n\n### Output:\ndef reverse_array(arr): \n    low = 0\n    high = len(arr) - 1\n    \n    while low < high: \n        arr[low], arr[high] = arr[high], arr[low] \n        low += 1\n        high -= 1\n  \n    return arr"}
{"instruction":"Sort a list of numbers [5, 2, 8, 1] in Python.","input":"","output":"list = [5, 2, 8, 1]\nlist.sort() \nprint(list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSort a list of numbers [5, 2, 8, 1] in Python.\n\n### Input:\n\n\n### Output:\nlist = [5, 2, 8, 1]\nlist.sort() \nprint(list)"}
{"instruction":"Optimize an existing Python function to reverse a string. This function should take a string as input and return the reversed string.","input":"'Hello World!'","output":"def reverse_string(input):\n    return input[::-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize an existing Python function to reverse a string. This function should take a string as input and return the reversed string.\n\n### Input:\n'Hello World!'\n\n### Output:\ndef reverse_string(input):\n    return input[::-1]"}
{"instruction":"Write a Python program to get the sum of all odd numbers between 0 and 30.","input":"","output":"# Variable to store the sum\nsum = 0\n\n# Iterate over all odd numbers in the range\nfor i in range(1, 30, 2):\n    sum += i\n    \n# Print the result\nprint(\"The sum of all odd numbers between 0 and 30: \", sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to get the sum of all odd numbers between 0 and 30.\n\n### Input:\n\n\n### Output:\n# Variable to store the sum\nsum = 0\n\n# Iterate over all odd numbers in the range\nfor i in range(1, 30, 2):\n    sum += i\n    \n# Print the result\nprint(\"The sum of all odd numbers between 0 and 30: \", sum)"}
{"instruction":"Develop a Python program to sort a given array using Quicksort","input":"[1, 5, 7, 0, 3]","output":"def partition(arr, low, high): \n    i = (low-1)\n    pivot = arr[high]\n  \n    for j in range(low, high): \n        if arr[j] < pivot: \n            i += 1\n            arr[i],arr[j] = arr[j],arr[i] \n  \n    arr[i+1],arr[high] = arr[high],arr[i+1] \n    return i+1\n  \ndef quick_sort(arr, low, high): \n    if low < high: \n        pi = partition(arr, low, high) \n        quick_sort(arr, low, pi-1) \n        quick_sort(arr, pi+1, high) \n\nresult = quick_sort([1, 5, 7, 0, 3], 0, 4) \nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to sort a given array using Quicksort\n\n### Input:\n[1, 5, 7, 0, 3]\n\n### Output:\ndef partition(arr, low, high): \n    i = (low-1)\n    pivot = arr[high]\n  \n    for j in range(low, high): \n        if arr[j] < pivot: \n            i += 1\n            arr[i],arr[j] = arr[j],arr[i] \n  \n    arr[i+1],arr[high] = arr[high],arr[i+1] \n    return i+1\n  \ndef quick_sort(arr, low, high): \n    if low < high: \n        pi = partition(arr, low, high) \n        quick_sort(arr, low, pi-1) \n        quick_sort(arr, pi+1, high) \n\nresult = quick_sort([1, 5, 7, 0, 3], 0, 4) \nprint(result)"}
{"instruction":"Write a code to automate the process of sending an email to a list of people from a specified address.","input":"","output":"import smtplib \n\n# create SMTP object \ns = smtplib.SMTP('smtp-mail.outlook.com', 587) \n\n# start TLS for security \ns.starttls() \n\n# Authentication \ns.login(\"sender_address\", \"sender_password\") \n\n# message to be sent \nmessage = \"\"\"\\\nSubject: Hi there\n\nThis message is sent from Python.\"\"\"\n\n# sending the mail \ns.sendmail(\"sender_address\", receivers_list , message) \n\n# terminating the session \ns.quit()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to automate the process of sending an email to a list of people from a specified address.\n\n### Input:\n\n\n### Output:\nimport smtplib \n\n# create SMTP object \ns = smtplib.SMTP('smtp-mail.outlook.com', 587) \n\n# start TLS for security \ns.starttls() \n\n# Authentication \ns.login(\"sender_address\", \"sender_password\") \n\n# message to be sent \nmessage = \"\"\"\\\nSubject: Hi there\n\nThis message is sent from Python.\"\"\"\n\n# sending the mail \ns.sendmail(\"sender_address\", receivers_list , message) \n\n# terminating the session \ns.quit()"}
{"instruction":"Build a machine learning model in Python to classify animals.","input":"","output":"#import libraries \nfrom sklearn.ensemble import RandomForestClassifier \nfrom sklearn.datasets import load_iris \nfrom sklearn.model_selection import train_test_split \n  \n#import dataset \ndata = load_iris() \n  \n#divide the data into independent and dependent variables \nX = data.data \ny = data.target \n  \n# Split the data into training and test set \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) \n  \n#Define the model \nmodel = RandomForestClassifier(n_estimators=100) \n  \n#Train the model \nmodel.fit(X_train, y_train) \n  \n# Test the model \nmodel.score(X_test, y_test)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a machine learning model in Python to classify animals.\n\n### Input:\n\n\n### Output:\n#import libraries \nfrom sklearn.ensemble import RandomForestClassifier \nfrom sklearn.datasets import load_iris \nfrom sklearn.model_selection import train_test_split \n  \n#import dataset \ndata = load_iris() \n  \n#divide the data into independent and dependent variables \nX = data.data \ny = data.target \n  \n# Split the data into training and test set \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) \n  \n#Define the model \nmodel = RandomForestClassifier(n_estimators=100) \n  \n#Train the model \nmodel.fit(X_train, y_train) \n  \n# Test the model \nmodel.score(X_test, y_test)"}
{"instruction":"Create a Python script to parse a dictionary using a list comprehension and create a new dictionary with the keys and values swapped.","input":"{'a':1, 'b':2, 'c':3}","output":"{v:k for k, v in d.items()}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to parse a dictionary using a list comprehension and create a new dictionary with the keys and values swapped.\n\n### Input:\n{'a':1, 'b':2, 'c':3}\n\n### Output:\n{v:k for k, v in d.items()}"}
{"instruction":"Create a Python function to calculate the sum of the list elements.","input":"[1, 3, 4, 7, 9]","output":"def list_sum(list_in):\n return sum(list_in)\n\n# or\ndef list_sum(list_in):\n total_sum = 0\n \n for num in list_in:\n total_sum += num\n \n return total_sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to calculate the sum of the list elements.\n\n### Input:\n[1, 3, 4, 7, 9]\n\n### Output:\ndef list_sum(list_in):\n return sum(list_in)\n\n# or\ndef list_sum(list_in):\n total_sum = 0\n \n for num in list_in:\n total_sum += num\n \n return total_sum"}
{"instruction":"Create a Python program which takes a list of numbers and a number k and returns whether any two numbers from the list add up to k.","input":"list: [10,15,3,7]\nk: 17","output":"def twoNumberSum(list, k):\n  seen = set()\n  for num in list:\n    if k-num in seen:\n      return [num, k-num]\n    else:\n      seen.add(num)\n  return []","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program which takes a list of numbers and a number k and returns whether any two numbers from the list add up to k.\n\n### Input:\nlist: [10,15,3,7]\nk: 17\n\n### Output:\ndef twoNumberSum(list, k):\n  seen = set()\n  for num in list:\n    if k-num in seen:\n      return [num, k-num]\n    else:\n      seen.add(num)\n  return []"}
{"instruction":"Write a Python script that extracts information from a JSON object.","input":"{\n   \"name\": \"John Doe\",\n   \"age\": 23,\n   \"address\": {\n      \"street\": \"123 Main Street\",\n      \"city\": \"Berkeley\",\n      \"state\": \"CA\"\n   }\n}","output":"import json\n\ndata = json.loads('''\n{\n   \"name\": \"John Doe\",\n   \"age\": 23,\n   \"address\": {\n      \"street\": \"123 Main Street\",\n      \"city\": \"Berkeley\",\n      \"state\": \"CA\"\n   }\n}\n''')\n\nname = data['name']\nage = data['age']\nstreet = data['address']['street']\ncity = data['address']['city']\nstate = data['address']['state']\n\nprint(name)\nprint(age)\nprint(street)\nprint(city)\nprint(state)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that extracts information from a JSON object.\n\n### Input:\n{\n   \"name\": \"John Doe\",\n   \"age\": 23,\n   \"address\": {\n      \"street\": \"123 Main Street\",\n      \"city\": \"Berkeley\",\n      \"state\": \"CA\"\n   }\n}\n\n### Output:\nimport json\n\ndata = json.loads('''\n{\n   \"name\": \"John Doe\",\n   \"age\": 23,\n   \"address\": {\n      \"street\": \"123 Main Street\",\n      \"city\": \"Berkeley\",\n      \"state\": \"CA\"\n   }\n}\n''')\n\nname = data['name']\nage = data['age']\nstreet = data['address']['street']\ncity = data['address']['city']\nstate = data['address']['state']\n\nprint(name)\nprint(age)\nprint(street)\nprint(city)\nprint(state)"}
{"instruction":"Write a Python code to perform string operations","input":"","output":"def string_operations(str1):\n    # Capitalize the string\n    str1 = str1.upper()\n    \n    # Reverse the string\n    str1 = str1[::-1]\n    \n    # Split the string in words\n    words = str1.split()\n    \n    # Concatenating string\n    str_concat = ' '.join(words)\n    \n    # Replace string\n    str_replace = str_concat.replace(\"E\", \"*\")\n    \n    # Sort the words in alphabetical order\n    words = str_replace.split()\n    words = sorted(words)\n    str_sorted = ' '.join(words)\n    \n    return str_sorted","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to perform string operations\n\n### Input:\n\n\n### Output:\ndef string_operations(str1):\n    # Capitalize the string\n    str1 = str1.upper()\n    \n    # Reverse the string\n    str1 = str1[::-1]\n    \n    # Split the string in words\n    words = str1.split()\n    \n    # Concatenating string\n    str_concat = ' '.join(words)\n    \n    # Replace string\n    str_replace = str_concat.replace(\"E\", \"*\")\n    \n    # Sort the words in alphabetical order\n    words = str_replace.split()\n    words = sorted(words)\n    str_sorted = ' '.join(words)\n    \n    return str_sorted"}
{"instruction":"Create a Python script to read in a list of numbers and find the maximum.","input":"[3, 4, 5, 7, 10]","output":"\"\"\"\nCreate a python script to read in a list of numbers and find the maximum\n\"\"\"\n\n# define list of numbers\nnumbers = [3, 4, 5, 7, 10]\n\n# define function to get maximum value in list\ndef get_max(numbers):\n    max_value = numbers[0]\n    for i in numbers:\n        if i > max_value:\n            max_value = i\n    return max_value\n\n# call the function\nmax_value = get_max(numbers)\n\n# print the result\nprint(\"The maximum value is: {}\".format(max_value))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to read in a list of numbers and find the maximum.\n\n### Input:\n[3, 4, 5, 7, 10]\n\n### Output:\n\"\"\"\nCreate a python script to read in a list of numbers and find the maximum\n\"\"\"\n\n# define list of numbers\nnumbers = [3, 4, 5, 7, 10]\n\n# define function to get maximum value in list\ndef get_max(numbers):\n    max_value = numbers[0]\n    for i in numbers:\n        if i > max_value:\n            max_value = i\n    return max_value\n\n# call the function\nmax_value = get_max(numbers)\n\n# print the result\nprint(\"The maximum value is: {}\".format(max_value))"}
{"instruction":"Create a Python script to convert a given list of integers to a new list of strings.","input":"[1, 2, 3]","output":"def to_string_list(lst):\n    return [str(x) for x in lst]\n\nint_list = [1, 2, 3]\nstring_list = to_string_list(int_list)\nprint(string_list)\n\n## Output\n['1', '2', '3']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to convert a given list of integers to a new list of strings.\n\n### Input:\n[1, 2, 3]\n\n### Output:\ndef to_string_list(lst):\n    return [str(x) for x in lst]\n\nint_list = [1, 2, 3]\nstring_list = to_string_list(int_list)\nprint(string_list)\n\n## Output\n['1', '2', '3']"}
{"instruction":"Create a function to optimize a given python code using the Numba library.","input":"def calculate_pi():\n    c = 0.0\n    for k in range(1000):\n        for j in range(1000):\n            c += k ** -2 + j ** -3\n    return c","output":"import numba\n\n@numba.jit\ndef calculate_pi():\n    c = 0.0\n    for k in range(1000):\n        for j in range(1000):\n            c += k ** -2 + j ** -3\n    return c","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to optimize a given python code using the Numba library.\n\n### Input:\ndef calculate_pi():\n    c = 0.0\n    for k in range(1000):\n        for j in range(1000):\n            c += k ** -2 + j ** -3\n    return c\n\n### Output:\nimport numba\n\n@numba.jit\ndef calculate_pi():\n    c = 0.0\n    for k in range(1000):\n        for j in range(1000):\n            c += k ** -2 + j ** -3\n    return c"}
{"instruction":"Design a chatbot in Python that can respond to certain questions.","input":"","output":"class Chatbot:\n    def __init__(self):\n        self.response_dict = {}\n        self.default_response = \"\"\n  \n    def add_response(self, user_input, bot_response):\n        self.response_dict[user_input] = bot_response\n  \n    def set_default_response(self, default_response):\n        self.default_response = default_response\n  \n    def response(self, user_input):\n        if user_input in self.response_dict:\n            return self.response_dict[user_input]\n        else:\n            return self.default_response","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a chatbot in Python that can respond to certain questions.\n\n### Input:\n\n\n### Output:\nclass Chatbot:\n    def __init__(self):\n        self.response_dict = {}\n        self.default_response = \"\"\n  \n    def add_response(self, user_input, bot_response):\n        self.response_dict[user_input] = bot_response\n  \n    def set_default_response(self, default_response):\n        self.default_response = default_response\n  \n    def response(self, user_input):\n        if user_input in self.response_dict:\n            return self.response_dict[user_input]\n        else:\n            return self.default_response"}
{"instruction":"Write a Python program to find the number of uniquely identifiable countries in the list given below.","input":"['GB', 'CH', 'GB', 'US', 'CH', 'CN', 'ES', 'CN']","output":"def unique_countries(lst): \n    return len(set(lst))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the number of uniquely identifiable countries in the list given below.\n\n### Input:\n['GB', 'CH', 'GB', 'US', 'CH', 'CN', 'ES', 'CN']\n\n### Output:\ndef unique_countries(lst): \n    return len(set(lst))"}
{"instruction":"Design a python program to generate a binary tree","input":"","output":"class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, data):\n        new_node = Node(data)\n        if self.root is None:\n            self.root = new_node\n        else:\n            current = self.root\n            while current is not None:\n                if data < current.data:\n                    if current.left is None:\n                        current.left = new_node\n                        break\n                    else:\n                        current = current.left\n                elif data > current.data:\n                    if current.right is None:\n                        current.right = new_node\n                        break\n                    else:\n                        current = current.right","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program to generate a binary tree\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, data):\n        new_node = Node(data)\n        if self.root is None:\n            self.root = new_node\n        else:\n            current = self.root\n            while current is not None:\n                if data < current.data:\n                    if current.left is None:\n                        current.left = new_node\n                        break\n                    else:\n                        current = current.left\n                elif data > current.data:\n                    if current.right is None:\n                        current.right = new_node\n                        break\n                    else:\n                        current = current.right"}
{"instruction":"Write a Python script to remove all repeated characters from a string.","input":"string = \"aaabbccddeeff\"","output":"def removeRepeatedChars(str):\n    result = \"\"\n    for c in str:\n        if c not in result:\n            result += c\n    return result\n\nprint(removeRepeatedChars(\"aaabbccddeeff\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to remove all repeated characters from a string.\n\n### Input:\nstring = \"aaabbccddeeff\"\n\n### Output:\ndef removeRepeatedChars(str):\n    result = \"\"\n    for c in str:\n        if c not in result:\n            result += c\n    return result\n\nprint(removeRepeatedChars(\"aaabbccddeeff\"))"}
{"instruction":"Create a Python script to fill empty cells in a Pandas DataFrame with the median value for that column.","input":"A sample Pandas DataFrame","output":"import pandas as pd\n\n# Replace empty cells with the median value of the column\ndf = df.fillna(df.median())\n\n# Check if the null values have been replaced\nprint(df.isnull().sum())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to fill empty cells in a Pandas DataFrame with the median value for that column.\n\n### Input:\nA sample Pandas DataFrame\n\n### Output:\nimport pandas as pd\n\n# Replace empty cells with the median value of the column\ndf = df.fillna(df.median())\n\n# Check if the null values have been replaced\nprint(df.isnull().sum())"}
{"instruction":"Write a Python program to remove an item from a dictionary based on its key.","input":"","output":"def remove_from_dict(dictionary, key):\n    if key in dictionary.keys():\n        del dictionary[key]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to remove an item from a dictionary based on its key.\n\n### Input:\n\n\n### Output:\ndef remove_from_dict(dictionary, key):\n    if key in dictionary.keys():\n        del dictionary[key]"}
{"instruction":"Write a Python script for finding the maximum and minimum value in a given list.","input":"[1,5,6,8,7]","output":"list = [1,5,6,8,7]\nmin_val = min(list)\nmax_val = max(list)\n\nprint(\"Minimum value in list is: %d\"%min_val)\nprint(\"Maximum value in list is: %d\"%max_val)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script for finding the maximum and minimum value in a given list.\n\n### Input:\n[1,5,6,8,7]\n\n### Output:\nlist = [1,5,6,8,7]\nmin_val = min(list)\nmax_val = max(list)\n\nprint(\"Minimum value in list is: %d\"%min_val)\nprint(\"Maximum value in list is: %d\"%max_val)"}
{"instruction":"Optimize the following code in Python by improving its complexity.","input":"def my_function(input_array):\n  output_array = []\n  for elem in input_array:\n    if elem not in output_array:\n      output_array.append(elem)\n  return output_array","output":"def my_function(input_array):\n  output_array = set()\n  return output_array.union(input_array)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following code in Python by improving its complexity.\n\n### Input:\ndef my_function(input_array):\n  output_array = []\n  for elem in input_array:\n    if elem not in output_array:\n      output_array.append(elem)\n  return output_array\n\n### Output:\ndef my_function(input_array):\n  output_array = set()\n  return output_array.union(input_array)"}
{"instruction":"Implement an algorithm in Python to find the mode of the given array","input":"arr = [2, 4, 3, 3, 5, 3, 7]","output":"def findMode(arr): \n max_count = 1 \n mode = arr[0] \n count = 1 \n  \n for i in range(1,len(arr)): \n if (arr[i] == arr[i - 1]): \n count = count + 1 # increment count\n if (count > max_count): \n max_count = count # update max_count \n mode = arr[i] \n else: \n count = 1 # reset count \n  \n return mode \n\n# Driver program \narr = [2, 4, 3, 3, 5, 3, 7] \nprint(findMode(arr)) # prints 3","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm in Python to find the mode of the given array\n\n### Input:\narr = [2, 4, 3, 3, 5, 3, 7]\n\n### Output:\ndef findMode(arr): \n max_count = 1 \n mode = arr[0] \n count = 1 \n  \n for i in range(1,len(arr)): \n if (arr[i] == arr[i - 1]): \n count = count + 1 # increment count\n if (count > max_count): \n max_count = count # update max_count \n mode = arr[i] \n else: \n count = 1 # reset count \n  \n return mode \n\n# Driver program \narr = [2, 4, 3, 3, 5, 3, 7] \nprint(findMode(arr)) # prints 3"}
{"instruction":"Write a Python program to call a given API with an input parameter and store the result in a variable.","input":"API URL: \"https:\/\/example.org\/api?name=test\"","output":"import requests\n\nurl = 'https:\/\/example.org\/api?name=test'\nresponse = requests.get(url)\ndata = response.json()\nresult = data['result']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to call a given API with an input parameter and store the result in a variable.\n\n### Input:\nAPI URL: \"https:\/\/example.org\/api?name=test\"\n\n### Output:\nimport requests\n\nurl = 'https:\/\/example.org\/api?name=test'\nresponse = requests.get(url)\ndata = response.json()\nresult = data['result']"}
{"instruction":"Demonstrate how to use classes and objects in Python by creating an Account class","input":"","output":"class Account:\n    def __init__(self, name, balance):\n        # instance attributes\n        self.name = name\n        self.balance = balance\n    \n    # method to withdraw money from account\n    def withdraw(self, amount):\n        # check if amount is a valid number\n        if not isinstance(amount, (int, float)):\n            raise ValueError('Invalid amount')\n        \n        # check if amount is greater than balance\n        if amount > self.balance:\n            raise ValueError('Insufficient funds')\n        \n        # subtract the amount from the balance\n        self.balance -= amount\n    \n    # method to deposit money to account\n    def deposit(self, amount):\n        # check if amount is a valid number\n        if not isinstance(amount, (int, float)):\n            raise ValueError('Invalid amount')\n        \n        # add the amount to the balance\n        self.balance +=amount\n\n# create an instance of the Account class\nmy_account = Account('John Doe', 100)\n\n# withdraw money from account\nmy_account.withdraw(50)\n\n# deposit money to account\nmy_account.deposit(20)\n\n# print the updated balance\nprint('Account balance:', my_account.balance)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDemonstrate how to use classes and objects in Python by creating an Account class\n\n### Input:\n\n\n### Output:\nclass Account:\n    def __init__(self, name, balance):\n        # instance attributes\n        self.name = name\n        self.balance = balance\n    \n    # method to withdraw money from account\n    def withdraw(self, amount):\n        # check if amount is a valid number\n        if not isinstance(amount, (int, float)):\n            raise ValueError('Invalid amount')\n        \n        # check if amount is greater than balance\n        if amount > self.balance:\n            raise ValueError('Insufficient funds')\n        \n        # subtract the amount from the balance\n        self.balance -= amount\n    \n    # method to deposit money to account\n    def deposit(self, amount):\n        # check if amount is a valid number\n        if not isinstance(amount, (int, float)):\n            raise ValueError('Invalid amount')\n        \n        # add the amount to the balance\n        self.balance +=amount\n\n# create an instance of the Account class\nmy_account = Account('John Doe', 100)\n\n# withdraw money from account\nmy_account.withdraw(50)\n\n# deposit money to account\nmy_account.deposit(20)\n\n# print the updated balance\nprint('Account balance:', my_account.balance)"}
{"instruction":"Given a URL, write a Python script to fetch and decode the HTML web page using the `requests` library.","input":"\"https:\/\/example.org\/\"","output":"import requests\n\nurl = \"https:\/\/example.org\/\"\n\nresponse = requests.get(url)\n\nif response.status_code == 200:\n  html_page = response.content.decode('utf-8')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a URL, write a Python script to fetch and decode the HTML web page using the `requests` library.\n\n### Input:\n\"https:\/\/example.org\/\"\n\n### Output:\nimport requests\n\nurl = \"https:\/\/example.org\/\"\n\nresponse = requests.get(url)\n\nif response.status_code == 200:\n  html_page = response.content.decode('utf-8')"}
{"instruction":"Generate a list of fibonacci numbers using iterative function in Python.","input":"n=10","output":"def generate_fibonacci_numbers(n):\n    # Initialize variables\n    a = 0\n    b = 1\n\n    # Iterate and calculate fibonacci numbers\n    fib_list = [a]\n    for i in range(1, n):\n        c = a + b\n        fib_list.append(c)\n        a = b\n        b = c\n    return fib_list\n    \nif __name__ == '__main__':\n    print(generate_fibonacci_numbers(10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of fibonacci numbers using iterative function in Python.\n\n### Input:\nn=10\n\n### Output:\ndef generate_fibonacci_numbers(n):\n    # Initialize variables\n    a = 0\n    b = 1\n\n    # Iterate and calculate fibonacci numbers\n    fib_list = [a]\n    for i in range(1, n):\n        c = a + b\n        fib_list.append(c)\n        a = b\n        b = c\n    return fib_list\n    \nif __name__ == '__main__':\n    print(generate_fibonacci_numbers(10))"}
{"instruction":"Create a class in Python to represent a student and a method that calculates their grade.","input":"Not applicable","output":"class Student:\n def __init__(self, assignments, tests, projects):\n self.assignments = assignments\n self.tests = tests\n self.projects = projects\n\ndef calculate_grade(self):\n total = (self.assignments * 0.3) + (self.tests * 0.4) + (self.projects * 0.3)\n return total","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to represent a student and a method that calculates their grade.\n\n### Input:\nNot applicable\n\n### Output:\nclass Student:\n def __init__(self, assignments, tests, projects):\n self.assignments = assignments\n self.tests = tests\n self.projects = projects\n\ndef calculate_grade(self):\n total = (self.assignments * 0.3) + (self.tests * 0.4) + (self.projects * 0.3)\n return total"}
{"instruction":"Generate a Python program to output the most frequently occurring word in a given string.","input":"sentence = \"Code Generation is an important task in the AI research\"","output":"import collections\n\ndef most_frequent_word(string): \n counts = collections.Counter(string.split()) \n   \n max_count = max(counts.values()) \n   \n most_frequent = [word for word, count in counts.items() \n     if count == max_count] \n   \n print(most_frequent) \n   \nif __name__ == \"__main__\": \n    sentence = \"Code Generation is an important task in the AI research\"\n    most_frequent_word(sentence) \n  \n# Output\n# ['Generation']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to output the most frequently occurring word in a given string.\n\n### Input:\nsentence = \"Code Generation is an important task in the AI research\"\n\n### Output:\nimport collections\n\ndef most_frequent_word(string): \n counts = collections.Counter(string.split()) \n   \n max_count = max(counts.values()) \n   \n most_frequent = [word for word, count in counts.items() \n     if count == max_count] \n   \n print(most_frequent) \n   \nif __name__ == \"__main__\": \n    sentence = \"Code Generation is an important task in the AI research\"\n    most_frequent_word(sentence) \n  \n# Output\n# ['Generation']"}
{"instruction":"Consider the pseudo-code given below. Convert it into a working Python program.","input":"","output":"def fibonacci_sequence(terms):\n    first_num, second_num = 0, 1\n    fibonacci_sequence = []\n\n    for i in range(terms):\n        next_term = first_num + second_num\n        first_num, second_num = second_num, next_term\n        fibonacci_sequence.append(next_term)\n\n    return fibonacci_sequence\n\nnterms = 10\nfibonacci_sequence = fibonacci_sequence(nterms)\nprint(fibonacci_sequence)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConsider the pseudo-code given below. Convert it into a working Python program.\n\n### Input:\n\n\n### Output:\ndef fibonacci_sequence(terms):\n    first_num, second_num = 0, 1\n    fibonacci_sequence = []\n\n    for i in range(terms):\n        next_term = first_num + second_num\n        first_num, second_num = second_num, next_term\n        fibonacci_sequence.append(next_term)\n\n    return fibonacci_sequence\n\nnterms = 10\nfibonacci_sequence = fibonacci_sequence(nterms)\nprint(fibonacci_sequence)"}
{"instruction":"Create a method in Python to encrypt a given string using AES-256.","input":"","output":"import base64\nfrom Crypto.Cipher import AES\n\nsecret_key = \"YourSecr3tEncrKey\"\n\ndef encodeAES(text):\nKey = base64.b64encode(secret_key.encode(\"utf-8\"))\n\nIV = 16 * '\\x00' \n\nmode = AES.MODE_CBC\nencryptor = AES.new(Key, mode, IV=IV)\ntext = text.encode(\"utf-8\")\nciphertext = encryptor.encrypt(text)\n\nreturn base64.b64encode(ciphertext).decode(\"utf-8\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a method in Python to encrypt a given string using AES-256.\n\n### Input:\n\n\n### Output:\nimport base64\nfrom Crypto.Cipher import AES\n\nsecret_key = \"YourSecr3tEncrKey\"\n\ndef encodeAES(text):\nKey = base64.b64encode(secret_key.encode(\"utf-8\"))\n\nIV = 16 * '\\x00' \n\nmode = AES.MODE_CBC\nencryptor = AES.new(Key, mode, IV=IV)\ntext = text.encode(\"utf-8\")\nciphertext = encryptor.encrypt(text)\n\nreturn base64.b64encode(ciphertext).decode(\"utf-8\")"}
{"instruction":"Develop a machine learning model in Python to predict the age of a person based on their height.","input":"","output":"from sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\n\n#load the data\nX = height\ny = age\n\n#split it into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n#train a linear regression model\nmodel = linear_model.LinearRegression()\nmodel.fit(X_train, y_train)\n\n#predict the age based on height\ny_pred = model.predict(X_test)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a machine learning model in Python to predict the age of a person based on their height.\n\n### Input:\n\n\n### Output:\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\n\n#load the data\nX = height\ny = age\n\n#split it into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n#train a linear regression model\nmodel = linear_model.LinearRegression()\nmodel.fit(X_train, y_train)\n\n#predict the age based on height\ny_pred = model.predict(X_test)"}
{"instruction":"Given a list of words and a target word, can you generate a python code to find the minimum edit distance between the target word and all of the words in the list?","input":"list_of_words = [\"cat\", \"hat\", \"bed\", \"kyoto\", \"criminal\", \"locket\", \"lowest\"]\ntarget_word = \"copper\"","output":"def minEditDistance(list_of_words, target_word):\n  minDistance = float(\"inf\")\n  \n  for word in list_of_words:\n    editDistance = 0\n    for i in range(min(len(word), len(target_word))):\n      if word[i] != target_word[i]:\n        editDistance += 1\n    editDistance += abs(len(word) - len(target_word))\n    if editDistance < minDistance:\n      minDistance = editDistance\n      \n  return minDistance\n    \nlist_of_words = [\"cat\", \"hat\", \"bed\", \"kyoto\", \"criminal\", \"locket\", \"lowest\"]\ntarget_word = \"copper\"\n\nminDistance = minEditDistance(list_of_words, target_word)\nprint(\"Minimum Edit Distance: \", minDistance)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of words and a target word, can you generate a python code to find the minimum edit distance between the target word and all of the words in the list?\n\n### Input:\nlist_of_words = [\"cat\", \"hat\", \"bed\", \"kyoto\", \"criminal\", \"locket\", \"lowest\"]\ntarget_word = \"copper\"\n\n### Output:\ndef minEditDistance(list_of_words, target_word):\n  minDistance = float(\"inf\")\n  \n  for word in list_of_words:\n    editDistance = 0\n    for i in range(min(len(word), len(target_word))):\n      if word[i] != target_word[i]:\n        editDistance += 1\n    editDistance += abs(len(word) - len(target_word))\n    if editDistance < minDistance:\n      minDistance = editDistance\n      \n  return minDistance\n    \nlist_of_words = [\"cat\", \"hat\", \"bed\", \"kyoto\", \"criminal\", \"locket\", \"lowest\"]\ntarget_word = \"copper\"\n\nminDistance = minEditDistance(list_of_words, target_word)\nprint(\"Minimum Edit Distance: \", minDistance)"}
{"instruction":"Create a python program to create a dictionary with key as student name and its value as their grade in a class.","input":"","output":"student_grades = {\n   \"Adam\": \"A\",\n   \"Amy\": \"B\",\n   \"Aaron\": \"A\",\n   \"Bella\": \"C\"\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to create a dictionary with key as student name and its value as their grade in a class.\n\n### Input:\n\n\n### Output:\nstudent_grades = {\n   \"Adam\": \"A\",\n   \"Amy\": \"B\",\n   \"Aaron\": \"A\",\n   \"Bella\": \"C\"\n}"}
{"instruction":"Create an algorithm in Python to fill every element in a matrix with its own column number.","input":"[[1, 2, 3], \n [4, 5, 6], \n [7, 8, 9]]","output":"matrix = [[1, 2, 3], \n          [4, 5, 6], \n          [7, 8, 9]]\n\nfor row_index, row in enumerate(matrix):\n    for col_index, _ in enumerate(row):\n        matrix[row_index][col_index] = col_index + 1\n\nprint(matrix)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to fill every element in a matrix with its own column number.\n\n### Input:\n[[1, 2, 3], \n [4, 5, 6], \n [7, 8, 9]]\n\n### Output:\nmatrix = [[1, 2, 3], \n          [4, 5, 6], \n          [7, 8, 9]]\n\nfor row_index, row in enumerate(matrix):\n    for col_index, _ in enumerate(row):\n        matrix[row_index][col_index] = col_index + 1\n\nprint(matrix)"}
{"instruction":"Create a Python script to open a web page.","input":"","output":"import webbrowser\n\nurl = \"www.example.com\"\n\n# open the web page in a new browser tab\nwebbrowser.open_new_tab(url)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to open a web page.\n\n### Input:\n\n\n### Output:\nimport webbrowser\n\nurl = \"www.example.com\"\n\n# open the web page in a new browser tab\nwebbrowser.open_new_tab(url)"}
{"instruction":"Given a list of integers, write a Python program to compute the total number of pairwise summations in which the summation equals a given number.","input":"List of Integers: [1,2,3,4]\nNumber: 7","output":"def find_pairs(nums, num):\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == num:\n                pairs.append((nums[i], nums[j]))\n    return len(pairs)\n\nif __name__ == '__main__':\n\tnums = [1,2,3,4]\n\tnum = 7\n\tpairs = find_pairs(nums, num)\n\tprint(pairs)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integers, write a Python program to compute the total number of pairwise summations in which the summation equals a given number.\n\n### Input:\nList of Integers: [1,2,3,4]\nNumber: 7\n\n### Output:\ndef find_pairs(nums, num):\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == num:\n                pairs.append((nums[i], nums[j]))\n    return len(pairs)\n\nif __name__ == '__main__':\n\tnums = [1,2,3,4]\n\tnum = 7\n\tpairs = find_pairs(nums, num)\n\tprint(pairs)"}
{"instruction":"Create a Python program to traverse a 2D array and print the values in spiral order, starting from the center.","input":"2D array:\n  [1,  2,  3, 4]\n  [5,  6,  7, 8]\n  [9, 10, 11, 12]\n  [13, 14, 15, 16]","output":"def spiralTraverse(matrix):\n    startRow, startCol = 0, 0\n    endRow, endCol = len(matrix) - 1, len(matrix[0]) - 1\n    result = []\n\n    while startRow <= endRow and startCol <= endCol:\n        # Traverse from left to right\n        for col in range(startCol, endCol + 1):\n            result.append(matrix[startRow][col])\n\n        # Traverse from top to bottom\n        for row in range(startRow + 1, endRow + 1):\n            result.append(matrix[row][endCol])\n\n        # Traverse from right to left\n        for col in range(endCol - 1, startCol - 1, -1):\n            result.append(matrix[endRow][col])\n\n        # Traverse from bottom to top\n        for row in range(endRow - 1, startRow, -1):\n            result.append(matrix[row][startCol])\n\n        startRow += 1\n        endRow -= 1\n        startCol += 1\n        endCol -= 1\n    \n    return result\n\nmatrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n\nprint(spiralTraverse(matrix))\n\n# Output: [7, 8, 9, 6, 3, 4, 5, 2, 11, 12, 13, 14, 15, 10, 1, 16]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to traverse a 2D array and print the values in spiral order, starting from the center.\n\n### Input:\n2D array:\n  [1,  2,  3, 4]\n  [5,  6,  7, 8]\n  [9, 10, 11, 12]\n  [13, 14, 15, 16]\n\n### Output:\ndef spiralTraverse(matrix):\n    startRow, startCol = 0, 0\n    endRow, endCol = len(matrix) - 1, len(matrix[0]) - 1\n    result = []\n\n    while startRow <= endRow and startCol <= endCol:\n        # Traverse from left to right\n        for col in range(startCol, endCol + 1):\n            result.append(matrix[startRow][col])\n\n        # Traverse from top to bottom\n        for row in range(startRow + 1, endRow + 1):\n            result.append(matrix[row][endCol])\n\n        # Traverse from right to left\n        for col in range(endCol - 1, startCol - 1, -1):\n            result.append(matrix[endRow][col])\n\n        # Traverse from bottom to top\n        for row in range(endRow - 1, startRow, -1):\n            result.append(matrix[row][startCol])\n\n        startRow += 1\n        endRow -= 1\n        startCol += 1\n        endCol -= 1\n    \n    return result\n\nmatrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n\nprint(spiralTraverse(matrix))\n\n# Output: [7, 8, 9, 6, 3, 4, 5, 2, 11, 12, 13, 14, 15, 10, 1, 16]"}
{"instruction":"Create a function in Python to compute the sum of all the natural numbers in a given range.","input":"start = 1\nend = 10","output":"def sum_natural_numbers(start, end):\n    \"\"\"\n    Computes the sum of all natural numbers in a given range.\n    \n    Parameters:\n    start (int): start of the range\n    end (int): end of the range\n    \n    Returns:\n    int: the sum of the natural numbers in the range\n    \"\"\"\n    total = 0\n    for i in range(start, end+1):\n        total += i\n    return total","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to compute the sum of all the natural numbers in a given range.\n\n### Input:\nstart = 1\nend = 10\n\n### Output:\ndef sum_natural_numbers(start, end):\n    \"\"\"\n    Computes the sum of all natural numbers in a given range.\n    \n    Parameters:\n    start (int): start of the range\n    end (int): end of the range\n    \n    Returns:\n    int: the sum of the natural numbers in the range\n    \"\"\"\n    total = 0\n    for i in range(start, end+1):\n        total += i\n    return total"}
{"instruction":"Create a Recurrent Neural Network (RNN) Model in Python with Keras that takes in text data and generates predicted labels.","input":"Not applicable","output":"import keras\nfrom keras.preprocessing import sequence\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM\nfrom keras.datasets import imdb\n\n(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=20000)\n\nx_train = sequence.pad_sequences(x_train, maxlen=80)\nx_test = sequence.pad_sequences(x_test, maxlen=80)\n\nmodel = Sequential()\nmodel.add(Embedding(20000, 128))\nmodel.add(LSTM(128, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',\n optimizer='adam',\n metrics=['accuracy'])\n\nmodel.fit(x_train, y_train,\n batch_size=32,\n epochs=15,\n verbose=2,\n validation_data=(x_test, y_test))\n\nscore, acc = model.evaluate(x_test, y_test,\n batch_size=32,\n verbose=2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Recurrent Neural Network (RNN) Model in Python with Keras that takes in text data and generates predicted labels.\n\n### Input:\nNot applicable\n\n### Output:\nimport keras\nfrom keras.preprocessing import sequence\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM\nfrom keras.datasets import imdb\n\n(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=20000)\n\nx_train = sequence.pad_sequences(x_train, maxlen=80)\nx_test = sequence.pad_sequences(x_test, maxlen=80)\n\nmodel = Sequential()\nmodel.add(Embedding(20000, 128))\nmodel.add(LSTM(128, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',\n optimizer='adam',\n metrics=['accuracy'])\n\nmodel.fit(x_train, y_train,\n batch_size=32,\n epochs=15,\n verbose=2,\n validation_data=(x_test, y_test))\n\nscore, acc = model.evaluate(x_test, y_test,\n batch_size=32,\n verbose=2)"}
{"instruction":"Write an ORM (Object Relational Mapping) query in Python.","input":"Sample data:\nusers: id (integer), name (string), email (string)","output":"from sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\n \nengine = create_engine('sqlite:\/\/\/mydb.db')\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    email = Column(String)\n\nsession = sessionmaker(bind=engine)()\n\n#query\nusers = session.query(User).all() \nfor user in users: \n print(f\"User: {user.name}, Email: {user.email}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an ORM (Object Relational Mapping) query in Python.\n\n### Input:\nSample data:\nusers: id (integer), name (string), email (string)\n\n### Output:\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\n \nengine = create_engine('sqlite:\/\/\/mydb.db')\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    email = Column(String)\n\nsession = sessionmaker(bind=engine)()\n\n#query\nusers = session.query(User).all() \nfor user in users: \n print(f\"User: {user.name}, Email: {user.email}\")"}
{"instruction":"Create a Python program to reverse a given stack without recursion.","input":"stack = [1, 2, 3]","output":"def reverse_stack(stack):\n    rev_stack = []\n\n    while(stack):\n        rev_stack.append(stack.pop())\n\n    return rev_stack\n\n# Usage\nstack = [1, 2, 3]\nprint(reverse_stack(stack)) # => [3, 2, 1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to reverse a given stack without recursion.\n\n### Input:\nstack = [1, 2, 3]\n\n### Output:\ndef reverse_stack(stack):\n    rev_stack = []\n\n    while(stack):\n        rev_stack.append(stack.pop())\n\n    return rev_stack\n\n# Usage\nstack = [1, 2, 3]\nprint(reverse_stack(stack)) # => [3, 2, 1]"}
{"instruction":"Using a neural network model, design a Python script to classify flower species.","input":"","output":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neural_network import MLPClassifier\n\n# Read in the data\ndata = pd.read_csv('flowers.csv')\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\n\n# Scale the data\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\n# Train the neural network\nclf = MLPClassifier(hidden_layer_sizes=(20, 20), max_iter=1000)\nclf.fit(X, y)\n\n# Test the model\npreds = clf.predict(X)\n\n# Evaluate the model\naccuracy = np.mean(preds == y)\nprint('Model accuracy: {:.2f}%'.format(accuracy*100))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing a neural network model, design a Python script to classify flower species.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neural_network import MLPClassifier\n\n# Read in the data\ndata = pd.read_csv('flowers.csv')\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\n\n# Scale the data\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\n# Train the neural network\nclf = MLPClassifier(hidden_layer_sizes=(20, 20), max_iter=1000)\nclf.fit(X, y)\n\n# Test the model\npreds = clf.predict(X)\n\n# Evaluate the model\naccuracy = np.mean(preds == y)\nprint('Model accuracy: {:.2f}%'.format(accuracy*100))"}
{"instruction":"Design a Python program to simulate a simple ATM machine.","input":"","output":"# account class with the necessary functions \nclass Account:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdrawal(self, amount):\n        self.balance -= amount\n\n# ATM class with the necessary functions\nclass ATM:\n    def __init__(self):\n        self.accounts = []\n\n    def createAccount(self, name, balance):\n        account = Account(name, balance)\n        self.accounts.append(account)\n\n    def deposit(self, name, amount):\n        for account in self.accounts:\n            if account.name == name:\n                account.deposit(amount)\n\n    def withdrawal(self, name, amount):\n        for account in self.accounts:\n            if account.name == name:\n                account.withdrawal(amount)\n\n    def printBalance(self, name):\n        for account in self.accounts:\n            if account.name == name:\n                print(name, \" Balance: \", account.balance)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to simulate a simple ATM machine.\n\n### Input:\n\n\n### Output:\n# account class with the necessary functions \nclass Account:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdrawal(self, amount):\n        self.balance -= amount\n\n# ATM class with the necessary functions\nclass ATM:\n    def __init__(self):\n        self.accounts = []\n\n    def createAccount(self, name, balance):\n        account = Account(name, balance)\n        self.accounts.append(account)\n\n    def deposit(self, name, amount):\n        for account in self.accounts:\n            if account.name == name:\n                account.deposit(amount)\n\n    def withdrawal(self, name, amount):\n        for account in self.accounts:\n            if account.name == name:\n                account.withdrawal(amount)\n\n    def printBalance(self, name):\n        for account in self.accounts:\n            if account.name == name:\n                print(name, \" Balance: \", account.balance)"}
{"instruction":"Write a Python script that collects data from two different APIs and merges the response data into a single dataset.","input":"Open Movie Database (OMDB) API Key: 12345678\nFootball Data API Key: 87654321","output":"import json\nimport requests\n\n# Fetch data from OMDB API\ndef fetch_omdb_data(omdb_api_key):\n omdb_data = []\n\n # Query for movies\n omdb_url = f'http:\/\/www.omdbapi.com\/?apikey={omdb_api_key}&s=movies'\n response = requests.get(omdb_url)\n data = response.json()\n for item in data['Search']:\n    omdb_data.append( (item['Title'], item['Year'], item['Type'], item['imdbID']) )\n\n# Fetch data from Football Data API\ndef fetch_football_data(football_api_key):\n football_data = []\n\n # Query for football matches\nfootball_url = f'http:\/\/api.football-data.org\/v2\/matches?apikey={football_api_key}'\nresponse = requests.get(football_url)\ndata = response.json()\nfor item in data['matches']:\n football_data.append( (item['competition']['name'], item['season']['startDate'], item['season']['endDate'], item['utcDate']) )\n\n# Merge data from both APIs\nmerged_data = []\nfor omdb_row in omdb_data:\n for football_row in football_data:\n if (omdb_row[1] >= football_row[1] and omdb_row[1] <= football_row[2]):\n merged_data.append(( *omdb_row, *football_row ))\n\n# Write merged data into JSON file\nwith open('merged_data.json', 'w') as outfile:\n json.dump(merged_data, outfile)\n\n# Run functions\nomdb_api_key = '12345678'\nfootball_api_key = '87654321'\nfetch_omdb_data(omdb_api_key)\nfetch_football_data(football_api_key)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that collects data from two different APIs and merges the response data into a single dataset.\n\n### Input:\nOpen Movie Database (OMDB) API Key: 12345678\nFootball Data API Key: 87654321\n\n### Output:\nimport json\nimport requests\n\n# Fetch data from OMDB API\ndef fetch_omdb_data(omdb_api_key):\n omdb_data = []\n\n # Query for movies\n omdb_url = f'http:\/\/www.omdbapi.com\/?apikey={omdb_api_key}&s=movies'\n response = requests.get(omdb_url)\n data = response.json()\n for item in data['Search']:\n    omdb_data.append( (item['Title'], item['Year'], item['Type'], item['imdbID']) )\n\n# Fetch data from Football Data API\ndef fetch_football_data(football_api_key):\n football_data = []\n\n # Query for football matches\nfootball_url = f'http:\/\/api.football-data.org\/v2\/matches?apikey={football_api_key}'\nresponse = requests.get(football_url)\ndata = response.json()\nfor item in data['matches']:\n football_data.append( (item['competition']['name'], item['season']['startDate'], item['season']['endDate'], item['utcDate']) )\n\n# Merge data from both APIs\nmerged_data = []\nfor omdb_row in omdb_data:\n for football_row in football_data:\n if (omdb_row[1] >= football_row[1] and omdb_row[1] <= football_row[2]):\n merged_data.append(( *omdb_row, *football_row ))\n\n# Write merged data into JSON file\nwith open('merged_data.json', 'w') as outfile:\n json.dump(merged_data, outfile)\n\n# Run functions\nomdb_api_key = '12345678'\nfootball_api_key = '87654321'\nfetch_omdb_data(omdb_api_key)\nfetch_football_data(football_api_key)"}
{"instruction":"Write a Python program to append multiple lists into one list.","input":"list1 = [2, 3, 4]\nlist2 = [5, 6, 7]\nlist3 = [8, 9, 10]","output":"list1 = [2, 3, 4]\nlist2 = [5, 6, 7]\nlist3 = [8, 9, 10]\n\nlist = list1 + list2 + list3\nprint(list) \n# Output: [2, 3, 4, 5, 6, 7, 8, 9, 10]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to append multiple lists into one list.\n\n### Input:\nlist1 = [2, 3, 4]\nlist2 = [5, 6, 7]\nlist3 = [8, 9, 10]\n\n### Output:\nlist1 = [2, 3, 4]\nlist2 = [5, 6, 7]\nlist3 = [8, 9, 10]\n\nlist = list1 + list2 + list3\nprint(list) \n# Output: [2, 3, 4, 5, 6, 7, 8, 9, 10]"}
{"instruction":"Develop an algorithm in Python that prints all subset combinations of a given string.","input":"String: ABC","output":"def Powerset(arr): \n  \n    # variable to store the power sets \n    powerset = [[]] \n      \n    # generte the power sets \n    for ele in arr: \n          \n        # give token which stores the length  \n        # of the present power set \n        n = len(powerset) \n          \n        # loop to give powerset of all element \n        for i in range(0, n): \n            newset = powerset[i].copy() \n            newset.append(ele) \n            powerset.append(newset) \n  \n    return powerset \n  \n# Driver Code \narr = ['A', 'B', 'C'] \nprint(Powerset(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python that prints all subset combinations of a given string.\n\n### Input:\nString: ABC\n\n### Output:\ndef Powerset(arr): \n  \n    # variable to store the power sets \n    powerset = [[]] \n      \n    # generte the power sets \n    for ele in arr: \n          \n        # give token which stores the length  \n        # of the present power set \n        n = len(powerset) \n          \n        # loop to give powerset of all element \n        for i in range(0, n): \n            newset = powerset[i].copy() \n            newset.append(ele) \n            powerset.append(newset) \n  \n    return powerset \n  \n# Driver Code \narr = ['A', 'B', 'C'] \nprint(Powerset(arr))"}
{"instruction":"Develop a Python program for a ring of sensors, where each sensor can detect whether its two neighbors are both active or not. The program should return the number of active sensors in the ring.","input":"ringOfSensors = [1, 0, 1, 0, 1]","output":"def countActiveSensors(ringOfSensors):\n    count = 0\n    for i in range(len(ringOfSensors)):\n        left_neighbor = ringOfSensors[(i - 1 + len(ringOfSensors)) % len(ringOfSensors)]\n        right_neighbor = ringOfSensors[(i + 1) % len(ringOfSensors)]\n        if left_neighbor == 1 and right_neighbor == 1:\n            count += 1\n\n    return count\n\nringOfSensors = [1, 0, 1, 0, 1]\nprint(countActiveSensors(ringOfSensors))\n\n\/\/ Output: 3","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program for a ring of sensors, where each sensor can detect whether its two neighbors are both active or not. The program should return the number of active sensors in the ring.\n\n### Input:\nringOfSensors = [1, 0, 1, 0, 1]\n\n### Output:\ndef countActiveSensors(ringOfSensors):\n    count = 0\n    for i in range(len(ringOfSensors)):\n        left_neighbor = ringOfSensors[(i - 1 + len(ringOfSensors)) % len(ringOfSensors)]\n        right_neighbor = ringOfSensors[(i + 1) % len(ringOfSensors)]\n        if left_neighbor == 1 and right_neighbor == 1:\n            count += 1\n\n    return count\n\nringOfSensors = [1, 0, 1, 0, 1]\nprint(countActiveSensors(ringOfSensors))\n\n\/\/ Output: 3"}
{"instruction":"Write a Python program to simulate the game of rock paper scissors. The program should accept user input.","input":"Not applicable","output":"import random\n\nmoves = [\"Rock\", \"Paper\", \"Scissors\"]\n\nplayer_move = input(\"Please enter your move: Rock, Paper, Scissors \\n\")\n\ncomputer_random = random.randint(0,2)\ncomputer_move = moves[computer_random]\n\nprint(\"Computer plays:\" + computer_move)\n\nif player_move == \"Rock\" and computer_move == \"Scissors\" or player_move == \"Paper\" and computer_move == \"Rock\" or player_move == \"Scissors\" and computer_move == \"Paper\":\n print(\"You Win!\")\nelif player_move == computer_move:\n print(\"It's a tie!\")\nelse:\n print(\"You Lose!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to simulate the game of rock paper scissors. The program should accept user input.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\nmoves = [\"Rock\", \"Paper\", \"Scissors\"]\n\nplayer_move = input(\"Please enter your move: Rock, Paper, Scissors \\n\")\n\ncomputer_random = random.randint(0,2)\ncomputer_move = moves[computer_random]\n\nprint(\"Computer plays:\" + computer_move)\n\nif player_move == \"Rock\" and computer_move == \"Scissors\" or player_move == \"Paper\" and computer_move == \"Rock\" or player_move == \"Scissors\" and computer_move == \"Paper\":\n print(\"You Win!\")\nelif player_move == computer_move:\n print(\"It's a tie!\")\nelse:\n print(\"You Lose!\")"}
{"instruction":"Create a function in Python to generate a Fibonacci series up to a given number.","input":"50","output":"def fibonacci(num):\n    a = 0\n    b = 1\n    if num == 1:\n        print(a)\n    elif num == 2:\n        print(a,b)\n    else:\n        print(a,b, end=\" \")\n        for i in range(2,num):\n            c = a + b\n            a = b\n            b = c\n            print(b, end=\" \")\n\nfibonacci(50) # output: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to generate a Fibonacci series up to a given number.\n\n### Input:\n50\n\n### Output:\ndef fibonacci(num):\n    a = 0\n    b = 1\n    if num == 1:\n        print(a)\n    elif num == 2:\n        print(a,b)\n    else:\n        print(a,b, end=\" \")\n        for i in range(2,num):\n            c = a + b\n            a = b\n            b = c\n            print(b, end=\" \")\n\nfibonacci(50) # output: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181"}
{"instruction":"Write a Python program to generate a password with a given length and characters.","input":"length = 10\ncharacters = alphanumeric","output":"import random\n\ndef generate_password(length, characters):\n    password = ''\n    for i in range(length):\n        password += random.choice(characters)\n    return password\n\nprint(generate_password(10, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a password with a given length and characters.\n\n### Input:\nlength = 10\ncharacters = alphanumeric\n\n### Output:\nimport random\n\ndef generate_password(length, characters):\n    password = ''\n    for i in range(length):\n        password += random.choice(characters)\n    return password\n\nprint(generate_password(10, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'))"}
{"instruction":"Rewrite the following bash script to Python.","input":"#!\/bin\/bash\necho \"Enter a number: \"\nread num\nfact=1\nfor((i=num;i>=1;i--))\ndo \n    fact=$((fact * i))\ndone\necho \"Factorial is $fact\"","output":"print(\"Enter a number: \")\nnum = int(input())\n\nfact = 1\nfor i in range(num, 0, -1):\n    fact *= i\n\nprint(\"Factorial is\", fact)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following bash script to Python.\n\n### Input:\n#!\/bin\/bash\necho \"Enter a number: \"\nread num\nfact=1\nfor((i=num;i>=1;i--))\ndo \n    fact=$((fact * i))\ndone\necho \"Factorial is $fact\"\n\n### Output:\nprint(\"Enter a number: \")\nnum = int(input())\n\nfact = 1\nfor i in range(num, 0, -1):\n    fact *= i\n\nprint(\"Factorial is\", fact)"}
{"instruction":"Write a Python program to classify the given data into two classes.","input":"","output":"def classify(data):\n    # Fit your model on the data\n    model.fit(data)\n    # Return the predicted classes\n    return model.predict(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify the given data into two classes.\n\n### Input:\n\n\n### Output:\ndef classify(data):\n    # Fit your model on the data\n    model.fit(data)\n    # Return the predicted classes\n    return model.predict(data)"}
{"instruction":"Create Python code that will insert a new item at the end of a list.","input":"","output":"def insert_at_end(list, item):\n    \"\"\"Inserts an item at the end of a list\"\"\"\n    list.append(item)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate Python code that will insert a new item at the end of a list.\n\n### Input:\n\n\n### Output:\ndef insert_at_end(list, item):\n    \"\"\"Inserts an item at the end of a list\"\"\"\n    list.append(item)"}
{"instruction":"Write a Python program to search for a specific value in a list.","input":"my_list = [2, 4, 6, 8, 10]","output":"def search_list(search_term, my_list):\n for item in my_list:\n if item == search_term:\n return True\nreturn False\n\nmy_list = [2, 4, 6, 8, 10]\nsearch_term = 8\n\nif search_list(search_term, my_list):\n print(\"Value found\")\nelse:\n print(\"Value not found\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to search for a specific value in a list.\n\n### Input:\nmy_list = [2, 4, 6, 8, 10]\n\n### Output:\ndef search_list(search_term, my_list):\n for item in my_list:\n if item == search_term:\n return True\nreturn False\n\nmy_list = [2, 4, 6, 8, 10]\nsearch_term = 8\n\nif search_list(search_term, my_list):\n print(\"Value found\")\nelse:\n print(\"Value not found\")"}
{"instruction":"Create an algorithm in Python to find the sum of the first n prime numbers","input":"n = 10","output":"def sum_of_primes(n):\n    if n < 2: \n        return 0\n    primes = [2]\n    num = 3\n    while len(primes) < n:\n        is_prime = True\n        for p in primes:\n            if num % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 2\n    return sum(primes)\n\nprint(sum_of_primes(10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to find the sum of the first n prime numbers\n\n### Input:\nn = 10\n\n### Output:\ndef sum_of_primes(n):\n    if n < 2: \n        return 0\n    primes = [2]\n    num = 3\n    while len(primes) < n:\n        is_prime = True\n        for p in primes:\n            if num % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 2\n    return sum(primes)\n\nprint(sum_of_primes(10))"}
{"instruction":"Modify the code from the previous example to count the frequency of words in the string.","input":"string = 'Python is an interpreted, high-level, general-purpose programming language.'","output":"def word_frequency(string):\n    words = string.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict\n\nfrequency = word_frequency(string)\nprint(frequency) # prints {'Python': 1, 'is': 1, 'an': 1, 'interpreted': 1, 'high-level': 1, 'general-purpose': 1, 'programming': 1, 'language.': 1}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the code from the previous example to count the frequency of words in the string.\n\n### Input:\nstring = 'Python is an interpreted, high-level, general-purpose programming language.'\n\n### Output:\ndef word_frequency(string):\n    words = string.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict\n\nfrequency = word_frequency(string)\nprint(frequency) # prints {'Python': 1, 'is': 1, 'an': 1, 'interpreted': 1, 'high-level': 1, 'general-purpose': 1, 'programming': 1, 'language.': 1}"}
{"instruction":"Design a web application using python and Flask to save user data submitted via a form.","input":"","output":"from flask import Flask\nfrom flask import render_template\nfrom flask import request\n\n@app.route('\/')\ndef form():\n    return render_template('form.html')\n\n@app.route('\/', methods=['POST']\ndef save_data():\n   name = request.form['name']\n   age = request.form['age']\n   # Save user data to database \n   return render_template('success.html')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a web application using python and Flask to save user data submitted via a form.\n\n### Input:\n\n\n### Output:\nfrom flask import Flask\nfrom flask import render_template\nfrom flask import request\n\n@app.route('\/')\ndef form():\n    return render_template('form.html')\n\n@app.route('\/', methods=['POST']\ndef save_data():\n   name = request.form['name']\n   age = request.form['age']\n   # Save user data to database \n   return render_template('success.html')"}
{"instruction":"Design an algorithm (in Python) to determine whether a given number is even or odd.","input":"","output":"def is_even(number): \n    if(number % 2 == 0): \n        return True \n    else: \n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm (in Python) to determine whether a given number is even or odd.\n\n### Input:\n\n\n### Output:\ndef is_even(number): \n    if(number % 2 == 0): \n        return True \n    else: \n        return False"}
{"instruction":"Develop a program to perform edit distance calculation on two strings in Python.","input":"","output":"def edit_distance(str1, str2):\n    matrix = []\n    for i in range(len(str1) + 1):\n        matrix.append([0] * (len(str2) + 1))\n        \n    for i in range(len(str1) + 1):\n        matrix[i][0] = i\n    for j in range(len(str2) + 1):\n        matrix[0][j] = j\n        \n    for i in range(1, len(str1) + 1):\n        for j in range(1, len(str2) + 1):\n            if str1[i-1] == str2[j-1]:\n                matrix[i][j] = matrix[i-1][j-1]\n            else:\n                matrix[i][j] = 1 + min(matrix[i][j-1], matrix[i-1][j], matrix[i-1][j-1])\n    \n    return matrix[len(str1)][len(str2)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program to perform edit distance calculation on two strings in Python.\n\n### Input:\n\n\n### Output:\ndef edit_distance(str1, str2):\n    matrix = []\n    for i in range(len(str1) + 1):\n        matrix.append([0] * (len(str2) + 1))\n        \n    for i in range(len(str1) + 1):\n        matrix[i][0] = i\n    for j in range(len(str2) + 1):\n        matrix[0][j] = j\n        \n    for i in range(1, len(str1) + 1):\n        for j in range(1, len(str2) + 1):\n            if str1[i-1] == str2[j-1]:\n                matrix[i][j] = matrix[i-1][j-1]\n            else:\n                matrix[i][j] = 1 + min(matrix[i][j-1], matrix[i-1][j], matrix[i-1][j-1])\n    \n    return matrix[len(str1)][len(str2)]"}
{"instruction":"Convert the following Ruby code snippet to Python","input":"name = \"Jared\"\nputs \"Hello #{name}\"","output":"name = \"Jared\"\nprint(f\"Hello {name}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following Ruby code snippet to Python\n\n### Input:\nname = \"Jared\"\nputs \"Hello #{name}\"\n\n### Output:\nname = \"Jared\"\nprint(f\"Hello {name}\")"}
{"instruction":"Create a python function to extract the largest DNA sequence from a list of sequences.","input":"sequences = [\"ATGATATCATCGATTGTA\",\n\"ATGCGATATACGATGAT\",\n\"ATGGATCGATTATATTA\"]","output":"def longest_sequence(sequences):\n longest_sequence = sequences[0]\n\n for sequence in sequences:\n if len(sequence) > len(longest_sequence):\n longest_sequence = sequence\n\n return longest_sequence\n\nprint(longest_sequence(sequences))  # ATGATATCATCGATTGTA","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function to extract the largest DNA sequence from a list of sequences.\n\n### Input:\nsequences = [\"ATGATATCATCGATTGTA\",\n\"ATGCGATATACGATGAT\",\n\"ATGGATCGATTATATTA\"]\n\n### Output:\ndef longest_sequence(sequences):\n longest_sequence = sequences[0]\n\n for sequence in sequences:\n if len(sequence) > len(longest_sequence):\n longest_sequence = sequence\n\n return longest_sequence\n\nprint(longest_sequence(sequences))  # ATGATATCATCGATTGTA"}
{"instruction":"Given a dictionary and a string, write a Python program to compute the number of times each character appears in the string.","input":"dict = {'a': 0, 'b': 0, 'c': 0}\nstr = 'abacab'","output":"def freq_char_dict(dict, str): \n    for char in str: \n        dict[char] += 1\n    return dict\n  \ndict = {'a': 0, 'b': 0, 'c': 0} \nstr = 'abacab'\nprint(freq_char_dict(dict, str))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a dictionary and a string, write a Python program to compute the number of times each character appears in the string.\n\n### Input:\ndict = {'a': 0, 'b': 0, 'c': 0}\nstr = 'abacab'\n\n### Output:\ndef freq_char_dict(dict, str): \n    for char in str: \n        dict[char] += 1\n    return dict\n  \ndict = {'a': 0, 'b': 0, 'c': 0} \nstr = 'abacab'\nprint(freq_char_dict(dict, str))"}
{"instruction":"Create a basic Python program that prints a message in the console every 3 seconds.","input":"Not applicable","output":"import time\n\nwhile True:\n    print 'This message is printed every 3s'\n    time.sleep(3)  # Sleep for 3 seconds","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Python program that prints a message in the console every 3 seconds.\n\n### Input:\nNot applicable\n\n### Output:\nimport time\n\nwhile True:\n    print 'This message is printed every 3s'\n    time.sleep(3)  # Sleep for 3 seconds"}
{"instruction":"Implement a search algorithm in Python that searches for a given element in a given array.","input":"[3, 5, 7, 8, 9], 5","output":"def search_array(array, element):\n    # loop through array\n    for i in range(len(array)):\n        # compare array element and search element\n        if array[i] == element:\n            # return index if elements are equal\n            return i\n    # return -1 if search element is not found\n    return -1\n\narray = [3, 5, 7, 8, 9]\nelement = 5\n\nindex = search_array(array, element)\nif index != -1:\n    print(\"Element {} found at index {}\".format(element, index))\nelse:\n    print(\"Element not found.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a search algorithm in Python that searches for a given element in a given array.\n\n### Input:\n[3, 5, 7, 8, 9], 5\n\n### Output:\ndef search_array(array, element):\n    # loop through array\n    for i in range(len(array)):\n        # compare array element and search element\n        if array[i] == element:\n            # return index if elements are equal\n            return i\n    # return -1 if search element is not found\n    return -1\n\narray = [3, 5, 7, 8, 9]\nelement = 5\n\nindex = search_array(array, element)\nif index != -1:\n    print(\"Element {} found at index {}\".format(element, index))\nelse:\n    print(\"Element not found.\")"}
{"instruction":"Create an API in Python with Flask for an online store. The API should include endpoints to list items, get items by id, add items, update items, and delete items.","input":"Not Applicable","output":"from flask import Flask, jsonify, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:\/\/\/\/tmp\/test.db'\ndb = SQLAlchemy(app)\n\nclass Item(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(50))\n description = db.Column(db.String(200))\n \n@app.route('\/items', methods=['GET'])\ndef get_items():\n items = Item.query.all()\n return jsonify([item.__dict__() for item in items])\n\n@app.route('\/items\/<int:id>', methods=['GET'])\ndef get_item(id):\n item = Item.query.get(id).__dict__()\n return jsonify(item)\n\n@app.route('\/items', methods=['POST'])\ndef add_item():\n item = Item(name=request.json['name'], description=request.json['description'])\n db.session.add(item)\n db.session.commit()\n return jsonify(item.__dict__())\n\n@app.route('\/items\/<int:id>', methods=['PUT'])\ndef update_item(id):\n item = Item.query.get(id)\n item.name = request.json['name']\n item.description = request.json['description']\n db.session.commit()\n return jsonify(item.__dict__())\n\n@app.route('\/items\/<int:id>', methods=['DELETE'])\ndef delete_item(id):\n Item.query.filter_by(id=id).delete()\n db.session.commit()\n return {'message': 'Item deleted'}\n\nif __name__ == '__main__':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API in Python with Flask for an online store. The API should include endpoints to list items, get items by id, add items, update items, and delete items.\n\n### Input:\nNot Applicable\n\n### Output:\nfrom flask import Flask, jsonify, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:\/\/\/\/tmp\/test.db'\ndb = SQLAlchemy(app)\n\nclass Item(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(50))\n description = db.Column(db.String(200))\n \n@app.route('\/items', methods=['GET'])\ndef get_items():\n items = Item.query.all()\n return jsonify([item.__dict__() for item in items])\n\n@app.route('\/items\/<int:id>', methods=['GET'])\ndef get_item(id):\n item = Item.query.get(id).__dict__()\n return jsonify(item)\n\n@app.route('\/items', methods=['POST'])\ndef add_item():\n item = Item(name=request.json['name'], description=request.json['description'])\n db.session.add(item)\n db.session.commit()\n return jsonify(item.__dict__())\n\n@app.route('\/items\/<int:id>', methods=['PUT'])\ndef update_item(id):\n item = Item.query.get(id)\n item.name = request.json['name']\n item.description = request.json['description']\n db.session.commit()\n return jsonify(item.__dict__())\n\n@app.route('\/items\/<int:id>', methods=['DELETE'])\ndef delete_item(id):\n Item.query.filter_by(id=id).delete()\n db.session.commit()\n return {'message': 'Item deleted'}\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"instruction":"Write a python program to classify the sentiment of a given piece of text.","input":"The government has done a tremendous job in handling the pandemic situation.","output":"import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef classify_sentiment(text):\n    sid = SentimentIntensityAnalyzer()\n    score = sid.polarity_scores(text)\n    if score['compound'] >= 0.05:\n        return 'positive'\n    elif score['compound'] <= - 0.05:\n        return 'negative'\n    else:\n        return 'neutral'\n\nsentiment = classify_sentiment(\"The government has done a tremendous job in handling the pandemic situation.\")\nprint(sentiment)\n# Output: positive","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to classify the sentiment of a given piece of text.\n\n### Input:\nThe government has done a tremendous job in handling the pandemic situation.\n\n### Output:\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef classify_sentiment(text):\n    sid = SentimentIntensityAnalyzer()\n    score = sid.polarity_scores(text)\n    if score['compound'] >= 0.05:\n        return 'positive'\n    elif score['compound'] <= - 0.05:\n        return 'negative'\n    else:\n        return 'neutral'\n\nsentiment = classify_sentiment(\"The government has done a tremendous job in handling the pandemic situation.\")\nprint(sentiment)\n# Output: positive"}
{"instruction":"Write a Python program that inputs a list of numbers and sorts them in ascending order.","input":"The list [3,5,2,7,1,8,4]","output":"def sort_numbers(numbers): \n    for i in range(len(numbers) - 1):\n        min_index = i\n        for j in range(i + 1, len(numbers)):\n            if numbers[min_index] > numbers[j]:\n                min_index = j\n        numbers[i], numbers[min_index] = numbers[min_index], numbers[i]\n    return numbers\n\nlist_numbers = [3,5,2,7,1,8,4]\nsorted_list = sort_numbers(list_numbers)\n\nprint(sorted_list) # Output: [1, 2, 3, 4, 5, 7, 8]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that inputs a list of numbers and sorts them in ascending order.\n\n### Input:\nThe list [3,5,2,7,1,8,4]\n\n### Output:\ndef sort_numbers(numbers): \n    for i in range(len(numbers) - 1):\n        min_index = i\n        for j in range(i + 1, len(numbers)):\n            if numbers[min_index] > numbers[j]:\n                min_index = j\n        numbers[i], numbers[min_index] = numbers[min_index], numbers[i]\n    return numbers\n\nlist_numbers = [3,5,2,7,1,8,4]\nsorted_list = sort_numbers(list_numbers)\n\nprint(sorted_list) # Output: [1, 2, 3, 4, 5, 7, 8]"}
{"instruction":"Implement a code in Python to print the prime numbers in a given range.","input":"20","output":"def printPrime(n): \n       \n    # Prints all prime numbers less than or equal to n\n    prime = [True for i in range(n + 1)] \n    p = 2\n    while (p * p <= n): \n          \n        # If prime[p] is not changed, then it is a prime \n        if (prime[p] == True): \n               \n            # Update all multiples of p \n            for i in range(p * p, n + 1, p): \n                prime[i] = False\n               \n        p += 1\n       \n    # Print all prime numbers \n    for p in range(2, n): \n        if prime[p] == True: \n            print(p), \n           \n# Driver Code \nn = 20  \nprintPrime(n)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a code in Python to print the prime numbers in a given range.\n\n### Input:\n20\n\n### Output:\ndef printPrime(n): \n       \n    # Prints all prime numbers less than or equal to n\n    prime = [True for i in range(n + 1)] \n    p = 2\n    while (p * p <= n): \n          \n        # If prime[p] is not changed, then it is a prime \n        if (prime[p] == True): \n               \n            # Update all multiples of p \n            for i in range(p * p, n + 1, p): \n                prime[i] = False\n               \n        p += 1\n       \n    # Print all prime numbers \n    for p in range(2, n): \n        if prime[p] == True: \n            print(p), \n           \n# Driver Code \nn = 20  \nprintPrime(n)"}
{"instruction":"Write a Python program for encrypting a given string using Caesar cipher.","input":"The string is \"Hello World\", and the shift used is 4.","output":"def encryption(message, shift): \n    cipher = '' \n    # traverse message \n    for char in message: \n        # Encrypt uppercase characters\n        if (char.isupper()): \n            cipher += chr((ord(char) + shift - 65) % 26 + 65) \n  \n        # Encrypt lowercase characters\n        else: \n            cipher += chr((ord(char) + shift - 97) % 26 + 97) \n    return cipher\n  \n# Driver code \nmessage = 'Hello World'\nshift = 4\n\nprint(\"Encrypted Message: \", encryption(message, shift))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program for encrypting a given string using Caesar cipher.\n\n### Input:\nThe string is \"Hello World\", and the shift used is 4.\n\n### Output:\ndef encryption(message, shift): \n    cipher = '' \n    # traverse message \n    for char in message: \n        # Encrypt uppercase characters\n        if (char.isupper()): \n            cipher += chr((ord(char) + shift - 65) % 26 + 65) \n  \n        # Encrypt lowercase characters\n        else: \n            cipher += chr((ord(char) + shift - 97) % 26 + 97) \n    return cipher\n  \n# Driver code \nmessage = 'Hello World'\nshift = 4\n\nprint(\"Encrypted Message: \", encryption(message, shift))"}
{"instruction":"Write code to generate a random 3x3 tic-tac-toe board in Python.","input":"","output":"import random\n\n# our tic-tac-toe board\nboard = []\n\n# function to generate a random 3x3 tic-tac-toe board\ndef generate_board():\n  # create a 3x3 board\n  board = [[0 for i in range(3)] for j in range(3)]\n\n  # populate the board randomly\n  for row in range(3):\n    for col in range(3):\n      board[row][col] = random.choice(['X','O'])\n\n  return board\n\n# print the generated board\nboard = generate_board()\nfor row in board:\n  print(row)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to generate a random 3x3 tic-tac-toe board in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\n# our tic-tac-toe board\nboard = []\n\n# function to generate a random 3x3 tic-tac-toe board\ndef generate_board():\n  # create a 3x3 board\n  board = [[0 for i in range(3)] for j in range(3)]\n\n  # populate the board randomly\n  for row in range(3):\n    for col in range(3):\n      board[row][col] = random.choice(['X','O'])\n\n  return board\n\n# print the generated board\nboard = generate_board()\nfor row in board:\n  print(row)"}
{"instruction":"Can you modify the program from above to print the two numbers in ascending order instead?","input":"","output":"# Python program\ndef main():\n    num1 = int(input(\"Enter the first number: \"))\n    num2 = int(input(\"Enter the second number: \"))\n    \n    # use max and min functions to output the numbers in ascending order\n    print(min(num1, num2))\n    print(max(num1, num2))\n\nif __name__ == \"__main__\":\n    main()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you modify the program from above to print the two numbers in ascending order instead?\n\n### Input:\n\n\n### Output:\n# Python program\ndef main():\n    num1 = int(input(\"Enter the first number: \"))\n    num2 = int(input(\"Enter the second number: \"))\n    \n    # use max and min functions to output the numbers in ascending order\n    print(min(num1, num2))\n    print(max(num1, num2))\n\nif __name__ == \"__main__\":\n    main()"}
{"instruction":"Write a python code to normalize a matrix (normalize all elements in the matrix).","input":"[[3, 2, 5], [1, 7, 4], [2, 3, 2]]","output":"def normalize_matrix(matrix):\n    output = []\n    m,n = len(matrix), len(matrix[0])\n    min_el, max_el = float(\"inf\"), float(\"-inf\")\n    for i in range(m):\n        for j in range(n):\n            min_el = min(matrix[i][j], min_el)\n            max_el = max(matrix[i][j], max_el)\n    for i in range(m):\n        output.append([])\n        for j in range(n):\n            output[i].append((matrix[i][j]-min_el)\/(max_el-min_el))\n    return output","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to normalize a matrix (normalize all elements in the matrix).\n\n### Input:\n[[3, 2, 5], [1, 7, 4], [2, 3, 2]]\n\n### Output:\ndef normalize_matrix(matrix):\n    output = []\n    m,n = len(matrix), len(matrix[0])\n    min_el, max_el = float(\"inf\"), float(\"-inf\")\n    for i in range(m):\n        for j in range(n):\n            min_el = min(matrix[i][j], min_el)\n            max_el = max(matrix[i][j], max_el)\n    for i in range(m):\n        output.append([])\n        for j in range(n):\n            output[i].append((matrix[i][j]-min_el)\/(max_el-min_el))\n    return output"}
{"instruction":"Generate a piece of Python code to print the reversed version of a list.","input":"[1, 2, 3]","output":"print(list(reversed([1, 2, 3])))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a piece of Python code to print the reversed version of a list.\n\n### Input:\n[1, 2, 3]\n\n### Output:\nprint(list(reversed([1, 2, 3])))"}
{"instruction":"Design a class in Python to store customer information for an e-commerce website.","input":"","output":"class Customer:\ndef __init__(self, name, email, address, phone, credit_card_number):\n self.name = name\n self.email = email\n self.address = address\n self.phone = phone\n self.credit_card_number = credit_card_number\n \ndef get_name(self):\n return self.name\n \ndef set_name(self, name):\n self.name = name\n \ndef get_email(self):\n return self.email\n \ndef set_email(self, email):\n self.email = email\n \ndef get_address(self):\n return self.address\n \ndef set_address(self, address):\n self.address = address\n \ndef get_phone(self):\n return self.phone\n \ndef set_phone(self, phone):\n self.phone = phone\n \ndef get_credit_card_number(self):\n return self.credit_card_number\n \ndef set_credit_card_number(self, credit_card_number):\n self.credit_card_number = credit_card_number","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python to store customer information for an e-commerce website.\n\n### Input:\n\n\n### Output:\nclass Customer:\ndef __init__(self, name, email, address, phone, credit_card_number):\n self.name = name\n self.email = email\n self.address = address\n self.phone = phone\n self.credit_card_number = credit_card_number\n \ndef get_name(self):\n return self.name\n \ndef set_name(self, name):\n self.name = name\n \ndef get_email(self):\n return self.email\n \ndef set_email(self, email):\n self.email = email\n \ndef get_address(self):\n return self.address\n \ndef set_address(self, address):\n self.address = address\n \ndef get_phone(self):\n return self.phone\n \ndef set_phone(self, phone):\n self.phone = phone\n \ndef get_credit_card_number(self):\n return self.credit_card_number\n \ndef set_credit_card_number(self, credit_card_number):\n self.credit_card_number = credit_card_number"}
{"instruction":"Generate a Python function for finding the maximum consecutive sum of a list of numbers.","input":"","output":"def max_consecutive_sum(numbers):\n    \"\"\"\n    Finds the maximum consecutive sum of a list of numbers. \n    \n    Args:\n        numbers (list of ints): The list of numbers.\n    \n    Return:\n        int: The maximum consecutive sum.\n    \"\"\"\n\n    # Set the initial maximum sum\n    max_sum = float('-inf')\n\n    # Iterate through the numbers and find the maximum sum\n    running_sum = 0\n    for number in numbers:\n        running_sum += number\n        if running_sum > max_sum:\n            max_sum = running_sum\n        if running_sum < 0:\n            running_sum = 0\n    \n    return max_sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function for finding the maximum consecutive sum of a list of numbers.\n\n### Input:\n\n\n### Output:\ndef max_consecutive_sum(numbers):\n    \"\"\"\n    Finds the maximum consecutive sum of a list of numbers. \n    \n    Args:\n        numbers (list of ints): The list of numbers.\n    \n    Return:\n        int: The maximum consecutive sum.\n    \"\"\"\n\n    # Set the initial maximum sum\n    max_sum = float('-inf')\n\n    # Iterate through the numbers and find the maximum sum\n    running_sum = 0\n    for number in numbers:\n        running_sum += number\n        if running_sum > max_sum:\n            max_sum = running_sum\n        if running_sum < 0:\n            running_sum = 0\n    \n    return max_sum"}
{"instruction":"Generate a Python script to calculate the sum of elements in the following input array.","input":"Input Array: [1, 4, 8, 10, 12]","output":"def SumArray(arr):\n  result = 0\n  for num in arr: \n    result += num\n  return result \n \nprint(SumArray([1, 4, 8, 10, 12]))\n    # Outputs: 35","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to calculate the sum of elements in the following input array.\n\n### Input:\nInput Array: [1, 4, 8, 10, 12]\n\n### Output:\ndef SumArray(arr):\n  result = 0\n  for num in arr: \n    result += num\n  return result \n \nprint(SumArray([1, 4, 8, 10, 12]))\n    # Outputs: 35"}
{"instruction":"Generate a python code to build a simple regression model?","input":"X = [[1, 2, 3], [4, 5, 6]]\nY = [[7], [8]]","output":"import numpy as np\n\nX = np.array(X)\nY = np.array(Y)\n\nb = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)\n\n#Print the parameters\nprint(\"Parameters: \", b)\n\n#Make predictions\nx_new = [[1, 2, 3]]\ny_pred = np.dot(x_new, b)\nprint(\"Predicted output: \", y_pred)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python code to build a simple regression model?\n\n### Input:\nX = [[1, 2, 3], [4, 5, 6]]\nY = [[7], [8]]\n\n### Output:\nimport numpy as np\n\nX = np.array(X)\nY = np.array(Y)\n\nb = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)\n\n#Print the parameters\nprint(\"Parameters: \", b)\n\n#Make predictions\nx_new = [[1, 2, 3]]\ny_pred = np.dot(x_new, b)\nprint(\"Predicted output: \", y_pred)"}
{"instruction":"Design an API in Python for a simple store where customers can search for products. The API should have the following features: searching for products by name or by category, displaying information about a product, and adding a product to user's cart.","input":"Not applicable","output":"# Store API\n# app.py\nfrom flask import Flask\nfrom flask_restful import Api, Resource, reqparse\n\napp = Flask(__name__)\napi = Api(app)\n\nproducts = [\n    {\"name\": \"laptop\", \"category\": \"electronics\", \"price\": 899.99},\n    {\"name\": \"iphone\", \"category\": \"electronics\", \"price\": 999.99},\n    {\"name\": \"headphones\", \"category\": \"electronics\", \"price\": 99.99}\n]\n\n# product\nclass Product(Resource):\n    def get(self, name):\n        for product in products:\n            if name == product['name']:\n                return product, 200\n        return {\"message\": \"Product not found\"}, 404\n\n    def post(self, name):\n        parser = reqparse.RequestParser()\n        parser.add_argument('category')\n        parser.add_argument('price')\n        args = parser.parse_args()\n\n        for product in products:\n            if product['name'] == name:\n                return {\"message\": \"Product with name {} already exists\".format(name)}, 400\n\n        product = {\n            \"name\": name, \n            \"category\": args['category'],\n            \"price\": args['price']\n        }\n        products.append(product)\n        return products[-1], 201\n\n    def put(self, name):\n        parser = reqparse.RequestParser()\n        parser.add_argument('category')\n        parser.add_argument('price')\n        args = parser.parse_args()\n\n        for product in products:\n            if product['name'] == name:\n                product['category'] = args['category']\n                product['price'] = args['price']\n                return product, 200\n        return {\"message\": \"Product not found\"}, 404\n\n# products\nclass ProductList(Resource):\n    def get(self):\n        return products, 200\n\napi.add_resource(Product, \"\/product\/<string:name>\")\napi.add_resource(ProductList, \"\/products\")\n\nif __name__ == '__main__':\n    app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an API in Python for a simple store where customers can search for products. The API should have the following features: searching for products by name or by category, displaying information about a product, and adding a product to user's cart.\n\n### Input:\nNot applicable\n\n### Output:\n# Store API\n# app.py\nfrom flask import Flask\nfrom flask_restful import Api, Resource, reqparse\n\napp = Flask(__name__)\napi = Api(app)\n\nproducts = [\n    {\"name\": \"laptop\", \"category\": \"electronics\", \"price\": 899.99},\n    {\"name\": \"iphone\", \"category\": \"electronics\", \"price\": 999.99},\n    {\"name\": \"headphones\", \"category\": \"electronics\", \"price\": 99.99}\n]\n\n# product\nclass Product(Resource):\n    def get(self, name):\n        for product in products:\n            if name == product['name']:\n                return product, 200\n        return {\"message\": \"Product not found\"}, 404\n\n    def post(self, name):\n        parser = reqparse.RequestParser()\n        parser.add_argument('category')\n        parser.add_argument('price')\n        args = parser.parse_args()\n\n        for product in products:\n            if product['name'] == name:\n                return {\"message\": \"Product with name {} already exists\".format(name)}, 400\n\n        product = {\n            \"name\": name, \n            \"category\": args['category'],\n            \"price\": args['price']\n        }\n        products.append(product)\n        return products[-1], 201\n\n    def put(self, name):\n        parser = reqparse.RequestParser()\n        parser.add_argument('category')\n        parser.add_argument('price')\n        args = parser.parse_args()\n\n        for product in products:\n            if product['name'] == name:\n                product['category'] = args['category']\n                product['price'] = args['price']\n                return product, 200\n        return {\"message\": \"Product not found\"}, 404\n\n# products\nclass ProductList(Resource):\n    def get(self):\n        return products, 200\n\napi.add_resource(Product, \"\/product\/<string:name>\")\napi.add_resource(ProductList, \"\/products\")\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"instruction":"Our project requires to classify different types of objects into two classes (A and B). Can you provide a Python code to achieve this?","input":"[objectA, objectB, objectC, objectD]","output":"def classify_objects(list_of_objects):\n    results = []\n    for obj in list_of_objects:\n        if obj == 'objectA' or obj == 'objectB':\n            results.append('A')\n        elif obj == 'objectC' or obj == 'objectD':\n            results.append('B')\n    return results\n\nlist_of_objects = ['objectA', 'objectB', 'objectC', 'objectD']\nclassifications = classify_objects(list_of_objects)\nprint(classifications)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOur project requires to classify different types of objects into two classes (A and B). Can you provide a Python code to achieve this?\n\n### Input:\n[objectA, objectB, objectC, objectD]\n\n### Output:\ndef classify_objects(list_of_objects):\n    results = []\n    for obj in list_of_objects:\n        if obj == 'objectA' or obj == 'objectB':\n            results.append('A')\n        elif obj == 'objectC' or obj == 'objectD':\n            results.append('B')\n    return results\n\nlist_of_objects = ['objectA', 'objectB', 'objectC', 'objectD']\nclassifications = classify_objects(list_of_objects)\nprint(classifications)"}
{"instruction":"Given a Python dictionary and a value, write a program to remove key from the dictionary having the given value.","input":"dict_inp = {'a':1, 'b':2, 'c':3, 'd':2}\nvalue = 2","output":"def remove_key_by_value(dictionary, value):\n    keys_to_remove = []\n    for key, val in dictionary.items():\n        if val == value:\n            keys_to_remove.append(key)\n\n    for key in keys_to_remove:\n        del dictionary[key]\n    return dictionary","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a Python dictionary and a value, write a program to remove key from the dictionary having the given value.\n\n### Input:\ndict_inp = {'a':1, 'b':2, 'c':3, 'd':2}\nvalue = 2\n\n### Output:\ndef remove_key_by_value(dictionary, value):\n    keys_to_remove = []\n    for key, val in dictionary.items():\n        if val == value:\n            keys_to_remove.append(key)\n\n    for key in keys_to_remove:\n        del dictionary[key]\n    return dictionary"}
{"instruction":"Design an algorithm in Python to display the total number of odd numbers between a given range","input":"1 and 8","output":"def odd_count(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if i%2 != 0:\n            count += 1\n    return count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to display the total number of odd numbers between a given range\n\n### Input:\n1 and 8\n\n### Output:\ndef odd_count(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if i%2 != 0:\n            count += 1\n    return count"}
{"instruction":"Build a decision tree model in Python.","input":"X = [[0, 0], [1, 1]]\ny = [0, 1]","output":"# Import decision tree classifier from the sklearn library\nfrom sklearn import tree\n \n# Input data to the model\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n \n# Create a decision tree classifier object\nclf = tree.DecisionTreeClassifier()\n \n# Train the decision tree classifier\nclf = clf.fit(X, y)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a decision tree model in Python.\n\n### Input:\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\n### Output:\n# Import decision tree classifier from the sklearn library\nfrom sklearn import tree\n \n# Input data to the model\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n \n# Create a decision tree classifier object\nclf = tree.DecisionTreeClassifier()\n \n# Train the decision tree classifier\nclf = clf.fit(X, y)"}
{"instruction":"Create a python program to accept two inputs from the user, a number and a string, and print the string the given number of times.","input":"3, Hello","output":"num = int(input(\"Enter a number: \"))\nstring = input(\"Enter a string: \")\n\nfor i in range(num):\n print(string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to accept two inputs from the user, a number and a string, and print the string the given number of times.\n\n### Input:\n3, Hello\n\n### Output:\nnum = int(input(\"Enter a number: \"))\nstring = input(\"Enter a string: \")\n\nfor i in range(num):\n print(string)"}
{"instruction":"Create an optimization algorithm in Python to determine the ideal stock portfolio allocation.","input":"Example data of stock prices and number of available stocks.","output":"import numpy as np\nfrom scipy.optimize import minimize\n\n# Define the objective function\ndef objective(allocation):\n    # Calculate portfolio return on investment\n    portfolio_return = np.sum(allocation * stock_return)\n    return -portfolio_return\n\n# Set the bounds and constraints\nbounds = [(0, n) for n in available_stocks]\nconstraints = [{'type': 'eq', 'fun': lambda x: np.sum(x)-1}]\n\n# Initialize the starting allocations\nstarting_allocations = np.array([1\/len(available_stocks)]*len(available_stocks))\n\n# Optimize\nresult = minimize(objective, starting_allocations, bounds=bounds, constraints=constraints)\nallocation = result.x\n\n# Print the optimal portfolio allocation\nprint(allocation)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an optimization algorithm in Python to determine the ideal stock portfolio allocation.\n\n### Input:\nExample data of stock prices and number of available stocks.\n\n### Output:\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Define the objective function\ndef objective(allocation):\n    # Calculate portfolio return on investment\n    portfolio_return = np.sum(allocation * stock_return)\n    return -portfolio_return\n\n# Set the bounds and constraints\nbounds = [(0, n) for n in available_stocks]\nconstraints = [{'type': 'eq', 'fun': lambda x: np.sum(x)-1}]\n\n# Initialize the starting allocations\nstarting_allocations = np.array([1\/len(available_stocks)]*len(available_stocks))\n\n# Optimize\nresult = minimize(objective, starting_allocations, bounds=bounds, constraints=constraints)\nallocation = result.x\n\n# Print the optimal portfolio allocation\nprint(allocation)"}
{"instruction":"Generate a correct Python program to print out the sequence of numbers in ascending order from a given list.","input":"[10, 5, 2, 8, 12]","output":"for i in sorted([10, 5, 2, 8, 12]):\n        print(i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a correct Python program to print out the sequence of numbers in ascending order from a given list.\n\n### Input:\n[10, 5, 2, 8, 12]\n\n### Output:\nfor i in sorted([10, 5, 2, 8, 12]):\n        print(i)"}
{"instruction":"Create a program in Python to convert any number from 0 to 999 to its corresponding word.","input":"Input number: 259","output":"def number_to_words(num):\n  units = [\"\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \n           \"eight\", \"nine\"]\n  teens = [\"\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \n           \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]\n  tens = [\"\", \"ten\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \n          \"seventy\", \"eighty\", \"ninety\"]\n  hundreds = [\"\", \"onehundred\", \"twohundred\", \"threehundred\", \"fourhundred\",\n              \"fivehundred\", \"sixhundred\", \"sevenhundred\", \"eighthundred\",\n              \"ninehundred\"]\n\n  num_str = str(num)\n  result = \"\"\n\n  if num == 0:\n    result = \"zero\"\n\n  elif len(num_str) == 3:\n    result += hundreds[int(num_str[0])] + \" \"\n    if int(num_str[1:]) != 0:\n      result += number_to_words(int(num_str[1:]))\n\n  elif len(num_str) == 2:\n    if int(num_str[0]) == 1:\n      result += teens[int(num_str[1])]\n    else:\n      result += tens[int(num_str[0])] + \" \"\n      if int(num_str[1]) != 0:\n        result += units[int(num_str[1])]\n\n  elif len(num_str) == 1:\n    result += units[int(num_str[0])]\n\n  return result\n  \nprint(number_to_words(259))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to convert any number from 0 to 999 to its corresponding word.\n\n### Input:\nInput number: 259\n\n### Output:\ndef number_to_words(num):\n  units = [\"\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \n           \"eight\", \"nine\"]\n  teens = [\"\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \n           \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]\n  tens = [\"\", \"ten\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \n          \"seventy\", \"eighty\", \"ninety\"]\n  hundreds = [\"\", \"onehundred\", \"twohundred\", \"threehundred\", \"fourhundred\",\n              \"fivehundred\", \"sixhundred\", \"sevenhundred\", \"eighthundred\",\n              \"ninehundred\"]\n\n  num_str = str(num)\n  result = \"\"\n\n  if num == 0:\n    result = \"zero\"\n\n  elif len(num_str) == 3:\n    result += hundreds[int(num_str[0])] + \" \"\n    if int(num_str[1:]) != 0:\n      result += number_to_words(int(num_str[1:]))\n\n  elif len(num_str) == 2:\n    if int(num_str[0]) == 1:\n      result += teens[int(num_str[1])]\n    else:\n      result += tens[int(num_str[0])] + \" \"\n      if int(num_str[1]) != 0:\n        result += units[int(num_str[1])]\n\n  elif len(num_str) == 1:\n    result += units[int(num_str[0])]\n\n  return result\n  \nprint(number_to_words(259))"}
{"instruction":"Create a program in Python to check for palindrome numbers.","input":"121","output":"def palindrome(num):\n    num = str(num)\n    if num == num[::-1]:\n        print(num + \" is a palindrome number\")\n    else: \n        print(num + \" is not a palindrome number\")\n\npalindrome(121)\n\/\/ Output: 121 is a palindrome number","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to check for palindrome numbers.\n\n### Input:\n121\n\n### Output:\ndef palindrome(num):\n    num = str(num)\n    if num == num[::-1]:\n        print(num + \" is a palindrome number\")\n    else: \n        print(num + \" is not a palindrome number\")\n\npalindrome(121)\n\/\/ Output: 121 is a palindrome number"}
{"instruction":"Create a Python program to identify most frequent value","input":"Identify the most frequent element in the array [1, 2, 2, 3, 3, 3, 4].","output":"def identify_most_frequent_value(arr):\n    counts = {}\n\n    # count the occurrence of each element\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    # find the most frequent element\n    max_freq = 0\n    max_freq_num = 0\n    for num in counts:\n        if counts[num] > max_freq:\n            max_freq_num = num\n            max_freq = counts[num]\n\n    return max_freq_num","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to identify most frequent value\n\n### Input:\nIdentify the most frequent element in the array [1, 2, 2, 3, 3, 3, 4].\n\n### Output:\ndef identify_most_frequent_value(arr):\n    counts = {}\n\n    # count the occurrence of each element\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    # find the most frequent element\n    max_freq = 0\n    max_freq_num = 0\n    for num in counts:\n        if counts[num] > max_freq:\n            max_freq_num = num\n            max_freq = counts[num]\n\n    return max_freq_num"}
{"instruction":"Create a Python program for classifying an array of numbers into one of three classes (low, medium, or high).","input":"Example array: [-5, 0, 2, 10, 15]","output":"def classify(arr):\n output = []\n for n in arr:\n if n < 0:\n output.append('low')\n elif n < 5:\n output.append('medium')\n else:\n output.append('high')\n return output\n\n# Example Usage\nexample_array = [-5, 0, 2, 10, 15]\nresult = classify(example_array)\nprint(result) # ['low', 'medium', 'medium', 'high', 'high']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for classifying an array of numbers into one of three classes (low, medium, or high).\n\n### Input:\nExample array: [-5, 0, 2, 10, 15]\n\n### Output:\ndef classify(arr):\n output = []\n for n in arr:\n if n < 0:\n output.append('low')\n elif n < 5:\n output.append('medium')\n else:\n output.append('high')\n return output\n\n# Example Usage\nexample_array = [-5, 0, 2, 10, 15]\nresult = classify(example_array)\nprint(result) # ['low', 'medium', 'medium', 'high', 'high']"}
{"instruction":"Design a web scraper using Python's BeautifulSoup library that extracts data from HTML sites.","input":"Not applicable","output":"#Import libraries \nimport requests \nfrom bs4 import BeautifulSoup \n\n#Make a request to the url \nurl = 'http:\/\/www.example.com'\n\nr = requests.get(url)\nsoup = BeautifulSoup(r.content, 'html.parser') \n\n#Extract data \ndata = [] \n\nfor x in soup.find_all('div', class_=\"data-cell\"): \n data.append(x.text.strip()) \n\n#Print the data \nprint(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a web scraper using Python's BeautifulSoup library that extracts data from HTML sites.\n\n### Input:\nNot applicable\n\n### Output:\n#Import libraries \nimport requests \nfrom bs4 import BeautifulSoup \n\n#Make a request to the url \nurl = 'http:\/\/www.example.com'\n\nr = requests.get(url)\nsoup = BeautifulSoup(r.content, 'html.parser') \n\n#Extract data \ndata = [] \n\nfor x in soup.find_all('div', class_=\"data-cell\"): \n data.append(x.text.strip()) \n\n#Print the data \nprint(data)"}
{"instruction":"Create an application in Python to convert temperatures from Celsius to Fahrenheit","input":"","output":"def celsius_to_fahrenheit(celsius):\n    return celsius * 9\/5 + 32\n\ncelsius = float(input(\"Enter the temperature in Celsius: \"))\nfahrenheit = celsius_to_fahrenheit(celsius)\nprint(\"The temperature in Fahrenheit is: \", fahrenheit)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an application in Python to convert temperatures from Celsius to Fahrenheit\n\n### Input:\n\n\n### Output:\ndef celsius_to_fahrenheit(celsius):\n    return celsius * 9\/5 + 32\n\ncelsius = float(input(\"Enter the temperature in Celsius: \"))\nfahrenheit = celsius_to_fahrenheit(celsius)\nprint(\"The temperature in Fahrenheit is: \", fahrenheit)"}
{"instruction":"Generate a python program that calculates the area of a triangle.","input":"","output":"def area(b,h): \n    return (b*h)\/2 \n\nb = int(input('Please enter the base: ')) \nh = int(input('Please enter the height: ')) \n\nprint('The area of the triangle is: ', area(b,h))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program that calculates the area of a triangle.\n\n### Input:\n\n\n### Output:\ndef area(b,h): \n    return (b*h)\/2 \n\nb = int(input('Please enter the base: ')) \nh = int(input('Please enter the height: ')) \n\nprint('The area of the triangle is: ', area(b,h))"}
{"instruction":"Generate a random password in Python using at least eight characters including numbers and both uppercase and lowercase letters.","input":"","output":"import random \ndef generate_password(): \n    chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890@#$%^&*\"\n    length = 8 \n    password = \"\" \n    for i in range(length): \n        password += random.choice(chars)\n    return password\n\nprint(generate_password())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random password in Python using at least eight characters including numbers and both uppercase and lowercase letters.\n\n### Input:\n\n\n### Output:\nimport random \ndef generate_password(): \n    chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890@#$%^&*\"\n    length = 8 \n    password = \"\" \n    for i in range(length): \n        password += random.choice(chars)\n    return password\n\nprint(generate_password())"}
{"instruction":"Generate a Python program to print out all the permutations of a given string.","input":"","output":"def permutate(string):\n    if len(string) == 0:\n        return ['']\n    prevList = permutate(string[1: len(string)])\n    nextList = []\n    for i in range(0,len(prevList)):\n        for j in range(0,len(string)):\n            newString = prevList[i][0: j]+string[0]+prevList[i][j: len(string)-1]\n            if newString not in nextList:\n                nextList.append(newString)\n    return nextList\n\nstring = input()\nprint(permutate(string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to print out all the permutations of a given string.\n\n### Input:\n\n\n### Output:\ndef permutate(string):\n    if len(string) == 0:\n        return ['']\n    prevList = permutate(string[1: len(string)])\n    nextList = []\n    for i in range(0,len(prevList)):\n        for j in range(0,len(string)):\n            newString = prevList[i][0: j]+string[0]+prevList[i][j: len(string)-1]\n            if newString not in nextList:\n                nextList.append(newString)\n    return nextList\n\nstring = input()\nprint(permutate(string))"}
{"instruction":"Write a Python program to generate a table of all possible combinations for a given set of symbols.","input":"['A', 'B', 'C']","output":"def print_combinations(symbols):\n\u00a0\u00a0\u00a0\u00a0for idx in range(1 << len(symbols)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0combination = [symbol for symbol, flag in zip(symbols, bin(idx)[2:]) if flag == \"1\"]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(combination)\n\nsymbols = ['A', 'B', 'C']\nprint_combinations(symbols)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a table of all possible combinations for a given set of symbols.\n\n### Input:\n['A', 'B', 'C']\n\n### Output:\ndef print_combinations(symbols):\n\u00a0\u00a0\u00a0\u00a0for idx in range(1 << len(symbols)):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0combination = [symbol for symbol, flag in zip(symbols, bin(idx)[2:]) if flag == \"1\"]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(combination)\n\nsymbols = ['A', 'B', 'C']\nprint_combinations(symbols)"}
{"instruction":"Build an algorithm in Python to concatenate two binary strings.","input":"str1 = \"10101\"\nstr2 = \"101\"","output":"def concatTwoBinStrings(str1, str2):\n    str = \"\"\n    for i in (str1 + str2):\n        if i == '0':\n            str += '0'\n        else:\n            str += '1'\n    return str\n\nstr1 = \"10101\"\nstr2 = \"101\"\n\nprint(concatTwoBinStrings(str1, str2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild an algorithm in Python to concatenate two binary strings.\n\n### Input:\nstr1 = \"10101\"\nstr2 = \"101\"\n\n### Output:\ndef concatTwoBinStrings(str1, str2):\n    str = \"\"\n    for i in (str1 + str2):\n        if i == '0':\n            str += '0'\n        else:\n            str += '1'\n    return str\n\nstr1 = \"10101\"\nstr2 = \"101\"\n\nprint(concatTwoBinStrings(str1, str2))"}
{"instruction":"Create a Python program to parse a list of strings and print the words with odd length.","input":"['abc', 'hello', 'world']","output":"list = ['abc', 'hello', 'world']\n\nfor word in list:\n    if (len(word) % 2 != 0):\n        print(word)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to parse a list of strings and print the words with odd length.\n\n### Input:\n['abc', 'hello', 'world']\n\n### Output:\nlist = ['abc', 'hello', 'world']\n\nfor word in list:\n    if (len(word) % 2 != 0):\n        print(word)"}
{"instruction":"Design an AI model in Python to predict the sentiment of a given sentiment text.","input":"This product is excellent","output":"from nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_analysis(text): \n  sid = SentimentIntensityAnalyzer()\n  sentiment = sid.polarity_scores(text)\n  if sentiment[\"compound\"] >= 0.5:\n    return \"positive\"\n  elif sentiment[\"compound\"] <= -0.5:\n    return \"negative\"\n  else:\n    return \"neutral\"\n\nsentiment = sentiment_analysis(\"This product is excellent\")\nprint(sentiment)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an AI model in Python to predict the sentiment of a given sentiment text.\n\n### Input:\nThis product is excellent\n\n### Output:\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_analysis(text): \n  sid = SentimentIntensityAnalyzer()\n  sentiment = sid.polarity_scores(text)\n  if sentiment[\"compound\"] >= 0.5:\n    return \"positive\"\n  elif sentiment[\"compound\"] <= -0.5:\n    return \"negative\"\n  else:\n    return \"neutral\"\n\nsentiment = sentiment_analysis(\"This product is excellent\")\nprint(sentiment)"}
{"instruction":"Write a Python script to generate a dictionary with counts of unique characters in a given string.","input":"String = \"Hello World!\"","output":"def char_count(string):\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict\n\nstring = \"Hello World!\"\nresult = char_count(string)\nprint(result)\n\n# Outputs: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate a dictionary with counts of unique characters in a given string.\n\n### Input:\nString = \"Hello World!\"\n\n### Output:\ndef char_count(string):\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict\n\nstring = \"Hello World!\"\nresult = char_count(string)\nprint(result)\n\n# Outputs: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}"}
{"instruction":"Write a Python program to recommend movies according to user preferences.","input":"Not applicable","output":"import pandas as pd\n\n#read the data\nmovies = pd.read_csv('movies.csv')\nratings = pd.read_csv('ratings.csv')\n\n#calculate the mean rating for each movie\nmean_movie_rating = ratings.groupby('movie_id', as_index=False).mean()\n\n#merge the two dataframes\nmovies_with_rating = movies.merge(mean_movie_rating, on='movie_id')\n\n#sort by rating\nmovies_with_rating.sort_values(by='rating', ascending=False, inplace=True)\n\n#recommend movies\nrecommendations = movies_with_rating[movies_with_rating.rating >= 4]\nprint(recommendations)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to recommend movies according to user preferences.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\n\n#read the data\nmovies = pd.read_csv('movies.csv')\nratings = pd.read_csv('ratings.csv')\n\n#calculate the mean rating for each movie\nmean_movie_rating = ratings.groupby('movie_id', as_index=False).mean()\n\n#merge the two dataframes\nmovies_with_rating = movies.merge(mean_movie_rating, on='movie_id')\n\n#sort by rating\nmovies_with_rating.sort_values(by='rating', ascending=False, inplace=True)\n\n#recommend movies\nrecommendations = movies_with_rating[movies_with_rating.rating >= 4]\nprint(recommendations)"}
{"instruction":"Generate a command line application that takes a number as an argument and prints out the prime numbers below it.","input":"","output":"import sys\n\ndef find_primes(n): \n    primes = [True] * n\n\n    for p in range(2, n):\n        if primes[p] == True:\n            for i in range(2*p, n, p):\n                primes[i] = False\n\n    return [p for p in range(2, n) if primes[p]]\n\nif __name__ == '__main__':\n    if len(sys.argv) != 2:\n        print('Usage: python3 prime_numbers.py <number>')\n        sys.exit(1)\n    num = int(sys.argv[1]) \n    print(find_primes(num))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a command line application that takes a number as an argument and prints out the prime numbers below it.\n\n### Input:\n\n\n### Output:\nimport sys\n\ndef find_primes(n): \n    primes = [True] * n\n\n    for p in range(2, n):\n        if primes[p] == True:\n            for i in range(2*p, n, p):\n                primes[i] = False\n\n    return [p for p in range(2, n) if primes[p]]\n\nif __name__ == '__main__':\n    if len(sys.argv) != 2:\n        print('Usage: python3 prime_numbers.py <number>')\n        sys.exit(1)\n    num = int(sys.argv[1]) \n    print(find_primes(num))"}
{"instruction":"Compose a Python class to store data about employees","input":"","output":"class Employee:\n    def __init__(self, name, email, salary):\n        self.name = name\n        self.email = email\n        self.salary = salary\n\n    def get_name(self):\n        return self.name\n\n    def get_email(self):\n        return self.email\n\n    def get_salary(self):\n        return self.salary\n\nemployee1 = Employee(\"John Smith\", \"johnsmith@example.com\", 40000)\nemployee2 = Employee(\"Jane Doe\", \"janedoe@example.com\", 45000)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python class to store data about employees\n\n### Input:\n\n\n### Output:\nclass Employee:\n    def __init__(self, name, email, salary):\n        self.name = name\n        self.email = email\n        self.salary = salary\n\n    def get_name(self):\n        return self.name\n\n    def get_email(self):\n        return self.email\n\n    def get_salary(self):\n        return self.salary\n\nemployee1 = Employee(\"John Smith\", \"johnsmith@example.com\", 40000)\nemployee2 = Employee(\"Jane Doe\", \"janedoe@example.com\", 45000)"}
{"instruction":"Create a program in Python to to compute the sum of all the numbers present in a given string.","input":"string = 'The sum of 5 and 9 is 14'","output":"def sum_of_numbers_in_string(string):\n    number_list = []\n    for word in string.split(' '):\n        if word.isdigit():\n            number_list.append(int(word))\n\n    return sum(number_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to to compute the sum of all the numbers present in a given string.\n\n### Input:\nstring = 'The sum of 5 and 9 is 14'\n\n### Output:\ndef sum_of_numbers_in_string(string):\n    number_list = []\n    for word in string.split(' '):\n        if word.isdigit():\n            number_list.append(int(word))\n\n    return sum(number_list)"}
{"instruction":"Reverse a given string using python.","input":"Hello World","output":"def reverse_string(my_str): \n  rev_str = \"\" \n  \n  for i in my_str: \n    rev_str = i + rev_str\n  \n  return rev_str\n\nmy_str = 'Hello World'\n\nreverse_string(my_str)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nReverse a given string using python.\n\n### Input:\nHello World\n\n### Output:\ndef reverse_string(my_str): \n  rev_str = \"\" \n  \n  for i in my_str: \n    rev_str = i + rev_str\n  \n  return rev_str\n\nmy_str = 'Hello World'\n\nreverse_string(my_str)"}
{"instruction":"Optimize the following Python code for counting the number of vowels in a string.","input":"def count_vowels(str):\n count = 0\n vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n for i in str:\n  if i in vowels:\n   count += 1\n return count","output":"def count_vowels(str):\n count = 0\n vowels = set(\"aeiou\")\n for i in str:\n  if i in vowels:\n   count += 1\n return count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python code for counting the number of vowels in a string.\n\n### Input:\ndef count_vowels(str):\n count = 0\n vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n for i in str:\n  if i in vowels:\n   count += 1\n return count\n\n### Output:\ndef count_vowels(str):\n count = 0\n vowels = set(\"aeiou\")\n for i in str:\n  if i in vowels:\n   count += 1\n return count"}
{"instruction":"Create a python program that takes in a list of URLs and returns a list of the top 5 URLs that are visited most often.","input":"['www.example1.com', 'www.example2.com', 'www.example3.com', 'www.example4.com']","output":"\"\"\"\nCreate a python program that takes in a list of URLs and returns a list \nof the top 5 URLs that are visited most often.\n\"\"\"\n\nfrom collections import Counter\n\ndef most_visited_urls(urls):\n    counts = Counter(urls)\n    top_5 = counts.most_common(5)\n\n    print(\"Top 5 URLs:\")\n    for url, count in top_5:\n        print(\"%s: %d\" % (url, count))\n\n\nif __name__ == '__main__':\n    urls = ['www.example1.com', 'www.example2.com', 'www.example3.com', 'www.example4.com']\n    most_visited_urls(urls)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that takes in a list of URLs and returns a list of the top 5 URLs that are visited most often.\n\n### Input:\n['www.example1.com', 'www.example2.com', 'www.example3.com', 'www.example4.com']\n\n### Output:\n\"\"\"\nCreate a python program that takes in a list of URLs and returns a list \nof the top 5 URLs that are visited most often.\n\"\"\"\n\nfrom collections import Counter\n\ndef most_visited_urls(urls):\n    counts = Counter(urls)\n    top_5 = counts.most_common(5)\n\n    print(\"Top 5 URLs:\")\n    for url, count in top_5:\n        print(\"%s: %d\" % (url, count))\n\n\nif __name__ == '__main__':\n    urls = ['www.example1.com', 'www.example2.com', 'www.example3.com', 'www.example4.com']\n    most_visited_urls(urls)"}
{"instruction":"Can you make a loop in Python to print out the number from 10 to 20?","input":"","output":"for i in range(10, 21):\n    print(i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you make a loop in Python to print out the number from 10 to 20?\n\n### Input:\n\n\n### Output:\nfor i in range(10, 21):\n    print(i)"}
{"instruction":"Create a Machine Learning algorithm in Python that predicts the price of a car based on its features.","input":"Not applicable","output":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Read the data\ndata = pd.read_csv('cars.csv')\n\n# Split the data in features (X) and labels (y)\nX = data.drop('price', axis=1)\ny = data['price']\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) \n\n# Train the model\nmodel = RandomForestRegressor()\nmodel.fit(X_train, y_train)\n\n# Predict the price of the cars in the test set\ny_pred = model.predict(X_test)\n\n# Compare the predictions with the actual values\nfor prediction, actual in zip(y_pred, y_test):\n print(prediction, actual)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Machine Learning algorithm in Python that predicts the price of a car based on its features.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Read the data\ndata = pd.read_csv('cars.csv')\n\n# Split the data in features (X) and labels (y)\nX = data.drop('price', axis=1)\ny = data['price']\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) \n\n# Train the model\nmodel = RandomForestRegressor()\nmodel.fit(X_train, y_train)\n\n# Predict the price of the cars in the test set\ny_pred = model.predict(X_test)\n\n# Compare the predictions with the actual values\nfor prediction, actual in zip(y_pred, y_test):\n print(prediction, actual)"}
{"instruction":"Develop an algorithm in Python for sorting an array.","input":"","output":"# Python program for implementation of Bubble Sort \ndef bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python for sorting an array.\n\n### Input:\n\n\n### Output:\n# Python program for implementation of Bubble Sort \ndef bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]"}
{"instruction":"Generate a list of prime numbers from 1 to N in Python.","input":"","output":"def generate_primes(n): \n    primes = [] \n    for num in range(2, n+1): \n        prime = True \n        for i in range(2, num): \n            if (num % i) == 0: \n                prime = False\n        if prime: \n            primes.append(num) \n    return primes","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of prime numbers from 1 to N in Python.\n\n### Input:\n\n\n### Output:\ndef generate_primes(n): \n    primes = [] \n    for num in range(2, n+1): \n        prime = True \n        for i in range(2, num): \n            if (num % i) == 0: \n                prime = False\n        if prime: \n            primes.append(num) \n    return primes"}
{"instruction":"Write a Python program to classify a given animal according to its features","input":"An animal with four legs, a curved tail and feathers","output":"def classify_animal(features):\n    if \"four legs\" in features and \"curved tail\" in features:\n        if \"feathers\" in features:\n            return \"bird\"\n        else:\n            return \"mammal\"\n    else:\n        return \"unknown\"\n\nfeatures = \"An animal with four legs, a curved tail and feathers\"\nprint(classify_animal(features)) # bird","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify a given animal according to its features\n\n### Input:\nAn animal with four legs, a curved tail and feathers\n\n### Output:\ndef classify_animal(features):\n    if \"four legs\" in features and \"curved tail\" in features:\n        if \"feathers\" in features:\n            return \"bird\"\n        else:\n            return \"mammal\"\n    else:\n        return \"unknown\"\n\nfeatures = \"An animal with four legs, a curved tail and feathers\"\nprint(classify_animal(features)) # bird"}
{"instruction":"Write a Python script that prints out a multiplication table from 1 to 10.","input":"","output":"for i in range(1, 11):\n    for j in range(1, 11):\n        print(i*j, end='\\t')\n    print()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that prints out a multiplication table from 1 to 10.\n\n### Input:\n\n\n### Output:\nfor i in range(1, 11):\n    for j in range(1, 11):\n        print(i*j, end='\\t')\n    print()"}
{"instruction":"Generate a text-based adventure game in Python with 3 levels and 3 items.","input":"Not applicable","output":"## Text Adventure Game in Python\n\nimport random\n\n# Define the levels \nlevel_1 = {\n  'description': 'You find yourself in a dark, mysterious forest.',\n  'items': ['torch', 'rope', 'map'],\n  'level_up': level_2\n  }\nlevel_2 = {\n  'description': 'You have entered a castle with a large, spooky looking door.',\n  'items': ['key', 'axe', 'hat'],\n  'level_up': level_3\n  }\nlevel_3 = {\n  'description': 'You have reached the end and there is a giant dragon in front of you.',\n  'items': ['sword', 'shield', 'potion'],\n  'win': True \n  }\n\n# Generate a random item from each level \ndef gen_items():\n  level_1_item = random.choice(level_1['items'])\n  level_2_item = random.choice(level_2['items'])\n  level_3_item = random.choice(level_3['items'])\n\n# Print the item descriptions \ndef print_items():\n  print('You find a {} in the first level.'.format(level_1_item))\n  print('You find a {} in the second level.'.format(level_2_item))\n  print('You find a {} in the third level.'.format(level_3_item))\n  \n# print the initial level description \nprint(level_1['description'])\n# Generate the items\ngen_items()\n# Print the items \nprint_items()\n\n# Start the game loop \nwhile True:\n  # Ask the player for input \n  action = input('''\n  What would you like to do? \n  1. Go to the next level \n  2. Check your items \n  ''')\n  \n  if action == '1':\n    # Move to the next level \n    if level_1['level_up'] is not None:\n      level_1 = level_1['level_up']\n      print(level_1['description'])\n      gen_items()\n    else:\n      print('You have reached the end')\n      break \n    \n  elif action == '2':\n    # Print the items \n    print_items()\n    \n  else:\n    print('Please choose a valid action')\n\nprint('Game over!')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a text-based adventure game in Python with 3 levels and 3 items.\n\n### Input:\nNot applicable\n\n### Output:\n## Text Adventure Game in Python\n\nimport random\n\n# Define the levels \nlevel_1 = {\n  'description': 'You find yourself in a dark, mysterious forest.',\n  'items': ['torch', 'rope', 'map'],\n  'level_up': level_2\n  }\nlevel_2 = {\n  'description': 'You have entered a castle with a large, spooky looking door.',\n  'items': ['key', 'axe', 'hat'],\n  'level_up': level_3\n  }\nlevel_3 = {\n  'description': 'You have reached the end and there is a giant dragon in front of you.',\n  'items': ['sword', 'shield', 'potion'],\n  'win': True \n  }\n\n# Generate a random item from each level \ndef gen_items():\n  level_1_item = random.choice(level_1['items'])\n  level_2_item = random.choice(level_2['items'])\n  level_3_item = random.choice(level_3['items'])\n\n# Print the item descriptions \ndef print_items():\n  print('You find a {} in the first level.'.format(level_1_item))\n  print('You find a {} in the second level.'.format(level_2_item))\n  print('You find a {} in the third level.'.format(level_3_item))\n  \n# print the initial level description \nprint(level_1['description'])\n# Generate the items\ngen_items()\n# Print the items \nprint_items()\n\n# Start the game loop \nwhile True:\n  # Ask the player for input \n  action = input('''\n  What would you like to do? \n  1. Go to the next level \n  2. Check your items \n  ''')\n  \n  if action == '1':\n    # Move to the next level \n    if level_1['level_up'] is not None:\n      level_1 = level_1['level_up']\n      print(level_1['description'])\n      gen_items()\n    else:\n      print('You have reached the end')\n      break \n    \n  elif action == '2':\n    # Print the items \n    print_items()\n    \n  else:\n    print('Please choose a valid action')\n\nprint('Game over!')"}
{"instruction":"This code is a Python module for the Exodus Add-on. To use it, import the necessary modules and create an instance of the \"source\" class. Then call the methods of the class to search for movies or TV shows, find episodes, and get sources for streaming. The \"request\" method sends an HTTP request to a given URL and checks if a certain string is present in the response. The \"sources\" method extracts streaming sources from a given URL. The \"resolve\" method returns the input URL unchanged.","input":"","output":"# -*- coding: utf-8 -*-\n\n'''\n    Exodus Add-on\n    Copyright (C) 2016 Exodus\n\n    This program is free software: you can redistribute it and\/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n'''\n\n\nimport re,urllib,urlparse,base64\n\nfrom resources.lib.modules import cleantitle\nfrom resources.lib.modules import client\nfrom resources.lib.modules import proxy\n\n\nclass source:\n    def __init__(self):\n        self.domains = ['primewire.ag']\n        self.base_link = 'http:\/\/www.primewire.ag'\n        self.key_link = 'http:\/\/www.primewire.ag\/index.php?search'\n        self.moviesearch_link = 'http:\/\/www.primewire.ag\/index.php?search_keywords=%s&key=%s&search_section=1'\n        self.tvsearch_link = 'http:\/\/www.primewire.ag\/index.php?search_keywords=%s&key=%s&search_section=2'\n\n\n    def request(self, url, check):\n        try:\n            result = client.source(url)\n            if check in str(result): return result.decode('iso-8859-1').encode('utf-8')\n\n            result = client.source(proxy.get() + urllib.quote_plus(url))\n            if check in str(result): return result.decode('iso-8859-1').encode('utf-8')\n\n            result = client.source(proxy.get() + urllib.quote_plus(url))\n            if check in str(result): return result.decode('iso-8859-1').encode('utf-8')\n        except:\n            return\n\n\n    def movie(self, imdb, title, year):\n        try:\n            result = self.request(self.key_link, 'searchform')\n\n            query = client.parseDOM(result, 'input', ret='value', attrs = {'name': 'key'})[0]\n            query = self.moviesearch_link % (urllib.quote_plus(re.sub('\\'', '', title)), query)\n\n            result = self.request(query, 'index_item')\n            result = client.parseDOM(result, 'div', attrs = {'class': 'index_item.+?'})\n\n            title = 'watch' + cleantitle.get(title)\n            years = ['(%s)' % str(year), '(%s)' % str(int(year)+1), '(%s)' % str(int(year)-1)]\n\n            result = [(client.parseDOM(i, 'a', ret='href'), client.parseDOM(i, 'a', ret='title')) for i in result]\n            result = [(i[0][0], i[1][0]) for i in result if len(i[0]) > 0 and len(i[1]) > 0]\n            result = [i for i in result if any(x in i[1] for x in years)]\n\n            try: result = [(urlparse.parse_qs(urlparse.urlparse(i[0]).query)['q'][0], i[1]) for i in result]\n            except: pass\n            try: result = [(urlparse.parse_qs(urlparse.urlparse(i[0]).query)['u'][0], i[1]) for i in result]\n            except: pass\n            try: result = [(urlparse.urlparse(i[0]).path, i[1]) for i in result]\n            except: pass\n\n            match = [i[0] for i in result if title == cleantitle.get(i[1])]\n\n            match2 = [i[0] for i in result]\n            match2 = [x for y,x in enumerate(match2) if x not in match2[:y]]\n            if match2 == []: return\n\n            for i in match2[:5]:\n                try:\n                    if len(match) > 0: url = match[0] ; break\n                    result = self.request(urlparse.urljoin(self.base_link, i), 'choose_tabs')\n                    if imdb in str(result): url = i ; break\n                except:\n                    pass\n\n            url = client.replaceHTMLCodes(url)\n            url = url.encode('utf-8')\n            return url\n        except:\n            return\n\n\n    def tvshow(self, imdb, tvdb, tvshowtitle, year):\n        try:\n            result = self.request(self.key_link, 'searchform')\n\n            query = client.parseDOM(result, 'input', ret='value', attrs = {'name': 'key'})[0]\n            query = self.tvsearch_link % (urllib.quote_plus(re.sub('\\'', '', tvshowtitle)), query)\n\n            result = self.request(query, 'index_item')\n            result = client.parseDOM(result, 'div', attrs = {'class': 'index_item.+?'})\n\n            tvshowtitle = 'watch' + cleantitle.get(tvshowtitle)\n            years = ['(%s)' % str(year), '(%s)' % str(int(year)+1), '(%s)' % str(int(year)-1)]\n\n            result = [(client.parseDOM(i, 'a', ret='href'), client.parseDOM(i, 'a', ret='title')) for i in result]\n            result = [(i[0][0], i[1][0]) for i in result if len(i[0]) > 0 and len(i[1]) > 0]\n            result = [i for i in result if any(x in i[1] for x in years)]\n\n            try: result = [(urlparse.parse_qs(urlparse.urlparse(i[0]).query)['q'][0], i[1]) for i in result]\n            except: pass\n            try: result = [(urlparse.parse_qs(urlparse.urlparse(i[0]).query)['u'][0], i[1]) for i in result]\n            except: pass\n            try: result = [(urlparse.urlparse(i[0]).path, i[1]) for i in result]\n            except: pass\n\n            match = [i[0] for i in result if tvshowtitle == cleantitle.get(i[1])]\n\n            match2 = [i[0] for i in result]\n            match2 = [x for y,x in enumerate(match2) if x not in match2[:y]]\n            if match2 == []: return\n\n            for i in match2[:5]:\n                try:\n                    if len(match) > 0: url = match[0] ; break\n                    result = self.request(urlparse.urljoin(self.base_link, i), 'tv_episode_item')\n                    if imdb in str(result): url = i ; break\n                except:\n                    pass\n\n            url = client.replaceHTMLCodes(url)\n            url = url.encode('utf-8')\n            return url\n        except:\n            return\n\n\n    def episode(self, url, imdb, tvdb, title, premiered, season, episode):\n        try:\n            if url == None: return\n\n            url = urlparse.urljoin(self.base_link, url)\n\n            result = self.request(url, 'tv_episode_item')\n            result = client.parseDOM(result, 'div', attrs = {'class': 'tv_episode_item'})\n\n            title = cleantitle.get(title)\n\n            result = [(client.parseDOM(i, 'a', ret='href'), client.parseDOM(i, 'span', attrs = {'class': 'tv_episode_name'}), re.compile('(\\d{4}-\\d{2}-\\d{2})').findall(i)) for i in result]\n            result = [(i[0], i[1][0], i[2]) for i in result if len(i[1]) > 0] + [(i[0], None, i[2]) for i in result if len(i[1]) == 0]\n            result = [(i[0], i[1], i[2][0]) for i in result if len(i[2]) > 0] + [(i[0], i[1], None) for i in result if len(i[2]) == 0]\n            result = [(i[0][0], i[1], i[2]) for i in result if len(i[0]) > 0]\n\n            url = [i for i in result if title == cleantitle.get(i[1]) and premiered == i[2]][:1]\n            if len(url) == 0: url = [i for i in result if premiered == i[2]]\n            if len(url) == 0 or len(url) > 1: url = [i for i in result if 'season-%01d-episode-%01d' % (int(season), int(episode)) in i[0]]\n\n            url = client.replaceHTMLCodes(url[0][0])\n            try: url = urlparse.parse_qs(urlparse.urlparse(url).query)['u'][0]\n            except: pass\n            try: url = urlparse.parse_qs(urlparse.urlparse(url).query)['q'][0]\n            except: pass\n            url = urlparse.urlparse(url).path\n            url = client.replaceHTMLCodes(url)\n            url = url.encode('utf-8')\n            return url\n        except:\n            return\n\n\n    def sources(self, url, hostDict, hostprDict):\n        try:\n            sources = []\n\n            if url == None: return sources\n\n            url = urlparse.urljoin(self.base_link, url)\n\n            result = self.request(url, 'choose_tabs')\n\n            links = client.parseDOM(result, 'tbody')\n\n            for i in links:\n                try:\n                    url = client.parseDOM(i, 'a', ret='href')[0]\n                    try: url = urlparse.parse_qs(urlparse.urlparse(url).query)['u'][0]\n                    except: pass\n                    try: url = urlparse.parse_qs(urlparse.urlparse(url).query)['q'][0]\n                    except: pass\n                    url = urlparse.parse_qs(urlparse.urlparse(url).query)['url'][0]\n                    url = base64.b64decode(url)\n                    url = client.replaceHTMLCodes(url)\n                    url = url.encode('utf-8')\n\n                    host = re.findall('([\\w]+[.][\\w]+)$', urlparse.urlparse(url.strip().lower()).netloc)[0]\n                    if not host in hostDict: raise Exception()\n                    host = client.replaceHTMLCodes(host)\n                    host = host.encode('utf-8')\n\n                    quality = client.parseDOM(i, 'span', ret='class')[0]\n                    if quality == 'quality_cam' or quality == 'quality_ts': quality = 'CAM'\n                    elif quality == 'quality_dvd': quality = 'SD'\n                    else:  raise Exception()\n\n                    sources.append({'source': host, 'quality': quality, 'provider': 'Primewire', 'url': url, 'direct': False, 'debridonly': False})\n                except:\n                    pass\n\n            return sources\n        except:\n            return sources\n\n\n    def resolve(self, url):\n        return url\n\n\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a Python module for the Exodus Add-on. To use it, import the necessary modules and create an instance of the \"source\" class. Then call the methods of the class to search for movies or TV shows, find episodes, and get sources for streaming. The \"request\" method sends an HTTP request to a given URL and checks if a certain string is present in the response. The \"sources\" method extracts streaming sources from a given URL. The \"resolve\" method returns the input URL unchanged.\n\n### Input:\n\n\n### Output:\n# -*- coding: utf-8 -*-\n\n'''\n    Exodus Add-on\n    Copyright (C) 2016 Exodus\n\n    This program is free software: you can redistribute it and\/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n'''\n\n\nimport re,urllib,urlparse,base64\n\nfrom resources.lib.modules import cleantitle\nfrom resources.lib.modules import client\nfrom resources.lib.modules import proxy\n\n\nclass source:\n    def __init__(self):\n        self.domains = ['primewire.ag']\n        self.base_link = 'http:\/\/www.primewire.ag'\n        self.key_link = 'http:\/\/www.primewire.ag\/index.php?search'\n        self.moviesearch_link = 'http:\/\/www.primewire.ag\/index.php?search_keywords=%s&key=%s&search_section=1'\n        self.tvsearch_link = 'http:\/\/www.primewire.ag\/index.php?search_keywords=%s&key=%s&search_section=2'\n\n\n    def request(self, url, check):\n        try:\n            result = client.source(url)\n            if check in str(result): return result.decode('iso-8859-1').encode('utf-8')\n\n            result = client.source(proxy.get() + urllib.quote_plus(url))\n            if check in str(result): return result.decode('iso-8859-1').encode('utf-8')\n\n            result = client.source(proxy.get() + urllib.quote_plus(url))\n            if check in str(result): return result.decode('iso-8859-1').encode('utf-8')\n        except:\n            return\n\n\n    def movie(self, imdb, title, year):\n        try:\n            result = self.request(self.key_link, 'searchform')\n\n            query = client.parseDOM(result, 'input', ret='value', attrs = {'name': 'key'})[0]\n            query = self.moviesearch_link % (urllib.quote_plus(re.sub('\\'', '', title)), query)\n\n            result = self.request(query, 'index_item')\n            result = client.parseDOM(result, 'div', attrs = {'class': 'index_item.+?'})\n\n            title = 'watch' + cleantitle.get(title)\n            years = ['(%s)' % str(year), '(%s)' % str(int(year)+1), '(%s)' % str(int(year)-1)]\n\n            result = [(client.parseDOM(i, 'a', ret='href'), client.parseDOM(i, 'a', ret='title')) for i in result]\n            result = [(i[0][0], i[1][0]) for i in result if len(i[0]) > 0 and len(i[1]) > 0]\n            result = [i for i in result if any(x in i[1] for x in years)]\n\n            try: result = [(urlparse.parse_qs(urlparse.urlparse(i[0]).query)['q'][0], i[1]) for i in result]\n            except: pass\n            try: result = [(urlparse.parse_qs(urlparse.urlparse(i[0]).query)['u'][0], i[1]) for i in result]\n            except: pass\n            try: result = [(urlparse.urlparse(i[0]).path, i[1]) for i in result]\n            except: pass\n\n            match = [i[0] for i in result if title == cleantitle.get(i[1])]\n\n            match2 = [i[0] for i in result]\n            match2 = [x for y,x in enumerate(match2) if x not in match2[:y]]\n            if match2 == []: return\n\n            for i in match2[:5]:\n                try:\n                    if len(match) > 0: url = match[0] ; break\n                    result = self.request(urlparse.urljoin(self.base_link, i), 'choose_tabs')\n                    if imdb in str(result): url = i ; break\n                except:\n                    pass\n\n            url = client.replaceHTMLCodes(url)\n            url = url.encode('utf-8')\n            return url\n        except:\n            return\n\n\n    def tvshow(self, imdb, tvdb, tvshowtitle, year):\n        try:\n            result = self.request(self.key_link, 'searchform')\n\n            query = client.parseDOM(result, 'input', ret='value', attrs = {'name': 'key'})[0]\n            query = self.tvsearch_link % (urllib.quote_plus(re.sub('\\'', '', tvshowtitle)), query)\n\n            result = self.request(query, 'index_item')\n            result = client.parseDOM(result, 'div', attrs = {'class': 'index_item.+?'})\n\n            tvshowtitle = 'watch' + cleantitle.get(tvshowtitle)\n            years = ['(%s)' % str(year), '(%s)' % str(int(year)+1), '(%s)' % str(int(year)-1)]\n\n            result = [(client.parseDOM(i, 'a', ret='href'), client.parseDOM(i, 'a', ret='title')) for i in result]\n            result = [(i[0][0], i[1][0]) for i in result if len(i[0]) > 0 and len(i[1]) > 0]\n            result = [i for i in result if any(x in i[1] for x in years)]\n\n            try: result = [(urlparse.parse_qs(urlparse.urlparse(i[0]).query)['q'][0], i[1]) for i in result]\n            except: pass\n            try: result = [(urlparse.parse_qs(urlparse.urlparse(i[0]).query)['u'][0], i[1]) for i in result]\n            except: pass\n            try: result = [(urlparse.urlparse(i[0]).path, i[1]) for i in result]\n            except: pass\n\n            match = [i[0] for i in result if tvshowtitle == cleantitle.get(i[1])]\n\n            match2 = [i[0] for i in result]\n            match2 = [x for y,x in enumerate(match2) if x not in match2[:y]]\n            if match2 == []: return\n\n            for i in match2[:5]:\n                try:\n                    if len(match) > 0: url = match[0] ; break\n                    result = self.request(urlparse.urljoin(self.base_link, i), 'tv_episode_item')\n                    if imdb in str(result): url = i ; break\n                except:\n                    pass\n\n            url = client.replaceHTMLCodes(url)\n            url = url.encode('utf-8')\n            return url\n        except:\n            return\n\n\n    def episode(self, url, imdb, tvdb, title, premiered, season, episode):\n        try:\n            if url == None: return\n\n            url = urlparse.urljoin(self.base_link, url)\n\n            result = self.request(url, 'tv_episode_item')\n            result = client.parseDOM(result, 'div', attrs = {'class': 'tv_episode_item'})\n\n            title = cleantitle.get(title)\n\n            result = [(client.parseDOM(i, 'a', ret='href'), client.parseDOM(i, 'span', attrs = {'class': 'tv_episode_name'}), re.compile('(\\d{4}-\\d{2}-\\d{2})').findall(i)) for i in result]\n            result = [(i[0], i[1][0], i[2]) for i in result if len(i[1]) > 0] + [(i[0], None, i[2]) for i in result if len(i[1]) == 0]\n            result = [(i[0], i[1], i[2][0]) for i in result if len(i[2]) > 0] + [(i[0], i[1], None) for i in result if len(i[2]) == 0]\n            result = [(i[0][0], i[1], i[2]) for i in result if len(i[0]) > 0]\n\n            url = [i for i in result if title == cleantitle.get(i[1]) and premiered == i[2]][:1]\n            if len(url) == 0: url = [i for i in result if premiered == i[2]]\n            if len(url) == 0 or len(url) > 1: url = [i for i in result if 'season-%01d-episode-%01d' % (int(season), int(episode)) in i[0]]\n\n            url = client.replaceHTMLCodes(url[0][0])\n            try: url = urlparse.parse_qs(urlparse.urlparse(url).query)['u'][0]\n            except: pass\n            try: url = urlparse.parse_qs(urlparse.urlparse(url).query)['q'][0]\n            except: pass\n            url = urlparse.urlparse(url).path\n            url = client.replaceHTMLCodes(url)\n            url = url.encode('utf-8')\n            return url\n        except:\n            return\n\n\n    def sources(self, url, hostDict, hostprDict):\n        try:\n            sources = []\n\n            if url == None: return sources\n\n            url = urlparse.urljoin(self.base_link, url)\n\n            result = self.request(url, 'choose_tabs')\n\n            links = client.parseDOM(result, 'tbody')\n\n            for i in links:\n                try:\n                    url = client.parseDOM(i, 'a', ret='href')[0]\n                    try: url = urlparse.parse_qs(urlparse.urlparse(url).query)['u'][0]\n                    except: pass\n                    try: url = urlparse.parse_qs(urlparse.urlparse(url).query)['q'][0]\n                    except: pass\n                    url = urlparse.parse_qs(urlparse.urlparse(url).query)['url'][0]\n                    url = base64.b64decode(url)\n                    url = client.replaceHTMLCodes(url)\n                    url = url.encode('utf-8')\n\n                    host = re.findall('([\\w]+[.][\\w]+)$', urlparse.urlparse(url.strip().lower()).netloc)[0]\n                    if not host in hostDict: raise Exception()\n                    host = client.replaceHTMLCodes(host)\n                    host = host.encode('utf-8')\n\n                    quality = client.parseDOM(i, 'span', ret='class')[0]\n                    if quality == 'quality_cam' or quality == 'quality_ts': quality = 'CAM'\n                    elif quality == 'quality_dvd': quality = 'SD'\n                    else:  raise Exception()\n\n                    sources.append({'source': host, 'quality': quality, 'provider': 'Primewire', 'url': url, 'direct': False, 'debridonly': False})\n                except:\n                    pass\n\n            return sources\n        except:\n            return sources\n\n\n    def resolve(self, url):\n        return url\n\n\n"}
{"instruction":"Generate a program using Python which collects environmental data from a list of cities and organizes it in a table.","input":"Cities: New York, Los Angeles, San Francisco, Chicago","output":"\"\"\"\nGenerate a program using Python which collects environmental data from a list of cities and organizes it in a table.\n\"\"\"\n\nimport requests\n\n# API key for openweathermap\nKEY = '123456789'\n\ndef get_weather_data(cities):\n    weather_data = []\n\n    for city in cities:\n        url = 'http:\/\/api.openweathermap.org\/data\/2.5\/weather?q=' + city +'&APPID='+KEY\n        response = requests.get(url)\n        data = response.json()\n\n        city_data = {\n            'name': city,\n            'temperature': data['main']['temp'],\n            'humidity': data['main']['humidity'],\n            'wind speed': data['wind']['speed']\n        }\n        weather_data.append(city_data)\n    \n    return weather_data\n\nif __name__ == '__main__':\n    cities = ['New York', 'Los Angeles', 'San Francisco', 'Chicago']\n    data = get_weather_data(cities)\n\n    for city_data in data:\n        print('Name:', city_data['name'])\n        print('Temperature:', city_data['temperature'])\n        print('Humidity:', city_data['humidity'])\n        print('Wind speed:', city_data['wind speed'], '\\n')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program using Python which collects environmental data from a list of cities and organizes it in a table.\n\n### Input:\nCities: New York, Los Angeles, San Francisco, Chicago\n\n### Output:\n\"\"\"\nGenerate a program using Python which collects environmental data from a list of cities and organizes it in a table.\n\"\"\"\n\nimport requests\n\n# API key for openweathermap\nKEY = '123456789'\n\ndef get_weather_data(cities):\n    weather_data = []\n\n    for city in cities:\n        url = 'http:\/\/api.openweathermap.org\/data\/2.5\/weather?q=' + city +'&APPID='+KEY\n        response = requests.get(url)\n        data = response.json()\n\n        city_data = {\n            'name': city,\n            'temperature': data['main']['temp'],\n            'humidity': data['main']['humidity'],\n            'wind speed': data['wind']['speed']\n        }\n        weather_data.append(city_data)\n    \n    return weather_data\n\nif __name__ == '__main__':\n    cities = ['New York', 'Los Angeles', 'San Francisco', 'Chicago']\n    data = get_weather_data(cities)\n\n    for city_data in data:\n        print('Name:', city_data['name'])\n        print('Temperature:', city_data['temperature'])\n        print('Humidity:', city_data['humidity'])\n        print('Wind speed:', city_data['wind speed'], '\\n')"}
{"instruction":"Create a program in Python that given a list of integer inputs, sorts them in descending order.","input":"list = [4, 9, 2, 6, 5]","output":"list = [4, 9, 2, 6, 5]\n\n# sort list in descending order\nlist.sort(reverse=True)\n\nprint(list) # [9, 6, 5, 4, 2]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that given a list of integer inputs, sorts them in descending order.\n\n### Input:\nlist = [4, 9, 2, 6, 5]\n\n### Output:\nlist = [4, 9, 2, 6, 5]\n\n# sort list in descending order\nlist.sort(reverse=True)\n\nprint(list) # [9, 6, 5, 4, 2]"}
{"instruction":"Implement a function in Python to print all the uppercase letters from a given string.","input":"String: \"Hello World\"","output":"def print_uppercase(s):\n    for c in s:\n        if c.isupper():\n            print(c)\n\nprint_uppercase(\"Hello World\")\n# Output:\n# H\n# W","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python to print all the uppercase letters from a given string.\n\n### Input:\nString: \"Hello World\"\n\n### Output:\ndef print_uppercase(s):\n    for c in s:\n        if c.isupper():\n            print(c)\n\nprint_uppercase(\"Hello World\")\n# Output:\n# H\n# W"}
{"instruction":"Compute the sum of the fibonacci sequence up to n using a recursive Python function.","input":"5","output":"def fib_sum(n):\n  if n <= 1:\n    return n\n  else:\n    return fib_sum(n-1) + fib_sum(n-2) + n\n\nprint(fib_sum(5))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the sum of the fibonacci sequence up to n using a recursive Python function.\n\n### Input:\n5\n\n### Output:\ndef fib_sum(n):\n  if n <= 1:\n    return n\n  else:\n    return fib_sum(n-1) + fib_sum(n-2) + n\n\nprint(fib_sum(5))"}
{"instruction":"Write a Python program that takes two strings and returns the longest common subsequence between the two strings.","input":"String1 = \"ABCDAF\"\nString2 = \"ACBCF\"","output":"def lcs(string1, string2):\n n = len(string1)\n m = len(string2)\n\n dp = [[0 for x in range(m + 1)] for x in range(n + 1)] \n\n# fill dp table in bottom up manner \nfor i in range(n + 1): \n for j in range(m + 1): \n   if i == 0 or j == 0: \n    dp[i][j] = 0\n   elif string1[i-1] == string2[j-1]: \n    dp[i][j] = dp[i-1][j-1] + 1\n   else: \n    dp[i][j] = max(dp[i-1][j], dp[i][j-1]) \n\n index = dp[n][m] \n\n# Create an array of size of lcs \nlongest_common_subsequence = [\"\"] * (index + 1) \nlongest_common_subsequence[index] = \"\" \n\n# Start from the right-most-bottom-most corner and \n# one by one store characters in lcs[] \ni = n \nj = m \nwhile i > 0 and j > 0: \n\n\t# If current character in X[] and Y are same, then \n\t# current character is part of LCS \n\tif string1[i-1] == string2[j-1]: \n\t\tlongest_common_subsequence[index - 1] = string1[i-1] \n\t\ti-=1\n\t\tj-=1\n\t\tindex-=1\n\n\t# If not same, then find the larger of two and \n\t# go in the direction of larger value \n\telif dp[i-1][j] > dp[i][j-1]: \n\t\ti-=1\n\telse: \n\t\tj-=1\n\nreturn \"\".join(longest_common_subsequence)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes two strings and returns the longest common subsequence between the two strings.\n\n### Input:\nString1 = \"ABCDAF\"\nString2 = \"ACBCF\"\n\n### Output:\ndef lcs(string1, string2):\n n = len(string1)\n m = len(string2)\n\n dp = [[0 for x in range(m + 1)] for x in range(n + 1)] \n\n# fill dp table in bottom up manner \nfor i in range(n + 1): \n for j in range(m + 1): \n   if i == 0 or j == 0: \n    dp[i][j] = 0\n   elif string1[i-1] == string2[j-1]: \n    dp[i][j] = dp[i-1][j-1] + 1\n   else: \n    dp[i][j] = max(dp[i-1][j], dp[i][j-1]) \n\n index = dp[n][m] \n\n# Create an array of size of lcs \nlongest_common_subsequence = [\"\"] * (index + 1) \nlongest_common_subsequence[index] = \"\" \n\n# Start from the right-most-bottom-most corner and \n# one by one store characters in lcs[] \ni = n \nj = m \nwhile i > 0 and j > 0: \n\n\t# If current character in X[] and Y are same, then \n\t# current character is part of LCS \n\tif string1[i-1] == string2[j-1]: \n\t\tlongest_common_subsequence[index - 1] = string1[i-1] \n\t\ti-=1\n\t\tj-=1\n\t\tindex-=1\n\n\t# If not same, then find the larger of two and \n\t# go in the direction of larger value \n\telif dp[i-1][j] > dp[i][j-1]: \n\t\ti-=1\n\telse: \n\t\tj-=1\n\nreturn \"\".join(longest_common_subsequence)"}
{"instruction":"What is the sum of all even numbers from 1 to 100 in Python?","input":"","output":"sum = 0\nfor i in range(2,101,2):\n    sum += i\nprint(sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat is the sum of all even numbers from 1 to 100 in Python?\n\n### Input:\n\n\n### Output:\nsum = 0\nfor i in range(2,101,2):\n    sum += i\nprint(sum)"}
{"instruction":"Create a neural network in Python to predict the probability of a person having a certain disease.","input":"","output":"import tensorflow as tf\nimport numpy as np\n\n# Input data\ninputData = np.array([[Age, Gender, Weight, Height, Systolic BP, Diastolic BP], ...])\n\n# Output data\noutputData = np.array([Disease_probability], ...])\n\n# Initialize variables\nnumberOfInputs = len(inputData[0])\nnumberOfOutputs = len(outputData[0])\n# Define the number of neurons in each layer\nhiddenUnits = [5,5]\n\n# Create placeholders for the inputs\nx = tf.placeholder(tf.float32, [None, numberOfInputs])\ny = tf.placeholder(tf.float32, [None, numberOfOutputs])\n\n# Create weights\nweights = {\n    \"h1\": tf.Variable(tf.random_normal([numberOfInputs, hiddenUnits[0]]) ),\n    \"h2\": tf.Variable(tf.random_normal([hiddenUnits[0], hiddenUnits[1]] )),\n    \"output\": tf.Variable(tf.random_normal([hiddenUnits[1], numberOfOutputs] ))\n}\n\n# Create biases\nbiases = {\n    \"b1\": tf.Variable(tf.random_normal([hiddenUnits[0]] )),\n    \"b2\": tf.Variable(tf.random_normal([hiddenUnits[1]] )),\n    \"output\": tf.Variable(tf.random_normal([numberOfOutputs] ))\n}\n\n# Create forward propagation step\ndef forwardPropagation(x):\n    # Hidden layer 1\n    layerOne = tf.add( tf.matmul(x, weights[\"h1\"] ), biases[\"b1\"] )\n    layerOne = tf.nn.relu(layerOne)\n\n    # Hidden layer 2\n    layerTwo = tf.add( tf.matmul(layerOne, weights[\"h2\"] ), biases[\"b2\"] )\n    layerTwo = tf.nn.relu(layerTwo)\n\n    # Output layer\n    outputLayer = tf.add( tf.matmul(layerTwo, weights[\"output\"]), biases[\"output\"] )\n    return outputLayer\n\n# Create loss calculating step\ndef computeLoss(predictions, y):\n    return tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits(logits=predictions, labels=y) )\n\n# Create optimizer step\ndef trainModel(loss):\n    learningRate = 0.001\n    return tf.train.AdamOptimizer(learningRate).minimize(loss)\n\ndef main():\n    # Run forward propagation \n    predictions = forwardPropagation(x)\n\n    # Calculate loss\n    loss = computeLoss(predictions, y)\n\n    # Train the model\n    train = trainModel(loss)\n\n    # Create session\n    with tf.Session() as sess:\n        # Initialize all the variables\n        sess.run(tf.global_variables_initializer())\n\n        # Train the model for the specified number of epochs\n        for epoch in range(50):\n            epochLoss, _ = sess.run([loss, train], feed_dict={x : inputData , y : outputData})\n            print(\"loss : ,\", epochLoss)\n\n        # Prediction\n        prediction = tf.argmax(predictions, 1)\n        correct_prediction = tf.equal(prediction, tf.argmax(y, 1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n        print(\"Accuracy : \", accuracy.eval({x: inputData, y: outputData}))\n\nif __name__ == '__main__':\n    main()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network in Python to predict the probability of a person having a certain disease.\n\n### Input:\n\n\n### Output:\nimport tensorflow as tf\nimport numpy as np\n\n# Input data\ninputData = np.array([[Age, Gender, Weight, Height, Systolic BP, Diastolic BP], ...])\n\n# Output data\noutputData = np.array([Disease_probability], ...])\n\n# Initialize variables\nnumberOfInputs = len(inputData[0])\nnumberOfOutputs = len(outputData[0])\n# Define the number of neurons in each layer\nhiddenUnits = [5,5]\n\n# Create placeholders for the inputs\nx = tf.placeholder(tf.float32, [None, numberOfInputs])\ny = tf.placeholder(tf.float32, [None, numberOfOutputs])\n\n# Create weights\nweights = {\n    \"h1\": tf.Variable(tf.random_normal([numberOfInputs, hiddenUnits[0]]) ),\n    \"h2\": tf.Variable(tf.random_normal([hiddenUnits[0], hiddenUnits[1]] )),\n    \"output\": tf.Variable(tf.random_normal([hiddenUnits[1], numberOfOutputs] ))\n}\n\n# Create biases\nbiases = {\n    \"b1\": tf.Variable(tf.random_normal([hiddenUnits[0]] )),\n    \"b2\": tf.Variable(tf.random_normal([hiddenUnits[1]] )),\n    \"output\": tf.Variable(tf.random_normal([numberOfOutputs] ))\n}\n\n# Create forward propagation step\ndef forwardPropagation(x):\n    # Hidden layer 1\n    layerOne = tf.add( tf.matmul(x, weights[\"h1\"] ), biases[\"b1\"] )\n    layerOne = tf.nn.relu(layerOne)\n\n    # Hidden layer 2\n    layerTwo = tf.add( tf.matmul(layerOne, weights[\"h2\"] ), biases[\"b2\"] )\n    layerTwo = tf.nn.relu(layerTwo)\n\n    # Output layer\n    outputLayer = tf.add( tf.matmul(layerTwo, weights[\"output\"]), biases[\"output\"] )\n    return outputLayer\n\n# Create loss calculating step\ndef computeLoss(predictions, y):\n    return tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits(logits=predictions, labels=y) )\n\n# Create optimizer step\ndef trainModel(loss):\n    learningRate = 0.001\n    return tf.train.AdamOptimizer(learningRate).minimize(loss)\n\ndef main():\n    # Run forward propagation \n    predictions = forwardPropagation(x)\n\n    # Calculate loss\n    loss = computeLoss(predictions, y)\n\n    # Train the model\n    train = trainModel(loss)\n\n    # Create session\n    with tf.Session() as sess:\n        # Initialize all the variables\n        sess.run(tf.global_variables_initializer())\n\n        # Train the model for the specified number of epochs\n        for epoch in range(50):\n            epochLoss, _ = sess.run([loss, train], feed_dict={x : inputData , y : outputData})\n            print(\"loss : ,\", epochLoss)\n\n        # Prediction\n        prediction = tf.argmax(predictions, 1)\n        correct_prediction = tf.equal(prediction, tf.argmax(y, 1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n        print(\"Accuracy : \", accuracy.eval({x: inputData, y: outputData}))\n\nif __name__ == '__main__':\n    main()"}
{"instruction":"Create a Django application with a model that stores the name, address, and email of a user.","input":"","output":"# create Django app\ndjango-admin startproject myapp\n\n# create user model\nfrom django.db import models\n\nclass User(models.Model): \n    name = models.CharField(max_length=100) \n    address = models.CharField(max_length=100)\n    email = models.EmailField(max_length=100)\n\n# migrate models\npython manage.py makemigrations\npython manage.py migrate","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Django application with a model that stores the name, address, and email of a user.\n\n### Input:\n\n\n### Output:\n# create Django app\ndjango-admin startproject myapp\n\n# create user model\nfrom django.db import models\n\nclass User(models.Model): \n    name = models.CharField(max_length=100) \n    address = models.CharField(max_length=100)\n    email = models.EmailField(max_length=100)\n\n# migrate models\npython manage.py makemigrations\npython manage.py migrate"}
{"instruction":"Write a Python function to find the sum of a series of numbers.","input":"[1, 2, 3, 4, 5]","output":"def sumSeries(arr):\n  total = 0\n  for num in arr:\n    total += num\n  return total\n\nresult = sumSeries([1, 2, 3, 4, 5])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to find the sum of a series of numbers.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef sumSeries(arr):\n  total = 0\n  for num in arr:\n    total += num\n  return total\n\nresult = sumSeries([1, 2, 3, 4, 5])\nprint(result)"}
{"instruction":"Create a class in Python which takes an employee name and salary as parameters and prints them.","input":"Employee Name: John Smith, Salary: 5000","output":"class Employee:\n    def __init__(self, name, salary):\n        self.name = name\n        self.salary = salary\n    \n    def print_employee_details(self):\n        print('Employee Name: {}, Salary: {}'.format(self.name, self.salary))\n\nemployee = Employee('John Smith', 5000)\nemployee.print_employee_details()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python which takes an employee name and salary as parameters and prints them.\n\n### Input:\nEmployee Name: John Smith, Salary: 5000\n\n### Output:\nclass Employee:\n    def __init__(self, name, salary):\n        self.name = name\n        self.salary = salary\n    \n    def print_employee_details(self):\n        print('Employee Name: {}, Salary: {}'.format(self.name, self.salary))\n\nemployee = Employee('John Smith', 5000)\nemployee.print_employee_details()"}
{"instruction":"Convert the following C++ code to Python.","input":"int foo(int a, int b, int c) {\n    int result = a + b + c;\n    return result;\n}","output":"def foo(a, b, c):\n    result = a + b + c\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following C++ code to Python.\n\n### Input:\nint foo(int a, int b, int c) {\n    int result = a + b + c;\n    return result;\n}\n\n### Output:\ndef foo(a, b, c):\n    result = a + b + c\n    return result"}
{"instruction":"Using Python, create a function that returns the first 10 prime numbers.","input":"Not applicable","output":"def find_prime_numbers(num):\n prime_numbers = []\n for x in range(2, num):\n flag = True\n for y in prime_numbers:\n if x % y == 0:\n flag = False\n break\n if flag:\n prime_numbers.append(x)\n if len(prime_numbers) == 10\n break\n\nreturn prime_numbers\n \n# Usage\nfind_prime_numbers(100)\n# Output\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, create a function that returns the first 10 prime numbers.\n\n### Input:\nNot applicable\n\n### Output:\ndef find_prime_numbers(num):\n prime_numbers = []\n for x in range(2, num):\n flag = True\n for y in prime_numbers:\n if x % y == 0:\n flag = False\n break\n if flag:\n prime_numbers.append(x)\n if len(prime_numbers) == 10\n break\n\nreturn prime_numbers\n \n# Usage\nfind_prime_numbers(100)\n# Output\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]"}
{"instruction":"Create a program to detect a palindrome string in Python.","input":"original_string = \"radar\"","output":"# Function to check if a string is a palindrome\ndef is_palindrome(original_string):  \n    reversed_string = original_string[::-1]  \n    if original_string == reversed_string:\n        return True \n    else:\n        return False  \n  \n# Print result\nprint(is_palindrome(original_string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to detect a palindrome string in Python.\n\n### Input:\noriginal_string = \"radar\"\n\n### Output:\n# Function to check if a string is a palindrome\ndef is_palindrome(original_string):  \n    reversed_string = original_string[::-1]  \n    if original_string == reversed_string:\n        return True \n    else:\n        return False  \n  \n# Print result\nprint(is_palindrome(original_string))"}
{"instruction":"Develop a Python script to rank an array of integers in ascending order.","input":"","output":"def sort_array(array):\n    for i in range(len(array)):\n        min_val = min(array[i:])\n        min_index = array.index(min_val)\n        array[i], array[min_index] = array[min_index], array[i]\n    return array\n\narray = [3, 5, 1, 9, 6, 4]\nres = sort_array(array)\nprint(res)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to rank an array of integers in ascending order.\n\n### Input:\n\n\n### Output:\ndef sort_array(array):\n    for i in range(len(array)):\n        min_val = min(array[i:])\n        min_index = array.index(min_val)\n        array[i], array[min_index] = array[min_index], array[i]\n    return array\n\narray = [3, 5, 1, 9, 6, 4]\nres = sort_array(array)\nprint(res)"}
{"instruction":"Develop an algorithm for solving a Sudoku puzzle in Python.","input":"[\n [3, 0, 6, 5, 0, 8, 4, 0, 0],\n [5, 2, 0, 0, 0, 0, 0, 0, 0],\n [0, 8, 7, 0, 0, 0, 0, 3, 1],\n [0, 0, 3, 0, 1, 0, 0, 8, 0],\n [9, 0, 0, 8, 6, 3, 0, 0, 5],\n [0, 5, 0, 0, 9, 0, 6, 0, 0],\n [1, 3, 0, 0, 0, 0, 2, 5, 0],\n [0, 0, 0, 0, 0, 0, 0, 7, 4],\n [0, 0, 5, 2, 0, 6, 3, 0, 0]\n]","output":"# Algorithm to solve a 9x9 sudoku\n\ndef solve(board):\n    # Function to check if a given position on the board is empty\n    def is_empty(board):\n        for row in range(0, 9):\n            for col in range(0, 9):\n                if board[row][col] == 0:\n                    return (row, col)\n        return None\n\n    # Function to check if a given number is valid in the given position on the board\n    def is_safe(board, row, col, num):\n        for position in range(0, 9):\n            # checking for row\n            if board[row][position] == num and position != col:\n                return False\n            # checking for column\n            if board[position][col] == num and position != row:\n                return False\n\n        # checking for subboxes\n        upper_row = row - row%3\n        upper_col = col - col%3\n        for r in range(upper_row, upper_row + 3):\n            for c in range(upper_col, upper_col + 3):\n                if board[r][c] == num and (r, c) != (row, col):\n                    return False\n        \n        return True\n\n    next_num = is_empty(board)\n    if not next_num:\n        return True\n\n    row, col = next_num\n\n    for number in range(1, 10):\n        if is_safe(board, row, col, number):\n            board[row][col] = number\n\n            if solve(board):\n                return True\n\n            # backtracking\n            board[row][col] = 0\n\n    return False\n\nboard = [\n [3, 0, 6, 5, 0, 8, 4, 0, 0],\n [5, 2, 0, 0, 0, 0, 0, 0, 0],\n [0, 8, 7, 0, 0, 0, 0, 3, 1],\n [0, 0, 3, 0, 1, 0, 0, 8, 0],\n [9, 0, 0, 8, 6, 3, 0, 0, 5],\n [0, 5, 0, 0, 9, 0, 6, 0, 0],\n [1, 3, 0, 0, 0, 0, 2, 5, 0],\n [0, 0, 0, 0, 0, 0, 0, 7, 4],\n [0, 0, 5, 2, 0, 6, 3, 0, 0]\n]\n\nsolve(board)\n\nfor row in range(9):\n    for col in range(9):\n        print(board[row][col], end=\" \")\n    print()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm for solving a Sudoku puzzle in Python.\n\n### Input:\n[\n [3, 0, 6, 5, 0, 8, 4, 0, 0],\n [5, 2, 0, 0, 0, 0, 0, 0, 0],\n [0, 8, 7, 0, 0, 0, 0, 3, 1],\n [0, 0, 3, 0, 1, 0, 0, 8, 0],\n [9, 0, 0, 8, 6, 3, 0, 0, 5],\n [0, 5, 0, 0, 9, 0, 6, 0, 0],\n [1, 3, 0, 0, 0, 0, 2, 5, 0],\n [0, 0, 0, 0, 0, 0, 0, 7, 4],\n [0, 0, 5, 2, 0, 6, 3, 0, 0]\n]\n\n### Output:\n# Algorithm to solve a 9x9 sudoku\n\ndef solve(board):\n    # Function to check if a given position on the board is empty\n    def is_empty(board):\n        for row in range(0, 9):\n            for col in range(0, 9):\n                if board[row][col] == 0:\n                    return (row, col)\n        return None\n\n    # Function to check if a given number is valid in the given position on the board\n    def is_safe(board, row, col, num):\n        for position in range(0, 9):\n            # checking for row\n            if board[row][position] == num and position != col:\n                return False\n            # checking for column\n            if board[position][col] == num and position != row:\n                return False\n\n        # checking for subboxes\n        upper_row = row - row%3\n        upper_col = col - col%3\n        for r in range(upper_row, upper_row + 3):\n            for c in range(upper_col, upper_col + 3):\n                if board[r][c] == num and (r, c) != (row, col):\n                    return False\n        \n        return True\n\n    next_num = is_empty(board)\n    if not next_num:\n        return True\n\n    row, col = next_num\n\n    for number in range(1, 10):\n        if is_safe(board, row, col, number):\n            board[row][col] = number\n\n            if solve(board):\n                return True\n\n            # backtracking\n            board[row][col] = 0\n\n    return False\n\nboard = [\n [3, 0, 6, 5, 0, 8, 4, 0, 0],\n [5, 2, 0, 0, 0, 0, 0, 0, 0],\n [0, 8, 7, 0, 0, 0, 0, 3, 1],\n [0, 0, 3, 0, 1, 0, 0, 8, 0],\n [9, 0, 0, 8, 6, 3, 0, 0, 5],\n [0, 5, 0, 0, 9, 0, 6, 0, 0],\n [1, 3, 0, 0, 0, 0, 2, 5, 0],\n [0, 0, 0, 0, 0, 0, 0, 7, 4],\n [0, 0, 5, 2, 0, 6, 3, 0, 0]\n]\n\nsolve(board)\n\nfor row in range(9):\n    for col in range(9):\n        print(board[row][col], end=\" \")\n    print()"}
{"instruction":"Develop an HTTP API in Python to retrieve the top 10 latest news articles from a given website.","input":"","output":"import requests\nfrom bs4 import BeautifulSoup\nfrom datetime import datetime\n\ndef get_latest_articles(url):\n    r = requests.get(url)\n    html = r.text\n    soup = BeautifulSoup(html, \"html.parser\")\n    articles = soup.find_all('article')\n    latest_articles = []\n    for article in articles:\n        pub_date = article.find('time')['datetime']\n        if (datetime.now() - datetime.fromisoformat(pub_date)).total_seconds() < 1814400:\n            latest_articles.append(article.text)\n    return latest_articles[: 10]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an HTTP API in Python to retrieve the top 10 latest news articles from a given website.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\nfrom datetime import datetime\n\ndef get_latest_articles(url):\n    r = requests.get(url)\n    html = r.text\n    soup = BeautifulSoup(html, \"html.parser\")\n    articles = soup.find_all('article')\n    latest_articles = []\n    for article in articles:\n        pub_date = article.find('time')['datetime']\n        if (datetime.now() - datetime.fromisoformat(pub_date)).total_seconds() < 1814400:\n            latest_articles.append(article.text)\n    return latest_articles[: 10]"}
{"instruction":"Generate a python program that takes a string and an integer as input and outputs a string repeated the given integer number of times.","input":"(\"GPT Model\", 3)","output":"def repeat(string, n):\n    return string * n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program that takes a string and an integer as input and outputs a string repeated the given integer number of times.\n\n### Input:\n(\"GPT Model\", 3)\n\n### Output:\ndef repeat(string, n):\n    return string * n"}
{"instruction":"Develop a function in Python that takes a string and an integer as input and returns the string with the length of the integer.","input":"'Hello World', 5","output":"def truncateString(inputString, length):\n    return inputString[:length]\n\nprint(truncateString('Hello World', 5))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python that takes a string and an integer as input and returns the string with the length of the integer.\n\n### Input:\n'Hello World', 5\n\n### Output:\ndef truncateString(inputString, length):\n    return inputString[:length]\n\nprint(truncateString('Hello World', 5))"}
{"instruction":"Edit the Python program given below, so that it computes the factorial of the given number n.","input":"def factorial(n):\t\n    # TODO","output":"def factorial(n):\t\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the Python program given below, so that it computes the factorial of the given number n.\n\n### Input:\ndef factorial(n):\t\n    # TODO\n\n### Output:\ndef factorial(n):\t\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"instruction":"Create a Python function to remove all the elements in a list that are greater than a specified value.","input":"[1, 2, 3, 4, 5], 3","output":"def remove_greater_than(arr, value):\n    new_arr = []\n    for item in arr:\n        if item <= value:\n            new_arr.append(item)\n    return new_arr\n\nresult = remove_greater_than([1, 2, 3, 4, 5], 3)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to remove all the elements in a list that are greater than a specified value.\n\n### Input:\n[1, 2, 3, 4, 5], 3\n\n### Output:\ndef remove_greater_than(arr, value):\n    new_arr = []\n    for item in arr:\n        if item <= value:\n            new_arr.append(item)\n    return new_arr\n\nresult = remove_greater_than([1, 2, 3, 4, 5], 3)\nprint(result)"}
{"instruction":"Create a Python script that uses a for loop to display the items from a list.","input":"[apple, orange, banana]","output":"# Create a list\nlist = ['apple', 'orange', 'banana']\n\n# Loop over the list\nfor item in list:\n    print(item)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that uses a for loop to display the items from a list.\n\n### Input:\n[apple, orange, banana]\n\n### Output:\n# Create a list\nlist = ['apple', 'orange', 'banana']\n\n# Loop over the list\nfor item in list:\n    print(item)"}
{"instruction":"Implement a method in Python to round off any given number to the nearest integer.","input":"5.66","output":"def roundNum(num): \n    if (num - int(num)) >= 0.5: \n        return int(num) + 1\n    else: \n        return int(num) \n  \nnum = 5.66\nroundedNum = roundNum(num) \nprint(roundedNum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a method in Python to round off any given number to the nearest integer.\n\n### Input:\n5.66\n\n### Output:\ndef roundNum(num): \n    if (num - int(num)) >= 0.5: \n        return int(num) + 1\n    else: \n        return int(num) \n  \nnum = 5.66\nroundedNum = roundNum(num) \nprint(roundedNum)"}
{"instruction":"Create a Discord bot that has the capability to respond to questions related to computer programming.","input":"Not applicable","output":"import discord\nfrom discord.ext import commands\n\nclient = commands.Bot(command_prefix='.')\n\n@client.event\nasync def on_ready():\n    print('Bot is ready.')\n\n@client.command()\nasync def question(ctx, *, question):\n    responses = {\n        \"what is python\": \"Python is a high-level programming language.\",\n        \"who created python\": \"Python was created by Guido van Rossum in 1991.\",\n        \"what is java\": \"Java is a class-based, object-oriented programming language.\",\n        \"who created java\": \"Java was created by James Gosling in 1995.\"\n    }\n\n    await ctx.send(responses.get(question.lower(), \"I'm sorry, I don't understand.\"))\n\nclient.run('<YOUR BOT TOKEN>')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Discord bot that has the capability to respond to questions related to computer programming.\n\n### Input:\nNot applicable\n\n### Output:\nimport discord\nfrom discord.ext import commands\n\nclient = commands.Bot(command_prefix='.')\n\n@client.event\nasync def on_ready():\n    print('Bot is ready.')\n\n@client.command()\nasync def question(ctx, *, question):\n    responses = {\n        \"what is python\": \"Python is a high-level programming language.\",\n        \"who created python\": \"Python was created by Guido van Rossum in 1991.\",\n        \"what is java\": \"Java is a class-based, object-oriented programming language.\",\n        \"who created java\": \"Java was created by James Gosling in 1995.\"\n    }\n\n    await ctx.send(responses.get(question.lower(), \"I'm sorry, I don't understand.\"))\n\nclient.run('<YOUR BOT TOKEN>')"}
{"instruction":"Write a Python program to print out the restults of a list of functions","input":"functions = [max, min, sum]\nlist = [1,2,3,4,5]","output":"def print_results(functions, list): \n  for func in functions: \n    print(func.__name__ + \": \" + str(func(list)))\n    \nprint_results(functions, list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print out the restults of a list of functions\n\n### Input:\nfunctions = [max, min, sum]\nlist = [1,2,3,4,5]\n\n### Output:\ndef print_results(functions, list): \n  for func in functions: \n    print(func.__name__ + \": \" + str(func(list)))\n    \nprint_results(functions, list)"}
{"instruction":"Write a Python program that converts an integer into a Roman numeral.","input":"Integer: 1899","output":"def intToRoman(num):\n romans = [\"M\", \"CM\", \"D\", \"CD\", \n \"C\", \"XC\", \"L\", \"XL\", \n \"X\", \"IX\", \"V\", \"IV\", \n \"I\"] \n numbers = [1000, 900, 500, 400, \n 100, 90, 50, 40, \n 10, 9, 5, 4, \n 1] \n res = \"\" \n i = 0\n \n while num > 0: \n  # if num is greater than the number \n  # at index i, subtract the number \n  # at index i and append roman \n  # at index i in the res. \n  for _ in range(num \/\/ numbers[i]): \n   res += romans[i] \n   num -= numbers[i] \n  i += 1\n \n return res\n\n\nnum = 1899\nprint(intToRoman(num))\n\nOutput:\nMDCCCXCIX","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that converts an integer into a Roman numeral.\n\n### Input:\nInteger: 1899\n\n### Output:\ndef intToRoman(num):\n romans = [\"M\", \"CM\", \"D\", \"CD\", \n \"C\", \"XC\", \"L\", \"XL\", \n \"X\", \"IX\", \"V\", \"IV\", \n \"I\"] \n numbers = [1000, 900, 500, 400, \n 100, 90, 50, 40, \n 10, 9, 5, 4, \n 1] \n res = \"\" \n i = 0\n \n while num > 0: \n  # if num is greater than the number \n  # at index i, subtract the number \n  # at index i and append roman \n  # at index i in the res. \n  for _ in range(num \/\/ numbers[i]): \n   res += romans[i] \n   num -= numbers[i] \n  i += 1\n \n return res\n\n\nnum = 1899\nprint(intToRoman(num))\n\nOutput:\nMDCCCXCIX"}
{"instruction":"Create a linear regression model in Python to predict the price of a taxi ride given the distance and time for the ride.","input":"distance: 10 miles\ntime: 30 minutes","output":"import numpy as np\nimport sklearn\nfrom sklearn.linear_model import LinearRegression\n\n# Create model\nmodel = LinearRegression()\n\n# Train model\ndata = np.array([[10, 30], [20, 40], [30, 50], [40, 60], [50, 70]])\nX = data[:, 0].reshape(-1, 1)\ny = data[:, 1].reshape(-1, 1)\nmodel.fit(X, y)\n\n# Predict price of taxi ride\ndistance = 10\ntime = 30\nprice = model.predict([[distance, time]])[0][0]\nprint(f'The predicted price of a {distance} miles, {time} minutes taxi ride is ${price:.2f}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a linear regression model in Python to predict the price of a taxi ride given the distance and time for the ride.\n\n### Input:\ndistance: 10 miles\ntime: 30 minutes\n\n### Output:\nimport numpy as np\nimport sklearn\nfrom sklearn.linear_model import LinearRegression\n\n# Create model\nmodel = LinearRegression()\n\n# Train model\ndata = np.array([[10, 30], [20, 40], [30, 50], [40, 60], [50, 70]])\nX = data[:, 0].reshape(-1, 1)\ny = data[:, 1].reshape(-1, 1)\nmodel.fit(X, y)\n\n# Predict price of taxi ride\ndistance = 10\ntime = 30\nprice = model.predict([[distance, time]])[0][0]\nprint(f'The predicted price of a {distance} miles, {time} minutes taxi ride is ${price:.2f}')"}
{"instruction":"Design a Python script to classify movie reviews as positive or negative.","input":"Text of a review:\n\"This movie was fantastic! It was funny, interesting, and definitely worth watching.\"","output":"import re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n\nstop_words = stopwords.words(\"english\")\n# remove punctuations\ntest_review = re.sub(r\"\\W\", \" \", test_review)\n# tokenize the sentence\nreview_tokens = word_tokenize(test_review)\n# remove stopwords\nreview_words = [word for word in review_tokens if not word in stop_words]\n# classify \nif len(review_words) > 0: \n    pos_words = 0\n    for word in review_words:\n        if word in pos_words: \n            pos_words += 1\n    # if more than half of the words are positive then label it as positive\n    if pos_words \/ len(review_words) > 0.5:\n        print(\"Positive\")\n    else:\n        print(\"Negative\")\nelse:\n    print(\"Neutral\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script to classify movie reviews as positive or negative.\n\n### Input:\nText of a review:\n\"This movie was fantastic! It was funny, interesting, and definitely worth watching.\"\n\n### Output:\nimport re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n\nstop_words = stopwords.words(\"english\")\n# remove punctuations\ntest_review = re.sub(r\"\\W\", \" \", test_review)\n# tokenize the sentence\nreview_tokens = word_tokenize(test_review)\n# remove stopwords\nreview_words = [word for word in review_tokens if not word in stop_words]\n# classify \nif len(review_words) > 0: \n    pos_words = 0\n    for word in review_words:\n        if word in pos_words: \n            pos_words += 1\n    # if more than half of the words are positive then label it as positive\n    if pos_words \/ len(review_words) > 0.5:\n        print(\"Positive\")\n    else:\n        print(\"Negative\")\nelse:\n    print(\"Neutral\")"}
{"instruction":"Generate a Python program to solve the below dynamic programming problem: Given a set of integers and a target sum, find a subset whose sum is equal to this target sum.","input":"","output":"def subset_sum(nums, s):\n n = len(nums)\n dp_table = [ [False] * (s + 1) for _ in range(n + 1)]\n \n # initialize top row as true\n for i in range(s+1):\n dp_table[0][i] = True\n \n # fill up the dp_table using bottom-up approach\n for i in range(1, n+1):\n for j in range(1, s+1):\n # if current element is greater than sum s\n if nums[i-1] > j:\n dp_table[i][j] = dp_table[i-1][j]\n # else, we can include the element or not include the element\n else:\n dp_table[i][j] = dp_table[i-1][j] or dp_table[i-1][j-nums[i-1]]\n \n # return true is sum s is reachable\n return dp_table[n][s]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to solve the below dynamic programming problem: Given a set of integers and a target sum, find a subset whose sum is equal to this target sum.\n\n### Input:\n\n\n### Output:\ndef subset_sum(nums, s):\n n = len(nums)\n dp_table = [ [False] * (s + 1) for _ in range(n + 1)]\n \n # initialize top row as true\n for i in range(s+1):\n dp_table[0][i] = True\n \n # fill up the dp_table using bottom-up approach\n for i in range(1, n+1):\n for j in range(1, s+1):\n # if current element is greater than sum s\n if nums[i-1] > j:\n dp_table[i][j] = dp_table[i-1][j]\n # else, we can include the element or not include the element\n else:\n dp_table[i][j] = dp_table[i-1][j] or dp_table[i-1][j-nums[i-1]]\n \n # return true is sum s is reachable\n return dp_table[n][s]"}
{"instruction":"Construct a web scraper in Python to extract address data from a list of websites.","input":"","output":"import requests \nfrom bs4 import BeautifulSoup \n\n# List of websites\nurls = [\n    \"example1.com\", \n    \"example2.com\",\n    \"example3.com\"\n]\n\n# Database to store the information\ndata = []\n\n# Loop over each website\nfor url in urls:\n    page = requests.get(url) \n    soup = BeautifulSoup(page.content, 'html.parser') \n  \n    # Get the first address\n    address_div = soup.find('div', class_='address')\n\n    # Extract the address\n    for line in address_div.findAll('rer'):\n        address = line.string\n    \n    # Add the address to the database\n    data.append(address)\n\n# Return the database\nreturn data","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a web scraper in Python to extract address data from a list of websites.\n\n### Input:\n\n\n### Output:\nimport requests \nfrom bs4 import BeautifulSoup \n\n# List of websites\nurls = [\n    \"example1.com\", \n    \"example2.com\",\n    \"example3.com\"\n]\n\n# Database to store the information\ndata = []\n\n# Loop over each website\nfor url in urls:\n    page = requests.get(url) \n    soup = BeautifulSoup(page.content, 'html.parser') \n  \n    # Get the first address\n    address_div = soup.find('div', class_='address')\n\n    # Extract the address\n    for line in address_div.findAll('rer'):\n        address = line.string\n    \n    # Add the address to the database\n    data.append(address)\n\n# Return the database\nreturn data"}
{"instruction":"Generate a python program for printing a Pascal triangle.","input":"Number of rows= 5","output":"def PascalTriangle(n) : \n      \n    # An auxiliary array to store \n    # generated pscal triangle values \n    arr = [0 for i in range(n)] \n      \n    # Iterate through every line and \n    # print integer(s) in it \n    for line in range(0, n) : \n          \n        # Every line has number of  \n        # integers equal to line  \n        # number \n        for i in range (0, line + 1) : \n              \n            # First and last values  \n            # in every row are 1 \n            if (i == 0 or i == line) : \n                arr[i] = 1\n                  \n            # Other values are sum of  \n            # values just above and  \n            # left of above \n            else : \n                arr[i] = arr[i] + arr[i - 1]  \n              \n        # Printing array in \n        # mantainence of order          \n        for i in range (0, line + 1) : \n            print(arr[i], end =\" \")  \n        print()   \n  \n# Driver Code \nn = 5\nPascalTriangle(n)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program for printing a Pascal triangle.\n\n### Input:\nNumber of rows= 5\n\n### Output:\ndef PascalTriangle(n) : \n      \n    # An auxiliary array to store \n    # generated pscal triangle values \n    arr = [0 for i in range(n)] \n      \n    # Iterate through every line and \n    # print integer(s) in it \n    for line in range(0, n) : \n          \n        # Every line has number of  \n        # integers equal to line  \n        # number \n        for i in range (0, line + 1) : \n              \n            # First and last values  \n            # in every row are 1 \n            if (i == 0 or i == line) : \n                arr[i] = 1\n                  \n            # Other values are sum of  \n            # values just above and  \n            # left of above \n            else : \n                arr[i] = arr[i] + arr[i - 1]  \n              \n        # Printing array in \n        # mantainence of order          \n        for i in range (0, line + 1) : \n            print(arr[i], end =\" \")  \n        print()   \n  \n# Driver Code \nn = 5\nPascalTriangle(n)"}
{"instruction":"Create a Python class for media items (movies, TV shows, etc). The class should have class variables for genre, duration, and release date, as well as methods for setting and getting the attributes.","input":"Not applicable","output":"class MediaItem:\n    def __init__(self, genre, duration, release_date):\n        self.genre = genre\n        self.duration = duration\n        self.release_date = release_date\n\n    @property\n    def genre(self):\n        return self.__genre\n\n    @genre.setter\n    def genre(self, genre):\n        self.__genre = genre\n\n    @property\n    def duration(self):\n        return self.__duration\n    \n    @duration.setter\n    def duration(self, duration):\n        self.__duration = duration\n\n    @property\n    def release_date(self):\n        return self.__release_date\n\n    @release_date.setter\n    def release_date(self, release_date):\n        self.__release_date = release_date","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for media items (movies, TV shows, etc). The class should have class variables for genre, duration, and release date, as well as methods for setting and getting the attributes.\n\n### Input:\nNot applicable\n\n### Output:\nclass MediaItem:\n    def __init__(self, genre, duration, release_date):\n        self.genre = genre\n        self.duration = duration\n        self.release_date = release_date\n\n    @property\n    def genre(self):\n        return self.__genre\n\n    @genre.setter\n    def genre(self, genre):\n        self.__genre = genre\n\n    @property\n    def duration(self):\n        return self.__duration\n    \n    @duration.setter\n    def duration(self, duration):\n        self.__duration = duration\n\n    @property\n    def release_date(self):\n        return self.__release_date\n\n    @release_date.setter\n    def release_date(self, release_date):\n        self.__release_date = release_date"}
{"instruction":"Generate a python program that takes two sets of integers as input and outputs the intersection of those sets.","input":"set1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}","output":"def intersection(set1, set2): \n   return set1 & set2\n\nresult = intersection(set1, set2) \nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program that takes two sets of integers as input and outputs the intersection of those sets.\n\n### Input:\nset1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\n\n### Output:\ndef intersection(set1, set2): \n   return set1 & set2\n\nresult = intersection(set1, set2) \nprint(result)"}
{"instruction":"Given two strings, write a Python program to check if one is an anagram of other.","input":"listen and silent","output":"def isAnagram(str1, str2):\n    str1_sorted = sorted(str1)\n    str2_sorted = sorted(str2)\n    # Compare sorted strings\n    if str1_sorted == str2_sorted:\n        return True\n    else:\n        return False\n\nstr1 = \"listen\"\nstr2 = \"silent\"\n\nprint(isAnagram(str1, str2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two strings, write a Python program to check if one is an anagram of other.\n\n### Input:\nlisten and silent\n\n### Output:\ndef isAnagram(str1, str2):\n    str1_sorted = sorted(str1)\n    str2_sorted = sorted(str2)\n    # Compare sorted strings\n    if str1_sorted == str2_sorted:\n        return True\n    else:\n        return False\n\nstr1 = \"listen\"\nstr2 = \"silent\"\n\nprint(isAnagram(str1, str2))"}
{"instruction":"Create a Python function that will optimize a given set of data using the Hill Climbing Algorithm.","input":"data = [6, 2, 5, 9, 8, 4]","output":"def hill_climbing(data):\n # Initialize the best solution to the input solution\n best_solution = data\n best_score = evaluate(data)\n improvement = True\n\n # While there is an improvement\n while improvement:\n # Get the indices of the two nodes to swap\n a, b = get_swapping_indices(best_solution)\n\n # Create a new solution by swapping the two nodes\n new_solution = best_solution.copy()\n new_solution[a], new_solution[b] = new_solution[b], new_solution[a]\n\n # Evaluate the new solution\n new_score = evaluate(new_solution)\n\n # If it is better than the best solution\n if new_score > best_score:\n # Update the best solution and score\n best_solution = new_solution\n best_score = new_score\n # Otherwise, we cannot improve further\n else:\n improvement = False\n\n # Return the best solution\n return best_solution\n\ndef evaluate(solution):\n # Calculate the total distance travelled\n total_distance = 0\n\n for i in range(len(solution)):\n total_distance += abs(solution[i] - solution[(i+1) % len(solution)])\n\n # Return the total distance\n return total_distance\n\ndef get_swapping_indices(solution):\n # Choose two random indices\n a = random.randint(0, len(solution) - 1)\n b = random.randint(0, len(solution) - 1)\n\n # Make sure they are different\n while a == b:\n b = random.randint(0, len(solution) - 1)\n\n # Return the indices\n return a, b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that will optimize a given set of data using the Hill Climbing Algorithm.\n\n### Input:\ndata = [6, 2, 5, 9, 8, 4]\n\n### Output:\ndef hill_climbing(data):\n # Initialize the best solution to the input solution\n best_solution = data\n best_score = evaluate(data)\n improvement = True\n\n # While there is an improvement\n while improvement:\n # Get the indices of the two nodes to swap\n a, b = get_swapping_indices(best_solution)\n\n # Create a new solution by swapping the two nodes\n new_solution = best_solution.copy()\n new_solution[a], new_solution[b] = new_solution[b], new_solution[a]\n\n # Evaluate the new solution\n new_score = evaluate(new_solution)\n\n # If it is better than the best solution\n if new_score > best_score:\n # Update the best solution and score\n best_solution = new_solution\n best_score = new_score\n # Otherwise, we cannot improve further\n else:\n improvement = False\n\n # Return the best solution\n return best_solution\n\ndef evaluate(solution):\n # Calculate the total distance travelled\n total_distance = 0\n\n for i in range(len(solution)):\n total_distance += abs(solution[i] - solution[(i+1) % len(solution)])\n\n # Return the total distance\n return total_distance\n\ndef get_swapping_indices(solution):\n # Choose two random indices\n a = random.randint(0, len(solution) - 1)\n b = random.randint(0, len(solution) - 1)\n\n # Make sure they are different\n while a == b:\n b = random.randint(0, len(solution) - 1)\n\n # Return the indices\n return a, b"}
{"instruction":"Create a random number generator in Python.","input":"","output":"import random\n\ndef random_num_generator():\n    return random.randint(0, 9)\n\n# Print a number\nprint(random_num_generator())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a random number generator in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef random_num_generator():\n    return random.randint(0, 9)\n\n# Print a number\nprint(random_num_generator())"}
{"instruction":"Given a list of numbers, write a Python program to calculate the median.","input":"[3, 4, 5, 9, 12, 15]","output":"def median(nums):\n    nums.sort()\n    n = len(nums)\n    if n % 2 == 0:\n        return (nums[n\/\/2] + nums[(n\/\/2) - 1]) \/ 2\n    return nums[n\/\/2]\n\nnums = [3, 4, 5, 9, 12, 15]\nprint(median(nums))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers, write a Python program to calculate the median.\n\n### Input:\n[3, 4, 5, 9, 12, 15]\n\n### Output:\ndef median(nums):\n    nums.sort()\n    n = len(nums)\n    if n % 2 == 0:\n        return (nums[n\/\/2] + nums[(n\/\/2) - 1]) \/ 2\n    return nums[n\/\/2]\n\nnums = [3, 4, 5, 9, 12, 15]\nprint(median(nums))"}
{"instruction":"Create a class in Python which calculates the area of a rectangle.","input":"","output":"class Rectangle: \n    # constructor \n    def __init__(self, length, width): \n        self.length = length \n        self.width = width \n\n    # member function \n    def calculate_area(self): \n        return self.length * self.width \n\n# creating an instance \nrect1 = Rectangle(5, 6) \n\n# call member function of the class \nprint(\"Area of rectangle is:\", rect1.calculate_area())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python which calculates the area of a rectangle.\n\n### Input:\n\n\n### Output:\nclass Rectangle: \n    # constructor \n    def __init__(self, length, width): \n        self.length = length \n        self.width = width \n\n    # member function \n    def calculate_area(self): \n        return self.length * self.width \n\n# creating an instance \nrect1 = Rectangle(5, 6) \n\n# call member function of the class \nprint(\"Area of rectangle is:\", rect1.calculate_area())"}
{"instruction":"Write a Python program to fill an array with random numbers and generate a random index.","input":"","output":"import random\n\n# Create an empty array\narray = []\n\n# Fill the array with random numbers\nfor i in range(10):\n    array.append(random.randrange(10))\n\n# Generate a random index\nindex = random.randrange(10)\n\n# Print the numbers and the index\nprint(array)\nprint(\"Random Index:\", index)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to fill an array with random numbers and generate a random index.\n\n### Input:\n\n\n### Output:\nimport random\n\n# Create an empty array\narray = []\n\n# Fill the array with random numbers\nfor i in range(10):\n    array.append(random.randrange(10))\n\n# Generate a random index\nindex = random.randrange(10)\n\n# Print the numbers and the index\nprint(array)\nprint(\"Random Index:\", index)"}
{"instruction":"Create an Object-oriented Python program that can accept a user\u2019s name and salary as input and return the corresponding tax to be paid.","input":"Name: John Doe \nSalary: 45000","output":"class User:\n    def __init__(self, name, salary):\n        self.name = name\n        self.salary = salary\n\n    def get_tax(self):\n        if self.salary < 12500:\n            return 0\n\n        elif self.salary >= 12500 and self.salary < 50000:\n            return (self.salary - 12500) * 0.2\n\n        else:\n            return (self.salary - 50000) * 0.45 + 7500\n\nuser_name = input('Name: ')\nsalary = int(input('Salary: '))\n\nuser = User(user_name, salary)\nprint('Tax to be paid: %s' % user.get_tax())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an Object-oriented Python program that can accept a user\u2019s name and salary as input and return the corresponding tax to be paid.\n\n### Input:\nName: John Doe \nSalary: 45000\n\n### Output:\nclass User:\n    def __init__(self, name, salary):\n        self.name = name\n        self.salary = salary\n\n    def get_tax(self):\n        if self.salary < 12500:\n            return 0\n\n        elif self.salary >= 12500 and self.salary < 50000:\n            return (self.salary - 12500) * 0.2\n\n        else:\n            return (self.salary - 50000) * 0.45 + 7500\n\nuser_name = input('Name: ')\nsalary = int(input('Salary: '))\n\nuser = User(user_name, salary)\nprint('Tax to be paid: %s' % user.get_tax())"}
{"instruction":"Create a program in Python to find all pairs of elements in a list with the given difference.","input":"[9, 4, 7, 5], 4","output":"def find_pair_with_difference(list, difference):\n    result = []\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[j] - list[i] == difference:\n                result.append((list[i], list[j]))\n    return result\n\nlist=[9, 4, 7, 5]\ndifference = 4\nresult = find_pair_with_difference(list, difference)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to find all pairs of elements in a list with the given difference.\n\n### Input:\n[9, 4, 7, 5], 4\n\n### Output:\ndef find_pair_with_difference(list, difference):\n    result = []\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[j] - list[i] == difference:\n                result.append((list[i], list[j]))\n    return result\n\nlist=[9, 4, 7, 5]\ndifference = 4\nresult = find_pair_with_difference(list, difference)\nprint(result)"}
{"instruction":"Create a program in Python to sort a given array in ascending order using bubble sort.","input":"[3,7,4,1]","output":"def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n-1):\n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\narr = [3,7,4,1]\nbubble_sort(arr) \nprint (\"Sorted array :\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to sort a given array in ascending order using bubble sort.\n\n### Input:\n[3,7,4,1]\n\n### Output:\ndef bubble_sort(arr): \n    n = len(arr) \n    for i in range(n-1):\n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\narr = [3,7,4,1]\nbubble_sort(arr) \nprint (\"Sorted array :\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),"}
{"instruction":"Write a Python program to traverse a given array from the end and replace each odd number with the product of the previous and next neighbors.","input":"[1, 3, 5, 7, 9, 11, 13]","output":"def neighbor_product(arr):\n    # loop through array elements in reverse order\n    for i in range(len(arr)-1, 0, -1):\n        # check if element is odd\n        if arr[i] % 2 == 1:\n            # replace element with product of the previous and next neighbors\n            arr[i] = arr[i-1] * arr[i+1]\n    return arr\n\narr = [1, 3, 5, 7, 9, 11, 13]\n\nupdated_arr = neighbor_product(arr)\nprint(updated_arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to traverse a given array from the end and replace each odd number with the product of the previous and next neighbors.\n\n### Input:\n[1, 3, 5, 7, 9, 11, 13]\n\n### Output:\ndef neighbor_product(arr):\n    # loop through array elements in reverse order\n    for i in range(len(arr)-1, 0, -1):\n        # check if element is odd\n        if arr[i] % 2 == 1:\n            # replace element with product of the previous and next neighbors\n            arr[i] = arr[i-1] * arr[i+1]\n    return arr\n\narr = [1, 3, 5, 7, 9, 11, 13]\n\nupdated_arr = neighbor_product(arr)\nprint(updated_arr)"}
{"instruction":"Compute the Least Common Multiple of two numbers.","input":"a = 15\nb = 10","output":"# Python3 code to find LCM\ndef compute_lcm(x, y):\n   # choose the greater number\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\nlcm = compute_lcm(15, 10)\nprint(\"The Least Common Multiple of 15 and 10 is: \",lcm)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the Least Common Multiple of two numbers.\n\n### Input:\na = 15\nb = 10\n\n### Output:\n# Python3 code to find LCM\ndef compute_lcm(x, y):\n   # choose the greater number\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\nlcm = compute_lcm(15, 10)\nprint(\"The Least Common Multiple of 15 and 10 is: \",lcm)"}
{"instruction":"We have a json object containing a list of words. Create a program in Python that returns all the words that are longer than 7 characters.","input":"{\n  \"words\": [ \"abide\", \"absolve\", \"catastrophe\", \"accelerate\", \"capable\"]\n}","output":"import json\n\ndef findLongWords(words):\n    result = []\n    for word in words:\n        if len(word) > 7:\n            result.append(word)\n    return result\n\ndata = json.loads(input_data)\nwords = data[\"words\"]\n\nprint(findLongWords(words)) \/\/ [\"catastrophe\", \"accelerate\"]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWe have a json object containing a list of words. Create a program in Python that returns all the words that are longer than 7 characters.\n\n### Input:\n{\n  \"words\": [ \"abide\", \"absolve\", \"catastrophe\", \"accelerate\", \"capable\"]\n}\n\n### Output:\nimport json\n\ndef findLongWords(words):\n    result = []\n    for word in words:\n        if len(word) > 7:\n            result.append(word)\n    return result\n\ndata = json.loads(input_data)\nwords = data[\"words\"]\n\nprint(findLongWords(words)) \/\/ [\"catastrophe\", \"accelerate\"]"}
{"instruction":"This code is a Python script that provides a command-line interface to download subtitles for movies and TV shows. To use it, run the script and provide one or more release paths as arguments. You can also specify the language and subtitle site to use. The available commands are \"download\", \"exist\", \"test\", \"list\", \"help\", and \"version\".","input":"","output":"#!\/usr\/bin\/env python\n#-*- coding:utf-8 -*-\n########################################################\n# Name: Subtitles Client\n# Site: http:\/\/RealGame.co.il\n__author__ = 'RealGame (Tomer Zait)'\n__license__ = 'GPL v3'\n__version__ = '1.0'\n__email__ = 'realgam3@gmail.com'\n########################################################\n\nfrom os import path\nfrom sys import argv\nfrom docopt import docopt\n\nfrom engines.engine import SubtitleSite, SUBTITLE_SITE_LIST, DEFAULTS\n\n\n__doc__ = \\\n\"\"\"\nSubtitles Client\n\nUsage:\n  {prog} download <releases_path>... [--lang=<language> --engine=<subtitle_site>...]\n  {prog} exist <releases_path>... [--lang=<language> --engine=<subtitle_site>...]\n  {prog} test [<engines>...]\n  {prog} (-l | --list)\n  {prog} (-h | --help)\n  {prog} (-v | --version)\n\nOptions:\n  -l --list                 Show subtitles engine list.\n  -h --help                 Show this screen.\n  -v --version              Show version.\n  --lang=<language>         Subtitle language (alpha2) [default: {def_language}].\n  --engine=<subtitle_site>  Subtitle site              [default: {def_engine}].\n\"\"\".format(prog=path.basename(argv[0]),\n           def_language=DEFAULTS['subtitle_language'],\n           def_engine=DEFAULTS['subtitle_engine'])\n\n\ndef download_subtitles(releases, engines=[DEFAULTS['subtitle_engine']], lang=DEFAULTS['subtitle_language']):\n    if releases:\n        for release in releases:\n            for engine in engines:\n                subtitle_release = SubtitleSite.get_file_properties(release)['release_name']\n                print \"[{engine: ^15}] Trying To Download Subtitles For: '{release}'\".format(engine=engine,\n                                                                                             release=subtitle_release)\n                sub_obj = SubtitleSite.class_factory(engine)\n                subtitle_path = sub_obj.download_subtitle(release, lang)\n                if subtitle_path:\n                    print \"{0:17} Download Success: ({file_path}).\\n\".format(\"\", file_path=subtitle_path)\n                else:\n                    print \"{0:17} Subtitles Not Found.\\n\".format(\"\")\n\n\ndef is_subtitles_exist(releases, engines=[DEFAULTS['subtitle_engine']], lang=DEFAULTS['subtitle_language']):\n    if releases:\n        for release in releases:\n            for engine in engines:\n                subtitle_release = SubtitleSite.get_file_properties(release)['release_name']\n\n                sub_obj = SubtitleSite.class_factory(engine)\n                exist_flag = sub_obj.is_subtitle_exist(release, lang)\n                res = \"Exist\"\n                if not exist_flag:\n                    res = \"Does Not \" + res\n                print \"[{engine: ^15}] '{release}' - {res}.\".format(engine=engine,\n                                                                    release=subtitle_release,\n                                                                    res=res)\n\n\ndef test_engines(engines):\n    if not engines:\n        engines = SUBTITLE_SITE_LIST.keys()\n\n    for engine_key in engines:\n        t = SubtitleSite.class_factory(engine_key)\n        t.test_engine()\n\n\ndef main():\n    args = docopt(__doc__, help=True, version='Subtitles Client %s' % __version__)\n\n    if args['download']:\n        download_subtitles(args['<releases_path>'], args['--engine'], args['--lang'])\n    elif args['exist']:\n        is_subtitles_exist(args['<releases_path>'], args['--engine'], args['--lang'])\n    elif args['test']:\n        test_engines(args['<engines>'])\n    elif args['--list']:\n        for sub_site in SUBTITLE_SITE_LIST.keys():\n            sub_dict = SUBTITLE_SITE_LIST.get(sub_site)\n            print sub_dict.get('class_name')\n\n\nif __name__ == \"__main__\":\n    main()\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a Python script that provides a command-line interface to download subtitles for movies and TV shows. To use it, run the script and provide one or more release paths as arguments. You can also specify the language and subtitle site to use. The available commands are \"download\", \"exist\", \"test\", \"list\", \"help\", and \"version\".\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n#-*- coding:utf-8 -*-\n########################################################\n# Name: Subtitles Client\n# Site: http:\/\/RealGame.co.il\n__author__ = 'RealGame (Tomer Zait)'\n__license__ = 'GPL v3'\n__version__ = '1.0'\n__email__ = 'realgam3@gmail.com'\n########################################################\n\nfrom os import path\nfrom sys import argv\nfrom docopt import docopt\n\nfrom engines.engine import SubtitleSite, SUBTITLE_SITE_LIST, DEFAULTS\n\n\n__doc__ = \\\n\"\"\"\nSubtitles Client\n\nUsage:\n  {prog} download <releases_path>... [--lang=<language> --engine=<subtitle_site>...]\n  {prog} exist <releases_path>... [--lang=<language> --engine=<subtitle_site>...]\n  {prog} test [<engines>...]\n  {prog} (-l | --list)\n  {prog} (-h | --help)\n  {prog} (-v | --version)\n\nOptions:\n  -l --list                 Show subtitles engine list.\n  -h --help                 Show this screen.\n  -v --version              Show version.\n  --lang=<language>         Subtitle language (alpha2) [default: {def_language}].\n  --engine=<subtitle_site>  Subtitle site              [default: {def_engine}].\n\"\"\".format(prog=path.basename(argv[0]),\n           def_language=DEFAULTS['subtitle_language'],\n           def_engine=DEFAULTS['subtitle_engine'])\n\n\ndef download_subtitles(releases, engines=[DEFAULTS['subtitle_engine']], lang=DEFAULTS['subtitle_language']):\n    if releases:\n        for release in releases:\n            for engine in engines:\n                subtitle_release = SubtitleSite.get_file_properties(release)['release_name']\n                print \"[{engine: ^15}] Trying To Download Subtitles For: '{release}'\".format(engine=engine,\n                                                                                             release=subtitle_release)\n                sub_obj = SubtitleSite.class_factory(engine)\n                subtitle_path = sub_obj.download_subtitle(release, lang)\n                if subtitle_path:\n                    print \"{0:17} Download Success: ({file_path}).\\n\".format(\"\", file_path=subtitle_path)\n                else:\n                    print \"{0:17} Subtitles Not Found.\\n\".format(\"\")\n\n\ndef is_subtitles_exist(releases, engines=[DEFAULTS['subtitle_engine']], lang=DEFAULTS['subtitle_language']):\n    if releases:\n        for release in releases:\n            for engine in engines:\n                subtitle_release = SubtitleSite.get_file_properties(release)['release_name']\n\n                sub_obj = SubtitleSite.class_factory(engine)\n                exist_flag = sub_obj.is_subtitle_exist(release, lang)\n                res = \"Exist\"\n                if not exist_flag:\n                    res = \"Does Not \" + res\n                print \"[{engine: ^15}] '{release}' - {res}.\".format(engine=engine,\n                                                                    release=subtitle_release,\n                                                                    res=res)\n\n\ndef test_engines(engines):\n    if not engines:\n        engines = SUBTITLE_SITE_LIST.keys()\n\n    for engine_key in engines:\n        t = SubtitleSite.class_factory(engine_key)\n        t.test_engine()\n\n\ndef main():\n    args = docopt(__doc__, help=True, version='Subtitles Client %s' % __version__)\n\n    if args['download']:\n        download_subtitles(args['<releases_path>'], args['--engine'], args['--lang'])\n    elif args['exist']:\n        is_subtitles_exist(args['<releases_path>'], args['--engine'], args['--lang'])\n    elif args['test']:\n        test_engines(args['<engines>'])\n    elif args['--list']:\n        for sub_site in SUBTITLE_SITE_LIST.keys():\n            sub_dict = SUBTITLE_SITE_LIST.get(sub_site)\n            print sub_dict.get('class_name')\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"instruction":"Create a machine learning model in Python to predict if a customer will place a new order based on past sales.","input":"","output":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\ndata = pd.read_csv('dataset.csv')\n\nX = data.drop('label', axis=1).to_numpy()\ny = data['label'].to_numpy()\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# logistic regression model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python to predict if a customer will place a new order based on past sales.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\ndata = pd.read_csv('dataset.csv')\n\nX = data.drop('label', axis=1).to_numpy()\ny = data['label'].to_numpy()\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# logistic regression model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)"}
{"instruction":"Create a Python program for predicting the stock price of a company given the past 5 days of its stock price history.","input":"Stock Price History:\n[17.4, 17.3, 17.5, 17.2, 17.3]","output":"import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n#Define and reshape the data\nstock_price = np.array([17.4, 17.3, 17.5, 17.2, 17.3]).reshape(-1, 1)\n\n#Train the model\nmodel = LinearRegression()\nmodel.fit(stock_price[:4], stock_price[1:])\n\n#Predict the next day's price\npredicted_price = model.predict([stock_price[4]])\nprint(f'Predicted price is: {predicted_price[0][0]}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for predicting the stock price of a company given the past 5 days of its stock price history.\n\n### Input:\nStock Price History:\n[17.4, 17.3, 17.5, 17.2, 17.3]\n\n### Output:\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n#Define and reshape the data\nstock_price = np.array([17.4, 17.3, 17.5, 17.2, 17.3]).reshape(-1, 1)\n\n#Train the model\nmodel = LinearRegression()\nmodel.fit(stock_price[:4], stock_price[1:])\n\n#Predict the next day's price\npredicted_price = model.predict([stock_price[4]])\nprint(f'Predicted price is: {predicted_price[0][0]}')"}
{"instruction":"Generate a program to process natural language data using Python.","input":"The data contains reviews about movies.","output":"import nltk\nfrom nltk.tokenize import word_tokenize\n\n# create a function to pre-process natural language data \ndef process_data(data): \n    # tokenize the data \n    tokens = word_tokenize(data) \n  \n    # initialize the stopwords list \n    stopwords = list(nltk.corpus.stopwords.words(\"english\")) \n  \n    # create a new list for storing the filtered data \n    filtered_data = []   \n  \n    # go through each word     \n    for word in tokens: \n        # check if word is not in the stopwords list\n        if word not in stopwords: \n            filtered_data.append(word) \n  \n    # return the filtered list \n    return filtered_data\n\n# example data \ndata = \"This movie had an amazing plot and great cinematography.\"\n\n# print the processed data \nprint(process_data(data))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program to process natural language data using Python.\n\n### Input:\nThe data contains reviews about movies.\n\n### Output:\nimport nltk\nfrom nltk.tokenize import word_tokenize\n\n# create a function to pre-process natural language data \ndef process_data(data): \n    # tokenize the data \n    tokens = word_tokenize(data) \n  \n    # initialize the stopwords list \n    stopwords = list(nltk.corpus.stopwords.words(\"english\")) \n  \n    # create a new list for storing the filtered data \n    filtered_data = []   \n  \n    # go through each word     \n    for word in tokens: \n        # check if word is not in the stopwords list\n        if word not in stopwords: \n            filtered_data.append(word) \n  \n    # return the filtered list \n    return filtered_data\n\n# example data \ndata = \"This movie had an amazing plot and great cinematography.\"\n\n# print the processed data \nprint(process_data(data))"}
{"instruction":"Create a Python program to validate an entered password according to following criteria:\n\n1. Minimum 8 characters \n2. At least 1 uppercase letter \n3. At least 1 lowercase letter \n4. At least 1 number","input":"","output":"import re\n\ndef validate_password(password):\n    # password should be at least 8 characters\n    if len(password) < 8:\n        return False\n \n    # password should have at least one number\n    if re.search('[0-9]', password) is None:\n        return False\n \n    # password should have at least one uppercase\n    if re.search('[A-Z]', password) is None:\n        return False\n \n    # password should have at least one lowercase\n    if re.search('[a-z]', password) is None:\n        return False\n \n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to validate an entered password according to following criteria:\n\n1. Minimum 8 characters \n2. At least 1 uppercase letter \n3. At least 1 lowercase letter \n4. At least 1 number\n\n### Input:\n\n\n### Output:\nimport re\n\ndef validate_password(password):\n    # password should be at least 8 characters\n    if len(password) < 8:\n        return False\n \n    # password should have at least one number\n    if re.search('[0-9]', password) is None:\n        return False\n \n    # password should have at least one uppercase\n    if re.search('[A-Z]', password) is None:\n        return False\n \n    # password should have at least one lowercase\n    if re.search('[a-z]', password) is None:\n        return False\n \n    return True"}
{"instruction":"Write a python program to use an API and process the results.","input":"","output":"import requests\n\nurl = 'https:\/\/api.example.com\/xyz'\n\n# Make a request to the API\nresp = requests.get(url)\n\n# Process the response\ndata = resp.json()\n\n# Do stuff with the response\nfor item in data:\n\tprint(item)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to use an API and process the results.\n\n### Input:\n\n\n### Output:\nimport requests\n\nurl = 'https:\/\/api.example.com\/xyz'\n\n# Make a request to the API\nresp = requests.get(url)\n\n# Process the response\ndata = resp.json()\n\n# Do stuff with the response\nfor item in data:\n\tprint(item)"}
{"instruction":"Build a basic calculator in Python to support addition, subtraction, multiplication, and division.","input":"","output":"def calculator(operation, num1, num2): \n    if operation == 'add': \n        return num1+num2 \n    elif operation == 'subtract': \n        return num1-num2 \n    elif operation == 'multiply': \n        return num1*num2 \n    elif operation == 'divide': \n        return num1\/\/num2 \n    else: \n        print(\"Invalid operation\")\n        return","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a basic calculator in Python to support addition, subtraction, multiplication, and division.\n\n### Input:\n\n\n### Output:\ndef calculator(operation, num1, num2): \n    if operation == 'add': \n        return num1+num2 \n    elif operation == 'subtract': \n        return num1-num2 \n    elif operation == 'multiply': \n        return num1*num2 \n    elif operation == 'divide': \n        return num1\/\/num2 \n    else: \n        print(\"Invalid operation\")\n        return"}
{"instruction":"Given a list of strings, write a python program to sort the list alphabetically and print it.","input":"strings = [\"ada\", \"javascript\", \"c++\", \"python\"]","output":"strings = [\"ada\", \"javascript\", \"c++\", \"python\"]\n\nstrings.sort()\n\nprint(strings)\n# Output: ['ada', 'c++', 'javascript', 'python']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of strings, write a python program to sort the list alphabetically and print it.\n\n### Input:\nstrings = [\"ada\", \"javascript\", \"c++\", \"python\"]\n\n### Output:\nstrings = [\"ada\", \"javascript\", \"c++\", \"python\"]\n\nstrings.sort()\n\nprint(strings)\n# Output: ['ada', 'c++', 'javascript', 'python']"}
{"instruction":"Construct a Python script for finding the second smallest element in a given list.","input":"","output":"def secondSmallestElement(lst): \n    min1 = min(lst[0], lst[1]); \n    min2 = max(lst[0], lst[1]); \n   \n    for i in range(2, len(lst)): \n        if lst[i] < min1: \n            min2 = min1; \n            min1 = lst[i]; \n   \n    return min2;","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python script for finding the second smallest element in a given list.\n\n### Input:\n\n\n### Output:\ndef secondSmallestElement(lst): \n    min1 = min(lst[0], lst[1]); \n    min2 = max(lst[0], lst[1]); \n   \n    for i in range(2, len(lst)): \n        if lst[i] < min1: \n            min2 = min1; \n            min1 = lst[i]; \n   \n    return min2;"}
{"instruction":"Develop a Python function to calculate the maximum, minimum and average of a given list.","input":"numbers = [3, 4, 5, 6]","output":"def calculate_stats(numbers):\n    maximum = max(numbers)\n    minimum = min(numbers)\n    average = sum(numbers)\/len(numbers)\n    return (maximum, minimum, average)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function to calculate the maximum, minimum and average of a given list.\n\n### Input:\nnumbers = [3, 4, 5, 6]\n\n### Output:\ndef calculate_stats(numbers):\n    maximum = max(numbers)\n    minimum = min(numbers)\n    average = sum(numbers)\/len(numbers)\n    return (maximum, minimum, average)"}
{"instruction":"Create a function in Python that takes in a dictionary and returns a list of all the values.","input":"my_dictionary = {\n  \"a\": 1, \n  \"b\": 2,\n  \"c\": 3\n}","output":"def get_values(dictionary):\n    \"\"\"\n    Take in a dictionary and return a list of all the values\n    \"\"\"\n\n    # Create empty list\n    values = []\n    \n    # Iterate through dictionary\n    for key in dictionary:\n        # Add value to list\n        values.append(dictionary[key])\n    \n    # Return list\n    return values \n\nif __name__ == '__main__':\n    res = get_values(my_dictionary)\n    print(res)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes in a dictionary and returns a list of all the values.\n\n### Input:\nmy_dictionary = {\n  \"a\": 1, \n  \"b\": 2,\n  \"c\": 3\n}\n\n### Output:\ndef get_values(dictionary):\n    \"\"\"\n    Take in a dictionary and return a list of all the values\n    \"\"\"\n\n    # Create empty list\n    values = []\n    \n    # Iterate through dictionary\n    for key in dictionary:\n        # Add value to list\n        values.append(dictionary[key])\n    \n    # Return list\n    return values \n\nif __name__ == '__main__':\n    res = get_values(my_dictionary)\n    print(res)"}
{"instruction":"Create a program to implement a selection sort in Python.","input":"[5, 3, 2, 4, 1]","output":"def selection_sort(arr):\n    n = len(arr)\n    for i in range(n-1):\n        min_index = i\n        for j in range(i+1, n):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to implement a selection sort in Python.\n\n### Input:\n[5, 3, 2, 4, 1]\n\n### Output:\ndef selection_sort(arr):\n    n = len(arr)\n    for i in range(n-1):\n        min_index = i\n        for j in range(i+1, n):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr"}
{"instruction":"Edit the following Python program to make it run without any syntax errors.","input":"def sum(alist)\n    total 0\n    for i in range alist\n        total += i\n    return total","output":"def sum(alist):\n    total = 0\n    for i in alist:\n        total += i\n    return total","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python program to make it run without any syntax errors.\n\n### Input:\ndef sum(alist)\n    total 0\n    for i in range alist\n        total += i\n    return total\n\n### Output:\ndef sum(alist):\n    total = 0\n    for i in alist:\n        total += i\n    return total"}
{"instruction":"Write a Python Program to create a list of all the words in a given string and its frequency.","input":"Sample string = \"hello world, this is a test string\"","output":"def word_frequency(string): \n    freq = {} \n    for word in string.split(): \n        if word in freq: \n            freq[word] += 1\n        else: \n            freq[word] = 1\n  \n    for key, value in freq.items(): \n        print(\"% s : % d\"%(key, value)) \n  \n# Driver program \nif __name__ == \"__main__\": \n    string = \"hello world, this is a test string\"\n    word_frequency(string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python Program to create a list of all the words in a given string and its frequency.\n\n### Input:\nSample string = \"hello world, this is a test string\"\n\n### Output:\ndef word_frequency(string): \n    freq = {} \n    for word in string.split(): \n        if word in freq: \n            freq[word] += 1\n        else: \n            freq[word] = 1\n  \n    for key, value in freq.items(): \n        print(\"% s : % d\"%(key, value)) \n  \n# Driver program \nif __name__ == \"__main__\": \n    string = \"hello world, this is a test string\"\n    word_frequency(string)"}
{"instruction":"Create a simple web server using Flask in Python.","input":"Not applicable","output":"from flask import Flask \n\napp = Flask(__name__) \n\n@app.route('\/') \ndef hello(): \n  return 'Hello World!'\n\nif __name__ == '__main__': \n    app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple web server using Flask in Python.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask \n\napp = Flask(__name__) \n\n@app.route('\/') \ndef hello(): \n  return 'Hello World!'\n\nif __name__ == '__main__': \n    app.run()"}
{"instruction":"Create a Python script using the twitter-text-python library that takes a tweet as input and returns the text of the tweet with all the hashtags and URLs converted to their original versions.","input":"Input tweet: \"Such a great #day today! Check out this link: http:\/\/example.com #cool\"","output":"import twitter_text\n\ntweet_text = 'Such a great #day today! Check out this link: http:\/\/example.com #cool'\n\nparsed_tweet = twitter_text.Parser(tweet_text).parse()\n\n# Print the plain text of the tweet\nprint(parsed_tweet.plain_text)\n\n# Output: Such a great day today! Check out this link: http:\/\/example.com cool","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script using the twitter-text-python library that takes a tweet as input and returns the text of the tweet with all the hashtags and URLs converted to their original versions.\n\n### Input:\nInput tweet: \"Such a great #day today! Check out this link: http:\/\/example.com #cool\"\n\n### Output:\nimport twitter_text\n\ntweet_text = 'Such a great #day today! Check out this link: http:\/\/example.com #cool'\n\nparsed_tweet = twitter_text.Parser(tweet_text).parse()\n\n# Print the plain text of the tweet\nprint(parsed_tweet.plain_text)\n\n# Output: Such a great day today! Check out this link: http:\/\/example.com cool"}
{"instruction":"Create a python script to visualize the distribution of values in a numpy array","input":"numpy array [1, 2, 3, 4, 5, 6]","output":"import matplotlib.pyplot as plt\nimport numpy as np\n \narr = np.array([1,2,3,4,5,6])\n \nplt.hist(arr)\nplt.title(\"Distribution of values in the given array\")\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to visualize the distribution of values in a numpy array\n\n### Input:\nnumpy array [1, 2, 3, 4, 5, 6]\n\n### Output:\nimport matplotlib.pyplot as plt\nimport numpy as np\n \narr = np.array([1,2,3,4,5,6])\n \nplt.hist(arr)\nplt.title(\"Distribution of values in the given array\")\nplt.show()"}
{"instruction":"How can you write a function in Python to pivot a data frame with 2 columns?","input":"Data frame:\n  A  B\n1 a  b\n2 c  d","output":"import pandas as pd \n  \ndef pivot_dataframe(df): \n    df_pivot = df.pivot(index = 'A', columns ='B') \n    return df_pivot\n\ndf = pd.DataFrame({'A':{1:'a',2:'c'}, \n                   'B':{1:'b',2:'d'} \n                  }) \n\nprint(pivot_dataframe(df)) \n# Output \n   B  \nA     b  d\n  a  c","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow can you write a function in Python to pivot a data frame with 2 columns?\n\n### Input:\nData frame:\n  A  B\n1 a  b\n2 c  d\n\n### Output:\nimport pandas as pd \n  \ndef pivot_dataframe(df): \n    df_pivot = df.pivot(index = 'A', columns ='B') \n    return df_pivot\n\ndf = pd.DataFrame({'A':{1:'a',2:'c'}, \n                   'B':{1:'b',2:'d'} \n                  }) \n\nprint(pivot_dataframe(df)) \n# Output \n   B  \nA     b  d\n  a  c"}
{"instruction":"Create an algorithm to check for the sum of two numbers in an array. Given an array of integers in random order, write a Python program to check whether there are two numbers present whose sum is equal to a given number.","input":"arr = [20, 5, 12, 3, 9, 11]; \nsum = 21","output":"def check_sum(arr, sum): \n for i in range(len(arr)-1): \n  for j in range(i+1, len(arr)): \n   if arr[i] + arr[j] == sum: \n    return True\n\n return False\n\narr = [20, 5, 12, 3, 9, 11] \nsum = 21\n\nif check_sum(arr, sum): \n print(\"Sum Found\") \nelse: \n print(\"Sum Not Found\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to check for the sum of two numbers in an array. Given an array of integers in random order, write a Python program to check whether there are two numbers present whose sum is equal to a given number.\n\n### Input:\narr = [20, 5, 12, 3, 9, 11]; \nsum = 21\n\n### Output:\ndef check_sum(arr, sum): \n for i in range(len(arr)-1): \n  for j in range(i+1, len(arr)): \n   if arr[i] + arr[j] == sum: \n    return True\n\n return False\n\narr = [20, 5, 12, 3, 9, 11] \nsum = 21\n\nif check_sum(arr, sum): \n print(\"Sum Found\") \nelse: \n print(\"Sum Not Found\")"}
{"instruction":"Create a Python implementation of the bubble sort algorithm.","input":"[12, 11, 13, 5, 6]","output":"def bubble_sort(arr):\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\nresult = bubble_sort([12, 11, 13, 5, 6])\nprint(result) # Output: [5, 6, 11, 12, 13]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python implementation of the bubble sort algorithm.\n\n### Input:\n[12, 11, 13, 5, 6]\n\n### Output:\ndef bubble_sort(arr):\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\nresult = bubble_sort([12, 11, 13, 5, 6])\nprint(result) # Output: [5, 6, 11, 12, 13]"}
{"instruction":"Generate a Python code snippet to sum all numbers from a list of integers.","input":"[2, 7, 8, 4, 5]","output":"sum = 0\nfor num in [2, 7, 8, 4, 5]:\n    sum += num\nprint(sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code snippet to sum all numbers from a list of integers.\n\n### Input:\n[2, 7, 8, 4, 5]\n\n### Output:\nsum = 0\nfor num in [2, 7, 8, 4, 5]:\n    sum += num\nprint(sum)"}
{"instruction":"Develop a REST API in Python that will allow the user to retrieve a list of network devices based on a specific IP address range.","input":"\"192.168.1.0\/24\"","output":"from flask import Flask, request, jsonify\nfrom netaddr import IPNetwork\n\napp = Flask(__name__)\n\n@app.route('\/devices', methods=['GET'])\ndef get_devices():\n ip_range = request.args.get('ip_range')\n ip_network = IPNetwork(ip_range)\n\n# Query your data store to retrieve all devices in the given IP range\n devices = [\n {'ip_address': '192.168.1.5', 'vendor': 'Cisco'},\n {'ip_address': '192.168.1.6', 'vendor': 'Huawei'},\n {'ip_address': '192.168.1.7', 'vendor': 'Juniper'},\n {'ip_address': '192.168.1.8', 'vendor': 'HP'}\n ]\n\n# Filter the list of devices to those in the specified IP range\n devices = [device for device in devices if IPNetwork(device['ip_address']) in ip_network]\n return jsonify(devices)\n\nif __name__ == '__main__':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a REST API in Python that will allow the user to retrieve a list of network devices based on a specific IP address range.\n\n### Input:\n\"192.168.1.0\/24\"\n\n### Output:\nfrom flask import Flask, request, jsonify\nfrom netaddr import IPNetwork\n\napp = Flask(__name__)\n\n@app.route('\/devices', methods=['GET'])\ndef get_devices():\n ip_range = request.args.get('ip_range')\n ip_network = IPNetwork(ip_range)\n\n# Query your data store to retrieve all devices in the given IP range\n devices = [\n {'ip_address': '192.168.1.5', 'vendor': 'Cisco'},\n {'ip_address': '192.168.1.6', 'vendor': 'Huawei'},\n {'ip_address': '192.168.1.7', 'vendor': 'Juniper'},\n {'ip_address': '192.168.1.8', 'vendor': 'HP'}\n ]\n\n# Filter the list of devices to those in the specified IP range\n devices = [device for device in devices if IPNetwork(device['ip_address']) in ip_network]\n return jsonify(devices)\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"instruction":"Generate a Python script for a query to fetch data from a given MySQL table.","input":"Table Name: Products\nColumns: product_id, name, price","output":"import mysql.connector\n\ndb = mysql.connector.connect(\n host=\"localhost\",\n user=\"root\",\n passwd=\"password\",\n database=\"dbname\"\n)\n\nmycursor = db.cursor()\n\nsql = \"SELECT product_id, name, price FROM Products\"\n\nmycursor.execute(sql)\n\nmyresult = mycursor.fetchall()\n\nfor row in myresult:\n  print(row)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script for a query to fetch data from a given MySQL table.\n\n### Input:\nTable Name: Products\nColumns: product_id, name, price\n\n### Output:\nimport mysql.connector\n\ndb = mysql.connector.connect(\n host=\"localhost\",\n user=\"root\",\n passwd=\"password\",\n database=\"dbname\"\n)\n\nmycursor = db.cursor()\n\nsql = \"SELECT product_id, name, price FROM Products\"\n\nmycursor.execute(sql)\n\nmyresult = mycursor.fetchall()\n\nfor row in myresult:\n  print(row)"}
{"instruction":"Write a Python script to print the maximum number from a list.","input":"","output":"def find_max(list):\n    max_num = list[0]\n    for i in list:\n        if i > max_num: \n            max_num = i\n    return max_num","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to print the maximum number from a list.\n\n### Input:\n\n\n### Output:\ndef find_max(list):\n    max_num = list[0]\n    for i in list:\n        if i > max_num: \n            max_num = i\n    return max_num"}
{"instruction":"Edit the following Python function by adding two functions that it does not currently contain.","input":"def printMenu():\n    print(\"1. Print the restaurant's name.\") \n    print(\"2. Print the restaurant's address.\") \n    print(\"3. Print the list of menu items.\")","output":"def printMenu():\n    print(\"1. Print the restaurant's name.\") \n    print(\"2. Print the restaurant's address.\") \n    print(\"3. Print the list of menu items.\")\n    print(\"4. Print the restaurant's reviews.\")\n    print(\"5. Print the restaurant's ratings.\")\n\ndef printName(name):\n    print(\"The restaurant's name is \" + name)\n\ndef printAddress(street, city, state, zip_code):\n    print(\"The restaurant's address is \" + street + \", \" + city + \", \" + state + \" \" + zip_code)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python function by adding two functions that it does not currently contain.\n\n### Input:\ndef printMenu():\n    print(\"1. Print the restaurant's name.\") \n    print(\"2. Print the restaurant's address.\") \n    print(\"3. Print the list of menu items.\")\n\n### Output:\ndef printMenu():\n    print(\"1. Print the restaurant's name.\") \n    print(\"2. Print the restaurant's address.\") \n    print(\"3. Print the list of menu items.\")\n    print(\"4. Print the restaurant's reviews.\")\n    print(\"5. Print the restaurant's ratings.\")\n\ndef printName(name):\n    print(\"The restaurant's name is \" + name)\n\ndef printAddress(street, city, state, zip_code):\n    print(\"The restaurant's address is \" + street + \", \" + city + \", \" + state + \" \" + zip_code)"}
{"instruction":"Write a Python program to optimize a dataset for predictive modeling.","input":"The dataset contains features such as age, gender, country, and height.","output":"import pandas as pd\n\n# Read in the dataset\ndf = pd.read_csv('dataset.csv')\n\n# basic data cleaning\ndf = df.dropna()\n\n# Convert categorical variables to dummy variables\ndf = pd.get_dummies(df, columns=['country','gender'])\n\n# Scale the numeric variables\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\ndf[['age', 'height']] = scaler.fit_transform(df[['age','height']])\n\n# Save the optimized dataset\ndf.to_csv('optimized_dataset.csv', index=False)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize a dataset for predictive modeling.\n\n### Input:\nThe dataset contains features such as age, gender, country, and height.\n\n### Output:\nimport pandas as pd\n\n# Read in the dataset\ndf = pd.read_csv('dataset.csv')\n\n# basic data cleaning\ndf = df.dropna()\n\n# Convert categorical variables to dummy variables\ndf = pd.get_dummies(df, columns=['country','gender'])\n\n# Scale the numeric variables\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\ndf[['age', 'height']] = scaler.fit_transform(df[['age','height']])\n\n# Save the optimized dataset\ndf.to_csv('optimized_dataset.csv', index=False)"}
{"instruction":"Devise a Python code to make a pyramid of stars.","input":"","output":"def stars(n): \n    for i in range(1, n + 1): \n        for j in range(1, i + 1): \n            print(\"* \", end=\"\")  \n        print()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevise a Python code to make a pyramid of stars.\n\n### Input:\n\n\n### Output:\ndef stars(n): \n    for i in range(1, n + 1): \n        for j in range(1, i + 1): \n            print(\"* \", end=\"\")  \n        print()"}
{"instruction":"Generate a code snippet in Python that creates a RESTful API endpoint to retrieve data from a given table in a PostgreSQL database.","input":"Table Name: users\nTable Schema: (column1: int, column2: varchar(20), column3: int)","output":"import psycopg2\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\ndef get_data_from_db(table_name):\n    \n    # connect to the database\n    connection = psycopg2.connect(\n        user='username',\n        password='password',\n        host='host',\n        port='5432',\n        database='testdb'\n    )\n    cursor = connection.cursor()\n    \n    # retrieve data from the table\n    sql = f\"\"\"SELECT column1, column2, column3 FROM {table_name}\"\"\"\n    cursor.execute(sql)\n    records = cursor.fetchall()\n    \n    # close the connection\n    connection.close()\n\n    return records\n\n@app.route('\/data\/<table_name>', methods=['GET'])\ndef get_data(table_name):\n    # retrieve data from the db\n    data = get_data_from_db(table_name)\n\n    # build response\n    return jsonify({'data': data})\n\nif __name__ == '__main__':\n    app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code snippet in Python that creates a RESTful API endpoint to retrieve data from a given table in a PostgreSQL database.\n\n### Input:\nTable Name: users\nTable Schema: (column1: int, column2: varchar(20), column3: int)\n\n### Output:\nimport psycopg2\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\ndef get_data_from_db(table_name):\n    \n    # connect to the database\n    connection = psycopg2.connect(\n        user='username',\n        password='password',\n        host='host',\n        port='5432',\n        database='testdb'\n    )\n    cursor = connection.cursor()\n    \n    # retrieve data from the table\n    sql = f\"\"\"SELECT column1, column2, column3 FROM {table_name}\"\"\"\n    cursor.execute(sql)\n    records = cursor.fetchall()\n    \n    # close the connection\n    connection.close()\n\n    return records\n\n@app.route('\/data\/<table_name>', methods=['GET'])\ndef get_data(table_name):\n    # retrieve data from the db\n    data = get_data_from_db(table_name)\n\n    # build response\n    return jsonify({'data': data})\n\nif __name__ == '__main__':\n    app.run()"}
{"instruction":"Write a Python program to generate all possible permutations of a given set of elements.","input":"[1, 2, 3]","output":"def permutations(elements):\n    if len(elements) <=1:\n        yield elements\n    else:\n        for perm in permutations(elements[1:]):\n            for i in range(len(elements)):\n                yield perm[:i] + elements[0:1] + perm[i:]\n\nresult = list(permutations([1, 2, 3]))\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate all possible permutations of a given set of elements.\n\n### Input:\n[1, 2, 3]\n\n### Output:\ndef permutations(elements):\n    if len(elements) <=1:\n        yield elements\n    else:\n        for perm in permutations(elements[1:]):\n            for i in range(len(elements)):\n                yield perm[:i] + elements[0:1] + perm[i:]\n\nresult = list(permutations([1, 2, 3]))\nprint(result)"}
{"instruction":"Implement a function in Python that takes a number as an argument and returns true if the number is even, false otherwise.","input":"","output":"def is_even(number):\n    if (number % 2 == 0):\n        return True\n    else:\n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that takes a number as an argument and returns true if the number is even, false otherwise.\n\n### Input:\n\n\n### Output:\ndef is_even(number):\n    if (number % 2 == 0):\n        return True\n    else:\n        return False"}
{"instruction":"Develop a greedy strategy in Python to find the minimum total cost of connecting n given points on a 2D plane using minimum number of lines.","input":"Not applicable","output":"def min_cost(points):\n    points.sort()  # sort the points by their x-coordinate\n    total_cost = 0  # initial cost\n    for i in range(len(points)-1):\n        cost = abs(points[i+1][1] - points[i][1])  # calculate the cost of connecting two successive points\n        total_cost += cost  # add to the total cost\n    return total_cost","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a greedy strategy in Python to find the minimum total cost of connecting n given points on a 2D plane using minimum number of lines.\n\n### Input:\nNot applicable\n\n### Output:\ndef min_cost(points):\n    points.sort()  # sort the points by their x-coordinate\n    total_cost = 0  # initial cost\n    for i in range(len(points)-1):\n        cost = abs(points[i+1][1] - points[i][1])  # calculate the cost of connecting two successive points\n        total_cost += cost  # add to the total cost\n    return total_cost"}
{"instruction":"Rewrite the given Java code into Python.","input":"Int n = 5\nfor (int i = 1; i <= n; i++) {\n System.out.print(i + \" \");\n}","output":"n = 5\nfor i in range(1, n+1):\n print(i, end=' ')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the given Java code into Python.\n\n### Input:\nInt n = 5\nfor (int i = 1; i <= n; i++) {\n System.out.print(i + \" \");\n}\n\n### Output:\nn = 5\nfor i in range(1, n+1):\n print(i, end=' ')"}
{"instruction":"Create a Python class for a polygon shape.","input":"","output":"class Polygon:\n    def __init__(self, sides):\n        self.sides = sides\n    \n    def perimeter(self):\n        perimeter = 0\n        for side in self.sides:\n            perimeter += side\n        return perimeter","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for a polygon shape.\n\n### Input:\n\n\n### Output:\nclass Polygon:\n    def __init__(self, sides):\n        self.sides = sides\n    \n    def perimeter(self):\n        perimeter = 0\n        for side in self.sides:\n            perimeter += side\n        return perimeter"}
{"instruction":"Generate a Python program for finding the most common element in a given list.","input":"data=[1, 1, 3, 5, 8, 8]","output":"data=[1, 1, 3, 5, 8, 8]\n\n# create empty dictionary to store the counts of each element\nelement_counts={}\n\n# loop through the list\nfor element in data:\n # add value to dictionary if it does not exist, or increase count if it does exist\n element_counts[element]=element_counts.get(element, 0) + 1\n\n# find the element with the highest count\nmax_count=0\nmax_element=None\nfor element, count in element_counts.items():\n if count>max_count:\n  max_count=count\n  max_element=element\n\n# print out the result\nprint(f\"The most common element is {max_element} with {max_count} occurences\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program for finding the most common element in a given list.\n\n### Input:\ndata=[1, 1, 3, 5, 8, 8]\n\n### Output:\ndata=[1, 1, 3, 5, 8, 8]\n\n# create empty dictionary to store the counts of each element\nelement_counts={}\n\n# loop through the list\nfor element in data:\n # add value to dictionary if it does not exist, or increase count if it does exist\n element_counts[element]=element_counts.get(element, 0) + 1\n\n# find the element with the highest count\nmax_count=0\nmax_element=None\nfor element, count in element_counts.items():\n if count>max_count:\n  max_count=count\n  max_element=element\n\n# print out the result\nprint(f\"The most common element is {max_element} with {max_count} occurences\")"}
{"instruction":"Create a program to search for a substring in a string and return the starting position of the substring.","input":"String: \"Python is powerful & fun\"\nSubstring: \"pow\"","output":"string = \"Python is powerful & fun\"\nsubstring = \"pow\"\n \nstart_pos = string.find(substring)\nif start_pos == -1:\n    print(\"substring not found\")\nelse:\n    print(\"substring found at position:\", start_pos)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to search for a substring in a string and return the starting position of the substring.\n\n### Input:\nString: \"Python is powerful & fun\"\nSubstring: \"pow\"\n\n### Output:\nstring = \"Python is powerful & fun\"\nsubstring = \"pow\"\n \nstart_pos = string.find(substring)\nif start_pos == -1:\n    print(\"substring not found\")\nelse:\n    print(\"substring found at position:\", start_pos)"}
{"instruction":"Create a web scraper with Python BeautifulSoup library for gathering data from a website.","input":"Not applicable","output":"import requests\nfrom bs4 import BeautifulSoup\n\npage = requests.get('http:\/\/example.com')\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ndata = []\n\nfor item in soup.find_all('div', class_='item'):\n title = item.find('h3').get_text()\n description = item.find('p').get_text()\n \n data.append({\n 'title': title,\n 'description': description\n })\n \nprint(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper with Python BeautifulSoup library for gathering data from a website.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\npage = requests.get('http:\/\/example.com')\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ndata = []\n\nfor item in soup.find_all('div', class_='item'):\n title = item.find('h3').get_text()\n description = item.find('p').get_text()\n \n data.append({\n 'title': title,\n 'description': description\n })\n \nprint(data)"}
{"instruction":"Create a program in Python to select the data from a list of items.","input":"","output":"def select_data(my_list):\n    result = []\n    for item in my_list:\n        if item['selected']:\n            result.append(item)\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to select the data from a list of items.\n\n### Input:\n\n\n### Output:\ndef select_data(my_list):\n    result = []\n    for item in my_list:\n        if item['selected']:\n            result.append(item)\n    return result"}
{"instruction":"Construct a Python script to generate permutations of a given string.","input":"","output":"def generate_permutations(string):\n    # if string is of length 0 or 1\n    if len(string) == 0 or len(string) == 1:\n        return [string]\n\n    res = list()\n    # traverse the string\n    for i in range(len(string)):\n        # remove the character at that index\n        char = string[i]\n        remaining_string = string[:i] + string[i+1:]\n        \n        # recursive call for generating permutations of string\n        for p in generate_permutations(remaining_string):\n            res.append(char + p)\n\n    # return the generated permutations\n    return res","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python script to generate permutations of a given string.\n\n### Input:\n\n\n### Output:\ndef generate_permutations(string):\n    # if string is of length 0 or 1\n    if len(string) == 0 or len(string) == 1:\n        return [string]\n\n    res = list()\n    # traverse the string\n    for i in range(len(string)):\n        # remove the character at that index\n        char = string[i]\n        remaining_string = string[:i] + string[i+1:]\n        \n        # recursive call for generating permutations of string\n        for p in generate_permutations(remaining_string):\n            res.append(char + p)\n\n    # return the generated permutations\n    return res"}
{"instruction":"Create a Python class that stores information about a person's function.","input":"","output":"class Person:\n \n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n \n    def getInformation(self):\n        return \"Name: \"+ self.name + \", Age: \" + str(self.age)\n\nperson = Person(\"John\", 19)\nprint(person.getInformation())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that stores information about a person's function.\n\n### Input:\n\n\n### Output:\nclass Person:\n \n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n \n    def getInformation(self):\n        return \"Name: \"+ self.name + \", Age: \" + str(self.age)\n\nperson = Person(\"John\", 19)\nprint(person.getInformation())"}
{"instruction":"Write a Python program that takes an integer as input and check if the number is prime or not.","input":"45","output":"def is_prime(n):\n    if n < 2: \n        return False\n\n    for i in range(2, int(n**0.5) + 1):  \n        if n % i == 0: \n            return False\n\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes an integer as input and check if the number is prime or not.\n\n### Input:\n45\n\n### Output:\ndef is_prime(n):\n    if n < 2: \n        return False\n\n    for i in range(2, int(n**0.5) + 1):  \n        if n % i == 0: \n            return False\n\n    return True"}
{"instruction":"Modify the Python code below to reverse the string input.","input":"string = \u201chello world\u201d","output":"string = \u201chello world\u201d \n# Reverse the string \nrev_string = \"\" \nfor char in string: \n rev_string = char + rev_string \n\n# Print the reversed string \nprint(rev_string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the Python code below to reverse the string input.\n\n### Input:\nstring = \u201chello world\u201d\n\n### Output:\nstring = \u201chello world\u201d \n# Reverse the string \nrev_string = \"\" \nfor char in string: \n rev_string = char + rev_string \n\n# Print the reversed string \nprint(rev_string)"}
{"instruction":"Write a Python program to split a string on the first occurrence of a given substring.","input":"string = \"www.example.com\"\nsubstring = \".\"","output":"string_list = string.split(substring,1)\nprint(string_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to split a string on the first occurrence of a given substring.\n\n### Input:\nstring = \"www.example.com\"\nsubstring = \".\"\n\n### Output:\nstring_list = string.split(substring,1)\nprint(string_list)"}
{"instruction":"Write a python program to generate a random letter of the alphabet.","input":"","output":"import random \n  \n# create a list of all the letters in the alphabet\nalphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \n             \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \n             \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \n             \"y\", \"z\"] \n  \n# generate a random letter\nrandom_letter = random.choice(alphabet)\nprint(random_letter)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to generate a random letter of the alphabet.\n\n### Input:\n\n\n### Output:\nimport random \n  \n# create a list of all the letters in the alphabet\nalphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \n             \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \n             \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \n             \"y\", \"z\"] \n  \n# generate a random letter\nrandom_letter = random.choice(alphabet)\nprint(random_letter)"}
{"instruction":"Create a program in Python to print all numbers that are divisible by 4 but not by 4.","input":"","output":"for i in range(1, 101):\n  if (i % 4 == 0) and (i % 2 != 0):\n    print(i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to print all numbers that are divisible by 4 but not by 4.\n\n### Input:\n\n\n### Output:\nfor i in range(1, 101):\n  if (i % 4 == 0) and (i % 2 != 0):\n    print(i)"}
{"instruction":"Write a script in Python that asks the user to input a sentence, then prints the sentence in reverse.","input":"","output":"sentence = input(\"Please enter a sentence: \")\n\nrev_sentence = sentence[::-1]\n\nprint(rev_sentence)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script in Python that asks the user to input a sentence, then prints the sentence in reverse.\n\n### Input:\n\n\n### Output:\nsentence = input(\"Please enter a sentence: \")\n\nrev_sentence = sentence[::-1]\n\nprint(rev_sentence)"}
{"instruction":"Produce a machine learning algorithm in Python that can identify digits from 0-9 in MNIST dataset.","input":"","output":"from sklearn.neighbors import KNeighborsClassifier\n\n# Load the data\nfrom sklearn.datasets import fetch_openml\nX, y = fetch_openml('mnist_784', version=1, return_X_y=True)\n\n# Create the model and train it\nmodel = KNeighborsClassifier(n_neighbors=3)\nmodel.fit(X, y)\n\n# Test the model\nprint(model.score(X, y))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a machine learning algorithm in Python that can identify digits from 0-9 in MNIST dataset.\n\n### Input:\n\n\n### Output:\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Load the data\nfrom sklearn.datasets import fetch_openml\nX, y = fetch_openml('mnist_784', version=1, return_X_y=True)\n\n# Create the model and train it\nmodel = KNeighborsClassifier(n_neighbors=3)\nmodel.fit(X, y)\n\n# Test the model\nprint(model.score(X, y))"}
{"instruction":"Generate a Python script that contains a function with two parameters and returns the sum of the two parameters.","input":"Not applicable","output":"def add(x, y): \n \"\"\"Returns the sum of x and y\"\"\"\n return x + y","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script that contains a function with two parameters and returns the sum of the two parameters.\n\n### Input:\nNot applicable\n\n### Output:\ndef add(x, y): \n \"\"\"Returns the sum of x and y\"\"\"\n return x + y"}
{"instruction":"Write a Python program to check whether an element exists within a given list.","input":"list_a = [1, 2, 3, 4]\ntarget = 3","output":"def is_element_in_list(list_a, target):\n return target in list_a\n\nis_element_in_list(list_a, target)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to check whether an element exists within a given list.\n\n### Input:\nlist_a = [1, 2, 3, 4]\ntarget = 3\n\n### Output:\ndef is_element_in_list(list_a, target):\n return target in list_a\n\nis_element_in_list(list_a, target)"}
{"instruction":"Create an algorithm in Python 3 to identify the characters in a given string.","input":"\"Abe erotically jitters\"","output":"def identify_characters(s): \n    characters = []\n        \n    for char in s:\n        if char not in characters:\n            characters.append(char)\n        \n    return characters\n \nprint(identify_characters('Abe erotically jitters')) #['A', 'b', 'e', ' ', 'r', 'o', 't', 'i', 'c', 'a', 'l', 'y', 'j', 'i', 't', 's']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python 3 to identify the characters in a given string.\n\n### Input:\n\"Abe erotically jitters\"\n\n### Output:\ndef identify_characters(s): \n    characters = []\n        \n    for char in s:\n        if char not in characters:\n            characters.append(char)\n        \n    return characters\n \nprint(identify_characters('Abe erotically jitters')) #['A', 'b', 'e', ' ', 'r', 'o', 't', 'i', 'c', 'a', 'l', 'y', 'j', 'i', 't', 's']"}
{"instruction":"Generate code to implement a pre-order tree traversal in Python.","input":"Not applicable","output":"def preOrderTraversal(root):\n if root is None:\n return\n\n print(root.data)\n preOrderTraversal(root.left)\n preOrderTraversal(root.right)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code to implement a pre-order tree traversal in Python.\n\n### Input:\nNot applicable\n\n### Output:\ndef preOrderTraversal(root):\n if root is None:\n return\n\n print(root.data)\n preOrderTraversal(root.left)\n preOrderTraversal(root.right)"}
{"instruction":"Write a Python program to optimize the following code to reduce its time complexity.","input":"def isPrime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True","output":"def isPrime(n):\n  \"\"\"\nThis function takes a number and checks if it is a prime number\n  \n  Args:\n    n: an integer\n\n  Returns:\n    true if number is prime, false otherwise\n  \"\"\"\n  # Edge case: 1 is not a prime number\n  if n <= 1:\n    return False\n\n  # Check from 2 to the square root of number\n  for i in range(2, int(math.sqrt(n))+1):\n    # If number is divisible by i, it is not a prime number\n    if (n % i == 0):\n      return False\n\n  # If not divisible by any number, it is a prime number\n  return True\n\n# Call the function with the given input\nprint(isPrime(n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize the following code to reduce its time complexity.\n\n### Input:\ndef isPrime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n### Output:\ndef isPrime(n):\n  \"\"\"\nThis function takes a number and checks if it is a prime number\n  \n  Args:\n    n: an integer\n\n  Returns:\n    true if number is prime, false otherwise\n  \"\"\"\n  # Edge case: 1 is not a prime number\n  if n <= 1:\n    return False\n\n  # Check from 2 to the square root of number\n  for i in range(2, int(math.sqrt(n))+1):\n    # If number is divisible by i, it is not a prime number\n    if (n % i == 0):\n      return False\n\n  # If not divisible by any number, it is a prime number\n  return True\n\n# Call the function with the given input\nprint(isPrime(n))"}
{"instruction":"Design an algorithm in Python that takes a list of integers and returns a new list of integers such that the difference between every two adjacent elements in the new list is greater than 3.","input":"[1, 2, 4, 5, 8, 14, 15]","output":"def solution(list): \n    result = [] \n  \n    for i in list: \n        if len(result) == 0: \n            result.append(i) \n        elif i - result[-1] > 3: \n            result.append(i) \n  \n    return result \n  \nlist = [1, 2, 4, 5, 8, 14, 15]\nprint(solution(list)) \n# Result: [1, 4, 8, 14]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that takes a list of integers and returns a new list of integers such that the difference between every two adjacent elements in the new list is greater than 3.\n\n### Input:\n[1, 2, 4, 5, 8, 14, 15]\n\n### Output:\ndef solution(list): \n    result = [] \n  \n    for i in list: \n        if len(result) == 0: \n            result.append(i) \n        elif i - result[-1] > 3: \n            result.append(i) \n  \n    return result \n  \nlist = [1, 2, 4, 5, 8, 14, 15]\nprint(solution(list)) \n# Result: [1, 4, 8, 14]"}
{"instruction":"Modify a program in Python to reverse a linked-list with a recursive algorithm in constant space.","input":"Linked-list: 1 - 2 - 3 - 4","output":"# Node class \nclass Node: \n  \n    # Constructor to initialize the node object \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \n# Linked List class contains a Node object \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n  \n    # A recursive function to reverse linked list \n    def reverseUtil(self, curr, prev): \n          \n        # If last node mark it head \n        if curr.next is None : \n            self.head = curr  \n              \n            # Update next to prev node \n            curr.next = prev \n            return \n          \n        # Save curr.next node for recursive call \n        next = curr.next\n  \n        # And update next \n        curr.next = prev \n          \n        self.reverseUtil(next, curr)  \n  \n  \n    # This function mainly calls reverseUtil() \n    # with previous as None \n    def reverse(self): \n        if self.head is None: \n            return \n        self.reverseUtil(self.head, None) \n\n# Create a list \nllist = LinkedList() \n  \n# Create first node\nllist.head = Node(1) \n  \n# Create second node\nsecond = Node(2)  \n  \n# Create third node\nthird = Node(3) \n  \n# Create fourth node\nfourth = Node(4) \n\n# Now combine the four nodes \nllist.head.next = second; # Link first node with second  \nsecond.next = third; # Link second node with the third node \nthird.next = fourth; # Link third node with the fourth node \n\n# Reverse the LinkedList \nllist.reverse()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify a program in Python to reverse a linked-list with a recursive algorithm in constant space.\n\n### Input:\nLinked-list: 1 - 2 - 3 - 4\n\n### Output:\n# Node class \nclass Node: \n  \n    # Constructor to initialize the node object \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \n# Linked List class contains a Node object \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n  \n    # A recursive function to reverse linked list \n    def reverseUtil(self, curr, prev): \n          \n        # If last node mark it head \n        if curr.next is None : \n            self.head = curr  \n              \n            # Update next to prev node \n            curr.next = prev \n            return \n          \n        # Save curr.next node for recursive call \n        next = curr.next\n  \n        # And update next \n        curr.next = prev \n          \n        self.reverseUtil(next, curr)  \n  \n  \n    # This function mainly calls reverseUtil() \n    # with previous as None \n    def reverse(self): \n        if self.head is None: \n            return \n        self.reverseUtil(self.head, None) \n\n# Create a list \nllist = LinkedList() \n  \n# Create first node\nllist.head = Node(1) \n  \n# Create second node\nsecond = Node(2)  \n  \n# Create third node\nthird = Node(3) \n  \n# Create fourth node\nfourth = Node(4) \n\n# Now combine the four nodes \nllist.head.next = second; # Link first node with second  \nsecond.next = third; # Link second node with the third node \nthird.next = fourth; # Link third node with the fourth node \n\n# Reverse the LinkedList \nllist.reverse()"}
{"instruction":"Convert a given Python program to a C# program.","input":"def power(x, y):\n    if y == 0:\n        return 1\n    else:\n        return x * power(x, y - 1)","output":"public int Power(int x, int y)\n{\n    if (y == 0)\n    {\n        return 1;\n    }\n    else\n    {\n        return x * Power(x, y - 1);\n    }\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a given Python program to a C# program.\n\n### Input:\ndef power(x, y):\n    if y == 0:\n        return 1\n    else:\n        return x * power(x, y - 1)\n\n### Output:\npublic int Power(int x, int y)\n{\n    if (y == 0)\n    {\n        return 1;\n    }\n    else\n    {\n        return x * Power(x, y - 1);\n    }\n}"}
{"instruction":"Create a Python code snippet to return the index of a given item from a list.","input":"list_of_numbers = [3, 6, 8, 4, 9, 2]\nitem = 6","output":"item_index = list_of_numbers.index(item)\nprint(item_index) # Prints 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code snippet to return the index of a given item from a list.\n\n### Input:\nlist_of_numbers = [3, 6, 8, 4, 9, 2]\nitem = 6\n\n### Output:\nitem_index = list_of_numbers.index(item)\nprint(item_index) # Prints 1"}
{"instruction":"Write a python code to implement a min-heap.","input":"","output":"class MinHeap:\n    def __init__(self):\n        self.heap= []\n \n    def parent(self, i):\n        return int((i - 1) \/ 2)\n \n    def insertKey(self, k):\n        self.heap.append(k)     \n        i = len(self.heap)-1\n        self.fix_up(i)\n \n    def fix_up(self, i):\n        while i != 0 and self.heap[self.parent(i)] > self.heap[i]:\n            self.heap[i], self.heap[self.parent(i)] = self.heap[self.parent(i)], self.heap[i]\n            i = self.parent(i)\n \n    def extractMin(self):\n        if len(self.heap) == 0:\n            return -1\n        min_elem = self.heap[0]\n        if len(self.heap) > 1:\n            self.heap[0] = self.heap.pop()\n            self.fix_down(0)\n        else:\n            self.heap.pop()\n        return min_elem\n \n    def fix_down(self, i):\n        left = 2*i + 1\n        right = 2*i + 2\n        min_i = i\n        if left < len(self.heap) and self.heap[min_i] > self.heap[left]:\n            min_i = left\n        if right < len(self.heap) and self.heap[min_i] > self.heap[right]:\n            min_i = right\n        if min_i != i:\n            self.heap[min_i], self.heap[i] = self.heap[i], self.heap[min_i]\n            self.fix_down(min_i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to implement a min-heap.\n\n### Input:\n\n\n### Output:\nclass MinHeap:\n    def __init__(self):\n        self.heap= []\n \n    def parent(self, i):\n        return int((i - 1) \/ 2)\n \n    def insertKey(self, k):\n        self.heap.append(k)     \n        i = len(self.heap)-1\n        self.fix_up(i)\n \n    def fix_up(self, i):\n        while i != 0 and self.heap[self.parent(i)] > self.heap[i]:\n            self.heap[i], self.heap[self.parent(i)] = self.heap[self.parent(i)], self.heap[i]\n            i = self.parent(i)\n \n    def extractMin(self):\n        if len(self.heap) == 0:\n            return -1\n        min_elem = self.heap[0]\n        if len(self.heap) > 1:\n            self.heap[0] = self.heap.pop()\n            self.fix_down(0)\n        else:\n            self.heap.pop()\n        return min_elem\n \n    def fix_down(self, i):\n        left = 2*i + 1\n        right = 2*i + 2\n        min_i = i\n        if left < len(self.heap) and self.heap[min_i] > self.heap[left]:\n            min_i = left\n        if right < len(self.heap) and self.heap[min_i] > self.heap[right]:\n            min_i = right\n        if min_i != i:\n            self.heap[min_i], self.heap[i] = self.heap[i], self.heap[min_i]\n            self.fix_down(min_i)"}
{"instruction":"This code provides a Python class called \"Provider\" that generates user agent strings for various web browsers. To use this code, import the \"Provider\" class from this module and call its methods to generate user agent strings for specific browsers.","input":"","output":"from __future__ import unicode_literals\nfrom . import BaseProvider\nfrom . import date_time\nfrom datetime import datetime\nimport random\n\n\nclass Provider(BaseProvider):\n    user_agents = ('firefox', 'chrome', 'internet_explorer', 'opera', 'safari')\n\n    windows_platform_tokens = (\n        'Windows NT 6.2', 'Windows NT 6.1', 'Windows NT 6.0', 'Windows NT 5.2', 'Windows NT 5.1',\n        'Windows NT 5.01', 'Windows NT 5.0', 'Windows NT 4.0', 'Windows 98; Win 9x 4.90',\n        'Windows 98', 'Windows 95', 'Windows CE'\n    )\n\n    linux_processors = ('i686', 'x86_64',)\n\n    mac_processors = ('Intel', 'PPC', 'U; Intel', 'U; PPC')\n\n    langs = ('en-US', 'sl-SI', 'it-IT')\n\n    @classmethod\n    def mac_processor(cls):\n        return cls.random_element(cls.mac_processors)\n\n    @classmethod\n    def linux_processor(cls):\n        return cls.random_element(cls.linux_processors)\n\n    @classmethod\n    def user_agent(cls):\n        name = cls.random_element(cls.user_agents)\n        return getattr(cls, name)()\n\n    @classmethod\n    def chrome(cls):\n        saf = str(random.randint(531, 536)) + str(random.randint(0, 2))\n\n        platforms = (\n            \"({0}) AppleWebKit\/{1} (KHTML, like Gecko) Chrome\/{2}.0.{3}.0 Safari\/{4}\".format(\n                cls.linux_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),\n            \"({0}) AppleWebKit\/{1} (KHTML, like Gecko) Chrome\/{2}.0.{3}.0 Safari\/{4}\".format(\n                cls.windows_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),\n            \"({0}) AppleWebKit\/{1} (KHTML, like Gecko) Chrome\/{2}.0.{3}.0 Safari\/{4}\".format(\n                cls.mac_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),\n        )\n\n        return 'Mozilla\/5.0 ' + cls.random_element(platforms)\n\n    @classmethod\n    def firefox(cls):\n        ver = (\n            'Gecko\/{0} Firefox\/{1}.0'.format(\n            date_time.Provider.date_time_between(datetime(2011, 1, 1)), random.randint(4, 15)),\n            'Gecko\/{0} Firefox\/3.6.{1}'.format(\n                date_time.Provider.date_time_between(datetime(2010, 1, 1)), random.randint(1, 20)),\n            'Gecko\/{0} Firefox\/3.8'.format(date_time.Provider.date_time_between(datetime(2010, 1, 1)), ),\n        )\n\n        platforms = (\n            \"({0}; {1}; rv:1.9.{2}.20) {3}\".format(\n                cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(0, 2), random.choice(ver)),\n            \"({0}; rv:1.9.{1}.20) {2}\".format(cls.linux_platform_token(), random.randint(5, 7), random.choice(ver)),\n            \"({0}; rv:1.9.{1}.20) {2}\".format(cls.mac_platform_token(), random.randint(2, 6), random.choice(ver)),\n        )\n\n        return 'Mozilla\/5.0 ' + cls.random_element(platforms)\n\n    @classmethod\n    def safari(cls):\n        saf = \"{0}.{1}.{2}\".format(random.randint(531, 535), random.randint(1, 50), random.randint(1, 7))\n        if random.randint(0, 1) == 0:\n            ver = \"{0}.{1}\".format(random.randint(4, 5), random.randint(0, 1))\n        else:\n            ver = \"{0}.0.{1}\".format(random.randint(4, 5), random.randint(1, 5))\n\n        platforms = (\n            '(Windows; U; {0}) AppleWebKit\/{1} (KHTML, like Gecko) Version\/{2} Safari\/{3}'.format(\n                cls.windows_platform_token(), saf, ver, saf),\n            '({0} rv:{1}.0; {2}) AppleWebKit\/{3} (KHTML, like Gecko) Version\/{4} Safari\/{5}'.format(\n                cls.mac_platform_token(), random.randint(2, 6), cls.random_element(cls.langs), saf, ver, saf),\n            '(iPod; U; CPU iPhone OS {0}_{1} like Mac OS X; {2}) AppleWebKit\/{3} (KHTML, like Gecko) Version\/{4}.0.5 Mobile\/8B{5} Safari\/6{6}'.format(\n                random.randint(3, 4), random.randint(0, 3), cls.random_element(cls.langs), saf, random.randint(3, 4),\n                random.randint(111, 119), saf\n            )\n        )\n\n        return 'Mozilla\/5.0 ' + cls.random_element(platforms)\n\n    @classmethod\n    def opera(cls):\n\n        platforms = (\n            '({0}; {1}) Presto\/2.9.{2} Version\/{3}.00'.format(\n                cls.linux_platform_token(), cls.random_element(cls.langs), random.randint(160, 190),\n                random.randint(10, 12)),\n            '({0}; {1}) Presto\/2.9.{2} Version\/{3}.00'.format(\n                cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(160, 190),\n                random.randint(10, 12)),\n        )\n\n        return 'Opera\/{0}.{1}.{2}'.format(random.randint(8, 9), random.randint(10, 99), cls.random_element(platforms))\n\n    @classmethod\n    def internet_explorer(cls):\n        return 'Mozilla\/5.0 (compatible; MSIE {0}.0; {1}; Trident\/{2}.{3})'.format(\n            random.randint(5, 9),\n            cls.windows_platform_token(),\n            random.randint(3, 5),\n            random.randint(0, 1)\n        )\n\n    @classmethod\n    def windows_platform_token(cls):\n        return cls.random_element(cls.windows_platform_tokens)\n\n    @classmethod\n    def linux_platform_token(cls):\n        return 'X11; Linux {0}'.format(cls.random_element(cls.linux_processors))\n\n    @classmethod\n    def mac_platform_token(cls):\n        return 'Macintosh; {0} Mac OS X 10_{1}_{2}'.format(\n            cls.random_element(cls.mac_processors), random.randint(5, 8), random.randint(0, 9))\n\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code provides a Python class called \"Provider\" that generates user agent strings for various web browsers. To use this code, import the \"Provider\" class from this module and call its methods to generate user agent strings for specific browsers.\n\n### Input:\n\n\n### Output:\nfrom __future__ import unicode_literals\nfrom . import BaseProvider\nfrom . import date_time\nfrom datetime import datetime\nimport random\n\n\nclass Provider(BaseProvider):\n    user_agents = ('firefox', 'chrome', 'internet_explorer', 'opera', 'safari')\n\n    windows_platform_tokens = (\n        'Windows NT 6.2', 'Windows NT 6.1', 'Windows NT 6.0', 'Windows NT 5.2', 'Windows NT 5.1',\n        'Windows NT 5.01', 'Windows NT 5.0', 'Windows NT 4.0', 'Windows 98; Win 9x 4.90',\n        'Windows 98', 'Windows 95', 'Windows CE'\n    )\n\n    linux_processors = ('i686', 'x86_64',)\n\n    mac_processors = ('Intel', 'PPC', 'U; Intel', 'U; PPC')\n\n    langs = ('en-US', 'sl-SI', 'it-IT')\n\n    @classmethod\n    def mac_processor(cls):\n        return cls.random_element(cls.mac_processors)\n\n    @classmethod\n    def linux_processor(cls):\n        return cls.random_element(cls.linux_processors)\n\n    @classmethod\n    def user_agent(cls):\n        name = cls.random_element(cls.user_agents)\n        return getattr(cls, name)()\n\n    @classmethod\n    def chrome(cls):\n        saf = str(random.randint(531, 536)) + str(random.randint(0, 2))\n\n        platforms = (\n            \"({0}) AppleWebKit\/{1} (KHTML, like Gecko) Chrome\/{2}.0.{3}.0 Safari\/{4}\".format(\n                cls.linux_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),\n            \"({0}) AppleWebKit\/{1} (KHTML, like Gecko) Chrome\/{2}.0.{3}.0 Safari\/{4}\".format(\n                cls.windows_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),\n            \"({0}) AppleWebKit\/{1} (KHTML, like Gecko) Chrome\/{2}.0.{3}.0 Safari\/{4}\".format(\n                cls.mac_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),\n        )\n\n        return 'Mozilla\/5.0 ' + cls.random_element(platforms)\n\n    @classmethod\n    def firefox(cls):\n        ver = (\n            'Gecko\/{0} Firefox\/{1}.0'.format(\n            date_time.Provider.date_time_between(datetime(2011, 1, 1)), random.randint(4, 15)),\n            'Gecko\/{0} Firefox\/3.6.{1}'.format(\n                date_time.Provider.date_time_between(datetime(2010, 1, 1)), random.randint(1, 20)),\n            'Gecko\/{0} Firefox\/3.8'.format(date_time.Provider.date_time_between(datetime(2010, 1, 1)), ),\n        )\n\n        platforms = (\n            \"({0}; {1}; rv:1.9.{2}.20) {3}\".format(\n                cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(0, 2), random.choice(ver)),\n            \"({0}; rv:1.9.{1}.20) {2}\".format(cls.linux_platform_token(), random.randint(5, 7), random.choice(ver)),\n            \"({0}; rv:1.9.{1}.20) {2}\".format(cls.mac_platform_token(), random.randint(2, 6), random.choice(ver)),\n        )\n\n        return 'Mozilla\/5.0 ' + cls.random_element(platforms)\n\n    @classmethod\n    def safari(cls):\n        saf = \"{0}.{1}.{2}\".format(random.randint(531, 535), random.randint(1, 50), random.randint(1, 7))\n        if random.randint(0, 1) == 0:\n            ver = \"{0}.{1}\".format(random.randint(4, 5), random.randint(0, 1))\n        else:\n            ver = \"{0}.0.{1}\".format(random.randint(4, 5), random.randint(1, 5))\n\n        platforms = (\n            '(Windows; U; {0}) AppleWebKit\/{1} (KHTML, like Gecko) Version\/{2} Safari\/{3}'.format(\n                cls.windows_platform_token(), saf, ver, saf),\n            '({0} rv:{1}.0; {2}) AppleWebKit\/{3} (KHTML, like Gecko) Version\/{4} Safari\/{5}'.format(\n                cls.mac_platform_token(), random.randint(2, 6), cls.random_element(cls.langs), saf, ver, saf),\n            '(iPod; U; CPU iPhone OS {0}_{1} like Mac OS X; {2}) AppleWebKit\/{3} (KHTML, like Gecko) Version\/{4}.0.5 Mobile\/8B{5} Safari\/6{6}'.format(\n                random.randint(3, 4), random.randint(0, 3), cls.random_element(cls.langs), saf, random.randint(3, 4),\n                random.randint(111, 119), saf\n            )\n        )\n\n        return 'Mozilla\/5.0 ' + cls.random_element(platforms)\n\n    @classmethod\n    def opera(cls):\n\n        platforms = (\n            '({0}; {1}) Presto\/2.9.{2} Version\/{3}.00'.format(\n                cls.linux_platform_token(), cls.random_element(cls.langs), random.randint(160, 190),\n                random.randint(10, 12)),\n            '({0}; {1}) Presto\/2.9.{2} Version\/{3}.00'.format(\n                cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(160, 190),\n                random.randint(10, 12)),\n        )\n\n        return 'Opera\/{0}.{1}.{2}'.format(random.randint(8, 9), random.randint(10, 99), cls.random_element(platforms))\n\n    @classmethod\n    def internet_explorer(cls):\n        return 'Mozilla\/5.0 (compatible; MSIE {0}.0; {1}; Trident\/{2}.{3})'.format(\n            random.randint(5, 9),\n            cls.windows_platform_token(),\n            random.randint(3, 5),\n            random.randint(0, 1)\n        )\n\n    @classmethod\n    def windows_platform_token(cls):\n        return cls.random_element(cls.windows_platform_tokens)\n\n    @classmethod\n    def linux_platform_token(cls):\n        return 'X11; Linux {0}'.format(cls.random_element(cls.linux_processors))\n\n    @classmethod\n    def mac_platform_token(cls):\n        return 'Macintosh; {0} Mac OS X 10_{1}_{2}'.format(\n            cls.random_element(cls.mac_processors), random.randint(5, 8), random.randint(0, 9))\n\n"}
{"instruction":"Build a web application using Python and Flask that displays the current date and time.","input":"","output":"from flask import Flask\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n@app.route('\/')\ndef homepage():\n    the_time = datetime.now().strftime(\"%A, %d %b %Y %l:%M %p\")\n    return \"\"\"\n    <h1>Current Date and Time<\/h1>\n    <p>It is currently {time}.<\/p>\n    <p>The local timezone is {timezone}.<\/p>\n    \"\"\".format(time = the_time, timezone = datetime.now().strftime(\"%Z\"))\n\nif __name__ == '__main__':\n    app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a web application using Python and Flask that displays the current date and time.\n\n### Input:\n\n\n### Output:\nfrom flask import Flask\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n@app.route('\/')\ndef homepage():\n    the_time = datetime.now().strftime(\"%A, %d %b %Y %l:%M %p\")\n    return \"\"\"\n    <h1>Current Date and Time<\/h1>\n    <p>It is currently {time}.<\/p>\n    <p>The local timezone is {timezone}.<\/p>\n    \"\"\".format(time = the_time, timezone = datetime.now().strftime(\"%Z\"))\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"instruction":"Design a program in Python that takes a text input and identifies and displays the most used words.","input":"User input string: \"This is a test string to use for testing our program. This is the second test with different words.\"","output":"import collections \n\ndef most_used_words(input_string): \n    # split the string into words \n    words = input_string.split() \n  \n    # counts the occurrence of each word \n    counter = collections.Counter(words) \n  \n    # most_common() produces k frequently encountered \n    # input values and their respective counts.  \n    most_occur = counter.most_common(5)  \n  \n    print(\"The most used words are:\")\n    for word, count in most_occur : \n        print(word, \":\", count)  \n\ninput_string = \"This is a test string to use for testing our program. This is the second test with different words.\"\nmost_used_words(input_string)\n\nOutput:\nThe most used words are:\nThis : 2\nis : 2\na : 1\ntest : 2\nstring : 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python that takes a text input and identifies and displays the most used words.\n\n### Input:\nUser input string: \"This is a test string to use for testing our program. This is the second test with different words.\"\n\n### Output:\nimport collections \n\ndef most_used_words(input_string): \n    # split the string into words \n    words = input_string.split() \n  \n    # counts the occurrence of each word \n    counter = collections.Counter(words) \n  \n    # most_common() produces k frequently encountered \n    # input values and their respective counts.  \n    most_occur = counter.most_common(5)  \n  \n    print(\"The most used words are:\")\n    for word, count in most_occur : \n        print(word, \":\", count)  \n\ninput_string = \"This is a test string to use for testing our program. This is the second test with different words.\"\nmost_used_words(input_string)\n\nOutput:\nThe most used words are:\nThis : 2\nis : 2\na : 1\ntest : 2\nstring : 1"}
{"instruction":"Rewrite the given Python code to use list comprehension.","input":"numbers = [1, 2, 3, 4, 5]\n\nnew_numbers = []\nfor n in numbers:\n    new_numbers.append(n * 2)","output":"numbers = [1, 2, 3, 4, 5]\n\nnew_numbers = [n * 2 for n in numbers]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the given Python code to use list comprehension.\n\n### Input:\nnumbers = [1, 2, 3, 4, 5]\n\nnew_numbers = []\nfor n in numbers:\n    new_numbers.append(n * 2)\n\n### Output:\nnumbers = [1, 2, 3, 4, 5]\n\nnew_numbers = [n * 2 for n in numbers]"}
{"instruction":"This code tests the anime filename output. It includes two functions, \"test_group\" and \"test_group_no_epname\", which test the output of anime filenames with and without episode names, respectively. The functions use the \"run_tvnamer\" and \"verify_out_data\" functions from the \"functional_runner\" module to test the output against expected files. The functions also use configuration settings to format the output filenames. To run the tests, execute the code.","input":"","output":"#!\/usr\/bin\/env python\n\n\"\"\"Tests anime filename output\n\"\"\"\n\nfrom functional_runner import run_tvnamer, verify_out_data\nfrom nose.plugins.attrib import attr\n\n\n@attr(\"functional\")\ndef test_group():\n    \"\"\"Anime filename [#100]\n    \"\"\"\n    out_data = run_tvnamer(\n        with_files = ['[Some Group] Scrubs - 01 [A1B2C3].avi'],\n        with_config = \"\"\"\n{\n    \"batch\": true,\n\n    \"filename_anime_with_episode\": \"[%(group)s] %(seriesname)s - %(episode)s - %(episodename)s [%(crc)s]%(ext)s\"\n}\n\"\"\")\n\n    expected_files = ['[Some Group] Scrubs - 01 - My First Day [A1B2C3].avi']\n\n    verify_out_data(out_data, expected_files)\n\n\n@attr(\"functional\")\ndef test_group_no_epname():\n    \"\"\"Anime filename, on episode with no name [#100]\n    \"\"\"\n    out_data = run_tvnamer(\n        with_files = ['[Some Group] Somefakeseries - 01 [A1B2C3].avi'],\n        with_config = \"\"\"\n{\n    \"batch\": true,\n\n    \"filename_anime_without_episode\": \"[%(group)s] %(seriesname)s - %(episode)s [%(crc)s]%(ext)s\"\n}\n\"\"\")\n\n    expected_files = ['[Some Group] Somefakeseries - 01 [A1B2C3].avi']\n\n    verify_out_data(out_data, expected_files)\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code tests the anime filename output. It includes two functions, \"test_group\" and \"test_group_no_epname\", which test the output of anime filenames with and without episode names, respectively. The functions use the \"run_tvnamer\" and \"verify_out_data\" functions from the \"functional_runner\" module to test the output against expected files. The functions also use configuration settings to format the output filenames. To run the tests, execute the code.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n\n\"\"\"Tests anime filename output\n\"\"\"\n\nfrom functional_runner import run_tvnamer, verify_out_data\nfrom nose.plugins.attrib import attr\n\n\n@attr(\"functional\")\ndef test_group():\n    \"\"\"Anime filename [#100]\n    \"\"\"\n    out_data = run_tvnamer(\n        with_files = ['[Some Group] Scrubs - 01 [A1B2C3].avi'],\n        with_config = \"\"\"\n{\n    \"batch\": true,\n\n    \"filename_anime_with_episode\": \"[%(group)s] %(seriesname)s - %(episode)s - %(episodename)s [%(crc)s]%(ext)s\"\n}\n\"\"\")\n\n    expected_files = ['[Some Group] Scrubs - 01 - My First Day [A1B2C3].avi']\n\n    verify_out_data(out_data, expected_files)\n\n\n@attr(\"functional\")\ndef test_group_no_epname():\n    \"\"\"Anime filename, on episode with no name [#100]\n    \"\"\"\n    out_data = run_tvnamer(\n        with_files = ['[Some Group] Somefakeseries - 01 [A1B2C3].avi'],\n        with_config = \"\"\"\n{\n    \"batch\": true,\n\n    \"filename_anime_without_episode\": \"[%(group)s] %(seriesname)s - %(episode)s [%(crc)s]%(ext)s\"\n}\n\"\"\")\n\n    expected_files = ['[Some Group] Somefakeseries - 01 [A1B2C3].avi']\n\n    verify_out_data(out_data, expected_files)\n"}
{"instruction":"Design an algorithm in Python that takes two integers as an input and returns the maximum of the two.","input":"x = 3 \ny = 6","output":"def max_of_two(x, y): \n    if x > y: \n        return x \n    else: \n        return y \n  \nprint(max_of_two(3,6))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that takes two integers as an input and returns the maximum of the two.\n\n### Input:\nx = 3 \ny = 6\n\n### Output:\ndef max_of_two(x, y): \n    if x > y: \n        return x \n    else: \n        return y \n  \nprint(max_of_two(3,6))"}
{"instruction":"Create a Python code to delete the last element in a list.","input":"[1, 2, 2, 4, 4]","output":"def delete_last(lst):\n    return lst[:-1]\n\nresult = delete_last([1, 2, 2, 4, 4])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code to delete the last element in a list.\n\n### Input:\n[1, 2, 2, 4, 4]\n\n### Output:\ndef delete_last(lst):\n    return lst[:-1]\n\nresult = delete_last([1, 2, 2, 4, 4])\nprint(result)"}
{"instruction":"Construct a Python program to classify a given text using a Multinomial Naive Bayes classifier.","input":"","output":"import json\nimport pandas as pd\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# load the training data\nwith open(\"training_data.json\") as f:\n    training_data = json.load(f)\n    \n# create a dataframe from the training data\ndf = pd.DataFrame(training_data)\n\n# create count vectorizer \nvec = CountVectorizer()\nX = vec.fit_transform(df[\"text\"])\ny = df[\"class\"]\n\n# train the model\nclf = MultinomialNB()\nclf.fit(X, y)\n\n# predict the class of the text\ntext = \"this is a sample text\"\nx = vec.transform([text]) # transform the text into counts\nclf.predict(x)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to classify a given text using a Multinomial Naive Bayes classifier.\n\n### Input:\n\n\n### Output:\nimport json\nimport pandas as pd\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# load the training data\nwith open(\"training_data.json\") as f:\n    training_data = json.load(f)\n    \n# create a dataframe from the training data\ndf = pd.DataFrame(training_data)\n\n# create count vectorizer \nvec = CountVectorizer()\nX = vec.fit_transform(df[\"text\"])\ny = df[\"class\"]\n\n# train the model\nclf = MultinomialNB()\nclf.fit(X, y)\n\n# predict the class of the text\ntext = \"this is a sample text\"\nx = vec.transform([text]) # transform the text into counts\nclf.predict(x)"}
{"instruction":"Create a class in Python containing an add_student() method.","input":"","output":"class StudentList:\n    def __init__(self):\n        self.students = []\n\n    def add_student(self, student):\n        self.students.append(student)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python containing an add_student() method.\n\n### Input:\n\n\n### Output:\nclass StudentList:\n    def __init__(self):\n        self.students = []\n\n    def add_student(self, student):\n        self.students.append(student)"}
{"instruction":"Generate a Python program to find the sum of all even numbers in an array","input":"[1, 5, 9, 11, 2, 8]","output":"def sumEven(array):\n    sum = 0\n    for x in array:\n        if x % 2 == 0:\n            sum += x\n    return sum\n\nprint(sumEven([1, 5, 9, 11, 2, 8]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to find the sum of all even numbers in an array\n\n### Input:\n[1, 5, 9, 11, 2, 8]\n\n### Output:\ndef sumEven(array):\n    sum = 0\n    for x in array:\n        if x % 2 == 0:\n            sum += x\n    return sum\n\nprint(sumEven([1, 5, 9, 11, 2, 8]))"}
{"instruction":"Add a feature to the Python program that can enable automatic refreshing of the webpages every five minutes.","input":"Not applicable","output":"import http.server\nimport threading\nimport time\n\nclass MyHandler(http.server.BaseHTTPRequestHandler):\n    def do_GET(self):\n\n        # Build file path\n        url_tokens = self.path.split(\"\/\")\n        file_path = \".\"\n        for token in url_tokens:\n            if token != '':\n                file_path += \"\/\"+token\n\n        # Set content type\n        self.send_response(200)\n        if file_path.endswith(\".html\"):\n            self.send_header(\"Content-type\", \"text\/html\")\n        elif file_path.endswith(\".css\"):\n            self.send_header(\"Content-type\", \"text\/css\")\n        else:\n            self.send_header(\"Content-type\", \"text\/plain\")\n        self.end_headers()\n\n        # Read and send back file content\n        f = open(file_path, \"rb\")\n        content = f.read()\n        self.wfile.write(content)\n\n        f.close()\n\n# Reload file every 5 minutes\ndef reload_files():\n    while True:\n        threading.Timer(300.0, reload_files).start()\n        print(\"Reloaded pages\")\n\n# Run server\nPORT = 8080\nserver_address = (\"\", PORT)\nserver = http.server.HTTPServer(server_address, MyHandler)\n\n# Start the refreshing timer\nThread(target=reload_files).start()\n\nserver.serve_forever()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAdd a feature to the Python program that can enable automatic refreshing of the webpages every five minutes.\n\n### Input:\nNot applicable\n\n### Output:\nimport http.server\nimport threading\nimport time\n\nclass MyHandler(http.server.BaseHTTPRequestHandler):\n    def do_GET(self):\n\n        # Build file path\n        url_tokens = self.path.split(\"\/\")\n        file_path = \".\"\n        for token in url_tokens:\n            if token != '':\n                file_path += \"\/\"+token\n\n        # Set content type\n        self.send_response(200)\n        if file_path.endswith(\".html\"):\n            self.send_header(\"Content-type\", \"text\/html\")\n        elif file_path.endswith(\".css\"):\n            self.send_header(\"Content-type\", \"text\/css\")\n        else:\n            self.send_header(\"Content-type\", \"text\/plain\")\n        self.end_headers()\n\n        # Read and send back file content\n        f = open(file_path, \"rb\")\n        content = f.read()\n        self.wfile.write(content)\n\n        f.close()\n\n# Reload file every 5 minutes\ndef reload_files():\n    while True:\n        threading.Timer(300.0, reload_files).start()\n        print(\"Reloaded pages\")\n\n# Run server\nPORT = 8080\nserver_address = (\"\", PORT)\nserver = http.server.HTTPServer(server_address, MyHandler)\n\n# Start the refreshing timer\nThread(target=reload_files).start()\n\nserver.serve_forever()"}
{"instruction":"Create a machine learning classifier in Python that can predict the sentiment of a given text.","input":"Text for training data:\n \nPositive:\nI had a great time with my friends last night.\n\nNegative:\nMy car broke down and I had to walk home in the rain.\n\nNeutral:\nI went to the store to buy some groceries.","output":"import re\nimport nltk\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom nltk.metrics import scores\nfrom sklearn.model_selection import train_test_split\n\n# Load the data\ndf = pd.read_csv('data.csv')\n\n# Preprocessing\ndf['text'] = df['text'].apply(lambda x: re.sub(r'\\W', ' ', str(x).lower()))\ndf['text'] = df['text'].apply(lambda x: re.sub(r'\\s+', ' ', x))\n\n# Feature extraction\nX = df['text'].values\ny = df['label'].values\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Vectorize the data\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer(max_features=5000)\nX_train = vectorizer.fit_transform(X_train)\nX_test = vectorizer.transform(X_test)\n\n# Model training\nfrom sklearn.svm import LinearSVC\nclassifier = LinearSVC()\nclassifier.fit(X_train, y_train)\n\n# Model evaluation\ny_pred = classifier.predict(X_test)\nprint(\"Accuracy score:\", scores.accuracy(y_test, y_pred))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning classifier in Python that can predict the sentiment of a given text.\n\n### Input:\nText for training data:\n \nPositive:\nI had a great time with my friends last night.\n\nNegative:\nMy car broke down and I had to walk home in the rain.\n\nNeutral:\nI went to the store to buy some groceries.\n\n### Output:\nimport re\nimport nltk\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom nltk.metrics import scores\nfrom sklearn.model_selection import train_test_split\n\n# Load the data\ndf = pd.read_csv('data.csv')\n\n# Preprocessing\ndf['text'] = df['text'].apply(lambda x: re.sub(r'\\W', ' ', str(x).lower()))\ndf['text'] = df['text'].apply(lambda x: re.sub(r'\\s+', ' ', x))\n\n# Feature extraction\nX = df['text'].values\ny = df['label'].values\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Vectorize the data\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer(max_features=5000)\nX_train = vectorizer.fit_transform(X_train)\nX_test = vectorizer.transform(X_test)\n\n# Model training\nfrom sklearn.svm import LinearSVC\nclassifier = LinearSVC()\nclassifier.fit(X_train, y_train)\n\n# Model evaluation\ny_pred = classifier.predict(X_test)\nprint(\"Accuracy score:\", scores.accuracy(y_test, y_pred))"}
{"instruction":"Create a basic Command Line program in Python that takes two parameters and prints the result of their multiplication.","input":"Not applicable","output":"import sys\n\n# Take two inputs from command line \nfirst, second = int(sys.argv[1]), int(sys.argv[2])\n\n# Display the result of multiplication \nprint(f\"Result of {first} * {second} is: {first * second}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Command Line program in Python that takes two parameters and prints the result of their multiplication.\n\n### Input:\nNot applicable\n\n### Output:\nimport sys\n\n# Take two inputs from command line \nfirst, second = int(sys.argv[1]), int(sys.argv[2])\n\n# Display the result of multiplication \nprint(f\"Result of {first} * {second} is: {first * second}\")"}
{"instruction":"Using the provided dataset, create a Python program that returns the total number of people in a given age range.","input":"ageGroup1 = [10, 20, 15, 25] \nageGroup2 = [30, 35, 39, 43]","output":"def count_people_in_age_range(ageGroup1, ageGroup2):\n total = 0\n for age in ageGroup1 + ageGroup2:\n  if age >= 10 and age <= 20:\n   total += 1\n return total","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the provided dataset, create a Python program that returns the total number of people in a given age range.\n\n### Input:\nageGroup1 = [10, 20, 15, 25] \nageGroup2 = [30, 35, 39, 43]\n\n### Output:\ndef count_people_in_age_range(ageGroup1, ageGroup2):\n total = 0\n for age in ageGroup1 + ageGroup2:\n  if age >= 10 and age <= 20:\n   total += 1\n return total"}
{"instruction":"Write a Python program to automate adding products to an e-commerce website's database.","input":"Products:\n\nName: iPhone 11 Pro\nPrice: 949\n\nName: AirPods Pro\nPrice: 249","output":"import sqlite3\n\n# Establish the connection\nconn = sqlite3.connect(\"ecommerce_database.db\")\nc = conn.cursor()\n\n# Create the table\nc.execute('''CREATE TABLE IF NOT EXISTS products (\n    name TEXT,\n    price INTEGER\n)''')\n\n# Insert data into table\nproducts = [\n    (\"iPhone 11 Pro\", 949),\n    (\"AirPods Pro\", 249)\n]\n\nc.executemany('INSERT INTO products VALUES (?, ?)', products)\n\n# Commit changes\nconn.commit()\n\n# Close the connection\nconn.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to automate adding products to an e-commerce website's database.\n\n### Input:\nProducts:\n\nName: iPhone 11 Pro\nPrice: 949\n\nName: AirPods Pro\nPrice: 249\n\n### Output:\nimport sqlite3\n\n# Establish the connection\nconn = sqlite3.connect(\"ecommerce_database.db\")\nc = conn.cursor()\n\n# Create the table\nc.execute('''CREATE TABLE IF NOT EXISTS products (\n    name TEXT,\n    price INTEGER\n)''')\n\n# Insert data into table\nproducts = [\n    (\"iPhone 11 Pro\", 949),\n    (\"AirPods Pro\", 249)\n]\n\nc.executemany('INSERT INTO products VALUES (?, ?)', products)\n\n# Commit changes\nconn.commit()\n\n# Close the connection\nconn.close()"}
{"instruction":"To install django-twilio, follow these steps:\n\n1. Ensure that you have the required dependencies installed: setuptools>=36.2, twilio>=6.3.0,<7, django-phonenumber-field>=0.6, and phonenumbers>=8.10.22.\n2. Determine which version of Django you are using and add the appropriate version to the INSTALL_PYTHON_REQUIRES list.\n3. Run the setup.py file to install django-twilio.\n4. Verify that django-twilio has been installed by checking the list of installed packages.","input":"","output":"# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals, absolute_import\nfrom os.path import abspath, dirname, join, normpath\n\nfrom setuptools import find_packages, setup\nimport sys\n\n\nINSTALL_PYTHON_REQUIRES = []\n# We are intending to keep up to date with the supported Django versions.\n# For the official support, please visit:\n# https:\/\/docs.djangoproject.com\/en\/3.0\/faq\/install\/#what-python-version-can-i-use-with-django and you may change the version in the URL to suit your needs, and we will try to update that here too as we upgrade with django.\nif sys.version_info[1] == 5:\n    # py3.5 can run 1.11 < 2.2\n    django_python_version_install = 'Django>=2.2,<3.0',\n    INSTALL_PYTHON_REQUIRES.append(django_python_version_install)\nelif sys.version_info[1] == 6:\n    # py3.6 can run 1.11 < 3.1 (likely will be <4.0)\n    django_python_version_install = 'Django>=2.2,<3.2',\n    INSTALL_PYTHON_REQUIRES.append(django_python_version_install)\nelif sys.version_info[1] == 7:\n    # py3.7 is 1.11.17 < 3.1 (likely will be <4.0)\n    django_python_version_install = 'Django>=2.2,<3.2'\n    INSTALL_PYTHON_REQUIRES.append(django_python_version_install)\nelif sys.version_info[1] == 8:\n    # py3.8 is 2.2.8 < 3.1 (likely will be <4.0)\n    django_python_version_install = 'Django>=2.2.8,<3.2'\n    INSTALL_PYTHON_REQUIRES.append(django_python_version_install)\n\nsetup(\n\n    # Basic package information:\n    name='django-twilio',\n    version='0.13.1.post0',\n    packages=find_packages(),\n\n    # Packaging options:\n    zip_safe=False,\n    include_package_data=True,\n\n    # Package dependencies:\n    install_requires=[\n        'setuptools>=36.2',\n        'twilio>=6.3.0,<7',\n        'django-phonenumber-field>=0.6',\n        'phonenumbers>=8.10.22',\n    ] + INSTALL_PYTHON_REQUIRES,\n\n    # Metadata for PyPI:\n    author='Randall Degges',\n    author_email='rdegges@gmail.com',\n    maintainer=\"Jason Held\",\n    maintainer_email=\"jasonsheld@gmail.com\",\n    license='UNLICENSE',\n    url='https:\/\/github.com\/rdegges\/django-twilio',\n    keywords='twilio telephony call phone voip sms django django-twilio',\n    description='Build Twilio functionality into your Django apps.',\n    long_description=open(\n        normpath(join(dirname(abspath(__file__)), 'README.rst'))\n    ).read(),\n    project_urls={\n        \"Documentation\": \"https:\/\/django-twilio.readthedocs.io\/en\/latest\/\",\n        \"Code\": \"https:\/\/github.com\/rdegges\/django-twilio\",\n        \"Tracker\": \"https:\/\/github.com\/rdegges\/django-twilio\/issues\",\n    },\n    classifiers=[\n        'Framework :: Django',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.0',\n        'Intended Audience :: Developers',\n        'License :: Public Domain',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Internet :: WWW\/HTTP',\n    ]\n\n)\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTo install django-twilio, follow these steps:\n\n1. Ensure that you have the required dependencies installed: setuptools>=36.2, twilio>=6.3.0,<7, django-phonenumber-field>=0.6, and phonenumbers>=8.10.22.\n2. Determine which version of Django you are using and add the appropriate version to the INSTALL_PYTHON_REQUIRES list.\n3. Run the setup.py file to install django-twilio.\n4. Verify that django-twilio has been installed by checking the list of installed packages.\n\n### Input:\n\n\n### Output:\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals, absolute_import\nfrom os.path import abspath, dirname, join, normpath\n\nfrom setuptools import find_packages, setup\nimport sys\n\n\nINSTALL_PYTHON_REQUIRES = []\n# We are intending to keep up to date with the supported Django versions.\n# For the official support, please visit:\n# https:\/\/docs.djangoproject.com\/en\/3.0\/faq\/install\/#what-python-version-can-i-use-with-django and you may change the version in the URL to suit your needs, and we will try to update that here too as we upgrade with django.\nif sys.version_info[1] == 5:\n    # py3.5 can run 1.11 < 2.2\n    django_python_version_install = 'Django>=2.2,<3.0',\n    INSTALL_PYTHON_REQUIRES.append(django_python_version_install)\nelif sys.version_info[1] == 6:\n    # py3.6 can run 1.11 < 3.1 (likely will be <4.0)\n    django_python_version_install = 'Django>=2.2,<3.2',\n    INSTALL_PYTHON_REQUIRES.append(django_python_version_install)\nelif sys.version_info[1] == 7:\n    # py3.7 is 1.11.17 < 3.1 (likely will be <4.0)\n    django_python_version_install = 'Django>=2.2,<3.2'\n    INSTALL_PYTHON_REQUIRES.append(django_python_version_install)\nelif sys.version_info[1] == 8:\n    # py3.8 is 2.2.8 < 3.1 (likely will be <4.0)\n    django_python_version_install = 'Django>=2.2.8,<3.2'\n    INSTALL_PYTHON_REQUIRES.append(django_python_version_install)\n\nsetup(\n\n    # Basic package information:\n    name='django-twilio',\n    version='0.13.1.post0',\n    packages=find_packages(),\n\n    # Packaging options:\n    zip_safe=False,\n    include_package_data=True,\n\n    # Package dependencies:\n    install_requires=[\n        'setuptools>=36.2',\n        'twilio>=6.3.0,<7',\n        'django-phonenumber-field>=0.6',\n        'phonenumbers>=8.10.22',\n    ] + INSTALL_PYTHON_REQUIRES,\n\n    # Metadata for PyPI:\n    author='Randall Degges',\n    author_email='rdegges@gmail.com',\n    maintainer=\"Jason Held\",\n    maintainer_email=\"jasonsheld@gmail.com\",\n    license='UNLICENSE',\n    url='https:\/\/github.com\/rdegges\/django-twilio',\n    keywords='twilio telephony call phone voip sms django django-twilio',\n    description='Build Twilio functionality into your Django apps.',\n    long_description=open(\n        normpath(join(dirname(abspath(__file__)), 'README.rst'))\n    ).read(),\n    project_urls={\n        \"Documentation\": \"https:\/\/django-twilio.readthedocs.io\/en\/latest\/\",\n        \"Code\": \"https:\/\/github.com\/rdegges\/django-twilio\",\n        \"Tracker\": \"https:\/\/github.com\/rdegges\/django-twilio\/issues\",\n    },\n    classifiers=[\n        'Framework :: Django',\n        'Framework :: Django :: 2.2',\n        'Framework :: Django :: 3.0',\n        'Intended Audience :: Developers',\n        'License :: Public Domain',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Internet :: WWW\/HTTP',\n    ]\n\n)\n"}
{"instruction":"Construct an algorithm in Python that calculates the factorial of a number","input":"n = 5","output":"def factorial(number):\n    factorial = 1\n    for i in range(1, number + 1):\n        factorial = factorial * i\n    return factorial\n\nn = 5\nresult = factorial(n)\nprint(result) # 120","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm in Python that calculates the factorial of a number\n\n### Input:\nn = 5\n\n### Output:\ndef factorial(number):\n    factorial = 1\n    for i in range(1, number + 1):\n        factorial = factorial * i\n    return factorial\n\nn = 5\nresult = factorial(n)\nprint(result) # 120"}
{"instruction":"Generate a Python function to calculate the sum of the first 100 positive natural numbers","input":"Not applicable","output":"def sum_first_100_natural_numbers():\n total = 0\n for i in range(1,101):\n total += i\n return total\n\n# example\nprint(sum_first_100_natural_numbers()) # output: 5050","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to calculate the sum of the first 100 positive natural numbers\n\n### Input:\nNot applicable\n\n### Output:\ndef sum_first_100_natural_numbers():\n total = 0\n for i in range(1,101):\n total += i\n return total\n\n# example\nprint(sum_first_100_natural_numbers()) # output: 5050"}
{"instruction":"Generate a Python script that outputs the first ten perfect squares from 1 to 100.","input":"","output":"for i in range(1, 11):\n    print(str(i**2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script that outputs the first ten perfect squares from 1 to 100.\n\n### Input:\n\n\n### Output:\nfor i in range(1, 11):\n    print(str(i**2))"}
{"instruction":"Develop a web crawler in Python to scrape all headlines from a given news website","input":"","output":"import requests \nfrom bs4 import BeautifulSoup \n  \ndef crawl_headlines(url): \n    \n    code = requests.get(url)  \n    plain = code.text  \n    soup = BeautifulSoup(plain, \"html.parser\")  \n  \n    headlines = [] \n    for headline in soup.find_all('a', {'class': 'story-link'}): \n        headlines.append(headline.string) \n          \n    return headlines \n  \n\nURL = \"https:\/\/www.example.com\/news\"\nheadlines =  crawl_headlines(URL) \nprint(\"Headlines:\\n\") \n\nfor headline in headlines: \n    print(headline)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a web crawler in Python to scrape all headlines from a given news website\n\n### Input:\n\n\n### Output:\nimport requests \nfrom bs4 import BeautifulSoup \n  \ndef crawl_headlines(url): \n    \n    code = requests.get(url)  \n    plain = code.text  \n    soup = BeautifulSoup(plain, \"html.parser\")  \n  \n    headlines = [] \n    for headline in soup.find_all('a', {'class': 'story-link'}): \n        headlines.append(headline.string) \n          \n    return headlines \n  \n\nURL = \"https:\/\/www.example.com\/news\"\nheadlines =  crawl_headlines(URL) \nprint(\"Headlines:\\n\") \n\nfor headline in headlines: \n    print(headline)"}
{"instruction":"Design a class in Python to represent a Credit Card Account. The class should include attributes for name, card number, balance, and limit. It should also include methods for adding and subtracting from the balance and returning the card number.","input":"Not applicable","output":"class CreditCardAccount:\n def __init__(self, name, card_number, balance, limit):\n  self.name = name\n  self.card_number = card_number\n  self.balance = balance\n  self.limit = limit\n\n def add_to_balance(self, amount):\n  self.balance += amount\n\n def subtract_from_balance(self, amount):\n  self.balance -= amount\n\n def get_card_number(self):\n  return self.card_number","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python to represent a Credit Card Account. The class should include attributes for name, card number, balance, and limit. It should also include methods for adding and subtracting from the balance and returning the card number.\n\n### Input:\nNot applicable\n\n### Output:\nclass CreditCardAccount:\n def __init__(self, name, card_number, balance, limit):\n  self.name = name\n  self.card_number = card_number\n  self.balance = balance\n  self.limit = limit\n\n def add_to_balance(self, amount):\n  self.balance += amount\n\n def subtract_from_balance(self, amount):\n  self.balance -= amount\n\n def get_card_number(self):\n  return self.card_number"}
{"instruction":"Create a function in Python that flattens a nested list.","input":"","output":"def flatten_list(lst):\n flattened = []\n for i in lst:\n  if type(i) == list:\n   flattened += flatten_list(i)\n  else:\n   flattened.append(i)\n return flattened","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that flattens a nested list.\n\n### Input:\n\n\n### Output:\ndef flatten_list(lst):\n flattened = []\n for i in lst:\n  if type(i) == list:\n   flattened += flatten_list(i)\n  else:\n   flattened.append(i)\n return flattened"}
{"instruction":"Generate a machine learning model to predict the probability of a customer churning in Python.","input":"Not applicable","output":"# imports\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# load data\ndata = pd.read_csv('data.csv')\n\n# preprocessing\nX = data.iloc[:, :-1]\ny = data.iloc[:, -1]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# model\nmodel = RandomForestClassifier(n_estimators=200)\nmodel.fit(X_train, y_train)\n\n# predict\npredictions = model.predict_proba(X_test)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a machine learning model to predict the probability of a customer churning in Python.\n\n### Input:\nNot applicable\n\n### Output:\n# imports\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# load data\ndata = pd.read_csv('data.csv')\n\n# preprocessing\nX = data.iloc[:, :-1]\ny = data.iloc[:, -1]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# model\nmodel = RandomForestClassifier(n_estimators=200)\nmodel.fit(X_train, y_train)\n\n# predict\npredictions = model.predict_proba(X_test)"}
{"instruction":"Create a neural network architecture in Python for predicting the values of a time series dataset.","input":"","output":"model = Sequential()\n\nmodel.add(LSTM(50, activation='relu', input_shape=(n_timesteps, n_features)))\n\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(n_outputs))\nmodel.add(Activation('linear'))\n\nmodel.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])\n\n# fit network\nmodel.fit(X_train, y_train, epochs=50, batch_size=72, verbose=2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network architecture in Python for predicting the values of a time series dataset.\n\n### Input:\n\n\n### Output:\nmodel = Sequential()\n\nmodel.add(LSTM(50, activation='relu', input_shape=(n_timesteps, n_features)))\n\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(n_outputs))\nmodel.add(Activation('linear'))\n\nmodel.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])\n\n# fit network\nmodel.fit(X_train, y_train, epochs=50, batch_size=72, verbose=2)"}
{"instruction":"Write a Python program to generate a random password. The password should contain at least 8 characters, a lowercase letter, an uppercase letter, a digit, and a special character.","input":"Not applicable","output":"import string\nimport random\n\ndef generate_password():\n passwords = []\n characters = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation\n for i in range(8):\n  passwords.append(random.choice(characters))\n return ''.join(passwords)\n\nprint(generate_password())\n\n# Output: #o4&2+-P","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a random password. The password should contain at least 8 characters, a lowercase letter, an uppercase letter, a digit, and a special character.\n\n### Input:\nNot applicable\n\n### Output:\nimport string\nimport random\n\ndef generate_password():\n passwords = []\n characters = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation\n for i in range(8):\n  passwords.append(random.choice(characters))\n return ''.join(passwords)\n\nprint(generate_password())\n\n# Output: #o4&2+-P"}
{"instruction":"Create a class for binary trees in Python","input":"","output":"\"\"\"\nClass for binary trees in Python.\n\"\"\"\n\nclass BinaryTree:\n    def __init__(self, root):\n        self.key = root\n        self.left = None\n        self.right = None\n\n    def insert_left(self, new_node):\n        if self.left is None:\n            self.left = BinaryTree(new_node)\n        else:\n            t = BinaryTree(new_node)\n            t.left = self.left\n            self.left = t\n\n    def insert_right(self, new_node):\n        if self.right is None:\n            self.right = BinaryTree(new_node)\n        else:\n            t = BinaryTree(new_node)\n            t.right = self.right\n            self.right = t\n\n    def get_right_child(self):\n        return self.right\n\n    def get_left_child(self):\n        return self.left\n\n    def set_root_val(self, obj):\n        self.key = obj\n\n    def get_root_val(self):\n        return self.key","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class for binary trees in Python\n\n### Input:\n\n\n### Output:\n\"\"\"\nClass for binary trees in Python.\n\"\"\"\n\nclass BinaryTree:\n    def __init__(self, root):\n        self.key = root\n        self.left = None\n        self.right = None\n\n    def insert_left(self, new_node):\n        if self.left is None:\n            self.left = BinaryTree(new_node)\n        else:\n            t = BinaryTree(new_node)\n            t.left = self.left\n            self.left = t\n\n    def insert_right(self, new_node):\n        if self.right is None:\n            self.right = BinaryTree(new_node)\n        else:\n            t = BinaryTree(new_node)\n            t.right = self.right\n            self.right = t\n\n    def get_right_child(self):\n        return self.right\n\n    def get_left_child(self):\n        return self.left\n\n    def set_root_val(self, obj):\n        self.key = obj\n\n    def get_root_val(self):\n        return self.key"}
{"instruction":"Create an artificial neural network in Python to predict the stock price for a given company.","input":"Historical stock price data for the company.","output":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \n\nfrom sklearn.preprocessing import MinMaxScaler \nfrom keras.models import Sequential \nfrom keras.layers import LSTM, Dense \n\ndf = pd.read_csv(input_data)\n\n# feature scaling \nsc = MinMaxScaler(feature_range= (0,1)) \ndf_scaled = sc.fit_transform(df) \n\n# split into training and test sets \nx_train, y_train = df_scaled[:train_len, 3], df_scaled[:train_len, 3] \nx_test, y_test = df_scaled[train_len:, 3], df_scaled[train_len:, 3] \n\n# reshape the data \nx_train = np.reshape(x_train, (x_train.shape[0], 1, x_train.shape[1]) \nx_test = np.reshape(x_test, (x_test.shape[0], 1, x_test.shape[1]) \n\n# build model \nmodel = Sequential() \nmodel.add(LSTM(50, return_sequences=True)) \nmodel.add(LSTM(50, return_sequences=False)) \nmodel.add(Dense(1)) \nmodel.compile(loss='mean_squared_error', optimizer='adam') \n\n# fit model \nmodel.fit(x_train, y_train, batch_size=1, epochs=1) \n\n# make prediction \npredicted_stock_price = model.predict(x_test) \npredicted_stock_price = sc.inverse_transform(predicted_stock_price) \n\n# visualize the result  \nplt.plot(real_stock_price, color = 'red', label = 'Real Stock Price') \nplt.plot(predicted_stock_price, color = 'blue', label = 'Predicted Stock Price') \nplt.title('Stock Price Prediction') \nplt.xlabel('Time') \nplt.ylabel('Stock Price') \nplt.legend() \nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an artificial neural network in Python to predict the stock price for a given company.\n\n### Input:\nHistorical stock price data for the company.\n\n### Output:\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \n\nfrom sklearn.preprocessing import MinMaxScaler \nfrom keras.models import Sequential \nfrom keras.layers import LSTM, Dense \n\ndf = pd.read_csv(input_data)\n\n# feature scaling \nsc = MinMaxScaler(feature_range= (0,1)) \ndf_scaled = sc.fit_transform(df) \n\n# split into training and test sets \nx_train, y_train = df_scaled[:train_len, 3], df_scaled[:train_len, 3] \nx_test, y_test = df_scaled[train_len:, 3], df_scaled[train_len:, 3] \n\n# reshape the data \nx_train = np.reshape(x_train, (x_train.shape[0], 1, x_train.shape[1]) \nx_test = np.reshape(x_test, (x_test.shape[0], 1, x_test.shape[1]) \n\n# build model \nmodel = Sequential() \nmodel.add(LSTM(50, return_sequences=True)) \nmodel.add(LSTM(50, return_sequences=False)) \nmodel.add(Dense(1)) \nmodel.compile(loss='mean_squared_error', optimizer='adam') \n\n# fit model \nmodel.fit(x_train, y_train, batch_size=1, epochs=1) \n\n# make prediction \npredicted_stock_price = model.predict(x_test) \npredicted_stock_price = sc.inverse_transform(predicted_stock_price) \n\n# visualize the result  \nplt.plot(real_stock_price, color = 'red', label = 'Real Stock Price') \nplt.plot(predicted_stock_price, color = 'blue', label = 'Predicted Stock Price') \nplt.title('Stock Price Prediction') \nplt.xlabel('Time') \nplt.ylabel('Stock Price') \nplt.legend() \nplt.show()"}
{"instruction":"Write a short Python program which takes a sentence as input and prints the frequency of each letter in that sentence.","input":"I love programming","output":"def letter_frequency(sentence):\n    # Count the frequency of each letter\n    letter_freq = {}\n    for char in sentence:\n        if char in letter_freq:\n            letter_freq[char] += 1\n        else:\n            letter_freq[char] = 1\n    \n    # Print the result\n    for char, freq in letter_freq.items():\n        print(f\"{char}: {freq}\")\n\nif __name__ == \"__main__\":\n    sentence = input(\"Enter a sentence: \")\n    letter_frequency( sentence )","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a short Python program which takes a sentence as input and prints the frequency of each letter in that sentence.\n\n### Input:\nI love programming\n\n### Output:\ndef letter_frequency(sentence):\n    # Count the frequency of each letter\n    letter_freq = {}\n    for char in sentence:\n        if char in letter_freq:\n            letter_freq[char] += 1\n        else:\n            letter_freq[char] = 1\n    \n    # Print the result\n    for char, freq in letter_freq.items():\n        print(f\"{char}: {freq}\")\n\nif __name__ == \"__main__\":\n    sentence = input(\"Enter a sentence: \")\n    letter_frequency( sentence )"}
{"instruction":"Create a Python program to find the minimum element in a BST.","input":"Tree in the form of:\n      4 \n   2     7\n  1 3   6 8","output":"def minValue(root):\n  if root is None: # check if tree is empty\n   return -1\n  curr = root         \n  while curr.left:   # until we reach the leftmost leaf\n   curr = curr.left\n  return curr.data\n\n# Driver Program \nif __name__ == '__main__':  \n  \n   root = Node(4) \n   root.left = Node(2) \n   root.right = Node(7) \n   root.left.left = Node(1) \n   root.left.right = Node(3) \n   root.right.left = Node(6) \n   root.right.right = Node(8) \n  \n   print \"Minimum Element in BST is %d\" %(minValue(root))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the minimum element in a BST.\n\n### Input:\nTree in the form of:\n      4 \n   2     7\n  1 3   6 8\n\n### Output:\ndef minValue(root):\n  if root is None: # check if tree is empty\n   return -1\n  curr = root         \n  while curr.left:   # until we reach the leftmost leaf\n   curr = curr.left\n  return curr.data\n\n# Driver Program \nif __name__ == '__main__':  \n  \n   root = Node(4) \n   root.left = Node(2) \n   root.right = Node(7) \n   root.left.left = Node(1) \n   root.left.right = Node(3) \n   root.right.left = Node(6) \n   root.right.right = Node(8) \n  \n   print \"Minimum Element in BST is %d\" %(minValue(root))"}
{"instruction":"Create a Python program to check if an integer is divisible by 5","input":"Integer : 10","output":"def is_divisible_by_5(number):\n    if (number % 5 == 0):\n        return True\n    else:\n        return False\n    \nnumber = 10\nis_divisible_by_5(number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to check if an integer is divisible by 5\n\n### Input:\nInteger : 10\n\n### Output:\ndef is_divisible_by_5(number):\n    if (number % 5 == 0):\n        return True\n    else:\n        return False\n    \nnumber = 10\nis_divisible_by_5(number)"}
{"instruction":"Generate a program in Python for a simple chatbot. The program should accept a user input and output a response using the input provided.","input":"Hello","output":"user_input = input(\"User: \")\n\nif user_input == \"Hello\":\n print(\"Chatbot: Hi there!\")\nelse:\n print(\"Chatbot: I'm not sure what you mean, please try again.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python for a simple chatbot. The program should accept a user input and output a response using the input provided.\n\n### Input:\nHello\n\n### Output:\nuser_input = input(\"User: \")\n\nif user_input == \"Hello\":\n print(\"Chatbot: Hi there!\")\nelse:\n print(\"Chatbot: I'm not sure what you mean, please try again.\")"}
{"instruction":"Write an efficient Python function to find the depth of a given binary tree","input":"Tree Node structure:\nclass TreeNode: \n      def __init__(self, val): \n          self.val = val  \n          self.left = None  \n          self.right = None \n\nRoot node of the tree - \nroot = TreeNode(1)\nroot.left = TreeNode(2) \nroot.right = TreeNode(3) \nroot.left.left = TreeNode(4) \nroot.left.right = TreeNode(5)","output":"def max_depth(node): \n    \n    if node is None: \n        return 0 ;  \n\n    else : \n  \n        # Compute the depth of each subtree \n        depth_left = max_depth(node.left) \n        depth_right = max_depth(node.right) \n  \n        # Use the larger one \n        if (depth_left > depth_right): \n            return depth_left+1\n        else: \n            return depth_right+1\n\ndepth = max_depth(root) \nprint (depth)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an efficient Python function to find the depth of a given binary tree\n\n### Input:\nTree Node structure:\nclass TreeNode: \n      def __init__(self, val): \n          self.val = val  \n          self.left = None  \n          self.right = None \n\nRoot node of the tree - \nroot = TreeNode(1)\nroot.left = TreeNode(2) \nroot.right = TreeNode(3) \nroot.left.left = TreeNode(4) \nroot.left.right = TreeNode(5)\n\n### Output:\ndef max_depth(node): \n    \n    if node is None: \n        return 0 ;  \n\n    else : \n  \n        # Compute the depth of each subtree \n        depth_left = max_depth(node.left) \n        depth_right = max_depth(node.right) \n  \n        # Use the larger one \n        if (depth_left > depth_right): \n            return depth_left+1\n        else: \n            return depth_right+1\n\ndepth = max_depth(root) \nprint (depth)"}
{"instruction":"Create a data structure in Python to calculate the most popular item over time.","input":"The items are python dictionaries in the form [{'name': 'item_a', 'count': 10}, {'name': 'item_b', 'count': 5}, {'name': 'item_c', 'count': 1}]","output":"from collections import defaultdict\n\ndef most_popular_item(data):\n    counts = defaultdict(int)\n    for item in data:\n        name = item['name']\n        counts[name] += item['count']\n\n    m = counts.get(max(counts, key=counts.get))\n    print(\"The most popular item is \" + m + \" with a count of \" + str(counts[m]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a data structure in Python to calculate the most popular item over time.\n\n### Input:\nThe items are python dictionaries in the form [{'name': 'item_a', 'count': 10}, {'name': 'item_b', 'count': 5}, {'name': 'item_c', 'count': 1}]\n\n### Output:\nfrom collections import defaultdict\n\ndef most_popular_item(data):\n    counts = defaultdict(int)\n    for item in data:\n        name = item['name']\n        counts[name] += item['count']\n\n    m = counts.get(max(counts, key=counts.get))\n    print(\"The most popular item is \" + m + \" with a count of \" + str(counts[m]))"}
{"instruction":"Write a Python function that takes a list of words as input and capitalizes the first character of each element in the list.","input":"[\"apple\", \"banana\", \"strawberry\"]","output":"def capitalize(words):\n  return [word.capitalize() for word in words]\n\ninput_words = [\"apple\", \"banana\", \"strawberry\"]\ncapitalized_words = capitalize(input_words)\nprint(capitalized_words)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes a list of words as input and capitalizes the first character of each element in the list.\n\n### Input:\n[\"apple\", \"banana\", \"strawberry\"]\n\n### Output:\ndef capitalize(words):\n  return [word.capitalize() for word in words]\n\ninput_words = [\"apple\", \"banana\", \"strawberry\"]\ncapitalized_words = capitalize(input_words)\nprint(capitalized_words)"}
{"instruction":"Translate the following Java code to Python","input":"for (int i = 0; i < n; i++)\n System.out.println(\"Hello World\");","output":"for i in range(n):\n print(\"Hello World\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTranslate the following Java code to Python\n\n### Input:\nfor (int i = 0; i < n; i++)\n System.out.println(\"Hello World\");\n\n### Output:\nfor i in range(n):\n print(\"Hello World\")"}
{"instruction":"Rearrange the following code so that it works in Python.","input":"y, x = x, y","output":"x, y = y, x","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRearrange the following code so that it works in Python.\n\n### Input:\ny, x = x, y\n\n### Output:\nx, y = y, x"}
{"instruction":"Create a code in Python to create a random binary tree.","input":"","output":"def create_tree(max_depth):\n    depth = random.randint(0, max_depth)\n    if depth == 0:\n        return random.choice([0, 1])\n    else:\n        left = create_tree(depth - 1)\n        right = create_tree(depth - 1)\n        return (left, right)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code in Python to create a random binary tree.\n\n### Input:\n\n\n### Output:\ndef create_tree(max_depth):\n    depth = random.randint(0, max_depth)\n    if depth == 0:\n        return random.choice([0, 1])\n    else:\n        left = create_tree(depth - 1)\n        right = create_tree(depth - 1)\n        return (left, right)"}
{"instruction":"Create a Python function that takes in a text string and returns a dictionary of words and the number of times each word appears in the text string.","input":"A quick brown fox jumps over the lazy dog","output":"def words_count(text):\n words_dict = {}\n for word in text.split(' '):\n if word in words_dict:\n words_dict[word] += 1\n else:\n words_dict[word] = 1\n return words_dict\n\nwords_dict = words_count(\"A quick brown fox jumps over the lazy dog\")\nprint(words_dict)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes in a text string and returns a dictionary of words and the number of times each word appears in the text string.\n\n### Input:\nA quick brown fox jumps over the lazy dog\n\n### Output:\ndef words_count(text):\n words_dict = {}\n for word in text.split(' '):\n if word in words_dict:\n words_dict[word] += 1\n else:\n words_dict[word] = 1\n return words_dict\n\nwords_dict = words_count(\"A quick brown fox jumps over the lazy dog\")\nprint(words_dict)"}
{"instruction":"Generate python code to clean up a string.","input":"This string includes non-letter characters. This includes %$#& etc.","output":"def clean_string(string):\n    excluded_characters = \"*&#$@!\"\n    cleaned_string = ''\n    for character in string:\n        if character not in excluded_characters:\n            cleaned_string += character\n    return cleaned_string","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate python code to clean up a string.\n\n### Input:\nThis string includes non-letter characters. This includes %$#& etc.\n\n### Output:\ndef clean_string(string):\n    excluded_characters = \"*&#$@!\"\n    cleaned_string = ''\n    for character in string:\n        if character not in excluded_characters:\n            cleaned_string += character\n    return cleaned_string"}
{"instruction":"Design a Python function that converts strings in any given sentence to a capitalized format.","input":"This is an example sentence","output":"def convertToCapitalize(sentence)\n    words = sentence.split()\n    capitalize = [word.capitalize() for word in words]\n    return \" \".join(capitalize)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python function that converts strings in any given sentence to a capitalized format.\n\n### Input:\nThis is an example sentence\n\n### Output:\ndef convertToCapitalize(sentence)\n    words = sentence.split()\n    capitalize = [word.capitalize() for word in words]\n    return \" \".join(capitalize)"}
{"instruction":"Write a Python program to insert an item at a given position into a list","input":"lst = [\"Red\", \"Orange\", \"Yellow\"]\nitem = \"Black\"\npos = 2","output":"def insert_item(lst, item, pos):\n    lst.insert(pos, item)\n    return lst\n\nlst = [\"Red\", \"Orange\", \"Yellow\"]\nitem = \"Black\"\npos = 2\n\nprint(insert_item(lst, item, pos))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to insert an item at a given position into a list\n\n### Input:\nlst = [\"Red\", \"Orange\", \"Yellow\"]\nitem = \"Black\"\npos = 2\n\n### Output:\ndef insert_item(lst, item, pos):\n    lst.insert(pos, item)\n    return lst\n\nlst = [\"Red\", \"Orange\", \"Yellow\"]\nitem = \"Black\"\npos = 2\n\nprint(insert_item(lst, item, pos))"}
{"instruction":"Create a program in Python to print out the elements in a list in reverse order.","input":"List = [\"A\", \"B\", \"C\", \"D\"]","output":"list = [\"A\", \"B\", \"C\", \"D\"]\n\nfor i in range(len(list)-1, -1, -1):\n    print(list[i])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to print out the elements in a list in reverse order.\n\n### Input:\nList = [\"A\", \"B\", \"C\", \"D\"]\n\n### Output:\nlist = [\"A\", \"B\", \"C\", \"D\"]\n\nfor i in range(len(list)-1, -1, -1):\n    print(list[i])"}
{"instruction":"Implement a REST API in Python for creating and reading users. The API should have endpoints for creating a user, reading all users, and reading a single user.","input":"Not applicable","output":"from flask import Flask, jsonify, request\nfrom flask_mysqldb import MySQL\n\napp = Flask(name)\n\n# Mysql configuration\napp.config['MYSQL_USER'] = 'root'\napp.config['MYSQL_PASSWORD'] = 'password'\napp.config['MYSQL_DB'] = 'users'\napp.config['MYSQL_CURSORCLASS'] = 'DictCursor'\n\nmysql = MySQL(app)\n\n@app.route('\/users', methods=['POST'])\ndef create_user():\n name = request.json['name']\n email = request.json['email']\n\n cur = mysql.connection.cursor()\n cur.execute(\"INSERT INTO users (name, email) VALUES (%s, %s)\", (name, email))\n mysql.connection.commit()\n cur.close()\n\n return jsonify({'message': 'User created'})\n\n@app.route('\/users', methods=['GET'])\ndef get_users():\n cur = mysql.connection.cursor()\n cur.execute(\"SELECT * FROM users\")\n users = cur.fetchall()\n cur.close()\n\n return jsonify(users)\n\n@app.route('\/users\/int:id', methods=['GET'])\ndef get_user(id):\n cur = mysql.connection.cursor()\n cur.execute(\"SELECT * FROM users WHERE id=%s\", (id))\n user = cur.fetchone()\n cur.close()\n\n return jsonify(user)\n\nif name == \"main\":\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a REST API in Python for creating and reading users. The API should have endpoints for creating a user, reading all users, and reading a single user.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, jsonify, request\nfrom flask_mysqldb import MySQL\n\napp = Flask(name)\n\n# Mysql configuration\napp.config['MYSQL_USER'] = 'root'\napp.config['MYSQL_PASSWORD'] = 'password'\napp.config['MYSQL_DB'] = 'users'\napp.config['MYSQL_CURSORCLASS'] = 'DictCursor'\n\nmysql = MySQL(app)\n\n@app.route('\/users', methods=['POST'])\ndef create_user():\n name = request.json['name']\n email = request.json['email']\n\n cur = mysql.connection.cursor()\n cur.execute(\"INSERT INTO users (name, email) VALUES (%s, %s)\", (name, email))\n mysql.connection.commit()\n cur.close()\n\n return jsonify({'message': 'User created'})\n\n@app.route('\/users', methods=['GET'])\ndef get_users():\n cur = mysql.connection.cursor()\n cur.execute(\"SELECT * FROM users\")\n users = cur.fetchall()\n cur.close()\n\n return jsonify(users)\n\n@app.route('\/users\/int:id', methods=['GET'])\ndef get_user(id):\n cur = mysql.connection.cursor()\n cur.execute(\"SELECT * FROM users WHERE id=%s\", (id))\n user = cur.fetchone()\n cur.close()\n\n return jsonify(user)\n\nif name == \"main\":\n app.run(debug=True)"}
{"instruction":"Generate a Python program to solve the following problem: given an array of integers, find the number of pairs of integers whose sum is equal to zero.","input":"[-5, -4, -2, 0, 2, 5]","output":"def pairs_sum_to_zero(array):\n  pairs = []\n  for i in range(len(array)):\n    for j in range(i+1, len(array)):\n      if array[i] + array[j] == 0:\n        pairs.append([array[i], array[j]])\n  return len(pairs)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to solve the following problem: given an array of integers, find the number of pairs of integers whose sum is equal to zero.\n\n### Input:\n[-5, -4, -2, 0, 2, 5]\n\n### Output:\ndef pairs_sum_to_zero(array):\n  pairs = []\n  for i in range(len(array)):\n    for j in range(i+1, len(array)):\n      if array[i] + array[j] == 0:\n        pairs.append([array[i], array[j]])\n  return len(pairs)"}
{"instruction":"Create a REST API in Python with Flask for a restaurant menu. The API should have endpoints for creating, updating, and deleting menu items.","input":"Not applicable","output":"from flask import Flask, request, json\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_marshmallow import Marshmallow\n\n# init Flask\napp = Flask(__name__)\n\n# Database init\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:\/\/\/database.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n\n# Marshmallow init\nma = Marshmallow(app)\n\n# Create MenuItem model\nclass MenuItem(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(100))\n description = db.Column(db.String(200))\n \n def __init__(self, name, description):\n self.name = name\n self.description = description\n\n# Create MenuItemSchema\nclass MenuItemSchema(ma.Schema):\n class Meta:\n   fields = ('id', 'name', 'description')\n\n# Init Schema\nmenu_item_schema = MenuItemSchema()\nmenu_items_schema = MenuItemSchema(many=True)\n\n# Create endpoints\n@app.route('\/menu_items\/create')\ndef create_menu_item():\n name = request.json['name']\n description = request.json['description']\n \n new_menu_item = User(name, description)\n \n db.session.add(new_menu_item)\n db.session.commit()\n \n return menu_item_schema.jsonify(new_menu_item)\n\n@app.route('\/menu_items\/<id>\/update', methods=['PUT'])\ndef update_menu_item(id):\n menu_item = MenuItem.query.get(id)\n \n name = request.json['name']\n description = request.json['description']\n \n menu_item.name = name\n menu_item.description = description\n \n db.session.commit()\n \n return menu_item_schema.jsonify(menu_item)\n\n@app.route('\/menu_items\/<id>\/delete', methods=['DELETE'])\ndef delete_menu_item(id):\n menu_item = MenuItem.query.get(id)\n \n db.session.delete(menu_item)\n db.session.commit()\n \n return json.dumps({'success': True})\n\n# Run the app\nif __name__ == '__main__':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API in Python with Flask for a restaurant menu. The API should have endpoints for creating, updating, and deleting menu items.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request, json\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_marshmallow import Marshmallow\n\n# init Flask\napp = Flask(__name__)\n\n# Database init\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:\/\/\/database.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n\n# Marshmallow init\nma = Marshmallow(app)\n\n# Create MenuItem model\nclass MenuItem(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(100))\n description = db.Column(db.String(200))\n \n def __init__(self, name, description):\n self.name = name\n self.description = description\n\n# Create MenuItemSchema\nclass MenuItemSchema(ma.Schema):\n class Meta:\n   fields = ('id', 'name', 'description')\n\n# Init Schema\nmenu_item_schema = MenuItemSchema()\nmenu_items_schema = MenuItemSchema(many=True)\n\n# Create endpoints\n@app.route('\/menu_items\/create')\ndef create_menu_item():\n name = request.json['name']\n description = request.json['description']\n \n new_menu_item = User(name, description)\n \n db.session.add(new_menu_item)\n db.session.commit()\n \n return menu_item_schema.jsonify(new_menu_item)\n\n@app.route('\/menu_items\/<id>\/update', methods=['PUT'])\ndef update_menu_item(id):\n menu_item = MenuItem.query.get(id)\n \n name = request.json['name']\n description = request.json['description']\n \n menu_item.name = name\n menu_item.description = description\n \n db.session.commit()\n \n return menu_item_schema.jsonify(menu_item)\n\n@app.route('\/menu_items\/<id>\/delete', methods=['DELETE'])\ndef delete_menu_item(id):\n menu_item = MenuItem.query.get(id)\n \n db.session.delete(menu_item)\n db.session.commit()\n \n return json.dumps({'success': True})\n\n# Run the app\nif __name__ == '__main__':\n app.run(debug=True)"}
{"instruction":"Develop a program in Python to compute the maximum contiguous subarray sum.","input":"[-3, 2, 5, -1, 6, 3, -2]","output":"def maxSubArraySum(arr):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n    \n    for i in range(1, len(arr)):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n        \n    return max_so_far","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python to compute the maximum contiguous subarray sum.\n\n### Input:\n[-3, 2, 5, -1, 6, 3, -2]\n\n### Output:\ndef maxSubArraySum(arr):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n    \n    for i in range(1, len(arr)):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n        \n    return max_so_far"}
{"instruction":"Given an integer n, write a Python program to convert n to roman numeral.","input":"n = 35","output":"def int_to_Roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num \/\/ val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n\nprint(int_to_Roman(num))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an integer n, write a Python program to convert n to roman numeral.\n\n### Input:\nn = 35\n\n### Output:\ndef int_to_Roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num \/\/ val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n\nprint(int_to_Roman(num))"}
{"instruction":"Suggest an implementation for the following class declaration in Python.","input":"class Profile:","output":"class Profile:\n    def __init__(self, first_name, last_name, occupation):\n        self.first_name = first_name \n        self.last_name = last_name \n        self.occupation = occupation \n        \n    def full_name(self): \n        return self.first_name + \" \" + self.last_name","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest an implementation for the following class declaration in Python.\n\n### Input:\nclass Profile:\n\n### Output:\nclass Profile:\n    def __init__(self, first_name, last_name, occupation):\n        self.first_name = first_name \n        self.last_name = last_name \n        self.occupation = occupation \n        \n    def full_name(self): \n        return self.first_name + \" \" + self.last_name"}
{"instruction":"Write a Python code snippet to flatten the given list.","input":"my_list = [2, 3, [4, 5, [6]], [7, 8]]","output":"my_list = [2, 3, [4, 5, [6]], [7, 8]]\nnew_list = []\ndef flatten(lst):\n    for item in lst:\n        if isinstance(item, list):\n            flatten(item)\n        else:\n            new_list.append(item)\n\nflatten(my_list)\nprint(new_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code snippet to flatten the given list.\n\n### Input:\nmy_list = [2, 3, [4, 5, [6]], [7, 8]]\n\n### Output:\nmy_list = [2, 3, [4, 5, [6]], [7, 8]]\nnew_list = []\ndef flatten(lst):\n    for item in lst:\n        if isinstance(item, list):\n            flatten(item)\n        else:\n            new_list.append(item)\n\nflatten(my_list)\nprint(new_list)"}
{"instruction":"Create a Python code to solve the given optimization problem:\n\nMinimize: f(x,y) = (x - 1)2 + (2y - 3)2\n\nSubject to: x + 2y = 6","input":"","output":"\"\"\"\nSolve an optimization problem with one constraint\n\"\"\"\n\nimport scipy.optimize as opt\n\ndef minimize_func(x):\n    return (x[0]-1)**2 + (2*x[1]-3)**2\n\ndef constraint_func(x, sign=1):\n    return sign * (x[0] + (2*x[1])-6)\n\ndef solve_optimization():\n    # define constraints \n    constraints = (\n        {'type': 'eq', 'fun': constraint_func},\n    )\n    # set initial values to (0,0) \n    x0 = (0,0)\n    # use BFGS algorithm for optimization \n    solution = opt.minimize(minimize_func, x0, method='SLSQP', constraints=constraints)\n    return solution\n\nif __name__ == \"__main__\":\n    solution = solve_optimization()\n    print(solution.x) # => [3. 2.]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code to solve the given optimization problem:\n\nMinimize: f(x,y) = (x - 1)2 + (2y - 3)2\n\nSubject to: x + 2y = 6\n\n### Input:\n\n\n### Output:\n\"\"\"\nSolve an optimization problem with one constraint\n\"\"\"\n\nimport scipy.optimize as opt\n\ndef minimize_func(x):\n    return (x[0]-1)**2 + (2*x[1]-3)**2\n\ndef constraint_func(x, sign=1):\n    return sign * (x[0] + (2*x[1])-6)\n\ndef solve_optimization():\n    # define constraints \n    constraints = (\n        {'type': 'eq', 'fun': constraint_func},\n    )\n    # set initial values to (0,0) \n    x0 = (0,0)\n    # use BFGS algorithm for optimization \n    solution = opt.minimize(minimize_func, x0, method='SLSQP', constraints=constraints)\n    return solution\n\nif __name__ == \"__main__\":\n    solution = solve_optimization()\n    print(solution.x) # => [3. 2.]"}
{"instruction":"Create a Python program to search for a given item in a list of strings.","input":"[\"hello\", \"world\", \"foo\", \"bar\"], \"bar\"","output":"def search_for_item(strings, item):\n    for string in strings:\n        if string == item:\n            return True\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to search for a given item in a list of strings.\n\n### Input:\n[\"hello\", \"world\", \"foo\", \"bar\"], \"bar\"\n\n### Output:\ndef search_for_item(strings, item):\n    for string in strings:\n        if string == item:\n            return True\n    return False"}
{"instruction":"Write a Python program to accept user input as a string and check if the user input is a palindrome (a word, phrase, or sequence that reads the same backward as forward).","input":"\"radar\"","output":"input_word = input(\"Enter a word: \")\n\ndef is_palindrome(word):\n word = word.lower()\n reversed_word = word[::-1]\n\n if reversed_word == word:\n return True\n else:\n return False\n\nprint(is_palindrome(input_word))\n# Output: True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to accept user input as a string and check if the user input is a palindrome (a word, phrase, or sequence that reads the same backward as forward).\n\n### Input:\n\"radar\"\n\n### Output:\ninput_word = input(\"Enter a word: \")\n\ndef is_palindrome(word):\n word = word.lower()\n reversed_word = word[::-1]\n\n if reversed_word == word:\n return True\n else:\n return False\n\nprint(is_palindrome(input_word))\n# Output: True"}
{"instruction":"Rewrite a python function from a set of instructions using list comprehension.","input":"Define a function that takes a list of numbers and returns a list containing only the odd numbers from the given list.","output":"def odd_numbers(numbers):\n return [n for n in numbers if n % 2 != 0]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite a python function from a set of instructions using list comprehension.\n\n### Input:\nDefine a function that takes a list of numbers and returns a list containing only the odd numbers from the given list.\n\n### Output:\ndef odd_numbers(numbers):\n return [n for n in numbers if n % 2 != 0]"}
{"instruction":"Create a Python program to send an email with a custom message.","input":"","output":"import smtplib \n# creates SMTP session \ns = smtplib.SMTP('smtp.gmail.com', 587) \n# start TLS for security \ns.starttls() \n# Authentication \ns.login(\"Your Email\", \"Your Password\") \n# message to be sent \nmessage = \"Segment your emails according to their purpose.\"\n# sending the mail \ns.sendmail(\"SenderMail\", \"ReceiverMail\", message) \n# terminating the session \ns.quit()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to send an email with a custom message.\n\n### Input:\n\n\n### Output:\nimport smtplib \n# creates SMTP session \ns = smtplib.SMTP('smtp.gmail.com', 587) \n# start TLS for security \ns.starttls() \n# Authentication \ns.login(\"Your Email\", \"Your Password\") \n# message to be sent \nmessage = \"Segment your emails according to their purpose.\"\n# sending the mail \ns.sendmail(\"SenderMail\", \"ReceiverMail\", message) \n# terminating the session \ns.quit()"}
{"instruction":"Create a Python program to generate random passwords of 8 alphanumeric characters.","input":"","output":"import string\nimport random\n\ndef generate_password():\n    letters = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters) for i in range(8))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate random passwords of 8 alphanumeric characters.\n\n### Input:\n\n\n### Output:\nimport string\nimport random\n\ndef generate_password():\n    letters = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters) for i in range(8))"}
{"instruction":"Write a Python program to apply a function to all the elements of a given list and return the mapped list.","input":"[1, 2, 3, 4, 5]","output":"def applyFunc(lst, func):\n    mapped_list = []\n    for el in lst:\n        mapped_list.append(func(el))\n    return mapped_list\n\ndef square(x):\n    return x*x\n\nlst = [1, 2, 3, 4, 5]\n\nprint(applyFunc(lst, square))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to apply a function to all the elements of a given list and return the mapped list.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef applyFunc(lst, func):\n    mapped_list = []\n    for el in lst:\n        mapped_list.append(func(el))\n    return mapped_list\n\ndef square(x):\n    return x*x\n\nlst = [1, 2, 3, 4, 5]\n\nprint(applyFunc(lst, square))"}
{"instruction":"Implement a bubble sort algorithm in Python","input":"<no input>","output":"def bubble_sort(arr):\n    # Traverse through all array elements \n    for i in range(len(arr)): \n        # Last i elements are already in place \n        for j in range(0, len(arr)-i-1): \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n    return arr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a bubble sort algorithm in Python\n\n### Input:\n<no input>\n\n### Output:\ndef bubble_sort(arr):\n    # Traverse through all array elements \n    for i in range(len(arr)): \n        # Last i elements are already in place \n        for j in range(0, len(arr)-i-1): \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n    return arr"}
{"instruction":"Program a function in Python that takes a string and capitalizes the first letter of each word.","input":"","output":"def capitalize_words(string):\n  words = string.split()\n  capitalized_words = [word.capitalize() for word in words]\n  return ' '.join(capitalized_words)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProgram a function in Python that takes a string and capitalizes the first letter of each word.\n\n### Input:\n\n\n### Output:\ndef capitalize_words(string):\n  words = string.split()\n  capitalized_words = [word.capitalize() for word in words]\n  return ' '.join(capitalized_words)"}
{"instruction":"Sort a list in descending order using a lambda function in Python.","input":"Input list : [1, 5, -9, 8, 21]","output":"list = [1, 5, -9, 8, 21]\nsorted_list = sorted(list, reverse=True, key= lambda x:x)\nprint(sorted_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSort a list in descending order using a lambda function in Python.\n\n### Input:\nInput list : [1, 5, -9, 8, 21]\n\n### Output:\nlist = [1, 5, -9, 8, 21]\nsorted_list = sorted(list, reverse=True, key= lambda x:x)\nprint(sorted_list)"}
{"instruction":"Create a basic Python script that takes in a text string as input, counts the frequency of each word, and prints out the top 5 most frequent words.","input":"Not applicable","output":"import collections\nimport sys\n\ndef count_words(text):\n word_counts = collections.Counter(text.split())\n top_five = word_counts.most_common(5)\n for word, count in top_five:\n print(f'{word} occurred {count} times')\n\nif __name__ == '__main__':\n text = sys.stdin.read()\n count_words(text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Python script that takes in a text string as input, counts the frequency of each word, and prints out the top 5 most frequent words.\n\n### Input:\nNot applicable\n\n### Output:\nimport collections\nimport sys\n\ndef count_words(text):\n word_counts = collections.Counter(text.split())\n top_five = word_counts.most_common(5)\n for word, count in top_five:\n print(f'{word} occurred {count} times')\n\nif __name__ == '__main__':\n text = sys.stdin.read()\n count_words(text)"}
{"instruction":"Write a Python program to scramble a given word.","input":"listen","output":"import random \n  \n# Function to scramble a given word \ndef scramble(word):  \n    # Define all the possible chars in the word \n    chars = list(word)  \n  \n    # Get a random permutation of the characters \n    random.shuffle(chars) \n  \n    # Construct the scrambled word \n    scramble_word = ''.join(chars)  \n  \n    return scramble_word \n\n# Driver code \nword = 'listen'\nscrambled = scramble(word) \n  \nprint(word + \" scrambled becomes: \" + scrambled)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to scramble a given word.\n\n### Input:\nlisten\n\n### Output:\nimport random \n  \n# Function to scramble a given word \ndef scramble(word):  \n    # Define all the possible chars in the word \n    chars = list(word)  \n  \n    # Get a random permutation of the characters \n    random.shuffle(chars) \n  \n    # Construct the scrambled word \n    scramble_word = ''.join(chars)  \n  \n    return scramble_word \n\n# Driver code \nword = 'listen'\nscrambled = scramble(word) \n  \nprint(word + \" scrambled becomes: \" + scrambled)"}
{"instruction":"Write an efficient function in Python to check if a number is Armstrong number or not.","input":"","output":"def isArmstrongNumber(n):\n    length = len(str(n))\n    total = 0\n\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** length\n        temp \/\/= 10\n    return n == total","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an efficient function in Python to check if a number is Armstrong number or not.\n\n### Input:\n\n\n### Output:\ndef isArmstrongNumber(n):\n    length = len(str(n))\n    total = 0\n\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** length\n        temp \/\/= 10\n    return n == total"}
{"instruction":"Create a Python program to reverse a string.","input":"Hello","output":"def reverse_string(string):\n    reversed_string = \"\"\n    for c in string:\n        reversed_string = c + reversed_string\n    return reversed_string\n\nstring = \"Hello\"\nprint(reverse_string(string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to reverse a string.\n\n### Input:\nHello\n\n### Output:\ndef reverse_string(string):\n    reversed_string = \"\"\n    for c in string:\n        reversed_string = c + reversed_string\n    return reversed_string\n\nstring = \"Hello\"\nprint(reverse_string(string))"}
{"instruction":"Write a python code to merge two sorted linked lists into one.","input":"","output":"class Node:\n    def __init__(self, value):\n        self.data = value\n        self.next = None\n \n \ndef merge_sorted_lists(head_a, head_b):\n    # Create a new linked list.\n    new_list = Node(None)\n    tail = new_list\n \n    current_a = head_a\n    current_b = head_b\n \n    while current_a is not None or current_b is not None:\n        if current_a is None:\n            tail.next = current_b\n            current_b = current_b.next\n        elif current_b is None:\n            tail.next = current_a\n            current_a = current_a.next\n        elif current_a.data <= current_b.data:\n            tail.next = current_a\n            current_a = current_a.next\n        else:\n            tail.next = current_b\n            current_b = current_b.next\n        tail = tail.next\n \n    return new_list.next","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to merge two sorted linked lists into one.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, value):\n        self.data = value\n        self.next = None\n \n \ndef merge_sorted_lists(head_a, head_b):\n    # Create a new linked list.\n    new_list = Node(None)\n    tail = new_list\n \n    current_a = head_a\n    current_b = head_b\n \n    while current_a is not None or current_b is not None:\n        if current_a is None:\n            tail.next = current_b\n            current_b = current_b.next\n        elif current_b is None:\n            tail.next = current_a\n            current_a = current_a.next\n        elif current_a.data <= current_b.data:\n            tail.next = current_a\n            current_a = current_a.next\n        else:\n            tail.next = current_b\n            current_b = current_b.next\n        tail = tail.next\n \n    return new_list.next"}
{"instruction":"Devise an algorithm in Python to determine if a given number is even or odd.","input":"","output":"def is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevise an algorithm in Python to determine if a given number is even or odd.\n\n### Input:\n\n\n### Output:\ndef is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False"}
{"instruction":"Construct a Python script to classify some data according to the given conditions.","input":"data = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\nconditions = [['A','B','C'],[ 'D','E','F'],[ 'G', 'H', 'I'],[ 'J'] ]","output":"import itertools \ndef classify_data(data, conditions): \n    # using itertools to create a list of \n\t# all possible combinations \n    combinations = list(itertools.chain( \n\t\t\t*[itertools.combinations(x, r = 1) \n\t\t\t\tfor x in conditions])) \n\t\n\t# initializing the result \n\t# with an empty list \n    result = [] \n\t\n\t# traversing over the combinations \n\t# and finding the corresponding data \n    for combination in combinations: \n\t\t\n\t\t# initializing a list to store \n\t\t# the data \n        corresponding_data = [] \n\t\t\n\t\t# traversing over the given data \n        for char in data: \n\t\t\t\n\t\t\t# if a character is present in \n\t\t\t# the combination, add it to \n\t\t\t# the corresponding_data \n            if char in combination: \n                corresponding_data.append(char) \n\t\t\n\t\t# inserting the corresponding data \n\t\t# inside the result and remove \n\t\t# the data from the data list \n        result.append(corresponding_data) \n        data[:] = [x for x in data if x not in corresponding_data] \n\t\n\t# returning the result \n    return result \n\n# Driver Code \ndata = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\nconditions = [['A','B','C'],[ 'D','E','F'],[ 'G', 'H', 'I'],[ 'J'] ]\n\nprint(classify_data(data, conditions))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python script to classify some data according to the given conditions.\n\n### Input:\ndata = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\nconditions = [['A','B','C'],[ 'D','E','F'],[ 'G', 'H', 'I'],[ 'J'] ]\n\n### Output:\nimport itertools \ndef classify_data(data, conditions): \n    # using itertools to create a list of \n\t# all possible combinations \n    combinations = list(itertools.chain( \n\t\t\t*[itertools.combinations(x, r = 1) \n\t\t\t\tfor x in conditions])) \n\t\n\t# initializing the result \n\t# with an empty list \n    result = [] \n\t\n\t# traversing over the combinations \n\t# and finding the corresponding data \n    for combination in combinations: \n\t\t\n\t\t# initializing a list to store \n\t\t# the data \n        corresponding_data = [] \n\t\t\n\t\t# traversing over the given data \n        for char in data: \n\t\t\t\n\t\t\t# if a character is present in \n\t\t\t# the combination, add it to \n\t\t\t# the corresponding_data \n            if char in combination: \n                corresponding_data.append(char) \n\t\t\n\t\t# inserting the corresponding data \n\t\t# inside the result and remove \n\t\t# the data from the data list \n        result.append(corresponding_data) \n        data[:] = [x for x in data if x not in corresponding_data] \n\t\n\t# returning the result \n    return result \n\n# Driver Code \ndata = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\nconditions = [['A','B','C'],[ 'D','E','F'],[ 'G', 'H', 'I'],[ 'J'] ]\n\nprint(classify_data(data, conditions))"}
{"instruction":"Write a Python function to create a list containing the squares of numbers up to n.","input":"","output":"def squares(n):\n    return [x*x for x in range(1,n+1)]\n\nprint(squares(10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to create a list containing the squares of numbers up to n.\n\n### Input:\n\n\n### Output:\ndef squares(n):\n    return [x*x for x in range(1,n+1)]\n\nprint(squares(10))"}
{"instruction":"Create an API endpoint in Python Flask to add two numbers. This API should accept two numbers as Formula Parameters and should return the addition of those two numbers.","input":"num1 = 4\nnum2 = 5","output":"from flask import Flask, request\napp = Flask(__name__)\n\n@app.route('\/add', methods=['GET'])\ndef add():\n num1 = float(request.args.get('num1'))\n num2 = float(request.args.get('num2'))\n\n sum = num1 + num2\n\n return str(sum)\n\nif __name__ == '__main__':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API endpoint in Python Flask to add two numbers. This API should accept two numbers as Formula Parameters and should return the addition of those two numbers.\n\n### Input:\nnum1 = 4\nnum2 = 5\n\n### Output:\nfrom flask import Flask, request\napp = Flask(__name__)\n\n@app.route('\/add', methods=['GET'])\ndef add():\n num1 = float(request.args.get('num1'))\n num2 = float(request.args.get('num2'))\n\n sum = num1 + num2\n\n return str(sum)\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"instruction":"Design a Python script to merge two sorted arrays into one.","input":"","output":"def merge_arrays(arr1, arr2):\n    len1, len2 = len(arr1), len(arr2)\n    \n    # initialize empty result list and pointers to traverse the both array\n    arr_merged, i, j = [], 0, 0\n    \n    # traverse both array and compare the element\n    # append the lesser one to result\n    while i < len1 and j < len2:\n        if arr1[i] < arr2[j]:\n            arr_merged.append(arr1[i])\n            i += 1\n        else:\n            arr_merged.append(arr2[j])\n            j += 1\n    \n    # append remaining elements(if any) of faster completed array to result\n    while i < len1:\n        arr_merged.append(arr1[i])\n        i += 1\n    while j < len2:\n        arr_merged.append(arr2[j])\n        j += 1\n    return arr_merged","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script to merge two sorted arrays into one.\n\n### Input:\n\n\n### Output:\ndef merge_arrays(arr1, arr2):\n    len1, len2 = len(arr1), len(arr2)\n    \n    # initialize empty result list and pointers to traverse the both array\n    arr_merged, i, j = [], 0, 0\n    \n    # traverse both array and compare the element\n    # append the lesser one to result\n    while i < len1 and j < len2:\n        if arr1[i] < arr2[j]:\n            arr_merged.append(arr1[i])\n            i += 1\n        else:\n            arr_merged.append(arr2[j])\n            j += 1\n    \n    # append remaining elements(if any) of faster completed array to result\n    while i < len1:\n        arr_merged.append(arr1[i])\n        i += 1\n    while j < len2:\n        arr_merged.append(arr2[j])\n        j += 1\n    return arr_merged"}
{"instruction":"Create a Python script that takes in a string and outputs a list of all permutations of the string.","input":"String: \"ABC\"","output":"def permute(str):\n  # base case\n  if len(str) == 0:\n    return ['']\n  \n  prev_list = permute(str[1:])\n  \n  curr_list = []\n  first_char = str[0]\n  \n  # iterate over previous list and place first character \n  # at every possible position in every string\n  for s in prev_list:\n    for i in range(len(s)+1):\n      temp = s[:i] + first_char + s[i:]\n      curr_list.append(temp)\n  \n  return curr_list\n\n# test case\nprint(permute('ABC'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes in a string and outputs a list of all permutations of the string.\n\n### Input:\nString: \"ABC\"\n\n### Output:\ndef permute(str):\n  # base case\n  if len(str) == 0:\n    return ['']\n  \n  prev_list = permute(str[1:])\n  \n  curr_list = []\n  first_char = str[0]\n  \n  # iterate over previous list and place first character \n  # at every possible position in every string\n  for s in prev_list:\n    for i in range(len(s)+1):\n      temp = s[:i] + first_char + s[i:]\n      curr_list.append(temp)\n  \n  return curr_list\n\n# test case\nprint(permute('ABC'))"}
{"instruction":"Construct a class for a triangle in the Python language.","input":"","output":"class Triangle:\n    def __init__(self, side1, side2, side3):\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n    \n    def get_perimeter(self):\n        return self.side1 + self.side2 + self.side3\n    \n    def get_area(self):\n        s = self.get_perimeter() \/ 2\n        return (s * (s-self.side1) * (s-self.side2) * (s-self.side3)) ** 0.5","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a class for a triangle in the Python language.\n\n### Input:\n\n\n### Output:\nclass Triangle:\n    def __init__(self, side1, side2, side3):\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n    \n    def get_perimeter(self):\n        return self.side1 + self.side2 + self.side3\n    \n    def get_area(self):\n        s = self.get_perimeter() \/ 2\n        return (s * (s-self.side1) * (s-self.side2) * (s-self.side3)) ** 0.5"}
{"instruction":"Take two matrices, A and B, and produce a matrix C where each element is the product of the corresponding elements of A and B.","input":"A = [[3, 4], \n     [1, 2]]\nB = [[7, 5],\n     [0, 1]]","output":"# Python\ndef matrixMultiplication(A, B):\n    if len(A[0]) != len(B):\n        return \"Matrix multiplication not possible\"\n\n    C = [[0 for i in range(len(A[0]))] for j in range(len(B[0]))]\n\n    for i in range(len(A)):\n        for j in range(len(B[0])):\n            for k in range(len(B)):\n                C[i][j] += A[i][k] * B[k][j]\n\n    return C\n\nA = [[3, 4], \n     [1, 2]]\nB = [[7, 5],\n     [0, 1]]\nC = matrixMultiplication(A, B)\n\nprint(C) # Output = [[21, 17], [0, 2]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTake two matrices, A and B, and produce a matrix C where each element is the product of the corresponding elements of A and B.\n\n### Input:\nA = [[3, 4], \n     [1, 2]]\nB = [[7, 5],\n     [0, 1]]\n\n### Output:\n# Python\ndef matrixMultiplication(A, B):\n    if len(A[0]) != len(B):\n        return \"Matrix multiplication not possible\"\n\n    C = [[0 for i in range(len(A[0]))] for j in range(len(B[0]))]\n\n    for i in range(len(A)):\n        for j in range(len(B[0])):\n            for k in range(len(B)):\n                C[i][j] += A[i][k] * B[k][j]\n\n    return C\n\nA = [[3, 4], \n     [1, 2]]\nB = [[7, 5],\n     [0, 1]]\nC = matrixMultiplication(A, B)\n\nprint(C) # Output = [[21, 17], [0, 2]]"}
{"instruction":"Write a Python function to compute the length of each element in the given list.","input":"list = [5, 10, 15]","output":"def list_length(list):\n  for element in list:\n    print(len(element))\n\nlist_length(list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to compute the length of each element in the given list.\n\n### Input:\nlist = [5, 10, 15]\n\n### Output:\ndef list_length(list):\n  for element in list:\n    print(len(element))\n\nlist_length(list)"}
{"instruction":"Design a Python program for finding the median of a given list of numbers.","input":"[7, 4, 5, 2, 10]","output":"def find_median(lst):\n    lst.sort()\n    if len(lst)%2 == 0:\n        median1 = lst[len(lst)\/\/2]\n        median2 = lst[len(lst)\/\/2 - 1]\n        median = float(median1 + median2) \/ 2\n    else:\n        median = lst[len(lst)\/\/2]\n    return median\n\nresult = find_median([7, 4, 5, 2, 10])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program for finding the median of a given list of numbers.\n\n### Input:\n[7, 4, 5, 2, 10]\n\n### Output:\ndef find_median(lst):\n    lst.sort()\n    if len(lst)%2 == 0:\n        median1 = lst[len(lst)\/\/2]\n        median2 = lst[len(lst)\/\/2 - 1]\n        median = float(median1 + median2) \/ 2\n    else:\n        median = lst[len(lst)\/\/2]\n    return median\n\nresult = find_median([7, 4, 5, 2, 10])\nprint(result)"}
{"instruction":"Design a Python program to calculate the area of a triangle given three side lengths.","input":"3, 4, 5","output":"def calculate_triangle_area(a, b, c):\n    # Calculate the semi-perimeter\n    s = (a + b + c) \/ 2\n    # Calculate the area of the triangle\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\n\na = 3\nb = 4\nc = 5\n\narea = calculate_triangle_area(a, b, c)\nprint(\"Area of the triangle is: {}\".format(area))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to calculate the area of a triangle given three side lengths.\n\n### Input:\n3, 4, 5\n\n### Output:\ndef calculate_triangle_area(a, b, c):\n    # Calculate the semi-perimeter\n    s = (a + b + c) \/ 2\n    # Calculate the area of the triangle\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\n\na = 3\nb = 4\nc = 5\n\narea = calculate_triangle_area(a, b, c)\nprint(\"Area of the triangle is: {}\".format(area))"}
{"instruction":"Construct a machine learning model in Python to classify cancer tumor imaging data into benign or malignant.","input":"","output":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\n\n# Load the data\ndata = pd.read_csv('cancer_data.csv')\n\n# Define features and targets\nX = data.drop('diagnosis', axis=1).values\ny = data.diagnosis.values\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Standardize the data\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# Create and train the SVM model\nsvc = SVC()\nsvc.fit(X_train_scaled, y_train)\n\n# Evaluate the model\naccuracy = svc.score(X_test_scaled, y_test)\nprint(\"The model accuracy is {}%\".format(round(accuracy * 100, 2)))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a machine learning model in Python to classify cancer tumor imaging data into benign or malignant.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\n\n# Load the data\ndata = pd.read_csv('cancer_data.csv')\n\n# Define features and targets\nX = data.drop('diagnosis', axis=1).values\ny = data.diagnosis.values\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Standardize the data\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# Create and train the SVM model\nsvc = SVC()\nsvc.fit(X_train_scaled, y_train)\n\n# Evaluate the model\naccuracy = svc.score(X_test_scaled, y_test)\nprint(\"The model accuracy is {}%\".format(round(accuracy * 100, 2)))"}
{"instruction":"Identify and fix the bug in the following Python code.","input":"def remove_duplicates(ls):\n    result = []\n    for e in ls:\n        if e not in result:\n            result.append(e)\n    return result","output":"def remove_duplicates(ls):\n    result = []\n    for e in ls:\n        if e not in result:\n            result.append(e)\n    return list(set(result))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIdentify and fix the bug in the following Python code.\n\n### Input:\ndef remove_duplicates(ls):\n    result = []\n    for e in ls:\n        if e not in result:\n            result.append(e)\n    return result\n\n### Output:\ndef remove_duplicates(ls):\n    result = []\n    for e in ls:\n        if e not in result:\n            result.append(e)\n    return list(set(result))"}
{"instruction":"Can you create an algorithm in Python for reversing an integer?","input":"x = 2435","output":"def reverseInteger(x): \n     \n    reversed = 0\n    while(x > 0): \n        reminder = x % 10\n        reversed = (reversed * 10) + reminder \n        x = x \/\/ 10\n    return reversed \n\nx = 2435\nres = reverseInteger(x) \nprint(res)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you create an algorithm in Python for reversing an integer?\n\n### Input:\nx = 2435\n\n### Output:\ndef reverseInteger(x): \n     \n    reversed = 0\n    while(x > 0): \n        reminder = x % 10\n        reversed = (reversed * 10) + reminder \n        x = x \/\/ 10\n    return reversed \n\nx = 2435\nres = reverseInteger(x) \nprint(res)"}
{"instruction":"Construct a Python code segment that sorts a list of numbers in a non-decreasing order","input":"[2, 9, 6, 4, 5]","output":"# Bubble Sort\ndef bubble_sort(numbers): \n  \n    # Traverse through all array elements \n    for i in range(len(numbers)): \n  \n        # Last i elements are already in place \n        for j in range(0, len(numbers)-i-1): \n                # traverse the array from 0 to n-i-1 \n                # Swap if the element found is greater \n                # than the next element \n                if numbers[j] > numbers[j+1] : \n                    numbers[j], numbers[j+1] = numbers[j+1], numbers[j] \n  \nnumbers = [2, 9, 6, 4, 5]\nbubble_sort(numbers)\n\nprint (\"Sorted array is:\")\nfor i in range(len(numbers)): \n    print (\"%d\" %numbers[i]),","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python code segment that sorts a list of numbers in a non-decreasing order\n\n### Input:\n[2, 9, 6, 4, 5]\n\n### Output:\n# Bubble Sort\ndef bubble_sort(numbers): \n  \n    # Traverse through all array elements \n    for i in range(len(numbers)): \n  \n        # Last i elements are already in place \n        for j in range(0, len(numbers)-i-1): \n                # traverse the array from 0 to n-i-1 \n                # Swap if the element found is greater \n                # than the next element \n                if numbers[j] > numbers[j+1] : \n                    numbers[j], numbers[j+1] = numbers[j+1], numbers[j] \n  \nnumbers = [2, 9, 6, 4, 5]\nbubble_sort(numbers)\n\nprint (\"Sorted array is:\")\nfor i in range(len(numbers)): \n    print (\"%d\" %numbers[i]),"}
{"instruction":"Write a Python program for a smart search engine. The program should take a query as input and return the most relevant result.","input":"Not applicable","output":"import json\nimport requests\n \ndef search_engine(query):\n \n # Make a request to the search engine API\n r = requests.get('http:\/\/search-engine.com\/api\/search', params={'query': query})\n \n # Parse the response\n response = json.loads(r.text)\n \n # Return the most relevant result\n return response['results'][0]\n \nsearch_engine('python programming')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program for a smart search engine. The program should take a query as input and return the most relevant result.\n\n### Input:\nNot applicable\n\n### Output:\nimport json\nimport requests\n \ndef search_engine(query):\n \n # Make a request to the search engine API\n r = requests.get('http:\/\/search-engine.com\/api\/search', params={'query': query})\n \n # Parse the response\n response = json.loads(r.text)\n \n # Return the most relevant result\n return response['results'][0]\n \nsearch_engine('python programming')"}
{"instruction":"Create a function in Python to take two numerical values and return true if one is divisible by the other.","input":"number1 = 10\nnumber2 = 3","output":"def isDivisible(a, b):\n  return a % b == 0\n\nprint(isDivisible(number1, number2)) #True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to take two numerical values and return true if one is divisible by the other.\n\n### Input:\nnumber1 = 10\nnumber2 = 3\n\n### Output:\ndef isDivisible(a, b):\n  return a % b == 0\n\nprint(isDivisible(number1, number2)) #True"}
{"instruction":"Optimize a recursive Fibonacci sequence program written in Python.","input":"def Fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2)","output":"def Fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for i in range(2,n+1):\n            c = a + b\n            a = b\n            b = c\n        return b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a recursive Fibonacci sequence program written in Python.\n\n### Input:\ndef Fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2)\n\n### Output:\ndef Fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for i in range(2,n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}
{"instruction":"In Python, create a list mode with the numbers from 0 to 50.","input":"","output":"list_mode = [i for i in range(51)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, create a list mode with the numbers from 0 to 50.\n\n### Input:\n\n\n### Output:\nlist_mode = [i for i in range(51)]"}
{"instruction":"Write a Python function that takes two strings as arguments and returns true if the second string could be obtained by rotating the first string.","input":"'waterbottle', 'erbottlewat'","output":"def is_rotation(str1, str2):\n    if len(str1) == len(str2) and len(str1) > 0:\n        return (str1 + str1).find(str2) != -1\n    return False\n    \nis_rotation('waterbottle', 'erbottlewat')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes two strings as arguments and returns true if the second string could be obtained by rotating the first string.\n\n### Input:\n'waterbottle', 'erbottlewat'\n\n### Output:\ndef is_rotation(str1, str2):\n    if len(str1) == len(str2) and len(str1) > 0:\n        return (str1 + str1).find(str2) != -1\n    return False\n    \nis_rotation('waterbottle', 'erbottlewat')"}
{"instruction":"Create a python function to make bulk API calls efficiently and push the result data to a cloud storage.","input":"[\n \u2018https:\/\/somesite.com\/api\/1\u2019,\n \u2018https:\/\/somesite.com\/api\/2\u2019,\n \u2018https:\/\/somesite.com\/api\/3\u2019,\n]","output":"import requests\nfrom google.cloud import storage \n\ndef bulk_api_calls(api_list):\n result_data = []\n for url in api_list:\n response = requests.get(url)\n result_data.append(response.json())\n \n # uploading to the cloud storage\n storage_client = storage.Client()\n bucket = storage_client.bucket('my-bucket')\n blob = bucket.blob('api_result_data.json')\n blob.upload_from_string(str(result_data))\n \nreturn result_data","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function to make bulk API calls efficiently and push the result data to a cloud storage.\n\n### Input:\n[\n \u2018https:\/\/somesite.com\/api\/1\u2019,\n \u2018https:\/\/somesite.com\/api\/2\u2019,\n \u2018https:\/\/somesite.com\/api\/3\u2019,\n]\n\n### Output:\nimport requests\nfrom google.cloud import storage \n\ndef bulk_api_calls(api_list):\n result_data = []\n for url in api_list:\n response = requests.get(url)\n result_data.append(response.json())\n \n # uploading to the cloud storage\n storage_client = storage.Client()\n bucket = storage_client.bucket('my-bucket')\n blob = bucket.blob('api_result_data.json')\n blob.upload_from_string(str(result_data))\n \nreturn result_data"}
{"instruction":"Generate a valid python program to classify the given data into two categories.","input":"A list of grocery items and their prices","output":"def classify(items):\n    cheap_items = []\n    expensive_items = []\n\n    for item in items:\n       if item[1] < 5:\n            cheap_items.append(item)\n       else:\n            expensive_items.append(item)\n\n    return (cheap_items, expensive_items)\n\nitems = [('fruit', 2.5), ('beer', 10), ('shampoo', 3), ('chocolate', 6)]\ncheap, expensive = classify(items)\nprint(cheap)\nprint(expensive)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a valid python program to classify the given data into two categories.\n\n### Input:\nA list of grocery items and their prices\n\n### Output:\ndef classify(items):\n    cheap_items = []\n    expensive_items = []\n\n    for item in items:\n       if item[1] < 5:\n            cheap_items.append(item)\n       else:\n            expensive_items.append(item)\n\n    return (cheap_items, expensive_items)\n\nitems = [('fruit', 2.5), ('beer', 10), ('shampoo', 3), ('chocolate', 6)]\ncheap, expensive = classify(items)\nprint(cheap)\nprint(expensive)"}
{"instruction":"Create a Python for loop that prints out each element in a given list.","input":"[10, 20, 30, 40]","output":"for element in [10,20,30,40]:\n    print(element)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python for loop that prints out each element in a given list.\n\n### Input:\n[10, 20, 30, 40]\n\n### Output:\nfor element in [10,20,30,40]:\n    print(element)"}
{"instruction":"Create a Python program to analyze the sentiment of a given sentence.","input":"sentence = 'I am very happy to be here'","output":"from textblob import TextBlob\n\nsentence = 'I am very happy to be here'\nsentiment = TextBlob(sentence).polarity\n\nif sentiment > 0:\n    print(\"Sentiment: Positive\")\nelif sentiment == 0:\n    print(\"Sentiment: Neutral\")\nelse:\n    print(\"Sentiment: Negative\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to analyze the sentiment of a given sentence.\n\n### Input:\nsentence = 'I am very happy to be here'\n\n### Output:\nfrom textblob import TextBlob\n\nsentence = 'I am very happy to be here'\nsentiment = TextBlob(sentence).polarity\n\nif sentiment > 0:\n    print(\"Sentiment: Positive\")\nelif sentiment == 0:\n    print(\"Sentiment: Neutral\")\nelse:\n    print(\"Sentiment: Negative\")"}
{"instruction":"Construct a Python program that verifies if the given input number is even or odd.","input":"","output":"# Program checking if the input number is even or odd\nnum = int(input(\"Please enter a number: \"))\n\n# Check if the number is even or odd\nif num % 2 == 0:\n    print(str(num) + \" is an even number.\")\nelse:\n    print(str(num) + \" is an odd number.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program that verifies if the given input number is even or odd.\n\n### Input:\n\n\n### Output:\n# Program checking if the input number is even or odd\nnum = int(input(\"Please enter a number: \"))\n\n# Check if the number is even or odd\nif num % 2 == 0:\n    print(str(num) + \" is an even number.\")\nelse:\n    print(str(num) + \" is an odd number.\")"}
{"instruction":"Create a REST API endpoint in Python that fetches data from a database and returns it as JSON.","input":"The table \"Users\" has the following columns: Id (primary key), Name, Email, Gender.","output":"@app.route('\/users', methods=['GET'])\ndef get_users():\n users = User.query.all()\n return jsonify([{'Id': user.id, 'Name': user.name, 'Email': user.email, 'Gender': user.gender} for user in users])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API endpoint in Python that fetches data from a database and returns it as JSON.\n\n### Input:\nThe table \"Users\" has the following columns: Id (primary key), Name, Email, Gender.\n\n### Output:\n@app.route('\/users', methods=['GET'])\ndef get_users():\n users = User.query.all()\n return jsonify([{'Id': user.id, 'Name': user.name, 'Email': user.email, 'Gender': user.gender} for user in users])"}
{"instruction":"Given a String \"abcd\" write a Python program to generate all the possible subsequence of it.","input":"string = \"abcd\"","output":"# define the substring array\nsubstrings = []\n\n# loop through the length of the string\nfor i in range(len(string)):\n    # create a loop to start with character 0 and end at character i\n    for j in range(i + 1):\n        # add all subsequences to the substring array\n        substrings.append(string[j:i + 1])\n\n# print the list of all possible subsequences\nprint(substrings)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a String \"abcd\" write a Python program to generate all the possible subsequence of it.\n\n### Input:\nstring = \"abcd\"\n\n### Output:\n# define the substring array\nsubstrings = []\n\n# loop through the length of the string\nfor i in range(len(string)):\n    # create a loop to start with character 0 and end at character i\n    for j in range(i + 1):\n        # add all subsequences to the substring array\n        substrings.append(string[j:i + 1])\n\n# print the list of all possible subsequences\nprint(substrings)"}
{"instruction":"Write a Python program to randomly split a list into two parts.","input":"[1, 2, 3, 4, 5, 6, 7, 8]","output":"import random\n\ndef split_list(input_list):\n    index = random.randint(0, len(input_list)-1)\n    part1 = input_list[:index]\n    part2 = input_list[index:]\n    return part1, part2\n\ninput_list = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(\"Original list :\", input_list)\nresult1, result2 = split_list(input_list)\nprint(\"\\nPart 1 :\", result1)\nprint(\"Part 2 :\", result2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to randomly split a list into two parts.\n\n### Input:\n[1, 2, 3, 4, 5, 6, 7, 8]\n\n### Output:\nimport random\n\ndef split_list(input_list):\n    index = random.randint(0, len(input_list)-1)\n    part1 = input_list[:index]\n    part2 = input_list[index:]\n    return part1, part2\n\ninput_list = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(\"Original list :\", input_list)\nresult1, result2 = split_list(input_list)\nprint(\"\\nPart 1 :\", result1)\nprint(\"Part 2 :\", result2)"}
{"instruction":"Generate a Python program which takes in two strings as input and checks if the two strings are anagrams of each other and returns the result.","input":"","output":"def is_anagram(str1, str2): \n  \n    # Get the count of characters in str1. \n    character_counts = [0] * 256 \n    for i in str1: \n        character_counts[ord(i)] += 1\n  \n    # Decrease count for each character of str2. \n    for i in str2: \n        character_counts[ord(i)] -= 1\n  \n    # Check if all counts are 0 \n    for count in character_counts: \n        if count != 0: \n            return False\n  \n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program which takes in two strings as input and checks if the two strings are anagrams of each other and returns the result.\n\n### Input:\n\n\n### Output:\ndef is_anagram(str1, str2): \n  \n    # Get the count of characters in str1. \n    character_counts = [0] * 256 \n    for i in str1: \n        character_counts[ord(i)] += 1\n  \n    # Decrease count for each character of str2. \n    for i in str2: \n        character_counts[ord(i)] -= 1\n  \n    # Check if all counts are 0 \n    for count in character_counts: \n        if count != 0: \n            return False\n  \n    return True"}
{"instruction":"Develop a Python program for classifying data into two categories - positive and negative.","input":"Not applicable","output":"import pandas as pd \n\n# Read the data \ndata = pd.read_csv('data.csv')\n\n# Create input features \nX = data[['feature1','feature2','feature3']]\n\n# Create output label \ny = data['label']\n\n# Split data into training and testing sets \nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0) \n\n# Train the model\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(X_train, y_train)\n\n# Predict on test set\npredictions = lr.predict(X_test)\n\n# Evaluate accuracy\nfrom sklearn.metrics import accuracy_score\nprint('Accuracy:', accuracy_score(y_test, predictions))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program for classifying data into two categories - positive and negative.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd \n\n# Read the data \ndata = pd.read_csv('data.csv')\n\n# Create input features \nX = data[['feature1','feature2','feature3']]\n\n# Create output label \ny = data['label']\n\n# Split data into training and testing sets \nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0) \n\n# Train the model\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(X_train, y_train)\n\n# Predict on test set\npredictions = lr.predict(X_test)\n\n# Evaluate accuracy\nfrom sklearn.metrics import accuracy_score\nprint('Accuracy:', accuracy_score(y_test, predictions))"}
{"instruction":"Optimize a function for generating a random string in Python. The function should generate a string with 7 characters that include both numbers and letters","input":"def random_string(): \n    string = '' \n    for i in range(7): \n        string += chr(randint(97, 122)) \n        string += str(randint(0, 9)) \n    return string","output":"import random\n\ndef random_string(): \n    string = ''.join(random.sample(\n        'abcdefghijklmnopqrstuvwxyz' \n        + '0123456789', 7)) \n    return string","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a function for generating a random string in Python. The function should generate a string with 7 characters that include both numbers and letters\n\n### Input:\ndef random_string(): \n    string = '' \n    for i in range(7): \n        string += chr(randint(97, 122)) \n        string += str(randint(0, 9)) \n    return string\n\n### Output:\nimport random\n\ndef random_string(): \n    string = ''.join(random.sample(\n        'abcdefghijklmnopqrstuvwxyz' \n        + '0123456789', 7)) \n    return string"}
{"instruction":"Design a Python generator to return all possible permutations of a given collection.","input":"[1,2,3]","output":"def permutations(nums):\n    if len(nums) <=1:\n        yield nums\n    else:\n        for perm in permutations(nums[1:]):\n            for i in range(len(nums)):\n                # nb elements[0:1] works in both string and list contexts\n                yield perm[:i] + nums[0:1] + perm[i:]\n\n# Driver program to test above\ndata = [1, 2, 3] \nfor perm in list(permutations(data)): \n    print(perm)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python generator to return all possible permutations of a given collection.\n\n### Input:\n[1,2,3]\n\n### Output:\ndef permutations(nums):\n    if len(nums) <=1:\n        yield nums\n    else:\n        for perm in permutations(nums[1:]):\n            for i in range(len(nums)):\n                # nb elements[0:1] works in both string and list contexts\n                yield perm[:i] + nums[0:1] + perm[i:]\n\n# Driver program to test above\ndata = [1, 2, 3] \nfor perm in list(permutations(data)): \n    print(perm)"}
{"instruction":"Write a Python program to perform sentiment analysis over a tweet corpus. The program should take in the tweets as input and output the sentiment of each tweet.","input":"Tweets:\n\n1. \"I love playing basketball with my friends!\"\n2. \"I hate wearing masks in public places.\"\n3. \"I'm feeling really happy today!\"\n4. \"I find it hard to concentrate on my studies recently.\"","output":"tweets = [\"I love playing basketball with my friends!\", \n          \"I hate wearing masks in public places.\",\n          \"I'm feeling really happy today!\",\n          \"I find it hard to concentrate on my studies recently.\"]\n\n#importing the necessary libraries\nfrom textblob import TextBlob\n\n#list to store the sentiment polarity and subjectivity\nsentiment_list = []\n\n#iterate through the tweets\nfor tweet in tweets:\n    # performing sentiment analysis\n    analysis = TextBlob(tweet) \n    #append sentiment polarity and subjectivity to the list\n    sentiment_list.append({'Polarity':analysis.sentiment.polarity,\n                           'Subjectivity':analysis.sentiment.subjectivity\n                          })\n\n#print output\nprint(f'Sentiment Analysis: {sentiment_list}')\n\nSentiment Analysis: [{'Polarity': 0.8, 'Subjectivity': 0.9}, {'Polarity': -0.8, 'Subjectivity': 0.9}, {'Polarity': 0.7, 'Subjectivity': 0.8}, {'Polarity': -0.2, 'Subjectivity': 0.5}]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to perform sentiment analysis over a tweet corpus. The program should take in the tweets as input and output the sentiment of each tweet.\n\n### Input:\nTweets:\n\n1. \"I love playing basketball with my friends!\"\n2. \"I hate wearing masks in public places.\"\n3. \"I'm feeling really happy today!\"\n4. \"I find it hard to concentrate on my studies recently.\"\n\n### Output:\ntweets = [\"I love playing basketball with my friends!\", \n          \"I hate wearing masks in public places.\",\n          \"I'm feeling really happy today!\",\n          \"I find it hard to concentrate on my studies recently.\"]\n\n#importing the necessary libraries\nfrom textblob import TextBlob\n\n#list to store the sentiment polarity and subjectivity\nsentiment_list = []\n\n#iterate through the tweets\nfor tweet in tweets:\n    # performing sentiment analysis\n    analysis = TextBlob(tweet) \n    #append sentiment polarity and subjectivity to the list\n    sentiment_list.append({'Polarity':analysis.sentiment.polarity,\n                           'Subjectivity':analysis.sentiment.subjectivity\n                          })\n\n#print output\nprint(f'Sentiment Analysis: {sentiment_list}')\n\nSentiment Analysis: [{'Polarity': 0.8, 'Subjectivity': 0.9}, {'Polarity': -0.8, 'Subjectivity': 0.9}, {'Polarity': 0.7, 'Subjectivity': 0.8}, {'Polarity': -0.2, 'Subjectivity': 0.5}]"}
{"instruction":"Create a simple chatbot using Python and Dialogflow, which can answer questions about the current days of the week.","input":"Not applicable","output":"from flask import Flask\nfrom flask_restful import Resource, Api\nfrom dialogflow import detect_intent_texts\n\napp = Flask(__name__)\napi = Api(app)\n\n\n@app.route('\/', methods=['GET', 'POST'])\ndef detect_intent_text():\n    IF session_id NOT present\n        PLEASE create session_id\n    request = detect_intent_texts(session_id, text)\n    response = request.fulfillment_text\n    return response\n\n\nif __name__ == '__main__':\n    app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple chatbot using Python and Dialogflow, which can answer questions about the current days of the week.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask\nfrom flask_restful import Resource, Api\nfrom dialogflow import detect_intent_texts\n\napp = Flask(__name__)\napi = Api(app)\n\n\n@app.route('\/', methods=['GET', 'POST'])\ndef detect_intent_text():\n    IF session_id NOT present\n        PLEASE create session_id\n    request = detect_intent_texts(session_id, text)\n    response = request.fulfillment_text\n    return response\n\n\nif __name__ == '__main__':\n    app.run()"}
{"instruction":"Create a Python program that takes a sentence as an input and outputs all the words with their part of speech.","input":"This is a sentence.","output":"import nltk\n\nsentence = 'This is a sentence.'\nwords = nltk.word_tokenize(sentence)\n\nfor word in words:\n print(f'{word}: {nltk.pos_tag([word])[0][1]}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a sentence as an input and outputs all the words with their part of speech.\n\n### Input:\nThis is a sentence.\n\n### Output:\nimport nltk\n\nsentence = 'This is a sentence.'\nwords = nltk.word_tokenize(sentence)\n\nfor word in words:\n print(f'{word}: {nltk.pos_tag([word])[0][1]}')"}
{"instruction":"Create a Python program to extract the top 10 words from a text.","input":"My name is John and I work as a software engineer.","output":"import re\nfrom collections import Counter\n\ndef get_top_words(txt):\n    words = re.findall(r'\\w+', txt.lower())\n    return Counter(words).most_common(10)\n\nprint(get_top_words('My name is John and I work as a software engineer.'))\n# Output: [('i', 2), ('a', 1), ('as', 1), ('engineer', 1), ('john', 1), ('name', 1), ('software', 1), ('work', 1)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to extract the top 10 words from a text.\n\n### Input:\nMy name is John and I work as a software engineer.\n\n### Output:\nimport re\nfrom collections import Counter\n\ndef get_top_words(txt):\n    words = re.findall(r'\\w+', txt.lower())\n    return Counter(words).most_common(10)\n\nprint(get_top_words('My name is John and I work as a software engineer.'))\n# Output: [('i', 2), ('a', 1), ('as', 1), ('engineer', 1), ('john', 1), ('name', 1), ('software', 1), ('work', 1)]"}
{"instruction":"Write a Python script to calculate the distance between two points.","input":"Point1 = (x1, y1)\nPoint2 = (x2, y2)","output":"import math\n\ndef calculate_distance(x1, y1, x2, y2):\n  x_diff = x2 - x1\n  y_diff = y2 - y1\n  distance = math.sqrt(x_diff**2 + y_diff**2)\n  return distance\n\nresult = calculate_distance(x1, y1, x2, y2)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to calculate the distance between two points.\n\n### Input:\nPoint1 = (x1, y1)\nPoint2 = (x2, y2)\n\n### Output:\nimport math\n\ndef calculate_distance(x1, y1, x2, y2):\n  x_diff = x2 - x1\n  y_diff = y2 - y1\n  distance = math.sqrt(x_diff**2 + y_diff**2)\n  return distance\n\nresult = calculate_distance(x1, y1, x2, y2)\nprint(result)"}
{"instruction":"Create a web service in Django for calculating tip amount from a restaurant bill.","input":"Not applicable","output":"# create the Django project\ndjango-admin startproject tip_calculator\n\n# create the application within the project\ncd tip_calculator\npython manage.py startapp calculator\n\n# define the model for the Tip\n# in calculator\/models.py\n\nfrom django.db import models\n\nclass Tip(models.Model):\n    bill_amount = models.FloatField()\n    tip_percentage = models.FloatField()\n    tip_amount = models.FloatField()\n\n# define the calculator view\n# in calculator\/views.py\n\nfrom django.shortcuts import render\nfrom .models import Tip\nfrom django.http import HttpResponse\n\ndef calculator(request):\n    if request.method == 'POST':\n        bill_amount = float(request.POST.get('bill_amount'))\n        tip_percentage = float(request.POST.get('tip_percentage'))\n\n        # calculate the tip amount\n        tip_amount = bill_amount * tip_percentage \/ 100\n\n        # save the tip to the database\n        tip = Tip(bill_amount=bill_amount,\n                  tip_percentage=tip_percentage,\n                  tip_amount=tip_amount)\n        tip.save()\n\n        return HttpResponse('Tip amount is: {}'.format(tip_amount))\n\n    else:\n        return render(request, 'calculator\/calculator.html')\n\n# create the URL for accessing the calculator\n# in tip_calculator\/urls.py\n\nfrom django.urls import path\nfrom calculator import views\n\nurlpatterns = [\n    path('calculator\/', views.calculator),\n]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web service in Django for calculating tip amount from a restaurant bill.\n\n### Input:\nNot applicable\n\n### Output:\n# create the Django project\ndjango-admin startproject tip_calculator\n\n# create the application within the project\ncd tip_calculator\npython manage.py startapp calculator\n\n# define the model for the Tip\n# in calculator\/models.py\n\nfrom django.db import models\n\nclass Tip(models.Model):\n    bill_amount = models.FloatField()\n    tip_percentage = models.FloatField()\n    tip_amount = models.FloatField()\n\n# define the calculator view\n# in calculator\/views.py\n\nfrom django.shortcuts import render\nfrom .models import Tip\nfrom django.http import HttpResponse\n\ndef calculator(request):\n    if request.method == 'POST':\n        bill_amount = float(request.POST.get('bill_amount'))\n        tip_percentage = float(request.POST.get('tip_percentage'))\n\n        # calculate the tip amount\n        tip_amount = bill_amount * tip_percentage \/ 100\n\n        # save the tip to the database\n        tip = Tip(bill_amount=bill_amount,\n                  tip_percentage=tip_percentage,\n                  tip_amount=tip_amount)\n        tip.save()\n\n        return HttpResponse('Tip amount is: {}'.format(tip_amount))\n\n    else:\n        return render(request, 'calculator\/calculator.html')\n\n# create the URL for accessing the calculator\n# in tip_calculator\/urls.py\n\nfrom django.urls import path\nfrom calculator import views\n\nurlpatterns = [\n    path('calculator\/', views.calculator),\n]"}
{"instruction":"The given code is a Python script that connects to ArcGIS Online and retrieves data from a web map. It then updates a feature layer with new data and statistics based on the retrieved data. To use this script, you need to provide the necessary input parameters such as the web map ID, data and stats layer names, and login credentials for ArcGIS Online. Once you have provided the input parameters, you can run the script and it will automatically update the feature layer with new data and statistics.","input":"","output":"#-------------------------------------------------------------------------------\n# Name:         executive_dashboard.py\n# Purpose:\n#\n# Author:       Local Government\n#\n# Created:      05\/06\/2016 AM\n# Version:      Python 2.7\n#-------------------------------------------------------------------------------\n\nimport json, urllib, arcrest, re\nfrom arcrest.security import AGOLTokenSecurityHandler\nfrom arcresthelper import securityhandlerhelper\nfrom arcresthelper import common\nfrom arcrest.agol import FeatureLayer\nfrom datetime import datetime as dt\nfrom datetime import timedelta as td\nimport getpass\nimport indicator_constants as ic\nfrom os.path import dirname, join\n\n# Messages\nm1 = \"Can not not create token to access map. Please check username, password, and organization URL.\"\nm2 = \"Can not access web map JSON. Please check map ID.\"\nm3 = \"Map does not contain the specified data layer\"\nm4 = \"Map does not contain the specified stats layer\"\nm5 = \"Apply a filter to the stats layer so that exactly one record is available in the map.\"\nm6 = \"Layer does not contain a filter that uses the provided date field, {0}, and the BETWEEN operator.\"\nm7 = \"Stats layer capabilities must include 'Update'.\"\n\ndef get_layer_properties(title, layers):\n    \"\"\"Parse the JSON of a web map and retrieve the URL of a specific layer,\n    and any filters that have been applied to that layer.\"\"\"\n    for layer in layers:\n        if layer['title'] == title:\n            url = layer['url']\n            if 'layerDefinition' in layer:\n                query = layer['layerDefinition']['definitionExpression']\n            else:\n                query = \"1=1\"\n            return url, query\n    return \"\", \"\"\n\ndef connect_to_layer(url, sh, proxy_port=None, proxy_url=None, initialize=True):\n    \"\"\"Establish a connection to an ArcGIS Online feature layer\"\"\"\n    fl = FeatureLayer(\n            url=url,\n            securityHandler=sh,\n            proxy_port=proxy_port,\n            proxy_url=proxy_url,\n            initialize=initialize)\n    return fl\n\ndef count_features(layer, query=\"1=1\"):\n    \"\"\"Count feature in a feature layer, optionally respecting a where clause\"\"\"\n    cnt = layer.query(where=query, returnGeometry=False, returnCountOnly=True)\n    return cnt['count']\n\ndef featureset_to_dict(fs):\n    \"\"\"Returns JSON of a feature set in dictionary format\"\"\"\n    fs_str = fs.toJSON\n    fs_dict =json.loads(fs_str)\n    return fs_dict\n\ndef get_attributes(layer, query=\"1=1\", fields=\"*\"):\n    \"\"\"Get all attributes for a record in a table\"\"\"\n    vals = layer.query(where=query, out_fields=fields, returnGeometry=False)\n    valsdict = featureset_to_dict(vals)\n    return valsdict['features'][0]['attributes']\n\ndef update_values(layer, field_info, query=\"1=1\"):\n    \"\"\"Update feature values \"\"\"\n    out_fields = ['objectid']\n    for fld in field_info:\n        out_fields.append(fld['FieldName'])\n\n    resFeats = layer.query(where=query, out_fields=\",\".join(out_fields))\n    for feat in resFeats:\n\n        for fld in field_info:\n            feat.set_value(fld[\"FieldName\"],fld['ValueToSet'])\n\n    return layer\n\ndef trace():\n    \"\"\"\n        trace finds the line, the filename\n        and error message and returns it\n        to the user\n    \"\"\"\n    import traceback, inspect,sys\n    tb = sys.exc_info()[2]\n    tbinfo = traceback.format_tb(tb)[0]\n    filename = inspect.getfile(inspect.currentframe())\n    # script name + line number\n    line = tbinfo.split(\", \")[1]\n    # Get Python syntax error\n    #\n    synerror = traceback.format_exc().splitlines()[-1]\n    return line, filename, synerror\n\ndef create_security_handler(security_type='Portal', username=\"\", password=\"\",\n                            org_url=\"\", proxy_url=None, proxy_port=None,\n                            referer_url=None, token_url=None, certificatefile=None,\n                            keyfile=None, client_id=None, secret_id=None):\n    \"\"\"Creates a security handler helper using the specified properties.\"\"\"\n    securityinfo = {}\n    securityinfo['security_type'] = security_type#LDAP, NTLM, OAuth, Portal, PKI, ArcGIS\n    securityinfo['username'] = username\n    securityinfo['password'] = password\n    securityinfo['org_url'] = org_url\n    securityinfo['proxy_url'] = proxy_url\n    securityinfo['proxy_port'] = proxy_port\n    securityinfo['referer_url'] = referer_url\n    securityinfo['token_url'] = token_url\n    securityinfo['certificatefile'] = certificatefile\n    securityinfo['keyfile'] = keyfile\n    securityinfo['client_id'] = client_id\n    securityinfo['secret_id'] = secret_id\n\n    return securityhandlerhelper.securityhandlerhelper(securityinfo=securityinfo)\n\ndef get_epoch_time(date):\n    epoch = dt.utcfromtimestamp(0)\n    return (date - epoch).total_seconds() * 1000\n\ndef main():\n    with open(join(dirname(__file__), 'DashboardLog.log'), 'a') as log_file:\n\n        # Get current time for report datetime range\n        start_time = dt.utcnow()\n        today_agol = get_epoch_time(start_time)\n        temp_fc = arcpy.env.scratchGDB + \"\\\\temp_fc\"\n        proj_out = \"{}_proj\".format(temp_fc)\n        min_date = None\n\n        try:\n\n            # Get security handler for organization content\n            org_shh = create_security_handler(security_type='Portal',\n                                              username=ic.org_username,\n                                              password=ic.org_password,\n                                              org_url=ic.org_url)\n\n            if org_shh.valid == False:\n                raise Exception(org_shh.message)\n\n            org_sh = org_shh.securityhandler\n\n            # Access map JSON\n            admin = arcrest.manageorg.Administration(securityHandler=org_sh)\n            item = admin.content.getItem(ic.map_id)\n            mapjson = item.itemData()\n\n            if 'error' in mapjson:\n                raise Exception(m2)\n\n            # Get security handler for ags services\n            ags_sh = None\n            if ic.ags_username is not None and ic.ags_username != \"\":\n                ags_sh = arcrest.AGSTokenSecurityHandler(username=ic.ags_username,\n                                     password=ic.ags_password,\n                                     token_url=ic.ags_token_url,\n                                     proxy_url=None,\n                                     proxy_port=None)\n\n            print \"Getting stats layer info...\"\n\n            # Get attributes of a single row in stats layer\n            statsurl, statsquery = get_layer_properties(ic.stats_layer_name,\n                                                      mapjson['operationalLayers'])\n            if not statsurl:\n                raise Exception(m4)\n\n            if ic.stats_service_type in ['AGOL', 'Portal']:\n                statslayer = connect_to_layer(statsurl, org_sh)\n            else:\n                statslayer = connect_to_layer(statsurl, ags_sh)\n\n            if not count_features(statslayer, query=statsquery) == 1:\n                raise Exception(m5)\n\n            stats = get_attributes(statslayer, query=statsquery)\n\n            # If requested, update layer query using today as max date\n            if ic.auto_update_date_query:\n\n                print \"Updating date filter on layer...\"\n\n                if ic.report_duration:\n                    # get diff value to min date\n                    if ic.report_time_unit == 'minutes':\n                        delta = td(minute=ic.report_duration)\n                    elif ic.report_time_unit == 'hours':\n                        delta = td(hours=ic.report_duration)\n                    elif ic.report_time_unit == 'days':\n                        delta = td(days=ic.report_duration)\n                    elif ic.report_time_unit == 'weeks':\n                        delta = td(weeks=ic.report_duration)\n\n                    min_date = start_time - delta\n                else:\n                    # Use end date of previous report\n                    min_date = stats[ic.end_date]\n\n                # update filter on layer\n                for layer in mapjson['operationalLayers']:\n                    if layer['title'] == ic.data_layer_name:\n                        try:\n                            original_query = layer['layerDefinition']['definitionExpression']\n\n                            #Find if the expression has a clause using the date field and Between operator\n                            match = re.search(\".*?{0} BETWEEN.*?'(.*?)'.*?AND.*?'(.*?)'.*\".format(ic.date_field), original_query)\n                            if match is None:\n                                raise ValueError()\n\n                            #Construct a new query replacing the min and max date values with the new dates\n                            new_query = match.group()[0:match.start(1)] + min_date.strftime(\"%Y-%m-%d %H:%M:%S\") + match.group()[match.end(1):match.start(2)] + start_time.strftime(\"%Y-%m-%d %H:%M:%S\") + match.group()[match.end(2):]\n\n                            # Update JSON with new query\n                            layer['layerDefinition']['definitionExpression'] = new_query\n\n                        except ValueError, KeyError:\n                            d = dt.strftime(dt.now(), \"%Y-%m-%d %H:%M:%S\")\n                            log_file.write(\"{}:\\n\".format(d))\n                            log_file.write(\"{}\\n\".format(m6.format(ic.date_field)))\n                            print(m6.format(ic.date_field))\n                            continue\n\n                # Commit update to AGOL item\n                useritem = item.userItem\n                params = arcrest.manageorg.ItemParameter()\n                useritem.updateItem(itemParameters = params,\n                                    text=json.dumps(mapjson))\n\n            # Retrieve the url and queries associated with the data and stats layers\n            print \"Getting layer info...\"\n\n            dataurl, dataquery = get_layer_properties(ic.data_layer_name, mapjson['operationalLayers'])\n\n            if not dataurl:\n                raise Exception(m3)\n\n            # Connect to the services\n            print \"Connecting to data layer...\"\n\n            if ic.data_service_type in ['AGOL', 'Portal']:\n                datalayer = connect_to_layer(dataurl, org_sh)\n            else:\n                datalayer = connect_to_layer(dataurl, ags_sh)\n\n            # If necessary, load new points to hosted service\n            if ic.data_feature_class:\n\n                # only attemp append if there are new features\n                temp_fc = arcpy.CopyFeatures_management(ic.data_feature_class, temp_fc)\n                sr_output = datalayer.extent['spatialReference']['wkid']\n                temp_fc_proj = arcpy.Project_management(temp_fc, proj_out, sr_output)\n\n                # Load data from layer to service\n                datalayer.deleteFeatures(where=\"1=1\")\n                datalayer.addFeatures(temp_fc_proj)\n                arcpy.Delete_management(temp_fc)\n                arcpy.Delete_management(temp_fc_proj)\n\n            # Count the data features that meet the map query\n            print \"Counting features\"\n            feature_cnt = count_features(datalayer, query=dataquery)\n\n            print \"Getting new stats...\"\n\n            # Current editor\n            editor = getpass.getuser()\n\n            attributes = get_attributes(statslayer, statsquery)\n            attributes[ic.datecurr] = today_agol\n            attributes[ic.date1] = stats[ic.datecurr]\n            attributes[ic.date2] = stats[ic.date1]\n            attributes[ic.date3] = stats[ic.date2]\n            attributes[ic.date4] = stats[ic.date3]\n            attributes[ic.observcurr] = feature_cnt\n            attributes[ic.observ1] = stats[ic.observcurr]\n            attributes[ic.observ2] = stats[ic.observ1]\n            attributes[ic.observ3] = stats[ic.observ2]\n            attributes[ic.observ4] = stats[ic.observ3]\n            attributes[ic.last_update] = today_agol\n            attributes[ic.last_editor] = editor\n            attributes[ic.end_date] = today_agol\n            if min_date is None:\n                attributes[ic.start_date] = stats[ic.end_date]\n            else:\n                attributes[ic.start_date] = get_epoch_time(min_date)        \n\n            edits = [{\"attributes\" : attributes}]\n            statslayer.applyEdits(updateFeatures=edits)\n\n            print \"Done.\"\n\n        except (common.ArcRestHelperError),e:\n            print \"error in function: %s\" % e[0]['function']\n            print \"error on line: %s\" % e[0]['line']\n            print \"error in file name: %s\" % e[0]['filename']\n            print \"with error message: %s\" % e[0]['synerror']\n            if 'arcpyError' in e[0]:\n                print \"with arcpy message: %s\" % e[0]['arcpyError']\n\n        except Exception as ex:\n            print(\"{}\\n\".format(ex))\n            d = dt.strftime(dt.now(), \"%Y-%m-%d %H:%M:%S\")\n            log_file.write(\"{}:\\n\".format(d))\n            log_file.write(\"{}\\n\".format(ex))\n        finally:\n            if arcpy.Exists(temp_fc):\n                arcpy.Delete_management(temp_fc)\n            if arcpy.Exists(proj_out):\n                arcpy.Delete_management(proj_out)\n\n# End main function\n\nif __name__ == '__main__':\n    main()\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python script that connects to ArcGIS Online and retrieves data from a web map. It then updates a feature layer with new data and statistics based on the retrieved data. To use this script, you need to provide the necessary input parameters such as the web map ID, data and stats layer names, and login credentials for ArcGIS Online. Once you have provided the input parameters, you can run the script and it will automatically update the feature layer with new data and statistics.\n\n### Input:\n\n\n### Output:\n#-------------------------------------------------------------------------------\n# Name:         executive_dashboard.py\n# Purpose:\n#\n# Author:       Local Government\n#\n# Created:      05\/06\/2016 AM\n# Version:      Python 2.7\n#-------------------------------------------------------------------------------\n\nimport json, urllib, arcrest, re\nfrom arcrest.security import AGOLTokenSecurityHandler\nfrom arcresthelper import securityhandlerhelper\nfrom arcresthelper import common\nfrom arcrest.agol import FeatureLayer\nfrom datetime import datetime as dt\nfrom datetime import timedelta as td\nimport getpass\nimport indicator_constants as ic\nfrom os.path import dirname, join\n\n# Messages\nm1 = \"Can not not create token to access map. Please check username, password, and organization URL.\"\nm2 = \"Can not access web map JSON. Please check map ID.\"\nm3 = \"Map does not contain the specified data layer\"\nm4 = \"Map does not contain the specified stats layer\"\nm5 = \"Apply a filter to the stats layer so that exactly one record is available in the map.\"\nm6 = \"Layer does not contain a filter that uses the provided date field, {0}, and the BETWEEN operator.\"\nm7 = \"Stats layer capabilities must include 'Update'.\"\n\ndef get_layer_properties(title, layers):\n    \"\"\"Parse the JSON of a web map and retrieve the URL of a specific layer,\n    and any filters that have been applied to that layer.\"\"\"\n    for layer in layers:\n        if layer['title'] == title:\n            url = layer['url']\n            if 'layerDefinition' in layer:\n                query = layer['layerDefinition']['definitionExpression']\n            else:\n                query = \"1=1\"\n            return url, query\n    return \"\", \"\"\n\ndef connect_to_layer(url, sh, proxy_port=None, proxy_url=None, initialize=True):\n    \"\"\"Establish a connection to an ArcGIS Online feature layer\"\"\"\n    fl = FeatureLayer(\n            url=url,\n            securityHandler=sh,\n            proxy_port=proxy_port,\n            proxy_url=proxy_url,\n            initialize=initialize)\n    return fl\n\ndef count_features(layer, query=\"1=1\"):\n    \"\"\"Count feature in a feature layer, optionally respecting a where clause\"\"\"\n    cnt = layer.query(where=query, returnGeometry=False, returnCountOnly=True)\n    return cnt['count']\n\ndef featureset_to_dict(fs):\n    \"\"\"Returns JSON of a feature set in dictionary format\"\"\"\n    fs_str = fs.toJSON\n    fs_dict =json.loads(fs_str)\n    return fs_dict\n\ndef get_attributes(layer, query=\"1=1\", fields=\"*\"):\n    \"\"\"Get all attributes for a record in a table\"\"\"\n    vals = layer.query(where=query, out_fields=fields, returnGeometry=False)\n    valsdict = featureset_to_dict(vals)\n    return valsdict['features'][0]['attributes']\n\ndef update_values(layer, field_info, query=\"1=1\"):\n    \"\"\"Update feature values \"\"\"\n    out_fields = ['objectid']\n    for fld in field_info:\n        out_fields.append(fld['FieldName'])\n\n    resFeats = layer.query(where=query, out_fields=\",\".join(out_fields))\n    for feat in resFeats:\n\n        for fld in field_info:\n            feat.set_value(fld[\"FieldName\"],fld['ValueToSet'])\n\n    return layer\n\ndef trace():\n    \"\"\"\n        trace finds the line, the filename\n        and error message and returns it\n        to the user\n    \"\"\"\n    import traceback, inspect,sys\n    tb = sys.exc_info()[2]\n    tbinfo = traceback.format_tb(tb)[0]\n    filename = inspect.getfile(inspect.currentframe())\n    # script name + line number\n    line = tbinfo.split(\", \")[1]\n    # Get Python syntax error\n    #\n    synerror = traceback.format_exc().splitlines()[-1]\n    return line, filename, synerror\n\ndef create_security_handler(security_type='Portal', username=\"\", password=\"\",\n                            org_url=\"\", proxy_url=None, proxy_port=None,\n                            referer_url=None, token_url=None, certificatefile=None,\n                            keyfile=None, client_id=None, secret_id=None):\n    \"\"\"Creates a security handler helper using the specified properties.\"\"\"\n    securityinfo = {}\n    securityinfo['security_type'] = security_type#LDAP, NTLM, OAuth, Portal, PKI, ArcGIS\n    securityinfo['username'] = username\n    securityinfo['password'] = password\n    securityinfo['org_url'] = org_url\n    securityinfo['proxy_url'] = proxy_url\n    securityinfo['proxy_port'] = proxy_port\n    securityinfo['referer_url'] = referer_url\n    securityinfo['token_url'] = token_url\n    securityinfo['certificatefile'] = certificatefile\n    securityinfo['keyfile'] = keyfile\n    securityinfo['client_id'] = client_id\n    securityinfo['secret_id'] = secret_id\n\n    return securityhandlerhelper.securityhandlerhelper(securityinfo=securityinfo)\n\ndef get_epoch_time(date):\n    epoch = dt.utcfromtimestamp(0)\n    return (date - epoch).total_seconds() * 1000\n\ndef main():\n    with open(join(dirname(__file__), 'DashboardLog.log'), 'a') as log_file:\n\n        # Get current time for report datetime range\n        start_time = dt.utcnow()\n        today_agol = get_epoch_time(start_time)\n        temp_fc = arcpy.env.scratchGDB + \"\\\\temp_fc\"\n        proj_out = \"{}_proj\".format(temp_fc)\n        min_date = None\n\n        try:\n\n            # Get security handler for organization content\n            org_shh = create_security_handler(security_type='Portal',\n                                              username=ic.org_username,\n                                              password=ic.org_password,\n                                              org_url=ic.org_url)\n\n            if org_shh.valid == False:\n                raise Exception(org_shh.message)\n\n            org_sh = org_shh.securityhandler\n\n            # Access map JSON\n            admin = arcrest.manageorg.Administration(securityHandler=org_sh)\n            item = admin.content.getItem(ic.map_id)\n            mapjson = item.itemData()\n\n            if 'error' in mapjson:\n                raise Exception(m2)\n\n            # Get security handler for ags services\n            ags_sh = None\n            if ic.ags_username is not None and ic.ags_username != \"\":\n                ags_sh = arcrest.AGSTokenSecurityHandler(username=ic.ags_username,\n                                     password=ic.ags_password,\n                                     token_url=ic.ags_token_url,\n                                     proxy_url=None,\n                                     proxy_port=None)\n\n            print \"Getting stats layer info...\"\n\n            # Get attributes of a single row in stats layer\n            statsurl, statsquery = get_layer_properties(ic.stats_layer_name,\n                                                      mapjson['operationalLayers'])\n            if not statsurl:\n                raise Exception(m4)\n\n            if ic.stats_service_type in ['AGOL', 'Portal']:\n                statslayer = connect_to_layer(statsurl, org_sh)\n            else:\n                statslayer = connect_to_layer(statsurl, ags_sh)\n\n            if not count_features(statslayer, query=statsquery) == 1:\n                raise Exception(m5)\n\n            stats = get_attributes(statslayer, query=statsquery)\n\n            # If requested, update layer query using today as max date\n            if ic.auto_update_date_query:\n\n                print \"Updating date filter on layer...\"\n\n                if ic.report_duration:\n                    # get diff value to min date\n                    if ic.report_time_unit == 'minutes':\n                        delta = td(minute=ic.report_duration)\n                    elif ic.report_time_unit == 'hours':\n                        delta = td(hours=ic.report_duration)\n                    elif ic.report_time_unit == 'days':\n                        delta = td(days=ic.report_duration)\n                    elif ic.report_time_unit == 'weeks':\n                        delta = td(weeks=ic.report_duration)\n\n                    min_date = start_time - delta\n                else:\n                    # Use end date of previous report\n                    min_date = stats[ic.end_date]\n\n                # update filter on layer\n                for layer in mapjson['operationalLayers']:\n                    if layer['title'] == ic.data_layer_name:\n                        try:\n                            original_query = layer['layerDefinition']['definitionExpression']\n\n                            #Find if the expression has a clause using the date field and Between operator\n                            match = re.search(\".*?{0} BETWEEN.*?'(.*?)'.*?AND.*?'(.*?)'.*\".format(ic.date_field), original_query)\n                            if match is None:\n                                raise ValueError()\n\n                            #Construct a new query replacing the min and max date values with the new dates\n                            new_query = match.group()[0:match.start(1)] + min_date.strftime(\"%Y-%m-%d %H:%M:%S\") + match.group()[match.end(1):match.start(2)] + start_time.strftime(\"%Y-%m-%d %H:%M:%S\") + match.group()[match.end(2):]\n\n                            # Update JSON with new query\n                            layer['layerDefinition']['definitionExpression'] = new_query\n\n                        except ValueError, KeyError:\n                            d = dt.strftime(dt.now(), \"%Y-%m-%d %H:%M:%S\")\n                            log_file.write(\"{}:\\n\".format(d))\n                            log_file.write(\"{}\\n\".format(m6.format(ic.date_field)))\n                            print(m6.format(ic.date_field))\n                            continue\n\n                # Commit update to AGOL item\n                useritem = item.userItem\n                params = arcrest.manageorg.ItemParameter()\n                useritem.updateItem(itemParameters = params,\n                                    text=json.dumps(mapjson))\n\n            # Retrieve the url and queries associated with the data and stats layers\n            print \"Getting layer info...\"\n\n            dataurl, dataquery = get_layer_properties(ic.data_layer_name, mapjson['operationalLayers'])\n\n            if not dataurl:\n                raise Exception(m3)\n\n            # Connect to the services\n            print \"Connecting to data layer...\"\n\n            if ic.data_service_type in ['AGOL', 'Portal']:\n                datalayer = connect_to_layer(dataurl, org_sh)\n            else:\n                datalayer = connect_to_layer(dataurl, ags_sh)\n\n            # If necessary, load new points to hosted service\n            if ic.data_feature_class:\n\n                # only attemp append if there are new features\n                temp_fc = arcpy.CopyFeatures_management(ic.data_feature_class, temp_fc)\n                sr_output = datalayer.extent['spatialReference']['wkid']\n                temp_fc_proj = arcpy.Project_management(temp_fc, proj_out, sr_output)\n\n                # Load data from layer to service\n                datalayer.deleteFeatures(where=\"1=1\")\n                datalayer.addFeatures(temp_fc_proj)\n                arcpy.Delete_management(temp_fc)\n                arcpy.Delete_management(temp_fc_proj)\n\n            # Count the data features that meet the map query\n            print \"Counting features\"\n            feature_cnt = count_features(datalayer, query=dataquery)\n\n            print \"Getting new stats...\"\n\n            # Current editor\n            editor = getpass.getuser()\n\n            attributes = get_attributes(statslayer, statsquery)\n            attributes[ic.datecurr] = today_agol\n            attributes[ic.date1] = stats[ic.datecurr]\n            attributes[ic.date2] = stats[ic.date1]\n            attributes[ic.date3] = stats[ic.date2]\n            attributes[ic.date4] = stats[ic.date3]\n            attributes[ic.observcurr] = feature_cnt\n            attributes[ic.observ1] = stats[ic.observcurr]\n            attributes[ic.observ2] = stats[ic.observ1]\n            attributes[ic.observ3] = stats[ic.observ2]\n            attributes[ic.observ4] = stats[ic.observ3]\n            attributes[ic.last_update] = today_agol\n            attributes[ic.last_editor] = editor\n            attributes[ic.end_date] = today_agol\n            if min_date is None:\n                attributes[ic.start_date] = stats[ic.end_date]\n            else:\n                attributes[ic.start_date] = get_epoch_time(min_date)        \n\n            edits = [{\"attributes\" : attributes}]\n            statslayer.applyEdits(updateFeatures=edits)\n\n            print \"Done.\"\n\n        except (common.ArcRestHelperError),e:\n            print \"error in function: %s\" % e[0]['function']\n            print \"error on line: %s\" % e[0]['line']\n            print \"error in file name: %s\" % e[0]['filename']\n            print \"with error message: %s\" % e[0]['synerror']\n            if 'arcpyError' in e[0]:\n                print \"with arcpy message: %s\" % e[0]['arcpyError']\n\n        except Exception as ex:\n            print(\"{}\\n\".format(ex))\n            d = dt.strftime(dt.now(), \"%Y-%m-%d %H:%M:%S\")\n            log_file.write(\"{}:\\n\".format(d))\n            log_file.write(\"{}\\n\".format(ex))\n        finally:\n            if arcpy.Exists(temp_fc):\n                arcpy.Delete_management(temp_fc)\n            if arcpy.Exists(proj_out):\n                arcpy.Delete_management(proj_out)\n\n# End main function\n\nif __name__ == '__main__':\n    main()\n"}
{"instruction":"Create logic in your Python application to handle any corner cases in the user input.","input":"<no input>","output":"def handle_corner_cases(input_string):\n    input_string = input_string.lower()\n    if 'heavy' in input_string or 'big' in input_string:\n        return 'Heavy\/Big objects detected!'\n    elif 'light' in input_string or 'small' in input_string:\n        return 'Light\/Small objects detected!'\n    else:\n        return 'Input not recognized!'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate logic in your Python application to handle any corner cases in the user input.\n\n### Input:\n<no input>\n\n### Output:\ndef handle_corner_cases(input_string):\n    input_string = input_string.lower()\n    if 'heavy' in input_string or 'big' in input_string:\n        return 'Heavy\/Big objects detected!'\n    elif 'light' in input_string or 'small' in input_string:\n        return 'Light\/Small objects detected!'\n    else:\n        return 'Input not recognized!'"}
{"instruction":"Write a Python program to merge two sorted lists. The result should also be a sorted list.","input":"list1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8]","output":"def mergeSortedLists(list1, list2):\n \n # Create variables\n result = []\n list1_index, list2_index = 0, 0\n \n # Iterate over both lists\n while list1_index < len(list1) and list2_index < len(list2):\n   # Compare and add the lower value to the result\n   if list1[list1_index] <= list2[list2_index]:\n     result.append(list1[list1_index])\n     list1_index += 1\n   else:\n     result.append(list2[list2_index])\n     list2_index += 1\n \n # Add any remainder items from the two lists\n result.extend(list1[list1_index:])\n result.extend(list2[list2_index:])\n \n return result\n \nlist1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8]\n \nprint(mergeSortedLists(list1, list2))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to merge two sorted lists. The result should also be a sorted list.\n\n### Input:\nlist1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8]\n\n### Output:\ndef mergeSortedLists(list1, list2):\n \n # Create variables\n result = []\n list1_index, list2_index = 0, 0\n \n # Iterate over both lists\n while list1_index < len(list1) and list2_index < len(list2):\n   # Compare and add the lower value to the result\n   if list1[list1_index] <= list2[list2_index]:\n     result.append(list1[list1_index])\n     list1_index += 1\n   else:\n     result.append(list2[list2_index])\n     list2_index += 1\n \n # Add any remainder items from the two lists\n result.extend(list1[list1_index:])\n result.extend(list2[list2_index:])\n \n return result\n \nlist1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8]\n \nprint(mergeSortedLists(list1, list2))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8]"}
{"instruction":"Convert a given JSON data into a Python dictionary object.","input":"{\n  \"name\": \"John\",\n  \"age\": 32,\n  \"address\": \"123 Main Street\"\n}","output":"import json\n\ndata = {\n \"name\": \"John\",\n \"age\": 32,\n \"address\": \"123 Main Street\"\n}\n\npy_dict = json.loads(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a given JSON data into a Python dictionary object.\n\n### Input:\n{\n  \"name\": \"John\",\n  \"age\": 32,\n  \"address\": \"123 Main Street\"\n}\n\n### Output:\nimport json\n\ndata = {\n \"name\": \"John\",\n \"age\": 32,\n \"address\": \"123 Main Street\"\n}\n\npy_dict = json.loads(data)"}
{"instruction":"Write a Python program to generate all possible combinations of a set of numbers.","input":"nums = [1, 2, 3]","output":"def combinations(nums):\n  \"\"\"\n Generate all possible combinations of a given set of numbers\n  \n  Args:\n    nums: a list of integers\n \n  Returns:\n    A list of list representing the possible combinations\n  \"\"\"\n  \n  # Base case\n  if len(nums) == 0:\n    return [[]]\n  \n  # Recursive step\n  ans = []\n  for comb in combinations(nums[1:]):\n    for i in range(len(comb)+1):\n      ans.append(comb[:i] + [nums[0]] + comb[i:])\n  return ans\n\n# Call the function with the given input\nprint(combinations(nums))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate all possible combinations of a set of numbers.\n\n### Input:\nnums = [1, 2, 3]\n\n### Output:\ndef combinations(nums):\n  \"\"\"\n Generate all possible combinations of a given set of numbers\n  \n  Args:\n    nums: a list of integers\n \n  Returns:\n    A list of list representing the possible combinations\n  \"\"\"\n  \n  # Base case\n  if len(nums) == 0:\n    return [[]]\n  \n  # Recursive step\n  ans = []\n  for comb in combinations(nums[1:]):\n    for i in range(len(comb)+1):\n      ans.append(comb[:i] + [nums[0]] + comb[i:])\n  return ans\n\n# Call the function with the given input\nprint(combinations(nums))"}
{"instruction":"Create a Python module that calculates the distance between two points given their latitude and longitude.","input":"Not applicable","output":"import math\n\ndef haversine_distance(lat1, lon1, lat2, lon2):\n    '''\n    Calculate the great circle distance between two points \n    on the earth (specified in decimal degrees).\n    Source: https:\/\/stackoverflow.com\/a\/4913653\n    '''\n    # convert decimal degrees to radians \n    lon1, lat1, lon2, lat2 = map(math.radians, [lon1, lat1, lon2, lat2])\n\n    # haversine formula \n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = math.sin(dlat\/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon\/2)**2\n    c = 2 * math.asin(math.sqrt(a)) \n    r = 6371 # Radius of earth in kilometers. Use 3956 for miles\n    return c * r","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module that calculates the distance between two points given their latitude and longitude.\n\n### Input:\nNot applicable\n\n### Output:\nimport math\n\ndef haversine_distance(lat1, lon1, lat2, lon2):\n    '''\n    Calculate the great circle distance between two points \n    on the earth (specified in decimal degrees).\n    Source: https:\/\/stackoverflow.com\/a\/4913653\n    '''\n    # convert decimal degrees to radians \n    lon1, lat1, lon2, lat2 = map(math.radians, [lon1, lat1, lon2, lat2])\n\n    # haversine formula \n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = math.sin(dlat\/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon\/2)**2\n    c = 2 * math.asin(math.sqrt(a)) \n    r = 6371 # Radius of earth in kilometers. Use 3956 for miles\n    return c * r"}
{"instruction":"Write a Python program to calculate the area of a triangle given 3 sides.","input":"side1=5, side2=8, side3=7","output":"def area(side1, side2, side3):\n    # calculate the semi-perimeter\n    s = (side1 + side2 + side3)\/2\n    # calculate the area\n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the area of a triangle given 3 sides.\n\n### Input:\nside1=5, side2=8, side3=7\n\n### Output:\ndef area(side1, side2, side3):\n    # calculate the semi-perimeter\n    s = (side1 + side2 + side3)\/2\n    # calculate the area\n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area"}
{"instruction":"Create a Python program to compare two lists and return their intersection","input":"list1 = [1,2,3,4,5]\nlist2 = [4,5,6,7,8]","output":"def intersection(list1, list2):\n    intersection = [value for value in list1 if value in list2]\n    return intersection\n\nlist1 = [1,2,3,4,5]\nlist2 = [4,5,6,7,8]\nresult = intersection(list1, list2)\nprint(result) # prints [4,5]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to compare two lists and return their intersection\n\n### Input:\nlist1 = [1,2,3,4,5]\nlist2 = [4,5,6,7,8]\n\n### Output:\ndef intersection(list1, list2):\n    intersection = [value for value in list1 if value in list2]\n    return intersection\n\nlist1 = [1,2,3,4,5]\nlist2 = [4,5,6,7,8]\nresult = intersection(list1, list2)\nprint(result) # prints [4,5]"}
{"instruction":"Write a Python program to print out the grade of a student based on the given marks","input":"60","output":"def get_grade(marks):\n    if marks >= 90:\n        grade = \"A+\"\n    elif marks >= 80 and marks < 90:\n        grade = \"A\"\n    elif marks >= 70 and marks < 80:\n        grade = \"B+\"\n    elif marks >= 60 and marks < 70:\n        grade = \"B\"\n    elif marks >= 50 and marks < 60:\n        grade = \"C+\"\n    else:\n        grade = \"F\"\n    \n    print(\"Grade: %s\" %grade)\n\nmarks = 60\nget_grade(marks)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print out the grade of a student based on the given marks\n\n### Input:\n60\n\n### Output:\ndef get_grade(marks):\n    if marks >= 90:\n        grade = \"A+\"\n    elif marks >= 80 and marks < 90:\n        grade = \"A\"\n    elif marks >= 70 and marks < 80:\n        grade = \"B+\"\n    elif marks >= 60 and marks < 70:\n        grade = \"B\"\n    elif marks >= 50 and marks < 60:\n        grade = \"C+\"\n    else:\n        grade = \"F\"\n    \n    print(\"Grade: %s\" %grade)\n\nmarks = 60\nget_grade(marks)"}
{"instruction":"Create a basic web scraper in Python that visits a news website and extracts the headlines from the homepage.","input":"Not applicable","output":"import requests \nfrom bs4 import BeautifulSoup\n\n# We fetch the raw HTML using requests\nr = requests.get('https:\/\/news.example.com')\n\n# We turn the HTML into a BeautifulSoup object\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# We extract the headlines as a list\nheadlines = [h2.text for h2 in soup.find_all('h2')]\n\n# We print out the headlines to the console\nfor headline in headlines:\n print(headline)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic web scraper in Python that visits a news website and extracts the headlines from the homepage.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests \nfrom bs4 import BeautifulSoup\n\n# We fetch the raw HTML using requests\nr = requests.get('https:\/\/news.example.com')\n\n# We turn the HTML into a BeautifulSoup object\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# We extract the headlines as a list\nheadlines = [h2.text for h2 in soup.find_all('h2')]\n\n# We print out the headlines to the console\nfor headline in headlines:\n print(headline)"}
{"instruction":"Develop a python program which can generate a random array of integers","input":"","output":"import random\n\ndef get_random_array(max_size):\n    arr = []\n\n    for _ in range(random.randint(0, max_size)):\n        arr.append(random.randint(0, max_size))\n    \n    return arr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python program which can generate a random array of integers\n\n### Input:\n\n\n### Output:\nimport random\n\ndef get_random_array(max_size):\n    arr = []\n\n    for _ in range(random.randint(0, max_size)):\n        arr.append(random.randint(0, max_size))\n    \n    return arr"}
{"instruction":"Write a Python program to find all the unique numbers in a list.","input":"[1, 2, 1, 3, 4, 5, 5, 1]","output":"def unique_numbers(number_list):\n    unique_numbers = []\n    for number in number_list:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n\nprint(unique_numbers([1, 2, 1, 3, 4, 5, 5, 1]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find all the unique numbers in a list.\n\n### Input:\n[1, 2, 1, 3, 4, 5, 5, 1]\n\n### Output:\ndef unique_numbers(number_list):\n    unique_numbers = []\n    for number in number_list:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n\nprint(unique_numbers([1, 2, 1, 3, 4, 5, 5, 1]))"}
{"instruction":"Create a scheduling algorithm in Python that takes a list of tasks as an input and returns the optimal schedule.","input":"tasks = [\n{\n 'start': 1,\n 'end': 3,\n 'task': 'Task 1'\n},\n{\n 'start': 2,\n 'end': 4,\n 'task': 'Task 2'\n},\n{\n 'start': 5,\n 'end': 8,\n 'task': 'Task 3'\n},\n{\n 'start': 6,\n 'end': 10,\n 'task': 'Task 4'\n}\n]","output":"def schedule(tasks):\n  # sort tasks by start time\n  tasks.sort(key=lambda x: x['start'])\n  \n  # track current time\n  time = 0\n  \n  # results list\n  results = []\n  \n  while len(tasks) > 0:\n    # find the next task that can be completed\n    next_task = None\n    for task in tasks:\n      if task['start'] >= time:\n        next_task = task\n        break\n      \n    # if no task can be completed, break out of the loop\n    if next_task == None:\n      break\n      \n    # remove the task from the list\n    tasks.remove(next_task)\n    \n    # add the task to the results and update the time\n    results.append(next_task)\n    time = next_task['end']\n  \n  return results\n  \nprint(schedule(tasks))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a scheduling algorithm in Python that takes a list of tasks as an input and returns the optimal schedule.\n\n### Input:\ntasks = [\n{\n 'start': 1,\n 'end': 3,\n 'task': 'Task 1'\n},\n{\n 'start': 2,\n 'end': 4,\n 'task': 'Task 2'\n},\n{\n 'start': 5,\n 'end': 8,\n 'task': 'Task 3'\n},\n{\n 'start': 6,\n 'end': 10,\n 'task': 'Task 4'\n}\n]\n\n### Output:\ndef schedule(tasks):\n  # sort tasks by start time\n  tasks.sort(key=lambda x: x['start'])\n  \n  # track current time\n  time = 0\n  \n  # results list\n  results = []\n  \n  while len(tasks) > 0:\n    # find the next task that can be completed\n    next_task = None\n    for task in tasks:\n      if task['start'] >= time:\n        next_task = task\n        break\n      \n    # if no task can be completed, break out of the loop\n    if next_task == None:\n      break\n      \n    # remove the task from the list\n    tasks.remove(next_task)\n    \n    # add the task to the results and update the time\n    results.append(next_task)\n    time = next_task['end']\n  \n  return results\n  \nprint(schedule(tasks))"}
{"instruction":"Optimize the following Python code by changing its structure and by incorporating efficient algorithms.","input":"def factor_of_three(n):\n count = 0\n for i in range(1, n+1):\n  if i % 3 == 0:\n   count += 1\n return count\n\nfactor_of_three(50)","output":"def factor_of_three(n):\n  return len([i for i in range(1, n+1) if i % 3 == 0])\n  \nfactor_of_three(50)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python code by changing its structure and by incorporating efficient algorithms.\n\n### Input:\ndef factor_of_three(n):\n count = 0\n for i in range(1, n+1):\n  if i % 3 == 0:\n   count += 1\n return count\n\nfactor_of_three(50)\n\n### Output:\ndef factor_of_three(n):\n  return len([i for i in range(1, n+1) if i % 3 == 0])\n  \nfactor_of_three(50)"}
{"instruction":"Develop a python code to find out the frequent items from a given list.","input":"list1 = [1,2,3,4,5,6,7,2,2,2,2,8,8,8,8,9,9,9]","output":"from collections import Counter\nlist1 = [1,2,3,4,5,6,7,2,2,2,2,8,8,8,8,9,9,9]\n\n# Most common items in the list\ndata = Counter(list1) \n  \n# Printing most common items \nprint(data.most_common()) # Output: [(2, 4), (8, 4), (9, 3), (1, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python code to find out the frequent items from a given list.\n\n### Input:\nlist1 = [1,2,3,4,5,6,7,2,2,2,2,8,8,8,8,9,9,9]\n\n### Output:\nfrom collections import Counter\nlist1 = [1,2,3,4,5,6,7,2,2,2,2,8,8,8,8,9,9,9]\n\n# Most common items in the list\ndata = Counter(list1) \n  \n# Printing most common items \nprint(data.most_common()) # Output: [(2, 4), (8, 4), (9, 3), (1, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1)]"}
{"instruction":"Write a Python code to rotate a given array by 90 degrees.","input":"arr = [   [1, 2, 3, 4], \n         [5, 6, 7, 8], \n         [9, 10, 11, 12],\n        [13, 14, 15, 16] \n    ]","output":"def rotate_90(arr):\n    # Get the size of the array\n    row = len(arr[0])\n    col = len(arr)\n\n    # Create an array to store the result\n    result = []\n\n    # Perform rotation\n    for i in range(row):\n        result.append([])\n        for j in range(col-1, -1, -1): # reversed range\n            result[i].append(arr[j][i])\n    \n    return result\n\nif __name__ == \"__main__\":\n    arr = [   [1, 2, 3, 4], \n             [5, 6, 7, 8], \n             [9, 10, 11, 12],\n            [13, 14, 15, 16] \n        ]\n    print(rotate_90(arr))\n    \n\"\"\"\n[[13, 9, 5, 1], \n[14, 10, 6, 2], \n[15, 11, 7, 3], \n[16, 12, 8, 4]]\n\"\"\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to rotate a given array by 90 degrees.\n\n### Input:\narr = [   [1, 2, 3, 4], \n         [5, 6, 7, 8], \n         [9, 10, 11, 12],\n        [13, 14, 15, 16] \n    ]\n\n### Output:\ndef rotate_90(arr):\n    # Get the size of the array\n    row = len(arr[0])\n    col = len(arr)\n\n    # Create an array to store the result\n    result = []\n\n    # Perform rotation\n    for i in range(row):\n        result.append([])\n        for j in range(col-1, -1, -1): # reversed range\n            result[i].append(arr[j][i])\n    \n    return result\n\nif __name__ == \"__main__\":\n    arr = [   [1, 2, 3, 4], \n             [5, 6, 7, 8], \n             [9, 10, 11, 12],\n            [13, 14, 15, 16] \n        ]\n    print(rotate_90(arr))\n    \n\"\"\"\n[[13, 9, 5, 1], \n[14, 10, 6, 2], \n[15, 11, 7, 3], \n[16, 12, 8, 4]]\n\"\"\""}
{"instruction":"Create a Python program to sort a list of dictionaries by a value of one of the dictionary's keys.","input":"# List of dictionaries\ndata = [\n    {'name': 'Brian', 'age': 32},\n    {'name': 'Anna', 'age': 25},\n    {'name': 'John', 'age': 28}\n]\n\nkey = 'age'","output":"# function to sort a list of dictionaries by a value of one of the dictionary's keys\ndef SortDictByKey(data, key):\n    return sorted(data, key=lambda i: i[key])\n\n# List of dictionaries\ndata = [\n    {'name': 'Brian', 'age': 32},\n    {'name': 'Anna', 'age': 25},\n    {'name': 'John', 'age': 28}\n]\n\nkey = 'age'\n# Print the sorted output\nprint(\"Sorted list of dictionaries is : \", SortDictByKey(data, key))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to sort a list of dictionaries by a value of one of the dictionary's keys.\n\n### Input:\n# List of dictionaries\ndata = [\n    {'name': 'Brian', 'age': 32},\n    {'name': 'Anna', 'age': 25},\n    {'name': 'John', 'age': 28}\n]\n\nkey = 'age'\n\n### Output:\n# function to sort a list of dictionaries by a value of one of the dictionary's keys\ndef SortDictByKey(data, key):\n    return sorted(data, key=lambda i: i[key])\n\n# List of dictionaries\ndata = [\n    {'name': 'Brian', 'age': 32},\n    {'name': 'Anna', 'age': 25},\n    {'name': 'John', 'age': 28}\n]\n\nkey = 'age'\n# Print the sorted output\nprint(\"Sorted list of dictionaries is : \", SortDictByKey(data, key))"}
{"instruction":"Create a Python program to calculate the area of a circle, given the radius.","input":"","output":"import math\n\ndef area_circumference(radius):\n    area = math.pi * radius ** 2\n    return area","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the area of a circle, given the radius.\n\n### Input:\n\n\n### Output:\nimport math\n\ndef area_circumference(radius):\n    area = math.pi * radius ** 2\n    return area"}
{"instruction":"Explain the difference between a ``list`` and a ``tuple`` in Python.","input":"","output":"The difference between a list and a tuple in Python is that a list is mutable, meaning its contents can be changed, while a tuple is immutable, meaning its contents cannot be changed. A list has square brackets around it, while a tuple has parentheses around it. Lists are used when the data needs to be changed, while tuples are used when the data is fixed and cannot be changed.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain the difference between a ``list`` and a ``tuple`` in Python.\n\n### Input:\n\n\n### Output:\nThe difference between a list and a tuple in Python is that a list is mutable, meaning its contents can be changed, while a tuple is immutable, meaning its contents cannot be changed. A list has square brackets around it, while a tuple has parentheses around it. Lists are used when the data needs to be changed, while tuples are used when the data is fixed and cannot be changed."}
{"instruction":"Write a Python program to detect whether a given number is a palindrome.","input":"middle","output":"def is_palindrome(n):\n    n = str(n)\n    return n == n[::-1]\n\nprint(is_palindrome(\"middle\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to detect whether a given number is a palindrome.\n\n### Input:\nmiddle\n\n### Output:\ndef is_palindrome(n):\n    n = str(n)\n    return n == n[::-1]\n\nprint(is_palindrome(\"middle\"))"}
{"instruction":"Create an API endpoint in Python using Flask that retrieves the current weather from a given city.","input":"Not applicable","output":"import requests\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('\/weather\/<city>')\ndef get_weather(city):\n url = \"https:\/\/api.openweathermap.org\/data\/2.5\/weather?q=\" + city + \"&appid=xxx\"\n response = requests.get(url)\n if response.status_code == 200:\n  data = response.json()\n  return jsonify({\n   'current_temperature': data['main']['temp']\n  })\n else:\n  return jsonify({'message': 'Error connecting to openweathermap API'}), 400\n\nif __name__ == '__main__':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API endpoint in Python using Flask that retrieves the current weather from a given city.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('\/weather\/<city>')\ndef get_weather(city):\n url = \"https:\/\/api.openweathermap.org\/data\/2.5\/weather?q=\" + city + \"&appid=xxx\"\n response = requests.get(url)\n if response.status_code == 200:\n  data = response.json()\n  return jsonify({\n   'current_temperature': data['main']['temp']\n  })\n else:\n  return jsonify({'message': 'Error connecting to openweathermap API'}), 400\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"instruction":"Generate a function in Python that takes a list and returns a list of all possible subsequences.","input":"[1, 2, 3]","output":"def get_subsequences(arr):\n    subsequences = [[]]\n    for num in arr:\n        new_subsequences = []\n        for sub in subsequences:\n            new_subsequences.append(sub + [num])\n        subsequences += new_subsequences\n    return subsequences\n\narr = [1, 2, 3]\nresult = get_subsequences(arr)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python that takes a list and returns a list of all possible subsequences.\n\n### Input:\n[1, 2, 3]\n\n### Output:\ndef get_subsequences(arr):\n    subsequences = [[]]\n    for num in arr:\n        new_subsequences = []\n        for sub in subsequences:\n            new_subsequences.append(sub + [num])\n        subsequences += new_subsequences\n    return subsequences\n\narr = [1, 2, 3]\nresult = get_subsequences(arr)\nprint(result)"}
{"instruction":"Write a Python program to print a frequency table for the given data.","input":"data = [2, 4, 7, 1, 6, 4, 7, 2, 6, 3]","output":"from collections import Counter\n\ndata = [2, 4, 7, 1, 6, 4, 7, 2, 6, 3]\n\ncounts = Counter(data)\n\nfor item, count in counts.items():\n    print(f'{item} : {count}')\n\n# Output\n# 2 : 2\n# 4 : 2\n# 7 : 2\n# 1 : 1\n# 6 : 2\n# 3 : 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print a frequency table for the given data.\n\n### Input:\ndata = [2, 4, 7, 1, 6, 4, 7, 2, 6, 3]\n\n### Output:\nfrom collections import Counter\n\ndata = [2, 4, 7, 1, 6, 4, 7, 2, 6, 3]\n\ncounts = Counter(data)\n\nfor item, count in counts.items():\n    print(f'{item} : {count}')\n\n# Output\n# 2 : 2\n# 4 : 2\n# 7 : 2\n# 1 : 1\n# 6 : 2\n# 3 : 1"}
{"instruction":"Create a code parser in Python to identify variables in a program.","input":"Python script: \nname = 'Abhishek'\nage = 23\n\ndef printDetails():\n    print('My name is ' + name)\n    print('I am ' + str(age) + ' years old')\n\nprintDetails()","output":"import ast\n\ndef parse_variables(source_code):\n    tree = ast.parse(source_code)\n    variable_names = []\n    \n    for node in ast.walk(tree):\n        if isinstance(node, ast.Assign):\n            variable_names.append(node.targets[0].id)\n\n    return variable_names\n\nif __name__ == '__main__':\n    source_code = \"name = 'Abhishek'\\nage = 23\\n\\ndef printDetails():\\n    print('My name is ' + name)\\n    print('I am ' + str(age) + ' years old')\\n\\nprintDetails()\"\n    variable_names = parse_variables(source_code)\n    print(variable_names)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code parser in Python to identify variables in a program.\n\n### Input:\nPython script: \nname = 'Abhishek'\nage = 23\n\ndef printDetails():\n    print('My name is ' + name)\n    print('I am ' + str(age) + ' years old')\n\nprintDetails()\n\n### Output:\nimport ast\n\ndef parse_variables(source_code):\n    tree = ast.parse(source_code)\n    variable_names = []\n    \n    for node in ast.walk(tree):\n        if isinstance(node, ast.Assign):\n            variable_names.append(node.targets[0].id)\n\n    return variable_names\n\nif __name__ == '__main__':\n    source_code = \"name = 'Abhishek'\\nage = 23\\n\\ndef printDetails():\\n    print('My name is ' + name)\\n    print('I am ' + str(age) + ' years old')\\n\\nprintDetails()\"\n    variable_names = parse_variables(source_code)\n    print(variable_names)"}
{"instruction":"Create an algorithm in Python which sorts an array of numbers using the quicksort algorithm.","input":"[42,56,2,67,23,10,14,7]","output":"def quickSort(arr):\n  if len(arr) <= 1:\n    return arr\n  pivot = arr[len(arr) \/\/ 2]\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quickSort(left) + middle + quickSort(right)\n\nunsorted_list = [42, 56, 2, 67, 23, 10, 14, 7]\nsorted_list = quickSort(unsorted_list)\n\nprint(sorted_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python which sorts an array of numbers using the quicksort algorithm.\n\n### Input:\n[42,56,2,67,23,10,14,7]\n\n### Output:\ndef quickSort(arr):\n  if len(arr) <= 1:\n    return arr\n  pivot = arr[len(arr) \/\/ 2]\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quickSort(left) + middle + quickSort(right)\n\nunsorted_list = [42, 56, 2, 67, 23, 10, 14, 7]\nsorted_list = quickSort(unsorted_list)\n\nprint(sorted_list)"}
{"instruction":"Establish a connection to a MySQL database using Python.","input":"","output":"# Python program to establish connection to a MySQL database\n\nimport mysql.connector\n\n# establish connection\nmydb = mysql.connector.connect(host=\"localhost\", user=\"yourusername\", passwd=\"yourpassword\")\n\n# create a cursor\nmycursor = mydb.cursor()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEstablish a connection to a MySQL database using Python.\n\n### Input:\n\n\n### Output:\n# Python program to establish connection to a MySQL database\n\nimport mysql.connector\n\n# establish connection\nmydb = mysql.connector.connect(host=\"localhost\", user=\"yourusername\", passwd=\"yourpassword\")\n\n# create a cursor\nmycursor = mydb.cursor()"}
{"instruction":"Write a Python function to calculate the average of two given numbers.","input":"","output":"def average(a, b):\n    return (a+b)\/2\n\nprint(average(4, 8))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to calculate the average of two given numbers.\n\n### Input:\n\n\n### Output:\ndef average(a, b):\n    return (a+b)\/2\n\nprint(average(4, 8))"}
{"instruction":"Translate the following sentence into Python code: \"Print 'Welcome' 5 times\".","input":"","output":"for i in range(5):\n  print(\"Welcome\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTranslate the following sentence into Python code: \"Print 'Welcome' 5 times\".\n\n### Input:\n\n\n### Output:\nfor i in range(5):\n  print(\"Welcome\")"}
{"instruction":"Generate a Python program to read an integer from the user and display a right-angled triangle with the given integer as the base.","input":"Not applicable","output":"num = int(input(\"Enter a number: \"))\n \nfor i in range(1, num + 1):\n  for j in range(1, i + 1):\n      print(\"*\", end=\" \")\n  print(\"\\r\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to read an integer from the user and display a right-angled triangle with the given integer as the base.\n\n### Input:\nNot applicable\n\n### Output:\nnum = int(input(\"Enter a number: \"))\n \nfor i in range(1, num + 1):\n  for j in range(1, i + 1):\n      print(\"*\", end=\" \")\n  print(\"\\r\")"}
{"instruction":"Develop a Python function to remove the last n characters from a given string.","input":"String = \u201cHello Programmers!\u201d","output":"def remove_last_n_characters(str, n):\n  return str[:len(str)-n]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function to remove the last n characters from a given string.\n\n### Input:\nString = \u201cHello Programmers!\u201d\n\n### Output:\ndef remove_last_n_characters(str, n):\n  return str[:len(str)-n]"}
{"instruction":"Write a python code to extract the year from a string.","input":"string = \"This movie was released in 1980\"","output":"import re\n\nstring = \"This movie was released in 1980\"\n\n# search for substring of 4 digits\nresult = re.search(r'\\d{4}', string)\n\n# print the year\nif result:\n    print(result.group())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to extract the year from a string.\n\n### Input:\nstring = \"This movie was released in 1980\"\n\n### Output:\nimport re\n\nstring = \"This movie was released in 1980\"\n\n# search for substring of 4 digits\nresult = re.search(r'\\d{4}', string)\n\n# print the year\nif result:\n    print(result.group())"}
{"instruction":"Generate a Python program to generate a Fibonacci series up to 5 terms.","input":"","output":"def fibonacci(num): \n  # Initializing first two numbers of the series \n  a = 0\n  b = 1\n  print(\"Fibonacci series: \", end = \" \") \n  for i in range(num): \n    # Generating next number in the series \n    c = a + b\n    a = b\n    b = c \n    # printing the generated number in the series \n    print(c, end =\" \") \n  \n# Get number of terms to generate in the series\nnum = 5\n\n#Calling fibonacci function  \nfibonacci(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to generate a Fibonacci series up to 5 terms.\n\n### Input:\n\n\n### Output:\ndef fibonacci(num): \n  # Initializing first two numbers of the series \n  a = 0\n  b = 1\n  print(\"Fibonacci series: \", end = \" \") \n  for i in range(num): \n    # Generating next number in the series \n    c = a + b\n    a = b\n    b = c \n    # printing the generated number in the series \n    print(c, end =\" \") \n  \n# Get number of terms to generate in the series\nnum = 5\n\n#Calling fibonacci function  \nfibonacci(num)"}
{"instruction":"Generate a program in Python that classifies a given example as either a positive or negative sentiment.","input":"Example: The film was terrible","output":"import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef classify_sentiment(text):\n analyzer = SentimentIntensityAnalyzer()\n scores = analyzer.polarity_scores(text)\n\n if scores['compound'] > 0:\n  return 'positive'\n elif scores['compound'] == 0:\n  return 'neutral'\n else:\n  return 'negative'\n\nprint(classify_sentiment('The film was terrible'))\n# negative","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python that classifies a given example as either a positive or negative sentiment.\n\n### Input:\nExample: The film was terrible\n\n### Output:\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef classify_sentiment(text):\n analyzer = SentimentIntensityAnalyzer()\n scores = analyzer.polarity_scores(text)\n\n if scores['compound'] > 0:\n  return 'positive'\n elif scores['compound'] == 0:\n  return 'neutral'\n else:\n  return 'negative'\n\nprint(classify_sentiment('The film was terrible'))\n# negative"}
{"instruction":"Create a program in Python that takes in 3 parameters and sends an email with the parameters.","input":"param1 = \"Hello\"\nparam2 = \"Welcome\"\nparam3 = \"to the world of programming\"","output":"import smtplib\n\n#set up the SMTP server\ns=smtplib.SMTP(host='your_host_address_here',port=your_port_here)\ns.starttls()\ns.login(user='your_username_here',password='your_password_here')\n\n#message to be sent\nmessage = \"Subject: Greetings\\n\\n\"+param1+\"\\n\"+param2+\"\\n\"+param3\n\n#sending the mail\ns.sendmail(user='your_username_here',recipients=your_recipients_mail_id_here,message=message)\n\n#terminating the session\ns.quit()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes in 3 parameters and sends an email with the parameters.\n\n### Input:\nparam1 = \"Hello\"\nparam2 = \"Welcome\"\nparam3 = \"to the world of programming\"\n\n### Output:\nimport smtplib\n\n#set up the SMTP server\ns=smtplib.SMTP(host='your_host_address_here',port=your_port_here)\ns.starttls()\ns.login(user='your_username_here',password='your_password_here')\n\n#message to be sent\nmessage = \"Subject: Greetings\\n\\n\"+param1+\"\\n\"+param2+\"\\n\"+param3\n\n#sending the mail\ns.sendmail(user='your_username_here',recipients=your_recipients_mail_id_here,message=message)\n\n#terminating the session\ns.quit()"}
{"instruction":"Make a Python program to check if a given string is a pangram or not. A pangram is a sentence that contains all letters of the English alphabet.","input":"","output":"import string \n\ndef is_pangram(sentence): \n   alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n   for char in alphabet: \n      if char not in sentence.lower(): \n         return False\n   return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a Python program to check if a given string is a pangram or not. A pangram is a sentence that contains all letters of the English alphabet.\n\n### Input:\n\n\n### Output:\nimport string \n\ndef is_pangram(sentence): \n   alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n   for char in alphabet: \n      if char not in sentence.lower(): \n         return False\n   return True"}
{"instruction":"Write a Python program to find the index of the first occurrence of the given element in the given list.","input":"inputlist = [1, 2, 5, 8, 10, 9]\nelement = 8","output":"def find_element(inputlist, element):\n    for i, num in enumerate(inputlist):\n        if element == num:\n            return i","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the index of the first occurrence of the given element in the given list.\n\n### Input:\ninputlist = [1, 2, 5, 8, 10, 9]\nelement = 8\n\n### Output:\ndef find_element(inputlist, element):\n    for i, num in enumerate(inputlist):\n        if element == num:\n            return i"}
{"instruction":"Create a Python program to extract data from webpages using the BeautifulSoup library.","input":"Not applicable","output":"from bs4 import BeautifulSoup\nimport requests\n\n# Get the page\nurl = 'http:\/\/example.com'\npage = requests.get(url)\n\n# Use BeautifulSoup for parsing\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Get the data\ndata = soup.find_all('div', class_='datacontainer')\n\n# Print the data\nfor item in data:\n print(item.text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to extract data from webpages using the BeautifulSoup library.\n\n### Input:\nNot applicable\n\n### Output:\nfrom bs4 import BeautifulSoup\nimport requests\n\n# Get the page\nurl = 'http:\/\/example.com'\npage = requests.get(url)\n\n# Use BeautifulSoup for parsing\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Get the data\ndata = soup.find_all('div', class_='datacontainer')\n\n# Print the data\nfor item in data:\n print(item.text)"}
{"instruction":"Design a Python program to convert the temperature in Celsius to Fahrenheit.","input":"25.2","output":"# Program to convert the temperature \n# from Celsius to Fahrenheit \n\ncelsius = 25.2\nfahrenheit = (celsius * 9\/5) + 32\n \nprint('%.2f degree Celsius is: %0.2f degree Fahrenheit' %(celsius,fahrenheit)) \n\n# Output: 25.20 degree Celsius is: 77.36 degree Fahrenheit","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to convert the temperature in Celsius to Fahrenheit.\n\n### Input:\n25.2\n\n### Output:\n# Program to convert the temperature \n# from Celsius to Fahrenheit \n\ncelsius = 25.2\nfahrenheit = (celsius * 9\/5) + 32\n \nprint('%.2f degree Celsius is: %0.2f degree Fahrenheit' %(celsius,fahrenheit)) \n\n# Output: 25.20 degree Celsius is: 77.36 degree Fahrenheit"}
{"instruction":"Create a machine learning model in Python using the scikit-learn library for classifying emails as ham or spam.","input":"Not applicable","output":"import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Create a data frame from the input data\ndf = pd.read_csv(\"emails.csv\")\n# Extract features and outputs\nX = df['content'].values\ny = df['label'].values\n# Split the dataset into train & test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n# Count vectorizer\nvectorizer = CountVectorizer()\nX_train = vectorizer.fit_transform(X_train)\nX_test = vectorizer.transform(X_test)\n# Create & fit the model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n# Test the model\nscore = model.score(X_test, y_test)\nprint(score)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python using the scikit-learn library for classifying emails as ham or spam.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Create a data frame from the input data\ndf = pd.read_csv(\"emails.csv\")\n# Extract features and outputs\nX = df['content'].values\ny = df['label'].values\n# Split the dataset into train & test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n# Count vectorizer\nvectorizer = CountVectorizer()\nX_train = vectorizer.fit_transform(X_train)\nX_test = vectorizer.transform(X_test)\n# Create & fit the model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n# Test the model\nscore = model.score(X_test, y_test)\nprint(score)"}
{"instruction":"Develop a program in python to generate a matrix","input":"Rows: 3\nColumns: 4","output":"def generate_matrix(rows, cols):\n   matrix = [] \n   for i in range(rows): \n       row = []\n       for j in range(cols): \n           row.append(0)\n       matrix.append(row)\n   return matrix\n\n# Example\nm = generate_matrix(3, 4)\nprint(m)  # Output: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in python to generate a matrix\n\n### Input:\nRows: 3\nColumns: 4\n\n### Output:\ndef generate_matrix(rows, cols):\n   matrix = [] \n   for i in range(rows): \n       row = []\n       for j in range(cols): \n           row.append(0)\n       matrix.append(row)\n   return matrix\n\n# Example\nm = generate_matrix(3, 4)\nprint(m)  # Output: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]"}
{"instruction":"Make the following Python code snippet more efficient.","input":"def determine_commission_rate(gross_sales):\n    if gross_sales >= 10000:\n        commission_rate = 0.1\n    elif gross_sales >= 5000 and gross_sales < 10000:\n        commission_rate = 0.07\n    elif gross_sales < 5000:\n        commission_rate = 0.05\n    return commission_rate","output":"def determine_commission_rate(gross_sales):\n    if gross_sales >= 10000:\n        return 0.1\n    elif gross_sales >= 5000:\n        return 0.07\n    else:\n        return 0.05","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake the following Python code snippet more efficient.\n\n### Input:\ndef determine_commission_rate(gross_sales):\n    if gross_sales >= 10000:\n        commission_rate = 0.1\n    elif gross_sales >= 5000 and gross_sales < 10000:\n        commission_rate = 0.07\n    elif gross_sales < 5000:\n        commission_rate = 0.05\n    return commission_rate\n\n### Output:\ndef determine_commission_rate(gross_sales):\n    if gross_sales >= 10000:\n        return 0.1\n    elif gross_sales >= 5000:\n        return 0.07\n    else:\n        return 0.05"}
{"instruction":"Generate a Python function that sorts a list of numbers using the bubble sort algorithm","input":"[8,2,11,9,20,7]","output":"def bubbleSort(list): \n\tn = len(list) \n\tfor i in range(n): \n\t\tfor j in range(0, n-i-1): \n\t\t\tif list[j] > list[j+1] : \n\t\t\t\tlist[j], list[j+1] = list[j+1], list[j] \n\treturn list\n\nprint(bubbleSort([8,2,11,9,20,7]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that sorts a list of numbers using the bubble sort algorithm\n\n### Input:\n[8,2,11,9,20,7]\n\n### Output:\ndef bubbleSort(list): \n\tn = len(list) \n\tfor i in range(n): \n\t\tfor j in range(0, n-i-1): \n\t\t\tif list[j] > list[j+1] : \n\t\t\t\tlist[j], list[j+1] = list[j+1], list[j] \n\treturn list\n\nprint(bubbleSort([8,2,11,9,20,7]))"}
{"instruction":"Construct a Python program to find all substrings of a given string","input":"String : Python","output":"def get_all_substrings(input_string): \n\tlength = len(input_string) \n\treturn [input_string[i:j+1] for i in range(length)  \n\t\t\t\t\t\t\tfor j in range(i,length)] \n\noutput = get_all_substrings('Python') \nprint(output)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to find all substrings of a given string\n\n### Input:\nString : Python\n\n### Output:\ndef get_all_substrings(input_string): \n\tlength = len(input_string) \n\treturn [input_string[i:j+1] for i in range(length)  \n\t\t\t\t\t\t\tfor j in range(i,length)] \n\noutput = get_all_substrings('Python') \nprint(output)"}
{"instruction":"The given code is a Python class `ProcHelper` that provides a helper for executing processes and commands. To use it, create an instance of the class with the command to execute and any additional arguments. The `wait` method can be called on the instance to wait for the process to complete and return the exit code, stdout, and stderr. The `exec_with_wrapper` function can be used to execute a command with a wrapper, such as `cabal exec` or `stack exec`. The `get_source_dir` function can be used to get the root of `hs-source-dirs` for a given filename in a project.","input":"","output":"# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-\n# ProcHelper: Process execution helper class.\n# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-\n\nimport errno\nimport subprocess\nimport os\nimport os.path\n\nimport SublimeHaskell.sublime_haskell_common as Common\nimport SublimeHaskell.internals.logging as Logging\nimport SublimeHaskell.internals.settings as Settings\nimport SublimeHaskell.internals.utils as Utils\nimport SublimeHaskell.internals.which as Which\nimport SublimeHaskell.internals.cabal_cfgrdr as CabalConfigRdr\nimport SublimeHaskell.internals.cabal_reader as CabalReader\n\nclass ProcHelper(object):\n    \"\"\"Command and tool process execution helper.\"\"\"\n\n    # Augmented PATH for the subprocesses and locating executables.\n    augmented_path = None\n\n    def __init__(self, command, **popen_kwargs):\n        \"\"\"Open a pipe to a command or tool.\"\"\"\n\n        if ProcHelper.augmented_path is None:\n            ProcHelper.augmented_path = ProcHelper.make_augmented_path()\n\n        ## Necessary evil: Don't cache the environment, just update the PATH in the current environment.\n        ## Why? Because someone could (like me) change os.environ via the ST console and those changes\n        ## would never make it here. Use case: settting $http_proxy so that stack can fetch packages.\n        proc_env = dict(os.environ)\n        proc_env['PATH'] = ProcHelper.augmented_path + os.pathsep + proc_env.get('PATH', '')\n\n        self.process = None\n        self.process_err = None\n\n        if Utils.is_windows():\n            startupinfo = subprocess.STARTUPINFO()\n            startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n            popen_kwargs['startupinfo'] = startupinfo\n\n        # Allow caller to specify something different for stdout or stderr -- provide\n        # the default here if unspecified.\n        popen_kwargs['stdout'] = popen_kwargs.get('stdout', subprocess.PIPE)\n        popen_kwargs['stderr'] = popen_kwargs.get('stderr', subprocess.PIPE)\n\n        try:\n            normcmd = Which.which(command, proc_env['PATH'])\n            if normcmd is not None:\n                self.process = subprocess.Popen(normcmd, stdin=subprocess.PIPE, env=proc_env, **popen_kwargs)\n            else:\n                self.process = None\n                self.process_err = \"SublimeHaskell.ProcHelper: {0} was not found on PATH!\".format(command[0])\n\n        except OSError as os_exc:\n            self.process_err = \\\n                '\\n'.join([\"SublimeHaskell: Problem executing '{0}'\".format(' '.join(command))\n                           , 'Operating system error: {0}'.format(os_exc)\n                          ])\n\n            if os_exc.errno == errno.EPIPE:\n                # Most likely reason: subprocess output a usage message\n                stdout, stderr = self.process.communicate()\n                exit_code = self.process.wait()\n                self.process_err = self.process_err + \\\n                    '\\n'.join([''\n                               , 'Process exit code: {0}'.format(exit_code)\n                               , ''\n                               , \"output:\"\n                               , stdout if stdout else \"--no output--\"\n                               , ''\n                               , 'error:'\n                               , stderr if stderr else \"--no error output--\"])\n                self.process = None\n            else:\n                self.process = None\n                raise os_exc\n\n    # 'with' statement support:\n    def __enter__(self):\n        return self\n\n    def __exit__(self, _type, _value, _traceback):\n        self.cleanup()\n        return False\n\n    def cleanup(self):\n        if self.process is not None:\n            self.process.stdin.close()\n            self.process.stdout.close()\n            if self.process.stderr is not None:\n                # stderr can be None if it is tied to stdout (i.e., 'stderr=subprocess.STDOUT')\n                self.process.stderr.close()\n\n    def wait(self, input_str=None):\n        \"\"\"Wait for subprocess to complete and exit, collect and decode ``stdout`` and ``stderr``,\n        returning the tuple ``(exit_code, stdout, stderr)```\"\"\"\n        if self.process is not None:\n            stdout, stderr = self.process.communicate(Utils.encode_bytes(input_str if input_str else ''))\n            exit_code = self.process.wait()\n            # Ensure that we reap the file descriptors.\n            self.cleanup()\n            return (exit_code, Utils.decode_bytes(stdout), Utils.decode_bytes(stderr))\n\n        return (-1, '', self.process_err or \"?? unknown error -- no process.\")\n\n    # Update the augmented environment when `add_to_PATH` or `add_standard_dirs` change.\n    @staticmethod\n    def update_environment(_key, _val):\n        # Reinitialize the tool -> path cache:\n        Which.reset_cache()\n        ProcHelper.augmented_path = ProcHelper.make_augmented_path()\n\n    @staticmethod\n    def make_augmented_path():\n        ''' Generate the augmented PATH for subprocesses: adds the appropriate cabal\/stack local install directory\n        ($HOME\/.local\/bin for *nix, %APPDATA%\/local\/bin for Windows) and updates PATH with `add_to_PATH` extras.\n        '''\n        std_places = []\n        if Settings.PLUGIN.add_standard_dirs:\n            std_places.append(\"$HOME\/.local\/bin\" if not Utils.is_windows() else \"%APPDATA%\/local\/bin\")\n            if Utils.is_macosx():\n                std_places.append('$HOME\/Library\/Haskell\/bin')\n            std_places += CabalConfigRdr.cabal_config()\n            std_places = [dir for dir in [Utils.normalize_path(path) for path in std_places] if os.path.isdir(dir)]\n\n        add_to_path = list(filter(os.path.isdir, map(Utils.normalize_path, Settings.PLUGIN.add_to_path)))\n\n        Logging.log(\"std_places = {0}\".format(std_places), Logging.LOG_INFO)\n        Logging.log(\"add_to_PATH = {0}\".format(add_to_path), Logging.LOG_INFO)\n\n        return os.pathsep.join(add_to_path + std_places)\n\n    @staticmethod\n    def get_extended_path():\n        if ProcHelper.augmented_path is None:\n            ProcHelper.augmented_path = ProcHelper.make_augmented_path()\n        return ProcHelper.augmented_path + os.pathsep + (os.environ.get('PATH', ''))\n\n    @staticmethod\n    def run_process(command, input_string='', **popen_kwargs):\n        \"\"\"Execute a subprocess, wait for it to complete, returning a ``(exit_code, stdout, stderr)``` tuple.\"\"\"\n        with ProcHelper(command, **popen_kwargs) as proc:\n            return proc.wait(input_string)\n\n\ndef exec_wrapper_cmd(exec_with, cmd_list):\n    wrapper = []\n    if exec_with == 'cabal':\n        wrapper = ['cabal', 'exec', cmd_list[0]]\n    elif exec_with == 'cabal-new-build':\n        wrapper = ['cabal', 'new-run', 'exe:' + cmd_list[0]]\n    elif exec_with == 'stack':\n        wrapper = ['stack', 'exec', cmd_list[0]]\n    else:\n        errmsg = 'ProcHelper.exec_wrapper_cmd: Unknown execution prefix \\'{0}\\''.format(exec_with)\n        raise RuntimeError(errmsg)\n\n    return wrapper + ['--'] + cmd_list[1:] if cmd_list[1:] else wrapper\n\ndef exec_with_wrapper(exec_with, install_dir, cmd_list):\n    '''Wrapper function for inserting the execution wrapper, e.g., 'cabal exec' or 'stack exec'\n\n    :returns: Process object from ProcHelper.\n    '''\n\n    proc_args = {}\n    if exec_with is not None:\n        cmd_list = exec_wrapper_cmd(exec_with, cmd_list)\n        if install_dir is not None:\n            proc_args['cwd'] = Utils.normalize_path(install_dir)\n        else:\n            raise RuntimeError('ProcHelper.exec_with_wrapper: invalid install_dir (None)')\n    else:\n        cmd = Which.which(cmd_list[0], ProcHelper.get_extended_path())\n        if cmd is not None:\n            cmd_list[0] = cmd\n\n    Logging.log('ProcHelper.exec_with_wrapper: {0} in {1}'.format(cmd_list, proc_args.get('cwd')), Logging.LOG_DEBUG)\n    return ProcHelper(cmd_list, **proc_args)\n\n\ndef get_source_dir(filename):\n    '''Get root of hs-source-dirs for filename in project.\n    '''\n    if not filename:\n        return os.path.expanduser('~')\n\n    cabal_dir, cabal_proj = Common.locate_cabal_project(filename)\n    if not cabal_dir:\n        # No cabal file -> Punt and assume the source directory for the file and project is the same as the file.\n        return os.path.dirname(filename)\n    else:\n        proj_info = CabalReader.CabalProjectReader(cabal_dir, cabal_proj)\n        cabal_info = proj_info.cabal_info\n        dirs = ['.']\n\n        executables = cabal_info.get('executable', {})\n        dirs.extend([sdir.strip()\n                     for exe in executables\n                     for sdirs in executables[exe].get('hs-source-dirs', [])\n                     for sdir in sdirs.split(',')])\n        dirs.extend([sdir.strip()\n                     for sdirs in cabal_info.get('library', {}).get('hs-source-dirs', [])\n                     for sdir in sdirs.split(',')])\n\n        paths = [os.path.abspath(os.path.join(cabal_dir, srcdirs)) for srcdirs in set(dirs)]\n        paths.sort(key=lambda p: -len(p))\n\n        for path in paths:\n            if filename.startswith(path):\n                return path\n\n    return os.path.dirname(filename)\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python class `ProcHelper` that provides a helper for executing processes and commands. To use it, create an instance of the class with the command to execute and any additional arguments. The `wait` method can be called on the instance to wait for the process to complete and return the exit code, stdout, and stderr. The `exec_with_wrapper` function can be used to execute a command with a wrapper, such as `cabal exec` or `stack exec`. The `get_source_dir` function can be used to get the root of `hs-source-dirs` for a given filename in a project.\n\n### Input:\n\n\n### Output:\n# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-\n# ProcHelper: Process execution helper class.\n# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-\n\nimport errno\nimport subprocess\nimport os\nimport os.path\n\nimport SublimeHaskell.sublime_haskell_common as Common\nimport SublimeHaskell.internals.logging as Logging\nimport SublimeHaskell.internals.settings as Settings\nimport SublimeHaskell.internals.utils as Utils\nimport SublimeHaskell.internals.which as Which\nimport SublimeHaskell.internals.cabal_cfgrdr as CabalConfigRdr\nimport SublimeHaskell.internals.cabal_reader as CabalReader\n\nclass ProcHelper(object):\n    \"\"\"Command and tool process execution helper.\"\"\"\n\n    # Augmented PATH for the subprocesses and locating executables.\n    augmented_path = None\n\n    def __init__(self, command, **popen_kwargs):\n        \"\"\"Open a pipe to a command or tool.\"\"\"\n\n        if ProcHelper.augmented_path is None:\n            ProcHelper.augmented_path = ProcHelper.make_augmented_path()\n\n        ## Necessary evil: Don't cache the environment, just update the PATH in the current environment.\n        ## Why? Because someone could (like me) change os.environ via the ST console and those changes\n        ## would never make it here. Use case: settting $http_proxy so that stack can fetch packages.\n        proc_env = dict(os.environ)\n        proc_env['PATH'] = ProcHelper.augmented_path + os.pathsep + proc_env.get('PATH', '')\n\n        self.process = None\n        self.process_err = None\n\n        if Utils.is_windows():\n            startupinfo = subprocess.STARTUPINFO()\n            startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n            popen_kwargs['startupinfo'] = startupinfo\n\n        # Allow caller to specify something different for stdout or stderr -- provide\n        # the default here if unspecified.\n        popen_kwargs['stdout'] = popen_kwargs.get('stdout', subprocess.PIPE)\n        popen_kwargs['stderr'] = popen_kwargs.get('stderr', subprocess.PIPE)\n\n        try:\n            normcmd = Which.which(command, proc_env['PATH'])\n            if normcmd is not None:\n                self.process = subprocess.Popen(normcmd, stdin=subprocess.PIPE, env=proc_env, **popen_kwargs)\n            else:\n                self.process = None\n                self.process_err = \"SublimeHaskell.ProcHelper: {0} was not found on PATH!\".format(command[0])\n\n        except OSError as os_exc:\n            self.process_err = \\\n                '\\n'.join([\"SublimeHaskell: Problem executing '{0}'\".format(' '.join(command))\n                           , 'Operating system error: {0}'.format(os_exc)\n                          ])\n\n            if os_exc.errno == errno.EPIPE:\n                # Most likely reason: subprocess output a usage message\n                stdout, stderr = self.process.communicate()\n                exit_code = self.process.wait()\n                self.process_err = self.process_err + \\\n                    '\\n'.join([''\n                               , 'Process exit code: {0}'.format(exit_code)\n                               , ''\n                               , \"output:\"\n                               , stdout if stdout else \"--no output--\"\n                               , ''\n                               , 'error:'\n                               , stderr if stderr else \"--no error output--\"])\n                self.process = None\n            else:\n                self.process = None\n                raise os_exc\n\n    # 'with' statement support:\n    def __enter__(self):\n        return self\n\n    def __exit__(self, _type, _value, _traceback):\n        self.cleanup()\n        return False\n\n    def cleanup(self):\n        if self.process is not None:\n            self.process.stdin.close()\n            self.process.stdout.close()\n            if self.process.stderr is not None:\n                # stderr can be None if it is tied to stdout (i.e., 'stderr=subprocess.STDOUT')\n                self.process.stderr.close()\n\n    def wait(self, input_str=None):\n        \"\"\"Wait for subprocess to complete and exit, collect and decode ``stdout`` and ``stderr``,\n        returning the tuple ``(exit_code, stdout, stderr)```\"\"\"\n        if self.process is not None:\n            stdout, stderr = self.process.communicate(Utils.encode_bytes(input_str if input_str else ''))\n            exit_code = self.process.wait()\n            # Ensure that we reap the file descriptors.\n            self.cleanup()\n            return (exit_code, Utils.decode_bytes(stdout), Utils.decode_bytes(stderr))\n\n        return (-1, '', self.process_err or \"?? unknown error -- no process.\")\n\n    # Update the augmented environment when `add_to_PATH` or `add_standard_dirs` change.\n    @staticmethod\n    def update_environment(_key, _val):\n        # Reinitialize the tool -> path cache:\n        Which.reset_cache()\n        ProcHelper.augmented_path = ProcHelper.make_augmented_path()\n\n    @staticmethod\n    def make_augmented_path():\n        ''' Generate the augmented PATH for subprocesses: adds the appropriate cabal\/stack local install directory\n        ($HOME\/.local\/bin for *nix, %APPDATA%\/local\/bin for Windows) and updates PATH with `add_to_PATH` extras.\n        '''\n        std_places = []\n        if Settings.PLUGIN.add_standard_dirs:\n            std_places.append(\"$HOME\/.local\/bin\" if not Utils.is_windows() else \"%APPDATA%\/local\/bin\")\n            if Utils.is_macosx():\n                std_places.append('$HOME\/Library\/Haskell\/bin')\n            std_places += CabalConfigRdr.cabal_config()\n            std_places = [dir for dir in [Utils.normalize_path(path) for path in std_places] if os.path.isdir(dir)]\n\n        add_to_path = list(filter(os.path.isdir, map(Utils.normalize_path, Settings.PLUGIN.add_to_path)))\n\n        Logging.log(\"std_places = {0}\".format(std_places), Logging.LOG_INFO)\n        Logging.log(\"add_to_PATH = {0}\".format(add_to_path), Logging.LOG_INFO)\n\n        return os.pathsep.join(add_to_path + std_places)\n\n    @staticmethod\n    def get_extended_path():\n        if ProcHelper.augmented_path is None:\n            ProcHelper.augmented_path = ProcHelper.make_augmented_path()\n        return ProcHelper.augmented_path + os.pathsep + (os.environ.get('PATH', ''))\n\n    @staticmethod\n    def run_process(command, input_string='', **popen_kwargs):\n        \"\"\"Execute a subprocess, wait for it to complete, returning a ``(exit_code, stdout, stderr)``` tuple.\"\"\"\n        with ProcHelper(command, **popen_kwargs) as proc:\n            return proc.wait(input_string)\n\n\ndef exec_wrapper_cmd(exec_with, cmd_list):\n    wrapper = []\n    if exec_with == 'cabal':\n        wrapper = ['cabal', 'exec', cmd_list[0]]\n    elif exec_with == 'cabal-new-build':\n        wrapper = ['cabal', 'new-run', 'exe:' + cmd_list[0]]\n    elif exec_with == 'stack':\n        wrapper = ['stack', 'exec', cmd_list[0]]\n    else:\n        errmsg = 'ProcHelper.exec_wrapper_cmd: Unknown execution prefix \\'{0}\\''.format(exec_with)\n        raise RuntimeError(errmsg)\n\n    return wrapper + ['--'] + cmd_list[1:] if cmd_list[1:] else wrapper\n\ndef exec_with_wrapper(exec_with, install_dir, cmd_list):\n    '''Wrapper function for inserting the execution wrapper, e.g., 'cabal exec' or 'stack exec'\n\n    :returns: Process object from ProcHelper.\n    '''\n\n    proc_args = {}\n    if exec_with is not None:\n        cmd_list = exec_wrapper_cmd(exec_with, cmd_list)\n        if install_dir is not None:\n            proc_args['cwd'] = Utils.normalize_path(install_dir)\n        else:\n            raise RuntimeError('ProcHelper.exec_with_wrapper: invalid install_dir (None)')\n    else:\n        cmd = Which.which(cmd_list[0], ProcHelper.get_extended_path())\n        if cmd is not None:\n            cmd_list[0] = cmd\n\n    Logging.log('ProcHelper.exec_with_wrapper: {0} in {1}'.format(cmd_list, proc_args.get('cwd')), Logging.LOG_DEBUG)\n    return ProcHelper(cmd_list, **proc_args)\n\n\ndef get_source_dir(filename):\n    '''Get root of hs-source-dirs for filename in project.\n    '''\n    if not filename:\n        return os.path.expanduser('~')\n\n    cabal_dir, cabal_proj = Common.locate_cabal_project(filename)\n    if not cabal_dir:\n        # No cabal file -> Punt and assume the source directory for the file and project is the same as the file.\n        return os.path.dirname(filename)\n    else:\n        proj_info = CabalReader.CabalProjectReader(cabal_dir, cabal_proj)\n        cabal_info = proj_info.cabal_info\n        dirs = ['.']\n\n        executables = cabal_info.get('executable', {})\n        dirs.extend([sdir.strip()\n                     for exe in executables\n                     for sdirs in executables[exe].get('hs-source-dirs', [])\n                     for sdir in sdirs.split(',')])\n        dirs.extend([sdir.strip()\n                     for sdirs in cabal_info.get('library', {}).get('hs-source-dirs', [])\n                     for sdir in sdirs.split(',')])\n\n        paths = [os.path.abspath(os.path.join(cabal_dir, srcdirs)) for srcdirs in set(dirs)]\n        paths.sort(key=lambda p: -len(p))\n\n        for path in paths:\n            if filename.startswith(path):\n                return path\n\n    return os.path.dirname(filename)\n"}
{"instruction":"Write a Python program to find the sum of all integers in a given list that are multiples of 8.","input":"4, 8, 12, 17, 30","output":"# Initializing list \nl = [4, 8, 12, 17, 30] \n\n# Function to calculate sum \ndef sum_multiples(l): \n\tsum = 0\n\t\n\t# iterating over list \n\tfor num in l: \n\t\t\n\t\t# checking for multiples of 8 \n\t\tif num % 8 == 0: \n\t\t\tsum += num \n\t\t\t\n\treturn sum\n\n# Driver code \nprint(sum_multiples(l)) \n# Output: 20","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the sum of all integers in a given list that are multiples of 8.\n\n### Input:\n4, 8, 12, 17, 30\n\n### Output:\n# Initializing list \nl = [4, 8, 12, 17, 30] \n\n# Function to calculate sum \ndef sum_multiples(l): \n\tsum = 0\n\t\n\t# iterating over list \n\tfor num in l: \n\t\t\n\t\t# checking for multiples of 8 \n\t\tif num % 8 == 0: \n\t\t\tsum += num \n\t\t\t\n\treturn sum\n\n# Driver code \nprint(sum_multiples(l)) \n# Output: 20"}
{"instruction":"Develop a python class that checks if a given number is a prime number or not.","input":"","output":"class CheckPrime(object):\n\n    def __init__(self, number):\n        self.number = number\n\n    def is_prime(self):\n        if self.number < 2:\n            return False\n\n        for i in range(2, self.number):\n            if self.number % i == 0:\n                return False\n        \n        return True\n\nif __name__ == '__main__':\n    number = int(input('Please input a number: \\n'))\n    check_prime = CheckPrime(number)\n    if check_prime.is_prime():\n        print('The number {} is a prime number.'.format(number))\n    else:\n        print('The number {} is not a prime number.'.format(number))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python class that checks if a given number is a prime number or not.\n\n### Input:\n\n\n### Output:\nclass CheckPrime(object):\n\n    def __init__(self, number):\n        self.number = number\n\n    def is_prime(self):\n        if self.number < 2:\n            return False\n\n        for i in range(2, self.number):\n            if self.number % i == 0:\n                return False\n        \n        return True\n\nif __name__ == '__main__':\n    number = int(input('Please input a number: \\n'))\n    check_prime = CheckPrime(number)\n    if check_prime.is_prime():\n        print('The number {} is a prime number.'.format(number))\n    else:\n        print('The number {} is not a prime number.'.format(number))"}
{"instruction":"Create a program in Python that will find the smallest number in a list of numbers.","input":"[5, 4, 12, 17, 9]","output":"def find_smallest_number(numbers):\n    smallest = numbers[0] \n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    return smallest\n\nprint(find_smallest_number([5, 4, 12, 17, 9]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that will find the smallest number in a list of numbers.\n\n### Input:\n[5, 4, 12, 17, 9]\n\n### Output:\ndef find_smallest_number(numbers):\n    smallest = numbers[0] \n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    return smallest\n\nprint(find_smallest_number([5, 4, 12, 17, 9]))"}
{"instruction":"Create a Python script to implement a linear search for a given list of numbers.","input":"numbers_list = [1, 4, 5, 6, 7, 8 , 10]\nnumber = 6","output":"def linear_search(numbers_list, number):\n    \"\"\"Implements a linear search for a given list of numbers and returns the index of the number if exists\"\"\"\n    \n    for index, element in enumerate(numbers_list):\n        if element == number:\n            return index\n    return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to implement a linear search for a given list of numbers.\n\n### Input:\nnumbers_list = [1, 4, 5, 6, 7, 8 , 10]\nnumber = 6\n\n### Output:\ndef linear_search(numbers_list, number):\n    \"\"\"Implements a linear search for a given list of numbers and returns the index of the number if exists\"\"\"\n    \n    for index, element in enumerate(numbers_list):\n        if element == number:\n            return index\n    return -1"}
{"instruction":"Write code to generate a set of random numbers between 0 and 10 in Python.","input":"Number of values in the set: 5","output":"import random\n\nvalues = random.sample(range(11), 5)\nprint(values) \/\/ [5, 9, 3, 4, 1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to generate a set of random numbers between 0 and 10 in Python.\n\n### Input:\nNumber of values in the set: 5\n\n### Output:\nimport random\n\nvalues = random.sample(range(11), 5)\nprint(values) \/\/ [5, 9, 3, 4, 1]"}
{"instruction":"Write a code snippet for a simple linear regression model in Python.","input":"Not applicable","output":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn import linear_model\n\n# Read data from CSV\ndata = pd.read_csv('data.csv')\n\n# Set X and Y\nX = data['X']\nY = data['Y']\n\n# Create linear regression model\nmodel = linear_model.LinearRegression()\n\n# Train the model\nmodel.fit(X, Y)\n\n# Make predictions\nY_pred = model.predict(X)\n\n# Visualize the results\nplt.scatter(X, Y)\nplt.plot(X, Y_pred, color='red')\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet for a simple linear regression model in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn import linear_model\n\n# Read data from CSV\ndata = pd.read_csv('data.csv')\n\n# Set X and Y\nX = data['X']\nY = data['Y']\n\n# Create linear regression model\nmodel = linear_model.LinearRegression()\n\n# Train the model\nmodel.fit(X, Y)\n\n# Make predictions\nY_pred = model.predict(X)\n\n# Visualize the results\nplt.scatter(X, Y)\nplt.plot(X, Y_pred, color='red')\nplt.show()"}
{"instruction":"Edit the following Python program to make a direct call to the display_age method:","input":"class Employee:\n name = \"\"\n age = 0\n\ndef __init__(self):\n pass\n\ndef set_name(self, n):\n self.name = n\n\ndef set_age(self, a):\n self.age = a\n\ndef display_age(self):\n print(self.age)","output":"class Employee:\n name = \"\"\n age = 0\n\ndef __init__(self):\n pass\n\ndef set_name(self, n):\n self.name = n\n\ndef set_age(self, a):\n self.age = a\n\ndef display_age(self):\n print(self.age)\n\n# Call display_age directly\nEmployee().display_age()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python program to make a direct call to the display_age method:\n\n### Input:\nclass Employee:\n name = \"\"\n age = 0\n\ndef __init__(self):\n pass\n\ndef set_name(self, n):\n self.name = n\n\ndef set_age(self, a):\n self.age = a\n\ndef display_age(self):\n print(self.age)\n\n### Output:\nclass Employee:\n name = \"\"\n age = 0\n\ndef __init__(self):\n pass\n\ndef set_name(self, n):\n self.name = n\n\ndef set_age(self, a):\n self.age = a\n\ndef display_age(self):\n print(self.age)\n\n# Call display_age directly\nEmployee().display_age()"}
{"instruction":"Write a Python function which takes a number as a parameter and check the number is prime or not.","input":"","output":"def is_prime(num): \n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False \n        return True\n    else: \n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function which takes a number as a parameter and check the number is prime or not.\n\n### Input:\n\n\n### Output:\ndef is_prime(num): \n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False \n        return True\n    else: \n        return False"}
{"instruction":"Construct a web-application with HTML and JavaScript to display your resume.","input":"","output":"<!DOCTYPE html>\n<html>\n<head>\n  <title>My Resume<\/title>\n  <style>\n    body { font-family: sans-serif; }\n    #resume_container {\n      width: 70%;\n      max-width: 600px;\n      margin: 0 auto;\n      padding: 20px;\n      border: 1px solid #ccc;\n      box-shadow: 3px 3px 8px #ccc;\n    }\n    .resume_item {\n      padding: 15px 0;\n      border-bottom: 1px solid #ccc;\n    }\n  <\/style>\n<\/head>\n<body>\n\n<div id=\"resume_container\">\n  <div class=\"resume_item\">\n   <h1>John Doe<\/h1>\n   <h2>Software Developer<\/h2>\n  <\/div>\n \n  <div class=\"resume_item\">\n   <h3>Education<\/h3>\n   <ul>\n    <li>University of XYZ, 2018 - 2021<\/li>\n   <\/ul>\n  <\/div>\n\n  <div class=\"resume_item\">\n   <h3>Professional Experience<\/h3>\n   <ul>\n    <li>Company ABC, Software Developer, 2020 - Present<\/li>\n    <li>Company XYZ, Software Developer Intern, 2019 - 2020<\/li>\n   <\/ul>\n  <\/div>\n \n  <div class=\"resume_item\">\n   <h3>Skills &amp; Tools<\/h3>\n   <ul>\n    <li>Python, SQL, JavaScript<\/li>\n    <li>HTML\/CSS<\/li>\n   <\/ul>\n  <\/div>\n\n  <div class=\"resume_item\">\n   <h3>Achievements<\/h3>\n   <ul>\n    <li>Awarded \"Software Developer of the Year\" in 20","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a web-application with HTML and JavaScript to display your resume.\n\n### Input:\n\n\n### Output:\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My Resume<\/title>\n  <style>\n    body { font-family: sans-serif; }\n    #resume_container {\n      width: 70%;\n      max-width: 600px;\n      margin: 0 auto;\n      padding: 20px;\n      border: 1px solid #ccc;\n      box-shadow: 3px 3px 8px #ccc;\n    }\n    .resume_item {\n      padding: 15px 0;\n      border-bottom: 1px solid #ccc;\n    }\n  <\/style>\n<\/head>\n<body>\n\n<div id=\"resume_container\">\n  <div class=\"resume_item\">\n   <h1>John Doe<\/h1>\n   <h2>Software Developer<\/h2>\n  <\/div>\n \n  <div class=\"resume_item\">\n   <h3>Education<\/h3>\n   <ul>\n    <li>University of XYZ, 2018 - 2021<\/li>\n   <\/ul>\n  <\/div>\n\n  <div class=\"resume_item\">\n   <h3>Professional Experience<\/h3>\n   <ul>\n    <li>Company ABC, Software Developer, 2020 - Present<\/li>\n    <li>Company XYZ, Software Developer Intern, 2019 - 2020<\/li>\n   <\/ul>\n  <\/div>\n \n  <div class=\"resume_item\">\n   <h3>Skills &amp; Tools<\/h3>\n   <ul>\n    <li>Python, SQL, JavaScript<\/li>\n    <li>HTML\/CSS<\/li>\n   <\/ul>\n  <\/div>\n\n  <div class=\"resume_item\">\n   <h3>Achievements<\/h3>\n   <ul>\n    <li>Awarded \"Software Developer of the Year\" in 20"}
{"instruction":"Provide a Python program that takes a number as input, and calculates the factorial of that number.","input":"5","output":"def factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n \nnum = int(input(\"Enter a number:\"))\nprint(factorial(num))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProvide a Python program that takes a number as input, and calculates the factorial of that number.\n\n### Input:\n5\n\n### Output:\ndef factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n \nnum = int(input(\"Enter a number:\"))\nprint(factorial(num))"}
{"instruction":"Create a list of even numbers from 0 to 30 in one line of Python.","input":"","output":"even_numbers = [num for num in range(0, 31) if num % 2 == 0]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a list of even numbers from 0 to 30 in one line of Python.\n\n### Input:\n\n\n### Output:\neven_numbers = [num for num in range(0, 31) if num % 2 == 0]"}
{"instruction":"Write a Python program to display the first and last colors from the following list.","input":"Colors: ['Red', 'Green', 'White', 'Black']","output":"# List of colors\ncolors = ['Red', 'Green', 'White', 'Black']\n\n# First color\nprint(colors[0])\n\n# Last color\nprint(colors[-1])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to display the first and last colors from the following list.\n\n### Input:\nColors: ['Red', 'Green', 'White', 'Black']\n\n### Output:\n# List of colors\ncolors = ['Red', 'Green', 'White', 'Black']\n\n# First color\nprint(colors[0])\n\n# Last color\nprint(colors[-1])"}
{"instruction":"Develop an algorithm in Python that finds the minimum element from a given array.","input":"[14, 7, 25, 16]","output":"def findMin(arr): \n     \n    # Initialize minimum element as first \n    # element of array \n    min = arr[0] \n  \n    # Loop through the array and get \n    # the current element \n    for i in range(len(arr)): \n        if arr[i] < min: \n            min = arr[i] \n  \n    return min\n\narr = [14, 7, 25, 16]\n\nprint(findMin(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python that finds the minimum element from a given array.\n\n### Input:\n[14, 7, 25, 16]\n\n### Output:\ndef findMin(arr): \n     \n    # Initialize minimum element as first \n    # element of array \n    min = arr[0] \n  \n    # Loop through the array and get \n    # the current element \n    for i in range(len(arr)): \n        if arr[i] < min: \n            min = arr[i] \n  \n    return min\n\narr = [14, 7, 25, 16]\n\nprint(findMin(arr))"}
{"instruction":"Create a Python code snippet that uses a try-except statement to capture an IndexError.","input":"Not applicable","output":"try:\n my_list = [1, 2, 3]\n print(my_list[4])\nexcept IndexError as e:\n print('Index not found!')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code snippet that uses a try-except statement to capture an IndexError.\n\n### Input:\nNot applicable\n\n### Output:\ntry:\n my_list = [1, 2, 3]\n print(my_list[4])\nexcept IndexError as e:\n print('Index not found!')"}
{"instruction":"Generate a Python library for linear algebra operations.","input":"","output":"import numpy as np\n\ndef add(x, y):\n    # adds two matrices x and y\n    return np.add(x, y)\n\ndef subtract(x, y):\n    # subtracts two matrices x and y\n    return np.subtract(x, y)\n\ndef multiply(x, y):\n    # multiplies two matrices x and y\n    return np.matmul(x, y)\n\ndef transpose(x):\n    # transpose a matrix x\n    return np.transpose(x)\n\ndef determinant(x):\n    # finds the determinant of a matrix x\n    return np.linalg.det(x)\n\ndef inverse(x):\n    # finds the inverse of a matrix x\n    return np.linalg.inv(x)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python library for linear algebra operations.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\ndef add(x, y):\n    # adds two matrices x and y\n    return np.add(x, y)\n\ndef subtract(x, y):\n    # subtracts two matrices x and y\n    return np.subtract(x, y)\n\ndef multiply(x, y):\n    # multiplies two matrices x and y\n    return np.matmul(x, y)\n\ndef transpose(x):\n    # transpose a matrix x\n    return np.transpose(x)\n\ndef determinant(x):\n    # finds the determinant of a matrix x\n    return np.linalg.det(x)\n\ndef inverse(x):\n    # finds the inverse of a matrix x\n    return np.linalg.inv(x)"}
{"instruction":"Develop a valid Python script which computes the root of a given quadratic equation","input":"a = 1, b = -7, c =12","output":"import math\n\ndef quadratic_equation_roots(a, b, c):\n  d = b**2 - 4*a*c\n\n  if d > 0:\n    x1 = (-b + math.sqrt(d)) \/ (2*a)\n    x2 = (-b - math.sqrt(d)) \/ (2*a)\n    return x1, x2\n  else:\n    return \"This equation has no real roots!\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a valid Python script which computes the root of a given quadratic equation\n\n### Input:\na = 1, b = -7, c =12\n\n### Output:\nimport math\n\ndef quadratic_equation_roots(a, b, c):\n  d = b**2 - 4*a*c\n\n  if d > 0:\n    x1 = (-b + math.sqrt(d)) \/ (2*a)\n    x2 = (-b - math.sqrt(d)) \/ (2*a)\n    return x1, x2\n  else:\n    return \"This equation has no real roots!\""}
{"instruction":"Write a Python program to find the number of different ways to express n as the sum of 1, 3 and 4.","input":"Number: 8","output":"def countWays(n):  \n if (n == 0): \n return 1\n elif (n < 0): \n return 0\n else: \n return countWays(n-1) + countWays(n-3) + countWays(n-4)\n\nn = 8\nresult = countWays(n)\n\nprint(\"The number of different ways to express\", n, \"as the sum of 1, 3 and 4 is:\", result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the number of different ways to express n as the sum of 1, 3 and 4.\n\n### Input:\nNumber: 8\n\n### Output:\ndef countWays(n):  \n if (n == 0): \n return 1\n elif (n < 0): \n return 0\n else: \n return countWays(n-1) + countWays(n-3) + countWays(n-4)\n\nn = 8\nresult = countWays(n)\n\nprint(\"The number of different ways to express\", n, \"as the sum of 1, 3 and 4 is:\", result)"}
{"instruction":"The code reads an input file and performs calculations on the input values based on equations provided in the file. To use the code, provide the input file path and output file path as command line arguments. The input file should contain the equations to be evaluated, with each equation on a separate line. The equations can be of the form y = x + z, y = x * z, or y = x. The input file should also specify the initial values of the variables in the x set. The output file will contain the final values of the variables in the y set.","input":"","output":"#!\/usr\/bin\/python\nimport sys\nimport re\nimport string\n\nvariables = {}\nouts = {}\nmonomial = \"([a-zA-z]+\\d+)\"\nmn = re.compile(monomial)\n\ndef extractValues(strin):\n        xAddr1 = strin[2].strip()\n        xAddr2 = strin[4].strip()\n        if xAddr1 in variables:\n            x1 = variables[xAddr1]\n        else:\n            raise Exception(\"equationReader: variable \" + xAddr1 + \" not found\")\n        if mn.match(xAddr2):\n            if xAddr2 in variables:\n                x2 = variables[xAddr2]\n            else:\n                raise Exception(\"equationReader: variable \" + xAddr2 + \" not found\")\n        else:\n            x2 = bool(int(xAddr2))\n        return {'x1':x1, 'x2':x2}\n\nif len(sys.argv) != 3:\n    raise Exception(\"Usage: equationReader <input file> <output file>\")\n\nfin = open(sys.argv[1], \"r\")\n\n\nlines = fin.readlines()\ninputs = re.compile(\"\\d+ inputs\")\noutputs = re.compile(\"\\d+ outputs\")\nfor index, line in enumerate(lines):\n    if inputs.match(line):\n        #Creation of the x set\n        xLine = lines[index + 1]\n        xValueLine = lines[index + 2]\n        ins = string.split(xLine)\n        insValues = string.split(xValueLine)\n        if len(ins) != len(insValues):\n            print(line + xLine + xValueLine)\n            raise Exception(\"equationReader: you need to provide a starting value for each x inserted\")\n        for i in range(len(ins)):\n            x = ins[i].strip()\n            variables[x] = bool(int(insValues[i]))\n    else:\n        if outputs.match(line):\n            #Creation of the y set\n            yLine = lines[index + 1]\n            ins = string.split(yLine, \" \")\n            for y in ins:\n                y.strip()\n                outs[y] = None\n            else:\n                if line == \"begin\":\n                    #When the equations start we get to the next cicle which performs the calculations\n                    break\n\n#y = x + z\nequation_XOR = re.compile(monomial + \" = \" + monomial + \" \\+ (\" + monomial + \"|(0|1))\")\n#y = x * z\nequation_AND = re.compile(monomial + \" = \" + monomial + \" \\* (\" + monomial + \"|(0|1))\")\n#y = x\nequation_ASSIGNEMENT = re.compile(monomial + \" = (\" + monomial + \"|(0|1))\")\n\nfor index, line in enumerate(lines):\n    tmp = string.split(line, \" \")\n    print(line)\n    if equation_XOR.match(line):\n        xdict = extractValues(tmp)\n        yAddr = tmp[0]\n        y = xdict['x1'] ^ xdict['x2']\n        variables[yAddr] = y\n        if yAddr in outs:\n            outs[yAddr] = y\n    else:\n        if equation_AND.match(line):\n            xdict = extractValues(tmp)\n            yAddr = tmp[0]\n            y = xdict['x1'] & xdict['x2']\n            variables[yAddr] = y\n            if yAddr in outs:\n                outs[yAddr] = y\n        else:\n            if equation_ASSIGNEMENT.match(line):\n                yAddr = tmp[0].strip()\n                xAddr = tmp[2].strip()\n                if mn.match(xAddr):\n                    if xAddr in variables:\n                        x = variables[xAddr]\n                    else:\n                        raise Exception(\"equationReader: variable \" + xAddr + \" not found\")\n                else:\n                    x = bool(xAddr)\n                y = x\n                variables[yAddr] = y\n                if yAddr in outs:\n                    outs[yAddr] = y\n            else:\n                print(\"Skipping malformed equation:\" + line)\n\n#Printing out the results\nfin.close()\nfout = open(sys.argv[2], \"w\")\nfor key, value in outs.items():\n    fout.write(key + \" = {}\\n\".format(int(value)))\nfout.close()\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe code reads an input file and performs calculations on the input values based on equations provided in the file. To use the code, provide the input file path and output file path as command line arguments. The input file should contain the equations to be evaluated, with each equation on a separate line. The equations can be of the form y = x + z, y = x * z, or y = x. The input file should also specify the initial values of the variables in the x set. The output file will contain the final values of the variables in the y set.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/python\nimport sys\nimport re\nimport string\n\nvariables = {}\nouts = {}\nmonomial = \"([a-zA-z]+\\d+)\"\nmn = re.compile(monomial)\n\ndef extractValues(strin):\n        xAddr1 = strin[2].strip()\n        xAddr2 = strin[4].strip()\n        if xAddr1 in variables:\n            x1 = variables[xAddr1]\n        else:\n            raise Exception(\"equationReader: variable \" + xAddr1 + \" not found\")\n        if mn.match(xAddr2):\n            if xAddr2 in variables:\n                x2 = variables[xAddr2]\n            else:\n                raise Exception(\"equationReader: variable \" + xAddr2 + \" not found\")\n        else:\n            x2 = bool(int(xAddr2))\n        return {'x1':x1, 'x2':x2}\n\nif len(sys.argv) != 3:\n    raise Exception(\"Usage: equationReader <input file> <output file>\")\n\nfin = open(sys.argv[1], \"r\")\n\n\nlines = fin.readlines()\ninputs = re.compile(\"\\d+ inputs\")\noutputs = re.compile(\"\\d+ outputs\")\nfor index, line in enumerate(lines):\n    if inputs.match(line):\n        #Creation of the x set\n        xLine = lines[index + 1]\n        xValueLine = lines[index + 2]\n        ins = string.split(xLine)\n        insValues = string.split(xValueLine)\n        if len(ins) != len(insValues):\n            print(line + xLine + xValueLine)\n            raise Exception(\"equationReader: you need to provide a starting value for each x inserted\")\n        for i in range(len(ins)):\n            x = ins[i].strip()\n            variables[x] = bool(int(insValues[i]))\n    else:\n        if outputs.match(line):\n            #Creation of the y set\n            yLine = lines[index + 1]\n            ins = string.split(yLine, \" \")\n            for y in ins:\n                y.strip()\n                outs[y] = None\n            else:\n                if line == \"begin\":\n                    #When the equations start we get to the next cicle which performs the calculations\n                    break\n\n#y = x + z\nequation_XOR = re.compile(monomial + \" = \" + monomial + \" \\+ (\" + monomial + \"|(0|1))\")\n#y = x * z\nequation_AND = re.compile(monomial + \" = \" + monomial + \" \\* (\" + monomial + \"|(0|1))\")\n#y = x\nequation_ASSIGNEMENT = re.compile(monomial + \" = (\" + monomial + \"|(0|1))\")\n\nfor index, line in enumerate(lines):\n    tmp = string.split(line, \" \")\n    print(line)\n    if equation_XOR.match(line):\n        xdict = extractValues(tmp)\n        yAddr = tmp[0]\n        y = xdict['x1'] ^ xdict['x2']\n        variables[yAddr] = y\n        if yAddr in outs:\n            outs[yAddr] = y\n    else:\n        if equation_AND.match(line):\n            xdict = extractValues(tmp)\n            yAddr = tmp[0]\n            y = xdict['x1'] & xdict['x2']\n            variables[yAddr] = y\n            if yAddr in outs:\n                outs[yAddr] = y\n        else:\n            if equation_ASSIGNEMENT.match(line):\n                yAddr = tmp[0].strip()\n                xAddr = tmp[2].strip()\n                if mn.match(xAddr):\n                    if xAddr in variables:\n                        x = variables[xAddr]\n                    else:\n                        raise Exception(\"equationReader: variable \" + xAddr + \" not found\")\n                else:\n                    x = bool(xAddr)\n                y = x\n                variables[yAddr] = y\n                if yAddr in outs:\n                    outs[yAddr] = y\n            else:\n                print(\"Skipping malformed equation:\" + line)\n\n#Printing out the results\nfin.close()\nfout = open(sys.argv[2], \"w\")\nfor key, value in outs.items():\n    fout.write(key + \" = {}\\n\".format(int(value)))\nfout.close()\n"}
{"instruction":"Use Python to generate a random password that is 20 characters long and contains symbols, numbers, and letters.","input":"Not applicable","output":"import string\nimport random\n\nlength = 20\n\npassword = ''\nfor c in range(length):\n password += random.choice(string.ascii_letters + string.digits + string.punctuation)\n\nprint(password)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse Python to generate a random password that is 20 characters long and contains symbols, numbers, and letters.\n\n### Input:\nNot applicable\n\n### Output:\nimport string\nimport random\n\nlength = 20\n\npassword = ''\nfor c in range(length):\n password += random.choice(string.ascii_letters + string.digits + string.punctuation)\n\nprint(password)"}
{"instruction":"Write a function that takes a string and prints out the string in reverse.","input":"Python","output":"def reverse_string(s):\n  return s[::-1]\n  \nprint(reverse_string('Python'))  # nohtyP","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that takes a string and prints out the string in reverse.\n\n### Input:\nPython\n\n### Output:\ndef reverse_string(s):\n  return s[::-1]\n  \nprint(reverse_string('Python'))  # nohtyP"}
{"instruction":"Optimize a Flask application for efficient performance.","input":"Not applicable","output":"from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('\/api\/<endpoint>', methods=['GET', 'POST'])\ndef process_request(endpoint):\n    # Performance optimization\n    # Use Redis for caching session and query performance\n    # Use uWSGI for Python applications\n    # Use gunicorn as WSGI server\n    # Use Flask-Compress extension for compression\n    # Use global variables where applicable\n    # Don't use sql queries directly, always use model methods\n    # Use query parameter in URLs instead of plain parameters\n    # Use thread-local objects for performance\n\n    # Your code here","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Flask application for efficient performance.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('\/api\/<endpoint>', methods=['GET', 'POST'])\ndef process_request(endpoint):\n    # Performance optimization\n    # Use Redis for caching session and query performance\n    # Use uWSGI for Python applications\n    # Use gunicorn as WSGI server\n    # Use Flask-Compress extension for compression\n    # Use global variables where applicable\n    # Don't use sql queries directly, always use model methods\n    # Use query parameter in URLs instead of plain parameters\n    # Use thread-local objects for performance\n\n    # Your code here"}
{"instruction":"Create a new Python class for managing a Chatbot. The class should have methods for checking for greetings, getting user input, and responding to user input.","input":"Not applicable","output":"class Chatbot:\n def __init__(self):\n self.greeting_keywords = ('hi', 'hello', 'hey', 'hola')\n\n def check_for_greeting(self, sentence):\n for word in sentence.words:\n if word.lower() in self.greeting_keywords:\n return True\n\n def get_user_input(self):\n user_input = input('You: ')\n return user_input\n\n def respond(self, user_input):\n print('Chatbot: ', end='')\n if self.check_for_greeting(user_input):\n print('Hi there!')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a new Python class for managing a Chatbot. The class should have methods for checking for greetings, getting user input, and responding to user input.\n\n### Input:\nNot applicable\n\n### Output:\nclass Chatbot:\n def __init__(self):\n self.greeting_keywords = ('hi', 'hello', 'hey', 'hola')\n\n def check_for_greeting(self, sentence):\n for word in sentence.words:\n if word.lower() in self.greeting_keywords:\n return True\n\n def get_user_input(self):\n user_input = input('You: ')\n return user_input\n\n def respond(self, user_input):\n print('Chatbot: ', end='')\n if self.check_for_greeting(user_input):\n print('Hi there!')"}
{"instruction":"Generate a Python program that translates a sentence into pig latin","input":"Hello world","output":"def pig_latin(sentence):\n  words = sentence.split(' ')\n  result = \"\"\n  for word in words:\n    result += word[1:] + word[0] + \"ay\" + \" \"\n  return result\n\nprint(pig_latin(\"Hello world\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that translates a sentence into pig latin\n\n### Input:\nHello world\n\n### Output:\ndef pig_latin(sentence):\n  words = sentence.split(' ')\n  result = \"\"\n  for word in words:\n    result += word[1:] + word[0] + \"ay\" + \" \"\n  return result\n\nprint(pig_latin(\"Hello world\"))"}
{"instruction":"Generate a complete Python script that prints out the prime numbers between two provided numbers.","input":"lowerBound = 20\nupperBound = 32","output":"# code to print out prime numbers between two provided numbers\ndef is_prime(num):\n    if num < 2:\n        return False\n \n    for i in range(2, num):\n        if num%i == 0:\n            return False\n \n    return True\n\nlowerBound = 20\nupperBound = 32\n \nfor i in range(lowerBound, upperBound + 1):\n    if is_prime(i):\n        print(i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a complete Python script that prints out the prime numbers between two provided numbers.\n\n### Input:\nlowerBound = 20\nupperBound = 32\n\n### Output:\n# code to print out prime numbers between two provided numbers\ndef is_prime(num):\n    if num < 2:\n        return False\n \n    for i in range(2, num):\n        if num%i == 0:\n            return False\n \n    return True\n\nlowerBound = 20\nupperBound = 32\n \nfor i in range(lowerBound, upperBound + 1):\n    if is_prime(i):\n        print(i)"}
{"instruction":"Create a Python program to build a simple chatbot that converses with the user about the weather in a given location.","input":"Not applicable","output":"import os \nimport requests \nimport random\n\ndef get_weather(city):\n    api_key = os.environ.get(\"WEATHER_API_KEY\") \n    url = \"http:\/\/api.openweathermap.org\/data\/2.5\/weather\"\n    params = {\"APPID\": api_key, \"q\": city, \"units\": \"metric\"} \n\n    response = requests.get(url, params=params)\n    data = response.json() \n\n    description = data[\"weather\"][0][\"description\"]\n    temp = data[\"main\"][\"temp\"]\n\n    return description, temp\n\ndef chatbot():\n    print(\"Hi! I'm a chatbot. Let's talk about the weather!\")\n    print(\"Which city are you in?\")\n\n    city = input()\n\n    description, temp = get_weather(city)\n\n    print(f\"It's {temp}\u00b0C with {description} in {city}.\")\n\n    yes_words = [\"yes\", \"y\", \"yeah\", \"sure\"]\n    no_words = [\"no\", \"n\", \"nah\", \"nope\"]\n\n    print(\"Do you want to hear about another city?\")\n    answer = input().lower()\n\n    if answer in yes_words:\n        chatbot()\n    elif answer in no_words:\n        print(\"Okay, bye!\")\n    else:\n        random_response = random.choice(yes_words + no_words)\n        print(f\"I don't understand. Let's assume you said {random_response}.\")\n        chatbot()\n\nchatbot()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to build a simple chatbot that converses with the user about the weather in a given location.\n\n### Input:\nNot applicable\n\n### Output:\nimport os \nimport requests \nimport random\n\ndef get_weather(city):\n    api_key = os.environ.get(\"WEATHER_API_KEY\") \n    url = \"http:\/\/api.openweathermap.org\/data\/2.5\/weather\"\n    params = {\"APPID\": api_key, \"q\": city, \"units\": \"metric\"} \n\n    response = requests.get(url, params=params)\n    data = response.json() \n\n    description = data[\"weather\"][0][\"description\"]\n    temp = data[\"main\"][\"temp\"]\n\n    return description, temp\n\ndef chatbot():\n    print(\"Hi! I'm a chatbot. Let's talk about the weather!\")\n    print(\"Which city are you in?\")\n\n    city = input()\n\n    description, temp = get_weather(city)\n\n    print(f\"It's {temp}\u00b0C with {description} in {city}.\")\n\n    yes_words = [\"yes\", \"y\", \"yeah\", \"sure\"]\n    no_words = [\"no\", \"n\", \"nah\", \"nope\"]\n\n    print(\"Do you want to hear about another city?\")\n    answer = input().lower()\n\n    if answer in yes_words:\n        chatbot()\n    elif answer in no_words:\n        print(\"Okay, bye!\")\n    else:\n        random_response = random.choice(yes_words + no_words)\n        print(f\"I don't understand. Let's assume you said {random_response}.\")\n        chatbot()\n\nchatbot()"}
{"instruction":"Write a Python program to detect duplicate numbers in a given array.","input":"arr = [10,20,15,20,30,10]","output":"duplicate_numbers = []\nfor i in range(len(arr)):\n  for j in range(i + 1, len(arr)):\n    if arr[i] == arr[j]:\n      duplicate_numbers.append(arr[i])\n\nprint(duplicate_numbers) # Output: [10, 20]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to detect duplicate numbers in a given array.\n\n### Input:\narr = [10,20,15,20,30,10]\n\n### Output:\nduplicate_numbers = []\nfor i in range(len(arr)):\n  for j in range(i + 1, len(arr)):\n    if arr[i] == arr[j]:\n      duplicate_numbers.append(arr[i])\n\nprint(duplicate_numbers) # Output: [10, 20]"}
{"instruction":"Write a Python program to classify a given data set using a trained model.","input":"","output":"def classify_data(data, model):\n    predictions = model.predict(data)\n    return predictions","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify a given data set using a trained model.\n\n### Input:\n\n\n### Output:\ndef classify_data(data, model):\n    predictions = model.predict(data)\n    return predictions"}
{"instruction":"Write a Python program which prints all perfect numbers between 1 and a given number N (inclusive).","input":"25","output":"def print_perfect_numbers(N):\n for val in range(1, N + 1):\n   sum = 0\n   for testval in range(1, val):\n       if (val % testval) == 0:\n           sum += testval\n   if (sum == val):\n       print(val)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program which prints all perfect numbers between 1 and a given number N (inclusive).\n\n### Input:\n25\n\n### Output:\ndef print_perfect_numbers(N):\n for val in range(1, N + 1):\n   sum = 0\n   for testval in range(1, val):\n       if (val % testval) == 0:\n           sum += testval\n   if (sum == val):\n       print(val)"}
{"instruction":"Program a python method that enables the user to access and store items in an online database.","input":"The online database contains information related to restaurant reviews and ratings.","output":"def access_database(db):\n connection = db.connect()\n cursor = connection.cursor()\n cursor.execute(\"SELECT * FROM restaurant_reviews\")\n results = cursor.fetchall()\n connection.close()\n return results","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProgram a python method that enables the user to access and store items in an online database.\n\n### Input:\nThe online database contains information related to restaurant reviews and ratings.\n\n### Output:\ndef access_database(db):\n connection = db.connect()\n cursor = connection.cursor()\n cursor.execute(\"SELECT * FROM restaurant_reviews\")\n results = cursor.fetchall()\n connection.close()\n return results"}
{"instruction":"Sort a python dictionary by value.","input":"d = {1: 'a', 3: 'b', 2: 'c'}","output":"def sort_dict_by_value(d):\n    # Convert the dictionary into a list of tuples\n    d_list = [(key, value) for key, value in d.items()]\n    # Sort the list by the second element of the tuple\n    sorted_d = sorted(d_list, key=lambda x: x[1])\n    # Convert the list of tuples back into a dictionary\n    sorted_dict = dict(sorted_d)\n    return sorted_dict\n\nif __name__ == \"__main__\":\n    d = {1: 'a', 3: 'b', 2: 'c'}\n    print(sort_dict_by_value(d))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSort a python dictionary by value.\n\n### Input:\nd = {1: 'a', 3: 'b', 2: 'c'}\n\n### Output:\ndef sort_dict_by_value(d):\n    # Convert the dictionary into a list of tuples\n    d_list = [(key, value) for key, value in d.items()]\n    # Sort the list by the second element of the tuple\n    sorted_d = sorted(d_list, key=lambda x: x[1])\n    # Convert the list of tuples back into a dictionary\n    sorted_dict = dict(sorted_d)\n    return sorted_dict\n\nif __name__ == \"__main__\":\n    d = {1: 'a', 3: 'b', 2: 'c'}\n    print(sort_dict_by_value(d))"}
{"instruction":"Create a Python program to sort a given list using the merge sort algorithm","input":"","output":"def merge_sort(alist):\n    if len(alist)>1:\n        mid = len(alist)\/\/2\n        lefthalf = alist[:mid]\n        righthalf = alist[mid:]\n\n        merge_sort(lefthalf)\n        merge_sort(righthalf)\n\n        i=0\n        j=0\n        k=0\n        while i < len(lefthalf) and j < len(righthalf):\n            if lefthalf[i] < righthalf[j]:\n                alist[k]=lefthalf[i]\n                i=i+1\n            else:\n                alist[k]=righthalf[j]\n                j=j+1\n            k=k+1\n\n        while i < len(lefthalf):\n            alist[k]=lefthalf[i]\n            i=i+1\n            k=k+1\n\n        while j < len(righthalf):\n            alist[k]=righthalf[j]\n            j=j+1\n            k=k+1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to sort a given list using the merge sort algorithm\n\n### Input:\n\n\n### Output:\ndef merge_sort(alist):\n    if len(alist)>1:\n        mid = len(alist)\/\/2\n        lefthalf = alist[:mid]\n        righthalf = alist[mid:]\n\n        merge_sort(lefthalf)\n        merge_sort(righthalf)\n\n        i=0\n        j=0\n        k=0\n        while i < len(lefthalf) and j < len(righthalf):\n            if lefthalf[i] < righthalf[j]:\n                alist[k]=lefthalf[i]\n                i=i+1\n            else:\n                alist[k]=righthalf[j]\n                j=j+1\n            k=k+1\n\n        while i < len(lefthalf):\n            alist[k]=lefthalf[i]\n            i=i+1\n            k=k+1\n\n        while j < len(righthalf):\n            alist[k]=righthalf[j]\n            j=j+1\n            k=k+1"}
{"instruction":"Modify the following Python code to generate more random numbers.","input":"import random\n\nx = random.randint(1, 10)","output":"import random\n\nx = random.randint(1, 10)\ny = random.randint(1, 10)\nz = random.randint(1, 10)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following Python code to generate more random numbers.\n\n### Input:\nimport random\n\nx = random.randint(1, 10)\n\n### Output:\nimport random\n\nx = random.randint(1, 10)\ny = random.randint(1, 10)\nz = random.randint(1, 10)"}
{"instruction":"Using Python, implement a Pig Latin translator. The translator should accept a word as input and return its Pig Latin equivalent.","input":"word = \"Python\"","output":"def pig_latin(word):\n vowels = \"aeiou\"\n if word[0] in vowels: \n return word + 'way'\n else:\n return word[1:] + word[0] + 'ay'\n\npig_latin_word = pig_latin(word)\nprint(pig_latin_word) # Output: ythonPay","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, implement a Pig Latin translator. The translator should accept a word as input and return its Pig Latin equivalent.\n\n### Input:\nword = \"Python\"\n\n### Output:\ndef pig_latin(word):\n vowels = \"aeiou\"\n if word[0] in vowels: \n return word + 'way'\n else:\n return word[1:] + word[0] + 'ay'\n\npig_latin_word = pig_latin(word)\nprint(pig_latin_word) # Output: ythonPay"}
{"instruction":"Write a Python program to find the largest three numbers in a list.","input":"1, 6, 3, 8, 7, 4","output":"my_list = [1, 6, 3, 8, 7, 4]\nlargest_three = sorted(my_list)[-3:]\nprint(largest_three)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the largest three numbers in a list.\n\n### Input:\n1, 6, 3, 8, 7, 4\n\n### Output:\nmy_list = [1, 6, 3, 8, 7, 4]\nlargest_three = sorted(my_list)[-3:]\nprint(largest_three)"}
{"instruction":"Create a python program to calculate the mean of 3 numbers.","input":"","output":"def calculate_mean(num1, num2, num3):\n    mean = (num1 + num2 + num3) \/ 3\n    return mean","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to calculate the mean of 3 numbers.\n\n### Input:\n\n\n### Output:\ndef calculate_mean(num1, num2, num3):\n    mean = (num1 + num2 + num3) \/ 3\n    return mean"}
{"instruction":"Create a Python program to generate a random string composed of 8 special characters (e.g., @#$%).","input":"Not applicable","output":"import random\n\ndef generate_random_string():\n   # Inputs: None\n   # Output: Random special character string\n   special_chars = [x for x in '@#$%^&*']\n   random_string = \"\"\n   for _ in range(8):\n       random_string += random.choice(special_chars)\n   return random_string\n\nprint(generate_random_string())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a random string composed of 8 special characters (e.g., @#$%).\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\ndef generate_random_string():\n   # Inputs: None\n   # Output: Random special character string\n   special_chars = [x for x in '@#$%^&*']\n   random_string = \"\"\n   for _ in range(8):\n       random_string += random.choice(special_chars)\n   return random_string\n\nprint(generate_random_string())"}
{"instruction":"Use a random forest model in Python to predict the sale price of a house.","input":"Example data: \nSize: 500, Rooms: 4","output":"import pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Create\ndata = {'Size': [500], \n'Rooms': [4]}\n\ndf = pd.DataFrame(data)\n\n# Train\nX = df[['Size','Rooms']] \nY = df['Price'] \n\nregressor = RandomForestRegressor(n_estimators = 10, random_state = 0) \nregressor.fit(X, Y)\n\n# Predict\nregressor.predict([[500,4]]) # Predicted price: 1716.275","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse a random forest model in Python to predict the sale price of a house.\n\n### Input:\nExample data: \nSize: 500, Rooms: 4\n\n### Output:\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Create\ndata = {'Size': [500], \n'Rooms': [4]}\n\ndf = pd.DataFrame(data)\n\n# Train\nX = df[['Size','Rooms']] \nY = df['Price'] \n\nregressor = RandomForestRegressor(n_estimators = 10, random_state = 0) \nregressor.fit(X, Y)\n\n# Predict\nregressor.predict([[500,4]]) # Predicted price: 1716.275"}
{"instruction":"Calculate the square root of 68 using Python.","input":"","output":"import math\n\n# Calculate the square root of 68\nsqrt_num = math.sqrt(68)\n\n# Print the result\nprint(\"The square root of 68 is:\", sqrt_num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the square root of 68 using Python.\n\n### Input:\n\n\n### Output:\nimport math\n\n# Calculate the square root of 68\nsqrt_num = math.sqrt(68)\n\n# Print the result\nprint(\"The square root of 68 is:\", sqrt_num)"}
{"instruction":"Create a function in Python to compute the average of two numbers.","input":"8, 10","output":"def average(a, b): \n    return (a + b)\/2 \n  \na = 8\nb = 10\nprint(\"Average of\", a, \"and\", b, \"is\", average(a, b))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to compute the average of two numbers.\n\n### Input:\n8, 10\n\n### Output:\ndef average(a, b): \n    return (a + b)\/2 \n  \na = 8\nb = 10\nprint(\"Average of\", a, \"and\", b, \"is\", average(a, b))"}
{"instruction":"Write a code in Python to automate filling out web forms.","input":"","output":"\"\"\"\nAutomating web form filling\n\"\"\"\n\nimport requests\n\ndef fill_form(url, data):\n    \"\"\"\n    Takes in a url and a data dictionary and fills out an online form\n    \"\"\"\n\n    # Make a POST request to the url with data\n    response = requests.post(url, data=data)\n\n    # Check if the request was successful\n    if response.status_code == 200:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    # Provide the url and data to be used\n    URL = 'http:\/\/www.example.com'\n    DATA = {\n        'name': 'John',\n        'email': 'john@example.com'\n    }\n\n    # Call the fill_form function\n    result = fill_form(URL, DATA)\n\n    if result:\n        print('Form filled successfully!')\n    else:\n        print('Form fill failed!')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python to automate filling out web forms.\n\n### Input:\n\n\n### Output:\n\"\"\"\nAutomating web form filling\n\"\"\"\n\nimport requests\n\ndef fill_form(url, data):\n    \"\"\"\n    Takes in a url and a data dictionary and fills out an online form\n    \"\"\"\n\n    # Make a POST request to the url with data\n    response = requests.post(url, data=data)\n\n    # Check if the request was successful\n    if response.status_code == 200:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    # Provide the url and data to be used\n    URL = 'http:\/\/www.example.com'\n    DATA = {\n        'name': 'John',\n        'email': 'john@example.com'\n    }\n\n    # Call the fill_form function\n    result = fill_form(URL, DATA)\n\n    if result:\n        print('Form filled successfully!')\n    else:\n        print('Form fill failed!')"}
{"instruction":"Generate a shell script to install a specific version of Python and two modules.","input":"version=3.6.2\n modules=matplotlib, Django","output":"#!\/bin\/bash\n\n# Download and install Python\nwget https:\/\/www.python.org\/ftp\/python\/${version}\/Python-${version}.tgz\ntar -xvzf Python-${version}\ncd Python-${version}\/\n.\/configure\nmake\nmake install\n\n# Install modules\npip install ${modules[0]}\npip install ${modules[1]}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a shell script to install a specific version of Python and two modules.\n\n### Input:\nversion=3.6.2\n modules=matplotlib, Django\n\n### Output:\n#!\/bin\/bash\n\n# Download and install Python\nwget https:\/\/www.python.org\/ftp\/python\/${version}\/Python-${version}.tgz\ntar -xvzf Python-${version}\ncd Python-${version}\/\n.\/configure\nmake\nmake install\n\n# Install modules\npip install ${modules[0]}\npip install ${modules[1]}"}
{"instruction":"Create a function in Python to count the frequency of each unique word in a string.","input":"\"This is a sentence of words which contains words repeated multiple times\"","output":"def count_words(sentence):\n    words = sentence.split()\n    freq_dict = {}\n    for word in words:\n        if word in freq_dict:\n            freq_dict[word] += 1\n        else:\n            freq_dict[word] = 1\n    return freq_dict\n\nprint(count_words(\"This is a sentence of words which contains words repeated multiple times\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to count the frequency of each unique word in a string.\n\n### Input:\n\"This is a sentence of words which contains words repeated multiple times\"\n\n### Output:\ndef count_words(sentence):\n    words = sentence.split()\n    freq_dict = {}\n    for word in words:\n        if word in freq_dict:\n            freq_dict[word] += 1\n        else:\n            freq_dict[word] = 1\n    return freq_dict\n\nprint(count_words(\"This is a sentence of words which contains words repeated multiple times\"))"}
{"instruction":"Create a method in Python that accepts two strings and returns a boolean if the two strings are anagrams.","input":"\u201clisten\u201d and \u201csilent\u201d","output":"def is_anagram(string1, string2):\n    return (sorted(string1) == sorted(string2))\n\nprint(is_anagram(\"listen\", \"silent\")) # prints True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a method in Python that accepts two strings and returns a boolean if the two strings are anagrams.\n\n### Input:\n\u201clisten\u201d and \u201csilent\u201d\n\n### Output:\ndef is_anagram(string1, string2):\n    return (sorted(string1) == sorted(string2))\n\nprint(is_anagram(\"listen\", \"silent\")) # prints True"}
{"instruction":"What code is necessary to randomly shuffle a list in Python?","input":"","output":"import random\n\ndef shuffle(list):\n    random.shuffle(list)\n    return list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat code is necessary to randomly shuffle a list in Python?\n\n### Input:\n\n\n### Output:\nimport random\n\ndef shuffle(list):\n    random.shuffle(list)\n    return list"}
{"instruction":"Make a Python program to create a rolling average over a list. Rolling average means return the average of the last 3 items of the list.","input":"mylist = [10, 20, 30, 40, 50]","output":"def rolling_average(arr):\n    last_three = arr[-3:]\n    return sum(last_three) \/ len(last_three)\n\nmylist = [10, 20, 30, 40, 50]\nrolling_avg = rolling_average(mylist)\nprint(\"Rolling average:\", rolling_avg)\n\n# Output:\n# Rolling average: 33.333333333333336","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a Python program to create a rolling average over a list. Rolling average means return the average of the last 3 items of the list.\n\n### Input:\nmylist = [10, 20, 30, 40, 50]\n\n### Output:\ndef rolling_average(arr):\n    last_three = arr[-3:]\n    return sum(last_three) \/ len(last_three)\n\nmylist = [10, 20, 30, 40, 50]\nrolling_avg = rolling_average(mylist)\nprint(\"Rolling average:\", rolling_avg)\n\n# Output:\n# Rolling average: 33.333333333333336"}
{"instruction":"Turn the given input string into a valid Python statement.","input":"Input string:\n\"Function to print hello world.\"","output":"def printHelloWorld():\n    print(\"Hello world\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTurn the given input string into a valid Python statement.\n\n### Input:\nInput string:\n\"Function to print hello world.\"\n\n### Output:\ndef printHelloWorld():\n    print(\"Hello world\")"}
{"instruction":"Write a Python program to add two numbers given in string format.","input":"first number: \"2\"\nsecond number: \"3\"","output":"def addStringNumbers(num1,num2): \n    return int(num1) + int(num2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to add two numbers given in string format.\n\n### Input:\nfirst number: \"2\"\nsecond number: \"3\"\n\n### Output:\ndef addStringNumbers(num1,num2): \n    return int(num1) + int(num2)"}
{"instruction":"How would you improve the following Python code to make it more efficient?","input":"def calculate_square(numbers):\n    square_list = []\n    for number in numbers:\n        square_list.append(number * number)\n\t\n    return square_list","output":"def calculate_square(numbers):\n    return [number * number for number in numbers]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you improve the following Python code to make it more efficient?\n\n### Input:\ndef calculate_square(numbers):\n    square_list = []\n    for number in numbers:\n        square_list.append(number * number)\n\t\n    return square_list\n\n### Output:\ndef calculate_square(numbers):\n    return [number * number for number in numbers]"}
{"instruction":"Develop a data analysis tool in Python that finds the correlation between two variables in a dataset.","input":"Not applicable","output":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load the data set\ndata = pd.read_csv('.\/data.csv')\n\n# Get the variables to analyze\nX = data['variable1']\nY = data['variable2']\n\n# Calculate the correlation\ncorrelation = np.corrcoef(X, Y)\n\n# Print out the result\nprint('The correlation between Variable1 and Variable2 is: ' + str(correlation[0][1]))\n\n# Plot a scatter plot for the data\nplt.scatter(X, Y)\nplt.xlabel('Variable1')\nplt.ylabel('Variable2')\nplt.title('Scatter Plot')\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a data analysis tool in Python that finds the correlation between two variables in a dataset.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load the data set\ndata = pd.read_csv('.\/data.csv')\n\n# Get the variables to analyze\nX = data['variable1']\nY = data['variable2']\n\n# Calculate the correlation\ncorrelation = np.corrcoef(X, Y)\n\n# Print out the result\nprint('The correlation between Variable1 and Variable2 is: ' + str(correlation[0][1]))\n\n# Plot a scatter plot for the data\nplt.scatter(X, Y)\nplt.xlabel('Variable1')\nplt.ylabel('Variable2')\nplt.title('Scatter Plot')\nplt.show()"}
{"instruction":"Implement a function in Python which can count the number of palindrome substrings in a given string.","input":"String: abcda","output":"def count_palindrome_substrings(s):\n    # Create a boolean matrix to store the values\n    matrix = [[False for _ in range(len(s))] for _ in range(len(s))]\n\n    # Initialize the substrings with length 1\n    for i in range(len(s)):\n        matrix[i][i] = True\n\n    # Initialize the substrings with length 2\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            matrix[i][i+1] = True\n\n    # Iterate through the string and find the substrings\n    for substring_length in range(3, len(s) + 1):\n        for i in range(0, len(s) - substring_length + 1):\n            j = i + substring_length - 1\n            if s[i] == s[j] and matrix[i+1][j-1]:\n                matrix[i][j] = True\n\n    # Iterate through the matrix and count the palindrome substrings\n    count = 0\n    for row in matrix:\n        for elem in row:\n            if elem:\n                count += 1\n\n    return count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python which can count the number of palindrome substrings in a given string.\n\n### Input:\nString: abcda\n\n### Output:\ndef count_palindrome_substrings(s):\n    # Create a boolean matrix to store the values\n    matrix = [[False for _ in range(len(s))] for _ in range(len(s))]\n\n    # Initialize the substrings with length 1\n    for i in range(len(s)):\n        matrix[i][i] = True\n\n    # Initialize the substrings with length 2\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            matrix[i][i+1] = True\n\n    # Iterate through the string and find the substrings\n    for substring_length in range(3, len(s) + 1):\n        for i in range(0, len(s) - substring_length + 1):\n            j = i + substring_length - 1\n            if s[i] == s[j] and matrix[i+1][j-1]:\n                matrix[i][j] = True\n\n    # Iterate through the matrix and count the palindrome substrings\n    count = 0\n    for row in matrix:\n        for elem in row:\n            if elem:\n                count += 1\n\n    return count"}
{"instruction":"Create a program in Python that takes an input string and an integer n, and generates all permutations of the string with length n.","input":"\"ABCD\", 2","output":"def permutateString(inputStr, n):\n    if n == 0:\n        return []\n    elif len(inputStr) == 1:\n        return [inputStr]\n    else:\n        result = []\n        for i in range(len(inputStr)):\n            firstChar = inputStr[i]\n            remainingChars = inputStr[:i] + inputStr[i+1:]\n            for permutation in permutateString(remainingChars, n-1):\n                result.append([firstChar] + permutation)\n        return result\n\ninputStr = \"ABCD\"\nn = 2\npermutations = permutateString(inputStr, n)\n\nfor permutation in permutations:\n    print(''.join(permutation))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes an input string and an integer n, and generates all permutations of the string with length n.\n\n### Input:\n\"ABCD\", 2\n\n### Output:\ndef permutateString(inputStr, n):\n    if n == 0:\n        return []\n    elif len(inputStr) == 1:\n        return [inputStr]\n    else:\n        result = []\n        for i in range(len(inputStr)):\n            firstChar = inputStr[i]\n            remainingChars = inputStr[:i] + inputStr[i+1:]\n            for permutation in permutateString(remainingChars, n-1):\n                result.append([firstChar] + permutation)\n        return result\n\ninputStr = \"ABCD\"\nn = 2\npermutations = permutateString(inputStr, n)\n\nfor permutation in permutations:\n    print(''.join(permutation))"}
{"instruction":"Write a code snippet in Python to calculate the average of the following list of numbers: [1, 7, 8, 4, 9].","input":"Not applicable","output":"numbers = [1, 7, 8, 4, 9]\naverage = sum(numbers) \/ len(numbers)\nprint(average) # 5.6","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet in Python to calculate the average of the following list of numbers: [1, 7, 8, 4, 9].\n\n### Input:\nNot applicable\n\n### Output:\nnumbers = [1, 7, 8, 4, 9]\naverage = sum(numbers) \/ len(numbers)\nprint(average) # 5.6"}
{"instruction":"In a Python list, swap the items at index 3 and 4.","input":"List: [10, 20, 30, 40, 50]","output":"def swap(arr, idx1, idx2):\n    arr[idx1], arr[idx2] = arr[idx2], arr[idx1]\n\narr = [10, 20, 30, 40, 50]\nswap(arr, 3, 4)\nprint(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn a Python list, swap the items at index 3 and 4.\n\n### Input:\nList: [10, 20, 30, 40, 50]\n\n### Output:\ndef swap(arr, idx1, idx2):\n    arr[idx1], arr[idx2] = arr[idx2], arr[idx1]\n\narr = [10, 20, 30, 40, 50]\nswap(arr, 3, 4)\nprint(arr)"}
{"instruction":"Create a Python module that combines two lists into a dictionary. The dictionary should have the elements of the first list as its keys and the elements of the second list as its values.","input":"list1 = [1, 2, 3]\nlist2 = [\"one\", \"two\", \"three\"]","output":"def combine_lists_to_dict(list1, list2):\n    return {list1[i]: list2[i] for i in range(len(list1))}\n\nlist1 = [1, 2, 3]\nlist2 = [\"one\", \"two\", \"three\"]\n\nresult = combine_lists_to_dict(list1, list2)\nprint(result)  # {1: 'one', 2: 'two', 3: 'three'}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module that combines two lists into a dictionary. The dictionary should have the elements of the first list as its keys and the elements of the second list as its values.\n\n### Input:\nlist1 = [1, 2, 3]\nlist2 = [\"one\", \"two\", \"three\"]\n\n### Output:\ndef combine_lists_to_dict(list1, list2):\n    return {list1[i]: list2[i] for i in range(len(list1))}\n\nlist1 = [1, 2, 3]\nlist2 = [\"one\", \"two\", \"three\"]\n\nresult = combine_lists_to_dict(list1, list2)\nprint(result)  # {1: 'one', 2: 'two', 3: 'three'}"}
{"instruction":"Write a Python script to calculate the circumference of a circle when the radius of the circle is given.","input":"4","output":"def calc_circle_circumference(radius):\n    circumference = 2 * 3.14 * radius\n    return circumference\n\ncircle_circumference = calc_circle_circumference(4)\nprint(circle_circumference)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to calculate the circumference of a circle when the radius of the circle is given.\n\n### Input:\n4\n\n### Output:\ndef calc_circle_circumference(radius):\n    circumference = 2 * 3.14 * radius\n    return circumference\n\ncircle_circumference = calc_circle_circumference(4)\nprint(circle_circumference)"}
{"instruction":"Build a code-classification model in Keras to classify a given code snippet into various programming languages like Java, Python, and C++.","input":"Not applicable","output":"import numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Input, Dense, Dropout\nfrom keras.utils import to_categorical\n\nnum_classes = 3 # number of languages to classify\n\n# Define the model architecture\nmodel = Sequential()\nmodel.add(Input(shape=(1000,)))\nmodel.add(Dense(2000, activation='relu'))\nmodel.add(Dense(1000, activation='relu'))\nmodel.add(Dense(500, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(train_data, train_labels)\n\n# Evaluate the model\nval_loss, val_acc = model.evaluate(val_data, val_labels)\n\n# Make predictions on test data\npredictions = model.predict([test_data])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a code-classification model in Keras to classify a given code snippet into various programming languages like Java, Python, and C++.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Input, Dense, Dropout\nfrom keras.utils import to_categorical\n\nnum_classes = 3 # number of languages to classify\n\n# Define the model architecture\nmodel = Sequential()\nmodel.add(Input(shape=(1000,)))\nmodel.add(Dense(2000, activation='relu'))\nmodel.add(Dense(1000, activation='relu'))\nmodel.add(Dense(500, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(train_data, train_labels)\n\n# Evaluate the model\nval_loss, val_acc = model.evaluate(val_data, val_labels)\n\n# Make predictions on test data\npredictions = model.predict([test_data])"}
{"instruction":"Create a Python script to extract the title of a web page.","input":"<url>","output":"import requests\nfrom bs4 import BeautifulSoup\n\n# Function to extract the title of a web page\ndef extract_title(url):\n    response = requests.get(url)\n    html = response.text\n\n    soup = BeautifulSoup(html, 'html.parser')\n    return soup.title.string\n\nurl = 'https:\/\/www.example.com'\ntitle = extract_title(url)\nprint(title)  # Output 'Example Domain'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to extract the title of a web page.\n\n### Input:\n<url>\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Function to extract the title of a web page\ndef extract_title(url):\n    response = requests.get(url)\n    html = response.text\n\n    soup = BeautifulSoup(html, 'html.parser')\n    return soup.title.string\n\nurl = 'https:\/\/www.example.com'\ntitle = extract_title(url)\nprint(title)  # Output 'Example Domain'"}
{"instruction":"Write a function to check if a year is a leap year using Python.","input":"","output":"def isLeapYear(year):\n\"\"\"\nReturns True if year is a leap year and False othwerwise.\n\"\"\"\n\nif (year % 400 == 0):\n    return True\nelif (year % 100 == 0):\n    return False\nelif (year % 4 == 0):\n    return True\nelse:\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to check if a year is a leap year using Python.\n\n### Input:\n\n\n### Output:\ndef isLeapYear(year):\n\"\"\"\nReturns True if year is a leap year and False othwerwise.\n\"\"\"\n\nif (year % 400 == 0):\n    return True\nelif (year % 100 == 0):\n    return False\nelif (year % 4 == 0):\n    return True\nelse:\n    return False"}
{"instruction":"Design an algorithm in Python to generate all permutations of a given list.","input":"","output":"def permute(nums):\n  res = [] \n  backtrack(nums, res, [])\n  return res\n\ndef backtrack(nums, res, temp):\n  if(len(temp) == len(nums)):\n    res.append(temp[:])\n  else:\n    for num in nums:\n      if num not in temp:\n        temp.append(num)\n        backtrack(nums, res, temp)\n        temp.pop()\n\n#print the result \nnums = [1, 2, 3]\nperms = permute(nums)\nprint(perms)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to generate all permutations of a given list.\n\n### Input:\n\n\n### Output:\ndef permute(nums):\n  res = [] \n  backtrack(nums, res, [])\n  return res\n\ndef backtrack(nums, res, temp):\n  if(len(temp) == len(nums)):\n    res.append(temp[:])\n  else:\n    for num in nums:\n      if num not in temp:\n        temp.append(num)\n        backtrack(nums, res, temp)\n        temp.pop()\n\n#print the result \nnums = [1, 2, 3]\nperms = permute(nums)\nprint(perms)"}
{"instruction":"Create a python script to display a grid pattern.","input":"","output":"def printgrid(rows, columns): \n    for i in range(1, rows+1): \n        for j in range(1, columns+1): \n            print(\"*\", end=\" \") \n        print(\"\\r\") \n  \nprintgrid(4, 4)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to display a grid pattern.\n\n### Input:\n\n\n### Output:\ndef printgrid(rows, columns): \n    for i in range(1, rows+1): \n        for j in range(1, columns+1): \n            print(\"*\", end=\" \") \n        print(\"\\r\") \n  \nprintgrid(4, 4)"}
{"instruction":"Generate a random 6-digit number using Python","input":"No input","output":"import random\n\ndef generate_random_number(): \n    random_number = random.randint(100000, 999999) \n    return random_number\n\ngeneratedNumber = generate_random_number() \nprint(generatedNumber)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random 6-digit number using Python\n\n### Input:\nNo input\n\n### Output:\nimport random\n\ndef generate_random_number(): \n    random_number = random.randint(100000, 999999) \n    return random_number\n\ngeneratedNumber = generate_random_number() \nprint(generatedNumber)"}
{"instruction":"Create a python program that uses API to get the list of upcoming movies and their release dates from a film API.","input":"","output":"# import required libraries\nimport requests\n\n# API call to get upcoming movies\nurl = 'https:\/\/api.themoviedb.org\/3\/movie\/upcoming'\nparams = {'api_key': '<your_api_key>', 'region': 'US' }\n\n# get data from API\nresponse = requests.get(url, params= params)\ndata = response.json()\n\n# extract required data\nmovie_title = []\nmovie_release_date = []\n\nfor movie in data['results']:\n    movie_title.append(movie['title'])\n    movie_release_date.append(movie['release_date'])\n\n# print the result\nfor i in range(len(movie_title)):\n    print(\"Movie Title: \", movie_title[i])\n    print(\"Release Date: \", movie_release_date[i])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that uses API to get the list of upcoming movies and their release dates from a film API.\n\n### Input:\n\n\n### Output:\n# import required libraries\nimport requests\n\n# API call to get upcoming movies\nurl = 'https:\/\/api.themoviedb.org\/3\/movie\/upcoming'\nparams = {'api_key': '<your_api_key>', 'region': 'US' }\n\n# get data from API\nresponse = requests.get(url, params= params)\ndata = response.json()\n\n# extract required data\nmovie_title = []\nmovie_release_date = []\n\nfor movie in data['results']:\n    movie_title.append(movie['title'])\n    movie_release_date.append(movie['release_date'])\n\n# print the result\nfor i in range(len(movie_title)):\n    print(\"Movie Title: \", movie_title[i])\n    print(\"Release Date: \", movie_release_date[i])"}
{"instruction":"Design a heuristic algorithm in Python to solve a given assignment problem.","input":"Assignment Problem: \n\nJobs: A, B, C, D \nWorkers: 1, 2, 3 \nCost: \n1A, 2B, 3C, 1D = 3, 5, 8, 4 \n1A, 2C, 3D, 1B = 8, 7, 2, 6","output":"def assignmentProblem(costMatrix): \n  \n    # Variables \n    R = len(costMatrix) \n    C = len(costMatrix[0]) \n    X = [[0 for x in range(C)] for x in range(R)] \n  \n    # Find the minimum element in each row \n    minRowValues = [min(i) for i in costMatrix] \n  \n    # Reduce each column by its minimum element and subtract it from the original costMatrix \n    for i in range(len(costMatrix[0])):\n        for j in range(len(costMatrix)): \n            costMatrix[j][i] = costMatrix[j][i] - minRowValues[j] \n  \n    # Find the minimum element in each column \n    minColValues = [min(y) for y in zip(*costMatrix)] \n  \n    # Reduce each row by its minimum element \n    for i in range(len(costMatrix)):\n        for j in range(len(costMatrix[0])): \n            costMatrix[i][j] = costMatrix[i][j] - minColValues[j] \n  \n    # Star all minimum element in the reduced costMatrix \n    # Find the indices of all the star elements \n    starsLocations = [] \n    for i in range(R): \n        for j in range(C): \n            if costMatrix[i][j] == 0 and X[i][j] != 1: \n                X[i][j] = \"*\" \n                starsLocations.append([i, j]) \n    return starsLocations","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a heuristic algorithm in Python to solve a given assignment problem.\n\n### Input:\nAssignment Problem: \n\nJobs: A, B, C, D \nWorkers: 1, 2, 3 \nCost: \n1A, 2B, 3C, 1D = 3, 5, 8, 4 \n1A, 2C, 3D, 1B = 8, 7, 2, 6\n\n### Output:\ndef assignmentProblem(costMatrix): \n  \n    # Variables \n    R = len(costMatrix) \n    C = len(costMatrix[0]) \n    X = [[0 for x in range(C)] for x in range(R)] \n  \n    # Find the minimum element in each row \n    minRowValues = [min(i) for i in costMatrix] \n  \n    # Reduce each column by its minimum element and subtract it from the original costMatrix \n    for i in range(len(costMatrix[0])):\n        for j in range(len(costMatrix)): \n            costMatrix[j][i] = costMatrix[j][i] - minRowValues[j] \n  \n    # Find the minimum element in each column \n    minColValues = [min(y) for y in zip(*costMatrix)] \n  \n    # Reduce each row by its minimum element \n    for i in range(len(costMatrix)):\n        for j in range(len(costMatrix[0])): \n            costMatrix[i][j] = costMatrix[i][j] - minColValues[j] \n  \n    # Star all minimum element in the reduced costMatrix \n    # Find the indices of all the star elements \n    starsLocations = [] \n    for i in range(R): \n        for j in range(C): \n            if costMatrix[i][j] == 0 and X[i][j] != 1: \n                X[i][j] = \"*\" \n                starsLocations.append([i, j]) \n    return starsLocations"}
{"instruction":"Create a Python function that takes a string as an input and returns the substring between the first and the last character.","input":"thequickbrownfox","output":"def get_substring(string):\n  return string[1:-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes a string as an input and returns the substring between the first and the last character.\n\n### Input:\nthequickbrownfox\n\n### Output:\ndef get_substring(string):\n  return string[1:-1]"}
{"instruction":"Create a GUI program in Python to ask a user to input any text and display the output.","input":"","output":"import tkinter as tk\n\n# Create window\nwindow = tk.Tk() \nwindow.title(\"Input-Output Program\") \nwindow.geometry(\"400x200\") \n\n#  Create a Label\nmessage_heading = tk.Label(text=\"Input:\") \nmessage_heading.grid(column=0, row=0)\n\n# Create a text entry box\ntext_entry = tk.Entry() \ntext_entry.grid(column=1, row=0)\n\n# Create a Submit Button\nsubmit_button = tk.Button(text=\"Submit\", command=lambda: submit_input()) \nsubmit_button.grid(column=2, row=0)\n\n# Output label\noutput_heading = tk.Label(text=\"Output:\") \noutput_heading.grid(column=0, row=2)\n\noutput_display = tk.Label()\noutput_display.grid(column=1, row=2) \n\n# Submit function\ndef submit_input(): \n    user_input = text_entry.get()\n    output_display['text'] = user_input\n    \n# Create an event loop\nwindow.mainloop()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a GUI program in Python to ask a user to input any text and display the output.\n\n### Input:\n\n\n### Output:\nimport tkinter as tk\n\n# Create window\nwindow = tk.Tk() \nwindow.title(\"Input-Output Program\") \nwindow.geometry(\"400x200\") \n\n#  Create a Label\nmessage_heading = tk.Label(text=\"Input:\") \nmessage_heading.grid(column=0, row=0)\n\n# Create a text entry box\ntext_entry = tk.Entry() \ntext_entry.grid(column=1, row=0)\n\n# Create a Submit Button\nsubmit_button = tk.Button(text=\"Submit\", command=lambda: submit_input()) \nsubmit_button.grid(column=2, row=0)\n\n# Output label\noutput_heading = tk.Label(text=\"Output:\") \noutput_heading.grid(column=0, row=2)\n\noutput_display = tk.Label()\noutput_display.grid(column=1, row=2) \n\n# Submit function\ndef submit_input(): \n    user_input = text_entry.get()\n    output_display['text'] = user_input\n    \n# Create an event loop\nwindow.mainloop()"}
{"instruction":"Create a Python program to generate an encryption key.","input":"","output":"import random\n\ndef generateEncryptionKey():\n    key = \"\"\n    for _ in range(32):\n        key += str(random.randint(0,9))\n    return key","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate an encryption key.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generateEncryptionKey():\n    key = \"\"\n    for _ in range(32):\n        key += str(random.randint(0,9))\n    return key"}
{"instruction":"Utilize ajax to send a request to a given web page and write a Python script to parse the response.","input":"url = \"www.example.com\"","output":"import requests\n\nurl = \"www.example.com\"\n\ntry:\n    request = requests.get(url)  # Send ajax request\n    response = request.json()  # Get response in JSON\n    for data in response['data']:\n        # Do something with data  # Parse JSON response\nexcept Exception as e:\n    print(e)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUtilize ajax to send a request to a given web page and write a Python script to parse the response.\n\n### Input:\nurl = \"www.example.com\"\n\n### Output:\nimport requests\n\nurl = \"www.example.com\"\n\ntry:\n    request = requests.get(url)  # Send ajax request\n    response = request.json()  # Get response in JSON\n    for data in response['data']:\n        # Do something with data  # Parse JSON response\nexcept Exception as e:\n    print(e)"}
{"instruction":"Create a Python program to recommend books to users based on their ratings from 1 to 5.","input":"User ratings for 10 books","output":"from sklearn.cluster import KMeans\nfrom sklearn.metrics import pairwise_distances_argmin_min\n\n# Define user ratings\nuser_ratings = [\n  [5, 4, 4, 0, 2, 1, 4, 4, 5, 0],\n  [0, 0, 0, 3, 3, 3, 0, 0, 0, 3],\n  [4, 4, 0, 0, 4, 0, 4, 4, 4, 0],\n]\n\n# Find the clusters\nmodel = KMeans(n_clusters=2, random_state=0).fit(user_ratings)\n\n# Find the most similar book to each user\nclosest, _ = pairwise_distances_argmin_min(model.cluster_centers_, user_ratings)\n\n# Make recommendations\nfor user_id in range(len(user_ratings)):\n  print(\"For user:\", user_id)\n  print(\" Recommended book:\", closest[user_id])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to recommend books to users based on their ratings from 1 to 5.\n\n### Input:\nUser ratings for 10 books\n\n### Output:\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import pairwise_distances_argmin_min\n\n# Define user ratings\nuser_ratings = [\n  [5, 4, 4, 0, 2, 1, 4, 4, 5, 0],\n  [0, 0, 0, 3, 3, 3, 0, 0, 0, 3],\n  [4, 4, 0, 0, 4, 0, 4, 4, 4, 0],\n]\n\n# Find the clusters\nmodel = KMeans(n_clusters=2, random_state=0).fit(user_ratings)\n\n# Find the most similar book to each user\nclosest, _ = pairwise_distances_argmin_min(model.cluster_centers_, user_ratings)\n\n# Make recommendations\nfor user_id in range(len(user_ratings)):\n  print(\"For user:\", user_id)\n  print(\" Recommended book:\", closest[user_id])"}
{"instruction":"Create a Python program to convert a given string to an integer by removing all non-numeric characters.","input":"\"29A3B8746\"","output":"def remove_non_numeric(str):\n res = \"\"\n for c in str:\n if c.isnumeric():\n res += c\n return int(res)\n\ns = \"29A3B8746\"\ninteger = remove_non_numeric(s)\nprint(integer) \/\/ 2938746","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to convert a given string to an integer by removing all non-numeric characters.\n\n### Input:\n\"29A3B8746\"\n\n### Output:\ndef remove_non_numeric(str):\n res = \"\"\n for c in str:\n if c.isnumeric():\n res += c\n return int(res)\n\ns = \"29A3B8746\"\ninteger = remove_non_numeric(s)\nprint(integer) \/\/ 2938746"}
{"instruction":"Using regex, extend the following python code to remove whitespaces from a string.","input":"def remove_spaces(user_string):\n    '''This function will remove all the spaces from a string'''","output":"def remove_spaces(user_string):\n    '''This function will remove all the spaces from a string'''\n    user_string = re.sub(r'\\s','',user_string)\n    return user_string","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing regex, extend the following python code to remove whitespaces from a string.\n\n### Input:\ndef remove_spaces(user_string):\n    '''This function will remove all the spaces from a string'''\n\n### Output:\ndef remove_spaces(user_string):\n    '''This function will remove all the spaces from a string'''\n    user_string = re.sub(r'\\s','',user_string)\n    return user_string"}
{"instruction":"Develop a greedy algorithm in Python to complete a given optimization task.","input":"","output":"def greedy_solution(arr):\n    arr.sort()\n    cur_max = arr[0]\n    result = [cur_max]\n    for i in range(1, len(arr)):\n        if arr[i] > cur_max + 1:\n            cur_max = arr[i]\n            result.append(cur_max)\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a greedy algorithm in Python to complete a given optimization task.\n\n### Input:\n\n\n### Output:\ndef greedy_solution(arr):\n    arr.sort()\n    cur_max = arr[0]\n    result = [cur_max]\n    for i in range(1, len(arr)):\n        if arr[i] > cur_max + 1:\n            cur_max = arr[i]\n            result.append(cur_max)\n    return result"}
{"instruction":"Generate a Python Class which takes one input 'name' and has two methods 'showName' and 'hideName'.","input":"","output":"class Name:\n    def __init__(self, name):\n        self.name = name\n\n    def showName(self):\n        print(self.name)\n\n    def hideName(self):\n        self.name = '*****'\n        print(self.name)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python Class which takes one input 'name' and has two methods 'showName' and 'hideName'.\n\n### Input:\n\n\n### Output:\nclass Name:\n    def __init__(self, name):\n        self.name = name\n\n    def showName(self):\n        print(self.name)\n\n    def hideName(self):\n        self.name = '*****'\n        print(self.name)"}
{"instruction":"In Python, create a function to return the minimum of two numbers.","input":"","output":"def min_value(a, b):\n    if a < b:\n        return a\n    else:\n        return b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, create a function to return the minimum of two numbers.\n\n### Input:\n\n\n### Output:\ndef min_value(a, b):\n    if a < b:\n        return a\n    else:\n        return b"}
{"instruction":"Create a Python program to convert the following expression in infix notation to postfix notation","input":"A * B + C - D","output":"def infix_to_postfix(expression):\n    # Separate the expression by tokens\n    tokens = expression.split(' ')\n    \n    # Create an operator stack\n    op_stack = []\n    \n    # Create a list for the postfix output\n    postfix_output = []\n    \n    # Iterate through the tokens\n    for token in tokens:\n        # If token is an operator\n        if token == '+' or token == '-' or token == '*':\n            # Append it to the operator stack\n            op_stack.append(token)\n        # If token is an operand\n        else:\n            # Append it to the postfix output\n            postfix_output.append(token)\n            # Pop operands from the stack while not empty\n            while op_stack:\n                # Append it to the postfix output\n                postfix_output.append(op_stack.pop())\n                \n    # Return the postfix output as a string\n    return ' '.join(postfix_output)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to convert the following expression in infix notation to postfix notation\n\n### Input:\nA * B + C - D\n\n### Output:\ndef infix_to_postfix(expression):\n    # Separate the expression by tokens\n    tokens = expression.split(' ')\n    \n    # Create an operator stack\n    op_stack = []\n    \n    # Create a list for the postfix output\n    postfix_output = []\n    \n    # Iterate through the tokens\n    for token in tokens:\n        # If token is an operator\n        if token == '+' or token == '-' or token == '*':\n            # Append it to the operator stack\n            op_stack.append(token)\n        # If token is an operand\n        else:\n            # Append it to the postfix output\n            postfix_output.append(token)\n            # Pop operands from the stack while not empty\n            while op_stack:\n                # Append it to the postfix output\n                postfix_output.append(op_stack.pop())\n                \n    # Return the postfix output as a string\n    return ' '.join(postfix_output)"}
{"instruction":"Write a Python script to generate a random password with a given length. The password should contain letters, digits and special characters.","input":"Length: 10","output":"import random\nimport string\n\n#function to generate a random password\ndef generate_password(length):\n #generate a random string\n chars = string.ascii_letters + string.digits + string.punctuation\n #combine random letters, digits and special characters\n passwd = ''.join(random.choice(chars) for i in range(length))\n return passwd\n\n#example\nlength = 10\npassword = generate_password(length)\n\n#output\nprint(password)\n\n# Output: O;3Rm,@$3H","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate a random password with a given length. The password should contain letters, digits and special characters.\n\n### Input:\nLength: 10\n\n### Output:\nimport random\nimport string\n\n#function to generate a random password\ndef generate_password(length):\n #generate a random string\n chars = string.ascii_letters + string.digits + string.punctuation\n #combine random letters, digits and special characters\n passwd = ''.join(random.choice(chars) for i in range(length))\n return passwd\n\n#example\nlength = 10\npassword = generate_password(length)\n\n#output\nprint(password)\n\n# Output: O;3Rm,@$3H"}
{"instruction":"Write a Python class to represent a complex number.","input":"","output":"class ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __repr__(self):\n        if self.imaginary >= 0:\n            return '{} + {}i'.format(self.real, self.imaginary)\n        else:\n            return '{} - {}i'.format(self.real, abs(self.imaginary))\n\n    def __add__(self, other):\n        real = self.real + other.real\n        imaginary = self.imaginary + other.imaginary\n        return ComplexNumber(real, imaginary)\n\n    def __sub__(self, other):\n        real = self.real - other.real\n        imaginary = self.imaginary - other.imaginary\n        return ComplexNumber(real, imaginary)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class to represent a complex number.\n\n### Input:\n\n\n### Output:\nclass ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __repr__(self):\n        if self.imaginary >= 0:\n            return '{} + {}i'.format(self.real, self.imaginary)\n        else:\n            return '{} - {}i'.format(self.real, abs(self.imaginary))\n\n    def __add__(self, other):\n        real = self.real + other.real\n        imaginary = self.imaginary + other.imaginary\n        return ComplexNumber(real, imaginary)\n\n    def __sub__(self, other):\n        real = self.real - other.real\n        imaginary = self.imaginary - other.imaginary\n        return ComplexNumber(real, imaginary)"}
{"instruction":"Python code to find out if a linked list has a loop","input":"Head of link list\n|\nv\n1 -> 2 -> 3 -> 4\n ^         |\n |_________|","output":"def hasLoop(self): \n    if self.head is None: \n        return False \n  \n    slow = fast = self.head \n    while(slow and fast and fast.next): \n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast: \n            return True  \n          \n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPython code to find out if a linked list has a loop\n\n### Input:\nHead of link list\n|\nv\n1 -> 2 -> 3 -> 4\n ^         |\n |_________|\n\n### Output:\ndef hasLoop(self): \n    if self.head is None: \n        return False \n  \n    slow = fast = self.head \n    while(slow and fast and fast.next): \n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast: \n            return True  \n          \n    return False"}
{"instruction":"Rewrite the following code in a different programming language.","input":"\/\/ JavaScript code\nlet arr = [1, 2, 3, 4, 5];\n\narr.forEach(item => {\n console.log(item * 2);\n});","output":"# Python code\narr = [1, 2, 3, 4, 5]\n\nfor item in arr:\n print(item * 2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code in a different programming language.\n\n### Input:\n\/\/ JavaScript code\nlet arr = [1, 2, 3, 4, 5];\n\narr.forEach(item => {\n console.log(item * 2);\n});\n\n### Output:\n# Python code\narr = [1, 2, 3, 4, 5]\n\nfor item in arr:\n print(item * 2)"}
{"instruction":"Generate a complete REST API using Python and Flask that can operate on a simple item model.","input":"Input fields for item model: \n- id (integer, primary key)\n- name (string)\n- colour (string)\n- price (integer)","output":"from flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:\/\/\/\/tmp\/test.db'\ndb = SQLAlchemy(app)\n\nclass Item(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String)\n colour = db.Column(db.String)\n price = db.Column(db.Integer)\n\ndb.create_all()\n\n@app.route('\/items', methods=['POST'])\ndef create_item():\n item = Item(name=request.json['name'], colour=request.json['colour'], price=request.json['price'])\n db.session.add(item)\n db.session.commit()\n return {'id': item.id}\n\n@app.route('\/items\/int:id', methods=['GET'])\ndef get_item(id):\n item = Item.query.get(id)\n return {'name': item.name, 'colour': item.colour, 'price': item.price}\n\n@app.route('\/items\/int:id', methods=['PUT'])\ndef update_item(id):\n item = Item.query.get(id)\n item.name = request.json['name']\n item.colour = request.json['colour']\n item.price = request.json['price']\n db.session.commit()\n return {'message': 'Item updated'}\n \n@app.route('\/items', methods=['GET'])\ndef get_items():\n items = Item.query.all()\n return {'items': [{'name': item.name, 'colour': item.colour, 'price': item.price} for item in items]}\n\n@app.route('\/items\/int:id', methods=['DELETE'])\ndef delete_item(id):\n Item.query.filter_by(id=id).delete()\n db.session.commit()\n return {'message': 'Item deleted'}\n\nif name == 'main':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a complete REST API using Python and Flask that can operate on a simple item model.\n\n### Input:\nInput fields for item model: \n- id (integer, primary key)\n- name (string)\n- colour (string)\n- price (integer)\n\n### Output:\nfrom flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:\/\/\/\/tmp\/test.db'\ndb = SQLAlchemy(app)\n\nclass Item(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String)\n colour = db.Column(db.String)\n price = db.Column(db.Integer)\n\ndb.create_all()\n\n@app.route('\/items', methods=['POST'])\ndef create_item():\n item = Item(name=request.json['name'], colour=request.json['colour'], price=request.json['price'])\n db.session.add(item)\n db.session.commit()\n return {'id': item.id}\n\n@app.route('\/items\/int:id', methods=['GET'])\ndef get_item(id):\n item = Item.query.get(id)\n return {'name': item.name, 'colour': item.colour, 'price': item.price}\n\n@app.route('\/items\/int:id', methods=['PUT'])\ndef update_item(id):\n item = Item.query.get(id)\n item.name = request.json['name']\n item.colour = request.json['colour']\n item.price = request.json['price']\n db.session.commit()\n return {'message': 'Item updated'}\n \n@app.route('\/items', methods=['GET'])\ndef get_items():\n items = Item.query.all()\n return {'items': [{'name': item.name, 'colour': item.colour, 'price': item.price} for item in items]}\n\n@app.route('\/items\/int:id', methods=['DELETE'])\ndef delete_item(id):\n Item.query.filter_by(id=id).delete()\n db.session.commit()\n return {'message': 'Item deleted'}\n\nif name == 'main':\n app.run(debug=True)"}
{"instruction":"Create a Python class for storing and retrieving data from a database.","input":"Table: User\nColumns: id (int), name (string)","output":"import sqlite3\n\nclass DataAccess(object):\n \n def __init__(self, db_name):\n self.conn = sqlite3.connect(db_name)\n self.cur = self.conn.cursor()\n \n def save_data(self, table, id, name):\n self.cur.execute(f\"INSERT INTO {table} VALUES (?, ?)\", (id, name))\n self.conn.commit()\n \n def read_data(self, table, id):\n self.cur.execute(f\"SELECT * FROM {table} WHERE id = ?\", (id,))\n return self.cur.fetchone()\n \n def close_connection(self):\n self.conn.close()\n\nUserDAO = DataAccess('my_db.db')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for storing and retrieving data from a database.\n\n### Input:\nTable: User\nColumns: id (int), name (string)\n\n### Output:\nimport sqlite3\n\nclass DataAccess(object):\n \n def __init__(self, db_name):\n self.conn = sqlite3.connect(db_name)\n self.cur = self.conn.cursor()\n \n def save_data(self, table, id, name):\n self.cur.execute(f\"INSERT INTO {table} VALUES (?, ?)\", (id, name))\n self.conn.commit()\n \n def read_data(self, table, id):\n self.cur.execute(f\"SELECT * FROM {table} WHERE id = ?\", (id,))\n return self.cur.fetchone()\n \n def close_connection(self):\n self.conn.close()\n\nUserDAO = DataAccess('my_db.db')"}
{"instruction":"Write a python code for taking an array of numbers and returning only the odd numbers in descending order.","input":"[1, 8, 5, 9, 12, 17]","output":"def extract_odd(arr):\n    odd = [x for x in arr if x % 2 != 0]\n    return sorted(odd, reverse = True)\n\narr = [1, 8, 5, 9, 12, 17]\nprint(extract_odd(arr)) # Output: [17, 9, 5, 1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code for taking an array of numbers and returning only the odd numbers in descending order.\n\n### Input:\n[1, 8, 5, 9, 12, 17]\n\n### Output:\ndef extract_odd(arr):\n    odd = [x for x in arr if x % 2 != 0]\n    return sorted(odd, reverse = True)\n\narr = [1, 8, 5, 9, 12, 17]\nprint(extract_odd(arr)) # Output: [17, 9, 5, 1]"}
{"instruction":"Design a Python program to print a triangle pyramid pattern.","input":"","output":"for i in range(0, 5):\n    for j in range(0, i+1):\n        print(\"* \",end=\"\")\n    print(\"\\r\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to print a triangle pyramid pattern.\n\n### Input:\n\n\n### Output:\nfor i in range(0, 5):\n    for j in range(0, i+1):\n        print(\"* \",end=\"\")\n    print(\"\\r\")"}
{"instruction":"Build a web application using the Django web framework.","input":"","output":"# Create a virtual environment to start the project\n$ virtualenv venv\n\n# Activate the virtual environment\n$ source venv\/bin\/activate\n\n# Install the required dependencies for the Django web project\n$ pip install django\n\n# Create the Django project\n$ django-admin startproject mysite\n\n# Change to the mysite directory\n$ cd mysite\n\n# Create the database tables\n$ python manage.py migrate\n\n# Create a superuser\n$ python manage.py createsuperuser\n\n# Start the development server\n$ python manage.py runserver","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a web application using the Django web framework.\n\n### Input:\n\n\n### Output:\n# Create a virtual environment to start the project\n$ virtualenv venv\n\n# Activate the virtual environment\n$ source venv\/bin\/activate\n\n# Install the required dependencies for the Django web project\n$ pip install django\n\n# Create the Django project\n$ django-admin startproject mysite\n\n# Change to the mysite directory\n$ cd mysite\n\n# Create the database tables\n$ python manage.py migrate\n\n# Create a superuser\n$ python manage.py createsuperuser\n\n# Start the development server\n$ python manage.py runserver"}
{"instruction":"Write a Python program to compute the probability of an event based on the input data.","input":"data = {'success': 833, 'failure': 917}","output":"def probability_calc(data):\n    total = data['success'] + data['failure']\n    return data['success']\/total","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compute the probability of an event based on the input data.\n\n### Input:\ndata = {'success': 833, 'failure': 917}\n\n### Output:\ndef probability_calc(data):\n    total = data['success'] + data['failure']\n    return data['success']\/total"}
{"instruction":"Create a Python program to check if the given number is divisible by 3 or not.","input":"12","output":"def is_divisible_by_3(n):\n  return (n % 3 == 0)\n\nn = 12\nif is_divisible_by_3(n):\n  print(str(n) + ' is divisible by 3.')\nelse:\n  print(str(n) + ' is not divisible by 3.')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to check if the given number is divisible by 3 or not.\n\n### Input:\n12\n\n### Output:\ndef is_divisible_by_3(n):\n  return (n % 3 == 0)\n\nn = 12\nif is_divisible_by_3(n):\n  print(str(n) + ' is divisible by 3.')\nelse:\n  print(str(n) + ' is not divisible by 3.')"}
{"instruction":"Develop an algorithm in Python that finds the minimum number of coins required to make a given amount.","input":"8","output":"def minCoins(amount):  \n  \n    # Initializing the list of coins with the given amount \n    coins = [1, 2, 5] \n    num_coins = [999999999] * (amount+1) \n    num_coins[0] = 0\n  \n    for i in range(1, amount+1): \n        for j in coins: \n            if j <= i: \n                sub_res = num_coins[i-j] \n                if sub_res + 1 < num_coins[i]: \n                    num_coins[i] = sub_res + 1\n  \n    return num_coins[amount] \n\nprint(minCoins(8))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python that finds the minimum number of coins required to make a given amount.\n\n### Input:\n8\n\n### Output:\ndef minCoins(amount):  \n  \n    # Initializing the list of coins with the given amount \n    coins = [1, 2, 5] \n    num_coins = [999999999] * (amount+1) \n    num_coins[0] = 0\n  \n    for i in range(1, amount+1): \n        for j in coins: \n            if j <= i: \n                sub_res = num_coins[i-j] \n                if sub_res + 1 < num_coins[i]: \n                    num_coins[i] = sub_res + 1\n  \n    return num_coins[amount] \n\nprint(minCoins(8))"}
{"instruction":"Develop a Django web application presenting a CV.","input":"","output":"import django\n\n# Setting up a django project\ndjango.setup()\n\n# Providing the project name and the path to working directory\ndjango-admin startproject <project_name> <working_directory_path>\n\n# Running the project server\npython manage.py runserver\n\n# Creating and adding data models\nfrom django.db import models\n\nclass CV(models.Model):\n    name = models.CharField(max_length=256)\n    age = models.IntegerField()\n    education = models.TextField()\n    experience = models.TextField()\n    skills = models.TextField()\n\n# Migrating the models\npython manage.py makemigrations\npython manage.py migrate\n\n# Creating a superuser for the admin panel\npython manage.py createsuperuser\n\n# Adding admin view for the CV\nfrom django.contrib import admin\nfrom .models import CV\n\n# Registering the CV model to the admin panel\nadmin.site.register(CV)\n\n# Creating the CV view and template\nfrom django.shortcuts import render\nfrom django.template import loader\n\ndef cv(request):\n    cvs = CV.objects.all()\n    template = loader.get_template('cv.html')\n    context = {\n        'cvs': cvs,\n    }\n    return  HttpResponse(template.render(context, request))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Django web application presenting a CV.\n\n### Input:\n\n\n### Output:\nimport django\n\n# Setting up a django project\ndjango.setup()\n\n# Providing the project name and the path to working directory\ndjango-admin startproject <project_name> <working_directory_path>\n\n# Running the project server\npython manage.py runserver\n\n# Creating and adding data models\nfrom django.db import models\n\nclass CV(models.Model):\n    name = models.CharField(max_length=256)\n    age = models.IntegerField()\n    education = models.TextField()\n    experience = models.TextField()\n    skills = models.TextField()\n\n# Migrating the models\npython manage.py makemigrations\npython manage.py migrate\n\n# Creating a superuser for the admin panel\npython manage.py createsuperuser\n\n# Adding admin view for the CV\nfrom django.contrib import admin\nfrom .models import CV\n\n# Registering the CV model to the admin panel\nadmin.site.register(CV)\n\n# Creating the CV view and template\nfrom django.shortcuts import render\nfrom django.template import loader\n\ndef cv(request):\n    cvs = CV.objects.all()\n    template = loader.get_template('cv.html')\n    context = {\n        'cvs': cvs,\n    }\n    return  HttpResponse(template.render(context, request))"}
{"instruction":"Modify the following Python code to remove any duplicate elements in an array.","input":"myList = [1, 2, 3, 2, 1]","output":"myList = list(set(myList))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following Python code to remove any duplicate elements in an array.\n\n### Input:\nmyList = [1, 2, 3, 2, 1]\n\n### Output:\nmyList = list(set(myList))"}
{"instruction":"Create a Python program, which takes two strings as input, and returns true if one string is an anagram of the other and false otherwise.","input":"s1 = \"test\"\ns2 = \"ttes\"","output":"def isAnagram(s1, s2): \n    # Sort both strings  \n    s1 = sorted(s1) \n    s2 = sorted(s2)\n    # Compare sorted strings \n    if( s1 == s2): \n        return True \n    else: \n        return False \ns1 = \"test\"\ns2 = \"ttes\"\nif (isAnagram(s1, s2)): \n    print (\"The strings are anagrams.\")\nelse: \n    print (\"The strings aren't anagrams.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program, which takes two strings as input, and returns true if one string is an anagram of the other and false otherwise.\n\n### Input:\ns1 = \"test\"\ns2 = \"ttes\"\n\n### Output:\ndef isAnagram(s1, s2): \n    # Sort both strings  \n    s1 = sorted(s1) \n    s2 = sorted(s2)\n    # Compare sorted strings \n    if( s1 == s2): \n        return True \n    else: \n        return False \ns1 = \"test\"\ns2 = \"ttes\"\nif (isAnagram(s1, s2)): \n    print (\"The strings are anagrams.\")\nelse: \n    print (\"The strings aren't anagrams.\")"}
{"instruction":"Create a function in Python to calculate the distance between two points.","input":"point1 (x1, y1): (2, 7)\npoint2 (x2, y2): (4, 9)","output":"import math\n\ndef distance_between_points(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    \n# Call the function\ndistance = distance_between_points(2, 7, 4, 9)\nprint(\"The distance between the two points is\", distance)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to calculate the distance between two points.\n\n### Input:\npoint1 (x1, y1): (2, 7)\npoint2 (x2, y2): (4, 9)\n\n### Output:\nimport math\n\ndef distance_between_points(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    \n# Call the function\ndistance = distance_between_points(2, 7, 4, 9)\nprint(\"The distance between the two points is\", distance)"}
{"instruction":"Develop a web socket server with Python that will communicate with a web client, and process messages received from the user.","input":"Not applicable","output":"import asyncio\nimport websockets\n\nasync def handler(websocket, path):\n    message = await websocket.recv()\n    print(f\"Received {message}\")\n    await websocket.send(message)\n\nstart_server = websockets.serve(handler, 'localhost', 8765)\n\nasyncio.get_event_loop().run_until_complete(start_server)\nasyncio.get_event_loop().run_forever()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a web socket server with Python that will communicate with a web client, and process messages received from the user.\n\n### Input:\nNot applicable\n\n### Output:\nimport asyncio\nimport websockets\n\nasync def handler(websocket, path):\n    message = await websocket.recv()\n    print(f\"Received {message}\")\n    await websocket.send(message)\n\nstart_server = websockets.serve(handler, 'localhost', 8765)\n\nasyncio.get_event_loop().run_until_complete(start_server)\nasyncio.get_event_loop().run_forever()"}
{"instruction":"Write a Python script that takes two numbers as input and raises the first number to the power of the second number.","input":"2, 5","output":"def power_function(a, b):\n    return a**b\n\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\n\nresult = power_function(a, b)\nprint(\"The result is:\", result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that takes two numbers as input and raises the first number to the power of the second number.\n\n### Input:\n2, 5\n\n### Output:\ndef power_function(a, b):\n    return a**b\n\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\n\nresult = power_function(a, b)\nprint(\"The result is:\", result)"}
{"instruction":"Generate a Python code for a web scraper to extract the current Bitcoin price from a website.","input":"Not applicable","output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/example.com\/'\n\nr = requests.get(url)\nsoup = BeautifulSoup(r.text, 'html.parser')\n\nbitcoin_price = soup.find('span', {'class': 'btc-price'}).text\n\nprint(f'The current Bitcoin price is {bitcoin_price}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code for a web scraper to extract the current Bitcoin price from a website.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/example.com\/'\n\nr = requests.get(url)\nsoup = BeautifulSoup(r.text, 'html.parser')\n\nbitcoin_price = soup.find('span', {'class': 'btc-price'}).text\n\nprint(f'The current Bitcoin price is {bitcoin_price}')"}
{"instruction":"Construct a Python program to round the number up to the nearest integer","input":"num = 5.6","output":"def round_up(num): \n    if num == int(num): \n        return int(num) \n    return int(num + 1) \n\nnum = 5.6\nprint(round_up(num))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to round the number up to the nearest integer\n\n### Input:\nnum = 5.6\n\n### Output:\ndef round_up(num): \n    if num == int(num): \n        return int(num) \n    return int(num + 1) \n\nnum = 5.6\nprint(round_up(num))"}
{"instruction":"Generate a Python program to check if a list contains a given value.","input":"","output":"def check_if_contains(lst, val):\n    return val in lst","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to check if a list contains a given value.\n\n### Input:\n\n\n### Output:\ndef check_if_contains(lst, val):\n    return val in lst"}
{"instruction":"Implement a KNN Algorithm in Python to classify iris datapoints into three categories.","input":"","output":"# import relevant libraries\nimport numpy as np\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# load the data\niris = load_iris()\nX = iris.data\ny = iris.target\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y,random_state = 0)\n\n# Initialize the model\nknn_model = KNeighborsClassifier(n_neighbors=3)\n\n# Fit the model to train data\nknn_model.fit(X_train, y_train)\n\n# Score the model on test data\nknn_model.score(X_test, y_test)\n\n# Output a prediction \nknn_model.predict([[3, 5, 4, 2]])\n# Output: [1] (This is Iris-versicolor)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a KNN Algorithm in Python to classify iris datapoints into three categories.\n\n### Input:\n\n\n### Output:\n# import relevant libraries\nimport numpy as np\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# load the data\niris = load_iris()\nX = iris.data\ny = iris.target\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y,random_state = 0)\n\n# Initialize the model\nknn_model = KNeighborsClassifier(n_neighbors=3)\n\n# Fit the model to train data\nknn_model.fit(X_train, y_train)\n\n# Score the model on test data\nknn_model.score(X_test, y_test)\n\n# Output a prediction \nknn_model.predict([[3, 5, 4, 2]])\n# Output: [1] (This is Iris-versicolor)"}
{"instruction":"Create a Python program that takes two lists of integers and prints the common elements between the two lists.","input":"list1 = [2, 4, 6, 8]\nlist2 = [4, 8, 10]","output":"list1 = [2, 4, 6, 8]\nlist2 = [4, 8, 10]\n\ncommon_elements = list(set(list1).intersection(list2))\n\nprint(common_elements)\n# Output: [4, 8]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes two lists of integers and prints the common elements between the two lists.\n\n### Input:\nlist1 = [2, 4, 6, 8]\nlist2 = [4, 8, 10]\n\n### Output:\nlist1 = [2, 4, 6, 8]\nlist2 = [4, 8, 10]\n\ncommon_elements = list(set(list1).intersection(list2))\n\nprint(common_elements)\n# Output: [4, 8]"}
{"instruction":"Create a Python code snippet to convert a given JSON string into a Python dictionary.","input":"'{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'","output":"import json\n\njson_string = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\npython_dict = json.loads(json_string)\n\nprint(python_dict)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code snippet to convert a given JSON string into a Python dictionary.\n\n### Input:\n'{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\n\n### Output:\nimport json\n\njson_string = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\npython_dict = json.loads(json_string)\n\nprint(python_dict)"}
{"instruction":"Create a post request in Python using the requests library to roll a die on a website.","input":"Not applicable","output":"import requests\n\nurl = 'http:\/\/roll-dice-game.com\/roll'\n\npayload = {\n 'number-of-dice': 1\n}\n\nr = requests.post(url, data=payload)\n\nprint(r.text)\n\n# Output: The dice rolled a 3!","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a post request in Python using the requests library to roll a die on a website.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\n\nurl = 'http:\/\/roll-dice-game.com\/roll'\n\npayload = {\n 'number-of-dice': 1\n}\n\nr = requests.post(url, data=payload)\n\nprint(r.text)\n\n# Output: The dice rolled a 3!"}
{"instruction":"Generate a function in Python that receives a number and adds 15 to it.","input":"","output":"def add_fifteen(num):\n    return num + 15","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python that receives a number and adds 15 to it.\n\n### Input:\n\n\n### Output:\ndef add_fifteen(num):\n    return num + 15"}
{"instruction":"Write a Python program to calculate the entropy of a given dataset.","input":"Dataset: [1,1,1,1,1,1,2,2,2,2,3,3]","output":"def entropy(dataset):\n    counts = {}\n    entropy = 0\n    for i in dataset:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    for i in counts:\n        p = counts[i]\/len(dataset)\n        entropy -= p*np.log2(p)\n    return entropy\n\nentropy([1,1,1,1,1,1,2,2,2,2,3,3])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the entropy of a given dataset.\n\n### Input:\nDataset: [1,1,1,1,1,1,2,2,2,2,3,3]\n\n### Output:\ndef entropy(dataset):\n    counts = {}\n    entropy = 0\n    for i in dataset:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    for i in counts:\n        p = counts[i]\/len(dataset)\n        entropy -= p*np.log2(p)\n    return entropy\n\nentropy([1,1,1,1,1,1,2,2,2,2,3,3])"}
{"instruction":"Create a Python program to optimize an expression using linear algebra.","input":"3x + 2y + 4z = 5","output":"\"\"\"\nOptimize an expression using linear algebra\n\"\"\"\nimport numpy as np\n\ndef optimize_expression(expr):\n    coeffs, rhs = expr.split(\"=\")\n    coeffs = [int(x) for x in coeffs.split(\"+\")]\n    rhs = int(rhs)\n    A = np.array(coeffs).reshape(1, 3)\n    b = np.array(rhs).reshape(1, 1)\n    result = np.linalg.solve(A, b)\n    return result[0], result[1], result[2]\n    \nif __name__ == '__main__':\n    expr = \"3x + 2y + 4z = 5\"\n    x, y, z = optimize_expression(expr)\n    print(f\"x = {x}, y = {y}, z = {z}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to optimize an expression using linear algebra.\n\n### Input:\n3x + 2y + 4z = 5\n\n### Output:\n\"\"\"\nOptimize an expression using linear algebra\n\"\"\"\nimport numpy as np\n\ndef optimize_expression(expr):\n    coeffs, rhs = expr.split(\"=\")\n    coeffs = [int(x) for x in coeffs.split(\"+\")]\n    rhs = int(rhs)\n    A = np.array(coeffs).reshape(1, 3)\n    b = np.array(rhs).reshape(1, 1)\n    result = np.linalg.solve(A, b)\n    return result[0], result[1], result[2]\n    \nif __name__ == '__main__':\n    expr = \"3x + 2y + 4z = 5\"\n    x, y, z = optimize_expression(expr)\n    print(f\"x = {x}, y = {y}, z = {z}\")"}
{"instruction":"Generate a function in Python which takes an array as an argument and returns an array of length two, with the first element being the maximum value and the second element being the minimum value of the array.","input":"[1, 5, 7, 3, 9]","output":"def minmax(array):\n  max_val = max(array)\n  min_val = min(array)\n  return [max_val, min_val]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python which takes an array as an argument and returns an array of length two, with the first element being the maximum value and the second element being the minimum value of the array.\n\n### Input:\n[1, 5, 7, 3, 9]\n\n### Output:\ndef minmax(array):\n  max_val = max(array)\n  min_val = min(array)\n  return [max_val, min_val]"}
{"instruction":"Suggest a completion for the following Python code to check if a given number is an Armstrong number.","input":"def is_armstrong_number(num):","output":"def is_armstrong_number(num):\n  order = len(str(num))\n  sum = 0\n  temp = num\n  while temp > 0:\n    digit = temp % 10\n    sum += digit ** order\n    temp \/\/= 10\n  if num == sum:\n    return True  \n  else:\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a completion for the following Python code to check if a given number is an Armstrong number.\n\n### Input:\ndef is_armstrong_number(num):\n\n### Output:\ndef is_armstrong_number(num):\n  order = len(str(num))\n  sum = 0\n  temp = num\n  while temp > 0:\n    digit = temp % 10\n    sum += digit ** order\n    temp \/\/= 10\n  if num == sum:\n    return True  \n  else:\n    return False"}
{"instruction":"Construct a function in Python that takes a list of integers and a number and returns the number of occurrences of the number in the list.","input":"","output":"def count_occurrences(lst, num):\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function in Python that takes a list of integers and a number and returns the number of occurrences of the number in the list.\n\n### Input:\n\n\n### Output:\ndef count_occurrences(lst, num):\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count"}
{"instruction":"Using Python, write a program to find all the word pairs in a text that are anagrams of each other.","input":"","output":"#import itertools \n  \n# initialize empty list to hold all anagrams \nword_pairs = [] \n  \n# enter the source text  \nsource_text = input(\"Enter the source text: \") \n  \n# split the source text into individual words\nwords = source_text.split() \n  \nfor word1, word2 in itertools.combinations(words,2): \n    if (sorted(word1) == sorted(word2)): \n        word_pairs.append((word1, word2)) \n  \n# print the list of anagram pairs in source text  \nprint(word_pairs)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, write a program to find all the word pairs in a text that are anagrams of each other.\n\n### Input:\n\n\n### Output:\n#import itertools \n  \n# initialize empty list to hold all anagrams \nword_pairs = [] \n  \n# enter the source text  \nsource_text = input(\"Enter the source text: \") \n  \n# split the source text into individual words\nwords = source_text.split() \n  \nfor word1, word2 in itertools.combinations(words,2): \n    if (sorted(word1) == sorted(word2)): \n        word_pairs.append((word1, word2)) \n  \n# print the list of anagram pairs in source text  \nprint(word_pairs)"}
{"instruction":"Write a python program to generate the Cartesian product of a given list","input":"lst = [1, 2, 3]","output":"def cartesian_product(lst):\n    \"\"\"Generate the Cartesian product of a given list\n\n    Args:\n        lst (list): list of elements\n\n    Returns:\n        list: the Cartesian product of the input list\n    \"\"\"\n    res = [[i] for i in lst]\n    for j in range(len(lst)):\n        temp = []\n        for k in lst:\n            for element in res[j]:\n                temp.append(element + [k])\n        res.append(temp)\n    return res[len(lst)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to generate the Cartesian product of a given list\n\n### Input:\nlst = [1, 2, 3]\n\n### Output:\ndef cartesian_product(lst):\n    \"\"\"Generate the Cartesian product of a given list\n\n    Args:\n        lst (list): list of elements\n\n    Returns:\n        list: the Cartesian product of the input list\n    \"\"\"\n    res = [[i] for i in lst]\n    for j in range(len(lst)):\n        temp = []\n        for k in lst:\n            for element in res[j]:\n                temp.append(element + [k])\n        res.append(temp)\n    return res[len(lst)]"}
{"instruction":"Create a Python function that takes a string argument, removes all the special characters and returns the modified string.","input":"This# 1$ i^s an% e*xa_mple -str_ing","output":"def remove_special_characters(s):\n    new_s = s.replace('#', '').replace('$', '').replace('^', '').replace('%', '').replace('*', '').replace('_', '') \n    return new_s\n\nremove_special_characters(\"This# 1$ i^s an% e*xa_mple -str_ing\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes a string argument, removes all the special characters and returns the modified string.\n\n### Input:\nThis# 1$ i^s an% e*xa_mple -str_ing\n\n### Output:\ndef remove_special_characters(s):\n    new_s = s.replace('#', '').replace('$', '').replace('^', '').replace('%', '').replace('*', '').replace('_', '') \n    return new_s\n\nremove_special_characters(\"This# 1$ i^s an% e*xa_mple -str_ing\")"}
{"instruction":"In Python, write a script to sort the list items in descending order.","input":"list_items = [3, 7, 5, 8, 10]","output":"list_items = [3, 7, 5, 8, 10]\n\nlist_items.sort(reverse=True)\n\nprint(list_items) # Output: [10, 8, 7, 5, 3]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, write a script to sort the list items in descending order.\n\n### Input:\nlist_items = [3, 7, 5, 8, 10]\n\n### Output:\nlist_items = [3, 7, 5, 8, 10]\n\nlist_items.sort(reverse=True)\n\nprint(list_items) # Output: [10, 8, 7, 5, 3]"}
{"instruction":"Create a web scraper in Python that scrapes the website \"example.com\" and prints out the content of all the h1 tags.","input":"Not applicable","output":"import requests\nfrom bs4 import BeautifulSoup\n\nresponse = requests.get('https:\/\/example.com\/')\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nfor h1 in soup.find_all('h1'):\n print(h1.text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python that scrapes the website \"example.com\" and prints out the content of all the h1 tags.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nresponse = requests.get('https:\/\/example.com\/')\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nfor h1 in soup.find_all('h1'):\n print(h1.text)"}
{"instruction":"Write a Python program to find the sum of all numbers in a nested list","input":"","output":"def sum_nested_list(lst):\n    total = 0\n    for i in lst:\n        if isinstance(i,list):\n            total += sum_nested_list(i)\n        else:\n            total += i\n    return total","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the sum of all numbers in a nested list\n\n### Input:\n\n\n### Output:\ndef sum_nested_list(lst):\n    total = 0\n    for i in lst:\n        if isinstance(i,list):\n            total += sum_nested_list(i)\n        else:\n            total += i\n    return total"}
{"instruction":"Generate a class that models a car in Python.","input":"","output":"class Car:\n def __init__(self, make, model, year):\n  self.make = make\n  self.model = model\n  self.year = year\n \n def get_make(self):\n  return self.make\n \n def get_model(self):\n  return self.model\n \n def get_year(self):\n  return self.year","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a class that models a car in Python.\n\n### Input:\n\n\n### Output:\nclass Car:\n def __init__(self, make, model, year):\n  self.make = make\n  self.model = model\n  self.year = year\n \n def get_make(self):\n  return self.make\n \n def get_model(self):\n  return self.model\n \n def get_year(self):\n  return self.year"}
{"instruction":"Create a python program for the following purpose:","input":"Create a program that takes a positive integer N and an array A of length N, and outputs the total number of unique pairs of elements in A which sum up to an even number.","output":"def count_even_pairs(N, A):\n    n = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] + A[j]) % 2 == 0:\n                n += 1\n    return n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program for the following purpose:\n\n### Input:\nCreate a program that takes a positive integer N and an array A of length N, and outputs the total number of unique pairs of elements in A which sum up to an even number.\n\n### Output:\ndef count_even_pairs(N, A):\n    n = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] + A[j]) % 2 == 0:\n                n += 1\n    return n"}
{"instruction":"Generate a neural network model in Python to predict the outcome of a basketball match given the players' stats.","input":"Player 1: \nHeight: 185cm; Weight: 80kg, Number of Points scored: 20\n\nPlayer 2:\nHeight: 202cm; Weight: 100kg, Number of Points scored: 30","output":"model = Sequental()\n\nmodel.add(Dense(units=64, input_shape=(3,)))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(.2))\nmodel.add(Dense(32))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(.2))\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer='Adam',\n              metrics=['accuracy'])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a neural network model in Python to predict the outcome of a basketball match given the players' stats.\n\n### Input:\nPlayer 1: \nHeight: 185cm; Weight: 80kg, Number of Points scored: 20\n\nPlayer 2:\nHeight: 202cm; Weight: 100kg, Number of Points scored: 30\n\n### Output:\nmodel = Sequental()\n\nmodel.add(Dense(units=64, input_shape=(3,)))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(.2))\nmodel.add(Dense(32))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(.2))\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer='Adam',\n              metrics=['accuracy'])"}
{"instruction":"Design an algorithm in Python that can sort a given array using the Bubble Sort technique.","input":"[5, 4, 3, 7, 1]","output":"def bubble_sort(arr):\n    n = len(arr)\n   \n    # Traverse through all array elements \n    for i in range(n): \n\n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n\n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\narr = [5, 4, 3, 7, 1] \nbubble_sort(arr) \n       \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that can sort a given array using the Bubble Sort technique.\n\n### Input:\n[5, 4, 3, 7, 1]\n\n### Output:\ndef bubble_sort(arr):\n    n = len(arr)\n   \n    # Traverse through all array elements \n    for i in range(n): \n\n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n\n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\narr = [5, 4, 3, 7, 1] \nbubble_sort(arr) \n       \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),"}
{"instruction":"Given a list of numbers, write a Python program to check if any two numbers in the list add up to a given target number.","input":"nums = [1, 4, -5, 3]\ntarget = 2","output":"def find_two_add_up_to_target(nums, target): \n    for num1 in nums:\n        for num2 in nums:\n            if num1 + num2 == target:\n                return True\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers, write a Python program to check if any two numbers in the list add up to a given target number.\n\n### Input:\nnums = [1, 4, -5, 3]\ntarget = 2\n\n### Output:\ndef find_two_add_up_to_target(nums, target): \n    for num1 in nums:\n        for num2 in nums:\n            if num1 + num2 == target:\n                return True\n    return False"}
{"instruction":"Write python program to find the maximum of 3 numbers and display the result","input":"","output":"def max_3(n1, n2, n3):\n    max = n1\n    if n2 > max:\n        max = n2\n    if n3 > max:\n        max = n3\n    \n    return max\n\n# Example\nprint(max_3(1, 2, 3))  # Output: 3","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite python program to find the maximum of 3 numbers and display the result\n\n### Input:\n\n\n### Output:\ndef max_3(n1, n2, n3):\n    max = n1\n    if n2 > max:\n        max = n2\n    if n3 > max:\n        max = n3\n    \n    return max\n\n# Example\nprint(max_3(1, 2, 3))  # Output: 3"}
{"instruction":"Design a system to encode and decode a string of text.","input":"Not applicable","output":"def encode(text):\n # Create an empty string\n encoded_string = ''\n # Iterate over every character\n for i in text:\n     # Convert it to the ASCII value\n     n = ord(i)\n     # Add +1 to each Character\n     n += 1\n \n     # Convert it back to character\n     c = chr(n)\n \n     # Append it to the result\n     encoded_string += c\n \n # Return the result\n return encoded_string\n\ndef decode(encoded_text):\n # Create an empty string\n decoded_string = ''\n # Iterate over every character\n for i in encoded_text:\n     # Convert it to the ASCII value\n     n = ord(i)\n     # subtract -1 from each Character \n     n -= 1\n \n     # Convert it back to character\n     c = chr(n)\n \n     # Append it to the result\n     decoded_string += c\n \n # Return the result\n return decoded_string\n\n# Test the code\ntext = 'Python'\nencoded_text = encode(text)\n decoded_text = decode(encoded_text)\n \n print ( text == decoded_text )  #True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a system to encode and decode a string of text.\n\n### Input:\nNot applicable\n\n### Output:\ndef encode(text):\n # Create an empty string\n encoded_string = ''\n # Iterate over every character\n for i in text:\n     # Convert it to the ASCII value\n     n = ord(i)\n     # Add +1 to each Character\n     n += 1\n \n     # Convert it back to character\n     c = chr(n)\n \n     # Append it to the result\n     encoded_string += c\n \n # Return the result\n return encoded_string\n\ndef decode(encoded_text):\n # Create an empty string\n decoded_string = ''\n # Iterate over every character\n for i in encoded_text:\n     # Convert it to the ASCII value\n     n = ord(i)\n     # subtract -1 from each Character \n     n -= 1\n \n     # Convert it back to character\n     c = chr(n)\n \n     # Append it to the result\n     decoded_string += c\n \n # Return the result\n return decoded_string\n\n# Test the code\ntext = 'Python'\nencoded_text = encode(text)\n decoded_text = decode(encoded_text)\n \n print ( text == decoded_text )  #True"}
{"instruction":"Create an algorithm in Python using numpy to normalize a given array of numbers.","input":"[1, 2, 3, 4]","output":"import numpy as np\n\ndef normalize(arr):\n  return (arr - np.mean(arr)) \/ np.std(arr)\n\nnormalize([1,2,3,4]) # [-1.,  0.,  1.,  2.]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python using numpy to normalize a given array of numbers.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\nimport numpy as np\n\ndef normalize(arr):\n  return (arr - np.mean(arr)) \/ np.std(arr)\n\nnormalize([1,2,3,4]) # [-1.,  0.,  1.,  2.]"}
{"instruction":"Write a Python program to convert an array of strings to an array of floats.","input":"arr = [\"1.2\", \"2.3\", \"3.4\", \"4.5\"]","output":"def string_to_float(arr):\n    return [float(x) for x in arr]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert an array of strings to an array of floats.\n\n### Input:\narr = [\"1.2\", \"2.3\", \"3.4\", \"4.5\"]\n\n### Output:\ndef string_to_float(arr):\n    return [float(x) for x in arr]"}
{"instruction":"Implement a stack class in Python.","input":"","output":"class Stack:\n    def __init__(self):\n        self.stack = []\n \n    def push(self, x):\n        self.stack.append(x)\n \n    def pop(self):\n        if self.stack == []:\n            raise IndexError(\"pop from an empty stack\")\n        else:\n            return self.stack.pop()\n \n    def is_empty(self):\n        return self.stack == []","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a stack class in Python.\n\n### Input:\n\n\n### Output:\nclass Stack:\n    def __init__(self):\n        self.stack = []\n \n    def push(self, x):\n        self.stack.append(x)\n \n    def pop(self):\n        if self.stack == []:\n            raise IndexError(\"pop from an empty stack\")\n        else:\n            return self.stack.pop()\n \n    def is_empty(self):\n        return self.stack == []"}
{"instruction":"Create a Python script to find the maximum and minimum values for each sublist in a list","input":"[[8, 4], [6, 2, 3], [1, 9, 7]]","output":"def findMinMax(list):\n    min_list = []\n    max_list = []\n    \n    for sublist in list: \n        min_list.append(min(sublist)) \n        max_list.append(max(sublist)) \n    return min_list, max_list \n\nlist = [[8, 4], [6, 2, 3], [1, 9, 7]] \nmin_list, max_list = findMinMax(list) \n\nprint(\"The min values of given sublist :\", min_list) \nprint(\"The max values of given sublist :\", max_list) \n\n# Output\n# The min values of given sublist : [4, 2, 1]\n#The max values of given sublist : [8, 6, 9]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to find the maximum and minimum values for each sublist in a list\n\n### Input:\n[[8, 4], [6, 2, 3], [1, 9, 7]]\n\n### Output:\ndef findMinMax(list):\n    min_list = []\n    max_list = []\n    \n    for sublist in list: \n        min_list.append(min(sublist)) \n        max_list.append(max(sublist)) \n    return min_list, max_list \n\nlist = [[8, 4], [6, 2, 3], [1, 9, 7]] \nmin_list, max_list = findMinMax(list) \n\nprint(\"The min values of given sublist :\", min_list) \nprint(\"The max values of given sublist :\", max_list) \n\n# Output\n# The min values of given sublist : [4, 2, 1]\n#The max values of given sublist : [8, 6, 9]"}
{"instruction":"Given some code, identify the type of the code written.","input":"def foo():\n    x = 0\n    y = 1\n    z = 2\n    if x == y:\n        z += 1","output":"The code written is a combination of Python and logic control. It is a conditional statement which checks whether x is equal to y and adds one to z if this is true.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven some code, identify the type of the code written.\n\n### Input:\ndef foo():\n    x = 0\n    y = 1\n    z = 2\n    if x == y:\n        z += 1\n\n### Output:\nThe code written is a combination of Python and logic control. It is a conditional statement which checks whether x is equal to y and adds one to z if this is true."}
{"instruction":"Create classes and methods to represent a game of Tic-Tac-Toe in Python.","input":"","output":"class TicTacToe:\n    def __init__(self):\n        self.board = [[None] * 3 for _ in range(3)]\n    \n    def player_move(self, row, col, move):\n        self.board[row][col] = move\n        return self.check_for_win(row, col, move)\n    \n    def check_for_win(self, row, col, move):\n        # Check row and column\n        row_win = all(move == self.board[row][i] for i in range(3))\n        col_win = all(move == self.board[i][col] for i in range(3))\n\n        # Check diagonal\n        diag_win = row == col and all(move == self.board[i][i] for i in range(3))\n        diag_win_2 = (row + col) == 2 and all(move == self.board[2-i][i] for i in range(3))\n\n        if row_win or col_win or diag_win or diag_win_2:\n            return True\n        else:\n            return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate classes and methods to represent a game of Tic-Tac-Toe in Python.\n\n### Input:\n\n\n### Output:\nclass TicTacToe:\n    def __init__(self):\n        self.board = [[None] * 3 for _ in range(3)]\n    \n    def player_move(self, row, col, move):\n        self.board[row][col] = move\n        return self.check_for_win(row, col, move)\n    \n    def check_for_win(self, row, col, move):\n        # Check row and column\n        row_win = all(move == self.board[row][i] for i in range(3))\n        col_win = all(move == self.board[i][col] for i in range(3))\n\n        # Check diagonal\n        diag_win = row == col and all(move == self.board[i][i] for i in range(3))\n        diag_win_2 = (row + col) == 2 and all(move == self.board[2-i][i] for i in range(3))\n\n        if row_win or col_win or diag_win or diag_win_2:\n            return True\n        else:\n            return False"}
{"instruction":"Write a function in Python which takes a question string and returns the answer.","input":"What is the capital of China?","output":"def answer_question(question):\n    if question == 'What is the capital of China?':\n        return 'Beijing'\n    else:\n        return 'I don\\'t know'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python which takes a question string and returns the answer.\n\n### Input:\nWhat is the capital of China?\n\n### Output:\ndef answer_question(question):\n    if question == 'What is the capital of China?':\n        return 'Beijing'\n    else:\n        return 'I don\\'t know'"}
{"instruction":"Write a Python script to read an array from the user and then determine the mean and median of the array.","input":"arr = [10, 15, 20, 25, 30, 35]","output":"def mean_median(arr): \n      arr_sum = 0 \n      for i in range(len(arr)): \n            arr_sum += arr[i] \n      \n      mean = arr_sum\/len(arr) \n    \n      arr = sorted(arr) \n      if len(arr) % 2 != 0: \n            median = arr[floor(len(arr)\/2)] \n      else: \n            median = (arr[len(arr)\/\/2] + arr[len(arr)\/\/2 - 1]) \/ 2\n      \n      return mean, median\n\nmean, median = mean_median(arr) \nprint(\"Mean =\", mean) \nprint(\"Median =\", median)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to read an array from the user and then determine the mean and median of the array.\n\n### Input:\narr = [10, 15, 20, 25, 30, 35]\n\n### Output:\ndef mean_median(arr): \n      arr_sum = 0 \n      for i in range(len(arr)): \n            arr_sum += arr[i] \n      \n      mean = arr_sum\/len(arr) \n    \n      arr = sorted(arr) \n      if len(arr) % 2 != 0: \n            median = arr[floor(len(arr)\/2)] \n      else: \n            median = (arr[len(arr)\/\/2] + arr[len(arr)\/\/2 - 1]) \/ 2\n      \n      return mean, median\n\nmean, median = mean_median(arr) \nprint(\"Mean =\", mean) \nprint(\"Median =\", median)"}
{"instruction":"In Python create a function that takes a list of numbers and returns the sum of the even numbers in the list.","input":"[3, 5, 8, 9, 10]","output":"def even_sum(numbers): \n    even_sum = 0\n    for num in numbers:\n        if (num % 2 == 0):\n            even_sum += num\n    return even_sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python create a function that takes a list of numbers and returns the sum of the even numbers in the list.\n\n### Input:\n[3, 5, 8, 9, 10]\n\n### Output:\ndef even_sum(numbers): \n    even_sum = 0\n    for num in numbers:\n        if (num % 2 == 0):\n            even_sum += num\n    return even_sum"}
{"instruction":"Create a class in Python 3 which describes a rectangle in a two-dimensional plane.","input":"","output":"class Rectangle:\n    \n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n        \n    def get_area(self):\n        return self.length * self.width\n    \n    def get_perimeter(self):\n        return 2*(self.length + self.width)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python 3 which describes a rectangle in a two-dimensional plane.\n\n### Input:\n\n\n### Output:\nclass Rectangle:\n    \n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n        \n    def get_area(self):\n        return self.length * self.width\n    \n    def get_perimeter(self):\n        return 2*(self.length + self.width)"}
{"instruction":"Create an algorithm in Python to generate random strings of a given length.","input":"","output":"import random\n\ndef generate_random_string(length):\n  # Generate a random string of given length\n  letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n  return ''.join(random.choice(letters) for i in range(length))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to generate random strings of a given length.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_random_string(length):\n  # Generate a random string of given length\n  letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n  return ''.join(random.choice(letters) for i in range(length))"}
{"instruction":"Create a python program to calculate the average of the numbers in a list (not including null values).","input":"An example list of integers: [30, 28, 40, 10, 0, null, 33, null]","output":"# Calculate the average\ndef avg(lst): \n    sum = 0\n    count = 0\n    for num in lst:\n        if num is not None:\n            sum += num\n            count += 1\n    return sum \/ count\n\n# Create list of numbers\nlst = [30, 28, 40, 10, 0, None, 33, None]\n\n# Print average\nprint(avg(lst))\n\n# Output: 25.5","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to calculate the average of the numbers in a list (not including null values).\n\n### Input:\nAn example list of integers: [30, 28, 40, 10, 0, null, 33, null]\n\n### Output:\n# Calculate the average\ndef avg(lst): \n    sum = 0\n    count = 0\n    for num in lst:\n        if num is not None:\n            sum += num\n            count += 1\n    return sum \/ count\n\n# Create list of numbers\nlst = [30, 28, 40, 10, 0, None, 33, None]\n\n# Print average\nprint(avg(lst))\n\n# Output: 25.5"}
{"instruction":"Create a program in python to identify the the frequency of words in a given string.","input":"string=\"This is a test string to check the frequency of words in the string\"","output":"from collections import Counter\n\ndef word_frequency(sentence):\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Generate a dictionary to store the frequencies\n    freq = dict()\n \n    # Iterate over the words\n    for word in words:\n        if word in freq: \n            freq[word] += 1\n        else: \n            freq[word] = 1\n\n    # Use Counter to find the frequencies of words\n    frequencies = Counter(freq)\n\n    # Print the frequencies of words\n    for word, frequency in frequencies.items():\n        print(word + \": \" + str(frequency)) \n\n# Driver code\nsentence = \"This is a test string to check the frequency of words in the string\"\nword_frequency(sentence)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in python to identify the the frequency of words in a given string.\n\n### Input:\nstring=\"This is a test string to check the frequency of words in the string\"\n\n### Output:\nfrom collections import Counter\n\ndef word_frequency(sentence):\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Generate a dictionary to store the frequencies\n    freq = dict()\n \n    # Iterate over the words\n    for word in words:\n        if word in freq: \n            freq[word] += 1\n        else: \n            freq[word] = 1\n\n    # Use Counter to find the frequencies of words\n    frequencies = Counter(freq)\n\n    # Print the frequencies of words\n    for word, frequency in frequencies.items():\n        print(word + \": \" + str(frequency)) \n\n# Driver code\nsentence = \"This is a test string to check the frequency of words in the string\"\nword_frequency(sentence)"}
{"instruction":"Develop a Python script to automate the web application UI testing.","input":"","output":"import unittest\nfrom selenium import webdriver\n\nclass LoginForm(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n        self.driver.get('http:\/\/example.com\/login')\n\n    def test_login_form(self):\n        username_field = self.driver.find_element_by_name('user[username]')\n        username_field.send_keys('bob')\n        password_field = self.driver.find_element_by_name('user[password]')\n        password_field.send_keys('s3cr3t')\n        password_field.submit()\n\n        # Check that we are now logged in\n        welcome_message = self.driver.find_element_by_xpath('\/\/*[contains(text(), \"Welcome, bob\")]')\n        self.assertTrue(welcome_message)\n\n    def tearDown(self):\n        self.driver.quit\n\nif __name__ == '__main__':\n    unittest.main()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to automate the web application UI testing.\n\n### Input:\n\n\n### Output:\nimport unittest\nfrom selenium import webdriver\n\nclass LoginForm(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n        self.driver.get('http:\/\/example.com\/login')\n\n    def test_login_form(self):\n        username_field = self.driver.find_element_by_name('user[username]')\n        username_field.send_keys('bob')\n        password_field = self.driver.find_element_by_name('user[password]')\n        password_field.send_keys('s3cr3t')\n        password_field.submit()\n\n        # Check that we are now logged in\n        welcome_message = self.driver.find_element_by_xpath('\/\/*[contains(text(), \"Welcome, bob\")]')\n        self.assertTrue(welcome_message)\n\n    def tearDown(self):\n        self.driver.quit\n\nif __name__ == '__main__':\n    unittest.main()"}
{"instruction":"Can you write a Python script to print the first 20 prime numbers?","input":"","output":"# Program to print the first 20 prime numbers\n\ndef is_prime(num):\n\n    # Base case\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n\n    # Iterate from 3 to the sqrt of number\n    i = 3\n    while(i * i <= num):\n        \n        if num % i == 0:\n            return False\n        i = i + 2\n\n    return True\n\n# Print the first 20 prime numbers\nn = 2\ncount = 0\n\nwhile count < 20:\n\n    if is_prime(n):\n        print(n, end=' ', flush=True)\n        count += 1\n    n += 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you write a Python script to print the first 20 prime numbers?\n\n### Input:\n\n\n### Output:\n# Program to print the first 20 prime numbers\n\ndef is_prime(num):\n\n    # Base case\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n\n    # Iterate from 3 to the sqrt of number\n    i = 3\n    while(i * i <= num):\n        \n        if num % i == 0:\n            return False\n        i = i + 2\n\n    return True\n\n# Print the first 20 prime numbers\nn = 2\ncount = 0\n\nwhile count < 20:\n\n    if is_prime(n):\n        print(n, end=' ', flush=True)\n        count += 1\n    n += 1"}
{"instruction":"Write a script in Python which takes a two-dimensional array as input and finds the smallest number in the array.","input":"array = [[2,3,4], [5,6,7], [-1,2,0]]","output":"def find_smallest(array):\n    smallest_item = array[0][0]\n    for row in array:\n        for item in row:\n            if item < smallest_item:\n                smallest_item = item\n    return smallest_item","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script in Python which takes a two-dimensional array as input and finds the smallest number in the array.\n\n### Input:\narray = [[2,3,4], [5,6,7], [-1,2,0]]\n\n### Output:\ndef find_smallest(array):\n    smallest_item = array[0][0]\n    for row in array:\n        for item in row:\n            if item < smallest_item:\n                smallest_item = item\n    return smallest_item"}
{"instruction":"Write a Python program to print all combinations of three numbers from the given list.","input":"num_list = [1, 2, 3, 4]","output":"import itertools \n  \n# initializing list \nnum_list = [1, 2, 3, 4] \n  \n# printing all possible combinations \nresult = itertools.combinations(num_list, 3) \n  \n# printing the result \nprint(\"All possible combinations are : \") \nfor item in result: \n    print(item)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print all combinations of three numbers from the given list.\n\n### Input:\nnum_list = [1, 2, 3, 4]\n\n### Output:\nimport itertools \n  \n# initializing list \nnum_list = [1, 2, 3, 4] \n  \n# printing all possible combinations \nresult = itertools.combinations(num_list, 3) \n  \n# printing the result \nprint(\"All possible combinations are : \") \nfor item in result: \n    print(item)"}
{"instruction":"Create Python code to group all emails with the same subject into one single email.","input":"Not applicable","output":"import email\nfrom collections import defaultdict\n\n# function to group emails by their subject\ndef group_emails(emails):\n    # dictionary to store emails with same subject\n    grouped_emails = defaultdict(list)\n\n    # loop through emails\n    for email in emails:\n        # get subject\n        subject = email.get('Subject', '')\n        # add to dict\n        grouped_emails[subject].append(email)\n\n    # return grouped emails\n    return grouped_emails\n\n# function to merge emails with the same subject into one single email\ndef merge_emails(grouped_emails):\n    merged_emails = []\n\n    # loop through grouped emails\n    for subject, emails in grouped_emails.items():\n        # list to store all email bodies\n        email_bodies = []\n\n        # loop through emails in the group\n        for email in emails:\n            # get email body\n            body = email.get_body()\n            # add it to the list\n            email_bodies.append(body)\n\n        # combine the email bodies\n        combined_body = \"\\n\\n\".join(email_bodies)\n\n        # create new email\n        merged_email = email.Address.new_message(subject, combined_body)\n\n        # add the merged eail to the list\n        merged_emails.append(merged_email)\n\n    # return the merged emails\n    return merged_emails","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate Python code to group all emails with the same subject into one single email.\n\n### Input:\nNot applicable\n\n### Output:\nimport email\nfrom collections import defaultdict\n\n# function to group emails by their subject\ndef group_emails(emails):\n    # dictionary to store emails with same subject\n    grouped_emails = defaultdict(list)\n\n    # loop through emails\n    for email in emails:\n        # get subject\n        subject = email.get('Subject', '')\n        # add to dict\n        grouped_emails[subject].append(email)\n\n    # return grouped emails\n    return grouped_emails\n\n# function to merge emails with the same subject into one single email\ndef merge_emails(grouped_emails):\n    merged_emails = []\n\n    # loop through grouped emails\n    for subject, emails in grouped_emails.items():\n        # list to store all email bodies\n        email_bodies = []\n\n        # loop through emails in the group\n        for email in emails:\n            # get email body\n            body = email.get_body()\n            # add it to the list\n            email_bodies.append(body)\n\n        # combine the email bodies\n        combined_body = \"\\n\\n\".join(email_bodies)\n\n        # create new email\n        merged_email = email.Address.new_message(subject, combined_body)\n\n        # add the merged eail to the list\n        merged_emails.append(merged_email)\n\n    # return the merged emails\n    return merged_emails"}
{"instruction":"Write a Python program to create a contact list application. The program should contain functions for creating a new contact, updating existing contacts, deleting contacts, and searching for contacts.","input":"Not applicable","output":"class ContactList:\n def __init__(self):\n self.contacts = []\n \n def add_contact(self, contact):\n self.contacts.append(contact)\n \n def update_contact(self, contact_id, contact):\n for i, c in enumerate(self.contacts):\n if c.id == contact_id:\n self.contacts[i] = contact\n \n def delete_contact(self, contact_id):\n for i, c in enumerate(self.contacts):\n if c.id == contact_id:\n del self.contacts[i]\n break\n \n def search_contact(self, name):\n result = []\n for c in self.contacts:\n if c.name == name:\n result.append(c)\n return result\n\nclass Contact:\n def __init__(self, id, name, phone_number):\n self.id = id\n self.name = name\n self.phone_number = phone_number\n \n contact_list = ContactList()\n \n #add contact\n contact_list.add_contact(Contact(1, \"John Smith\", \"+1-202-555-0175\"))\n \n #update contact\n contact_list.update_contact(1, Contact(1, \"John Doe\", \"+1-202-555-0175\"))\n \n #delete contact\n contact_list.delete_contact(1)\n \n #search contact\n result = contact_list.search_contact(\"John Doe\")\n if result:\n print(result[0].phone_number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a contact list application. The program should contain functions for creating a new contact, updating existing contacts, deleting contacts, and searching for contacts.\n\n### Input:\nNot applicable\n\n### Output:\nclass ContactList:\n def __init__(self):\n self.contacts = []\n \n def add_contact(self, contact):\n self.contacts.append(contact)\n \n def update_contact(self, contact_id, contact):\n for i, c in enumerate(self.contacts):\n if c.id == contact_id:\n self.contacts[i] = contact\n \n def delete_contact(self, contact_id):\n for i, c in enumerate(self.contacts):\n if c.id == contact_id:\n del self.contacts[i]\n break\n \n def search_contact(self, name):\n result = []\n for c in self.contacts:\n if c.name == name:\n result.append(c)\n return result\n\nclass Contact:\n def __init__(self, id, name, phone_number):\n self.id = id\n self.name = name\n self.phone_number = phone_number\n \n contact_list = ContactList()\n \n #add contact\n contact_list.add_contact(Contact(1, \"John Smith\", \"+1-202-555-0175\"))\n \n #update contact\n contact_list.update_contact(1, Contact(1, \"John Doe\", \"+1-202-555-0175\"))\n \n #delete contact\n contact_list.delete_contact(1)\n \n #search contact\n result = contact_list.search_contact(\"John Doe\")\n if result:\n print(result[0].phone_number)"}
{"instruction":"Develop a Python function to calculate the area of a rectangle given its length and width.","input":"","output":"def calculate_rectangle_area(length, width):\n    return length * width","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function to calculate the area of a rectangle given its length and width.\n\n### Input:\n\n\n### Output:\ndef calculate_rectangle_area(length, width):\n    return length * width"}
{"instruction":"Generate a program for searching for a pattern in a string using Python and the Boyer Moore pattern matching algorithm.","input":"Input string: \"Hello World!\" \nPattern to search for: \"World\"","output":"\"\"\"\nSearch for a pattern in a string using the Boyer Moore pattern matching algorithm\n\"\"\"\n\ndef boyer_moore(text, pattern):\n    # Initialize the index buffer and the location of the target pattern\n    index_buffer = {}\n    index = -1\n\n    # Preprocess the patterns\n    for i in range(len(pattern) - 1, -1, -1):\n        if pattern[i] in index_buffer:\n            index_buffer[pattern[i]].append(i)\n        else:\n            index_buffer[pattern[i]] = [i]\n\n    # Search through the text until the target pattern is found\n    while index == -1:\n        for i in range(0, len(pattern)):\n            if pattern[i] != text[i]:\n                if pattern[i] in index_buffer:\n                    try:\n                        ind = index_buffer[pattern[i]][-1]\n                    except:\n                        return -1\n                    i = i - (ind - i)\n                else:\n                    i = i + len(pattern)\n        \n        if pattern == text[0:len(pattern)]:\n            index = 0\n        else:\n            text = text[1:]\n    \n    return index\n\n# Test\ntext = \"Hello World!\"\npattern = \"World\"\n    \nindex = boyer_moore(text, pattern)\n\nif index >= 0:\n    print(\"Pattern found at index \" + str(index))\nelse:\n    print(\"Pattern not found\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program for searching for a pattern in a string using Python and the Boyer Moore pattern matching algorithm.\n\n### Input:\nInput string: \"Hello World!\" \nPattern to search for: \"World\"\n\n### Output:\n\"\"\"\nSearch for a pattern in a string using the Boyer Moore pattern matching algorithm\n\"\"\"\n\ndef boyer_moore(text, pattern):\n    # Initialize the index buffer and the location of the target pattern\n    index_buffer = {}\n    index = -1\n\n    # Preprocess the patterns\n    for i in range(len(pattern) - 1, -1, -1):\n        if pattern[i] in index_buffer:\n            index_buffer[pattern[i]].append(i)\n        else:\n            index_buffer[pattern[i]] = [i]\n\n    # Search through the text until the target pattern is found\n    while index == -1:\n        for i in range(0, len(pattern)):\n            if pattern[i] != text[i]:\n                if pattern[i] in index_buffer:\n                    try:\n                        ind = index_buffer[pattern[i]][-1]\n                    except:\n                        return -1\n                    i = i - (ind - i)\n                else:\n                    i = i + len(pattern)\n        \n        if pattern == text[0:len(pattern)]:\n            index = 0\n        else:\n            text = text[1:]\n    \n    return index\n\n# Test\ntext = \"Hello World!\"\npattern = \"World\"\n    \nindex = boyer_moore(text, pattern)\n\nif index >= 0:\n    print(\"Pattern found at index \" + str(index))\nelse:\n    print(\"Pattern not found\")"}
{"instruction":"Construct a Python program that takes in two numbers from the user and swap them.","input":"","output":"def swap(x, y):\n    x, y = y, x\n    return x, y\n\nx = int(input(\"Enter x: \"))\ny = int(input(\"Enter y: \"))\nx, y = swap(x, y)\nprint(\"x:\", x, \"y:\", y) #output: x: 4  y: 8","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program that takes in two numbers from the user and swap them.\n\n### Input:\n\n\n### Output:\ndef swap(x, y):\n    x, y = y, x\n    return x, y\n\nx = int(input(\"Enter x: \"))\ny = int(input(\"Enter y: \"))\nx, y = swap(x, y)\nprint(\"x:\", x, \"y:\", y) #output: x: 4  y: 8"}
{"instruction":"Generate a class in Python for a Simple Moving Average (SMA) calculator with a constructor that takes the window size and a method named calculate to calculate the SMA from a given list of values.","input":"list = [10, 20, 30, 40, 50]","output":"class SMA:\n    def __init__(self, window_size):\n        self.window_size = window_size\n        self.window = []\n\n    def calculate(self, values):\n        window = []\n        sma = 0\n        for value in values:\n            if len(self.window) < self.window_size:\n                self.window.append(value)\n            else:\n                self.window.pop(0)\n                self.window.append(value)\n            sma += value\n        return sma \/ self.window_size\n\nlist = [10, 20, 30, 40, 50]\nsma = SMA(3)\n\nprint(sma.calculate(list)) # Output: 30","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a class in Python for a Simple Moving Average (SMA) calculator with a constructor that takes the window size and a method named calculate to calculate the SMA from a given list of values.\n\n### Input:\nlist = [10, 20, 30, 40, 50]\n\n### Output:\nclass SMA:\n    def __init__(self, window_size):\n        self.window_size = window_size\n        self.window = []\n\n    def calculate(self, values):\n        window = []\n        sma = 0\n        for value in values:\n            if len(self.window) < self.window_size:\n                self.window.append(value)\n            else:\n                self.window.pop(0)\n                self.window.append(value)\n            sma += value\n        return sma \/ self.window_size\n\nlist = [10, 20, 30, 40, 50]\nsma = SMA(3)\n\nprint(sma.calculate(list)) # Output: 30"}
{"instruction":"Create a web scraper using Python and BeautifulSoup to collect data from a given table on a website.","input":"Assume the table contains a list of products and their prices","output":"import requests\nfrom bs4 import BeautifulSoup\n\n# URL\nurl = \"https:\/\/www.example.com\/table-with-products\"\n\n# Get the page content\npage = requests.get(url)\n\n# Parse the page and extract the table\nsoup = BeautifulSoup(page.content, 'html.parser')\ntable = soup.find(\"table\")\n\n# Loop through each row of the table\nrows = table.find_all(\"tr\")\nfor row in rows:\n    # Extract table header and its content\n    header = row.find(\"th\")\n    cells = row.find_all(\"td\")\n\n    # Extract product name\n    product_name = header.text if header else ''\n\n    # Extract product price\n    product_price = cells[0].text if cells else ''\n    \n    # Print the collected data\n    print(f'{product_name}: {product_price}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper using Python and BeautifulSoup to collect data from a given table on a website.\n\n### Input:\nAssume the table contains a list of products and their prices\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# URL\nurl = \"https:\/\/www.example.com\/table-with-products\"\n\n# Get the page content\npage = requests.get(url)\n\n# Parse the page and extract the table\nsoup = BeautifulSoup(page.content, 'html.parser')\ntable = soup.find(\"table\")\n\n# Loop through each row of the table\nrows = table.find_all(\"tr\")\nfor row in rows:\n    # Extract table header and its content\n    header = row.find(\"th\")\n    cells = row.find_all(\"td\")\n\n    # Extract product name\n    product_name = header.text if header else ''\n\n    # Extract product price\n    product_price = cells[0].text if cells else ''\n    \n    # Print the collected data\n    print(f'{product_name}: {product_price}')"}
{"instruction":"Create a Python program to find the most frequent words in a given text. The program should return the top 10 words with their associated frequencies.","input":"specific text = \"This is a test. We are testing the frequency of certain words in this sentence\"","output":"import collections\n \ntext = \"This is a test. We are testing the frequency of certain words in this sentence\"\n\n# Split string into list of words\nwords = text.split()\n\n# Create dictionary to store frequency of words\nword_freq = {} \n\n# Loop through words to create dictionary\nfor word in words:\n if word not in word_freq.keys():\n word_freq[word] = 1\n else:\n word_freq[word] += 1\n\n# Sort dictionary by frequency in descending order\nwords_sorted = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)\n \n# Print the top 10 most frequent words\nprint(\"Most frequent words and their frequencies:\")\nfor word, freq in words_sorted[:10]:\n print(word, freq)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the most frequent words in a given text. The program should return the top 10 words with their associated frequencies.\n\n### Input:\nspecific text = \"This is a test. We are testing the frequency of certain words in this sentence\"\n\n### Output:\nimport collections\n \ntext = \"This is a test. We are testing the frequency of certain words in this sentence\"\n\n# Split string into list of words\nwords = text.split()\n\n# Create dictionary to store frequency of words\nword_freq = {} \n\n# Loop through words to create dictionary\nfor word in words:\n if word not in word_freq.keys():\n word_freq[word] = 1\n else:\n word_freq[word] += 1\n\n# Sort dictionary by frequency in descending order\nwords_sorted = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)\n \n# Print the top 10 most frequent words\nprint(\"Most frequent words and their frequencies:\")\nfor word, freq in words_sorted[:10]:\n print(word, freq)"}
{"instruction":"Generate a controller in Python Flask that returns a list of data stored in a database.","input":"Example Database table:\n\nTable name: users\n\n| id | name  | email             |\n|----|-------|-------------------|\n| 1  | John  | john@example.com  |\n| 2  | Kate  | kate@example.com  |\n| 3  | Bob   | bob@example.com   |","output":"from flask import Flask, jsonify\nimport sqlalchemy as sql\n\napp = Flask(__name__)\n\nengine = sql.create_engine(\"sqlite:\/\/\/my_database.db\")\n\n@app.route('\/users')\ndef list_users():\n conn = engine.connect()\n query = \"SELECT id, name, email FROM users\"\n result = conn.execute(query)\n users = [dict(row.items()) for row in result]\n return jsonify(users)\n \nif __name__ == '__main__':\n app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a controller in Python Flask that returns a list of data stored in a database.\n\n### Input:\nExample Database table:\n\nTable name: users\n\n| id | name  | email             |\n|----|-------|-------------------|\n| 1  | John  | john@example.com  |\n| 2  | Kate  | kate@example.com  |\n| 3  | Bob   | bob@example.com   |\n\n### Output:\nfrom flask import Flask, jsonify\nimport sqlalchemy as sql\n\napp = Flask(__name__)\n\nengine = sql.create_engine(\"sqlite:\/\/\/my_database.db\")\n\n@app.route('\/users')\ndef list_users():\n conn = engine.connect()\n query = \"SELECT id, name, email FROM users\"\n result = conn.execute(query)\n users = [dict(row.items()) for row in result]\n return jsonify(users)\n \nif __name__ == '__main__':\n app.run()"}
{"instruction":"Develop an algorithm in Python for reversing a given linked list.","input":"Linked List: 3 -> 5 -> 7 -> 8","output":"def reverseLinkedList(head):\n    curr = head \n    prev = None\n    while (curr != None): \n        temp = curr.next\n        curr.next = prev \n        prev = curr \n        curr = temp\n    head = prev\n    return head\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# Create a Linked list \nhead1 = Node(3)\nhead1.next = Node(5)\nhead1.next.next = Node(7)\nhead1.next.next.next = Node(8)\n\nhead1 = reverseLinkedList(head1)\n\ntemp = head1\nwhile(temp != None):\n    print temp.data,\n    temp = temp.next","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python for reversing a given linked list.\n\n### Input:\nLinked List: 3 -> 5 -> 7 -> 8\n\n### Output:\ndef reverseLinkedList(head):\n    curr = head \n    prev = None\n    while (curr != None): \n        temp = curr.next\n        curr.next = prev \n        prev = curr \n        curr = temp\n    head = prev\n    return head\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# Create a Linked list \nhead1 = Node(3)\nhead1.next = Node(5)\nhead1.next.next = Node(7)\nhead1.next.next.next = Node(8)\n\nhead1 = reverseLinkedList(head1)\n\ntemp = head1\nwhile(temp != None):\n    print temp.data,\n    temp = temp.next"}
{"instruction":"Port a Java code snippet to Python 3.","input":"public class Foo {\n  public int foo( int a, int b ) {\n    return a + b;\n  }\n}","output":"def foo(a, b):\n return a + b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPort a Java code snippet to Python 3.\n\n### Input:\npublic class Foo {\n  public int foo( int a, int b ) {\n    return a + b;\n  }\n}\n\n### Output:\ndef foo(a, b):\n return a + b"}
{"instruction":"Use Python to modify the list below by swapping the first and last elements.","input":"[3, 6, 8, 5, 4]","output":"[4, 6, 8, 5, 3]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse Python to modify the list below by swapping the first and last elements.\n\n### Input:\n[3, 6, 8, 5, 4]\n\n### Output:\n[4, 6, 8, 5, 3]"}
{"instruction":"Write a Python program to display an interactive bar chart of salary data for the last 10 years.","input":"salaries = [\n {'year':2010, 'salary': 45000},\n {'year':2011, 'salary': 50000},\n {'year':2012, 'salary': 55000},\n {'year':2013, 'salary': 60000},\n {'year':2014, 'salary': 65000},\n {'year':2015, 'salary': 70000},\n {'year':2016, 'salary': 75000},\n {'year':2017, 'salary': 80000},\n {'year':2018, 'salary': 85000},\n {'year':2019, 'salary': 95000},\n]","output":"import plotly.express as px\nimport pandas as pd\n\ndf = pd.DataFrame(salaries)\nfig = px.bar(df, x='year', y='salary',\n hover_data=['salary'], color='salary',\n labels={'salary':'Yearly Salary'}, height=400)\n\nfig.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to display an interactive bar chart of salary data for the last 10 years.\n\n### Input:\nsalaries = [\n {'year':2010, 'salary': 45000},\n {'year':2011, 'salary': 50000},\n {'year':2012, 'salary': 55000},\n {'year':2013, 'salary': 60000},\n {'year':2014, 'salary': 65000},\n {'year':2015, 'salary': 70000},\n {'year':2016, 'salary': 75000},\n {'year':2017, 'salary': 80000},\n {'year':2018, 'salary': 85000},\n {'year':2019, 'salary': 95000},\n]\n\n### Output:\nimport plotly.express as px\nimport pandas as pd\n\ndf = pd.DataFrame(salaries)\nfig = px.bar(df, x='year', y='salary',\n hover_data=['salary'], color='salary',\n labels={'salary':'Yearly Salary'}, height=400)\n\nfig.show()"}
{"instruction":"Develop a RESTful web service in Python which returns the data provided in the given URL.","input":"URL: https:\/\/example.com\/dataset.json","output":"import flask\nfrom flask import Flask\nimport requests\n\napp = Flask(__name__)\n\n@app.route('\/data', methods=[\"GET\"])\ndef data():\n    r = requests.get('https:\/\/example.com\/dataset.json')\n    return flask.jsonify(r.json())\n\nif __name__ == '__main__':\n    app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a RESTful web service in Python which returns the data provided in the given URL.\n\n### Input:\nURL: https:\/\/example.com\/dataset.json\n\n### Output:\nimport flask\nfrom flask import Flask\nimport requests\n\napp = Flask(__name__)\n\n@app.route('\/data', methods=[\"GET\"])\ndef data():\n    r = requests.get('https:\/\/example.com\/dataset.json')\n    return flask.jsonify(r.json())\n\nif __name__ == '__main__':\n    app.run()"}
{"instruction":"Create a machine learning model in Python to predict the stock price of a company given its historical data.","input":"Not applicable","output":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import LSTM, Dense\n\n# Load and prepare data\ndata = pd.read_csv('stock-data.csv')\nclose = data['close'].values\n# Normalize data\nscaler = MinMaxScaler(feature_range=(0, 1))\nclose = close.reshape(-1, 1)\nclose = scaler.fit_transform(close)\n\n# Convert data into shape for model input\nX = []\ny = []\nfor i in range(60, close.shape[0]):\n X.append(close[i-60:i])\n y.append(close[i])\nX = np.array(X)\ny = np.array(y)\n\n# Create model\nmodel = Sequential()\nmodel.add(LSTM(50, return_sequences=True, input_shape=(X.shape[1], 1)))\nmodel.add(LSTM(50, return_sequences=False))\nmodel.add(Dense(25))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error', optimizer='adam')\n\n# Train model\nmodel.fit(X, y, batch_size=1, epochs=1)\n\n# Predicts stock price\nx_test = close[-60:]\nx_test = x_test.reshape(-1, 1)\nx_test = scaler.transform(x_test)\nx_test = np.array(x_test)\nx_test_predict = np.array([x_test])\nprice = model.predict(x_test_predict)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python to predict the stock price of a company given its historical data.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import LSTM, Dense\n\n# Load and prepare data\ndata = pd.read_csv('stock-data.csv')\nclose = data['close'].values\n# Normalize data\nscaler = MinMaxScaler(feature_range=(0, 1))\nclose = close.reshape(-1, 1)\nclose = scaler.fit_transform(close)\n\n# Convert data into shape for model input\nX = []\ny = []\nfor i in range(60, close.shape[0]):\n X.append(close[i-60:i])\n y.append(close[i])\nX = np.array(X)\ny = np.array(y)\n\n# Create model\nmodel = Sequential()\nmodel.add(LSTM(50, return_sequences=True, input_shape=(X.shape[1], 1)))\nmodel.add(LSTM(50, return_sequences=False))\nmodel.add(Dense(25))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error', optimizer='adam')\n\n# Train model\nmodel.fit(X, y, batch_size=1, epochs=1)\n\n# Predicts stock price\nx_test = close[-60:]\nx_test = x_test.reshape(-1, 1)\nx_test = scaler.transform(x_test)\nx_test = np.array(x_test)\nx_test_predict = np.array([x_test])\nprice = model.predict(x_test_predict)"}
{"instruction":"Create a chatbot in Python for customer service.","input":"","output":"import nltk\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import wordnet\n\n# Define a function to get the simple POS tag\ndef get_simple_pos(tag):\n \n    if tag.startswith('J'):\n        return wordnet.ADJ\n    elif tag.startswith('V'):\n        return wordnet.VERB\n    elif tag.startswith('N'):\n        return wordnet.NOUN\n    elif tag.startswith('R'):\n        return wordnet.ADV\n    else:\n        return wordnet.NOUN\n\n# Create a lemmatizer object \nlemmatizer = WordNetLemmatizer()\n\ndef lemmatize_sentence(sentence):\n    #tokenize the sentence and find the POS tag for each token\n    nltk_tagged = nltk.pos_tag(nltk.word_tokenize(sentence))  \n    #tuple of (token, simple POS tag)\n    nltk_tagged = [(word, get_simple_pos(tag)) for word, tag in nltk_tagged]\n    lemmatized_sentence = []\n    for word, tag in nltk_tagged:\n        lemmatized_sentence.append(lemmatizer.lemmatize(word, tag))\n    return \" \".join(lemmatized_sentence)\n\n# Create the chatbot\ndef create_bot():\n    print(\"Hello! I am a customer service chatbot. How can I help you?\")\n    response = input()\n    response = lemmatize_sentence(response)\n    # Perform actions based on the response\n    if response == \"quit\":\n        return\n    else:\n        print(\"Thank you for your question. I will get back to you shortly with an answer.\")\n        create_bot()\n\ncreate_bot()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a chatbot in Python for customer service.\n\n### Input:\n\n\n### Output:\nimport nltk\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import wordnet\n\n# Define a function to get the simple POS tag\ndef get_simple_pos(tag):\n \n    if tag.startswith('J'):\n        return wordnet.ADJ\n    elif tag.startswith('V'):\n        return wordnet.VERB\n    elif tag.startswith('N'):\n        return wordnet.NOUN\n    elif tag.startswith('R'):\n        return wordnet.ADV\n    else:\n        return wordnet.NOUN\n\n# Create a lemmatizer object \nlemmatizer = WordNetLemmatizer()\n\ndef lemmatize_sentence(sentence):\n    #tokenize the sentence and find the POS tag for each token\n    nltk_tagged = nltk.pos_tag(nltk.word_tokenize(sentence))  \n    #tuple of (token, simple POS tag)\n    nltk_tagged = [(word, get_simple_pos(tag)) for word, tag in nltk_tagged]\n    lemmatized_sentence = []\n    for word, tag in nltk_tagged:\n        lemmatized_sentence.append(lemmatizer.lemmatize(word, tag))\n    return \" \".join(lemmatized_sentence)\n\n# Create the chatbot\ndef create_bot():\n    print(\"Hello! I am a customer service chatbot. How can I help you?\")\n    response = input()\n    response = lemmatize_sentence(response)\n    # Perform actions based on the response\n    if response == \"quit\":\n        return\n    else:\n        print(\"Thank you for your question. I will get back to you shortly with an answer.\")\n        create_bot()\n\ncreate_bot()"}
{"instruction":"Implement a basic spell checker in Python that takes as input a given text and finds all the misspelled words.","input":"","output":"from spellchecker import SpellChecker\n\nspell = SpellChecker() \n\n# Find all the possible words that are misspelled\nmisspelled = spell.unknown(text.split())\n\n# Print out each misspelled word and its correction\nfor word in misspelled:\n    print(f'Incorrect word: {word}\\tCorrection: {spell.correction(word)}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a basic spell checker in Python that takes as input a given text and finds all the misspelled words.\n\n### Input:\n\n\n### Output:\nfrom spellchecker import SpellChecker\n\nspell = SpellChecker() \n\n# Find all the possible words that are misspelled\nmisspelled = spell.unknown(text.split())\n\n# Print out each misspelled word and its correction\nfor word in misspelled:\n    print(f'Incorrect word: {word}\\tCorrection: {spell.correction(word)}')"}
{"instruction":"Create a Python program to identify whether a number is prime or not.","input":"15","output":"def is_prime(num):\n    if num > 1:\n        for n in range(2, num):\n            if (num % n) == 0:\n                return False\n        return True\n    else:\n        return False\n\nnum = int(input(\"Enter a number: \"))\n \nif is_prime(num):\n    print(num, \"is a Prime number\")\nelse:\n    print(num, \"is not a Prime number\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to identify whether a number is prime or not.\n\n### Input:\n15\n\n### Output:\ndef is_prime(num):\n    if num > 1:\n        for n in range(2, num):\n            if (num % n) == 0:\n                return False\n        return True\n    else:\n        return False\n\nnum = int(input(\"Enter a number: \"))\n \nif is_prime(num):\n    print(num, \"is a Prime number\")\nelse:\n    print(num, \"is not a Prime number\")"}
{"instruction":"Create a Python program that uses the NumPy library to generate a series of random numbers.","input":"Not applicable","output":"import numpy as np\n\n# Generate random integers within a specified range\nx = np.random.randint(0, 10, size=(3, 3))\n\n# Generate random floats within a specified range\ny = np.random.uniform(low=0.0, high=10.0, size=(3, 3))\n\n# Generate random numbers with numpy\nz = np.random.rand(3,3)\n\nprint('Random integers:', x, '\\n') \nprint('Random floats:', y, '\\n') \nprint('Random numbers:', z)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses the NumPy library to generate a series of random numbers.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\n\n# Generate random integers within a specified range\nx = np.random.randint(0, 10, size=(3, 3))\n\n# Generate random floats within a specified range\ny = np.random.uniform(low=0.0, high=10.0, size=(3, 3))\n\n# Generate random numbers with numpy\nz = np.random.rand(3,3)\n\nprint('Random integers:', x, '\\n') \nprint('Random floats:', y, '\\n') \nprint('Random numbers:', z)"}
{"instruction":"Create a program in Python to find the maximum value from a dictionary.","input":"my_dict = {'data1':100,'data2':-54,'data3':247}","output":"# Get the maximum value in the dictionary\nmax_value = max(my_dict.values())\n\n# Print the maximum value\nprint (max_value)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to find the maximum value from a dictionary.\n\n### Input:\nmy_dict = {'data1':100,'data2':-54,'data3':247}\n\n### Output:\n# Get the maximum value in the dictionary\nmax_value = max(my_dict.values())\n\n# Print the maximum value\nprint (max_value)"}
{"instruction":"Write a Python program to print all unique values in a dictionary.","input":"sample_dict = {'key1': 1, 'key2': 2, 'key3': 3, 'key4': 1}","output":"def printUniqueValues(dictionary):\n    unique_values = set()\n\n    for key in dictionary:\n        if dictionary[key] not in unique_values:\n            unique_values.add(dictionary[key])\n\n    print(unique_values)\n\nprintUniqueValues(sample_dict)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print all unique values in a dictionary.\n\n### Input:\nsample_dict = {'key1': 1, 'key2': 2, 'key3': 3, 'key4': 1}\n\n### Output:\ndef printUniqueValues(dictionary):\n    unique_values = set()\n\n    for key in dictionary:\n        if dictionary[key] not in unique_values:\n            unique_values.add(dictionary[key])\n\n    print(unique_values)\n\nprintUniqueValues(sample_dict)"}
{"instruction":"Create a Python script to generate a given number of random numbers within a particular range","input":"A range of 0 to 100 and 5 numbers","output":"# Import library\nimport random\n\n# Generate random numbers\nrandom_nums = []\n\nfor i in range(5):\n    random_nums.append(random.randint(0,100))\n\n# Print random numbers\nprint(random_nums)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate a given number of random numbers within a particular range\n\n### Input:\nA range of 0 to 100 and 5 numbers\n\n### Output:\n# Import library\nimport random\n\n# Generate random numbers\nrandom_nums = []\n\nfor i in range(5):\n    random_nums.append(random.randint(0,100))\n\n# Print random numbers\nprint(random_nums)"}
{"instruction":"In Python, create a method that can take two integers and return their sum.","input":"3, 8","output":"def sum_ints(int1, int2):\n    return int1 + int2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, create a method that can take two integers and return their sum.\n\n### Input:\n3, 8\n\n### Output:\ndef sum_ints(int1, int2):\n    return int1 + int2"}
{"instruction":"Create a linear regression model in Python to predict the number of visits to a particular website.","input":"","output":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n# input data\nX = np.array([[1, 1], [2, 2], [3, 3], [4, 4]])\ny = np.array([5, 10, 15, 20])\n\n# create and fit the model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# make a prediction\ny_pred = model.predict([[5, 5]])\nprint(round(y_pred[0], 2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a linear regression model in Python to predict the number of visits to a particular website.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n# input data\nX = np.array([[1, 1], [2, 2], [3, 3], [4, 4]])\ny = np.array([5, 10, 15, 20])\n\n# create and fit the model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# make a prediction\ny_pred = model.predict([[5, 5]])\nprint(round(y_pred[0], 2))"}
{"instruction":"Generate a Python program to create a dictionary from two given lists.","input":"list1 = [\"apple\", \"banana\", \"orange\"]\nlist2 = [\"fruit\", \"fruit\", \"fruit\"]","output":"list1 = [\"apple\", \"banana\", \"orange\"]\nlist2 = [\"fruit\", \"fruit\", \"fruit\"] \n\ndictionary = dict(zip(list1, list2))\n\nprint(dictionary)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to create a dictionary from two given lists.\n\n### Input:\nlist1 = [\"apple\", \"banana\", \"orange\"]\nlist2 = [\"fruit\", \"fruit\", \"fruit\"]\n\n### Output:\nlist1 = [\"apple\", \"banana\", \"orange\"]\nlist2 = [\"fruit\", \"fruit\", \"fruit\"] \n\ndictionary = dict(zip(list1, list2))\n\nprint(dictionary)"}
{"instruction":"The given code is a Python script for a malware detection engine. To use the engine, follow the instructions below:\n\n1. Initialize the plugin engine by calling the `init` method with the path to the plugin engine and the verbose flag as parameters.\n2. Call the `scan` method with the file handle, filename, file format, and filename_ex as parameters to scan for malware.\n3. If malware is detected, call the `disinfect` method with the filename and malware ID as parameters to remove the malware.\n4. When finished, call the `uninit` method to close the plugin engine.\n\nNote: Before using the engine, make sure to import the necessary modules and dependencies.","input":"","output":"# -*- coding:utf-8 -*-\n# Author: Kei Choi(hanul93@gmail.com)\n\n\nimport os\nimport re\nimport kernel\nimport kavutil\nimport cryptolib\n\n\n# -------------------------------------------------------------------------\n# KavMain \ud074\ub798\uc2a4\n# -------------------------------------------------------------------------\nclass KavMain:\n    # ---------------------------------------------------------------------\n    # init(self, plugins_path)\n    # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4.\n    # \uc778\ub825\uac12 : plugins_path - \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4\uc758 \uc704\uce58\n    #         verbose      - \ub514\ubc84\uadf8 \ubaa8\ub4dc (True or False)\n    # \ub9ac\ud134\uac12 : 0 - \uc131\uacf5, 0 \uc774\uc678\uc758 \uac12 - \uc2e4\ud328\n    # ---------------------------------------------------------------------\n    def init(self, plugins_path, verbose=False):  # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4 \ucd08\uae30\ud654\n        pat = r'POST \/cdn-cgi\/\\x00\\x00 HTTP\/1.1\\r\\nUser-Agent: \\x00\\r\\nHost:' + \\\n              r'[\\d\\D]+?GET\\x00+\/\\x00+Cookie:[\\d\\D]+?http[\\d\\D]+?url=[\\d\\D]+?POST'\n        self.p_linux_mirai = re.compile(pat)\n\n        # \ubcc0\uc885 \ubc14\uc774\ub7ec\uc2a4 \ud328\ud134\n        self.mirai_a_strings = [\n            'POST \/cdn-cgi\/',\n            'HTTP\/1.1\\r\\nUser-Agent: ',\n            'Host:',\n            'GET',\n            'Cookie:',\n            'http',\n            'url=',\n            'proc\/net\/tcp'\n        ]\n\n        self.aho_mirai_a = kavutil.AhoCorasick()\n        self.aho_mirai_a.make_tree(self.mirai_a_strings)\n        return 0  # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4 \ucd08\uae30\ud654 \uc131\uacf5\n\n    # ---------------------------------------------------------------------\n    # uninit(self)\n    # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4\uc744 \uc885\ub8cc\ud55c\ub2e4.\n    # \ub9ac\ud134\uac12 : 0 - \uc131\uacf5, 0 \uc774\uc678\uc758 \uac12 - \uc2e4\ud328\n    # ---------------------------------------------------------------------\n    def uninit(self):  # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4 \uc885\ub8cc\n        return 0  # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4 \uc885\ub8cc \uc131\uacf5\n\n    # ---------------------------------------------------------------------\n    # getinfo(self)\n    # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4\uc758 \uc8fc\uc694 \uc815\ubcf4\ub97c \uc54c\ub824\uc900\ub2e4. (\uc81c\uc791\uc790, \ubc84\uc804, ...)\n    # \ub9ac\ud134\uac12 : \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4 \uc815\ubcf4\n    # ---------------------------------------------------------------------\n    def getinfo(self):  # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4\uc758 \uc8fc\uc694 \uc815\ubcf4\n        info = dict()  # \uc0ac\uc804\ud615 \ubcc0\uc218 \uc120\uc5b8\n\n        info['author'] = 'Kei Choi'  # \uc81c\uc791\uc790\n        info['version'] = '1.1'  # \ubc84\uc804\n        info['title'] = 'eMalware Engine'  # \uc5d4\uc9c4 \uc124\uba85\n        info['kmd_name'] = 'emalware'  # \uc5d4\uc9c4 \ud30c\uc77c \uc774\ub984\n        info['sig_num'] = kavutil.handle_pattern_md5.get_sig_num('emalware') + 2   # \uc9c4\ub2e8\/\uce58\ub8cc \uac00\ub2a5\ud55c \uc545\uc131\ucf54\ub4dc \uc218\n\n        return info\n\n    # ---------------------------------------------------------------------\n    # listvirus(self)\n    # \uc9c4\ub2e8\/\uce58\ub8cc \uac00\ub2a5\ud55c \uc545\uc131\ucf54\ub4dc\uc758 \ub9ac\uc2a4\ud2b8\ub97c \uc54c\ub824\uc900\ub2e4.\n    # \ub9ac\ud134\uac12 : \uc545\uc131\ucf54\ub4dc \ub9ac\uc2a4\ud2b8\n    # ---------------------------------------------------------------------\n    def listvirus(self):  # \uc9c4\ub2e8 \uac00\ub2a5\ud55c \uc545\uc131\ucf54\ub4dc \ub9ac\uc2a4\ud2b8\n        vlist = kavutil.handle_pattern_md5.get_sig_vlist('emalware')\n        vlist.append('Backdoor.Linux.Mirai.a.gen')\n        vlist = list(set(vlist))\n        vlist.sort()\n\n        vlists = []\n        for vname in vlist:\n            vlists.append(kavutil.normal_vname(vname))\n\n        vlists.append(kavutil.normal_vname('<n>AdWare.Win32.Sokuxuan.gen'))\n\n        return vlists\n\n    # ---------------------------------------------------------------------\n    # scan(self, filehandle, filename, fileformat)\n    # \uc545\uc131\ucf54\ub4dc\ub97c \uac80\uc0ac\ud55c\ub2e4.\n    # \uc785\ub825\uac12 : filehandle  - \ud30c\uc77c \ud578\ub4e4\n    #         filename    - \ud30c\uc77c \uc774\ub984\n    #         fileformat  - \ud30c\uc77c \ud3ec\ub9f7\n    #         filename_ex - \ud30c\uc77c \uc774\ub984 (\uc555\ucd95 \ub0b4\ubd80 \ud30c\uc77c \uc774\ub984)\n    # \ub9ac\ud134\uac12 : (\uc545\uc131\ucf54\ub4dc \ubc1c\uacac \uc5ec\ubd80, \uc545\uc131\ucf54\ub4dc \uc774\ub984, \uc545\uc131\ucf54\ub4dc ID) \ub4f1\ub4f1\n    # ---------------------------------------------------------------------\n    def scan(self, filehandle, filename, fileformat, filename_ex):  # \uc545\uc131\ucf54\ub4dc \uac80\uc0ac\n        try:\n            mm = filehandle\n\n            # \ubbf8\ub9ac \ubd84\uc11d\ub41c \ud30c\uc77c \ud3ec\ub9f7\uc911\uc5d0 PE \ud3ec\ub9f7\uc774 \uc788\ub294\uac00?\n            if 'ff_pe' in fileformat:\n                ff = fileformat['ff_pe']\n\n                # case 1 : \uc139\uc158 \uc804\uccb4\ub97c hash\ub85c \uac80\uc0ac\n                for idx, section in enumerate(ff['pe']['Sections']):\n                    # if (section['Characteristics'] & 0x20000000) == 0x20000000:  # \uc2e4\ud589 \uc18d\uc131?\n                    # print section['Name'], hex(section['SizeRawData'])\n                    fsize = section['SizeRawData']\n                    if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize):\n                        foff = section['PointerRawData']\n                        fmd5 = cryptolib.md5(mm[foff:foff+fsize])\n                        # print fsize, fmd5\n                        vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5)\n                        if vname:\n                            vname = kavutil.normal_vname(vname)\n                            return True, vname, 0, kernel.INFECTED\n\n                # case 2. \ub9c8\uc9c0\ub9c9 \uc139\uc158\uc5d0 \uc2e4\ud589 \ud30c\uc77c \uc874\uc7ac\n                if len(ff['pe']['Sections']):\n                    # \ub9c8\uc9c0\ub9c9 \uc139\uc158\n                    sec = ff['pe']['Sections'][-1]\n                    off = sec['PointerRawData']\n                    size = sec['SizeRawData']\n\n                    # \uc2e4\ud589 \ud30c\uc77c\uc774 \uc874\uc7ac\ud558\ub294\uac00?\n                    exe_offs = [m.start() for m in re.finditer('MZ', mm[off:off+size])]\n\n                    for exe_pos in exe_offs:\n                        fsize = 0x1d5\n                        if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize):\n                            fmd5 = cryptolib.md5(mm[off + exe_pos:off + exe_pos + fsize])\n                            # print fsize, fmd5\n                            vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5)\n                            if vname:\n                                # return True, vname, 0, kernel.INFECTED\n                                idx = len(ff['pe']['Sections']) - 1\n                                vname = kavutil.normal_vname(vname)\n                                return True, vname, (0x80000000 + idx), kernel.INFECTED\n\n                # case 3. pdb\ub97c \uc774\uc6a9\ud574\uc11c \uc545\uc131\ucf54\ub4dc \uac80\uc0ac\n                if 'PDB_Name' in ff['pe']:\n                    pdb_sigs = {\n                        ':\\\\pz_git\\\\bin\\\\': '<n>AdWare.Win32.Sokuxuan.gen',\n                        ':\\\\CODE\\\\vitruvian\\\\': '<n>AdWare.Win32.Vitruvian.gen',\n                    }\n\n                    for pat in pdb_sigs.keys():\n                        if ff['pe']['PDB_Name'].find(pat) != -1:\n                            vname = kavutil.normal_vname(pdb_sigs[pat])\n                            return True, vname, 0, kernel.INFECTED\n\n            # \ubbf8\ub9ac \ubd84\uc11d\ub41c \ud30c\uc77c \ud3ec\ub9f7\uc911\uc5d0 ELF \ud3ec\ub9f7\uc774 \uc788\ub294\uac00?\n            elif 'ff_elf' in fileformat:\n                ff = fileformat['ff_elf']\n\n                if len(ff['elf']['Sections']):\n                    for section in ff['elf']['Sections']:\n                        if (section['Type'] & 0x1) == 0x1 and (section['Flag'] & 0x4) == 0x4:  # \ud504\ub85c\uadf8\ub7a8 \ub370\uc774\ud130\uc774\uba74\uc11c \uc2e4\ud589 \uc18d\uc131?\n                            # print section['Name'], section['Size'], section['Offset']\n                            fsize = section['Size']\n                            if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize):\n                                foff = section['Offset']\n                                fmd5 = cryptolib.md5(mm[foff:foff + fsize])\n                                # print fsize, fmd5\n                                vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5)\n                                if vname:\n                                    vname = kavutil.normal_vname(vname)\n                                    return True, vname, 0, kernel.INFECTED\n                elif len(ff['elf']['ProgramHeaders']):\n                    for ph in ff['elf']['ProgramHeaders']:\n                        if (ph['Type'] & 0x1) == 0x1 and (ph['Flag'] & 0x1) == 0x1:\n                            fsize = ph['Size']\n                            if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize):\n                                foff = ph['Offset']\n                                fmd5 = cryptolib.md5(mm[foff:foff + fsize])\n                                # print fsize, fmd5\n                                vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5)\n                                if vname:\n                                    vname = kavutil.normal_vname(vname)\n                                    return True, vname, 0, kernel.INFECTED\n\n                # Mirai \ubcc0\uc885 \uc9c4\ub2e8\n                '''\n                for section in ff['elf']['Sections']:\n                    if section['Name'] == '.rodata':\n                        fsize = section['Size']\n                        foff = section['Offset']\n                        if self.p_linux_mirai.match(mm[foff:foff+fsize]):\n                            return True, 'Backdoor.Linux.Mirai.gen', 0, kernel.SUSPECT\n                '''\n                for section in ff['elf']['Sections']:\n                    if section['Name'] == '.rodata':\n                        vstring = []\n\n                        foff = section['Offset']\n                        ret = self.aho_mirai_a.search(mm[foff:foff + 0x200])\n\n                        for n in ret[:len(self.mirai_a_strings)]:\n                            vstring.append(n[1])\n\n                        # print vstring\n                        # print len(set(vstring)), len(self.mirai_a_strings)\n\n                        if set(vstring) == set(self.mirai_a_strings):\n                            return True, 'Backdoor.Linux.Mirai.a.gen', 0, kernel.SUSPECT\n\n            # NSIS \uac19\uc740 \uc124\uce58 \ud504\ub85c\uadf8\ub7a8\uc758 \uacbd\uc6b0 \ucca8\ubd80 \uc601\uc5ed\uc5d0 \uc874\uc7ac\ud558\ub294\ub370..\n            # \ub514\ucef4\ud30c\uc77c\ud558\uc9c0 \uc54a\uace0 \uc624\ub9ac\uc9c0\ub110 \uc774\ubbf8\uc9c0 \uc6d0\ubcf8\uc744 \ud0d0\uc9c0\ud558\ub3c4\ub85d \ud588\uc74c..\n            if 'ff_attach' in fileformat:\n                foff = fileformat['ff_attach']['Attached_Pos']\n                buf = mm[foff:]\n                fsize = len(buf)\n                if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize):\n                    fmd5 = cryptolib.md5(buf)  # \ucca8\ubd80 \uc704\uce58\ubd80\ud130 \ub05d\uae4c\uc9c0\n                    vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5)\n                    if vname:\n                        vname = kavutil.normal_vname(vname)\n                        return True, vname, 0, kernel.INFECTED\n\n        except IOError:\n            pass\n\n        # \uc545\uc131\ucf54\ub4dc\ub97c \ubc1c\uacac\ud558\uc9c0 \ubabb\ud588\uc74c\uc744 \ub9ac\ud134\ud55c\ub2e4.\n        return False, '', -1, kernel.NOT_FOUND\n\n    # ---------------------------------------------------------------------\n    # disinfect(self, filename, malware_id)\n    # \uc545\uc131\ucf54\ub4dc\ub97c \uce58\ub8cc\ud55c\ub2e4.\n    # \uc785\ub825\uac12 : filename    - \ud30c\uc77c \uc774\ub984\n    #        : malware_id - \uce58\ub8cc\ud560 \uc545\uc131\ucf54\ub4dc ID\n    # \ub9ac\ud134\uac12 : \uc545\uc131\ucf54\ub4dc \uce58\ub8cc \uc5ec\ubd80\n    # ---------------------------------------------------------------------\n    def disinfect(self, filename, malware_id):  # \uc545\uc131\ucf54\ub4dc \uce58\ub8cc\n        try:\n            # \uc545\uc131\ucf54\ub4dc \uc9c4\ub2e8 \uacb0\uacfc\uc5d0\uc11c \ubc1b\uc740 ID \uac12\uc774 0\uc778\uac00?\n            if malware_id == 0:\n                os.remove(filename)  # \ud30c\uc77c \uc0ad\uc81c\n                return True  # \uce58\ub8cc \uc644\ub8cc \ub9ac\ud134\n            if malware_id & 0x80000000 == 0x80000000:\n                idx = malware_id & 0x7fffffff\n\n                import pe\n\n                buf = open(filename, 'rb').read()\n                pe = pe.PE(buf, False, filename)\n                try:\n                    pe_format = pe.parse()  # PE \ud30c\uc77c \ubd84\uc11d\n                except MemoryError:\n                    pe_format = None\n\n                if pe_format is None:\n                    return False\n\n                ff = {'pe': pe_format}\n\n                if len(ff['pe']['Sections']) > idx:\n                    section = ff['pe']['Sections'][idx]\n                    fsize = section['SizeRawData']\n                    foff = section['PointerRawData']\n\n                    data = buf[:foff] + ('\\x00' * fsize) + buf[foff+fsize:]\n                    open(filename, 'wb').write(data)\n                    return True\n        except IOError:\n            pass\n\n        return False  # \uce58\ub8cc \uc2e4\ud328 \ub9ac\ud134\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python script for a malware detection engine. To use the engine, follow the instructions below:\n\n1. Initialize the plugin engine by calling the `init` method with the path to the plugin engine and the verbose flag as parameters.\n2. Call the `scan` method with the file handle, filename, file format, and filename_ex as parameters to scan for malware.\n3. If malware is detected, call the `disinfect` method with the filename and malware ID as parameters to remove the malware.\n4. When finished, call the `uninit` method to close the plugin engine.\n\nNote: Before using the engine, make sure to import the necessary modules and dependencies.\n\n### Input:\n\n\n### Output:\n# -*- coding:utf-8 -*-\n# Author: Kei Choi(hanul93@gmail.com)\n\n\nimport os\nimport re\nimport kernel\nimport kavutil\nimport cryptolib\n\n\n# -------------------------------------------------------------------------\n# KavMain \ud074\ub798\uc2a4\n# -------------------------------------------------------------------------\nclass KavMain:\n    # ---------------------------------------------------------------------\n    # init(self, plugins_path)\n    # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4.\n    # \uc778\ub825\uac12 : plugins_path - \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4\uc758 \uc704\uce58\n    #         verbose      - \ub514\ubc84\uadf8 \ubaa8\ub4dc (True or False)\n    # \ub9ac\ud134\uac12 : 0 - \uc131\uacf5, 0 \uc774\uc678\uc758 \uac12 - \uc2e4\ud328\n    # ---------------------------------------------------------------------\n    def init(self, plugins_path, verbose=False):  # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4 \ucd08\uae30\ud654\n        pat = r'POST \/cdn-cgi\/\\x00\\x00 HTTP\/1.1\\r\\nUser-Agent: \\x00\\r\\nHost:' + \\\n              r'[\\d\\D]+?GET\\x00+\/\\x00+Cookie:[\\d\\D]+?http[\\d\\D]+?url=[\\d\\D]+?POST'\n        self.p_linux_mirai = re.compile(pat)\n\n        # \ubcc0\uc885 \ubc14\uc774\ub7ec\uc2a4 \ud328\ud134\n        self.mirai_a_strings = [\n            'POST \/cdn-cgi\/',\n            'HTTP\/1.1\\r\\nUser-Agent: ',\n            'Host:',\n            'GET',\n            'Cookie:',\n            'http',\n            'url=',\n            'proc\/net\/tcp'\n        ]\n\n        self.aho_mirai_a = kavutil.AhoCorasick()\n        self.aho_mirai_a.make_tree(self.mirai_a_strings)\n        return 0  # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4 \ucd08\uae30\ud654 \uc131\uacf5\n\n    # ---------------------------------------------------------------------\n    # uninit(self)\n    # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4\uc744 \uc885\ub8cc\ud55c\ub2e4.\n    # \ub9ac\ud134\uac12 : 0 - \uc131\uacf5, 0 \uc774\uc678\uc758 \uac12 - \uc2e4\ud328\n    # ---------------------------------------------------------------------\n    def uninit(self):  # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4 \uc885\ub8cc\n        return 0  # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4 \uc885\ub8cc \uc131\uacf5\n\n    # ---------------------------------------------------------------------\n    # getinfo(self)\n    # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4\uc758 \uc8fc\uc694 \uc815\ubcf4\ub97c \uc54c\ub824\uc900\ub2e4. (\uc81c\uc791\uc790, \ubc84\uc804, ...)\n    # \ub9ac\ud134\uac12 : \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4 \uc815\ubcf4\n    # ---------------------------------------------------------------------\n    def getinfo(self):  # \ud50c\ub7ec\uadf8\uc778 \uc5d4\uc9c4\uc758 \uc8fc\uc694 \uc815\ubcf4\n        info = dict()  # \uc0ac\uc804\ud615 \ubcc0\uc218 \uc120\uc5b8\n\n        info['author'] = 'Kei Choi'  # \uc81c\uc791\uc790\n        info['version'] = '1.1'  # \ubc84\uc804\n        info['title'] = 'eMalware Engine'  # \uc5d4\uc9c4 \uc124\uba85\n        info['kmd_name'] = 'emalware'  # \uc5d4\uc9c4 \ud30c\uc77c \uc774\ub984\n        info['sig_num'] = kavutil.handle_pattern_md5.get_sig_num('emalware') + 2   # \uc9c4\ub2e8\/\uce58\ub8cc \uac00\ub2a5\ud55c \uc545\uc131\ucf54\ub4dc \uc218\n\n        return info\n\n    # ---------------------------------------------------------------------\n    # listvirus(self)\n    # \uc9c4\ub2e8\/\uce58\ub8cc \uac00\ub2a5\ud55c \uc545\uc131\ucf54\ub4dc\uc758 \ub9ac\uc2a4\ud2b8\ub97c \uc54c\ub824\uc900\ub2e4.\n    # \ub9ac\ud134\uac12 : \uc545\uc131\ucf54\ub4dc \ub9ac\uc2a4\ud2b8\n    # ---------------------------------------------------------------------\n    def listvirus(self):  # \uc9c4\ub2e8 \uac00\ub2a5\ud55c \uc545\uc131\ucf54\ub4dc \ub9ac\uc2a4\ud2b8\n        vlist = kavutil.handle_pattern_md5.get_sig_vlist('emalware')\n        vlist.append('Backdoor.Linux.Mirai.a.gen')\n        vlist = list(set(vlist))\n        vlist.sort()\n\n        vlists = []\n        for vname in vlist:\n            vlists.append(kavutil.normal_vname(vname))\n\n        vlists.append(kavutil.normal_vname('<n>AdWare.Win32.Sokuxuan.gen'))\n\n        return vlists\n\n    # ---------------------------------------------------------------------\n    # scan(self, filehandle, filename, fileformat)\n    # \uc545\uc131\ucf54\ub4dc\ub97c \uac80\uc0ac\ud55c\ub2e4.\n    # \uc785\ub825\uac12 : filehandle  - \ud30c\uc77c \ud578\ub4e4\n    #         filename    - \ud30c\uc77c \uc774\ub984\n    #         fileformat  - \ud30c\uc77c \ud3ec\ub9f7\n    #         filename_ex - \ud30c\uc77c \uc774\ub984 (\uc555\ucd95 \ub0b4\ubd80 \ud30c\uc77c \uc774\ub984)\n    # \ub9ac\ud134\uac12 : (\uc545\uc131\ucf54\ub4dc \ubc1c\uacac \uc5ec\ubd80, \uc545\uc131\ucf54\ub4dc \uc774\ub984, \uc545\uc131\ucf54\ub4dc ID) \ub4f1\ub4f1\n    # ---------------------------------------------------------------------\n    def scan(self, filehandle, filename, fileformat, filename_ex):  # \uc545\uc131\ucf54\ub4dc \uac80\uc0ac\n        try:\n            mm = filehandle\n\n            # \ubbf8\ub9ac \ubd84\uc11d\ub41c \ud30c\uc77c \ud3ec\ub9f7\uc911\uc5d0 PE \ud3ec\ub9f7\uc774 \uc788\ub294\uac00?\n            if 'ff_pe' in fileformat:\n                ff = fileformat['ff_pe']\n\n                # case 1 : \uc139\uc158 \uc804\uccb4\ub97c hash\ub85c \uac80\uc0ac\n                for idx, section in enumerate(ff['pe']['Sections']):\n                    # if (section['Characteristics'] & 0x20000000) == 0x20000000:  # \uc2e4\ud589 \uc18d\uc131?\n                    # print section['Name'], hex(section['SizeRawData'])\n                    fsize = section['SizeRawData']\n                    if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize):\n                        foff = section['PointerRawData']\n                        fmd5 = cryptolib.md5(mm[foff:foff+fsize])\n                        # print fsize, fmd5\n                        vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5)\n                        if vname:\n                            vname = kavutil.normal_vname(vname)\n                            return True, vname, 0, kernel.INFECTED\n\n                # case 2. \ub9c8\uc9c0\ub9c9 \uc139\uc158\uc5d0 \uc2e4\ud589 \ud30c\uc77c \uc874\uc7ac\n                if len(ff['pe']['Sections']):\n                    # \ub9c8\uc9c0\ub9c9 \uc139\uc158\n                    sec = ff['pe']['Sections'][-1]\n                    off = sec['PointerRawData']\n                    size = sec['SizeRawData']\n\n                    # \uc2e4\ud589 \ud30c\uc77c\uc774 \uc874\uc7ac\ud558\ub294\uac00?\n                    exe_offs = [m.start() for m in re.finditer('MZ', mm[off:off+size])]\n\n                    for exe_pos in exe_offs:\n                        fsize = 0x1d5\n                        if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize):\n                            fmd5 = cryptolib.md5(mm[off + exe_pos:off + exe_pos + fsize])\n                            # print fsize, fmd5\n                            vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5)\n                            if vname:\n                                # return True, vname, 0, kernel.INFECTED\n                                idx = len(ff['pe']['Sections']) - 1\n                                vname = kavutil.normal_vname(vname)\n                                return True, vname, (0x80000000 + idx), kernel.INFECTED\n\n                # case 3. pdb\ub97c \uc774\uc6a9\ud574\uc11c \uc545\uc131\ucf54\ub4dc \uac80\uc0ac\n                if 'PDB_Name' in ff['pe']:\n                    pdb_sigs = {\n                        ':\\\\pz_git\\\\bin\\\\': '<n>AdWare.Win32.Sokuxuan.gen',\n                        ':\\\\CODE\\\\vitruvian\\\\': '<n>AdWare.Win32.Vitruvian.gen',\n                    }\n\n                    for pat in pdb_sigs.keys():\n                        if ff['pe']['PDB_Name'].find(pat) != -1:\n                            vname = kavutil.normal_vname(pdb_sigs[pat])\n                            return True, vname, 0, kernel.INFECTED\n\n            # \ubbf8\ub9ac \ubd84\uc11d\ub41c \ud30c\uc77c \ud3ec\ub9f7\uc911\uc5d0 ELF \ud3ec\ub9f7\uc774 \uc788\ub294\uac00?\n            elif 'ff_elf' in fileformat:\n                ff = fileformat['ff_elf']\n\n                if len(ff['elf']['Sections']):\n                    for section in ff['elf']['Sections']:\n                        if (section['Type'] & 0x1) == 0x1 and (section['Flag'] & 0x4) == 0x4:  # \ud504\ub85c\uadf8\ub7a8 \ub370\uc774\ud130\uc774\uba74\uc11c \uc2e4\ud589 \uc18d\uc131?\n                            # print section['Name'], section['Size'], section['Offset']\n                            fsize = section['Size']\n                            if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize):\n                                foff = section['Offset']\n                                fmd5 = cryptolib.md5(mm[foff:foff + fsize])\n                                # print fsize, fmd5\n                                vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5)\n                                if vname:\n                                    vname = kavutil.normal_vname(vname)\n                                    return True, vname, 0, kernel.INFECTED\n                elif len(ff['elf']['ProgramHeaders']):\n                    for ph in ff['elf']['ProgramHeaders']:\n                        if (ph['Type'] & 0x1) == 0x1 and (ph['Flag'] & 0x1) == 0x1:\n                            fsize = ph['Size']\n                            if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize):\n                                foff = ph['Offset']\n                                fmd5 = cryptolib.md5(mm[foff:foff + fsize])\n                                # print fsize, fmd5\n                                vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5)\n                                if vname:\n                                    vname = kavutil.normal_vname(vname)\n                                    return True, vname, 0, kernel.INFECTED\n\n                # Mirai \ubcc0\uc885 \uc9c4\ub2e8\n                '''\n                for section in ff['elf']['Sections']:\n                    if section['Name'] == '.rodata':\n                        fsize = section['Size']\n                        foff = section['Offset']\n                        if self.p_linux_mirai.match(mm[foff:foff+fsize]):\n                            return True, 'Backdoor.Linux.Mirai.gen', 0, kernel.SUSPECT\n                '''\n                for section in ff['elf']['Sections']:\n                    if section['Name'] == '.rodata':\n                        vstring = []\n\n                        foff = section['Offset']\n                        ret = self.aho_mirai_a.search(mm[foff:foff + 0x200])\n\n                        for n in ret[:len(self.mirai_a_strings)]:\n                            vstring.append(n[1])\n\n                        # print vstring\n                        # print len(set(vstring)), len(self.mirai_a_strings)\n\n                        if set(vstring) == set(self.mirai_a_strings):\n                            return True, 'Backdoor.Linux.Mirai.a.gen', 0, kernel.SUSPECT\n\n            # NSIS \uac19\uc740 \uc124\uce58 \ud504\ub85c\uadf8\ub7a8\uc758 \uacbd\uc6b0 \ucca8\ubd80 \uc601\uc5ed\uc5d0 \uc874\uc7ac\ud558\ub294\ub370..\n            # \ub514\ucef4\ud30c\uc77c\ud558\uc9c0 \uc54a\uace0 \uc624\ub9ac\uc9c0\ub110 \uc774\ubbf8\uc9c0 \uc6d0\ubcf8\uc744 \ud0d0\uc9c0\ud558\ub3c4\ub85d \ud588\uc74c..\n            if 'ff_attach' in fileformat:\n                foff = fileformat['ff_attach']['Attached_Pos']\n                buf = mm[foff:]\n                fsize = len(buf)\n                if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize):\n                    fmd5 = cryptolib.md5(buf)  # \ucca8\ubd80 \uc704\uce58\ubd80\ud130 \ub05d\uae4c\uc9c0\n                    vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5)\n                    if vname:\n                        vname = kavutil.normal_vname(vname)\n                        return True, vname, 0, kernel.INFECTED\n\n        except IOError:\n            pass\n\n        # \uc545\uc131\ucf54\ub4dc\ub97c \ubc1c\uacac\ud558\uc9c0 \ubabb\ud588\uc74c\uc744 \ub9ac\ud134\ud55c\ub2e4.\n        return False, '', -1, kernel.NOT_FOUND\n\n    # ---------------------------------------------------------------------\n    # disinfect(self, filename, malware_id)\n    # \uc545\uc131\ucf54\ub4dc\ub97c \uce58\ub8cc\ud55c\ub2e4.\n    # \uc785\ub825\uac12 : filename    - \ud30c\uc77c \uc774\ub984\n    #        : malware_id - \uce58\ub8cc\ud560 \uc545\uc131\ucf54\ub4dc ID\n    # \ub9ac\ud134\uac12 : \uc545\uc131\ucf54\ub4dc \uce58\ub8cc \uc5ec\ubd80\n    # ---------------------------------------------------------------------\n    def disinfect(self, filename, malware_id):  # \uc545\uc131\ucf54\ub4dc \uce58\ub8cc\n        try:\n            # \uc545\uc131\ucf54\ub4dc \uc9c4\ub2e8 \uacb0\uacfc\uc5d0\uc11c \ubc1b\uc740 ID \uac12\uc774 0\uc778\uac00?\n            if malware_id == 0:\n                os.remove(filename)  # \ud30c\uc77c \uc0ad\uc81c\n                return True  # \uce58\ub8cc \uc644\ub8cc \ub9ac\ud134\n            if malware_id & 0x80000000 == 0x80000000:\n                idx = malware_id & 0x7fffffff\n\n                import pe\n\n                buf = open(filename, 'rb').read()\n                pe = pe.PE(buf, False, filename)\n                try:\n                    pe_format = pe.parse()  # PE \ud30c\uc77c \ubd84\uc11d\n                except MemoryError:\n                    pe_format = None\n\n                if pe_format is None:\n                    return False\n\n                ff = {'pe': pe_format}\n\n                if len(ff['pe']['Sections']) > idx:\n                    section = ff['pe']['Sections'][idx]\n                    fsize = section['SizeRawData']\n                    foff = section['PointerRawData']\n\n                    data = buf[:foff] + ('\\x00' * fsize) + buf[foff+fsize:]\n                    open(filename, 'wb').write(data)\n                    return True\n        except IOError:\n            pass\n\n        return False  # \uce58\ub8cc \uc2e4\ud328 \ub9ac\ud134\n"}
{"instruction":"Create a command line application in Python that takes two numbers as arguments and prints the addition of them.","input":"Not applicable","output":"import sys\n\ndef add(num1, num2):\n  return num1 + num2\n\nif __name__ == '__main__':\n  num1 = int(sys.argv[1])\n  num2 = int(sys.argv[2])\n  print(add(num1, num2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a command line application in Python that takes two numbers as arguments and prints the addition of them.\n\n### Input:\nNot applicable\n\n### Output:\nimport sys\n\ndef add(num1, num2):\n  return num1 + num2\n\nif __name__ == '__main__':\n  num1 = int(sys.argv[1])\n  num2 = int(sys.argv[2])\n  print(add(num1, num2))"}
{"instruction":"Generate a Python dictionary that stores objects with unique values.","input":"['alec', 'bob', 'sara', 'john', 'elon']","output":"unique_dict = {\n  'alec' : 'alec',\n  'bob'  : 'bob',\n  'sara' : 'sara',\n  'john' : 'john',\n  'elon' : 'elon'\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python dictionary that stores objects with unique values.\n\n### Input:\n['alec', 'bob', 'sara', 'john', 'elon']\n\n### Output:\nunique_dict = {\n  'alec' : 'alec',\n  'bob'  : 'bob',\n  'sara' : 'sara',\n  'john' : 'john',\n  'elon' : 'elon'\n}"}
{"instruction":"Develop a program in Python for printing an asterisk triangle consisting of n rows.","input":"5","output":"def asterisk_triangle(n):\n    for i in range(n):\n        for j in range(i+1):\n            print('*', end=\" \")\n        print()\n\nn = 5\nasterisk_triangle(n)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python for printing an asterisk triangle consisting of n rows.\n\n### Input:\n5\n\n### Output:\ndef asterisk_triangle(n):\n    for i in range(n):\n        for j in range(i+1):\n            print('*', end=\" \")\n        print()\n\nn = 5\nasterisk_triangle(n)"}
{"instruction":"Create a loop in Python that prints the numbers from 5 to 10 in sequence.","input":"","output":"for i in range(5, 11):\n    print(i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a loop in Python that prints the numbers from 5 to 10 in sequence.\n\n### Input:\n\n\n### Output:\nfor i in range(5, 11):\n    print(i)"}
{"instruction":"Create a simple webscraper using Python and Beautiful Soup.","input":"URL of website to scrape: https:\/\/example.com","output":"import requests\nfrom bs4 import BeautifulSoup\n \nurl = 'https:\/\/example.com'\ncontent = requests.get(url).content\nsoup = BeautifulSoup(content, 'html.parser')\n \nfor element in soup.find_all('h2'):\n    print(element.text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple webscraper using Python and Beautiful Soup.\n\n### Input:\nURL of website to scrape: https:\/\/example.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n \nurl = 'https:\/\/example.com'\ncontent = requests.get(url).content\nsoup = BeautifulSoup(content, 'html.parser')\n \nfor element in soup.find_all('h2'):\n    print(element.text)"}
{"instruction":"Write a Python program to implement an algorithm selection sort.","input":"Not applicable","output":"def selectionSort(array):\n    # loop over the array\n    for i in range(len(array)-1):\n        # find the minimum element\n        minimum = i\n        for j in range(i + 1, len(array)): \n            if array[minimum] > array[j]: \n                minimum = j          \n     \n        # Swap the found minimum element with \n        # the first element         \n        temp = array[i] \n        array[i] = array[minimum] \n        array[minimum] = temp \n\n# test array\narray = [4, 2, 3, 5, 1]\nselectionSort(array)\n# result\nprint(array)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to implement an algorithm selection sort.\n\n### Input:\nNot applicable\n\n### Output:\ndef selectionSort(array):\n    # loop over the array\n    for i in range(len(array)-1):\n        # find the minimum element\n        minimum = i\n        for j in range(i + 1, len(array)): \n            if array[minimum] > array[j]: \n                minimum = j          \n     \n        # Swap the found minimum element with \n        # the first element         \n        temp = array[i] \n        array[i] = array[minimum] \n        array[minimum] = temp \n\n# test array\narray = [4, 2, 3, 5, 1]\nselectionSort(array)\n# result\nprint(array)"}
{"instruction":"Re-write the following Java program in Python.","input":"public class HelloWorld {\npublic static void main(String[] args) {\n System.out.println(\"Hello World\");\n }\n}","output":"def main():\n print(\"Hello World\")\n \nif __name__ == \"__main__\":\n main()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRe-write the following Java program in Python.\n\n### Input:\npublic class HelloWorld {\npublic static void main(String[] args) {\n System.out.println(\"Hello World\");\n }\n}\n\n### Output:\ndef main():\n print(\"Hello World\")\n \nif __name__ == \"__main__\":\n main()"}
{"instruction":"Produce a python code to implement a classic stack having push, pop, and peep operations","input":"None","output":"class Stack: \n    def __init__(self): \n        self.stack = []\n  \n    def push(self, data): \n        self.stack.append(data)\n  \n    def pop(self):\n        if len(self.stack) == 0:\n            return -1\n        return self.stack.pop()\n  \n    def peek(self):\n        if len(self.stack) == 0:\n            return -1\n        return self.stack[-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a python code to implement a classic stack having push, pop, and peep operations\n\n### Input:\nNone\n\n### Output:\nclass Stack: \n    def __init__(self): \n        self.stack = []\n  \n    def push(self, data): \n        self.stack.append(data)\n  \n    def pop(self):\n        if len(self.stack) == 0:\n            return -1\n        return self.stack.pop()\n  \n    def peek(self):\n        if len(self.stack) == 0:\n            return -1\n        return self.stack[-1]"}
{"instruction":"Complete the following python code to make it comply with the given logic","input":"def largest_element(list1): \n    max = list1[0] \n    for item in list1: \n        if max","output":"def largest_element(list1): \n    max = list1[0] \n    for item in list1: \n        if item > max: \n            max = item\n    return max","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nComplete the following python code to make it comply with the given logic\n\n### Input:\ndef largest_element(list1): \n    max = list1[0] \n    for item in list1: \n        if max\n\n### Output:\ndef largest_element(list1): \n    max = list1[0] \n    for item in list1: \n        if item > max: \n            max = item\n    return max"}
{"instruction":"Develop a Python algorithm to find the maximum element in a given array.","input":"[1, 4, 6, 7, 3]","output":"def find_max_element(arr):\n    maxElement = arr[0]\n    for val in arr:\n        if val > maxElement:\n            maxElement = val\n    return maxElement","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python algorithm to find the maximum element in a given array.\n\n### Input:\n[1, 4, 6, 7, 3]\n\n### Output:\ndef find_max_element(arr):\n    maxElement = arr[0]\n    for val in arr:\n        if val > maxElement:\n            maxElement = val\n    return maxElement"}
{"instruction":"Expand this function to compute the sum of a list in Python.","input":"def computeSum(L):\n    total = 0\n    for x in L:\n        total += x\n    return total","output":"def computeSum(L):\n    \"\"\"Computes the sum of a list\n\n    Parameters\n    ----------\n    L : list\n        A list of numbers\n\n    Returns\n    -------\n    total : int\n        The sum of all the numbers in the list\n    \"\"\"\n    total = 0\n    for x in L:\n        total += x\n    return total","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExpand this function to compute the sum of a list in Python.\n\n### Input:\ndef computeSum(L):\n    total = 0\n    for x in L:\n        total += x\n    return total\n\n### Output:\ndef computeSum(L):\n    \"\"\"Computes the sum of a list\n\n    Parameters\n    ----------\n    L : list\n        A list of numbers\n\n    Returns\n    -------\n    total : int\n        The sum of all the numbers in the list\n    \"\"\"\n    total = 0\n    for x in L:\n        total += x\n    return total"}
{"instruction":"Create a Python function that takes the average of the three numbers given as parameters.","input":"","output":"def average(a, b, c):\n    return (a+b+c)\/3","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes the average of the three numbers given as parameters.\n\n### Input:\n\n\n### Output:\ndef average(a, b, c):\n    return (a+b+c)\/3"}
{"instruction":"Write a command line utility in Python to spin up a web server.","input":"","output":"import http.server\nimport socketserver\n\nPORT = 8000\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nhttpd = socketserver.TCPServer((\"\", PORT), Handler)\n\nprint(\"Serving at port\", PORT)\nhttpd.serve_forever()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a command line utility in Python to spin up a web server.\n\n### Input:\n\n\n### Output:\nimport http.server\nimport socketserver\n\nPORT = 8000\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nhttpd = socketserver.TCPServer((\"\", PORT), Handler)\n\nprint(\"Serving at port\", PORT)\nhttpd.serve_forever()"}
{"instruction":"Write Python code to calculate the minimum edit distance between two strings.","input":"str1 = \"sitting\"\nstr2 = \"kitten\"","output":"def minEditDist(str1, str2):\n\n    m = len(str1)\n    n = len(str2)\n\n    # create a table for storing edit distances\n    EditDistance = [[0 for x in range(n+1)] for x in range(m+1)]\n \n    # initialize the table\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                EditDistance[i][j] = j\n            elif j == 0:\n                EditDistance[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                EditDistance[i][j] = EditDistance[i-1][j-1]\n            else:\n                EditDistance[i][j] = 1 + min(EditDistance[i][j-1],\n                                            EditDistance[i-1][j],\n                                            EditDistance[i-1][j-1])\n \n    return EditDistance[m][n]\n\n# Driver code \nprint(minEditDist(\"sitting\", \"kitten\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to calculate the minimum edit distance between two strings.\n\n### Input:\nstr1 = \"sitting\"\nstr2 = \"kitten\"\n\n### Output:\ndef minEditDist(str1, str2):\n\n    m = len(str1)\n    n = len(str2)\n\n    # create a table for storing edit distances\n    EditDistance = [[0 for x in range(n+1)] for x in range(m+1)]\n \n    # initialize the table\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                EditDistance[i][j] = j\n            elif j == 0:\n                EditDistance[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                EditDistance[i][j] = EditDistance[i-1][j-1]\n            else:\n                EditDistance[i][j] = 1 + min(EditDistance[i][j-1],\n                                            EditDistance[i-1][j],\n                                            EditDistance[i-1][j-1])\n \n    return EditDistance[m][n]\n\n# Driver code \nprint(minEditDist(\"sitting\", \"kitten\"))"}
{"instruction":"Write a Python function to round a float to 2 decimal places.","input":"","output":"def round_to_two_decimal_places(n):\n    return round(n, 2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to round a float to 2 decimal places.\n\n### Input:\n\n\n### Output:\ndef round_to_two_decimal_places(n):\n    return round(n, 2)"}
{"instruction":"Write a Python functions to generate a random number between 1 and 9","input":"","output":"import random\n\ndef random_number():\n return random.randint(1,9)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python functions to generate a random number between 1 and 9\n\n### Input:\n\n\n### Output:\nimport random\n\ndef random_number():\n return random.randint(1,9)"}
{"instruction":"Combine two lists into a dictionary using Python.","input":"list1 = [1, 2, 3]\nlist2 = ['a', 'b', 'c']","output":"\"\"\"\nCombine two lists into a dictionary using Python\n\"\"\"\n\nlist1 = [1, 2, 3]\nlist2 = ['a', 'b', 'c']\n\ndict = dict(zip(list1, list2))\n\nprint(dict) # Output {1: 'a', 2: 'b', 3: 'c'}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCombine two lists into a dictionary using Python.\n\n### Input:\nlist1 = [1, 2, 3]\nlist2 = ['a', 'b', 'c']\n\n### Output:\n\"\"\"\nCombine two lists into a dictionary using Python\n\"\"\"\n\nlist1 = [1, 2, 3]\nlist2 = ['a', 'b', 'c']\n\ndict = dict(zip(list1, list2))\n\nprint(dict) # Output {1: 'a', 2: 'b', 3: 'c'}"}
{"instruction":"Create a python function that stores the elements of a list in a dictionary.","input":"list = ['apple', 'orange', 'banana']","output":"def list_to_dict(list):\n    dictionary = {}\n    for item in list:\n        dictionary[item] = 0\n\n    return dictionary","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function that stores the elements of a list in a dictionary.\n\n### Input:\nlist = ['apple', 'orange', 'banana']\n\n### Output:\ndef list_to_dict(list):\n    dictionary = {}\n    for item in list:\n        dictionary[item] = 0\n\n    return dictionary"}
{"instruction":"Write a Python program to Create a class called Vector with two methods to add and subtract vectors.","input":"Not applicable","output":"class Vector:\n def __init__(self, x, y):\n  self.x = x\n  self.y = y\n\n def __add__(self, other):\n  return Vector(self.x + other.x, self.y + other.y)\n\n def __sub__(self, other):\n  return Vector(self.x - other.x, self.y - other.y)\n\nv1 = Vector(2, 4)\nv2 = Vector(4, 6)\nv3 = v1 + v2\nprint(v3.x, v3.y) # 6, 10\nv4 = v1 - v2\nprint(v4.x, v4.y) # -2, -2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to Create a class called Vector with two methods to add and subtract vectors.\n\n### Input:\nNot applicable\n\n### Output:\nclass Vector:\n def __init__(self, x, y):\n  self.x = x\n  self.y = y\n\n def __add__(self, other):\n  return Vector(self.x + other.x, self.y + other.y)\n\n def __sub__(self, other):\n  return Vector(self.x - other.x, self.y - other.y)\n\nv1 = Vector(2, 4)\nv2 = Vector(4, 6)\nv3 = v1 + v2\nprint(v3.x, v3.y) # 6, 10\nv4 = v1 - v2\nprint(v4.x, v4.y) # -2, -2"}
{"instruction":"Write a Python program to generate a report of the total number of customers for a given year.","input":"customers_data = [{'name': 'Alice', 'year': '2019'},\n {'name': 'Bob', 'year': '2019'},\n {'name': 'Chris', 'year': '2019'},\n {'name': 'David', 'year': '2018'},\n {'name': 'Erica', 'year': '2020'},\n {'name': 'Frank', 'year': '2020'}]","output":"# creating an empty dictionary where we will store the total customers for each year\ncustomers_by_year = {}\nfor customer in customers_data:\n # Get the year from the customer data\n year = customer['year']\n # Get the current total customers for the year\n num_customers = customers_by_year.get(year, 0)\n # Increase the total customers by one\n num_customers += 1\n # Update the dictionary with the new customer count\n customers_by_year[year] = num_customers\n\nprint(f'Total number of customers in 2019: {customers_by_year[\"2019\"]}')\nprint(f'Total number of customers in 2020: {customers_by_year[\"2020\"]}')\nprint(f'Total number of customers in 2018: {customers_by_year[\"2018\"]}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a report of the total number of customers for a given year.\n\n### Input:\ncustomers_data = [{'name': 'Alice', 'year': '2019'},\n {'name': 'Bob', 'year': '2019'},\n {'name': 'Chris', 'year': '2019'},\n {'name': 'David', 'year': '2018'},\n {'name': 'Erica', 'year': '2020'},\n {'name': 'Frank', 'year': '2020'}]\n\n### Output:\n# creating an empty dictionary where we will store the total customers for each year\ncustomers_by_year = {}\nfor customer in customers_data:\n # Get the year from the customer data\n year = customer['year']\n # Get the current total customers for the year\n num_customers = customers_by_year.get(year, 0)\n # Increase the total customers by one\n num_customers += 1\n # Update the dictionary with the new customer count\n customers_by_year[year] = num_customers\n\nprint(f'Total number of customers in 2019: {customers_by_year[\"2019\"]}')\nprint(f'Total number of customers in 2020: {customers_by_year[\"2020\"]}')\nprint(f'Total number of customers in 2018: {customers_by_year[\"2018\"]}')"}
{"instruction":"What Python code can you write that takes two strings and returns whether they are anagrams?","input":"str1 = \"abcd\"\nstr2 = \"cbda\"","output":"def is_anagram(str1, str2):\n    if len(str1) != len(str2):\n        return False\n\n    str1_counts = collections.Counter(str1)\n    str2_counts = collections.Counter(str2)\n    \n    for char in str1_counts:\n        if str1_counts[char] != str2_counts[char]:\n            return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat Python code can you write that takes two strings and returns whether they are anagrams?\n\n### Input:\nstr1 = \"abcd\"\nstr2 = \"cbda\"\n\n### Output:\ndef is_anagram(str1, str2):\n    if len(str1) != len(str2):\n        return False\n\n    str1_counts = collections.Counter(str1)\n    str2_counts = collections.Counter(str2)\n    \n    for char in str1_counts:\n        if str1_counts[char] != str2_counts[char]:\n            return False\n    return True"}
{"instruction":"Generate a python function that checks if the number is a valid decimal or not.","input":"","output":"def is_valid_decimal(n):\n    try:\n        float(n)\n        return True\n    except ValueError:\n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python function that checks if the number is a valid decimal or not.\n\n### Input:\n\n\n### Output:\ndef is_valid_decimal(n):\n    try:\n        float(n)\n        return True\n    except ValueError:\n        return False"}
{"instruction":"Develop a program in Python to find the second largest element in a given array.","input":"[10, 11, 8, 9, 20]","output":"def second_largest(arr):\n    first = max(arr[0], arr[1])\n    second = min(arr[0], arr[1])\n \n    for i in range(2, len(arr)):\n        if arr[i] > first:\n            second = first\n            first = arr[i]\n        elif arr[i] > second and arr[i] != first:\n            second = arr[i]\n \n    return second","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python to find the second largest element in a given array.\n\n### Input:\n[10, 11, 8, 9, 20]\n\n### Output:\ndef second_largest(arr):\n    first = max(arr[0], arr[1])\n    second = min(arr[0], arr[1])\n \n    for i in range(2, len(arr)):\n        if arr[i] > first:\n            second = first\n            first = arr[i]\n        elif arr[i] > second and arr[i] != first:\n            second = arr[i]\n \n    return second"}
{"instruction":"Construct a single line of code in python to get the last element of a list","input":"[1, 8, 3, 10, 5]","output":"last_element = [1, 8, 3, 10, 5][-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a single line of code in python to get the last element of a list\n\n### Input:\n[1, 8, 3, 10, 5]\n\n### Output:\nlast_element = [1, 8, 3, 10, 5][-1]"}
{"instruction":"Create a Python class that holds information about a car.","input":"","output":"class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n\n    def description(self):\n        return f'This car is a {self.year} {self.make} {self.model}'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that holds information about a car.\n\n### Input:\n\n\n### Output:\nclass Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n\n    def description(self):\n        return f'This car is a {self.year} {self.make} {self.model}'"}
{"instruction":"Design a Python class which represents a bank account. This class should contain attributes and methods to create an account, to deposit money, to withdraw money, to check the balance and to transfer money to another account.","input":"Not applicable","output":"class BankAccount:\n    def __init__(self,name,balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n\n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n        else:\n            print(\"Insufficient funds\")\n        return self.balance\n  \n    def checkBalance(self):\n        return self.balance\n\n    def transfer(self, target, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n            target.balance += amount\n        else:\n            print(\"Insufficient funds\")\n        return self.balance","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class which represents a bank account. This class should contain attributes and methods to create an account, to deposit money, to withdraw money, to check the balance and to transfer money to another account.\n\n### Input:\nNot applicable\n\n### Output:\nclass BankAccount:\n    def __init__(self,name,balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n\n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n        else:\n            print(\"Insufficient funds\")\n        return self.balance\n  \n    def checkBalance(self):\n        return self.balance\n\n    def transfer(self, target, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n            target.balance += amount\n        else:\n            print(\"Insufficient funds\")\n        return self.balance"}
{"instruction":"Generate a Python program for converting temperatures from Celsius to Fahrenheit.","input":"15 degree Celsius","output":"# Take input from user\nc = float(input('Enter temperature in Celsius: '))\n\n# Compute temperature in Fahrenheit\nf = (c * 1.8) + 32\n\n# Print the result\nprint('{} degree Celsius is equal to {} degree Fahrenheit.'.format(c, f))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program for converting temperatures from Celsius to Fahrenheit.\n\n### Input:\n15 degree Celsius\n\n### Output:\n# Take input from user\nc = float(input('Enter temperature in Celsius: '))\n\n# Compute temperature in Fahrenheit\nf = (c * 1.8) + 32\n\n# Print the result\nprint('{} degree Celsius is equal to {} degree Fahrenheit.'.format(c, f))"}
{"instruction":"Create a program in Python that takes a string as an argument and tokenizes it, removing any punctuation.","input":"'This sentence has commas, periods, and colons.'","output":"import string\n\ndef tokenize(string):\n    tokens = string.split()\n    tokens = [token.strip(string.punctuation) for token in tokens]\n    return tokens\n\ntokenized_str = tokenize('This sentence has commas, periods, and colons.')\nprint(tokenized_str)\n# Output: ['This', 'sentence', 'has', 'commas', 'periods', 'and', 'colons']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes a string as an argument and tokenizes it, removing any punctuation.\n\n### Input:\n'This sentence has commas, periods, and colons.'\n\n### Output:\nimport string\n\ndef tokenize(string):\n    tokens = string.split()\n    tokens = [token.strip(string.punctuation) for token in tokens]\n    return tokens\n\ntokenized_str = tokenize('This sentence has commas, periods, and colons.')\nprint(tokenized_str)\n# Output: ['This', 'sentence', 'has', 'commas', 'periods', 'and', 'colons']"}
{"instruction":"Refactor a Python function with a long code block, so that it has descriptive function names, is object-oriented, and more efficient.","input":"def long_code_block(input_a, input_b):\n    result = 0\n    for i in range(len(input_a)):\n        for j in range(len(input_b)):\n            if input_b[j] == input_a[i]:\n                result = result + 1\n    return result","output":"def count_matches(list_a, list_b):\n    count = 0\n    for item_a in list_a:\n        for item_b in list_b:\n            if item_b == item_a:\n                count += 1\n    return count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRefactor a Python function with a long code block, so that it has descriptive function names, is object-oriented, and more efficient.\n\n### Input:\ndef long_code_block(input_a, input_b):\n    result = 0\n    for i in range(len(input_a)):\n        for j in range(len(input_b)):\n            if input_b[j] == input_a[i]:\n                result = result + 1\n    return result\n\n### Output:\ndef count_matches(list_a, list_b):\n    count = 0\n    for item_a in list_a:\n        for item_b in list_b:\n            if item_b == item_a:\n                count += 1\n    return count"}
{"instruction":"Create a Python class to accurately define a circle.","input":"","output":"class Circle():\n    \"\"\"\n    Accurately define a circle in Python\n    \"\"\"\n    def __init__(self, x, y, radius):\n        \"\"\"\n        Constructor for Circle\n        \"\"\"\n        self.x = x\n        self.y = y\n        self.radius = radius\n    \n    def get_area(self):\n        \"\"\"\n        Returns area of the circle\n        \"\"\"\n        return 3.14*self.radius**2\n    \n    def get_perimeter(self):\n        \"\"\"\n        Returns perimeter of the circle\n        \"\"\"\n        return 2*3.14*self.radius\n    \n    def get_centre(self):\n        \"\"\"\n        Returns the centre point of the circle\n        \"\"\"\n        return self.x, self.y","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to accurately define a circle.\n\n### Input:\n\n\n### Output:\nclass Circle():\n    \"\"\"\n    Accurately define a circle in Python\n    \"\"\"\n    def __init__(self, x, y, radius):\n        \"\"\"\n        Constructor for Circle\n        \"\"\"\n        self.x = x\n        self.y = y\n        self.radius = radius\n    \n    def get_area(self):\n        \"\"\"\n        Returns area of the circle\n        \"\"\"\n        return 3.14*self.radius**2\n    \n    def get_perimeter(self):\n        \"\"\"\n        Returns perimeter of the circle\n        \"\"\"\n        return 2*3.14*self.radius\n    \n    def get_centre(self):\n        \"\"\"\n        Returns the centre point of the circle\n        \"\"\"\n        return self.x, self.y"}
{"instruction":"Generate five lines of code in Python that will check if a given number is prime and print a corresponding message.","input":"Not applicable","output":"# Function to check if the number is prime or not\ndef is_prime(n):\n \n    # Corner case\n    if n <= 1:\n        return False\n \n    # Check from 2 to n-1\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n \n# Driver Code\nnum = 11\n \n# Check if prime\nif is_prime(num):\n    print(\"{} is a prime number\".format(num))\nelse:\n    print(\"{} is not a prime number\".format(num))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate five lines of code in Python that will check if a given number is prime and print a corresponding message.\n\n### Input:\nNot applicable\n\n### Output:\n# Function to check if the number is prime or not\ndef is_prime(n):\n \n    # Corner case\n    if n <= 1:\n        return False\n \n    # Check from 2 to n-1\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n \n# Driver Code\nnum = 11\n \n# Check if prime\nif is_prime(num):\n    print(\"{} is a prime number\".format(num))\nelse:\n    print(\"{} is not a prime number\".format(num))"}
{"instruction":"Write a Python program to create a singly linked list","input":"","output":"class Node():\n  def __init__(self, data):\n    self.data = data\n    self.next = None\n\nclass List():\n  def __init__(self):\n    self.head = None\n\n  def addNode(self, data):\n    node = Node(data)\n    if self.head == None:\n       self.head = node\n    else:\n      current = self.head\n      while current.next != None:\n        current = current.next\n      current.next = node","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a singly linked list\n\n### Input:\n\n\n### Output:\nclass Node():\n  def __init__(self, data):\n    self.data = data\n    self.next = None\n\nclass List():\n  def __init__(self):\n    self.head = None\n\n  def addNode(self, data):\n    node = Node(data)\n    if self.head == None:\n       self.head = node\n    else:\n      current = self.head\n      while current.next != None:\n        current = current.next\n      current.next = node"}
{"instruction":"Write a Python algorithm to implement Breadth First Search (BFS).","input":"","output":"def bfs(graph, start):\n    visited, queue = set(), [start]\n    while queue:\n        vertex = queue.pop(0)\n        if vertex not in visited:\n            visited.add(vertex)\n            queue.extend(graph[vertex] - visited)\n    return visited","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python algorithm to implement Breadth First Search (BFS).\n\n### Input:\n\n\n### Output:\ndef bfs(graph, start):\n    visited, queue = set(), [start]\n    while queue:\n        vertex = queue.pop(0)\n        if vertex not in visited:\n            visited.add(vertex)\n            queue.extend(graph[vertex] - visited)\n    return visited"}
{"instruction":"Implement a basic version control system in Python that keeps track of changes in the code.","input":"","output":"class VersionControl:\n    def __init__(self, lines):\n        self.lines = lines\n        self.mark = 0\n \n    def commit(self):\n        self.mark += 1\n        log_file = open(\"log_file.txt\", \"a+\")\n        log_file.write(str(self.mark) + \": \" + str(self.lines))\n        log_file.close()\n \n    def restore(self):\n        log_file = open(\"log_file.txt\", \"r\")\n        lines = log_file.readlines()\n        to_mark = self.mark-1\n \n        self.lines = lines[to_mark]\n        log_file.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a basic version control system in Python that keeps track of changes in the code.\n\n### Input:\n\n\n### Output:\nclass VersionControl:\n    def __init__(self, lines):\n        self.lines = lines\n        self.mark = 0\n \n    def commit(self):\n        self.mark += 1\n        log_file = open(\"log_file.txt\", \"a+\")\n        log_file.write(str(self.mark) + \": \" + str(self.lines))\n        log_file.close()\n \n    def restore(self):\n        log_file = open(\"log_file.txt\", \"r\")\n        lines = log_file.readlines()\n        to_mark = self.mark-1\n \n        self.lines = lines[to_mark]\n        log_file.close()"}
{"instruction":"Write a function in Python that takes in a string and removes all the unnecessary whitespaces.","input":"\"This     string  contains   too     much whitespace!\"","output":"def remove_whitespaces(string):\n    return ' '.join(string.split())\n \nprint(remove_whitespaces(\"This     string  contains   too     much whitespace!\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes in a string and removes all the unnecessary whitespaces.\n\n### Input:\n\"This     string  contains   too     much whitespace!\"\n\n### Output:\ndef remove_whitespaces(string):\n    return ' '.join(string.split())\n \nprint(remove_whitespaces(\"This     string  contains   too     much whitespace!\"))"}
{"instruction":"Develop a program in Python that can convert a given temperature from Celsius to Fahrenheit.","input":"","output":"def celsius_to_fahrenheit(celsius):\n    return celsius * (9\/5) + 32\n\ntemperature = celsius_to_fahrenheit(32)\n \nprint(\"32\u00b0C is equal to %.2f\u00b0F\" % temperature)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python that can convert a given temperature from Celsius to Fahrenheit.\n\n### Input:\n\n\n### Output:\ndef celsius_to_fahrenheit(celsius):\n    return celsius * (9\/5) + 32\n\ntemperature = celsius_to_fahrenheit(32)\n \nprint(\"32\u00b0C is equal to %.2f\u00b0F\" % temperature)"}
{"instruction":"Create a class in Python that can be used to store the details of an employee.","input":"","output":"class Employee:\n    def __init__(self, name, age , department):\n        self.name = name\n        self.age = age\n        self.department = department\n    \n    def display(self):\n        print(\"Name:\", self.name)\n        print(\"Age:\", self.gender)\n        print(\"Department:\", self.department)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that can be used to store the details of an employee.\n\n### Input:\n\n\n### Output:\nclass Employee:\n    def __init__(self, name, age , department):\n        self.name = name\n        self.age = age\n        self.department = department\n    \n    def display(self):\n        print(\"Name:\", self.name)\n        print(\"Age:\", self.gender)\n        print(\"Department:\", self.department)"}
{"instruction":"Edit the following Python program to count the occurrence of the word \u201capple\u201d in a given sentence.","input":"sentence = \"I have an apple, and the apple is delicious.\"","output":"sentence = \"I have an apple, and the apple is delicious.\"\n\nword = \"apple\"\n\ncount = 0\n\nfor word in sentence.split():\n    if(word == \"apple\"):\n        count = count + 1\n\nprint(\"The no. of occurrences of the word 'apple' is:\", count)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python program to count the occurrence of the word \u201capple\u201d in a given sentence.\n\n### Input:\nsentence = \"I have an apple, and the apple is delicious.\"\n\n### Output:\nsentence = \"I have an apple, and the apple is delicious.\"\n\nword = \"apple\"\n\ncount = 0\n\nfor word in sentence.split():\n    if(word == \"apple\"):\n        count = count + 1\n\nprint(\"The no. of occurrences of the word 'apple' is:\", count)"}
{"instruction":"Write a python program to calculate the absolute differences between corresponding elements of two arrays of the same size.","input":"arr1 = [1, 4, 5]\narr2 = [3, 2, 1]","output":"def calc_diff(arr1, arr2):\n    # Initialize difference array\n    diff = []\n\n    # Iterate through arrays\n    for i in range(len(arr1)):\n        # Calculate the difference between two elements\n        diff.append(abs(arr1[i] - arr2[i]))\n        \n    return diff","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to calculate the absolute differences between corresponding elements of two arrays of the same size.\n\n### Input:\narr1 = [1, 4, 5]\narr2 = [3, 2, 1]\n\n### Output:\ndef calc_diff(arr1, arr2):\n    # Initialize difference array\n    diff = []\n\n    # Iterate through arrays\n    for i in range(len(arr1)):\n        # Calculate the difference between two elements\n        diff.append(abs(arr1[i] - arr2[i]))\n        \n    return diff"}
{"instruction":"Write a Python function to calculate the Hamming distance between two strings of same length.","input":"\"abc\",\n\"acd\"","output":"def hamming_distance(s1, s2):\n    distance = 0\n\n    for char1, char2 in zip(s1, s2):\n        if char1 != char2:\n            distance += 1\n    \n    return distance\n\nresult = hamming_distance(\"abc\", \"acd\")\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to calculate the Hamming distance between two strings of same length.\n\n### Input:\n\"abc\",\n\"acd\"\n\n### Output:\ndef hamming_distance(s1, s2):\n    distance = 0\n\n    for char1, char2 in zip(s1, s2):\n        if char1 != char2:\n            distance += 1\n    \n    return distance\n\nresult = hamming_distance(\"abc\", \"acd\")\nprint(result)"}
{"instruction":"Design a Python program to replace all e with @ in an array of strings","input":"['abc', 'xyz', '111']","output":"def replace_e(arr): \n    return [i.replace('e','@') for i in arr] \n  \narr = ['abc','xyz','111']\nprint(replace_e(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to replace all e with @ in an array of strings\n\n### Input:\n['abc', 'xyz', '111']\n\n### Output:\ndef replace_e(arr): \n    return [i.replace('e','@') for i in arr] \n  \narr = ['abc','xyz','111']\nprint(replace_e(arr))"}
{"instruction":"Develop a Python script to print the first 10 squares of natural numbers.","input":"","output":"for i in range(1, 11): \n  print(i**2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to print the first 10 squares of natural numbers.\n\n### Input:\n\n\n### Output:\nfor i in range(1, 11): \n  print(i**2)"}
{"instruction":"Write a Python function that takes two strings as arguments and returns the longest common sub-string between them.","input":"str_1 = \"abcdabcdabde\"\nstr_2 = \"defabcdabcd\"","output":"def longest_substring(str_1, str_2):\n    len_1 = len(str_1)\n    len_2 = len(str_2)\n    longest_substring = ''\n    for x in range(len_1):\n        for y in range(len_2):\n            if str_1[x] == str_2[y]:\n                cur_substring = str_1[x]\n                while (x + 1 < len_1 and y + 1 < len_2 and\n                       str_1[x + 1] == str_2[y + 1]):\n                    cur_substring += str_1[x + 1]\n                    x += 1\n                    y += 1\n                    if len(cur_substring) > len(longest_substring):\n                        longest_substring = cur_substring\n    return longest_substring\n\nlongest_sub = longest_substring(str_1, str_2)\nprint(longest_sub)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes two strings as arguments and returns the longest common sub-string between them.\n\n### Input:\nstr_1 = \"abcdabcdabde\"\nstr_2 = \"defabcdabcd\"\n\n### Output:\ndef longest_substring(str_1, str_2):\n    len_1 = len(str_1)\n    len_2 = len(str_2)\n    longest_substring = ''\n    for x in range(len_1):\n        for y in range(len_2):\n            if str_1[x] == str_2[y]:\n                cur_substring = str_1[x]\n                while (x + 1 < len_1 and y + 1 < len_2 and\n                       str_1[x + 1] == str_2[y + 1]):\n                    cur_substring += str_1[x + 1]\n                    x += 1\n                    y += 1\n                    if len(cur_substring) > len(longest_substring):\n                        longest_substring = cur_substring\n    return longest_substring\n\nlongest_sub = longest_substring(str_1, str_2)\nprint(longest_sub)"}
{"instruction":"Write a Python function to find the maximum from 3 numbers.","input":"10, 7, 4","output":"def find_max(a, b, c):\n    max = a\n    if b > max:\n        max = b\n    if c > max:\n        max = c\n    return max\n\nmax_number = find_max(10, 7, 4)\nprint('Maximum number is', max_number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to find the maximum from 3 numbers.\n\n### Input:\n10, 7, 4\n\n### Output:\ndef find_max(a, b, c):\n    max = a\n    if b > max:\n        max = b\n    if c > max:\n        max = c\n    return max\n\nmax_number = find_max(10, 7, 4)\nprint('Maximum number is', max_number)"}
{"instruction":"Using given data, generate random user reviews and ratings for a movie in Python.","input":"data = [{\n  \"movie_name\": \"Inception\"\n  \"movie_id\": \"213121\",\n  \"users\": [\"Alice\", \"Bob\", \"John\"]\n}];","output":"reviews = {\n  \"Alice\":{\n   \"rating\": random.randint(1, 5),\n   \"review\": \"I watched 'Inception' and I thought it was great!\"\n  },\n  \"Bob\":{\n   \"rating\": random.randint(1, 5),\n   \"review\": \"I watched 'Inception' and it was just okay.\"\n  },\n  \"John\":{\n   \"rating\": random.randint(1, 5),\n   \"review\": \"I didn't enjoy 'Inception' as much as some others.\"\n  }\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing given data, generate random user reviews and ratings for a movie in Python.\n\n### Input:\ndata = [{\n  \"movie_name\": \"Inception\"\n  \"movie_id\": \"213121\",\n  \"users\": [\"Alice\", \"Bob\", \"John\"]\n}];\n\n### Output:\nreviews = {\n  \"Alice\":{\n   \"rating\": random.randint(1, 5),\n   \"review\": \"I watched 'Inception' and I thought it was great!\"\n  },\n  \"Bob\":{\n   \"rating\": random.randint(1, 5),\n   \"review\": \"I watched 'Inception' and it was just okay.\"\n  },\n  \"John\":{\n   \"rating\": random.randint(1, 5),\n   \"review\": \"I didn't enjoy 'Inception' as much as some others.\"\n  }\n}"}
{"instruction":"Create an optimization algorithm in Python for finding the maximum value of a function.","input":"","output":"# This function contains our objective function: \n# the function that we are trying to maximize \ndef objective_fn(x):  \n    return x[0] * x[3] * (x[0] + x[1] + x[2]) + x[2] \n  \n# This function contains our constraints \ndef constraint_fn(x): \n    return x[0] * x[1] * x[2] * x[3] - 25  \n  \n# The constraint should be greater than or equal to 0\ncons = ({'type': 'ineq', 'fun': constraint_fn})\n\n# Bounds for x \nb = (1, 5) \nbnds = (b, b, b, b) \n\n# Initializing starting point of the solution  \nx0 = [1, 5, 5, 1]  \n  \n# maximum value at 5,4,4,2 is 5*4*4*2 = 80 \n\n# Calling scipy optimize minimize \n# to find the maximum value of \n# our objective_fn \nresult = opt.minimize(objective_fn, x0, method='SLSQP', bounds=bnds, constraints=cons)  \n  \n# Printing optimized value \nprint(result.x)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an optimization algorithm in Python for finding the maximum value of a function.\n\n### Input:\n\n\n### Output:\n# This function contains our objective function: \n# the function that we are trying to maximize \ndef objective_fn(x):  \n    return x[0] * x[3] * (x[0] + x[1] + x[2]) + x[2] \n  \n# This function contains our constraints \ndef constraint_fn(x): \n    return x[0] * x[1] * x[2] * x[3] - 25  \n  \n# The constraint should be greater than or equal to 0\ncons = ({'type': 'ineq', 'fun': constraint_fn})\n\n# Bounds for x \nb = (1, 5) \nbnds = (b, b, b, b) \n\n# Initializing starting point of the solution  \nx0 = [1, 5, 5, 1]  \n  \n# maximum value at 5,4,4,2 is 5*4*4*2 = 80 \n\n# Calling scipy optimize minimize \n# to find the maximum value of \n# our objective_fn \nresult = opt.minimize(objective_fn, x0, method='SLSQP', bounds=bnds, constraints=cons)  \n  \n# Printing optimized value \nprint(result.x)"}
{"instruction":"Use the provided data set to generate a bar chart in Python.","input":"x-axis values: 1, 2, 3, 4\ny-axis values: 10, 12, 7, 5","output":"import matplotlib.pyplot as plt\n\nx_values = [1, 2, 3, 4]\ny_values = [10, 12, 7, 5]\n\nplt.bar(x_values, y_values)\nplt.title('Bar Chart')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the provided data set to generate a bar chart in Python.\n\n### Input:\nx-axis values: 1, 2, 3, 4\ny-axis values: 10, 12, 7, 5\n\n### Output:\nimport matplotlib.pyplot as plt\n\nx_values = [1, 2, 3, 4]\ny_values = [10, 12, 7, 5]\n\nplt.bar(x_values, y_values)\nplt.title('Bar Chart')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()"}
{"instruction":"Create a Python program to implement the Fibonacci sequence.","input":"","output":"def fibonacci_seq(n): \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return fibonacci_seq(n-1)+fibonacci_seq(n-2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to implement the Fibonacci sequence.\n\n### Input:\n\n\n### Output:\ndef fibonacci_seq(n): \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return fibonacci_seq(n-1)+fibonacci_seq(n-2)"}
{"instruction":"Suggest a code improvement for the following python code to ensure that all input is valid.","input":"def get_user_info(username):\n    query = 'SELECT * FROM users WHERE username = {}'.format(username)\n    result = Database.execute_query(query)\n    return result","output":"def get_user_info(username):\n    query = 'SELECT * FROM users WHERE username = %s'\n    result = Database.execute_query(query, (username,))\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a code improvement for the following python code to ensure that all input is valid.\n\n### Input:\ndef get_user_info(username):\n    query = 'SELECT * FROM users WHERE username = {}'.format(username)\n    result = Database.execute_query(query)\n    return result\n\n### Output:\ndef get_user_info(username):\n    query = 'SELECT * FROM users WHERE username = %s'\n    result = Database.execute_query(query, (username,))\n    return result"}
{"instruction":"Write a python program that takes a list of numbers and converts them to strings.","input":"[1, 2, 3, 4]","output":"new_list = []\nfor i in range(0, len(list)):\n    new_list.append(str(list[i]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that takes a list of numbers and converts them to strings.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\nnew_list = []\nfor i in range(0, len(list)):\n    new_list.append(str(list[i]))"}
{"instruction":"Create a multiplayer online game in Python that allows 2 players to play against each other.","input":"","output":"\"\"\"\nCreating a Multiplayer Online Game in Python\n\"\"\"\n\nimport time\nimport random\n\n# Initializing the game\nplayers = []\n\n# Defining a function for playing the game\ndef play_game(player_1, player_2):\n    # Give both players 5 seconds to choose a number between 1 and 10\n    time.sleep(5)\n    player_1_num = random.randint(1, 10)\n    player_2_num = random.randint(1, 10)\n\n    # Check to see who won\n    if player_1_num > player_2_num:\n        print(\"Player 1 (\" + player_1 + \") wins!\")\n    elif player_2_num > player_1_num:\n        print(\"Player 2 (\" + player_2 + \") wins!\")\n    else:\n        print(\"It's a draw!\")\n\n# Defining a function to add two players\ndef add_player(player):\n    players.append(player)\n    if len(players) == 2:\n        play_game(players[0], players[1])\n\n# Start the game\nprint(\"Welcome to the game! Type 'add_player()' to add your name to the game.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a multiplayer online game in Python that allows 2 players to play against each other.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreating a Multiplayer Online Game in Python\n\"\"\"\n\nimport time\nimport random\n\n# Initializing the game\nplayers = []\n\n# Defining a function for playing the game\ndef play_game(player_1, player_2):\n    # Give both players 5 seconds to choose a number between 1 and 10\n    time.sleep(5)\n    player_1_num = random.randint(1, 10)\n    player_2_num = random.randint(1, 10)\n\n    # Check to see who won\n    if player_1_num > player_2_num:\n        print(\"Player 1 (\" + player_1 + \") wins!\")\n    elif player_2_num > player_1_num:\n        print(\"Player 2 (\" + player_2 + \") wins!\")\n    else:\n        print(\"It's a draw!\")\n\n# Defining a function to add two players\ndef add_player(player):\n    players.append(player)\n    if len(players) == 2:\n        play_game(players[0], players[1])\n\n# Start the game\nprint(\"Welcome to the game! Type 'add_player()' to add your name to the game.\")"}
{"instruction":"Upgrade the following code so that it runs on Python 3","input":"#This code runs on python 2\nprint \"Hello World!\"","output":"print(\"Hello World!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUpgrade the following code so that it runs on Python 3\n\n### Input:\n#This code runs on python 2\nprint \"Hello World!\"\n\n### Output:\nprint(\"Hello World!\")"}
{"instruction":"Create a Python program for predicting the stock market trend.","input":"Historical Stock Prices:\n[50, 55, 53, 57, 52, 49, 54]","output":"import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\ndata = np.array([[50], [55], [53], [57], [52], [49], [54]]).reshape(-1, 1)\n\nmodel = LinearRegression()\nmodel.fit(data[:-1], data[1:])\n\npredicted_value = model.predict([[54]])\n\nprint(\"The trend of stock price next day:\", predicted_value[0][0])\n\n# Output: The trend of stock price next day: 53.428571429","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for predicting the stock market trend.\n\n### Input:\nHistorical Stock Prices:\n[50, 55, 53, 57, 52, 49, 54]\n\n### Output:\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\ndata = np.array([[50], [55], [53], [57], [52], [49], [54]]).reshape(-1, 1)\n\nmodel = LinearRegression()\nmodel.fit(data[:-1], data[1:])\n\npredicted_value = model.predict([[54]])\n\nprint(\"The trend of stock price next day:\", predicted_value[0][0])\n\n# Output: The trend of stock price next day: 53.428571429"}
{"instruction":"Write a Python script which can print out all prime numbers between 0 and n.","input":"","output":"def print_all_primes(n):\n    for i in range(2, n+1):\n        if is_prime(i):\n            print(i)\n\ndef is_prime(num):\n    if num == 2 or num == 3:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    if num < 9:\n        return True\n    if num % 3 == 0:\n        return False\n    r = int(num**0.5)\n    f = 5\n    while f <= r:\n        if num % f == 0:\n            return False\n        if num % (f+2) == 0:\n            return False\n        f += 6\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script which can print out all prime numbers between 0 and n.\n\n### Input:\n\n\n### Output:\ndef print_all_primes(n):\n    for i in range(2, n+1):\n        if is_prime(i):\n            print(i)\n\ndef is_prime(num):\n    if num == 2 or num == 3:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    if num < 9:\n        return True\n    if num % 3 == 0:\n        return False\n    r = int(num**0.5)\n    f = 5\n    while f <= r:\n        if num % f == 0:\n            return False\n        if num % (f+2) == 0:\n            return False\n        f += 6\n    return True"}
{"instruction":"Generate a Python script that classifies dogs into breed classes.","input":"","output":"import cv2\n \n# Classifies a given image into one of the breed classes\ndef classify(image):\n    \n    # Retrieve the breed classes from the database\n    breeds = get_breeds()\n    closest_distance = float('inf')\n    closest_breed = None\n \n    # Create a feature descriptor for the image\n    feature_descriptor = cv2.xfeatures2d.SIFT_create()\n    (keypoints, descriptors) = feature_descriptor.detectAndCompute(image, None)\n \n    # For each breed in the database\n    for breed in breeds:\n        # Compute the Euclidean distance between the descriptors\n        distance = 0\n \n        for i in range(len(descriptors)):\n            distance += np.linalg.norm(descriptors[i] - breed[i])\n \n        # If it is smaller than the current distance, set it as the new closest distance\n        if distance < closest_distance:\n            closest_distance = distance\n            closest_breed = breed\n \n    # Return the closest breed\n    return closest_breed","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script that classifies dogs into breed classes.\n\n### Input:\n\n\n### Output:\nimport cv2\n \n# Classifies a given image into one of the breed classes\ndef classify(image):\n    \n    # Retrieve the breed classes from the database\n    breeds = get_breeds()\n    closest_distance = float('inf')\n    closest_breed = None\n \n    # Create a feature descriptor for the image\n    feature_descriptor = cv2.xfeatures2d.SIFT_create()\n    (keypoints, descriptors) = feature_descriptor.detectAndCompute(image, None)\n \n    # For each breed in the database\n    for breed in breeds:\n        # Compute the Euclidean distance between the descriptors\n        distance = 0\n \n        for i in range(len(descriptors)):\n            distance += np.linalg.norm(descriptors[i] - breed[i])\n \n        # If it is smaller than the current distance, set it as the new closest distance\n        if distance < closest_distance:\n            closest_distance = distance\n            closest_breed = breed\n \n    # Return the closest breed\n    return closest_breed"}
{"instruction":"Create a Python script to read a given PDF document.","input":"file = \u2018document.pdf\u2019","output":"import PyPDF2\n\n# open and read the pdf file\nfile = open('document.pdf', 'rb')\nreader = PyPDF2.PdfFileReader(file)\n\n# read complete document\nfor page in range(reader.numPages):\n    print(reader.getPage(page).extractText())\n\nfile.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to read a given PDF document.\n\n### Input:\nfile = \u2018document.pdf\u2019\n\n### Output:\nimport PyPDF2\n\n# open and read the pdf file\nfile = open('document.pdf', 'rb')\nreader = PyPDF2.PdfFileReader(file)\n\n# read complete document\nfor page in range(reader.numPages):\n    print(reader.getPage(page).extractText())\n\nfile.close()"}
{"instruction":"Create a python program to detect if a word is an isogram.","input":"","output":"def is_isogram(string):\n    # empty strings are isograms\n    if len(string) == 0:\n        return True\n\n    # convert string to lowercase \n    string = string.lower()\n\n    # create a set to store seen letters \n    seen_letters = set()\n\n    for char in string:\n        # if char is not seen, add it to set \n        if char not in seen_letters:  \n            seen_letters.add(char) \n        \n        # if char is already seen, it is not an isogram  \n        else: \n            return False\n\n    # all letters are unique, it is an isogram\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to detect if a word is an isogram.\n\n### Input:\n\n\n### Output:\ndef is_isogram(string):\n    # empty strings are isograms\n    if len(string) == 0:\n        return True\n\n    # convert string to lowercase \n    string = string.lower()\n\n    # create a set to store seen letters \n    seen_letters = set()\n\n    for char in string:\n        # if char is not seen, add it to set \n        if char not in seen_letters:  \n            seen_letters.add(char) \n        \n        # if char is already seen, it is not an isogram  \n        else: \n            return False\n\n    # all letters are unique, it is an isogram\n    return True"}
{"instruction":"Copy code to StationA and StationB, and set the hostnames StationA and StationB.","input":"","output":"\"\"\"\n\nWe need two special hostnames to connect to: \n\nStationA\n\nand \n\nStationB\n\n\"\"\"\n\n\nfrom __future__ import with_statement, print_function\nfrom fabric.api import local, settings, abort, run, sudo, cd, hosts, env, execute\nfrom fabric.contrib.console import confirm\nfrom fabric.operations import put, get\nfrom fabric.contrib.project import rsync_project\n\nimport re\nimport subprocess as sp \nimport os.path \nfrom   StringIO import StringIO\n\n\ncurrent_dir = os.path.dirname(os.path.realpath(__file__))\n\n\nVNC_LICENSE = [\n    \"xxxxx-xxxxx-xxxxx-xxxxx-xxxxx\"\n]\n\n\n# TODO: Put a proper deployment mechanism here.\nenv.key_filename = '\/home\/alcides\/.ssh\/zunzun_ec2_keypair_0.pem'\n\nStationA_H = 'ubuntu@54.149.116.230'\nStationB_H = 'ubuntu@54.149.116.233'\nBeefy_H    = 'ubuntu@52.11.217.155'\n# TODO: Make the IP number below deployment-specific...\nBeefy_InternalIP = '192.168.112.131'\nStationA_InternalIP = '192.168.112.129'\nStationB_InternalIP = '192.168.112.130'\nHomeDir_Name = \"ubuntu\"\n\n\n@hosts(StationA_H)\ndef StationA():\n    \"\"\"\n    Copies code to StationA \n    \"\"\"\n    rsync_project(\n        local_dir = \"scripts\/StationA\",\n        remote_dir = (\"\/home\/{HomeDir_Name}\/\".format(HomeDir_Name=HomeDir_Name))\n        )\n    run(\"ln -sf \/home\/{HomeDir_Name}\/StationA\/onstartup.py \/home\/{HomeDir_Name}\/onstartup.py\".format(HomeDir_Name=HomeDir_Name))\n\n\n@hosts(StationB_H)\ndef setup_dns_masq():\n    sudo(\"apt-get install -y dnsmasq\")\n    put(\n        local_path  = StringIO(\"addn-hosts=\/home\/{HomeDir_Name}\/dnsmasq_more.conf\\n\".format(HomeDir_Name=HomeDir_Name)),\n        remote_path = \"\/etc\/dnsmasq.conf\",\n        use_sudo=True)\n\n\n\n@hosts(StationB_H)\ndef StationB():\n    \"\"\"\n    Copies both the chrome plugin and the DNSMasq watcher \n    \"\"\"\n    rsync_project(\n        local_dir = \"scripts\/StationB\",\n        remote_dir = (\"\/home\/{HomeDir_Name}\/\".format(HomeDir_Name=HomeDir_Name))\n        )\n    rsync_project(\n        local_dir = \"scripts\/StationA\/chrome_captures_hars\",\n        remote_dir = ((\"\/home\/{HomeDir_Name}\/StationB\/\".format(HomeDir_Name=HomeDir_Name)).format(HomeDir_Name=HomeDir_Name))\n        )\n    run(\"ln -sf \/home\/{HomeDir_Name}\/StationB\/onstartup.py \/home\/{HomeDir_Name}\/onstartup.py\".format(HomeDir_Name=HomeDir_Name))\n\n\n@hosts(StationB_H)\ndef install_updatednsmasq_service():\n    with settings(warn_only=True):\n        sudo(\"service updatednsmasq stop\")\n    put(\n        local_path = \"scripts\/StationB\/configure_dnsmasq.py\",\n        remote_path = \"\/home\/{HomeDir_Name}\/StationB\/configure_dnsmasq.py\".format(HomeDir_Name=HomeDir_Name) ,\n        use_sudo = True\n        )\n    put(\n        local_path = StringIO(\"\"\"\ndescription \"Update dnsmasq\"\n\nstart on runlevel [2345]\nstop on runlevel [!2345]\n\numask 022\n\nconsole log\n\nenv PATH=\/opt\/openssl-1.0.2\/bin\/:\/usr\/bin:\/usr\/local\/bin:\/usr\/sbin:\/bin \nexport PATH\nenv LD_LIBRARY_PATH=\/opt\/openssl-1.0.2\/lib\nexport LD_LIBRARY_PATH\nenv USER={HomeDir_Name}\nexport USER\n\nscript \n    exec \/usr\/bin\/python \/home\/{HomeDir_Name}\/StationB\/configure_dnsmasq.py\nend script\n\n\"\"\".format(HomeDir_Name=HomeDir_Name)),\n        remote_path = \"\/etc\/init\/updatednsmasq.conf\",\n        use_sudo=True )\n    sudo(\"service updatednsmasq start\")\n\n\n@hosts(Beefy_H)\ndef Beefy():\n    sudo(\"apt-get update\")\n    sudo(\"apt-get -y install libgmp-dev\")\n\n\n@hosts(Beefy_H)\ndef BeefyRehMimic():\n    with settings(warn_only=True):\n        sudo(\"service mimic stop\")\n    put(\n        local_path  = \"dist\/build\/reh-mimic\/reh-mimic\",\n        remote_path = \"\/home\/{HomeDir_Name}\/reh-mimic\".format(HomeDir_Name=HomeDir_Name)\n        )\n    run(\"chmod ugo+x \/home\/{HomeDir_Name}\/reh-mimic\".format(HomeDir_Name=HomeDir_Name))\n    sudo(\"rm \/home\/{HomeDir_Name}\/mimic -rf\".format(HomeDir_Name=HomeDir_Name) )\n    rsync_project(\n        local_dir  = \"mimic\",\n        remote_dir = \"\/home\/{HomeDir_Name}\/\".format(HomeDir_Name=HomeDir_Name),\n        )\n    put(\n        local_path  = \"scripts\/mimic.conf\",\n        remote_path = \"\/etc\/init\/mimic.conf\",\n        use_sudo    = True\n        )\n    sudo(\"touch \/root\/.rnd\")\n    sudo(\"service mimic start\")\n\n\n\n@hosts(Beefy_H, StationA_H, StationB_H )\ndef configure_logging():\n    if env.host_string == StationA_H:\n        put(\n            local_path = StringIO(\"\"\"$template Logentries,\"199fb2e1-8227-4f73-9150-70a34a5d5e0c %HOSTNAME% %syslogtag%%msg%\\\\n\"\n*.* @@api.logentries.com:10000;Logentries\"\"\"),\n            remote_path = \"\/etc\/rsyslog.d\/70-logentries.conf\",\n            use_sudo = True )\n    elif env.host_string == StationB_H:\n        put(\n            local_path = StringIO(\"\"\"$template Logentries,\"3d2fd756-407a-4764-b130-1dd6f22a1b62 %HOSTNAME% %syslogtag%%msg%\\\\n\"\n*.* @@api.logentries.com:10000;Logentries\"\"\"),\n            remote_path = \"\/etc\/rsyslog.d\/70-logentries.conf\",\n            use_sudo = True )\n    else:\n        put(\n            local_path = StringIO(\"\"\"$template Logentries,\"7551d4e0-fa76-466f-8547-8c9a347a9363 %HOSTNAME% %syslogtag%%msg%\\\\n\"\n*.* @@api.logentries.com:10000;Logentries\"\"\"),\n            remote_path = \"\/etc\/rsyslog.d\/70-logentries.conf\",\n            use_sudo = True )\n        \n    sudo(\"service rsyslog restart\")\n    # Check logging works...\n    sudo(\"logger -t test Hello there Logentries\")\n\n\n@hosts (StationA_H, StationB_H)\ndef deploy_specific():\n    if env.host_string == StationA_H:\n        print(\"StationA deploy\")\n        StationA()\n    elif env.host_string == StationB_H:\n        print(\"StationB deploy\")\n        StationB()\n    else: \n        print(\"Beefy station deploy\")\n        Beefy()\n\n\n@hosts(StationA_H, StationB_H)\ndef apt_stations():\n    sudo(\"apt-get update\")\n    sudo(\"apt-get install -y xutils xbase-clients xfonts-base xfonts-75dpi xfonts-100dpi\")\n    sudo(\"apt-get install -y python-pip\")\n    sudo(\"apt-get install -y xdotool\")\n    sudo(\"apt-get install -y xfwm4\") \n\n\n@hosts(StationA_H, StationB_H)\ndef pythonlibs():\n    sudo(\"pip install python-daemon>=2.0\")\n    sudo(\"pip install raven\")\n\n\n@hosts(Beefy_H, StationA_H, StationB_H)\ndef ssl():\n    \"\"\"\n    Copies Openssl and curl to the target hosts...\n    \"\"\"\n    sudo(\"mkdir -p \/opt\/openssl-1.0.2\/\")\n    sudo((\"chown {HomeDir_Name} \/opt\/openssl-1.0.2\/\".format(HomeDir_Name=HomeDir_Name)))\n    rsync_project(\n        local_dir = \"\/opt\/openssl-1.0.2\",\n        remote_dir = \"\/opt\/\",\n        extra_opts=\"-avz\"\n        )\n    put(\n        local_path = \"scripts\/ca-certificates.crt\",\n        remote_path = \"\/etc\/ssl\/certs\/ca-certificates.crt\",\n        use_sudo = True\n        )\n\n\n@hosts(Beefy_H, StationA_H, StationB_H)\ndef ca():\n    \"\"\"\n    Copies the ca certificate to the home...\n    \"\"\"\n    put(\n        local_path = \"mimic-here\/config\/ca\/cacert.pem\",\n        remote_path = (\"\/home\/{HomeDir_Name}\/cacert.pem\".format(HomeDir_Name=HomeDir_Name)),\n        use_sudo = True\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef install_vnc():\n    \"\"\"\n    \n    \"\"\"\n    # run(\"curl -L -o VNC.tar.gz https:\/\/www.realvnc.com\/download\/binary\/1720\/\")\n    # run(\"tar xvf VNC-5.2.3-Linux-x64-ANY.tar.gz\")\n\n\n    put(\n        local_path = \"scripts\/VNC-5.2.3-Linux-x64-ANY.tar.gz\",\n        remote_path = (\"\/home\/{HomeDir_Name}\/VNC-5.2.3-Linux-x64-ANY.tar.gz\".format(HomeDir_Name=HomeDir_Name)),\n        use_sudo = True\n        )\n    run((\"tar -xzf \/home\/{HomeDir_Name}\/VNC-5.2.3-Linux-x64-ANY.tar.gz\".format(HomeDir_Name=HomeDir_Name)))\n    # Get a handier name.... \n    run(\"rm -rf vnc\")\n    run((\"mv \/home\/{HomeDir_Name}\/VNC-5.2.3-Linux-x64 \/home\/{HomeDir_Name}\/vnc\".format(HomeDir_Name=HomeDir_Name)))\n    sudo((\"\/home\/{HomeDir_Name}\/vnc\/vnclicense -add {VncLicense}\".format(\n        HomeDir_Name= HomeDir_Name,\n        VncLicense = VNC_LICENSE[0]\n    )))\n    # Will demand some for of interactive input...\n    run((\"mkdir -p \/home\/{HomeDir_Name}\/.vnc\/\".format(HomeDir_Name=HomeDir_Name)))\n    run((\"mkdir -p \/home\/{HomeDir_Name}\/.vnc\/config.d\/\".format(HomeDir_Name=HomeDir_Name)))\n    sudo((\"\/home\/{HomeDir_Name}\/vnc\/vncpasswd \/home\/{HomeDir_Name}\/.vnc\/config.d\/Xvnc\".format(HomeDir_Name=HomeDir_Name)))\n    vnc_fix_permissions()\n\n@hosts(StationA_H, StationB_H)\ndef vnc_fix_permissions():\n    sudo((\"chown {HomeDir_Name} \/home\/{HomeDir_Name}\/.vnc -R\").format(HomeDir_Name=HomeDir_Name))\n\n@hosts(StationA_H, StationB_H)\ndef install_vnc_xstartup():\n    run((\"mkdir -p \/home\/{HomeDir_Name}\/.vnc\/\".format(HomeDir_Name=HomeDir_Name)))\n    run((\"mkdir -p \/home\/{HomeDir_Name}\/.vnc\/config.d\/\".format(HomeDir_Name=HomeDir_Name)))\n    put(\n        local_path = \"scripts\/vnc-xstartup\",\n        remote_path = (\"\/home\/{HomeDir_Name}\/.vnc\/xstartup\".format(HomeDir_Name=HomeDir_Name))\n        )\n    run(\"chmod ugo+x \/home\/{HomeDir_Name}\/.vnc\/xstartup\".format(HomeDir_Name=HomeDir_Name))\n    put(\n        local_path = \"scripts\/xvncfontpath\",\n        remote_path = (\"\/home\/{HomeDir_Name}\/.vnc\/config.d\/xvncfontpath\".format(HomeDir_Name=HomeDir_Name))\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef setup_google_chrome():\n    put(\n        local_path = \"scripts\/google-chrome-stable_current_amd64.deb\",\n        remote_path = (\"\/home\/{HomeDir_Name}\/google-chrome-stable_current_amd64.deb\".format(HomeDir_Name=HomeDir_Name)),\n        use_sudo = True\n        )\n    really_setup_google_chrome()\n\n\n@hosts(Beefy_H, StationA_H, StationB_H)\ndef ensure_local_hosts():\n    # Get the contents of \/etc\/hosts\n    local_file = StringIO()\n    get(\n        local_path = local_file,\n        remote_path = \"\/etc\/hosts\",\n        use_sudo = True \n        )\n    hosts_file = local_file.getvalue()\n    snippet =  \"\"\"# DO NOT EDIT BELOW BY HAND\n{Beefy_InternalIP} instr.httpdos.com\n192.168.112.129 ip-192-168-112-129\n192.168.112.130 ip-192-168-112-130\n192.168.112.131 ip-192-168-112-131\n# END DO NOT EDIT BELOW\"\"\".format(\n    StationA_InternalIP = StationA_InternalIP,\n    Beefy_InternalIP    = Beefy_InternalIP\n    )\n    mo = re.search(r\"# DO NOT EDIT BELOW BY HAND\\n(.*?)\\n# END DO NOT EDIT BELOW\", hosts_file, re.MULTILINE)\n    if mo:\n        part_before = hosts_file[:mo.start(0)]\n        part_after = hosts_file[mo.end(0):]\n        hosts_file = part_before + snippet + part_after\n    else:\n        hosts_file += \"\\n\" + snippet\n\n    put(\n        local_path = StringIO(hosts_file),\n        remote_path = \"\/etc\/hosts\",\n        use_sudo = True\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef really_setup_google_chrome():\n    sudo(\"apt-get update\")\n    sudo((\"apt-get -f install -y\".format(HomeDir_Name=HomeDir_Name)))\n    sudo(\"apt-get install -y --fix-missing xdg-utils\")\n    sudo((\"dpkg -i --force-depends \/home\/{HomeDir_Name}\/google-chrome-stable_current_amd64.deb\".format(HomeDir_Name=HomeDir_Name)))\n    sudo((\"apt-get -f install -y\".format(HomeDir_Name=HomeDir_Name)))\n\n\n@hosts(StationA_H, StationB_H)\ndef setup_vnc_service():\n    put(\n        local_path = \"scripts\/vncserv-{HomeDir_Name}.conf\".format(HomeDir_Name=HomeDir_Name),\n        remote_path = \"\/etc\/init\/vncserv.conf\",\n        use_sudo = True\n        )\n    put(\n        local_path = \"scripts\/undaemon.py\",\n        remote_path = \"\/home\/{HomeDir_Name}\/undaemon.py\".format(HomeDir_Name=HomeDir_Name)\n        )\n    run(\"chmod ugo+x \/home\/{HomeDir_Name}\/undaemon.py\".format(HomeDir_Name=HomeDir_Name))\n    with settings(warn_only=True):\n        sudo(\n            \"service vncserv start\"\n            )\n\n\n@hosts(StationA_H, StationB_H)\ndef  disable_lightdm():\n    contents = StringIO(\"manual\")\n    put(\n        local_path = contents, \n        remote_path = \"\/etc\/init\/lightdm.override\",\n        use_sudo=True\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef touch_xauthority():\n    run(\"touch $HOME\/.Xauthority\")\n\n\n@hosts(StationA_H, StationB_H)\ndef deploy():\n    execute(apt_stations)\n    execute(setup_dns_masq)\n    execute(setup_google_chrome)\n    execute(deploy_specific)\n    execute(touch_xauthority)\n    execute(disable_lightdm)\n    execute(StationA)\n    execute(StationB)\n    execute(Beefy)\n    execute(ca)\n    execute(ssl)\n    execute(install_vnc)\n    execute(install_vnc_xstartup)\n    execute(ensure_local_hosts)\n    execute(setup_vnc_service)\n    execute(pythonlibs)\n    execute(BeefyRehMimic)\n    execute(install_updatednsmasq_service)    \n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCopy code to StationA and StationB, and set the hostnames StationA and StationB.\n\n### Input:\n\n\n### Output:\n\"\"\"\n\nWe need two special hostnames to connect to: \n\nStationA\n\nand \n\nStationB\n\n\"\"\"\n\n\nfrom __future__ import with_statement, print_function\nfrom fabric.api import local, settings, abort, run, sudo, cd, hosts, env, execute\nfrom fabric.contrib.console import confirm\nfrom fabric.operations import put, get\nfrom fabric.contrib.project import rsync_project\n\nimport re\nimport subprocess as sp \nimport os.path \nfrom   StringIO import StringIO\n\n\ncurrent_dir = os.path.dirname(os.path.realpath(__file__))\n\n\nVNC_LICENSE = [\n    \"xxxxx-xxxxx-xxxxx-xxxxx-xxxxx\"\n]\n\n\n# TODO: Put a proper deployment mechanism here.\nenv.key_filename = '\/home\/alcides\/.ssh\/zunzun_ec2_keypair_0.pem'\n\nStationA_H = 'ubuntu@54.149.116.230'\nStationB_H = 'ubuntu@54.149.116.233'\nBeefy_H    = 'ubuntu@52.11.217.155'\n# TODO: Make the IP number below deployment-specific...\nBeefy_InternalIP = '192.168.112.131'\nStationA_InternalIP = '192.168.112.129'\nStationB_InternalIP = '192.168.112.130'\nHomeDir_Name = \"ubuntu\"\n\n\n@hosts(StationA_H)\ndef StationA():\n    \"\"\"\n    Copies code to StationA \n    \"\"\"\n    rsync_project(\n        local_dir = \"scripts\/StationA\",\n        remote_dir = (\"\/home\/{HomeDir_Name}\/\".format(HomeDir_Name=HomeDir_Name))\n        )\n    run(\"ln -sf \/home\/{HomeDir_Name}\/StationA\/onstartup.py \/home\/{HomeDir_Name}\/onstartup.py\".format(HomeDir_Name=HomeDir_Name))\n\n\n@hosts(StationB_H)\ndef setup_dns_masq():\n    sudo(\"apt-get install -y dnsmasq\")\n    put(\n        local_path  = StringIO(\"addn-hosts=\/home\/{HomeDir_Name}\/dnsmasq_more.conf\\n\".format(HomeDir_Name=HomeDir_Name)),\n        remote_path = \"\/etc\/dnsmasq.conf\",\n        use_sudo=True)\n\n\n\n@hosts(StationB_H)\ndef StationB():\n    \"\"\"\n    Copies both the chrome plugin and the DNSMasq watcher \n    \"\"\"\n    rsync_project(\n        local_dir = \"scripts\/StationB\",\n        remote_dir = (\"\/home\/{HomeDir_Name}\/\".format(HomeDir_Name=HomeDir_Name))\n        )\n    rsync_project(\n        local_dir = \"scripts\/StationA\/chrome_captures_hars\",\n        remote_dir = ((\"\/home\/{HomeDir_Name}\/StationB\/\".format(HomeDir_Name=HomeDir_Name)).format(HomeDir_Name=HomeDir_Name))\n        )\n    run(\"ln -sf \/home\/{HomeDir_Name}\/StationB\/onstartup.py \/home\/{HomeDir_Name}\/onstartup.py\".format(HomeDir_Name=HomeDir_Name))\n\n\n@hosts(StationB_H)\ndef install_updatednsmasq_service():\n    with settings(warn_only=True):\n        sudo(\"service updatednsmasq stop\")\n    put(\n        local_path = \"scripts\/StationB\/configure_dnsmasq.py\",\n        remote_path = \"\/home\/{HomeDir_Name}\/StationB\/configure_dnsmasq.py\".format(HomeDir_Name=HomeDir_Name) ,\n        use_sudo = True\n        )\n    put(\n        local_path = StringIO(\"\"\"\ndescription \"Update dnsmasq\"\n\nstart on runlevel [2345]\nstop on runlevel [!2345]\n\numask 022\n\nconsole log\n\nenv PATH=\/opt\/openssl-1.0.2\/bin\/:\/usr\/bin:\/usr\/local\/bin:\/usr\/sbin:\/bin \nexport PATH\nenv LD_LIBRARY_PATH=\/opt\/openssl-1.0.2\/lib\nexport LD_LIBRARY_PATH\nenv USER={HomeDir_Name}\nexport USER\n\nscript \n    exec \/usr\/bin\/python \/home\/{HomeDir_Name}\/StationB\/configure_dnsmasq.py\nend script\n\n\"\"\".format(HomeDir_Name=HomeDir_Name)),\n        remote_path = \"\/etc\/init\/updatednsmasq.conf\",\n        use_sudo=True )\n    sudo(\"service updatednsmasq start\")\n\n\n@hosts(Beefy_H)\ndef Beefy():\n    sudo(\"apt-get update\")\n    sudo(\"apt-get -y install libgmp-dev\")\n\n\n@hosts(Beefy_H)\ndef BeefyRehMimic():\n    with settings(warn_only=True):\n        sudo(\"service mimic stop\")\n    put(\n        local_path  = \"dist\/build\/reh-mimic\/reh-mimic\",\n        remote_path = \"\/home\/{HomeDir_Name}\/reh-mimic\".format(HomeDir_Name=HomeDir_Name)\n        )\n    run(\"chmod ugo+x \/home\/{HomeDir_Name}\/reh-mimic\".format(HomeDir_Name=HomeDir_Name))\n    sudo(\"rm \/home\/{HomeDir_Name}\/mimic -rf\".format(HomeDir_Name=HomeDir_Name) )\n    rsync_project(\n        local_dir  = \"mimic\",\n        remote_dir = \"\/home\/{HomeDir_Name}\/\".format(HomeDir_Name=HomeDir_Name),\n        )\n    put(\n        local_path  = \"scripts\/mimic.conf\",\n        remote_path = \"\/etc\/init\/mimic.conf\",\n        use_sudo    = True\n        )\n    sudo(\"touch \/root\/.rnd\")\n    sudo(\"service mimic start\")\n\n\n\n@hosts(Beefy_H, StationA_H, StationB_H )\ndef configure_logging():\n    if env.host_string == StationA_H:\n        put(\n            local_path = StringIO(\"\"\"$template Logentries,\"199fb2e1-8227-4f73-9150-70a34a5d5e0c %HOSTNAME% %syslogtag%%msg%\\\\n\"\n*.* @@api.logentries.com:10000;Logentries\"\"\"),\n            remote_path = \"\/etc\/rsyslog.d\/70-logentries.conf\",\n            use_sudo = True )\n    elif env.host_string == StationB_H:\n        put(\n            local_path = StringIO(\"\"\"$template Logentries,\"3d2fd756-407a-4764-b130-1dd6f22a1b62 %HOSTNAME% %syslogtag%%msg%\\\\n\"\n*.* @@api.logentries.com:10000;Logentries\"\"\"),\n            remote_path = \"\/etc\/rsyslog.d\/70-logentries.conf\",\n            use_sudo = True )\n    else:\n        put(\n            local_path = StringIO(\"\"\"$template Logentries,\"7551d4e0-fa76-466f-8547-8c9a347a9363 %HOSTNAME% %syslogtag%%msg%\\\\n\"\n*.* @@api.logentries.com:10000;Logentries\"\"\"),\n            remote_path = \"\/etc\/rsyslog.d\/70-logentries.conf\",\n            use_sudo = True )\n        \n    sudo(\"service rsyslog restart\")\n    # Check logging works...\n    sudo(\"logger -t test Hello there Logentries\")\n\n\n@hosts (StationA_H, StationB_H)\ndef deploy_specific():\n    if env.host_string == StationA_H:\n        print(\"StationA deploy\")\n        StationA()\n    elif env.host_string == StationB_H:\n        print(\"StationB deploy\")\n        StationB()\n    else: \n        print(\"Beefy station deploy\")\n        Beefy()\n\n\n@hosts(StationA_H, StationB_H)\ndef apt_stations():\n    sudo(\"apt-get update\")\n    sudo(\"apt-get install -y xutils xbase-clients xfonts-base xfonts-75dpi xfonts-100dpi\")\n    sudo(\"apt-get install -y python-pip\")\n    sudo(\"apt-get install -y xdotool\")\n    sudo(\"apt-get install -y xfwm4\") \n\n\n@hosts(StationA_H, StationB_H)\ndef pythonlibs():\n    sudo(\"pip install python-daemon>=2.0\")\n    sudo(\"pip install raven\")\n\n\n@hosts(Beefy_H, StationA_H, StationB_H)\ndef ssl():\n    \"\"\"\n    Copies Openssl and curl to the target hosts...\n    \"\"\"\n    sudo(\"mkdir -p \/opt\/openssl-1.0.2\/\")\n    sudo((\"chown {HomeDir_Name} \/opt\/openssl-1.0.2\/\".format(HomeDir_Name=HomeDir_Name)))\n    rsync_project(\n        local_dir = \"\/opt\/openssl-1.0.2\",\n        remote_dir = \"\/opt\/\",\n        extra_opts=\"-avz\"\n        )\n    put(\n        local_path = \"scripts\/ca-certificates.crt\",\n        remote_path = \"\/etc\/ssl\/certs\/ca-certificates.crt\",\n        use_sudo = True\n        )\n\n\n@hosts(Beefy_H, StationA_H, StationB_H)\ndef ca():\n    \"\"\"\n    Copies the ca certificate to the home...\n    \"\"\"\n    put(\n        local_path = \"mimic-here\/config\/ca\/cacert.pem\",\n        remote_path = (\"\/home\/{HomeDir_Name}\/cacert.pem\".format(HomeDir_Name=HomeDir_Name)),\n        use_sudo = True\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef install_vnc():\n    \"\"\"\n    \n    \"\"\"\n    # run(\"curl -L -o VNC.tar.gz https:\/\/www.realvnc.com\/download\/binary\/1720\/\")\n    # run(\"tar xvf VNC-5.2.3-Linux-x64-ANY.tar.gz\")\n\n\n    put(\n        local_path = \"scripts\/VNC-5.2.3-Linux-x64-ANY.tar.gz\",\n        remote_path = (\"\/home\/{HomeDir_Name}\/VNC-5.2.3-Linux-x64-ANY.tar.gz\".format(HomeDir_Name=HomeDir_Name)),\n        use_sudo = True\n        )\n    run((\"tar -xzf \/home\/{HomeDir_Name}\/VNC-5.2.3-Linux-x64-ANY.tar.gz\".format(HomeDir_Name=HomeDir_Name)))\n    # Get a handier name.... \n    run(\"rm -rf vnc\")\n    run((\"mv \/home\/{HomeDir_Name}\/VNC-5.2.3-Linux-x64 \/home\/{HomeDir_Name}\/vnc\".format(HomeDir_Name=HomeDir_Name)))\n    sudo((\"\/home\/{HomeDir_Name}\/vnc\/vnclicense -add {VncLicense}\".format(\n        HomeDir_Name= HomeDir_Name,\n        VncLicense = VNC_LICENSE[0]\n    )))\n    # Will demand some for of interactive input...\n    run((\"mkdir -p \/home\/{HomeDir_Name}\/.vnc\/\".format(HomeDir_Name=HomeDir_Name)))\n    run((\"mkdir -p \/home\/{HomeDir_Name}\/.vnc\/config.d\/\".format(HomeDir_Name=HomeDir_Name)))\n    sudo((\"\/home\/{HomeDir_Name}\/vnc\/vncpasswd \/home\/{HomeDir_Name}\/.vnc\/config.d\/Xvnc\".format(HomeDir_Name=HomeDir_Name)))\n    vnc_fix_permissions()\n\n@hosts(StationA_H, StationB_H)\ndef vnc_fix_permissions():\n    sudo((\"chown {HomeDir_Name} \/home\/{HomeDir_Name}\/.vnc -R\").format(HomeDir_Name=HomeDir_Name))\n\n@hosts(StationA_H, StationB_H)\ndef install_vnc_xstartup():\n    run((\"mkdir -p \/home\/{HomeDir_Name}\/.vnc\/\".format(HomeDir_Name=HomeDir_Name)))\n    run((\"mkdir -p \/home\/{HomeDir_Name}\/.vnc\/config.d\/\".format(HomeDir_Name=HomeDir_Name)))\n    put(\n        local_path = \"scripts\/vnc-xstartup\",\n        remote_path = (\"\/home\/{HomeDir_Name}\/.vnc\/xstartup\".format(HomeDir_Name=HomeDir_Name))\n        )\n    run(\"chmod ugo+x \/home\/{HomeDir_Name}\/.vnc\/xstartup\".format(HomeDir_Name=HomeDir_Name))\n    put(\n        local_path = \"scripts\/xvncfontpath\",\n        remote_path = (\"\/home\/{HomeDir_Name}\/.vnc\/config.d\/xvncfontpath\".format(HomeDir_Name=HomeDir_Name))\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef setup_google_chrome():\n    put(\n        local_path = \"scripts\/google-chrome-stable_current_amd64.deb\",\n        remote_path = (\"\/home\/{HomeDir_Name}\/google-chrome-stable_current_amd64.deb\".format(HomeDir_Name=HomeDir_Name)),\n        use_sudo = True\n        )\n    really_setup_google_chrome()\n\n\n@hosts(Beefy_H, StationA_H, StationB_H)\ndef ensure_local_hosts():\n    # Get the contents of \/etc\/hosts\n    local_file = StringIO()\n    get(\n        local_path = local_file,\n        remote_path = \"\/etc\/hosts\",\n        use_sudo = True \n        )\n    hosts_file = local_file.getvalue()\n    snippet =  \"\"\"# DO NOT EDIT BELOW BY HAND\n{Beefy_InternalIP} instr.httpdos.com\n192.168.112.129 ip-192-168-112-129\n192.168.112.130 ip-192-168-112-130\n192.168.112.131 ip-192-168-112-131\n# END DO NOT EDIT BELOW\"\"\".format(\n    StationA_InternalIP = StationA_InternalIP,\n    Beefy_InternalIP    = Beefy_InternalIP\n    )\n    mo = re.search(r\"# DO NOT EDIT BELOW BY HAND\\n(.*?)\\n# END DO NOT EDIT BELOW\", hosts_file, re.MULTILINE)\n    if mo:\n        part_before = hosts_file[:mo.start(0)]\n        part_after = hosts_file[mo.end(0):]\n        hosts_file = part_before + snippet + part_after\n    else:\n        hosts_file += \"\\n\" + snippet\n\n    put(\n        local_path = StringIO(hosts_file),\n        remote_path = \"\/etc\/hosts\",\n        use_sudo = True\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef really_setup_google_chrome():\n    sudo(\"apt-get update\")\n    sudo((\"apt-get -f install -y\".format(HomeDir_Name=HomeDir_Name)))\n    sudo(\"apt-get install -y --fix-missing xdg-utils\")\n    sudo((\"dpkg -i --force-depends \/home\/{HomeDir_Name}\/google-chrome-stable_current_amd64.deb\".format(HomeDir_Name=HomeDir_Name)))\n    sudo((\"apt-get -f install -y\".format(HomeDir_Name=HomeDir_Name)))\n\n\n@hosts(StationA_H, StationB_H)\ndef setup_vnc_service():\n    put(\n        local_path = \"scripts\/vncserv-{HomeDir_Name}.conf\".format(HomeDir_Name=HomeDir_Name),\n        remote_path = \"\/etc\/init\/vncserv.conf\",\n        use_sudo = True\n        )\n    put(\n        local_path = \"scripts\/undaemon.py\",\n        remote_path = \"\/home\/{HomeDir_Name}\/undaemon.py\".format(HomeDir_Name=HomeDir_Name)\n        )\n    run(\"chmod ugo+x \/home\/{HomeDir_Name}\/undaemon.py\".format(HomeDir_Name=HomeDir_Name))\n    with settings(warn_only=True):\n        sudo(\n            \"service vncserv start\"\n            )\n\n\n@hosts(StationA_H, StationB_H)\ndef  disable_lightdm():\n    contents = StringIO(\"manual\")\n    put(\n        local_path = contents, \n        remote_path = \"\/etc\/init\/lightdm.override\",\n        use_sudo=True\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef touch_xauthority():\n    run(\"touch $HOME\/.Xauthority\")\n\n\n@hosts(StationA_H, StationB_H)\ndef deploy():\n    execute(apt_stations)\n    execute(setup_dns_masq)\n    execute(setup_google_chrome)\n    execute(deploy_specific)\n    execute(touch_xauthority)\n    execute(disable_lightdm)\n    execute(StationA)\n    execute(StationB)\n    execute(Beefy)\n    execute(ca)\n    execute(ssl)\n    execute(install_vnc)\n    execute(install_vnc_xstartup)\n    execute(ensure_local_hosts)\n    execute(setup_vnc_service)\n    execute(pythonlibs)\n    execute(BeefyRehMimic)\n    execute(install_updatednsmasq_service)    \n"}
{"instruction":"Design a script in Python to scrape text data from a particular web page.","input":"url = 'https:\/\/en.wikipedia.org\/wiki\/Movie'","output":"from bs4 import BeautifulSoup\nimport requests\n\n# Get the HTML of the page\nhtml_content = requests.get(url).text\n\n# Create the Soup object\nsoup = BeautifulSoup(html_content, 'lxml')\n\n# Find the text data\ndata = soup.find_all('p')\n\n# Print the text data\nfor element in data:\n      print(element.text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a script in Python to scrape text data from a particular web page.\n\n### Input:\nurl = 'https:\/\/en.wikipedia.org\/wiki\/Movie'\n\n### Output:\nfrom bs4 import BeautifulSoup\nimport requests\n\n# Get the HTML of the page\nhtml_content = requests.get(url).text\n\n# Create the Soup object\nsoup = BeautifulSoup(html_content, 'lxml')\n\n# Find the text data\ndata = soup.find_all('p')\n\n# Print the text data\nfor element in data:\n      print(element.text)"}
{"instruction":"Generate a Python function which finds all prime numbers between two given numbers.","input":"lower boundary: 0\nupper boundary: 15","output":"def find_prime_numbers(lower, upper):\n    result = []\n    # check all numbers from lower boundary to upper boundary\n    for num in range(lower, upper + 1):\n        # check if the number is prime\n        if is_prime(num):\n            result.append(num)\n    return result\n\ndef is_prime(num):\n    for i in range(2, num):\n        if (num % i == 0):\n            return False\n    return True\n\nprint(find_prime_numbers(0, 15))\n\n# Output: [2, 3, 5, 7, 11, 13]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function which finds all prime numbers between two given numbers.\n\n### Input:\nlower boundary: 0\nupper boundary: 15\n\n### Output:\ndef find_prime_numbers(lower, upper):\n    result = []\n    # check all numbers from lower boundary to upper boundary\n    for num in range(lower, upper + 1):\n        # check if the number is prime\n        if is_prime(num):\n            result.append(num)\n    return result\n\ndef is_prime(num):\n    for i in range(2, num):\n        if (num % i == 0):\n            return False\n    return True\n\nprint(find_prime_numbers(0, 15))\n\n# Output: [2, 3, 5, 7, 11, 13]"}
{"instruction":"Create a python function that computes the Goldbach conjecture for a given positive even number n.","input":"","output":"def Goldbach_conjecture(n):\n    assert type(n) == int and n > 0, \"n must be a positive integer.\"\n    if n % 2 != 0:\n        raise ValueError(\"n must be an even number.\")\n    \n\t# list to hold all the prime pairs that add to n\n    prime_pairs = []\n    # find all prime numbers less than n\n    primes = [x for x in range(2, n+1) if isprime(x)]\n    # loop through all prime numbers\n    for prime_x in primes:\n        # check if prime_x added to any prime number less than prime_x \n        # equals n. If true, add that prime pair to the prime_pairs list\n        for prime_y in primes:\n            if prime_y < prime_x and prime_x + prime_y == n:\n                prime_pairs.append((prime_x, prime_y))\n    return prime_pairs\n\ndef isprime(n):\n    # check if n is prime\n    if n < 2:\n        return False\n    if n % 2 == 0 and n > 2: \n        return False\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function that computes the Goldbach conjecture for a given positive even number n.\n\n### Input:\n\n\n### Output:\ndef Goldbach_conjecture(n):\n    assert type(n) == int and n > 0, \"n must be a positive integer.\"\n    if n % 2 != 0:\n        raise ValueError(\"n must be an even number.\")\n    \n\t# list to hold all the prime pairs that add to n\n    prime_pairs = []\n    # find all prime numbers less than n\n    primes = [x for x in range(2, n+1) if isprime(x)]\n    # loop through all prime numbers\n    for prime_x in primes:\n        # check if prime_x added to any prime number less than prime_x \n        # equals n. If true, add that prime pair to the prime_pairs list\n        for prime_y in primes:\n            if prime_y < prime_x and prime_x + prime_y == n:\n                prime_pairs.append((prime_x, prime_y))\n    return prime_pairs\n\ndef isprime(n):\n    # check if n is prime\n    if n < 2:\n        return False\n    if n % 2 == 0 and n > 2: \n        return False\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"instruction":"Create a Python script which inputs a sentence and performs POS tagging and letter count for the text using NLTK library.","input":"This is an example sentence.","output":"import nltk\n\nsentence = 'This is an example sentence.'\nwords = nltk.word_tokenize(sentence)\ntagged_words = nltk.pos_tag(words)\n\nletter_count = 0\nfor word in words:\n letter_count += len(word)\n\nprint('POS Tags: ', tagged_words)\nprint('Letter Count: ', letter_count)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script which inputs a sentence and performs POS tagging and letter count for the text using NLTK library.\n\n### Input:\nThis is an example sentence.\n\n### Output:\nimport nltk\n\nsentence = 'This is an example sentence.'\nwords = nltk.word_tokenize(sentence)\ntagged_words = nltk.pos_tag(words)\n\nletter_count = 0\nfor word in words:\n letter_count += len(word)\n\nprint('POS Tags: ', tagged_words)\nprint('Letter Count: ', letter_count)"}
{"instruction":"Design a Python program that can identify an anomaly from a given data set.","input":"data_set = [[7, 4.2], [5.5, 3.3], [7.4, 4.1], [4.5, 2.4], [8, 5.1]]","output":"def findAnomaly(data):\n  mean = []\n  std = []\n  for column in data.T:\n    mean.append(np.mean(column))\n    std.append(np.std(column))\n  \n  anomalies = []\n  for row in data:\n    zscore = []\n    for i in range(len(mean)):\n      zscore.append((row[i] - mean[i])\/std[i])\n    if np.max(zscore) > 2:\n      anomalies.append(row)\n\n  return anomalies","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program that can identify an anomaly from a given data set.\n\n### Input:\ndata_set = [[7, 4.2], [5.5, 3.3], [7.4, 4.1], [4.5, 2.4], [8, 5.1]]\n\n### Output:\ndef findAnomaly(data):\n  mean = []\n  std = []\n  for column in data.T:\n    mean.append(np.mean(column))\n    std.append(np.std(column))\n  \n  anomalies = []\n  for row in data:\n    zscore = []\n    for i in range(len(mean)):\n      zscore.append((row[i] - mean[i])\/std[i])\n    if np.max(zscore) > 2:\n      anomalies.append(row)\n\n  return anomalies"}
{"instruction":"Create a Python script that validates email addresses. It should accept one argument which is an email address as a string and output \u2018valid\u2019 or \u2018invalid\u2019 depending on whether the email address is valid or not.","input":"example@example.com","output":"import re\n\ndef is_valid_email(email):\n email_regex = re.compile(r'^[\\w.+-]+@[\\w.-]+\\.[a-zA-Z]{2,4}$')\n return True if email_regex.match(email) else False\n\naddress = input(\"Please enter an email address: \")\n\nif is_valid_email(address):\n print('Valid')\nelse:\n print('Invalid')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that validates email addresses. It should accept one argument which is an email address as a string and output \u2018valid\u2019 or \u2018invalid\u2019 depending on whether the email address is valid or not.\n\n### Input:\nexample@example.com\n\n### Output:\nimport re\n\ndef is_valid_email(email):\n email_regex = re.compile(r'^[\\w.+-]+@[\\w.-]+\\.[a-zA-Z]{2,4}$')\n return True if email_regex.match(email) else False\n\naddress = input(\"Please enter an email address: \")\n\nif is_valid_email(address):\n print('Valid')\nelse:\n print('Invalid')"}
{"instruction":"Write an efficient algorithm in Python to find the second smallest number in an array.","input":"[9, 7, 4, 8, 2]","output":"def find_second_smallest(arr):\n    smallest = arr[0]\n    second_smallest = None\n    for i in range(1, len(arr)):\n        if arr[i] < smallest:\n            second_smallest = smallest\n            smallest = arr[i]\n    return second_smallest\n\narr = [9, 7, 4, 8, 2]\n\nsecond_smallest = find_second_smallest(arr)\n\nprint(\"Second smallest number is:\", second_smallest) # Output is 7","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an efficient algorithm in Python to find the second smallest number in an array.\n\n### Input:\n[9, 7, 4, 8, 2]\n\n### Output:\ndef find_second_smallest(arr):\n    smallest = arr[0]\n    second_smallest = None\n    for i in range(1, len(arr)):\n        if arr[i] < smallest:\n            second_smallest = smallest\n            smallest = arr[i]\n    return second_smallest\n\narr = [9, 7, 4, 8, 2]\n\nsecond_smallest = find_second_smallest(arr)\n\nprint(\"Second smallest number is:\", second_smallest) # Output is 7"}
{"instruction":"Create a program to group the strings of a given list according to their lengths in Python.","input":"input = [\"apple\", \"mango\", \"banana\", \"kiwi\", \"grapes\", \"watermelon\"]","output":"\"\"\"\nCreate a program to group the strings of a given list according to their lengths in Python\n\"\"\"\n\n# List of strings \ninput = [\"apple\", \"mango\", \"banana\", \"kiwi\", \"grapes\", \"watermelon\"]\n\n# Dictionary to store the grouped strings \nresult = {} \n\n# Iterate over the list \nfor elem in input:\n    # Get length of each string \n    length = len(elem)\n    # If the length is present in the result dictionary, \n    # add the string to its corresponding list \n    if length in result: \n        result[length].append(elem)\n    # Else, create a new list in the result dictionary \n    # and append the string to the list \n    else: \n        result[length] = [elem] \n  \n# Print the result \nprint(result) \n# Output: {5: ['apple', 'mango', 'kiwi'], 6: ['banana', 'grapes'], 12: ['watermelon']}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to group the strings of a given list according to their lengths in Python.\n\n### Input:\ninput = [\"apple\", \"mango\", \"banana\", \"kiwi\", \"grapes\", \"watermelon\"]\n\n### Output:\n\"\"\"\nCreate a program to group the strings of a given list according to their lengths in Python\n\"\"\"\n\n# List of strings \ninput = [\"apple\", \"mango\", \"banana\", \"kiwi\", \"grapes\", \"watermelon\"]\n\n# Dictionary to store the grouped strings \nresult = {} \n\n# Iterate over the list \nfor elem in input:\n    # Get length of each string \n    length = len(elem)\n    # If the length is present in the result dictionary, \n    # add the string to its corresponding list \n    if length in result: \n        result[length].append(elem)\n    # Else, create a new list in the result dictionary \n    # and append the string to the list \n    else: \n        result[length] = [elem] \n  \n# Print the result \nprint(result) \n# Output: {5: ['apple', 'mango', 'kiwi'], 6: ['banana', 'grapes'], 12: ['watermelon']}"}
{"instruction":"Generate a code in Python to find the Kth smallest element in an array.","input":"","output":"def find_kth_smallest(arr, k): \n    n = len(arr) \n  \n    arr.sort() \n  \n    return arr[k-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code in Python to find the Kth smallest element in an array.\n\n### Input:\n\n\n### Output:\ndef find_kth_smallest(arr, k): \n    n = len(arr) \n  \n    arr.sort() \n  \n    return arr[k-1]"}
{"instruction":"Translate English sentence \"Choose a random number\" into Python code.","input":"","output":"import random\n\nrandom_number = random.randint(1,100)\nprint(\"Random number:\", random_number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTranslate English sentence \"Choose a random number\" into Python code.\n\n### Input:\n\n\n### Output:\nimport random\n\nrandom_number = random.randint(1,100)\nprint(\"Random number:\", random_number)"}
{"instruction":"Create a Python script to remove certain characters given in a set from a string.","input":"ABCDEFGHIJKLMNOPQRSTUVWXYZ\nset = {'A', 'C', 'D', 'E'}","output":"string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nremove_chars = set(['A', 'C', 'D', 'E'])\n \nresult = \"\".join(char for char in string if char not in remove_chars)\n\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to remove certain characters given in a set from a string.\n\n### Input:\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nset = {'A', 'C', 'D', 'E'}\n\n### Output:\nstring = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nremove_chars = set(['A', 'C', 'D', 'E'])\n \nresult = \"\".join(char for char in string if char not in remove_chars)\n\nprint(result)"}
{"instruction":"Create a function in Python to add two numbers.","input":"","output":"def adder(a, b):\n    return a + b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to add two numbers.\n\n### Input:\n\n\n### Output:\ndef adder(a, b):\n    return a + b"}
{"instruction":"Create a Python program to generate a dot product between two given lists.","input":"list1 = [1, 2, 3]\nlist2 = [4, 5, 6]","output":"def dot_product(list1, list2):\n  product = 0\n  for x, y in zip(list1, list2):\n    product += x*y\n  return product","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a dot product between two given lists.\n\n### Input:\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n### Output:\ndef dot_product(list1, list2):\n  product = 0\n  for x, y in zip(list1, list2):\n    product += x*y\n  return product"}
{"instruction":"Generate a Python script to print an inverted triangle pattern made up of asterisks.","input":"5","output":"def inverted_triangle(length):\n    for i in range(length, 0, -1):\n        for j in range(length - i):\n            print(' ', end=\"\")\n        for j in range(2 * i - 1):\n            print('*', end=\"\")\n        print()\n\ninverted_triangle(5)\n\n# Output:\n# *****\n#  ***\n#   *","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to print an inverted triangle pattern made up of asterisks.\n\n### Input:\n5\n\n### Output:\ndef inverted_triangle(length):\n    for i in range(length, 0, -1):\n        for j in range(length - i):\n            print(' ', end=\"\")\n        for j in range(2 * i - 1):\n            print('*', end=\"\")\n        print()\n\ninverted_triangle(5)\n\n# Output:\n# *****\n#  ***\n#   *"}
{"instruction":"Construct a code to find the sum of a series of numbers entered by the user using Python.","input":"","output":"total = 0\ncount = 0\n\nwhile True:\n    user_input = int(input(\"Enter an integer (enter 0 to stop): \"))\n    if user_input == 0:\n        break\n    \n    else:\n        total += user_input\n        count += 1\n\nprint(\"The sum of\", count, \"numbers is\", total)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a code to find the sum of a series of numbers entered by the user using Python.\n\n### Input:\n\n\n### Output:\ntotal = 0\ncount = 0\n\nwhile True:\n    user_input = int(input(\"Enter an integer (enter 0 to stop): \"))\n    if user_input == 0:\n        break\n    \n    else:\n        total += user_input\n        count += 1\n\nprint(\"The sum of\", count, \"numbers is\", total)"}
{"instruction":"Create an algorithm in Python to print the binary representation of a given number.","input":"23","output":"def binary_rep(num):\n    binary_string = \"\"\n    while num>0:\n        remainder = num%2\n        binary_string = str(remainder) + binary_string\n        num = num\/\/2\n\n    print(binary_string)\n\nbinary_rep(23) # prints 10111","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to print the binary representation of a given number.\n\n### Input:\n23\n\n### Output:\ndef binary_rep(num):\n    binary_string = \"\"\n    while num>0:\n        remainder = num%2\n        binary_string = str(remainder) + binary_string\n        num = num\/\/2\n\n    print(binary_string)\n\nbinary_rep(23) # prints 10111"}
{"instruction":"Create a function to find the number of times the given string appears in the array.","input":"Python, \"Python\"","output":"def count_occurrences(items, string):\n  count = 0\n  for item in items: \n    if item == string:\n      count += 1\n  return count\n\nprint(count_occurrences(['Python', 'Python'], \"Python\"))\n\n# Output: 2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to find the number of times the given string appears in the array.\n\n### Input:\nPython, \"Python\"\n\n### Output:\ndef count_occurrences(items, string):\n  count = 0\n  for item in items: \n    if item == string:\n      count += 1\n  return count\n\nprint(count_occurrences(['Python', 'Python'], \"Python\"))\n\n# Output: 2"}
{"instruction":"Write a Python code to display the following output","input":"","output":"print(\"*\" * 10)\nfor i in range(4):\n    print(\"*      *\")\nprint(\"*\" * 10)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to display the following output\n\n### Input:\n\n\n### Output:\nprint(\"*\" * 10)\nfor i in range(4):\n    print(\"*      *\")\nprint(\"*\" * 10)"}
{"instruction":"Design a python program to detect anagrams from a given list of words.","input":"\"words=['dog','bar','home','god','act','chair']\"","output":"\"\"\"\nDesign a python program to detect anagrams from a given list of words. \n\"\"\"\n\nwords=['dog','bar','home','god','act','chair']\n\n# Create a dictionary to store the sorted words\nsortedWords = {}\n\n# Sort all the words and store in the dictionary, with the key being the sorted words\nfor word in words:\n    sortedWord = ''.join(sorted(word))\n    if sortedWord not in sortedWords:\n        sortedWords[sortedWord] = []\n    sortedWords[sortedWord].append(word)\n\n# Look for anagrams in the dictionary\nanagrams = []\nfor key, value in sortedWords.items():\n    if len(value) > 1:\n        anagrams.append(value)\n    \nprint(anagrams)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program to detect anagrams from a given list of words.\n\n### Input:\n\"words=['dog','bar','home','god','act','chair']\"\n\n### Output:\n\"\"\"\nDesign a python program to detect anagrams from a given list of words. \n\"\"\"\n\nwords=['dog','bar','home','god','act','chair']\n\n# Create a dictionary to store the sorted words\nsortedWords = {}\n\n# Sort all the words and store in the dictionary, with the key being the sorted words\nfor word in words:\n    sortedWord = ''.join(sorted(word))\n    if sortedWord not in sortedWords:\n        sortedWords[sortedWord] = []\n    sortedWords[sortedWord].append(word)\n\n# Look for anagrams in the dictionary\nanagrams = []\nfor key, value in sortedWords.items():\n    if len(value) > 1:\n        anagrams.append(value)\n    \nprint(anagrams)"}
{"instruction":"Produce a problem solving algorithm in Python to find the number of possible anagrams of a given word.","input":"","output":"def anagrams_count(word):\n    if len(word) <= 1:\n        return 1\n    else:\n        c = word[0]\n        rem_let = word[1:]\n        ret = anagrams_count(rem_let)\n        for i in range(len(rem_let)):\n            if c == rem_let[i]:\n                continue\n            rem_let_i = rem_let[:i] + rem_let[i+1:]\n            ret += anagrams_count(rem_let_i)\n        return ret","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a problem solving algorithm in Python to find the number of possible anagrams of a given word.\n\n### Input:\n\n\n### Output:\ndef anagrams_count(word):\n    if len(word) <= 1:\n        return 1\n    else:\n        c = word[0]\n        rem_let = word[1:]\n        ret = anagrams_count(rem_let)\n        for i in range(len(rem_let)):\n            if c == rem_let[i]:\n                continue\n            rem_let_i = rem_let[:i] + rem_let[i+1:]\n            ret += anagrams_count(rem_let_i)\n        return ret"}
{"instruction":"Create a Python function to remove a given item from a list.","input":"[2, 3, 4], 4","output":"def removeItem(lst, item):\n    if item in lst:\n        lst.remove(item)\n    return lst\n\nprint(removeItem([2, 3, 4], 4))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to remove a given item from a list.\n\n### Input:\n[2, 3, 4], 4\n\n### Output:\ndef removeItem(lst, item):\n    if item in lst:\n        lst.remove(item)\n    return lst\n\nprint(removeItem([2, 3, 4], 4))"}
{"instruction":"Write a Python program to find the prime numbers between two given numbers and print in a comma separated list.","input":"start = 10\nend = 25","output":"def prime_nums(start, end):\n    res = [] \n    for num in range(start, end + 1): \n       if num > 1: \n            for i in range(2, num): \n                if (num % i) == 0: \n                    break\n            else: \n                res.append(num) \n\n    return res\n\nresult = prime_nums(10, 25)\nprint(', '.join(str(r) for r in result)) # prints 11, 13, 17, 19, 23","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the prime numbers between two given numbers and print in a comma separated list.\n\n### Input:\nstart = 10\nend = 25\n\n### Output:\ndef prime_nums(start, end):\n    res = [] \n    for num in range(start, end + 1): \n       if num > 1: \n            for i in range(2, num): \n                if (num % i) == 0: \n                    break\n            else: \n                res.append(num) \n\n    return res\n\nresult = prime_nums(10, 25)\nprint(', '.join(str(r) for r in result)) # prints 11, 13, 17, 19, 23"}
{"instruction":"Create a web server using Python.","input":"","output":"import http.server\nimport socketserver\n\nPORT = 8000\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"serving at port\", PORT)\n    httpd.serve_forever()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web server using Python.\n\n### Input:\n\n\n### Output:\nimport http.server\nimport socketserver\n\nPORT = 8000\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"serving at port\", PORT)\n    httpd.serve_forever()"}
{"instruction":"Produce a Python code for finding the largest element in an array.","input":"[40, 50, 11, 70, 39]","output":"def find_max(arr):\n    max = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\nresult = find_max([40, 50, 11, 70, 39])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a Python code for finding the largest element in an array.\n\n### Input:\n[40, 50, 11, 70, 39]\n\n### Output:\ndef find_max(arr):\n    max = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\nresult = find_max([40, 50, 11, 70, 39])\nprint(result)"}
{"instruction":"Create a regex pattern that matches two different words and prints out the second word if found.","input":"text = \"Learn Python now or learn Java later","output":"pattern = r\"learn (Python|Java) (\\w+)\" \nmatch = re.search(pattern, text) \nif match: \n    print(match.group(2)) # Prints \"now\" or \"later\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a regex pattern that matches two different words and prints out the second word if found.\n\n### Input:\ntext = \"Learn Python now or learn Java later\n\n### Output:\npattern = r\"learn (Python|Java) (\\w+)\" \nmatch = re.search(pattern, text) \nif match: \n    print(match.group(2)) # Prints \"now\" or \"later\""}
{"instruction":"Generate a Python script to generate all combinations of a list.","input":"[1, 2, 3]","output":"import itertools\n\ndef combinations(list):\n comb = itertools.combinations(list, 2)\n return [list(x) for x in set(comb)]\n\nlist = [1, 2, 3]\n\nresult = combinations(list)\n\nprint(f'The list of combinations is {result}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to generate all combinations of a list.\n\n### Input:\n[1, 2, 3]\n\n### Output:\nimport itertools\n\ndef combinations(list):\n comb = itertools.combinations(list, 2)\n return [list(x) for x in set(comb)]\n\nlist = [1, 2, 3]\n\nresult = combinations(list)\n\nprint(f'The list of combinations is {result}')"}
{"instruction":"Create a Python-Flask application for managing a library book catalog. The application should have routes for listing books, adding new books, and deleting books.","input":"Not applicable","output":"# Import Flask and other necessary libraries\nfrom flask import Flask, render_template, request, jsonify\n\n# Create a Flask app\napp = Flask(__name__)\n\n# Create a books list in memory\nbooks = [\n   { 'name': 'Python Crash Course', 'author': 'Eric Matthes', 'read': False },\n   { 'name': 'Fluent Python', 'author': 'Luciano Ramalho', 'read': False }\n]\n\n# Create app routes\n\n@app.route('\/')\ndef index():\n    return render_template('index.html')\n\n@app.route('\/books', methods=['GET', 'POST'])\ndef all_books():\n if request.method == 'GET':\n return jsonify({'books': books})\n\n elif request.method == 'POST':\n new_book = {'name': request.form.get('name'), 'author': request.form.get('author'), 'read': False}\n books.append(new_book)\n return jsonify({'books': books})\n\n@app.route('\/books\/<int:index>', methods=['PUT', 'DELETE'])\ndef single_book(index):\n if request.method == 'PUT':\n book = books[index]\n book['name'] = request.form.get('name')\n book['author'] = request.form.get('author')\n\n return jsonify({'book': book})\n\n elif request.method == 'DELETE':\n books.pop(index)\n return jsonify({'books': books})","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python-Flask application for managing a library book catalog. The application should have routes for listing books, adding new books, and deleting books.\n\n### Input:\nNot applicable\n\n### Output:\n# Import Flask and other necessary libraries\nfrom flask import Flask, render_template, request, jsonify\n\n# Create a Flask app\napp = Flask(__name__)\n\n# Create a books list in memory\nbooks = [\n   { 'name': 'Python Crash Course', 'author': 'Eric Matthes', 'read': False },\n   { 'name': 'Fluent Python', 'author': 'Luciano Ramalho', 'read': False }\n]\n\n# Create app routes\n\n@app.route('\/')\ndef index():\n    return render_template('index.html')\n\n@app.route('\/books', methods=['GET', 'POST'])\ndef all_books():\n if request.method == 'GET':\n return jsonify({'books': books})\n\n elif request.method == 'POST':\n new_book = {'name': request.form.get('name'), 'author': request.form.get('author'), 'read': False}\n books.append(new_book)\n return jsonify({'books': books})\n\n@app.route('\/books\/<int:index>', methods=['PUT', 'DELETE'])\ndef single_book(index):\n if request.method == 'PUT':\n book = books[index]\n book['name'] = request.form.get('name')\n book['author'] = request.form.get('author')\n\n return jsonify({'book': book})\n\n elif request.method == 'DELETE':\n books.pop(index)\n return jsonify({'books': books})"}
{"instruction":"Analyze a given Python code and write a function that checks if a given number is prime.","input":"def primeCheck(num):","output":"def primeCheck(num):\n if num > 1:\n for i in range(2, num):\n  if (num % i) == 0:\n   return False\n else:\n  return False\n return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAnalyze a given Python code and write a function that checks if a given number is prime.\n\n### Input:\ndef primeCheck(num):\n\n### Output:\ndef primeCheck(num):\n if num > 1:\n for i in range(2, num):\n  if (num % i) == 0:\n   return False\n else:\n  return False\n return True"}
{"instruction":"Develop a function in Python to convert a given word into its Pig Latin form.","input":"\"Hello\"","output":"def pig_latin(word):\n    first_letter = word[0]\n\n    # check if the word starts with a vowel \n    if first_letter in \"aeiou\":\n        latin_word = word + \"ay\"\n    else:\n        latin_word = word[1:] + first_letter + \"ay\"\n\n    return latin_word","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python to convert a given word into its Pig Latin form.\n\n### Input:\n\"Hello\"\n\n### Output:\ndef pig_latin(word):\n    first_letter = word[0]\n\n    # check if the word starts with a vowel \n    if first_letter in \"aeiou\":\n        latin_word = word + \"ay\"\n    else:\n        latin_word = word[1:] + first_letter + \"ay\"\n\n    return latin_word"}
{"instruction":"Convert a list of numbers into strings using Python.","input":"[5, 10, 15]","output":"# Create an empty list of strings\nnumber_strings = []\n\n# Loops through the list of numbers\nfor n in [5, 10, 15]:\n    # Appends a string version of the number to the list\n    number_strings.append(str(n))\n\nprint(number_strings)   # ['5', '10', '15']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a list of numbers into strings using Python.\n\n### Input:\n[5, 10, 15]\n\n### Output:\n# Create an empty list of strings\nnumber_strings = []\n\n# Loops through the list of numbers\nfor n in [5, 10, 15]:\n    # Appends a string version of the number to the list\n    number_strings.append(str(n))\n\nprint(number_strings)   # ['5', '10', '15']"}
{"instruction":"Implement a Python class to represent a sentence.","input":"","output":"class Sentence:\n  def __init__(self, text):\n    self.text = text\n    self.words = self.text.split()\n    \n  def get_num_words(self):\n    return len(self.words)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python class to represent a sentence.\n\n### Input:\n\n\n### Output:\nclass Sentence:\n  def __init__(self, text):\n    self.text = text\n    self.words = self.text.split()\n    \n  def get_num_words(self):\n    return len(self.words)"}
{"instruction":"Generate an algorithm in Python that sorts the given array of numbers in the non-decreasing order.","input":"arr = [1, 9, 3, 8, 4]","output":"def bubble_sort(arr): \n    n = len(arr)\n  \n    for i in range(n-1): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \narr = [1, 9, 3, 8, 4]\n\nbubble_sort(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an algorithm in Python that sorts the given array of numbers in the non-decreasing order.\n\n### Input:\narr = [1, 9, 3, 8, 4]\n\n### Output:\ndef bubble_sort(arr): \n    n = len(arr)\n  \n    for i in range(n-1): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \narr = [1, 9, 3, 8, 4]\n\nbubble_sort(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])"}
{"instruction":"Design an algorithm to check if a number is a perfect square in Python.","input":"25","output":"import math \n  \ndef isPerfectSquare(n): \n    # Find floating point value of \n    # square root of x. \n    sqr = math.sqrt(n) \n   \n    # If square root is an integer \n    return (sqr - math.floor(sqr) == 0) \n  \n# Driver program \nx = 25\nif(isPerfectSquare(x)): \n    print(x, \"is a perfect square\") \nelse: \n    print(x, \"is not a perfect square\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm to check if a number is a perfect square in Python.\n\n### Input:\n25\n\n### Output:\nimport math \n  \ndef isPerfectSquare(n): \n    # Find floating point value of \n    # square root of x. \n    sqr = math.sqrt(n) \n   \n    # If square root is an integer \n    return (sqr - math.floor(sqr) == 0) \n  \n# Driver program \nx = 25\nif(isPerfectSquare(x)): \n    print(x, \"is a perfect square\") \nelse: \n    print(x, \"is not a perfect square\")"}
{"instruction":"Write a Python program to sort a dictionary by values.","input":"d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}","output":"sorted_d = dict(sorted(d.items(), key=lambda x: x[1]))\nprint(sorted_d)\n\n    # Output: {0: 0, 2: 1, 1: 2, 4: 3, 3: 4}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a dictionary by values.\n\n### Input:\nd = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\n\n### Output:\nsorted_d = dict(sorted(d.items(), key=lambda x: x[1]))\nprint(sorted_d)\n\n    # Output: {0: 0, 2: 1, 1: 2, 4: 3, 3: 4}"}
{"instruction":"Develop a program in Python to calculate the sum of the following series:","input":"1 + 1\/2 + 1\/3 + ... + 1\/n","output":"def SumOfSeries(n): \n    seriesSum = 0\n    for num in range(1, n+1): \n        seriesSum += 1\/num  \n    return round(seriesSum, 2) \n\n# Driver code \nn = 5\nprint(\"Sum of the series up to number:\", n, \n                    \"is\", SumOfSeries(n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python to calculate the sum of the following series:\n\n### Input:\n1 + 1\/2 + 1\/3 + ... + 1\/n\n\n### Output:\ndef SumOfSeries(n): \n    seriesSum = 0\n    for num in range(1, n+1): \n        seriesSum += 1\/num  \n    return round(seriesSum, 2) \n\n# Driver code \nn = 5\nprint(\"Sum of the series up to number:\", n, \n                    \"is\", SumOfSeries(n))"}
{"instruction":"Compose a python list comprehension that derive the squares of the integers from 0 to 9","input":"","output":"result = [x**2 for x in range(10)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a python list comprehension that derive the squares of the integers from 0 to 9\n\n### Input:\n\n\n### Output:\nresult = [x**2 for x in range(10)]"}
{"instruction":"Design a class representing a car using Python.","input":"","output":"class Car():\n\n    def __init__(self, model, make, color, engine_power, num_wheels):\n        self.model = model\n        self.make = make\n        self.color = color\n        self.engine_power = engine_power\n        self.num_wheels = num_wheels\n\n    def start_engine(self):\n        print(\"Engine started.\")\n\n    def stop_engine(self):\n        print(\"Engine stopped.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class representing a car using Python.\n\n### Input:\n\n\n### Output:\nclass Car():\n\n    def __init__(self, model, make, color, engine_power, num_wheels):\n        self.model = model\n        self.make = make\n        self.color = color\n        self.engine_power = engine_power\n        self.num_wheels = num_wheels\n\n    def start_engine(self):\n        print(\"Engine started.\")\n\n    def stop_engine(self):\n        print(\"Engine stopped.\")"}
{"instruction":"Create a class in Python that implements the Comparable interface.","input":"","output":"class Comparable:\n    def __init__(self, value):\n        self.value = value\n        \n    def compareTo(self, b):\n        if self.value > b.value:\n            return 1\n        elif self.value < b.value:\n            return -1\n        else:\n            return 0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that implements the Comparable interface.\n\n### Input:\n\n\n### Output:\nclass Comparable:\n    def __init__(self, value):\n        self.value = value\n        \n    def compareTo(self, b):\n        if self.value > b.value:\n            return 1\n        elif self.value < b.value:\n            return -1\n        else:\n            return 0"}
{"instruction":"Write a function in Python to evenly distribute the total number of tasks among n workers.","input":"","output":"def distribute_tasks(total, num_workers):\n    tasks_per_worker = [total \/\/ num_workers] * num_workers\n    remainder = total - sum(tasks_per_worker)\n    \n    # Distribute the remainder among the workers.\n    for i in range(remainder):\n        tasks_per_worker[i] += 1\n\n    return tasks_per_worker","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to evenly distribute the total number of tasks among n workers.\n\n### Input:\n\n\n### Output:\ndef distribute_tasks(total, num_workers):\n    tasks_per_worker = [total \/\/ num_workers] * num_workers\n    remainder = total - sum(tasks_per_worker)\n    \n    # Distribute the remainder among the workers.\n    for i in range(remainder):\n        tasks_per_worker[i] += 1\n\n    return tasks_per_worker"}
{"instruction":"Create a python script that can find the longest common substring between two strings.","input":"FIRST STRING = \u201cabcdaf\u201d\nSECOND STRING = \u201czbcdf\u201d","output":"def lcs(X , Y): \n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n  \n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n  \n    \"\"\"Following steps build L[m+1][n+1] in bottom up fashion \n    Note: L[i][j] contains length of LCS of X[0..i-1] \n    and Y[0..j-1]\"\"\"\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] \n    return L[m][n] \n  \n# Driver program to test the above function \nX = \"abcdaf\"\nY = \"zbcdf\"\n\nprint(\"The length of LCS is \", lcs(X, Y))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script that can find the longest common substring between two strings.\n\n### Input:\nFIRST STRING = \u201cabcdaf\u201d\nSECOND STRING = \u201czbcdf\u201d\n\n### Output:\ndef lcs(X , Y): \n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n  \n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n  \n    \"\"\"Following steps build L[m+1][n+1] in bottom up fashion \n    Note: L[i][j] contains length of LCS of X[0..i-1] \n    and Y[0..j-1]\"\"\"\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] \n    return L[m][n] \n  \n# Driver program to test the above function \nX = \"abcdaf\"\nY = \"zbcdf\"\n\nprint(\"The length of LCS is \", lcs(X, Y))"}
{"instruction":"Create a Python program to remove any items from a given list that are less than 5.","input":"[1, 4, 6, 8, 10, 15, 20]","output":"my_list = [1, 4, 6, 8, 10, 15, 20]\n\nfiltered_list = [item for item in my_list if item >= 5]\n\nprint(filtered_list)  # Output: [6, 8, 10, 15, 20]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to remove any items from a given list that are less than 5.\n\n### Input:\n[1, 4, 6, 8, 10, 15, 20]\n\n### Output:\nmy_list = [1, 4, 6, 8, 10, 15, 20]\n\nfiltered_list = [item for item in my_list if item >= 5]\n\nprint(filtered_list)  # Output: [6, 8, 10, 15, 20]"}
{"instruction":"Write Python code to compute the shortest common supersequence (SCS) of two given strings.","input":"str1 = \"abac\"\nstr2 = \"baba","output":"def findSCS(str1, str2, m, n): \n    if m == 0: \n        return n \n    if n == 0: \n        return m \n    if str1[m - 1] == str2[n - 1]: \n        return 1 + findSCS(str1, str2, m - 1, n - 1) \n    else: \n        return 1 + min(findSCS(str1, str2, m, n - 1), \n                       findSCS(str1, str2, m - 1, n)) \n  \ndef SCS(str1, str2): \n    return findSCS(str1, str2, len(str1), len(str2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to compute the shortest common supersequence (SCS) of two given strings.\n\n### Input:\nstr1 = \"abac\"\nstr2 = \"baba\n\n### Output:\ndef findSCS(str1, str2, m, n): \n    if m == 0: \n        return n \n    if n == 0: \n        return m \n    if str1[m - 1] == str2[n - 1]: \n        return 1 + findSCS(str1, str2, m - 1, n - 1) \n    else: \n        return 1 + min(findSCS(str1, str2, m, n - 1), \n                       findSCS(str1, str2, m - 1, n)) \n  \ndef SCS(str1, str2): \n    return findSCS(str1, str2, len(str1), len(str2))"}
{"instruction":"Create a Python dictionary to store data about a student.","input":"","output":"student_data = {\n    'name': 'John Smith',\n    'year': 'Freshman',\n    'gpa': 3.25,\n    'courses': ['math', 'english', 'Computer Science', 'Statistics'],\n    'extracurricular': ['Chess Club', 'Student Government', 'Debate Team']\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python dictionary to store data about a student.\n\n### Input:\n\n\n### Output:\nstudent_data = {\n    'name': 'John Smith',\n    'year': 'Freshman',\n    'gpa': 3.25,\n    'courses': ['math', 'english', 'Computer Science', 'Statistics'],\n    'extracurricular': ['Chess Club', 'Student Government', 'Debate Team']\n}"}
{"instruction":"Edit the following Python code to give the output as [400, 125, 10,1].","input":"val = [1, 10, 125, 400]\nres = []\n\nfor v in val:\n    res.append(v)","output":"val = [1, 10, 125, 400]\nres = []\n\nfor v in reversed(val):\n    res.append(v)\n    \nprint(res) # Output: [400, 125, 10,1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code to give the output as [400, 125, 10,1].\n\n### Input:\nval = [1, 10, 125, 400]\nres = []\n\nfor v in val:\n    res.append(v)\n\n### Output:\nval = [1, 10, 125, 400]\nres = []\n\nfor v in reversed(val):\n    res.append(v)\n    \nprint(res) # Output: [400, 125, 10,1]"}
{"instruction":"Write a Python program to transform user input from lowercase to uppercase.","input":"This is a sample string","output":"input_string = input('Enter a string: ')\n\noutput_string = input_string.upper()\n\nprint(f'Your input in uppercase is: {output_string}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to transform user input from lowercase to uppercase.\n\n### Input:\nThis is a sample string\n\n### Output:\ninput_string = input('Enter a string: ')\n\noutput_string = input_string.upper()\n\nprint(f'Your input in uppercase is: {output_string}')"}
{"instruction":"Generate a Python program that will convert an array of strings with comma-separated values to a comma-separated string.","input":"['John','Joseph','Shirley']","output":"def to_csv(input_list):\n  return ','.join(input_list)\n\nif __name__ == '__main__':\n  input_list = ['John','Joseph','Shirley']\n  output_str = to_csv(input_list)\n  print(f'Result: {output_str}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that will convert an array of strings with comma-separated values to a comma-separated string.\n\n### Input:\n['John','Joseph','Shirley']\n\n### Output:\ndef to_csv(input_list):\n  return ','.join(input_list)\n\nif __name__ == '__main__':\n  input_list = ['John','Joseph','Shirley']\n  output_str = to_csv(input_list)\n  print(f'Result: {output_str}')"}
{"instruction":"Use Python to create an encryption program that swaps out one character with another character.","input":"","output":"def encrypt(message):\n    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    encrypted = ''\n\n    for char in message:\n        if char in chars:\n            char_index = chars.find(char)\n            new_char_index = (char_index + 13) % 26\n            encrypted += chars[new_char_index]\n        else:\n            encrypted += char\n    return encrypted\n\n# test\nprint(encrypt('HELLO'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse Python to create an encryption program that swaps out one character with another character.\n\n### Input:\n\n\n### Output:\ndef encrypt(message):\n    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    encrypted = ''\n\n    for char in message:\n        if char in chars:\n            char_index = chars.find(char)\n            new_char_index = (char_index + 13) % 26\n            encrypted += chars[new_char_index]\n        else:\n            encrypted += char\n    return encrypted\n\n# test\nprint(encrypt('HELLO'))"}
{"instruction":"Rewrite the following algorithm using Python:","input":"","output":"def star_pattern(n):\n    # Outer loop to handle number of rows \n    # n in this case \n    for i in range(0, n): \n      \n        # Inner loop to handle number of columns \n        # values changing acc. to outer loop \n        for j in range(0, i+1): \n          \n            # Printing stars \n            print(\"* \",end=\"\") \n       \n        # Ending line after each row \n        print(\"\\r\") \n  \n# Driver Code \nn = 5\nstar_pattern(n)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following algorithm using Python:\n\n### Input:\n\n\n### Output:\ndef star_pattern(n):\n    # Outer loop to handle number of rows \n    # n in this case \n    for i in range(0, n): \n      \n        # Inner loop to handle number of columns \n        # values changing acc. to outer loop \n        for j in range(0, i+1): \n          \n            # Printing stars \n            print(\"* \",end=\"\") \n       \n        # Ending line after each row \n        print(\"\\r\") \n  \n# Driver Code \nn = 5\nstar_pattern(n)"}
{"instruction":"Create a Python script to build a dictionary from string to string of the given samples.","input":"Samples:\napple->red\nbanana->yellow\ncherry->red","output":"def build_dictionary(samples):\n dictionary = {}\n for sample in samples:\n  key, value = sample.split(\"->\")\n  dictionary[key] = value\n return dictionary\n \nsamples = [\"apple->red\", \"banana->yellow\", \"cherry->red\"]\ndictionary = build_dictionary(samples)\n\nprint(dictionary)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to build a dictionary from string to string of the given samples.\n\n### Input:\nSamples:\napple->red\nbanana->yellow\ncherry->red\n\n### Output:\ndef build_dictionary(samples):\n dictionary = {}\n for sample in samples:\n  key, value = sample.split(\"->\")\n  dictionary[key] = value\n return dictionary\n \nsamples = [\"apple->red\", \"banana->yellow\", \"cherry->red\"]\ndictionary = build_dictionary(samples)\n\nprint(dictionary)"}
{"instruction":"Create a Python script to calculate the average of the three numbers 62, 72, and 85.","input":"","output":"# Calculate the average of three numbers\n\ndef calculate_average(num1, num2, num3):\n    sum = num1 + num2 + num3\n    average = sum \/ 3 \n    return average\n\nnumber1 = 62\nnumber2 = 72\nnumber3 = 85\n\nprint(\"The average is:\", calculate_average(number1, number2, number3))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to calculate the average of the three numbers 62, 72, and 85.\n\n### Input:\n\n\n### Output:\n# Calculate the average of three numbers\n\ndef calculate_average(num1, num2, num3):\n    sum = num1 + num2 + num3\n    average = sum \/ 3 \n    return average\n\nnumber1 = 62\nnumber2 = 72\nnumber3 = 85\n\nprint(\"The average is:\", calculate_average(number1, number2, number3))"}
{"instruction":"Create a Python script that takes an array with n elements and shuffles it.","input":"n = 10","output":"import random\n\ndef shuffle(lst):\n    random.shuffle(lst)\n    return lst\n\narr = [i for i in range(10)]\nprint(shuffle(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes an array with n elements and shuffles it.\n\n### Input:\nn = 10\n\n### Output:\nimport random\n\ndef shuffle(lst):\n    random.shuffle(lst)\n    return lst\n\narr = [i for i in range(10)]\nprint(shuffle(arr))"}
{"instruction":"Write a python program to transform input set of numbers into a list of tuples.","input":"1, 2, 3, 4, 5","output":"[(1, 2), (3, 4), (5, None)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to transform input set of numbers into a list of tuples.\n\n### Input:\n1, 2, 3, 4, 5\n\n### Output:\n[(1, 2), (3, 4), (5, None)]"}
{"instruction":"Create an object-oriented program in Python to calculate the total cost of an array of products. The program should include a Product class with fields for name, price, and quantity.","input":"[\n  {name: \"Apple\", price: 1.99, quantity: 2},\n  {name: \"Banana\", price: 0.79, quantity: 5}\n]","output":"class Product:\n def __init__(self, name, price, quantity):\n  self.name = name\n  self.price = price\n  self.quantity = quantity\n\n \ndef calculateTotalCost(products):\n totalCost = 0\n \n for product in products:\n  totalCost += product.price * product.quantity\n \n return totalCost\n \nproducts = [\n Product(\"Apple\", 1.99, 2),\n Product(\"Banana\", 0.79, 5)\n]\n \nprint(calculateTotalCost(products))\n# Output: 11.75","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an object-oriented program in Python to calculate the total cost of an array of products. The program should include a Product class with fields for name, price, and quantity.\n\n### Input:\n[\n  {name: \"Apple\", price: 1.99, quantity: 2},\n  {name: \"Banana\", price: 0.79, quantity: 5}\n]\n\n### Output:\nclass Product:\n def __init__(self, name, price, quantity):\n  self.name = name\n  self.price = price\n  self.quantity = quantity\n\n \ndef calculateTotalCost(products):\n totalCost = 0\n \n for product in products:\n  totalCost += product.price * product.quantity\n \n return totalCost\n \nproducts = [\n Product(\"Apple\", 1.99, 2),\n Product(\"Banana\", 0.79, 5)\n]\n \nprint(calculateTotalCost(products))\n# Output: 11.75"}
{"instruction":"Generate a Python code snippet to convert a given Fahrenheit temperature to Celsius.","input":"","output":"def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * (5 \/ 9)\n    return celsius","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code snippet to convert a given Fahrenheit temperature to Celsius.\n\n### Input:\n\n\n### Output:\ndef fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * (5 \/ 9)\n    return celsius"}
{"instruction":"Create a function in Python to determine whether a given number is an Armstrong number.","input":"","output":"def is_armstrong_number(num): \n    n = len(str(num)) \n      \n    # initialize sum \n    sum = 0 \n  \n    # find the sum of the cube of each digit \n    temp = num \n    while temp > 0: \n        digit = temp % 10\n        sum += digit ** n \n        temp \/\/= 10\n  \n    # if num is equal to the sum,  \n    # then the number is an Armstrong number \n    if num == sum: \n        return True \n    else: \n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to determine whether a given number is an Armstrong number.\n\n### Input:\n\n\n### Output:\ndef is_armstrong_number(num): \n    n = len(str(num)) \n      \n    # initialize sum \n    sum = 0 \n  \n    # find the sum of the cube of each digit \n    temp = num \n    while temp > 0: \n        digit = temp % 10\n        sum += digit ** n \n        temp \/\/= 10\n  \n    # if num is equal to the sum,  \n    # then the number is an Armstrong number \n    if num == sum: \n        return True \n    else: \n        return False"}
{"instruction":"Implement a sorting algorithm in Python to sort an array of integers.","input":"ary = [5,7,3,1,9]","output":"def sort(ary):\n    # Iterate over each item in the array\n    for i in range(len(ary)):\n        min_index = i\n        # Find the minimum value in the subarray from i to the end of the array\n        for j in range(i + 1, len(ary)):\n            if ary[j] < ary[min_index]:\n                min_index = j\n        # Swap the values\n        ary[i], ary[min_index] = ary[min_index], ary[i]\n\nsort(ary)\nprint(ary) # Output: [1, 3, 5, 7, 9]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a sorting algorithm in Python to sort an array of integers.\n\n### Input:\nary = [5,7,3,1,9]\n\n### Output:\ndef sort(ary):\n    # Iterate over each item in the array\n    for i in range(len(ary)):\n        min_index = i\n        # Find the minimum value in the subarray from i to the end of the array\n        for j in range(i + 1, len(ary)):\n            if ary[j] < ary[min_index]:\n                min_index = j\n        # Swap the values\n        ary[i], ary[min_index] = ary[min_index], ary[i]\n\nsort(ary)\nprint(ary) # Output: [1, 3, 5, 7, 9]"}
{"instruction":"Create a Python script to generate all the combinations of a given list of integers.","input":"[1, 2, 3]","output":"def generate_combinations(input_list):\n    import itertools\n    comb_list = []\n    # Get all possible combinations of the list\n    for subset in itertools.combinations(input_list,\n                                       len(input_list)):\n        comb_list.append(subset)\n    return comb_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate all the combinations of a given list of integers.\n\n### Input:\n[1, 2, 3]\n\n### Output:\ndef generate_combinations(input_list):\n    import itertools\n    comb_list = []\n    # Get all possible combinations of the list\n    for subset in itertools.combinations(input_list,\n                                       len(input_list)):\n        comb_list.append(subset)\n    return comb_list"}
{"instruction":"Create a Python program to find all elements in a list that appear more than once.","input":"list=[1, 2, 3, 2, 4, 5, 1, 0]","output":"def duplicate_elements(lst):\n \n seen_elements = set()\n duplicates = set()\n \n for element in lst:\n if element in seen_elements:\n duplicates.add(element)\n else:\n seen_elements.add(element)\n \n return duplicates\n \nlist = [1, 2, 3, 2, 4, 5, 1, 0]\nduplicates = duplicate_elements(list)\nprint(duplicates) # {1, 2}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find all elements in a list that appear more than once.\n\n### Input:\nlist=[1, 2, 3, 2, 4, 5, 1, 0]\n\n### Output:\ndef duplicate_elements(lst):\n \n seen_elements = set()\n duplicates = set()\n \n for element in lst:\n if element in seen_elements:\n duplicates.add(element)\n else:\n seen_elements.add(element)\n \n return duplicates\n \nlist = [1, 2, 3, 2, 4, 5, 1, 0]\nduplicates = duplicate_elements(list)\nprint(duplicates) # {1, 2}"}
{"instruction":"Generate a program in Python that takes two sorted lists as input and merges them","input":"list1 = [2, 5, 7]\nlist2 = [3, 4, 6]","output":"def merge_sorted_lists(list1, list2):\n    merged_list = []\n    \n    while len(list1) > 0 and len(list2) > 0:\n        if list1[0] < list2[0]:\n            merged_list.append(list1[0])\n            list1.pop(0)\n        else:\n            merged_list.append(list2[0])\n            list2.pop(0)\n    \n    if len(list1) > 0:\n        merged_list += list1\n    else:\n        merged_list += list2\n    \n    return merged_list\n\nmerged_list = merge_sorted_lists(list1, list2)\nprint(merged_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python that takes two sorted lists as input and merges them\n\n### Input:\nlist1 = [2, 5, 7]\nlist2 = [3, 4, 6]\n\n### Output:\ndef merge_sorted_lists(list1, list2):\n    merged_list = []\n    \n    while len(list1) > 0 and len(list2) > 0:\n        if list1[0] < list2[0]:\n            merged_list.append(list1[0])\n            list1.pop(0)\n        else:\n            merged_list.append(list2[0])\n            list2.pop(0)\n    \n    if len(list1) > 0:\n        merged_list += list1\n    else:\n        merged_list += list2\n    \n    return merged_list\n\nmerged_list = merge_sorted_lists(list1, list2)\nprint(merged_list)"}
{"instruction":"Create a Python script that when executed, prints out the sum of the first 10 even numbers.","input":"","output":"sum = 0\nfor i in range(2,21,2): #Range(start,stop-1,step size)\n sum += i\n\nprint(sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that when executed, prints out the sum of the first 10 even numbers.\n\n### Input:\n\n\n### Output:\nsum = 0\nfor i in range(2,21,2): #Range(start,stop-1,step size)\n sum += i\n\nprint(sum)"}
{"instruction":"Create a neural network in Python to classify crime-related data.","input":"Dataset with 10 variables and 500 observations.","output":"# Import libraries necessary for building the neural network \nimport numpy as np \nimport pandas as pd\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\n\n# Read in the dataset\ndataset = pd.read_csv('dataset.csv')\nX = dataset.iloc[:,:-1].values\ny = dataset.iloc[:,-1].values\n\n# Building the neural network\nmodel = Sequential()\n\n# First layer with input dimensions\nmodel.add(Dense(32, activation='relu', input_dim=X.shape[1]))\nmodel.add(Dropout(0.2))\n\n# Second layer\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.2))\n\n# Output layer\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile the model \nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Fit the model\nmodel.fit(X, y, epochs=100, batch_size=32, validation_split=.2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network in Python to classify crime-related data.\n\n### Input:\nDataset with 10 variables and 500 observations.\n\n### Output:\n# Import libraries necessary for building the neural network \nimport numpy as np \nimport pandas as pd\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\n\n# Read in the dataset\ndataset = pd.read_csv('dataset.csv')\nX = dataset.iloc[:,:-1].values\ny = dataset.iloc[:,-1].values\n\n# Building the neural network\nmodel = Sequential()\n\n# First layer with input dimensions\nmodel.add(Dense(32, activation='relu', input_dim=X.shape[1]))\nmodel.add(Dropout(0.2))\n\n# Second layer\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.2))\n\n# Output layer\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile the model \nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Fit the model\nmodel.fit(X, y, epochs=100, batch_size=32, validation_split=.2)"}
{"instruction":"Automate a Python program to check the length of each word in a given string.","input":"","output":"def lengthWord(inp):\n    result = []\n    for word in inp.split(' '):\n        result.append(len(word))\n    return result\n\n# Driver Code\ninp = \"Generating a code generation task instructions\"\nprint(lengthWord(inp))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAutomate a Python program to check the length of each word in a given string.\n\n### Input:\n\n\n### Output:\ndef lengthWord(inp):\n    result = []\n    for word in inp.split(' '):\n        result.append(len(word))\n    return result\n\n# Driver Code\ninp = \"Generating a code generation task instructions\"\nprint(lengthWord(inp))"}
{"instruction":"Write a Python function to print a Pascal Triangle.","input":"","output":"def printPascalTriangle(n): \n\n\tfor line in range(1, n + 1): \n\t\tC = 1; # used to represent C(line, i) \n\t\tfor i in range(1, line + 1): \n\t\t\t# The first value in a line is always 1 \n\t\t\tprint(C, end = \" \"); \n\t\t\tC = int(C * (line - i) \/ i); # Calculating \n\t\t\t\t\t\t\t\t\t\t# the next value  \n\t\tprint(\"\"); # entered to move to the next line \n\n# Driver Code \nn = 5; \nprintPascalTriangle(n); \n\nOutput:\n1 \n1 1 \n1 2 1 \n1 3 3 1 \n1 4 6 4 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to print a Pascal Triangle.\n\n### Input:\n\n\n### Output:\ndef printPascalTriangle(n): \n\n\tfor line in range(1, n + 1): \n\t\tC = 1; # used to represent C(line, i) \n\t\tfor i in range(1, line + 1): \n\t\t\t# The first value in a line is always 1 \n\t\t\tprint(C, end = \" \"); \n\t\t\tC = int(C * (line - i) \/ i); # Calculating \n\t\t\t\t\t\t\t\t\t\t# the next value  \n\t\tprint(\"\"); # entered to move to the next line \n\n# Driver Code \nn = 5; \nprintPascalTriangle(n); \n\nOutput:\n1 \n1 1 \n1 2 1 \n1 3 3 1 \n1 4 6 4 1"}
{"instruction":"Generate a Python program to identify the last occurrence of an element in a list.","input":"element: 8\nlist: [3, 1, 4, 5, 8, 6, 8]","output":"def last_occurrence(x, lst):\n  last_index = -1\n  for i in range(len(lst)):\n    if lst[i] == x:\n      last_index = i\n  return last_index","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to identify the last occurrence of an element in a list.\n\n### Input:\nelement: 8\nlist: [3, 1, 4, 5, 8, 6, 8]\n\n### Output:\ndef last_occurrence(x, lst):\n  last_index = -1\n  for i in range(len(lst)):\n    if lst[i] == x:\n      last_index = i\n  return last_index"}
{"instruction":"Create a Python program that uses a dictionary to convert Fahrenheit temperatures to Celsius temperatures.","input":"Not applicable","output":"def fahrenheit_to_celsius(fahrenheit: float):\n \"\"\"Converts Fahrenheit temperatures to Celsius\"\"\"\n return (fahrenheit - 32) * 5\/9\n\ntemperatures_in_celsius = {\n 'Steven' : fahrenheit_to_celsius(98.6),\n 'Thomas' : fahrenheit_to_celsius(99.8),\n 'Nicole' : fahrenheit_to_celsius(100.4)\n}\n\nprint(temperatures_in_celsius)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses a dictionary to convert Fahrenheit temperatures to Celsius temperatures.\n\n### Input:\nNot applicable\n\n### Output:\ndef fahrenheit_to_celsius(fahrenheit: float):\n \"\"\"Converts Fahrenheit temperatures to Celsius\"\"\"\n return (fahrenheit - 32) * 5\/9\n\ntemperatures_in_celsius = {\n 'Steven' : fahrenheit_to_celsius(98.6),\n 'Thomas' : fahrenheit_to_celsius(99.8),\n 'Nicole' : fahrenheit_to_celsius(100.4)\n}\n\nprint(temperatures_in_celsius)"}
{"instruction":"Generate a Python program that takes an input of a number and checks if it is prime.","input":"7","output":"def is_prime(num):\n    if num == 2:\n        return True\n    elif num < 2 or not all(num % i for i in range(2, num)):\n        return False\n    return True\n\nnum = 7\nresult = is_prime(num)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that takes an input of a number and checks if it is prime.\n\n### Input:\n7\n\n### Output:\ndef is_prime(num):\n    if num == 2:\n        return True\n    elif num < 2 or not all(num % i for i in range(2, num)):\n        return False\n    return True\n\nnum = 7\nresult = is_prime(num)\nprint(result)"}
{"instruction":"Generate a function in Python that takes a list and returns an ordered list","input":"mylist = [5, 9, 1, 4]","output":"def order_list(mylist):\n    mylist.sort()\n    return mylist\n\nprint(\"Ordered list: \", order_list(mylist))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python that takes a list and returns an ordered list\n\n### Input:\nmylist = [5, 9, 1, 4]\n\n### Output:\ndef order_list(mylist):\n    mylist.sort()\n    return mylist\n\nprint(\"Ordered list: \", order_list(mylist))"}
{"instruction":"Write a Python program to find the difference of two sets.","input":"set_1 = {1,2,3,4,5}\nset_2 = {2,4,6,8,10}","output":"difference = set_1.difference(set_2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the difference of two sets.\n\n### Input:\nset_1 = {1,2,3,4,5}\nset_2 = {2,4,6,8,10}\n\n### Output:\ndifference = set_1.difference(set_2)"}
{"instruction":"Create a REST API in Python that can be used to delete an item from a list.","input":"Not applicable","output":"from flask import Flask, request\nimport json\n\napp = Flask(__name__)\nitems = [\"Apple\", \"Banana\", \"Orange\"]\n\n@app.route('\/items', methods=[\"GET\"])\ndef get_items():\n return json.dumps(items)\n\n@app.route('\/items\/<item>', methods=[\"DELETE\"])\ndef delete_item(item):\n if item in items:\n  items.remove(item)\n  message = \"Item successfully deleted.\"\n else:\n  message = \"Item not found.\"\n return json.dumps({\"message\": message})","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API in Python that can be used to delete an item from a list.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request\nimport json\n\napp = Flask(__name__)\nitems = [\"Apple\", \"Banana\", \"Orange\"]\n\n@app.route('\/items', methods=[\"GET\"])\ndef get_items():\n return json.dumps(items)\n\n@app.route('\/items\/<item>', methods=[\"DELETE\"])\ndef delete_item(item):\n if item in items:\n  items.remove(item)\n  message = \"Item successfully deleted.\"\n else:\n  message = \"Item not found.\"\n return json.dumps({\"message\": message})"}
{"instruction":"Write a Python program to convert a given string to all uppercase letters.","input":"","output":"def convert_string_to_uppercase(string):\n    return string.upper()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a given string to all uppercase letters.\n\n### Input:\n\n\n### Output:\ndef convert_string_to_uppercase(string):\n    return string.upper()"}
{"instruction":"Develop a function in Python to take as input two array of integers and swap their elements.","input":"arr1 = [3, 5, 6, 9]\narr2 = [2, 4, 7, 8]","output":"def swap(arr1, arr2):\n    assert len(arr1) == len(arr2)\n    for i in range(len(arr1)):\n        temp = arr1[i]\n        arr1[i] = arr2[i]\n        arr2[i] = temp","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python to take as input two array of integers and swap their elements.\n\n### Input:\narr1 = [3, 5, 6, 9]\narr2 = [2, 4, 7, 8]\n\n### Output:\ndef swap(arr1, arr2):\n    assert len(arr1) == len(arr2)\n    for i in range(len(arr1)):\n        temp = arr1[i]\n        arr1[i] = arr2[i]\n        arr2[i] = temp"}
{"instruction":"Generate an array with all the prime numbers from 1 to 500 using python.","input":"","output":"def generate_primes(n):\n  prime_list = []\n  for n in range(1, n + 1):\n    for i in range(2,n):\n      if n % i == 0:\n        break\n    else:\n      prime_list.append(n)\n  return prime_list\n\nprime_list = generate_primes(500)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an array with all the prime numbers from 1 to 500 using python.\n\n### Input:\n\n\n### Output:\ndef generate_primes(n):\n  prime_list = []\n  for n in range(1, n + 1):\n    for i in range(2,n):\n      if n % i == 0:\n        break\n    else:\n      prime_list.append(n)\n  return prime_list\n\nprime_list = generate_primes(500)"}
{"instruction":"Generate a Python code for a decision tree classifier.","input":"X (features): height, weight\nY (target): gender","output":"import pandas as pd\nfrom sklearn import tree\n\n# Load the data\ndata = pd.read_csv('data.csv')\nX = data[['height', 'weight']]\ny = data['gender']\n\n# Train the model\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, y)\n\n# Make a prediction\nprediction = clf.predict([[180, 80]])\nprint(prediction)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code for a decision tree classifier.\n\n### Input:\nX (features): height, weight\nY (target): gender\n\n### Output:\nimport pandas as pd\nfrom sklearn import tree\n\n# Load the data\ndata = pd.read_csv('data.csv')\nX = data[['height', 'weight']]\ny = data['gender']\n\n# Train the model\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, y)\n\n# Make a prediction\nprediction = clf.predict([[180, 80]])\nprint(prediction)"}
{"instruction":"Generate a web scraper in Python to scrape out 10 latest tweets from the page of a Twitter profile.","input":"","output":"import tweepy \nimport pandas as pd\n\n# Authentication credentials \nconsumer_key = 'XXXXXXXXXXXXXXXXXXXXX'\nconsumer_secret = 'XXXXXXXXXXXXXXXXXXXXX'\naccess_token = 'XXXXXXXXXXXXXXXXXXXXX'\naccess_token_secret = 'XXXXXXXXXXXXXXXXXXXXX'\n\n# Authenticating the access \nauth = tweepy.OAuthHandler(consumer_key, consumer_secret) \nauth.set_access_token(access_token, access_token_secret) \napi = tweepy.API(auth) \n\n# Fetching tweets\ntweets = api.user_timeline('username') \n\n# Parsing the tweets\ndef parse_tweets(tweets): \n    # Creating a list to store the parsed tweets \n    parsed_tweets = [] \n  \n    # appending parsed tweets to the list \n    for tweet in tweets[:10]: \n        # Fetching tweets and  \n        # printing the fetched tweets \n        parsed_tweets.append({'created_at': tweet.created_at, 'text': tweet.text})\n  \n    # Returning the quotes \n    return parsed_tweets \n\n# Printing the parsed tweets \ntweets_list = parse_tweets(tweets) \nprint(tweets_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a web scraper in Python to scrape out 10 latest tweets from the page of a Twitter profile.\n\n### Input:\n\n\n### Output:\nimport tweepy \nimport pandas as pd\n\n# Authentication credentials \nconsumer_key = 'XXXXXXXXXXXXXXXXXXXXX'\nconsumer_secret = 'XXXXXXXXXXXXXXXXXXXXX'\naccess_token = 'XXXXXXXXXXXXXXXXXXXXX'\naccess_token_secret = 'XXXXXXXXXXXXXXXXXXXXX'\n\n# Authenticating the access \nauth = tweepy.OAuthHandler(consumer_key, consumer_secret) \nauth.set_access_token(access_token, access_token_secret) \napi = tweepy.API(auth) \n\n# Fetching tweets\ntweets = api.user_timeline('username') \n\n# Parsing the tweets\ndef parse_tweets(tweets): \n    # Creating a list to store the parsed tweets \n    parsed_tweets = [] \n  \n    # appending parsed tweets to the list \n    for tweet in tweets[:10]: \n        # Fetching tweets and  \n        # printing the fetched tweets \n        parsed_tweets.append({'created_at': tweet.created_at, 'text': tweet.text})\n  \n    # Returning the quotes \n    return parsed_tweets \n\n# Printing the parsed tweets \ntweets_list = parse_tweets(tweets) \nprint(tweets_list)"}
{"instruction":"Write a Python script to compare two lists of numbers and return their common elements.","input":"list1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]","output":"def common_elements(list1, list2):\n # Create lists to store the results \n common_elements = []\n\n # Loop through each list \n for element1 in list1:\n for element2 in list2:\n\n # Check if the elements match \n if element1 == element2:\n common_elements.append(element1)\n\n # Return the list of common elements \n return common_elements\n\nlist1 = [1,2,3,4,5] \nlist2 = [3,4,5,6,7]\n\n# Call the common_elements function \nprint(common_elements(list1, list2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to compare two lists of numbers and return their common elements.\n\n### Input:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\n### Output:\ndef common_elements(list1, list2):\n # Create lists to store the results \n common_elements = []\n\n # Loop through each list \n for element1 in list1:\n for element2 in list2:\n\n # Check if the elements match \n if element1 == element2:\n common_elements.append(element1)\n\n # Return the list of common elements \n return common_elements\n\nlist1 = [1,2,3,4,5] \nlist2 = [3,4,5,6,7]\n\n# Call the common_elements function \nprint(common_elements(list1, list2))"}
{"instruction":"Create a function that capitalizes the first letter of any given word","input":"\"python\"","output":"def capitalize_first_letter(word):\n    return word[0].upper() + word[1:]\n\n# main\nword = \"python\"\ncapitalized = capitalize_first_letter(word)\nprint(capitalized)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that capitalizes the first letter of any given word\n\n### Input:\n\"python\"\n\n### Output:\ndef capitalize_first_letter(word):\n    return word[0].upper() + word[1:]\n\n# main\nword = \"python\"\ncapitalized = capitalize_first_letter(word)\nprint(capitalized)"}
{"instruction":"Create a function for checking if a string is palindrome using Python.","input":"","output":"def is_palindrome(text):\n    reverse = text[::-1] # reverse the string\n    return text == reverse","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function for checking if a string is palindrome using Python.\n\n### Input:\n\n\n### Output:\ndef is_palindrome(text):\n    reverse = text[::-1] # reverse the string\n    return text == reverse"}
{"instruction":"Design a Merge Sort algorithm in Python that sorts a given list of integers.","input":"[5, 3, 6, 8, 10, 1, 4, 7]","output":"def merge_sort(arr):\n if len(arr) >1: \n mid = len(arr)\/\/2  #Finding the mid of the array \n L = arr[:mid]   # Dividing the array elements  \n R = arr[mid:] # into 2 halves \n  \n merge_sort(L) # Sorting the first half \n merge_sort(R) # Sorting the second half \n  \n i = j = k = 0\n  \n # Copy data to temp arrays L[] and R[] \n while i < len(L) and j < len(R): \n if L[i] < R[j]: \n arr[k] = L[i] \n i+=1\n else: \n arr[k] = R[j] \n j+=1\n k+=1\n  \n # Checking if any element was left \n while i < len(L): \n arr[k] = L[i] \n i+=1\n k+=1\n  \n while j < len(R): \n arr[k] = R[j] \n j+=1\n k+=1\n  \ndef print_list(arr): \n for i in range(len(arr)):         \n print(arr[i],end=\" \") \n print() \n  \n# Driver code to test above \nif __name__ == '__main__': \n arr = [5,3,6,8,10,1,4,7] \n print (\"Given array is\", end=\"\\n\")  \n print_list(arr) \n merge_sort(arr) \n print(\"Sorted array is: \", end=\"\\n\") \n print_list(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Merge Sort algorithm in Python that sorts a given list of integers.\n\n### Input:\n[5, 3, 6, 8, 10, 1, 4, 7]\n\n### Output:\ndef merge_sort(arr):\n if len(arr) >1: \n mid = len(arr)\/\/2  #Finding the mid of the array \n L = arr[:mid]   # Dividing the array elements  \n R = arr[mid:] # into 2 halves \n  \n merge_sort(L) # Sorting the first half \n merge_sort(R) # Sorting the second half \n  \n i = j = k = 0\n  \n # Copy data to temp arrays L[] and R[] \n while i < len(L) and j < len(R): \n if L[i] < R[j]: \n arr[k] = L[i] \n i+=1\n else: \n arr[k] = R[j] \n j+=1\n k+=1\n  \n # Checking if any element was left \n while i < len(L): \n arr[k] = L[i] \n i+=1\n k+=1\n  \n while j < len(R): \n arr[k] = R[j] \n j+=1\n k+=1\n  \ndef print_list(arr): \n for i in range(len(arr)):         \n print(arr[i],end=\" \") \n print() \n  \n# Driver code to test above \nif __name__ == '__main__': \n arr = [5,3,6,8,10,1,4,7] \n print (\"Given array is\", end=\"\\n\")  \n print_list(arr) \n merge_sort(arr) \n print(\"Sorted array is: \", end=\"\\n\") \n print_list(arr)"}
{"instruction":"Build a web scraper in Python to extract data from a given webpage.","input":"\"https:\/\/www.example.com\"","output":"import requests\nfrom bs4 import BeautifulSoup\n\n# Make a request to the website and get the HTML\nurl = \"https:\/\/www.example.com\"\nresponse = requests.get(url)\nhtml = response.content\n\n# Parse the HTML using BeautifulSoup\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Extract data from tags which contain specific class names\ndata = soup.find_all('div', {\"class\": \"example-class\"})","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a web scraper in Python to extract data from a given webpage.\n\n### Input:\n\"https:\/\/www.example.com\"\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Make a request to the website and get the HTML\nurl = \"https:\/\/www.example.com\"\nresponse = requests.get(url)\nhtml = response.content\n\n# Parse the HTML using BeautifulSoup\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Extract data from tags which contain specific class names\ndata = soup.find_all('div', {\"class\": \"example-class\"})"}
{"instruction":"Write a Python function to add two given numbers without using the '+' operator.","input":"","output":"def add(num1, num2): \n    while num2 != 0: \n        carry = num1 & num2 \n        num1 = num1 ^ num2 \n        num2 = carry << 1\n    return num1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to add two given numbers without using the '+' operator.\n\n### Input:\n\n\n### Output:\ndef add(num1, num2): \n    while num2 != 0: \n        carry = num1 & num2 \n        num1 = num1 ^ num2 \n        num2 = carry << 1\n    return num1"}
{"instruction":"Develop a function in Python that will find the sum of all prime numbers in a given range.","input":"upper = 10\nlower = 1","output":"def primeSum(lower, upper): \n    sum = 0\n    for num in range(lower, upper + 1): \n        if num > 1: \n            for i in range(2, num): \n                if (num % i) == 0: \n                    break \n            else: \n                sum += num \n  \n    return sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python that will find the sum of all prime numbers in a given range.\n\n### Input:\nupper = 10\nlower = 1\n\n### Output:\ndef primeSum(lower, upper): \n    sum = 0\n    for num in range(lower, upper + 1): \n        if num > 1: \n            for i in range(2, num): \n                if (num % i) == 0: \n                    break \n            else: \n                sum += num \n  \n    return sum"}
{"instruction":"Create a Python script to print the absolute difference between two given numbers.","input":"9, 5","output":"def absolute_difference(A, B): \n    return abs(A - B) \n  \n# Driver Code \nA = 9\nB = 5\nprint(absolute_difference(A, B))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to print the absolute difference between two given numbers.\n\n### Input:\n9, 5\n\n### Output:\ndef absolute_difference(A, B): \n    return abs(A - B) \n  \n# Driver Code \nA = 9\nB = 5\nprint(absolute_difference(A, B))"}
{"instruction":"Write a Python class to store the features of a product.","input":"- Title\n- Price \n- Model\n- Brand \n- Color","output":"class Product:\n    def __init__(self, title, price, model, brand, color):\n        self.title = title\n        self.price = price\n        self.model = model\n        self.brand = brand\n        self.color = color\n    \n    def get_title(self):\n        return self.title\n    \n    def set_title(self, title):\n        self.title = title\n\n    def get_price(self):\n        return self.price\n    \n    def set_price(self, price):\n        self.price = price\n\n    def get_model(self):\n        return self.model\n    \n    def set_model(self, model):\n        self.model = model\n\n    def get_brand(self):\n        return self.brand\n    \n    def set_brand(self, brand):\n        self.brand = brand\n\n    def get_color(self):\n        return self.color\n    \n    def set_color(self, color):\n        self.color = color","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class to store the features of a product.\n\n### Input:\n- Title\n- Price \n- Model\n- Brand \n- Color\n\n### Output:\nclass Product:\n    def __init__(self, title, price, model, brand, color):\n        self.title = title\n        self.price = price\n        self.model = model\n        self.brand = brand\n        self.color = color\n    \n    def get_title(self):\n        return self.title\n    \n    def set_title(self, title):\n        self.title = title\n\n    def get_price(self):\n        return self.price\n    \n    def set_price(self, price):\n        self.price = price\n\n    def get_model(self):\n        return self.model\n    \n    def set_model(self, model):\n        self.model = model\n\n    def get_brand(self):\n        return self.brand\n    \n    def set_brand(self, brand):\n        self.brand = brand\n\n    def get_color(self):\n        return self.color\n    \n    def set_color(self, color):\n        self.color = color"}
{"instruction":"Generate a universal JSON serialization from any Python class.","input":"","output":"import json\n\ndef serialize_object(obj):\n    if hasattr(obj, '__dict__'):\n        return obj.__dict__\n    else:\n        return obj\n\ndef serialize_class(class_instance):\n    return json.dumps(class_instance, default=serialize_object)\n\nif __name__ == '__main__':\n    # Sample\n    class Person:\n        def __init__(self, name, age):\n            self.name = name\n            self.age = age\n        def hello(self):\n            print(\"Hello, my name is {} and I'm {} years old\".format(self.name, self.age))\n    \n    person = Person('Jane', 20)\n    print(serialize_class(person))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a universal JSON serialization from any Python class.\n\n### Input:\n\n\n### Output:\nimport json\n\ndef serialize_object(obj):\n    if hasattr(obj, '__dict__'):\n        return obj.__dict__\n    else:\n        return obj\n\ndef serialize_class(class_instance):\n    return json.dumps(class_instance, default=serialize_object)\n\nif __name__ == '__main__':\n    # Sample\n    class Person:\n        def __init__(self, name, age):\n            self.name = name\n            self.age = age\n        def hello(self):\n            print(\"Hello, my name is {} and I'm {} years old\".format(self.name, self.age))\n    \n    person = Person('Jane', 20)\n    print(serialize_class(person))"}
{"instruction":"Write a function in Python to get the intersection of two sorted lists.","input":"list1 = [5, 7, 9, 11, 13]\nlist2 = [7, 8, 10, 11, 12]","output":"def intersection(list1, list2):\n result = []\n i = 0\n j = 0\n while i < len(list1) and j < len(list2):\n if list1[i] == list2[j]:\n result.append(list1[i])\n i += 1\n j += 1\n elif list1[i] < list2[j]:\n i += 1\n else:\n j += 1\n return result\n\nprint(intersection(list1, list2))\n# Output: [7, 11]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to get the intersection of two sorted lists.\n\n### Input:\nlist1 = [5, 7, 9, 11, 13]\nlist2 = [7, 8, 10, 11, 12]\n\n### Output:\ndef intersection(list1, list2):\n result = []\n i = 0\n j = 0\n while i < len(list1) and j < len(list2):\n if list1[i] == list2[j]:\n result.append(list1[i])\n i += 1\n j += 1\n elif list1[i] < list2[j]:\n i += 1\n else:\n j += 1\n return result\n\nprint(intersection(list1, list2))\n# Output: [7, 11]"}
{"instruction":"Create a code to calculate the area of the triangle with given side lengths.","input":"a=3 \nb=4\nc=5","output":"# Python Program to find the area of triangle\na = 3\nb = 4\nc = 5\n# calculate the semi-perimeter\ns = (a + b + c) \/ 2\n# calculate the area\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint('The area of the triangle is %0.2f' %area)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code to calculate the area of the triangle with given side lengths.\n\n### Input:\na=3 \nb=4\nc=5\n\n### Output:\n# Python Program to find the area of triangle\na = 3\nb = 4\nc = 5\n# calculate the semi-perimeter\ns = (a + b + c) \/ 2\n# calculate the area\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint('The area of the triangle is %0.2f' %area)"}
{"instruction":"Generate a classification tree from the given dataset.","input":"x1\tx2\tx3\tY\n0\t0\t0\t0\n1\t1\t1\t1\n1\t0\t0\t0\n0\t1\t1\t1","output":"# Python program to generate a classification tree\n# from a given dataset\n\n# Importing the required library\nimport pandas as pd\n\n# Creating a dataframe\ndf = pd.DataFrame({'X1': [0, 1, 1, 0],\n                   'X2': [0, 1, 0, 1],\n                   'X3': [0, 1, 0, 1],\n                   'Y': [0, 1, 0, 1]})\n\n# Traversing all columns except 'Y'\nfor col in df.columns[:-1]:\n\n    # Select 1st row from df\n    first_row = df[col][0]\n\n    # Creating a temporary dataframe\n    df_temp = df[[col, 'Y']]\n\n    # Grouping the dataframe based on the 1st row\n    if first_row == 0:\n        df_grouped = df_temp.groupby([col]).sum().reset_index()\n    else:\n        df_grouped = df_temp.groupby([col]).count().reset_index()\n\n    # Check condition on grouped dataframe\n    condition = (df_grouped['Y'] == 0).all()\n\n    # Traverse through grouped dataframe\n    if condition:\n        print(col + ' - 0')\n    else:\n        print(col + ' - 1')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a classification tree from the given dataset.\n\n### Input:\nx1\tx2\tx3\tY\n0\t0\t0\t0\n1\t1\t1\t1\n1\t0\t0\t0\n0\t1\t1\t1\n\n### Output:\n# Python program to generate a classification tree\n# from a given dataset\n\n# Importing the required library\nimport pandas as pd\n\n# Creating a dataframe\ndf = pd.DataFrame({'X1': [0, 1, 1, 0],\n                   'X2': [0, 1, 0, 1],\n                   'X3': [0, 1, 0, 1],\n                   'Y': [0, 1, 0, 1]})\n\n# Traversing all columns except 'Y'\nfor col in df.columns[:-1]:\n\n    # Select 1st row from df\n    first_row = df[col][0]\n\n    # Creating a temporary dataframe\n    df_temp = df[[col, 'Y']]\n\n    # Grouping the dataframe based on the 1st row\n    if first_row == 0:\n        df_grouped = df_temp.groupby([col]).sum().reset_index()\n    else:\n        df_grouped = df_temp.groupby([col]).count().reset_index()\n\n    # Check condition on grouped dataframe\n    condition = (df_grouped['Y'] == 0).all()\n\n    # Traverse through grouped dataframe\n    if condition:\n        print(col + ' - 0')\n    else:\n        print(col + ' - 1')"}
{"instruction":"Create an algorithm in Python to check whether a number is prime or not.","input":"14","output":"\"\"\"\nCreate an algorithm in Python to check whether a number is prime or not\n\"\"\"\n\n#define a function to check whether a number is prime\ndef is_prime(num):\n  #check if the number is 1 or 2\n  if num in [1, 2]:\n    return True\n  \n  #check if the number is mulitple of 2\n  if num % 2 == 0:\n    return False\n  \n  #otherwise check all odd numbers between 3 and the number's square root\n  for i in range(3, int(num ** 0.5 + 1), 2):\n    #if the number is divisble by any odd number, it is not prime\n    if num % i == 0:\n      return False\n  \n  #if the number isn't divisible by any odd number, it is prime\n  return True\n\n#test the function\nif __name__ == '__main__':\n  num = 14\n  print(is_prime(num))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to check whether a number is prime or not.\n\n### Input:\n14\n\n### Output:\n\"\"\"\nCreate an algorithm in Python to check whether a number is prime or not\n\"\"\"\n\n#define a function to check whether a number is prime\ndef is_prime(num):\n  #check if the number is 1 or 2\n  if num in [1, 2]:\n    return True\n  \n  #check if the number is mulitple of 2\n  if num % 2 == 0:\n    return False\n  \n  #otherwise check all odd numbers between 3 and the number's square root\n  for i in range(3, int(num ** 0.5 + 1), 2):\n    #if the number is divisble by any odd number, it is not prime\n    if num % i == 0:\n      return False\n  \n  #if the number isn't divisible by any odd number, it is prime\n  return True\n\n#test the function\nif __name__ == '__main__':\n  num = 14\n  print(is_prime(num))"}
{"instruction":"Create a function in Python that takes two matrices and prints the result of their subtraction.","input":"A = [[2, 5, 3],\n     [1, 4, 7],\n     [5, 2, 9]]\n\nB = [[4, 7, 0],\n     [3, 2, 8],\n     [1, 3, 6]]","output":"def subtractMatrix(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    # Checking if the given two matrix are of same size \n    if rowsB != rowsA or colsA != colsB: \n        print(\"ERROR\") \n     \n    # Subtracting corresponding elements \n    C = [[0 for j in range(colsA)] for i in range(rowsB)] \n    for i in range(rowsA): \n        for j in range(colsB): \n            C[i][j] = A[i][j] - B[i][j] \n    return C","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two matrices and prints the result of their subtraction.\n\n### Input:\nA = [[2, 5, 3],\n     [1, 4, 7],\n     [5, 2, 9]]\n\nB = [[4, 7, 0],\n     [3, 2, 8],\n     [1, 3, 6]]\n\n### Output:\ndef subtractMatrix(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    # Checking if the given two matrix are of same size \n    if rowsB != rowsA or colsA != colsB: \n        print(\"ERROR\") \n     \n    # Subtracting corresponding elements \n    C = [[0 for j in range(colsA)] for i in range(rowsB)] \n    for i in range(rowsA): \n        for j in range(colsB): \n            C[i][j] = A[i][j] - B[i][j] \n    return C"}
{"instruction":"Implement a decision tree model in Python to classify given data.","input":"[0, 1, 0, 1, 0], [1, 0, 1, 0, 1]","output":"#importing necessary libraries\nfrom sklearn import tree\nimport numpy as np\n\n#data\nX = np.array([[0, 1, 0, 1, 0], [1, 0, 1, 0, 1]])\ny = np.array([0, 1])\n\n#model\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, y)\n\n#predicting\nx_test = np.array([[1, 0, 0, 0, 1]])\nprediction = clf.predict(x_test)\n\n#result\nprint(prediction)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a decision tree model in Python to classify given data.\n\n### Input:\n[0, 1, 0, 1, 0], [1, 0, 1, 0, 1]\n\n### Output:\n#importing necessary libraries\nfrom sklearn import tree\nimport numpy as np\n\n#data\nX = np.array([[0, 1, 0, 1, 0], [1, 0, 1, 0, 1]])\ny = np.array([0, 1])\n\n#model\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, y)\n\n#predicting\nx_test = np.array([[1, 0, 0, 0, 1]])\nprediction = clf.predict(x_test)\n\n#result\nprint(prediction)"}
{"instruction":"Produce a Python program to compute the Fibonacci number for a given integer.","input":"8","output":"def getFibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return getFibonacci(n-1)+getFibonacci(n-2) \n\nnumber = 8\nfibonacci_number = getFibonacci(number)\nprint(fibonacci_number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a Python program to compute the Fibonacci number for a given integer.\n\n### Input:\n8\n\n### Output:\ndef getFibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return getFibonacci(n-1)+getFibonacci(n-2) \n\nnumber = 8\nfibonacci_number = getFibonacci(number)\nprint(fibonacci_number)"}
{"instruction":"Develop a bot to assist with customer service. The bot must be able to handle basic inquiries without human intervention.","input":"Not applicable","output":"import nltk\nimport numpy as np\nimport random\nimport string # to process standard python strings\n\nimport bs4 as bs\nimport urllib.request\nimport re\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nnltk.download('punkt') # first-time\n\nraw = open('customer_responses.txt','r',encoding='utf8').read()\nraw = raw.lower()# converts to lowercase\n\nsent_tokens = nltk.sent_tokenize(raw)# converts to list of sentences \nword_tokens = nltk.word_tokenize(raw)# converts to list of words\n\nlemmer = nltk.stem.WordNetLemmatizer()\n\n#WordNet is a semantically-oriented dictionary of English included in NLTK.\ndef LemTokens(tokens):\n    return [lemmer.lemmatize(token) for token in tokens]\n\nremove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)\n\ndef LemNormalize(text):\n    return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))\n\n# key word matching\n\n# greeting Inputs\nGREETING_INPUTS = (\"hello\", \"hi\", \"greetings\", \"sup\", \"what's up\",\"hey\",)\n\n# Greeting responses back to the user\nGREETING_RESPONSES = [\"hi\", \"hey\", \"*nods*\", \"hi there\", \"hello\", \"I am glad! You are talking to me\"]\n\n# Generating response\ndef greeting(sentence):\n\n    # if user's input is a greeting, then return a randomly chosen greeting response\n    for word in sentence.split():\n        if word.lower() in GREETING_INPUTS:\n            return random.choice(GREETING_RESPONSES)\n\n# Generate response\ndef response(user_response):\n    robo_response=''\n    sent_tokens.append(user_response)\n    TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')\n    tfidf = TfidfVec.fit_transform(sent_tokens)\n    #get the measure of similarity (similarity scores)\n    vals = cosine_similarity(tfidf[-1], tfidf)\n    #get the index of the most similar text\/sentence to the users response\n    idx=vals.argsort()[0][-2]\n    #parse through one of the most similar sentence like the users response\n    flat = vals.flatten()\n    flat.sort()\n    req_tfidf = flat[-2]\n    if(req_tfidf==0):\n        robo_response=robo_response+\"I am sorry! I don't understand you\"\n        return robo_response\n    else:\n        robo_response = robo_response+sent_tokens[idx]\n        return robo_response\n\n# Call the chatbot\nflag=True\nprint(\"ROBO: My name is Robo. I will answer your queries about Customer Service. If you want to exit, type Bye!\")\nwhile(flag==True):\n    user_response = input()\n    user_response=user_response.lower()\n    if(user_response!='bye'):\n        if(user_response=='thanks' or user_response=='thank you' ):\n            flag=False\n            print(\"ROBO: You are welcome..\")\n        else:\n            if(greeting(user_response)!=None):\n                print(\"ROBO: \"+greeting(user_response))\n            else:\n                print(\"ROBO: \",end=\"\")\n                print(response(user_response))\n                sent_tokens.remove(user_response)\n    else:\n        flag=False\n        print(\"ROBO: Bye! take care..\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a bot to assist with customer service. The bot must be able to handle basic inquiries without human intervention.\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\nimport numpy as np\nimport random\nimport string # to process standard python strings\n\nimport bs4 as bs\nimport urllib.request\nimport re\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nnltk.download('punkt') # first-time\n\nraw = open('customer_responses.txt','r',encoding='utf8').read()\nraw = raw.lower()# converts to lowercase\n\nsent_tokens = nltk.sent_tokenize(raw)# converts to list of sentences \nword_tokens = nltk.word_tokenize(raw)# converts to list of words\n\nlemmer = nltk.stem.WordNetLemmatizer()\n\n#WordNet is a semantically-oriented dictionary of English included in NLTK.\ndef LemTokens(tokens):\n    return [lemmer.lemmatize(token) for token in tokens]\n\nremove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)\n\ndef LemNormalize(text):\n    return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))\n\n# key word matching\n\n# greeting Inputs\nGREETING_INPUTS = (\"hello\", \"hi\", \"greetings\", \"sup\", \"what's up\",\"hey\",)\n\n# Greeting responses back to the user\nGREETING_RESPONSES = [\"hi\", \"hey\", \"*nods*\", \"hi there\", \"hello\", \"I am glad! You are talking to me\"]\n\n# Generating response\ndef greeting(sentence):\n\n    # if user's input is a greeting, then return a randomly chosen greeting response\n    for word in sentence.split():\n        if word.lower() in GREETING_INPUTS:\n            return random.choice(GREETING_RESPONSES)\n\n# Generate response\ndef response(user_response):\n    robo_response=''\n    sent_tokens.append(user_response)\n    TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')\n    tfidf = TfidfVec.fit_transform(sent_tokens)\n    #get the measure of similarity (similarity scores)\n    vals = cosine_similarity(tfidf[-1], tfidf)\n    #get the index of the most similar text\/sentence to the users response\n    idx=vals.argsort()[0][-2]\n    #parse through one of the most similar sentence like the users response\n    flat = vals.flatten()\n    flat.sort()\n    req_tfidf = flat[-2]\n    if(req_tfidf==0):\n        robo_response=robo_response+\"I am sorry! I don't understand you\"\n        return robo_response\n    else:\n        robo_response = robo_response+sent_tokens[idx]\n        return robo_response\n\n# Call the chatbot\nflag=True\nprint(\"ROBO: My name is Robo. I will answer your queries about Customer Service. If you want to exit, type Bye!\")\nwhile(flag==True):\n    user_response = input()\n    user_response=user_response.lower()\n    if(user_response!='bye'):\n        if(user_response=='thanks' or user_response=='thank you' ):\n            flag=False\n            print(\"ROBO: You are welcome..\")\n        else:\n            if(greeting(user_response)!=None):\n                print(\"ROBO: \"+greeting(user_response))\n            else:\n                print(\"ROBO: \",end=\"\")\n                print(response(user_response))\n                sent_tokens.remove(user_response)\n    else:\n        flag=False\n        print(\"ROBO: Bye! take care..\")"}
{"instruction":"Write a python code to find the roots of the equation: x2- 7x + 10 = 0.","input":"","output":"#Calculates roots of quadratic equation\n\na = 1\nb = -7\nc = 10\n\n#Calculate root using formula\ndiscriminant = (b**2) - (4*a*c)\n\nif discriminant < 0:\n    print(\"The equation has no real solutions.\")\nelse:\n    root1 = (-b + (discriminant**.5)) \/ (2*a)\n    root2 = (-b - (discriminant**.5)) \/ (2*a)\n\n    print(\"The roots of this equation are:\", root1, \"and\", root2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to find the roots of the equation: x2- 7x + 10 = 0.\n\n### Input:\n\n\n### Output:\n#Calculates roots of quadratic equation\n\na = 1\nb = -7\nc = 10\n\n#Calculate root using formula\ndiscriminant = (b**2) - (4*a*c)\n\nif discriminant < 0:\n    print(\"The equation has no real solutions.\")\nelse:\n    root1 = (-b + (discriminant**.5)) \/ (2*a)\n    root2 = (-b - (discriminant**.5)) \/ (2*a)\n\n    print(\"The roots of this equation are:\", root1, \"and\", root2)"}
{"instruction":"Create a python program to simulate the rolling of three six-sided dice and print out the results.","input":"","output":"import random\n\n# Function to simulate rolling 3 dice\ndef roll_dice():\n    d1 = random.randint(1, 6)\n    d2 = random.randint(1, 6)\n    d3 = random.randint(1, 6)\n\n    print(d1, d2, d3)\n\n# Roll the dice 3 times\nfor roll in range(3):\n    roll_dice()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to simulate the rolling of three six-sided dice and print out the results.\n\n### Input:\n\n\n### Output:\nimport random\n\n# Function to simulate rolling 3 dice\ndef roll_dice():\n    d1 = random.randint(1, 6)\n    d2 = random.randint(1, 6)\n    d3 = random.randint(1, 6)\n\n    print(d1, d2, d3)\n\n# Roll the dice 3 times\nfor roll in range(3):\n    roll_dice()"}
{"instruction":"Create a basic Python Flask application that reads data from a MySQL database and displays a list of users on an HTML page.","input":"Not applicable","output":"from flask import Flask, render_template\nimport pymysql\n\napp = Flask(__name__)\n\n@app.route('\/')\ndef index():\n    # Create connection to database\n    connection = pymysql.connect(host='localhost',\n                                 port=3306,\n                                 user='user',\n                                 password='P@ssw0rd',\n                                 db='db')\n    # Get all users from database\n    with connection.cursor() as cursor:\n        query = 'SELECT * FROM users'\n        cursor.execute(query)\n        result = cursor.fetchall()\n    # Close connection\n    connection.close()\n    return render_template('index.html', users=result)\n\nif __name__ == '__main__':\n    app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Python Flask application that reads data from a MySQL database and displays a list of users on an HTML page.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, render_template\nimport pymysql\n\napp = Flask(__name__)\n\n@app.route('\/')\ndef index():\n    # Create connection to database\n    connection = pymysql.connect(host='localhost',\n                                 port=3306,\n                                 user='user',\n                                 password='P@ssw0rd',\n                                 db='db')\n    # Get all users from database\n    with connection.cursor() as cursor:\n        query = 'SELECT * FROM users'\n        cursor.execute(query)\n        result = cursor.fetchall()\n    # Close connection\n    connection.close()\n    return render_template('index.html', users=result)\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"instruction":"Generate a Python script that checks a list for duplicate elements.","input":"Not applicable","output":"def contains_duplicates(lst):\n    seen = set()\n    for x in lst:\n        if x in seen:\n            return True\n        seen.add(x)\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script that checks a list for duplicate elements.\n\n### Input:\nNot applicable\n\n### Output:\ndef contains_duplicates(lst):\n    seen = set()\n    for x in lst:\n        if x in seen:\n            return True\n        seen.add(x)\n    return False"}
{"instruction":"Given a list of integers as input, write a Python code snippet to find the largest number.","input":"[9, 2, 6, 3, -5, 5, 7]","output":"max_num = -float('inf')\nfor num in [9, 2, 6, 3, -5, 5, 7]:\n    if num > max_num:\n        max_num = num\nprint(max_num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integers as input, write a Python code snippet to find the largest number.\n\n### Input:\n[9, 2, 6, 3, -5, 5, 7]\n\n### Output:\nmax_num = -float('inf')\nfor num in [9, 2, 6, 3, -5, 5, 7]:\n    if num > max_num:\n        max_num = num\nprint(max_num)"}
{"instruction":"Write a python program to generate random passwords. The passwords should include letters, numbers, and symbols.","input":"Not applicable","output":"import random\nimport string\n\ndef generate_password():\n char_list = list(string.ascii_letters + string.digits + string.punctuation)\n random.shuffle(char_list)\n return ''.join(char_list[:20])\n\nprint(generate_password())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to generate random passwords. The passwords should include letters, numbers, and symbols.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\nimport string\n\ndef generate_password():\n char_list = list(string.ascii_letters + string.digits + string.punctuation)\n random.shuffle(char_list)\n return ''.join(char_list[:20])\n\nprint(generate_password())"}
{"instruction":"Create a command-line application in Python that stores customer data and allows customer to query by customer name","input":"","output":"import sys \n  \ndef print_customer_data(name): \n    # Code for searching customer data by customer name and \n    # printing results \n    ...\n\n# Main function for the customer search application\nif __name__==\"__main__\": \n    # Get command line arguments \n    args = sys.argv \n    \n    if len(args) == 2: \n        name = args[1]\n        print_customer_data(name) \n    else: \n        print(\"Invalid arguments, please specify a customer name.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a command-line application in Python that stores customer data and allows customer to query by customer name\n\n### Input:\n\n\n### Output:\nimport sys \n  \ndef print_customer_data(name): \n    # Code for searching customer data by customer name and \n    # printing results \n    ...\n\n# Main function for the customer search application\nif __name__==\"__main__\": \n    # Get command line arguments \n    args = sys.argv \n    \n    if len(args) == 2: \n        name = args[1]\n        print_customer_data(name) \n    else: \n        print(\"Invalid arguments, please specify a customer name.\")"}
{"instruction":"Write a python program to convert an integer to its binary form.","input":"","output":"def integer_to_binary(num):\n    if num == 0:\n        return 0\n    elif num < 0:\n        num += 2**32\n    binary = ''\n    while num > 0:\n        binary = str(num%2) + binary\n        num \/\/= 2\n    return binary","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to convert an integer to its binary form.\n\n### Input:\n\n\n### Output:\ndef integer_to_binary(num):\n    if num == 0:\n        return 0\n    elif num < 0:\n        num += 2**32\n    binary = ''\n    while num > 0:\n        binary = str(num%2) + binary\n        num \/\/= 2\n    return binary"}
{"instruction":"Design a function in Python to pad a list to a given length by replicating the rightmost element.","input":"[2, 3, 5], 7","output":"def pad_list_right(lst, pad_length):\n    extra_length = pad_length - len(lst)\n    lst.extend([lst[-1]] * extra_length)\n    return lst\n\nlst = [2, 3, 5]\npadding_length = 7\nresult = pad_list_right(lst, padding_length)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to pad a list to a given length by replicating the rightmost element.\n\n### Input:\n[2, 3, 5], 7\n\n### Output:\ndef pad_list_right(lst, pad_length):\n    extra_length = pad_length - len(lst)\n    lst.extend([lst[-1]] * extra_length)\n    return lst\n\nlst = [2, 3, 5]\npadding_length = 7\nresult = pad_list_right(lst, padding_length)\nprint(result)"}
{"instruction":"Update the given Python code to remove all the duplicated elements from a list.","input":"","output":"def remove_duplicates(nums):\n    new_list = []\n    for num in nums:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUpdate the given Python code to remove all the duplicated elements from a list.\n\n### Input:\n\n\n### Output:\ndef remove_duplicates(nums):\n    new_list = []\n    for num in nums:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list"}
{"instruction":"Write a web scraper in Python to fetch the title, rating and synopsis of the first 10 movies from IMDB","input":"","output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https:\/\/www.imdb.com\/chart\/top\"\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\nfor movie in soup.find_all(\"td\", class_=\"titleColumn\"):\n    title = movie.find(\"a\").text\n    rating = float(movie.find(\"strong\").text)\n    synopsis = movie.find(\"span\", class_=\"outline\").text\n    print(\"Title: {}\\nRating: {}\\nSynopsis: {}\\n\".format(title, rating, synopsis))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a web scraper in Python to fetch the title, rating and synopsis of the first 10 movies from IMDB\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https:\/\/www.imdb.com\/chart\/top\"\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\nfor movie in soup.find_all(\"td\", class_=\"titleColumn\"):\n    title = movie.find(\"a\").text\n    rating = float(movie.find(\"strong\").text)\n    synopsis = movie.find(\"span\", class_=\"outline\").text\n    print(\"Title: {}\\nRating: {}\\nSynopsis: {}\\n\".format(title, rating, synopsis))"}
{"instruction":"Develop a basic web scraper in Python to scrape the text of Wikipedia articles.","input":"A URL of any Wikipedia page, for example, \"https:\/\/en.wikipedia.org\/wiki\/Google\".","output":"import requests\nfrom bs4 import BeautifulSoup\n\n# Make an HTTP GET request to the Wikipedia page\nurl = \"https:\/\/en.wikipedia.org\/wiki\/Google\"\nresponse = requests.get(url)\n\n# Parse the response HTML\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\n# Extract the raw content of the Wikipedia page\ncontent = soup.find(\"div\", {\"id\": \"mw-content-text\"}).text\n\nprint(content)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a basic web scraper in Python to scrape the text of Wikipedia articles.\n\n### Input:\nA URL of any Wikipedia page, for example, \"https:\/\/en.wikipedia.org\/wiki\/Google\".\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Make an HTTP GET request to the Wikipedia page\nurl = \"https:\/\/en.wikipedia.org\/wiki\/Google\"\nresponse = requests.get(url)\n\n# Parse the response HTML\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\n# Extract the raw content of the Wikipedia page\ncontent = soup.find(\"div\", {\"id\": \"mw-content-text\"}).text\n\nprint(content)"}
{"instruction":"Complete the Python program to automatically add 3 months to a date.","input":"import datetime\ndate_str = '2020-01-31'\ndef add_three_months","output":"import datetime\ndate_str = '2020-01-31'\n\ndef add_three_months(date_str):\n    d = datetime.datetime.strptime(date_str, '%Y-%m-%d')\n    d = d + datetime.timedelta(days=90)\n    date_str = d.strftime('%Y-%m-%d')\n    return date_str","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nComplete the Python program to automatically add 3 months to a date.\n\n### Input:\nimport datetime\ndate_str = '2020-01-31'\ndef add_three_months\n\n### Output:\nimport datetime\ndate_str = '2020-01-31'\n\ndef add_three_months(date_str):\n    d = datetime.datetime.strptime(date_str, '%Y-%m-%d')\n    d = d + datetime.timedelta(days=90)\n    date_str = d.strftime('%Y-%m-%d')\n    return date_str"}
{"instruction":"Write a Python program that takes a sentence as an argument and removes all punctuations from it.","input":"String: \"This, is a?! test* sentence.\"","output":"import string\n\ndef removePunctuations(sentence):\n    return sentence.translate(str.maketrans('', '', string.punctuation))\n\nprint(removePunctuations(\"This, is a?! test* sentence.\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a sentence as an argument and removes all punctuations from it.\n\n### Input:\nString: \"This, is a?! test* sentence.\"\n\n### Output:\nimport string\n\ndef removePunctuations(sentence):\n    return sentence.translate(str.maketrans('', '', string.punctuation))\n\nprint(removePunctuations(\"This, is a?! test* sentence.\"))"}
{"instruction":"Create a python program to scrape data from Twitter","input":"","output":"import tweepy\n\nconsumer_key = ''\nconsumer_secret = ''\n\naccess_token = ''\naccess_token_secret = ''\n\n# authorization\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\n# get data from a particular twitter user\ntweets = api.user_timeline(screen_name='twitter_handle', count=200, include_rts=False, exclude_replies=True) \n\nfor tweet in tweets: \n    # scraping a data from tweets\n    print(tweet.text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to scrape data from Twitter\n\n### Input:\n\n\n### Output:\nimport tweepy\n\nconsumer_key = ''\nconsumer_secret = ''\n\naccess_token = ''\naccess_token_secret = ''\n\n# authorization\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\n# get data from a particular twitter user\ntweets = api.user_timeline(screen_name='twitter_handle', count=200, include_rts=False, exclude_replies=True) \n\nfor tweet in tweets: \n    # scraping a data from tweets\n    print(tweet.text)"}
{"instruction":"Create a machine learning model in Python to predict the number of people attending an event given the date of the event, the type of the event, and the location of the event.","input":"The date: 28\/02\/2021\nThe type: Party\nThe location: San Francisco, CA","output":"import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Load the dataset\ndata = pd.read_csv('data.csv')\n\n# Create features\ndata['date'] = pd.to_datetime(data['date'])\ndata['month'] = data['date'].dt.month\ndata['day'] = data['date'].dt.day\ndata['day_of_week'] = data['date'].dt.dayofweek\ndata['year'] = data['date'].dt.year\n\n# Define input and output features\nX = data[['month', 'day', 'day_of_week', 'year', 'type', 'location']]\ny = data['attendees']\n\n# Encode categorical features\ncat_features = ['type', 'location']\nX = pd.get_dummies(X, columns=cat_features)\n\n# Build and evaluate the model\nmodel = RandomForestRegressor(n_estimators=100)\nmodel.fit(X, y)\n\n# Test our input\ntest_input = [[2, 28, 0, 2021, 'Party', 'San Francisco, CA']]\nencoded_test_input = pd.get_dummies(pd.DataFrame(test_input, columns=X.columns))\nprediction = model.predict(encoded_test_input)[0]\nprint(f'We predict a total of {prediction:.2f} people will attend the event.')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python to predict the number of people attending an event given the date of the event, the type of the event, and the location of the event.\n\n### Input:\nThe date: 28\/02\/2021\nThe type: Party\nThe location: San Francisco, CA\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Load the dataset\ndata = pd.read_csv('data.csv')\n\n# Create features\ndata['date'] = pd.to_datetime(data['date'])\ndata['month'] = data['date'].dt.month\ndata['day'] = data['date'].dt.day\ndata['day_of_week'] = data['date'].dt.dayofweek\ndata['year'] = data['date'].dt.year\n\n# Define input and output features\nX = data[['month', 'day', 'day_of_week', 'year', 'type', 'location']]\ny = data['attendees']\n\n# Encode categorical features\ncat_features = ['type', 'location']\nX = pd.get_dummies(X, columns=cat_features)\n\n# Build and evaluate the model\nmodel = RandomForestRegressor(n_estimators=100)\nmodel.fit(X, y)\n\n# Test our input\ntest_input = [[2, 28, 0, 2021, 'Party', 'San Francisco, CA']]\nencoded_test_input = pd.get_dummies(pd.DataFrame(test_input, columns=X.columns))\nprediction = model.predict(encoded_test_input)[0]\nprint(f'We predict a total of {prediction:.2f} people will attend the event.')"}
{"instruction":"Generate a code to convert a given name to its uppercase version.","input":"john","output":"\"\"\"\nPython program to convert a name to uppercase\n\"\"\"\n\ndef to_uppercase(name):\n return name.upper()\n\nname = \"john\" \nprint(to_uppercase(name))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to convert a given name to its uppercase version.\n\n### Input:\njohn\n\n### Output:\n\"\"\"\nPython program to convert a name to uppercase\n\"\"\"\n\ndef to_uppercase(name):\n return name.upper()\n\nname = \"john\" \nprint(to_uppercase(name))"}
{"instruction":"Generate code in Python for a basic web-scraper. The scraper should take in a URL, download the HTML, and extract the title, meta description, and all h1-h6 tags.","input":"Sample URL","output":"import requests\nimport bs4\n\n# set the url\nurl = \"Sample URL\"\n\n# send a request\nresponse = requests.get(url)\n\n# get the response\nhtml = response.text\n\n# parse the response\nsoup = bs4.BeautifulSoup(html, \"html.parser\")\n\n\n# extract the title\ntitle = soup.title.text\n\n# extract the meta description\nmeta = soup.find('meta', attrs={'name': 'description'})\ndescription = meta.get('content')\n\n# extract all h1-h6 tags\nheading_tags = \"\"\nfor tag in soup.find_all(re.compile(\"^h[1-6]\")):\n heading_tags += tag.text\n \nprint(\"Title:\", title)\nprint(\"Meta Description:\", description)\nprint(\"Heading Tags:\", heading_tags)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code in Python for a basic web-scraper. The scraper should take in a URL, download the HTML, and extract the title, meta description, and all h1-h6 tags.\n\n### Input:\nSample URL\n\n### Output:\nimport requests\nimport bs4\n\n# set the url\nurl = \"Sample URL\"\n\n# send a request\nresponse = requests.get(url)\n\n# get the response\nhtml = response.text\n\n# parse the response\nsoup = bs4.BeautifulSoup(html, \"html.parser\")\n\n\n# extract the title\ntitle = soup.title.text\n\n# extract the meta description\nmeta = soup.find('meta', attrs={'name': 'description'})\ndescription = meta.get('content')\n\n# extract all h1-h6 tags\nheading_tags = \"\"\nfor tag in soup.find_all(re.compile(\"^h[1-6]\")):\n heading_tags += tag.text\n \nprint(\"Title:\", title)\nprint(\"Meta Description:\", description)\nprint(\"Heading Tags:\", heading_tags)"}
{"instruction":"Design a function to calculate the volume of a cube in Python.","input":"","output":"def cube_volume(side_length):\n  volume = side_length ** 3\n  return volume","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function to calculate the volume of a cube in Python.\n\n### Input:\n\n\n### Output:\ndef cube_volume(side_length):\n  volume = side_length ** 3\n  return volume"}
{"instruction":"Construct a Python program that calculates the sum of all the items in a given list.","input":"[1, 4, 2, 5, 9]","output":"def sumoflist(list): \n  sum = 0\n  for i in range(0, len(list)): \n    sum = sum + list[i] \n  \n  return sum\n\nlist1 = [1, 4, 2, 5, 9] \nprint(sumoflist(list1))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program that calculates the sum of all the items in a given list.\n\n### Input:\n[1, 4, 2, 5, 9]\n\n### Output:\ndef sumoflist(list): \n  sum = 0\n  for i in range(0, len(list)): \n    sum = sum + list[i] \n  \n  return sum\n\nlist1 = [1, 4, 2, 5, 9] \nprint(sumoflist(list1))"}
{"instruction":"Write a machine learning model in Python to detect the sentiment of a text document.","input":"The text document is \"This movie was horrible and I never want to watch it again.\"","output":"def sentiment_model(text):\n pred = model.predict([text])\n \n if pred == 0:\n  sentiment = 'Positive'\n elif pred == 1:\n  sentiment = 'Negative'\n \n return sentiment\n\nsentiment = sentiment_model(\"This movie was horrible and I never want to watch it again.\")\nprint(sentiment) # Output: Negative","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a machine learning model in Python to detect the sentiment of a text document.\n\n### Input:\nThe text document is \"This movie was horrible and I never want to watch it again.\"\n\n### Output:\ndef sentiment_model(text):\n pred = model.predict([text])\n \n if pred == 0:\n  sentiment = 'Positive'\n elif pred == 1:\n  sentiment = 'Negative'\n \n return sentiment\n\nsentiment = sentiment_model(\"This movie was horrible and I never want to watch it again.\")\nprint(sentiment) # Output: Negative"}
{"instruction":"Create an optimized Python program to print all prime numbers in a given range.","input":"4-15","output":"def is_prime(n):\n    if n <= 1:\n        return False\n  \n    for i in range(2, n):\n        if n % i == 0:\n            return False\n  \n    return True\n \nstart = 4\nend = 15\n \nfor num in range(start, end+1):\n   if is_prime(num):\n       print(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an optimized Python program to print all prime numbers in a given range.\n\n### Input:\n4-15\n\n### Output:\ndef is_prime(n):\n    if n <= 1:\n        return False\n  \n    for i in range(2, n):\n        if n % i == 0:\n            return False\n  \n    return True\n \nstart = 4\nend = 15\n \nfor num in range(start, end+1):\n   if is_prime(num):\n       print(num)"}
{"instruction":"Compile this Python code into an executable.","input":"def greeting():\n  print(\"Hello, World!\")\n\ngreeting()","output":"import py_compile\n\npy_compile.compile('sample.py', cfile='sample.pyc')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompile this Python code into an executable.\n\n### Input:\ndef greeting():\n  print(\"Hello, World!\")\n\ngreeting()\n\n### Output:\nimport py_compile\n\npy_compile.compile('sample.py', cfile='sample.pyc')"}
{"instruction":"Setup a Django server that can host a website.","input":"","output":"# Install Django if it does not already exist\npip install django\n\n# Start a new project\ndjango-admin startproject myproject\n\n# Create and apply migrations\ncd myproject\npython manage.py makemigrations\npython manage.py migrate\n\n# Start the server\npython manage.py runserver 0:8000","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSetup a Django server that can host a website.\n\n### Input:\n\n\n### Output:\n# Install Django if it does not already exist\npip install django\n\n# Start a new project\ndjango-admin startproject myproject\n\n# Create and apply migrations\ncd myproject\npython manage.py makemigrations\npython manage.py migrate\n\n# Start the server\npython manage.py runserver 0:8000"}
{"instruction":"Write a python program for binary search","input":"[2, 5, 7, 9, 11, 15]","output":"def binarySearch(arr, target):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) \/\/ 2\n\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program for binary search\n\n### Input:\n[2, 5, 7, 9, 11, 15]\n\n### Output:\ndef binarySearch(arr, target):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) \/\/ 2\n\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1"}
{"instruction":"Develop a program in Python to detect the outliers of a given dataset.","input":"Not applicable","output":"import numpy as np \n\n# Load dataset \ndata = np.genfromtxt(\"data.csv\", delimiter=\",\") \n\n# Calculate interquartile range \nQ1 = np.percentile(data, 25) \nQ3 = np.percentile(data, 75) \n\n# Interquartile range \nIQR = Q3 - Q1 \n\n# Remove outliers \noutliers = (data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))\n\n# Print outliers \nprint(data[outliers])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python to detect the outliers of a given dataset.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np \n\n# Load dataset \ndata = np.genfromtxt(\"data.csv\", delimiter=\",\") \n\n# Calculate interquartile range \nQ1 = np.percentile(data, 25) \nQ3 = np.percentile(data, 75) \n\n# Interquartile range \nIQR = Q3 - Q1 \n\n# Remove outliers \noutliers = (data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))\n\n# Print outliers \nprint(data[outliers])"}
{"instruction":"Using the provided data, generate a linear regression model using Python.","input":"x  |  y\n----------------\n1  |  1\n2  |  2\n3  |  4\n4  |  8\n5  |  16","output":"import numpy as np\n\ndef generate_model(data):\n    x = np.array([data[0], data[1], data[2], data[3], data[4]])\n    y = np.array([data[5], data[6], data[7], data[8], data[9]])\n    A = np.vstack([x, np.ones(len(x))]).T\n    m, c = np.linalg.lstsq(A, y)[0]\n    return m, c\n\nx = [1, 2, 3, 4, 5]\ny = [1, 2, 4, 8, 16]\nm, c = generate_model((x, y))\nprint(\"m = {}, c = {}\".format(m, c))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the provided data, generate a linear regression model using Python.\n\n### Input:\nx  |  y\n----------------\n1  |  1\n2  |  2\n3  |  4\n4  |  8\n5  |  16\n\n### Output:\nimport numpy as np\n\ndef generate_model(data):\n    x = np.array([data[0], data[1], data[2], data[3], data[4]])\n    y = np.array([data[5], data[6], data[7], data[8], data[9]])\n    A = np.vstack([x, np.ones(len(x))]).T\n    m, c = np.linalg.lstsq(A, y)[0]\n    return m, c\n\nx = [1, 2, 3, 4, 5]\ny = [1, 2, 4, 8, 16]\nm, c = generate_model((x, y))\nprint(\"m = {}, c = {}\".format(m, c))"}
{"instruction":"Create a Python module that takes a given number and produces an output array with the numbers 0 to the given number, excluding the given number.","input":"Number: 10","output":"def exclude_number(n):\n  return [i for i in range(0,n) if i < n]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module that takes a given number and produces an output array with the numbers 0 to the given number, excluding the given number.\n\n### Input:\nNumber: 10\n\n### Output:\ndef exclude_number(n):\n  return [i for i in range(0,n) if i < n]"}
{"instruction":"Generate a correct python function to check if a given list of integers contains a certain number.","input":"","output":"def contains_number(numbers, number):\n for x in numbers:\n if x == number:\n return True\n return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a correct python function to check if a given list of integers contains a certain number.\n\n### Input:\n\n\n### Output:\ndef contains_number(numbers, number):\n for x in numbers:\n if x == number:\n return True\n return False"}
{"instruction":"Create a Python program that calculates the total cost of an online purchase.","input":"ProductName: Powerbank, Quantity: 3, PriceEach: $15","output":"def calculate_total_cost(product_name, quantity, price):\n    return quantity * price\n\ntotal_cost = calculate_total_cost(\"Powerbank\", 3, 15)\nprint(\"Total cost of the purchase is $\" + str(total_cost))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that calculates the total cost of an online purchase.\n\n### Input:\nProductName: Powerbank, Quantity: 3, PriceEach: $15\n\n### Output:\ndef calculate_total_cost(product_name, quantity, price):\n    return quantity * price\n\ntotal_cost = calculate_total_cost(\"Powerbank\", 3, 15)\nprint(\"Total cost of the purchase is $\" + str(total_cost))"}
{"instruction":"Generate a Python program to merge two input lists.","input":"","output":"def merge_lists(list1, list2):\n   merged_list = list1 + list2\n   return merged_list\n\nresult = merge_lists([1,2,3], [4,5,6])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to merge two input lists.\n\n### Input:\n\n\n### Output:\ndef merge_lists(list1, list2):\n   merged_list = list1 + list2\n   return merged_list\n\nresult = merge_lists([1,2,3], [4,5,6])\nprint(result)"}
{"instruction":"Generate a Python Program to Sort a List by Frequency","input":"list_a = [1, 2, 3, 2, 5, 2]","output":"def sort_by_frequency(list_a):\n    frequency = {}\n    for a in list_a:\n        if a not in frequency:\n            frequency[a] = 1\n        else:\n            frequency[a] += 1\n    list_sorted = []\n    for key, value in sorted(frequency.items(), key=lambda item: item[1], reverse=True):\n        for _ in range(value):\n            list_sorted.append(key)\n    return list_sorted","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python Program to Sort a List by Frequency\n\n### Input:\nlist_a = [1, 2, 3, 2, 5, 2]\n\n### Output:\ndef sort_by_frequency(list_a):\n    frequency = {}\n    for a in list_a:\n        if a not in frequency:\n            frequency[a] = 1\n        else:\n            frequency[a] += 1\n    list_sorted = []\n    for key, value in sorted(frequency.items(), key=lambda item: item[1], reverse=True):\n        for _ in range(value):\n            list_sorted.append(key)\n    return list_sorted"}
{"instruction":"Write a code block to merge two given dictionaries into a single one.","input":"","output":"def mergeDictionaries(dict1, dict2):\n    '''This function takes two python dictionaries as inputs and returns a single merged dictionary.'''\n\n    # Create a new empty dictionary\n    merged_dict = {}\n\n    # Iterate over the two argument dictionaries and add the key-value pairs to the new dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    # Return the merged dictionary\n    return merged_dict","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code block to merge two given dictionaries into a single one.\n\n### Input:\n\n\n### Output:\ndef mergeDictionaries(dict1, dict2):\n    '''This function takes two python dictionaries as inputs and returns a single merged dictionary.'''\n\n    # Create a new empty dictionary\n    merged_dict = {}\n\n    # Iterate over the two argument dictionaries and add the key-value pairs to the new dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    # Return the merged dictionary\n    return merged_dict"}
{"instruction":"Create a Python program that compares two strings and returns true if the first one is longer than the second","input":"","output":"def compare_strings(string1, string2):\n  if len(string1) > len(string2):\n    return True\n  else:\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that compares two strings and returns true if the first one is longer than the second\n\n### Input:\n\n\n### Output:\ndef compare_strings(string1, string2):\n  if len(string1) > len(string2):\n    return True\n  else:\n    return False"}
{"instruction":"Write a Python program to implement the Bubble Sort algorithm and sort a given list of integers.","input":"list = [4, 9, 5, 2, 7, 1]","output":"def bubble_sort(list):\n    is_sorted = False\n    while not is_sorted:\n        is_sorted = True\n        for i in range(len(list)-1):\n            if (list[i] > list[i+1]):\n                list[i], list[i+1] = list[i+1], list[i]\n                is_sorted = False\n    return list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to implement the Bubble Sort algorithm and sort a given list of integers.\n\n### Input:\nlist = [4, 9, 5, 2, 7, 1]\n\n### Output:\ndef bubble_sort(list):\n    is_sorted = False\n    while not is_sorted:\n        is_sorted = True\n        for i in range(len(list)-1):\n            if (list[i] > list[i+1]):\n                list[i], list[i+1] = list[i+1], list[i]\n                is_sorted = False\n    return list"}
{"instruction":"Create a python program to group similar items together in a list.","input":"list = [\"dog\", \"cat\", \"cat\", \"fox\", \"dog\", \"elephant\"]","output":"def group_similar_items(list): \n    grouped_items = {} \n\n    for item in list: \n        if item in grouped_items: \n            grouped_items[item] += 1\n        else: \n            grouped_items[item] = 1\n\n    print(grouped_items)\n\ngroup_similar_items([\"dog\", \"cat\", \"cat\", \"fox\", \"dog\", \"elephant\"]) \n# Output: {'dog': 2, 'cat': 2, 'fox': 1, 'elephant': 1}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to group similar items together in a list.\n\n### Input:\nlist = [\"dog\", \"cat\", \"cat\", \"fox\", \"dog\", \"elephant\"]\n\n### Output:\ndef group_similar_items(list): \n    grouped_items = {} \n\n    for item in list: \n        if item in grouped_items: \n            grouped_items[item] += 1\n        else: \n            grouped_items[item] = 1\n\n    print(grouped_items)\n\ngroup_similar_items([\"dog\", \"cat\", \"cat\", \"fox\", \"dog\", \"elephant\"]) \n# Output: {'dog': 2, 'cat': 2, 'fox': 1, 'elephant': 1}"}
{"instruction":"Rewrite the following Java Program using Python.","input":"public class Greeting {\n    public static void main(String[] args){\n        System.out.println(\"Hello World!\");\n    }\n}","output":"print(\"Hello World!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following Java Program using Python.\n\n### Input:\npublic class Greeting {\n    public static void main(String[] args){\n        System.out.println(\"Hello World!\");\n    }\n}\n\n### Output:\nprint(\"Hello World!\")"}
{"instruction":"Debug a piece of code written in Python.","input":"def say_hello(name):\n    message = \"Hello %s!\" % name\n    print(message)\n\nsay_hello('John')","output":"def say_hello(name):\n    message = \"Hello %s!\" % name\n    print(message)\n\n# checking for input\nif name != '':\n    say_hello(name)\nelse:\n    print('Error: No name provided')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDebug a piece of code written in Python.\n\n### Input:\ndef say_hello(name):\n    message = \"Hello %s!\" % name\n    print(message)\n\nsay_hello('John')\n\n### Output:\ndef say_hello(name):\n    message = \"Hello %s!\" % name\n    print(message)\n\n# checking for input\nif name != '':\n    say_hello(name)\nelse:\n    print('Error: No name provided')"}
{"instruction":"Write a python program to identify if a string s has matching parentheses","input":"","output":"def matching_paren(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False \n            stack.pop()\n    \n    if len(stack) == 0:\n        return True\n    else:\n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to identify if a string s has matching parentheses\n\n### Input:\n\n\n### Output:\ndef matching_paren(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False \n            stack.pop()\n    \n    if len(stack) == 0:\n        return True\n    else:\n        return False"}
{"instruction":"Create a Python program to compute the product of two given matrices.","input":"<Example matrix files>","output":"def multiply(A, B):\n    rows_A = len(A)\n    cols_A = len(A[0])\n    rows_B = len(B)\n    cols_B = len(B[0])\n \n    if cols_A != rows_B:\n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\")\n        return\n \n    # Create the result matrix\n    # Dimensions would be rows_A x cols_B\n    C = [[0 for row in range(cols_B)] for col in range(rows_A)]\n \n    for i in range(rows_A):\n        for j in range(cols_B):\n            for k in range(cols_A):\n                C[i][j] += A[i][k] * B[k][j]\n    return C","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to compute the product of two given matrices.\n\n### Input:\n<Example matrix files>\n\n### Output:\ndef multiply(A, B):\n    rows_A = len(A)\n    cols_A = len(A[0])\n    rows_B = len(B)\n    cols_B = len(B[0])\n \n    if cols_A != rows_B:\n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\")\n        return\n \n    # Create the result matrix\n    # Dimensions would be rows_A x cols_B\n    C = [[0 for row in range(cols_B)] for col in range(rows_A)]\n \n    for i in range(rows_A):\n        for j in range(cols_B):\n            for k in range(cols_A):\n                C[i][j] += A[i][k] * B[k][j]\n    return C"}
{"instruction":"Rewrite a given function in Python to return the sum of the two parameters instead of multiplying them.","input":"def multiply(a, b):\n  return a * b","output":"def multiply(a, b):\n  return a + b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite a given function in Python to return the sum of the two parameters instead of multiplying them.\n\n### Input:\ndef multiply(a, b):\n  return a * b\n\n### Output:\ndef multiply(a, b):\n  return a + b"}
{"instruction":"Come up with a solution in Python to replace all the words in a sentence with the same character.","input":"Sentence: \"I am bored\"\nCharacter: *","output":"def replaceWordsWithCharacter(sentence, character):\n    sentenceList = sentence.split(' ')\n    newSentence = ''\n    \n    for word in sentenceList:\n        newSentence += character\n    \n    return newSentence\n\nsentence = \"I am bored\"\ncharacter = \"*\"\nprint(replaceWordsWithCharacter(sentence,character))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a solution in Python to replace all the words in a sentence with the same character.\n\n### Input:\nSentence: \"I am bored\"\nCharacter: *\n\n### Output:\ndef replaceWordsWithCharacter(sentence, character):\n    sentenceList = sentence.split(' ')\n    newSentence = ''\n    \n    for word in sentenceList:\n        newSentence += character\n    \n    return newSentence\n\nsentence = \"I am bored\"\ncharacter = \"*\"\nprint(replaceWordsWithCharacter(sentence,character))"}
{"instruction":"Design a simple linear regression algorithm in Python.","input":"","output":"def simple_linear_regression(X, y): \n    # calculate the mean value of a list of numbers \n    def mean(values): \n        return sum(values) \/ float(len(values)) \n\n    # calculate covariance between x and y \n    def covariance(x, mean_x, y, mean_y): \n        covar = 0.0\n        for i in range(len(x)): \n            covar += (x[i] - mean_x) * (y[i] - mean_y) \n        return covar \n\n    # calculate the variance of a list of numbers \n    def variance(values, mean): \n        return sum([(x - mean)**2 for x in values]) \n  \n    # calculate coefficients \n    def coefficients(X, y): \n        x_mean, y_mean = mean(X), mean(y) \n        b1 = covariance(X, x_mean, y, y_mean) \/ variance(X, x_mean) \n        b0 = y_mean - b1 * x_mean \n        return [b0, b1] \n  \n    b = coefficients(X, y) \n    return b[0], b[1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a simple linear regression algorithm in Python.\n\n### Input:\n\n\n### Output:\ndef simple_linear_regression(X, y): \n    # calculate the mean value of a list of numbers \n    def mean(values): \n        return sum(values) \/ float(len(values)) \n\n    # calculate covariance between x and y \n    def covariance(x, mean_x, y, mean_y): \n        covar = 0.0\n        for i in range(len(x)): \n            covar += (x[i] - mean_x) * (y[i] - mean_y) \n        return covar \n\n    # calculate the variance of a list of numbers \n    def variance(values, mean): \n        return sum([(x - mean)**2 for x in values]) \n  \n    # calculate coefficients \n    def coefficients(X, y): \n        x_mean, y_mean = mean(X), mean(y) \n        b1 = covariance(X, x_mean, y, y_mean) \/ variance(X, x_mean) \n        b0 = y_mean - b1 * x_mean \n        return [b0, b1] \n  \n    b = coefficients(X, y) \n    return b[0], b[1]"}
{"instruction":"Generate a function in Python that takes a number as input and prints its corresponding binary representation.","input":"5","output":"def binary_representation(num):\n    binary_representation = bin(num)[2:] \n    print(\"Binary representation of \" + str(num) + \" is: \" + binary_representation)\n\n# Driver code\nbinary_representation(5) # Binary representation of 5 is: 101","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python that takes a number as input and prints its corresponding binary representation.\n\n### Input:\n5\n\n### Output:\ndef binary_representation(num):\n    binary_representation = bin(num)[2:] \n    print(\"Binary representation of \" + str(num) + \" is: \" + binary_representation)\n\n# Driver code\nbinary_representation(5) # Binary representation of 5 is: 101"}
{"instruction":"Edit the following Python Program to count the occurrences of a specific number.","input":"arr = [1, 2, 2, 3, 4]\nnum = 2\n\ncount = 0\n\nfor i in arr:","output":"arr = [1, 2, 2, 3, 4]\nnum = 2\n\ncount = 0\n\nfor i in arr:\n    if i == num:\n        count += 1\n\nprint(count) #outputs 2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python Program to count the occurrences of a specific number.\n\n### Input:\narr = [1, 2, 2, 3, 4]\nnum = 2\n\ncount = 0\n\nfor i in arr:\n\n### Output:\narr = [1, 2, 2, 3, 4]\nnum = 2\n\ncount = 0\n\nfor i in arr:\n    if i == num:\n        count += 1\n\nprint(count) #outputs 2"}
{"instruction":"Generate an empty 2D array of size n x n in Python.","input":"","output":"# Create an empty 2D list\nn = 10\narr = [[0 for j in range(n)] for i in range(n)]\n\n# Print the array\nprint(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an empty 2D array of size n x n in Python.\n\n### Input:\n\n\n### Output:\n# Create an empty 2D list\nn = 10\narr = [[0 for j in range(n)] for i in range(n)]\n\n# Print the array\nprint(arr)"}
{"instruction":"Build an interactive calculator app with a Graphical User Interface (GUI) using Python and the Tkinter library.","input":"Not applicable","output":"import tkinter as tk\n\nclass CalculatorApp:\n def __init__(self, master):\n self.master = master\n master.title('Calculator')\n\n self.total = 0\n self.entered_number = 0\n\n self.total_label_text = tk.StringVar()\n self.total_label_text.set(self.total)\n self.total_label = tk.Label(master, textvariable=self.total_label_text)\n \n self.label = tk.Label(master, text=\"Total:\")\n\n vcmd = master.register(self.validate)\n self.entry = tk.Entry(master, validate=\"key\", validatecommand=(vcmd, '%P'))\n\n self.add_button = tk.Button(master, text=\"+\", command=lambda: self.update(\"add\"))\n self.subtract_button = tk.Button(master, text=\"-\", command=lambda: self.update(\"subtract\"))\n self.reset_button = tk.Button(master, text=\"Reset\", command=lambda: self.update(\"reset\"))\n\n self.label.grid(row=0, column=0, sticky=tk.W)\n self.total_label.grid(row=0, column=1, columnspan=2, sticky=tk.E)\n \n self.entry.grid(row=1, column=0, columnspan=3, sticky=tk.W+tk.E)\n self.add_button.grid(row=2, column=0)\n self.subtract_button.grid(row=2, column=1)\n self.reset_button.grid(row=2, column=2, sticky=tk.W+tk.E)\n\n def validate(self, new_text):\n if not new_text:\n self.entered_number = 0\n return True\n\n try:\n self.entered_number = int(new_text)\n return True\n except ValueError:\n return False\n\n def update(self, method):\n if method == \"add\":\n self.total += self.entered_number\n elif method == \"subtract\":\n self.total -= self.entered_number\n else:\n self.total = 0\n\n self.total_label_text.set(self.total)\n self.entry.delete(0, tk.END)\n\nroot = tk.Tk()\nmy_gui = CalculatorApp(root)\nroot.mainloop()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild an interactive calculator app with a Graphical User Interface (GUI) using Python and the Tkinter library.\n\n### Input:\nNot applicable\n\n### Output:\nimport tkinter as tk\n\nclass CalculatorApp:\n def __init__(self, master):\n self.master = master\n master.title('Calculator')\n\n self.total = 0\n self.entered_number = 0\n\n self.total_label_text = tk.StringVar()\n self.total_label_text.set(self.total)\n self.total_label = tk.Label(master, textvariable=self.total_label_text)\n \n self.label = tk.Label(master, text=\"Total:\")\n\n vcmd = master.register(self.validate)\n self.entry = tk.Entry(master, validate=\"key\", validatecommand=(vcmd, '%P'))\n\n self.add_button = tk.Button(master, text=\"+\", command=lambda: self.update(\"add\"))\n self.subtract_button = tk.Button(master, text=\"-\", command=lambda: self.update(\"subtract\"))\n self.reset_button = tk.Button(master, text=\"Reset\", command=lambda: self.update(\"reset\"))\n\n self.label.grid(row=0, column=0, sticky=tk.W)\n self.total_label.grid(row=0, column=1, columnspan=2, sticky=tk.E)\n \n self.entry.grid(row=1, column=0, columnspan=3, sticky=tk.W+tk.E)\n self.add_button.grid(row=2, column=0)\n self.subtract_button.grid(row=2, column=1)\n self.reset_button.grid(row=2, column=2, sticky=tk.W+tk.E)\n\n def validate(self, new_text):\n if not new_text:\n self.entered_number = 0\n return True\n\n try:\n self.entered_number = int(new_text)\n return True\n except ValueError:\n return False\n\n def update(self, method):\n if method == \"add\":\n self.total += self.entered_number\n elif method == \"subtract\":\n self.total -= self.entered_number\n else:\n self.total = 0\n\n self.total_label_text.set(self.total)\n self.entry.delete(0, tk.END)\n\nroot = tk.Tk()\nmy_gui = CalculatorApp(root)\nroot.mainloop()"}
{"instruction":"Create a python code to convert a given xml to json.","input":"","output":"import xml.etree.ElementTree as etree \nimport json\n\ndef xml_to_json(xml_data):\n    root = etree.fromstring(xml_data)\n    json_data = json.dumps(etree_to_dict(root), indent=4)\n    return json_data\n\ndef etree_to_dict(t):\n    d = {t.tag: {} if t.attrib else None}\n    children = list(t)\n    if children:\n        dd = defaultdict(list)\n        for dc in map(etree_to_dict, children):\n            for k, v in dc.items():\n                dd[k].append(v)\n        d = {t.tag: {k:v[0] if len(v) == 1 else v\n                 for k, v in dd.items()}}\n    if t.attrib:\n        d[t.tag].update(('@' + k, v)\n                        for k, v in t.attrib.items())\n    if t.text:\n        text = t.text.strip()\n        if children or t.attrib:\n            if text:\n              d[t.tag]['#text'] = text\n        else:\n            d[t.tag] = text\n    return d","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python code to convert a given xml to json.\n\n### Input:\n\n\n### Output:\nimport xml.etree.ElementTree as etree \nimport json\n\ndef xml_to_json(xml_data):\n    root = etree.fromstring(xml_data)\n    json_data = json.dumps(etree_to_dict(root), indent=4)\n    return json_data\n\ndef etree_to_dict(t):\n    d = {t.tag: {} if t.attrib else None}\n    children = list(t)\n    if children:\n        dd = defaultdict(list)\n        for dc in map(etree_to_dict, children):\n            for k, v in dc.items():\n                dd[k].append(v)\n        d = {t.tag: {k:v[0] if len(v) == 1 else v\n                 for k, v in dd.items()}}\n    if t.attrib:\n        d[t.tag].update(('@' + k, v)\n                        for k, v in t.attrib.items())\n    if t.text:\n        text = t.text.strip()\n        if children or t.attrib:\n            if text:\n              d[t.tag]['#text'] = text\n        else:\n            d[t.tag] = text\n    return d"}
{"instruction":"Write a python code to a randomly select a number of items, but with a given algorithm.","input":"- 7 items in list, \n - select 5 items \n - algorithm should select the items randomly, but gives better chance to the higher number items","output":"\"\"\"\nWrite a python code to a randomly select a number of items, but with a given algorithm\n\"\"\"\n\nimport random\n\ndef select_with_algorithm(items, size):\n    # Create a list from 0 to len(items)-1\n    item_indices = list(range(len(items)))\n    # Create a list of size 0\n    selection = []\n    # Iterate for the size desired\n    for _ in range(size):\n        # Select one of the indices randomly\n        index = random.choice(item_indices)\n        # Store it in the selection list\n        selection.append(items[index])\n        # Then remove it from the item_indices list\n        item_indices.remove(index)\n    # Return the selection\n    return selection\n\nif __name__ == '__main__':\n    items = [1, 2, 3, 4, 5, 6, 7]\n    size = 5\n    selection = select_with_algorithm(items, size)\n    print(selection)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to a randomly select a number of items, but with a given algorithm.\n\n### Input:\n- 7 items in list, \n - select 5 items \n - algorithm should select the items randomly, but gives better chance to the higher number items\n\n### Output:\n\"\"\"\nWrite a python code to a randomly select a number of items, but with a given algorithm\n\"\"\"\n\nimport random\n\ndef select_with_algorithm(items, size):\n    # Create a list from 0 to len(items)-1\n    item_indices = list(range(len(items)))\n    # Create a list of size 0\n    selection = []\n    # Iterate for the size desired\n    for _ in range(size):\n        # Select one of the indices randomly\n        index = random.choice(item_indices)\n        # Store it in the selection list\n        selection.append(items[index])\n        # Then remove it from the item_indices list\n        item_indices.remove(index)\n    # Return the selection\n    return selection\n\nif __name__ == '__main__':\n    items = [1, 2, 3, 4, 5, 6, 7]\n    size = 5\n    selection = select_with_algorithm(items, size)\n    print(selection)"}
{"instruction":"Create a natural language processing program in Python that can generate features for a given text.","input":"Example text: \"This is a sample text about natural language processing.\"","output":"from sklearn.feature_extraction.text import CountVectorizer\n\n# Define the text\ntext = [\"This is a sample text about natural language processing.\"]\n\n# Create a CountVectorizer to generate feature vectors\nvectorizer = CountVectorizer()\n\n# Generate feature vectors\nfeatures = vectorizer.fit_transform(text)\n\n# Print the feature vector\nprint(features.toarray())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a natural language processing program in Python that can generate features for a given text.\n\n### Input:\nExample text: \"This is a sample text about natural language processing.\"\n\n### Output:\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Define the text\ntext = [\"This is a sample text about natural language processing.\"]\n\n# Create a CountVectorizer to generate feature vectors\nvectorizer = CountVectorizer()\n\n# Generate feature vectors\nfeatures = vectorizer.fit_transform(text)\n\n# Print the feature vector\nprint(features.toarray())"}
{"instruction":"Can you write a Python program to construct a binary tree from given inorder and postorder traversals?","input":"inorder = [4, 8, 2, 5, 1, 6, 3, 7] \npostorder = [8, 4, 5,2, 6, 7, 3, 1]","output":"class Node: \n    def __init__(self, key): \n        self.key = key  \n        self.left = None\n        self.right = None\n  \ndef buildTree(inorder, postorder, inStrt, inEnd): \n  \n    if (inStrt > inEnd): \n        return None\n  \n    node = Node(postorder[buildTree.postIndex]) \n    buildTree.postIndex -= 1\n  \n    if inStrt == inEnd: \n        return node \n  \n    else: \n        inIndex = search(inorder, inStrt, inEnd, node.key) \n  \n        node.right = buildTree(inorder, postorder, inIndex + 1, inEnd) \n        node.left = buildTree(inorder, postorder, inStrt, inIndex - 1) \n  \n        return node \n  \ndef search(arr, start, end, value): \n    for i in range(start, end + 1): \n        if arr[i] == value: \n            return i \n  \ndef printInorder(node): \n    if node is None: \n        return\n  \n    printInorder(node.left) \n    print(node.key, end=\" \") \n    printInorder(node.right) \n  \ninStrt = 0\ninEnd = len(inorder) - 1\nbuildTree.postIndex = len(postorder) - 1\nroot = buildTree(inorder, postorder, inStrt, inEnd) \nprint(\"Inorder traversal of the constructed tree: \") \nprintInorder(root)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you write a Python program to construct a binary tree from given inorder and postorder traversals?\n\n### Input:\ninorder = [4, 8, 2, 5, 1, 6, 3, 7] \npostorder = [8, 4, 5,2, 6, 7, 3, 1]\n\n### Output:\nclass Node: \n    def __init__(self, key): \n        self.key = key  \n        self.left = None\n        self.right = None\n  \ndef buildTree(inorder, postorder, inStrt, inEnd): \n  \n    if (inStrt > inEnd): \n        return None\n  \n    node = Node(postorder[buildTree.postIndex]) \n    buildTree.postIndex -= 1\n  \n    if inStrt == inEnd: \n        return node \n  \n    else: \n        inIndex = search(inorder, inStrt, inEnd, node.key) \n  \n        node.right = buildTree(inorder, postorder, inIndex + 1, inEnd) \n        node.left = buildTree(inorder, postorder, inStrt, inIndex - 1) \n  \n        return node \n  \ndef search(arr, start, end, value): \n    for i in range(start, end + 1): \n        if arr[i] == value: \n            return i \n  \ndef printInorder(node): \n    if node is None: \n        return\n  \n    printInorder(node.left) \n    print(node.key, end=\" \") \n    printInorder(node.right) \n  \ninStrt = 0\ninEnd = len(inorder) - 1\nbuildTree.postIndex = len(postorder) - 1\nroot = buildTree(inorder, postorder, inStrt, inEnd) \nprint(\"Inorder traversal of the constructed tree: \") \nprintInorder(root)"}
{"instruction":"Use an existing Python dictionary to create a matplotlib chart showing the number of occurrences of each letter in the dictionary.","input":"dictionary = {\n 'key1': 'value1',\n 'key2': 'value2',\n 'key3': 'value3',\n 'key4': 'value4',\n 'key5': 'value5',\n 'key6': 'value6',\n 'key7': 'value7',\n 'key8': 'value8'\n}","output":"import matplotlib.pyplot as plt\n\noccurrences = {letter : 0 for letter in 'abcdefghijklmnopqrstuvwxyz'}\n\nfor key in dictionary:\n for letter in key.lower():\n occurrences[letter] += 1\n\nletters = sorted(occurrences.keys())\nvalues = [occurrences[letter] for letter in letters]\n \nplt.bar(letters, values, edgecolor='black', width=0.8)\nplt.title(\"Occurrences of Each Letter\")\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse an existing Python dictionary to create a matplotlib chart showing the number of occurrences of each letter in the dictionary.\n\n### Input:\ndictionary = {\n 'key1': 'value1',\n 'key2': 'value2',\n 'key3': 'value3',\n 'key4': 'value4',\n 'key5': 'value5',\n 'key6': 'value6',\n 'key7': 'value7',\n 'key8': 'value8'\n}\n\n### Output:\nimport matplotlib.pyplot as plt\n\noccurrences = {letter : 0 for letter in 'abcdefghijklmnopqrstuvwxyz'}\n\nfor key in dictionary:\n for letter in key.lower():\n occurrences[letter] += 1\n\nletters = sorted(occurrences.keys())\nvalues = [occurrences[letter] for letter in letters]\n \nplt.bar(letters, values, edgecolor='black', width=0.8)\nplt.title(\"Occurrences of Each Letter\")\nplt.show()"}
{"instruction":"Develop a program in Python that implements Binary Search tree.","input":"","output":"class Node: \n    def __init__(self, key): \n        self.key = key  \n        self.left = None\n        self.right = None\n  \ndef insert(root, key): \n  \n    if root is None: \n        return Node(key) \n  \n    if root.key < key: \n        root.right = insert(root.right, key) \n    else: \n        root.left = insert(root.left, key) \n  \n    return root","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python that implements Binary Search tree.\n\n### Input:\n\n\n### Output:\nclass Node: \n    def __init__(self, key): \n        self.key = key  \n        self.left = None\n        self.right = None\n  \ndef insert(root, key): \n  \n    if root is None: \n        return Node(key) \n  \n    if root.key < key: \n        root.right = insert(root.right, key) \n    else: \n        root.left = insert(root.left, key) \n  \n    return root"}
{"instruction":"Develop a Python function to predict the class labels of a given set of data.","input":"The dataset contains 4 features: Length, Width, Height and Weight.","output":"# Load the dataset\nimport pandas as pd\ncsv_url = 'http:\/\/test.test\/test.csv'\ndf = pd.read_csv(csv_url)\n\n# Split the dataset into features and label\nX = df.iloc[:, 0:4].values\ny = df.iloc[:, 4].values\n\n# Import the ML model\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Create and fit the model\nmodel = DecisionTreeClassifier()\nmodel.fit(X, y)\n\n# Predict the label\ndef predict(data):\n    predicted_label = model.predict([data])\n    return predicted_label","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function to predict the class labels of a given set of data.\n\n### Input:\nThe dataset contains 4 features: Length, Width, Height and Weight.\n\n### Output:\n# Load the dataset\nimport pandas as pd\ncsv_url = 'http:\/\/test.test\/test.csv'\ndf = pd.read_csv(csv_url)\n\n# Split the dataset into features and label\nX = df.iloc[:, 0:4].values\ny = df.iloc[:, 4].values\n\n# Import the ML model\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Create and fit the model\nmodel = DecisionTreeClassifier()\nmodel.fit(X, y)\n\n# Predict the label\ndef predict(data):\n    predicted_label = model.predict([data])\n    return predicted_label"}
{"instruction":"Create a python program to implement an algorithm to find the square root of a given number","input":"","output":"def sqrt(x):\n    result = x\n    eps = 0.000001\n    while abs(result*result - x) > eps:\n        result = (result + x\/result) \/ 2\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to implement an algorithm to find the square root of a given number\n\n### Input:\n\n\n### Output:\ndef sqrt(x):\n    result = x\n    eps = 0.000001\n    while abs(result*result - x) > eps:\n        result = (result + x\/result) \/ 2\n    return result"}
{"instruction":"Write a Python program to print out the ASCII table.","input":"","output":"def print_ascii_table():\n    for i in range(32, 127):\n        print(f\"Character:{chr(i)}, ASCII Number:{i}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print out the ASCII table.\n\n### Input:\n\n\n### Output:\ndef print_ascii_table():\n    for i in range(32, 127):\n        print(f\"Character:{chr(i)}, ASCII Number:{i}\")"}
{"instruction":"Develop an API in Python that takes in two strings and returns true if they are anagrams, and false otherwise.","input":"listen, silent","output":"# anagram checker\n\ndef check_anagrams(str1, str2):\n    if sorted(str1) == sorted(str2):\n        return True \n    else: \n        return False \n  \n# Driver code \nstr1 = \"listen\"\nstr2 = \"silent\"\n\nif(check_anagrams(str1, str2)): \n    print(\"The strings are anagrams.\")  \nelse: \n    print(\"The strings aren't anagrams.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an API in Python that takes in two strings and returns true if they are anagrams, and false otherwise.\n\n### Input:\nlisten, silent\n\n### Output:\n# anagram checker\n\ndef check_anagrams(str1, str2):\n    if sorted(str1) == sorted(str2):\n        return True \n    else: \n        return False \n  \n# Driver code \nstr1 = \"listen\"\nstr2 = \"silent\"\n\nif(check_anagrams(str1, str2)): \n    print(\"The strings are anagrams.\")  \nelse: \n    print(\"The strings aren't anagrams.\")"}
{"instruction":"Write a Python program to build a deep learning model to categorize text into different classes.","input":"","output":"def deep_learning_model(X, y):\n    model = Sequential()\n    model.add(Embedding(MAX_NB_WORDS, EMBEDDING_DIM, input_length=X.shape[1]))\n    model.add(SpatialDropout1D(0.2))\n    model.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2))\n    model.add(Dense(13, activation='softmax'))\n    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to build a deep learning model to categorize text into different classes.\n\n### Input:\n\n\n### Output:\ndef deep_learning_model(X, y):\n    model = Sequential()\n    model.add(Embedding(MAX_NB_WORDS, EMBEDDING_DIM, input_length=X.shape[1]))\n    model.add(SpatialDropout1D(0.2))\n    model.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2))\n    model.add(Dense(13, activation='softmax'))\n    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model"}
{"instruction":"Create a simple Python program that takes as parameters two text strings and calculates the Levenshtein distance.","input":"For instance, \"kitten\" and \"sitting\"","output":"def levenshtein_distance(s1: str, s2: str):\n    m = len(s1)\n    n = len(s2)\n \n    table = dict()\n    for i in range(m+1):\n        table[i, 0] = i\n    for j in range(n+1):\n        table[0, j] = j\n \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s1[i-1] == s2[j-1]:\n                cost = 0\n            else: \n                cost = 1\n            table[i, j] = min(table[i-1, j] + 1, \n                    table[i, j-1] + 1, \n                    table[i-1, j-1] + cost)\n \n    return table[m, n]\n \nprint(levenshtein_distance('kitten', 'sitting'))\n\nOutput: 3","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple Python program that takes as parameters two text strings and calculates the Levenshtein distance.\n\n### Input:\nFor instance, \"kitten\" and \"sitting\"\n\n### Output:\ndef levenshtein_distance(s1: str, s2: str):\n    m = len(s1)\n    n = len(s2)\n \n    table = dict()\n    for i in range(m+1):\n        table[i, 0] = i\n    for j in range(n+1):\n        table[0, j] = j\n \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s1[i-1] == s2[j-1]:\n                cost = 0\n            else: \n                cost = 1\n            table[i, j] = min(table[i-1, j] + 1, \n                    table[i, j-1] + 1, \n                    table[i-1, j-1] + cost)\n \n    return table[m, n]\n \nprint(levenshtein_distance('kitten', 'sitting'))\n\nOutput: 3"}
{"instruction":"Generate all the permutations of a string using Python.","input":"str = \"abc\"","output":"def permutations(str):\n\tif len(str) <= 1:\n\t\treturn [str]\n\n\tperms = [] \n\tfor i in range(len(str)):\n\t\trest_strings = str[:i] + str[i+1:]\n\t\tfor perm in permutations(rest_strings):\n\t\t\tperms.append(str[i:i+1] + perm)\n\t\n\treturn perms\n\nstr = \"abc\"\nperms = permutations(str)\nprint(perms) # ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate all the permutations of a string using Python.\n\n### Input:\nstr = \"abc\"\n\n### Output:\ndef permutations(str):\n\tif len(str) <= 1:\n\t\treturn [str]\n\n\tperms = [] \n\tfor i in range(len(str)):\n\t\trest_strings = str[:i] + str[i+1:]\n\t\tfor perm in permutations(rest_strings):\n\t\t\tperms.append(str[i:i+1] + perm)\n\t\n\treturn perms\n\nstr = \"abc\"\nperms = permutations(str)\nprint(perms) # ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']"}
{"instruction":"Create a function in Python that will generate a random number between 1 and 10.","input":"","output":"import random\n\ndef random_number():\n  return random.randint(1,10)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that will generate a random number between 1 and 10.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef random_number():\n  return random.randint(1,10)"}
{"instruction":"Create a while loop in Python to print the numbers from 1 to 10.","input":"","output":"i = 1\nwhile i <= 10:\n  print(i)\n  i += 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a while loop in Python to print the numbers from 1 to 10.\n\n### Input:\n\n\n### Output:\ni = 1\nwhile i <= 10:\n  print(i)\n  i += 1"}
{"instruction":"Write a Python script to parse a JSON string and convert it into a dictionary.","input":"'{\"name\": \"GPT\", \"type\": \"AI\"}'","output":"import json\n\njson_str = '{\"name\": \"GPT\", \"type\": \"AI\"}'\n\ndict_x = json.loads(json_str)\nprint(dict_x)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to parse a JSON string and convert it into a dictionary.\n\n### Input:\n'{\"name\": \"GPT\", \"type\": \"AI\"}'\n\n### Output:\nimport json\n\njson_str = '{\"name\": \"GPT\", \"type\": \"AI\"}'\n\ndict_x = json.loads(json_str)\nprint(dict_x)"}
{"instruction":"Can you provide a script to remove any dot (.) in an URL string?","input":"URL String: \"https:\/\/www.google.com\/example\/?q=python.\"","output":"url_string = \"https:\/\/www.google.com\/example\/?q=python.\"\n\ndef remove_dot(url_string):\n    url_string = url_string.replace('.', '')\n    \n    return url_string\n\nmodified_url_string = remove_dot(url_string)\nprint(modified_url_string)\n# https:\/\/wwwgooglecom\/example\/?q=python","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you provide a script to remove any dot (.) in an URL string?\n\n### Input:\nURL String: \"https:\/\/www.google.com\/example\/?q=python.\"\n\n### Output:\nurl_string = \"https:\/\/www.google.com\/example\/?q=python.\"\n\ndef remove_dot(url_string):\n    url_string = url_string.replace('.', '')\n    \n    return url_string\n\nmodified_url_string = remove_dot(url_string)\nprint(modified_url_string)\n# https:\/\/wwwgooglecom\/example\/?q=python"}
{"instruction":"Write a Python program to select all the Sundays of a specified year.","input":"year = 2020","output":"import datetime\n\ndef select_all_sundays(year):\n    sunday_list = []\n    for n in range(1,13):\n        sundays = [d for d in [datetime.date(year, n, d) for d in range(1, 32)]\n                if d.weekday() == 6]\n        sunday_list.extend(sundays)\n    return sunday_list\n\nif __name__ == '__main__':\n    year = 2020\n    sunday_list = select_all_sundays(year)\n    print(sunday_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to select all the Sundays of a specified year.\n\n### Input:\nyear = 2020\n\n### Output:\nimport datetime\n\ndef select_all_sundays(year):\n    sunday_list = []\n    for n in range(1,13):\n        sundays = [d for d in [datetime.date(year, n, d) for d in range(1, 32)]\n                if d.weekday() == 6]\n        sunday_list.extend(sundays)\n    return sunday_list\n\nif __name__ == '__main__':\n    year = 2020\n    sunday_list = select_all_sundays(year)\n    print(sunday_list)"}
{"instruction":"Create a Python class for a Person, with first name and last name attributes.","input":"","output":"class Person:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n\nperson = Person(\"John\", \"Doe\")\nprint(person.first_name, person.last_name)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for a Person, with first name and last name attributes.\n\n### Input:\n\n\n### Output:\nclass Person:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n\nperson = Person(\"John\", \"Doe\")\nprint(person.first_name, person.last_name)"}
{"instruction":"Generate a Python program that prints out every number from 0 to 10, but with every number being multiplied by 2.","input":"Not applicable","output":"for i in range(11):\n print(i*2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that prints out every number from 0 to 10, but with every number being multiplied by 2.\n\n### Input:\nNot applicable\n\n### Output:\nfor i in range(11):\n print(i*2)"}
{"instruction":"Implement a machine learning model in Python for predicting the price of a house given some features.","input":"X = [[3, 1200, 8], [4, 1800, 8], [5, 1100, 9]]\nY = [150000, 175000, 180000]","output":"from sklearn.linear_model import LinearRegression\n\nX = [[3, 1200, 8], [4, 1800, 8], [5, 1100, 9]]\nY = [150000, 175000, 180000]\n\nmodel = LinearRegression()\nmodel.fit(X, Y)\n\nprediction = model.predict([[7, 2000, 10]])\nprint(prediction)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a machine learning model in Python for predicting the price of a house given some features.\n\n### Input:\nX = [[3, 1200, 8], [4, 1800, 8], [5, 1100, 9]]\nY = [150000, 175000, 180000]\n\n### Output:\nfrom sklearn.linear_model import LinearRegression\n\nX = [[3, 1200, 8], [4, 1800, 8], [5, 1100, 9]]\nY = [150000, 175000, 180000]\n\nmodel = LinearRegression()\nmodel.fit(X, Y)\n\nprediction = model.predict([[7, 2000, 10]])\nprint(prediction)"}
{"instruction":"Create a function to calculate the sum of a sequence of integers.","input":"[1, 2, 3, 4, 5]","output":"# Python code\ndef sum_sequence(sequence):\n  sum = 0\n  for num in sequence:\n    sum += num\n  return sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to calculate the sum of a sequence of integers.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\n# Python code\ndef sum_sequence(sequence):\n  sum = 0\n  for num in sequence:\n    sum += num\n  return sum"}
{"instruction":"Find the most expensive item from the given list using Python.","input":"[{'item': 'rice', 'price': 22.20}, {'item': 'bread', 'price': 15.00}, {'item': 'milk', 'price': 18.60}, {'item': 'butter', 'price': 34.40}]","output":"most_expensive_item = max(list_of_items, key=lambda x: x['price'])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the most expensive item from the given list using Python.\n\n### Input:\n[{'item': 'rice', 'price': 22.20}, {'item': 'bread', 'price': 15.00}, {'item': 'milk', 'price': 18.60}, {'item': 'butter', 'price': 34.40}]\n\n### Output:\nmost_expensive_item = max(list_of_items, key=lambda x: x['price'])"}
{"instruction":"Write a Python script that randomly shuffles a list of strings.","input":"[\"Apple\", \"Orange\", \"Banana\", \"Strawberry\"]","output":"import random\n\nlist = [\"Apple\", \"Orange\", \"Banana\", \"Strawberry\"]\nrandom.shuffle(list)\n\nfor item in list:\n    print(item)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that randomly shuffles a list of strings.\n\n### Input:\n[\"Apple\", \"Orange\", \"Banana\", \"Strawberry\"]\n\n### Output:\nimport random\n\nlist = [\"Apple\", \"Orange\", \"Banana\", \"Strawberry\"]\nrandom.shuffle(list)\n\nfor item in list:\n    print(item)"}
{"instruction":"Construct a code to eliminate all negative numbers from a list using Python.","input":"[-1, 9, -3, 4, -8]","output":"def remove_negatives(nums):\n    new_list = [num for num in nums if num > 0]\n    return new_list\n\nmy_list = [-1, 9, -3, 4, -8]\nfiltered_list = remove_negatives(my_list)\nprint(filtered_list) #[9, 4]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a code to eliminate all negative numbers from a list using Python.\n\n### Input:\n[-1, 9, -3, 4, -8]\n\n### Output:\ndef remove_negatives(nums):\n    new_list = [num for num in nums if num > 0]\n    return new_list\n\nmy_list = [-1, 9, -3, 4, -8]\nfiltered_list = remove_negatives(my_list)\nprint(filtered_list) #[9, 4]"}
{"instruction":"Write a function in Python for encrypting a given string with a given key.","input":"Key: \"mykey123\"\nString: \"My secret message\"","output":"import base64\nfrom Crypto.Cipher import AES\n\ndef encrypt(key, message):\n cipher = AES.new(key.encode(), AES.MODE_ECB)\n padded_msg = message.encode() + ((16 - len(message) % 16) * '{'.encode())\n encrypted = cipher.encrypt(padded_msg)\n encoded = base64.b64encode(encrypted)\n return encoded.decode()\n\nencrypt('mykey123', 'My secret message')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python for encrypting a given string with a given key.\n\n### Input:\nKey: \"mykey123\"\nString: \"My secret message\"\n\n### Output:\nimport base64\nfrom Crypto.Cipher import AES\n\ndef encrypt(key, message):\n cipher = AES.new(key.encode(), AES.MODE_ECB)\n padded_msg = message.encode() + ((16 - len(message) % 16) * '{'.encode())\n encrypted = cipher.encrypt(padded_msg)\n encoded = base64.b64encode(encrypted)\n return encoded.decode()\n\nencrypt('mykey123', 'My secret message')"}
{"instruction":"Write a Python function to retrieve the frequency of elements in a given list.","input":"[1, 1, 2, 3, 4, 4]","output":"from collections import Counter\n\ndef get_frequencies(lst):\n  return Counter(lst)\n\ninput_list = [1, 1, 2, 3, 4, 4]\nfrequencies = get_frequencies(input_list)\n\nprint(\"Frequency of elements:\", frequencies)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to retrieve the frequency of elements in a given list.\n\n### Input:\n[1, 1, 2, 3, 4, 4]\n\n### Output:\nfrom collections import Counter\n\ndef get_frequencies(lst):\n  return Counter(lst)\n\ninput_list = [1, 1, 2, 3, 4, 4]\nfrequencies = get_frequencies(input_list)\n\nprint(\"Frequency of elements:\", frequencies)"}
{"instruction":"Create a python program to generate a maze with the given width and height.","input":"width=5, height=5","output":"# Generate a maze with the given width and height\n\nfrom random import randint\n\ndef generate_maze(width, height):\n    # Create the grid of the maze\n    maze_grid = [[0 for x in range(width)] for y in range(height)]\n \n    # Generate walls and paths\n    for row in range(height):\n        for column in range(width):\n            if row == 0 and column == 0: \n                maze_grid[row][column] = 0\n            elif row == 0 or column == 0:\n                maze_grid[row][column] = 0 if randint(0, 1) else 1\n            elif row == width-1 or column == height-1:\n                maze_grid[row][column] = 0\n            else:\n                maze_grid[row][column] = randint(0, 2)\n    return maze_grid\n \n# Generate a maze of 5x5\nmaze = generate_maze(5,5)\n\nfor row in maze:\n    print(row)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to generate a maze with the given width and height.\n\n### Input:\nwidth=5, height=5\n\n### Output:\n# Generate a maze with the given width and height\n\nfrom random import randint\n\ndef generate_maze(width, height):\n    # Create the grid of the maze\n    maze_grid = [[0 for x in range(width)] for y in range(height)]\n \n    # Generate walls and paths\n    for row in range(height):\n        for column in range(width):\n            if row == 0 and column == 0: \n                maze_grid[row][column] = 0\n            elif row == 0 or column == 0:\n                maze_grid[row][column] = 0 if randint(0, 1) else 1\n            elif row == width-1 or column == height-1:\n                maze_grid[row][column] = 0\n            else:\n                maze_grid[row][column] = randint(0, 2)\n    return maze_grid\n \n# Generate a maze of 5x5\nmaze = generate_maze(5,5)\n\nfor row in maze:\n    print(row)"}
{"instruction":"Write a Python class to simulate a game of tic-tac-toe.","input":"","output":"class TicTacToe:\n board = []\n\n def __init__(self):\n self.board = [[' ' for x in range(3)] for y in range(3)]\n\n def display_board(self):\n for row in self.board:\n print('|'.join(row))\n\n def make_move(self, player, row, col):\n if self.board[row][col] == ' ':\n self.board[row][col] = player\n else:\n print \"This cell is occupied!\"\n\n def check_win(self):\n for row in self.board:\n if row[0] == row[1] == row[2] != ' ':\n return row[0]\n if self.board[0][0] == self.board[1][1] == self.board[2][2] != ' ':\n return self.board[0][0]\n if self.board[0][2] == self.board[1][1] == self.board[2][0] != ' ':\n return self.board[0][2]\n for col in range(3):\n if self.board[0][col] == self.board[1][col] == self.board[2][col] != ' ':\n return self.board[0][col]\n return ' '","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class to simulate a game of tic-tac-toe.\n\n### Input:\n\n\n### Output:\nclass TicTacToe:\n board = []\n\n def __init__(self):\n self.board = [[' ' for x in range(3)] for y in range(3)]\n\n def display_board(self):\n for row in self.board:\n print('|'.join(row))\n\n def make_move(self, player, row, col):\n if self.board[row][col] == ' ':\n self.board[row][col] = player\n else:\n print \"This cell is occupied!\"\n\n def check_win(self):\n for row in self.board:\n if row[0] == row[1] == row[2] != ' ':\n return row[0]\n if self.board[0][0] == self.board[1][1] == self.board[2][2] != ' ':\n return self.board[0][0]\n if self.board[0][2] == self.board[1][1] == self.board[2][0] != ' ':\n return self.board[0][2]\n for col in range(3):\n if self.board[0][col] == self.board[1][col] == self.board[2][col] != ' ':\n return self.board[0][col]\n return ' '"}
{"instruction":"Create a python script that sorts a list of tuples based on the second element.","input":"tuples = [('a',3), ('d', 1), ('c', 2)]","output":"sortedTuples = sorted(tuples, key = lambda x: x[1])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script that sorts a list of tuples based on the second element.\n\n### Input:\ntuples = [('a',3), ('d', 1), ('c', 2)]\n\n### Output:\nsortedTuples = sorted(tuples, key = lambda x: x[1])"}
{"instruction":"Design a python program to sort a list of tuples according to their 2nd item.","input":"","output":"# Input list\nlist_of_tuples = [('Alice', 20), ('Bob', 30), ('Andrew', 20), ('Catherine', 40)]\n\n# Sort the list by second item\nsorted_list = sorted(list_of_tuples, key=lambda x: x[1])\n\n# Print the result\nprint(sorted_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program to sort a list of tuples according to their 2nd item.\n\n### Input:\n\n\n### Output:\n# Input list\nlist_of_tuples = [('Alice', 20), ('Bob', 30), ('Andrew', 20), ('Catherine', 40)]\n\n# Sort the list by second item\nsorted_list = sorted(list_of_tuples, key=lambda x: x[1])\n\n# Print the result\nprint(sorted_list)"}
{"instruction":"Is it possible to generate a random password with a minimum length of 8 and this password should contain at least one upper case letter, one lower case letter, one number and one special character?","input":"","output":"Yes, it is possible to generate a random password with a minimum length of 8 and this password should contain at least one upper case letter, one lower case letter, one number and one special character. \n\nYou can generate a random password using the following Python code snippet:\n\nimport random\nimport string\n\ndef generate_password():\n    lowercaseletter = string.ascii_lowercase\n    uppercaseletter = string.ascii_uppercase\n    numerals = string.digits\n    specialcharacters = string.punctuation\n    characters = lowercaseletter + uppercaseletter + numerals + specialcharacters\n    password = ''.join(random.choice(characters) for x in range(8))\n    return password","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIs it possible to generate a random password with a minimum length of 8 and this password should contain at least one upper case letter, one lower case letter, one number and one special character?\n\n### Input:\n\n\n### Output:\nYes, it is possible to generate a random password with a minimum length of 8 and this password should contain at least one upper case letter, one lower case letter, one number and one special character. \n\nYou can generate a random password using the following Python code snippet:\n\nimport random\nimport string\n\ndef generate_password():\n    lowercaseletter = string.ascii_lowercase\n    uppercaseletter = string.ascii_uppercase\n    numerals = string.digits\n    specialcharacters = string.punctuation\n    characters = lowercaseletter + uppercaseletter + numerals + specialcharacters\n    password = ''.join(random.choice(characters) for x in range(8))\n    return password"}
{"instruction":"Create a python object abstract class that implements the following methods:","input":"","output":"class ObjectAbstract:\n    def __init__(self):\n        self.data = None\n\n    def get_data(self):\n        return self.data\n\n    def set_data(self, data):\n        self.data = data\n\n    def print_data(self):\n        print(self.data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python object abstract class that implements the following methods:\n\n### Input:\n\n\n### Output:\nclass ObjectAbstract:\n    def __init__(self):\n        self.data = None\n\n    def get_data(self):\n        return self.data\n\n    def set_data(self, data):\n        self.data = data\n\n    def print_data(self):\n        print(self.data)"}
{"instruction":"Design a data structure in Python that stores customer data such as customer ID and payment history.","input":"","output":"class Customer:\n def __init__(self, customer_id, payments):\n  self.customer_id = customer_id\n  self.payments = payments\n  \n# Sample usage\ncustomers = []\ncustomers.append(Customer(1, [50, 100, 150]))\ncustomers.append(Customer(2, [75, 125, 175]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a data structure in Python that stores customer data such as customer ID and payment history.\n\n### Input:\n\n\n### Output:\nclass Customer:\n def __init__(self, customer_id, payments):\n  self.customer_id = customer_id\n  self.payments = payments\n  \n# Sample usage\ncustomers = []\ncustomers.append(Customer(1, [50, 100, 150]))\ncustomers.append(Customer(2, [75, 125, 175]))"}
{"instruction":"Create a Python function that takes in two parameters (n,k) and returns the value of n^k.","input":"","output":"def power(n,k):\n    result = 1\n    for i in range(0,k):\n        result *= n\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes in two parameters (n,k) and returns the value of n^k.\n\n### Input:\n\n\n### Output:\ndef power(n,k):\n    result = 1\n    for i in range(0,k):\n        result *= n\n    return result"}
{"instruction":"Rewrite the following code from Java to Python:","input":"public class Main {\n public static void main(String[] args) {\n int a = 5;\n int b = 10;\n int c = a + b;\n \n System.out.println(c);\n }\n}","output":"a = 5\nb = 10\nc = a + b\n\nprint(c)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code from Java to Python:\n\n### Input:\npublic class Main {\n public static void main(String[] args) {\n int a = 5;\n int b = 10;\n int c = a + b;\n \n System.out.println(c);\n }\n}\n\n### Output:\na = 5\nb = 10\nc = a + b\n\nprint(c)"}
{"instruction":"Create a class in Python to represent a Person with attributes: name, age, height, and weight.","input":"Not applicable","output":"class Person:\n def __init__(self, name, age, height, weight):\n self.name = name\n self.age = age\n self.height = height\n self.weight = weight\n\n def describe(self):\n return f'{self.name} is {self.age} years old, {self.height} cm tall and weighs {self.weight} kg.'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to represent a Person with attributes: name, age, height, and weight.\n\n### Input:\nNot applicable\n\n### Output:\nclass Person:\n def __init__(self, name, age, height, weight):\n self.name = name\n self.age = age\n self.height = height\n self.weight = weight\n\n def describe(self):\n return f'{self.name} is {self.age} years old, {self.height} cm tall and weighs {self.weight} kg.'"}
{"instruction":"Create an AI model in Python that predicts whether a person is a relative of the speaker.","input":"No input","output":"def relative_prediction_model():\n    # Variables\n    features = [\"age\", \"gender\", \"race\", \"income\", \"location\", \"origin\", \"religion\", \"political views\", \"marital status\", \"education level\", \"occupation\"]\n    target = \"relation\"\n    # Defining model, training and predicting\n    model = MLPClassifier()\n    model.fit(features, target)\n    return model","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI model in Python that predicts whether a person is a relative of the speaker.\n\n### Input:\nNo input\n\n### Output:\ndef relative_prediction_model():\n    # Variables\n    features = [\"age\", \"gender\", \"race\", \"income\", \"location\", \"origin\", \"religion\", \"political views\", \"marital status\", \"education level\", \"occupation\"]\n    target = \"relation\"\n    # Defining model, training and predicting\n    model = MLPClassifier()\n    model.fit(features, target)\n    return model"}
{"instruction":"Write an algorithm in Python that takes a string of characters and prints out the frequency of each character.","input":"\"Hello, world!\"","output":"\"\"\"\nWrite an algorithm in Python that takes a string of characters and \nprints out the frequency of each character.\n\"\"\"\n\ndef count_frequency(text):\n    freq = {}\n    for c in text:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    for key,value in freq.items():\n        print(key + ': ' + str(value))\n\nif __name__ == '__main__':\n    text = \"Hello, world!\"\n    count_frequency(text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python that takes a string of characters and prints out the frequency of each character.\n\n### Input:\n\"Hello, world!\"\n\n### Output:\n\"\"\"\nWrite an algorithm in Python that takes a string of characters and \nprints out the frequency of each character.\n\"\"\"\n\ndef count_frequency(text):\n    freq = {}\n    for c in text:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    for key,value in freq.items():\n        print(key + ': ' + str(value))\n\nif __name__ == '__main__':\n    text = \"Hello, world!\"\n    count_frequency(text)"}
{"instruction":"Rewrite the following python code into JavaScript.","input":"leader_info = {\n    \"name\": \"Diana Prince\",\n    \"job\": \"Leader\"\n}","output":"let leader_info = {\n    \"name\": \"Diana Prince\",\n    \"job\": \"Leader\"\n};","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following python code into JavaScript.\n\n### Input:\nleader_info = {\n    \"name\": \"Diana Prince\",\n    \"job\": \"Leader\"\n}\n\n### Output:\nlet leader_info = {\n    \"name\": \"Diana Prince\",\n    \"job\": \"Leader\"\n};"}
{"instruction":"Given a list of strings, create a Python program to find the longest common substring","input":"strings = [\"cat\",\"car\",\"hat\"]","output":"def find_longest_common_substring(strings):\n    if len(strings) == 0:\n        return ''\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        # sort the strings\n        strings.sort(key=len)\n\n        # take the first string as longest\n        longest = strings[0]\n\n        for s in strings:\n            # check if the first string is a substring of the next string\n            if longest in s:\n                # if so, keep the longest\n                longest = s\n            else:\n                # if not, find the longest substring \n                for i in range(len(longest)):\n                    if longest[0:len(longest) - i] in s:\n                        longest = longest[0:len(longest) - i]\n                        break\n\n        return longest","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of strings, create a Python program to find the longest common substring\n\n### Input:\nstrings = [\"cat\",\"car\",\"hat\"]\n\n### Output:\ndef find_longest_common_substring(strings):\n    if len(strings) == 0:\n        return ''\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        # sort the strings\n        strings.sort(key=len)\n\n        # take the first string as longest\n        longest = strings[0]\n\n        for s in strings:\n            # check if the first string is a substring of the next string\n            if longest in s:\n                # if so, keep the longest\n                longest = s\n            else:\n                # if not, find the longest substring \n                for i in range(len(longest)):\n                    if longest[0:len(longest) - i] in s:\n                        longest = longest[0:len(longest) - i]\n                        break\n\n        return longest"}
{"instruction":"Write a Python program to replace a particular word in a sentence with \"XXX\".","input":"Sentence: It's a beautiful day\nWord to be replaced: beautiful","output":"sentence = \"It's a beautiful day\"\n\nword = \"beautiful\"\n\nresult = sentence.replace (word, \"XXX\")\n\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to replace a particular word in a sentence with \"XXX\".\n\n### Input:\nSentence: It's a beautiful day\nWord to be replaced: beautiful\n\n### Output:\nsentence = \"It's a beautiful day\"\n\nword = \"beautiful\"\n\nresult = sentence.replace (word, \"XXX\")\n\nprint(result)"}
{"instruction":"Write a Python script to process the string \"This is a sample string\". The script should remove all the duplicate consecutive words, without changing the order of words.","input":"","output":"new_string = []\nprev_word = ''\nfor word in \"This is a sample string\".split():\n    if word != prev_word:\n        new_string.append(word)\n    prev_word = word\nprint(' '.join(new_string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to process the string \"This is a sample string\". The script should remove all the duplicate consecutive words, without changing the order of words.\n\n### Input:\n\n\n### Output:\nnew_string = []\nprev_word = ''\nfor word in \"This is a sample string\".split():\n    if word != prev_word:\n        new_string.append(word)\n    prev_word = word\nprint(' '.join(new_string))"}
{"instruction":"Create a Python program to find the sum of all divisors of an input number.","input":"No input.","output":"def sum_divisors(num): \n    r = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            r += i\n    return r\n\nnum = int(input(\"Input a number: \"))\nprint(\"Sum of all divisors of input is\", sum_divisors(num))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the sum of all divisors of an input number.\n\n### Input:\nNo input.\n\n### Output:\ndef sum_divisors(num): \n    r = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            r += i\n    return r\n\nnum = int(input(\"Input a number: \"))\nprint(\"Sum of all divisors of input is\", sum_divisors(num))"}
{"instruction":"Design a program to build a recursive tree structure with nodes in Python.","input":"","output":"class Node:\n    def __init__(self, val):\n      self.right = None\n      self.data = val\n      self.left = None\n\ndef insert(node, data): \n  if node is None:\n    return Node(data)\n  else:\n    if data <= node.data:\n      node.left = insert(node.left, data)\n    else:\n      node.right = insert(node.right, data)\n  return node","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program to build a recursive tree structure with nodes in Python.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, val):\n      self.right = None\n      self.data = val\n      self.left = None\n\ndef insert(node, data): \n  if node is None:\n    return Node(data)\n  else:\n    if data <= node.data:\n      node.left = insert(node.left, data)\n    else:\n      node.right = insert(node.right, data)\n  return node"}
{"instruction":"Write a Python code snippet that takes a list of numbers as argument and prints the average.","input":"[2, 3, 4, 5, 6]","output":"def average(numbers: list):\n    if numbers:\n        return sum(numbers) \/ len(numbers)\n    else:\n        return 0\n    \nnumbers = [2, 3, 4, 5, 6]\nprint(f\"Average of {numbers} is {average(numbers)}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code snippet that takes a list of numbers as argument and prints the average.\n\n### Input:\n[2, 3, 4, 5, 6]\n\n### Output:\ndef average(numbers: list):\n    if numbers:\n        return sum(numbers) \/ len(numbers)\n    else:\n        return 0\n    \nnumbers = [2, 3, 4, 5, 6]\nprint(f\"Average of {numbers} is {average(numbers)}\")"}
{"instruction":"Generate a valid python class that captures person information","input":"Name, Age, Gender, Nationality","output":"class Person:\n    def __init__(self, name, age, gender, nationality):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.nationality = nationality\n \n    def __str__(self):\n        return 'Name: {}\\nAge: {}\\nGender: {}\\nNationality: {}'.format(\n            self.name, self.age, self.gender, self.nationality)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a valid python class that captures person information\n\n### Input:\nName, Age, Gender, Nationality\n\n### Output:\nclass Person:\n    def __init__(self, name, age, gender, nationality):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.nationality = nationality\n \n    def __str__(self):\n        return 'Name: {}\\nAge: {}\\nGender: {}\\nNationality: {}'.format(\n            self.name, self.age, self.gender, self.nationality)"}
{"instruction":"Create a Python script that takes a list of numbers as an input, sorts the list using insertion sort, and returns the sorted list.","input":"nums = [5, 3, 4, 6, 1, 2]","output":"def insertion_sort(nums):\n for i in range(len(nums)):\n current_num = nums[i]\n position = i\n\n while position > 0 and nums[position - 1] > current_num:\n nums[position] = nums[position - 1]\n position -= 1\n\n nums[position] = current_num\n\n return nums\n\nnums = [5, 3, 4, 6, 1, 2]\nprint(insertion_sort(nums))\n# Output: [1, 2, 3, 4, 5, 6]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes a list of numbers as an input, sorts the list using insertion sort, and returns the sorted list.\n\n### Input:\nnums = [5, 3, 4, 6, 1, 2]\n\n### Output:\ndef insertion_sort(nums):\n for i in range(len(nums)):\n current_num = nums[i]\n position = i\n\n while position > 0 and nums[position - 1] > current_num:\n nums[position] = nums[position - 1]\n position -= 1\n\n nums[position] = current_num\n\n return nums\n\nnums = [5, 3, 4, 6, 1, 2]\nprint(insertion_sort(nums))\n# Output: [1, 2, 3, 4, 5, 6]"}
{"instruction":"Write a Python script to generate a table in a Word document, using the given headers and data.","input":"headers = ['Name', 'Phone', 'Email']\ndata = [['John', '9898989898', 'john@example.com'], ['Alice', '1234567890', 'alice@example.com']]","output":"import docx\n\nheaders = ['Name', 'Phone', 'Email']\ndata = [['John', '9898989898', 'john@example.com'], ['Alice', '1234567890', 'alice@example.com']]\n\ndocument = docx.Document()\ntable = document.add_table(rows=1, cols=len(headers))\n\n# Add column headings\nhead_cells = table.rows[0].cells\nfor header in headers:\n    head_cells[headers.index(header)].text = header\n\n# Add data\nfor row in data:\n    row_cells = table.add_row().cells\n    for cell in row:\n        row_cells[row.index(cell)].text = cell\n\ndocument.save('table.docx')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate a table in a Word document, using the given headers and data.\n\n### Input:\nheaders = ['Name', 'Phone', 'Email']\ndata = [['John', '9898989898', 'john@example.com'], ['Alice', '1234567890', 'alice@example.com']]\n\n### Output:\nimport docx\n\nheaders = ['Name', 'Phone', 'Email']\ndata = [['John', '9898989898', 'john@example.com'], ['Alice', '1234567890', 'alice@example.com']]\n\ndocument = docx.Document()\ntable = document.add_table(rows=1, cols=len(headers))\n\n# Add column headings\nhead_cells = table.rows[0].cells\nfor header in headers:\n    head_cells[headers.index(header)].text = header\n\n# Add data\nfor row in data:\n    row_cells = table.add_row().cells\n    for cell in row:\n        row_cells[row.index(cell)].text = cell\n\ndocument.save('table.docx')"}
{"instruction":"Create a program in Python that asks the user for a number, multiplies the number by 7, and then prints the result.","input":"","output":"num = int(input(\"Please enter a number: \"))\nprint(\"The result of multiplying your number by 7 is \" + str(num * 7))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that asks the user for a number, multiplies the number by 7, and then prints the result.\n\n### Input:\n\n\n### Output:\nnum = int(input(\"Please enter a number: \"))\nprint(\"The result of multiplying your number by 7 is \" + str(num * 7))"}
{"instruction":"Write a Python program that takes a number from the user and prints whether the number is prime or not.","input":"","output":"def is_prime(n):\n    if n <= 1:\n        return False\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n    \nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    if is_prime(num):\n        print(\"The number is a prime number.\")\n    else:\n        print(\"The number is not a prime number.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a number from the user and prints whether the number is prime or not.\n\n### Input:\n\n\n### Output:\ndef is_prime(n):\n    if n <= 1:\n        return False\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n    \nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    if is_prime(num):\n        print(\"The number is a prime number.\")\n    else:\n        print(\"The number is not a prime number.\")"}
{"instruction":"Develop a Python program to find the common elements in two lists.","input":"List 1: [3, 9, 15, 21, 27]\nList 2: [21, 7, 13, 29, 31]","output":"common_elements = [] \n  \n# using loop \nfor i in [3, 9, 15, 21, 27]:  \n    for j in [21, 7, 13, 29, 31]:  \n        if i == j: \n            common_elements.append(i) \n  \n# printing common elements \nprint(common_elements) \n# Output: [21]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to find the common elements in two lists.\n\n### Input:\nList 1: [3, 9, 15, 21, 27]\nList 2: [21, 7, 13, 29, 31]\n\n### Output:\ncommon_elements = [] \n  \n# using loop \nfor i in [3, 9, 15, 21, 27]:  \n    for j in [21, 7, 13, 29, 31]:  \n        if i == j: \n            common_elements.append(i) \n  \n# printing common elements \nprint(common_elements) \n# Output: [21]"}
{"instruction":"Create a function in Python to find the prime numbers up to a given integer n.","input":"8","output":"def primes_up_to(n):\n primes = []\n for i in range(2, n + 1):\n for j in range(2, i):\n if i % j == 0:\n break\n else:\n primes.append(i)\n break\n return primes\n\nprint(primes_up_to(8)) # [2, 3, 5, 7]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to find the prime numbers up to a given integer n.\n\n### Input:\n8\n\n### Output:\ndef primes_up_to(n):\n primes = []\n for i in range(2, n + 1):\n for j in range(2, i):\n if i % j == 0:\n break\n else:\n primes.append(i)\n break\n return primes\n\nprint(primes_up_to(8)) # [2, 3, 5, 7]"}
{"instruction":"Write Python code to implement the selection sort algorithm.","input":"No input.","output":"def selectionSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Find the minimum element in remaining \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, n): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n  \n        # Swap the found minimum element with \n        # the first element         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to implement the selection sort algorithm.\n\n### Input:\nNo input.\n\n### Output:\ndef selectionSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Find the minimum element in remaining \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, n): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n  \n        # Swap the found minimum element with \n        # the first element         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i]"}
{"instruction":"Write a Python program to use the MusicBrainz API to find the biographic information of a given musician.","input":"","output":"import requests\n\ndef get_biography(artist):\n    base_url = \"https:\/\/musicbrainz.org\/ws\/2\/artist\/\"\n    artist_name = artist.replace(\" \", \"%20\")  # Format URL parameter\n    mbz_url = base_url + artist_name\n    params = \"?fmt=json&inc=url-rels+release-groups\"  # Include biographical info\n    url = mbz_url + params\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        print(\"Error in response.\")\n        return None","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to use the MusicBrainz API to find the biographic information of a given musician.\n\n### Input:\n\n\n### Output:\nimport requests\n\ndef get_biography(artist):\n    base_url = \"https:\/\/musicbrainz.org\/ws\/2\/artist\/\"\n    artist_name = artist.replace(\" \", \"%20\")  # Format URL parameter\n    mbz_url = base_url + artist_name\n    params = \"?fmt=json&inc=url-rels+release-groups\"  # Include biographical info\n    url = mbz_url + params\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        print(\"Error in response.\")\n        return None"}
{"instruction":"Create a basic HTML\/CSS page that displays a list of computer programming languages.","input":"Not applicable","output":"<html>\n<head>\n<title>List of Programming Languages<\/title>\n<style>\nh1 {\n font-family: sans-serif; \n color: #444444;\n }\n\nul {\n padding: 0;\n margin: 0;\n list-style-type: none;\n line-height: 1.5;\n font-family: sans-serif;\n font-size: 16px; \n color: #444444; \n }\n<\/style>\n<\/head>\n<body>\n <h1>List of Programming Languages<\/h1> \n <ul>\n  <li>Java<\/li>\n  <li>Python<\/li>\n  <li>C++<\/li>\n  <li>JavaScript<\/li>\n  <li>C#<\/li>\n  <li>PHP<\/li>\n  <li>Perl<\/li>\n  <li>Ruby<\/li>\n  <li>Objective-C<\/li>\n  <li>Swift<\/li>\n<\/ul>\n<\/body>\n<\/html>","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic HTML\/CSS page that displays a list of computer programming languages.\n\n### Input:\nNot applicable\n\n### Output:\n<html>\n<head>\n<title>List of Programming Languages<\/title>\n<style>\nh1 {\n font-family: sans-serif; \n color: #444444;\n }\n\nul {\n padding: 0;\n margin: 0;\n list-style-type: none;\n line-height: 1.5;\n font-family: sans-serif;\n font-size: 16px; \n color: #444444; \n }\n<\/style>\n<\/head>\n<body>\n <h1>List of Programming Languages<\/h1> \n <ul>\n  <li>Java<\/li>\n  <li>Python<\/li>\n  <li>C++<\/li>\n  <li>JavaScript<\/li>\n  <li>C#<\/li>\n  <li>PHP<\/li>\n  <li>Perl<\/li>\n  <li>Ruby<\/li>\n  <li>Objective-C<\/li>\n  <li>Swift<\/li>\n<\/ul>\n<\/body>\n<\/html>"}
{"instruction":"Design a Python program to classify a given set of data using a decision tree.","input":"","output":"# Importing the libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Importing the dataset\ndataset = pd.read_csv('data.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\n# Splitting the dataset into the Training set and Test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\n# Fitting the Decision Tree Classification to the Training set\nclassifier = DecisionTreeClassifier()\nclassifier.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to classify a given set of data using a decision tree.\n\n### Input:\n\n\n### Output:\n# Importing the libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Importing the dataset\ndataset = pd.read_csv('data.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\n# Splitting the dataset into the Training set and Test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\n# Fitting the Decision Tree Classification to the Training set\nclassifier = DecisionTreeClassifier()\nclassifier.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)"}
{"instruction":"Create a Python script to detect when a song has ended.","input":"Sample song length in seconds: 300","output":"import time\n \n# Define a song length\nsong_length = 300\n\n# Start the progress bar\nprogress_bar = 0\nfor x in range(0, song_length):\n    # Update the progress bar\n    progress_bar += 1\n    # Sleep a second\n    time.sleep(1)\n    print(\"Progress Bar: {}%\".format(progress_bar\/song_length * 100))\n\n# Song has ended\nprint(\"Song Ended!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to detect when a song has ended.\n\n### Input:\nSample song length in seconds: 300\n\n### Output:\nimport time\n \n# Define a song length\nsong_length = 300\n\n# Start the progress bar\nprogress_bar = 0\nfor x in range(0, song_length):\n    # Update the progress bar\n    progress_bar += 1\n    # Sleep a second\n    time.sleep(1)\n    print(\"Progress Bar: {}%\".format(progress_bar\/song_length * 100))\n\n# Song has ended\nprint(\"Song Ended!\")"}
{"instruction":"Create a web crawler in Python that is able to scrape data from webpages. The crawler should be able to crawl multiple pages and extract specific data from the HTML source code.","input":"Not applicable","output":"import requests\nfrom lxml import html\n\ndef crawl(url):\n page = requests.get(url)\n tree = html.fromstring(page.content)\n\n # Extract the data from the HTML source code\n data = tree.xpath('xpath expression')\n\n # Return the data\n return data\n\n# Crawl multiple URLs\nurls = [url1, url2, ...]\nfor url in urls:\n data = crawl(url)\n \n print(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web crawler in Python that is able to scrape data from webpages. The crawler should be able to crawl multiple pages and extract specific data from the HTML source code.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom lxml import html\n\ndef crawl(url):\n page = requests.get(url)\n tree = html.fromstring(page.content)\n\n # Extract the data from the HTML source code\n data = tree.xpath('xpath expression')\n\n # Return the data\n return data\n\n# Crawl multiple URLs\nurls = [url1, url2, ...]\nfor url in urls:\n data = crawl(url)\n \n print(data)"}
{"instruction":"Create a game in Python using the PyGame library.","input":"","output":"import pygame\n\npygame.init()\n\nscreen = pygame.display.set_mode((800,600))\n\npygame.display.set_caption(\"My Game\")\n\nrun = True\n\nwhile run:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            run = False\n\n    pygame.display.update()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a game in Python using the PyGame library.\n\n### Input:\n\n\n### Output:\nimport pygame\n\npygame.init()\n\nscreen = pygame.display.set_mode((800,600))\n\npygame.display.set_caption(\"My Game\")\n\nrun = True\n\nwhile run:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            run = False\n\n    pygame.display.update()"}
{"instruction":"Write a Python script to optimize an algorithm for finding a specific element in a list.","input":"","output":"def find_element(input_list,element):\n  for index, val in enumerate(input_list):\n    if val == element:\n      return index\n \ndef optimized_find_element(input_list,element):\n  low,high=0,len(input_list)-1\n \n  while low <= high:\n    mid = (low + high) \/\/ 2\n    if input_list[mid] == element:\n      return mid\n    elif element > input_list[mid]:\n      low = mid + 1\n    else:\n      high = mid - 1\n \n  return -1\n \ninput_list = [1,2,3,4,5,6,7,8,9]\nelement = 7\nindex = find_element(input_list,element)\nprint(index)\nindex = optimized_find_element(input_list,element)\nprint(index)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to optimize an algorithm for finding a specific element in a list.\n\n### Input:\n\n\n### Output:\ndef find_element(input_list,element):\n  for index, val in enumerate(input_list):\n    if val == element:\n      return index\n \ndef optimized_find_element(input_list,element):\n  low,high=0,len(input_list)-1\n \n  while low <= high:\n    mid = (low + high) \/\/ 2\n    if input_list[mid] == element:\n      return mid\n    elif element > input_list[mid]:\n      low = mid + 1\n    else:\n      high = mid - 1\n \n  return -1\n \ninput_list = [1,2,3,4,5,6,7,8,9]\nelement = 7\nindex = find_element(input_list,element)\nprint(index)\nindex = optimized_find_element(input_list,element)\nprint(index)"}
{"instruction":"Create a program in Python which can classify whether an animal is a bird or a mammal.","input":"classify(\"hummingbird\")","output":"def classify(animal):\n    if animal == \"hummingbird\":\n        return \"Bird\" \n    else:\n        return \"Mammal\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python which can classify whether an animal is a bird or a mammal.\n\n### Input:\nclassify(\"hummingbird\")\n\n### Output:\ndef classify(animal):\n    if animal == \"hummingbird\":\n        return \"Bird\" \n    else:\n        return \"Mammal\""}
{"instruction":"Create a python program to compute the volume of a cube given its edge length as an input.","input":"3","output":"length = int(input(\"Enter the edge length of the cube: \"))\n\nvolume = length * length * length\n\nprint(\"The volume of the cube is\", volume)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to compute the volume of a cube given its edge length as an input.\n\n### Input:\n3\n\n### Output:\nlength = int(input(\"Enter the edge length of the cube: \"))\n\nvolume = length * length * length\n\nprint(\"The volume of the cube is\", volume)"}
{"instruction":"Develop a program to implement a personalised mailing system based on user preferences.","input":"user preferences","output":"# python program to implement a personalized mailing system\n\ndef personalizedMailingSystem(user_preferences):\n    # user preferences is a dictionary \n    # containing the user's preferences\n    \n    # get user's name\n    name = user_preferences[\"name\"]\n    # get user's email address\n    email = user_preferences[\"email\"]\n    # get user's topic interests\n    topics = user_preferences[\"topics\"]\n    \n    # generate personalized emails for the user\n    for topic in topics:\n        message = \"Hi \" + name + \",\\n\\nWe hope you're doing well. We wanted to let you know that we've just released new content about \" + topic + \". We think you'd be interested in taking a look!\\n\\nThanks,\\nThe mail team \\n\"\n        print(\"Sending email to \" + email + \" about \" + topic)\n        send_email(email, message)\n\n# example usage\nuser_preferences = {\n    \"name\": \"John\", \n    \"email\": \"john@example.com\", \n    \"topics\": [\"AI\", \"Machine Learning\", \"Robotics\"]\n    }\npersonalizedMailingSystem(user_preferences)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program to implement a personalised mailing system based on user preferences.\n\n### Input:\nuser preferences\n\n### Output:\n# python program to implement a personalized mailing system\n\ndef personalizedMailingSystem(user_preferences):\n    # user preferences is a dictionary \n    # containing the user's preferences\n    \n    # get user's name\n    name = user_preferences[\"name\"]\n    # get user's email address\n    email = user_preferences[\"email\"]\n    # get user's topic interests\n    topics = user_preferences[\"topics\"]\n    \n    # generate personalized emails for the user\n    for topic in topics:\n        message = \"Hi \" + name + \",\\n\\nWe hope you're doing well. We wanted to let you know that we've just released new content about \" + topic + \". We think you'd be interested in taking a look!\\n\\nThanks,\\nThe mail team \\n\"\n        print(\"Sending email to \" + email + \" about \" + topic)\n        send_email(email, message)\n\n# example usage\nuser_preferences = {\n    \"name\": \"John\", \n    \"email\": \"john@example.com\", \n    \"topics\": [\"AI\", \"Machine Learning\", \"Robotics\"]\n    }\npersonalizedMailingSystem(user_preferences)"}
{"instruction":"Write a Python program to find the n-th smallest number in the following list","input":"[2, 3, 5, 7, 11] n = 2","output":"def nth_smallest(input_list, n):\n    input_list.sort()\n    return input_list[n-1]\n\ninput_list = [2, 3, 5, 7, 11]\nn = 2\nresult = nth_smallest(input_list, n)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the n-th smallest number in the following list\n\n### Input:\n[2, 3, 5, 7, 11] n = 2\n\n### Output:\ndef nth_smallest(input_list, n):\n    input_list.sort()\n    return input_list[n-1]\n\ninput_list = [2, 3, 5, 7, 11]\nn = 2\nresult = nth_smallest(input_list, n)\nprint(result)"}
{"instruction":"Develop a Python code to print a string in reverse order.","input":"\"Hello, World!\"","output":"str = \"Hello, World!\"\n\n# loop to iterate through string\nfor i in range(len(str)-1, -1, -1):\n  print(str[i],end=\"\")\n\nprint()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python code to print a string in reverse order.\n\n### Input:\n\"Hello, World!\"\n\n### Output:\nstr = \"Hello, World!\"\n\n# loop to iterate through string\nfor i in range(len(str)-1, -1, -1):\n  print(str[i],end=\"\")\n\nprint()"}
{"instruction":"Create a python program to rotate a list of numbers by a given number.","input":"[1,2,3,4,5]","output":"def rotate_list(nums, n):\n  return nums[n:] + nums[:n]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to rotate a list of numbers by a given number.\n\n### Input:\n[1,2,3,4,5]\n\n### Output:\ndef rotate_list(nums, n):\n  return nums[n:] + nums[:n]"}
{"instruction":"Write a Python script to search a given dictionary for a given word.","input":"dictionary = {\"hello\": \"Str","output":"def search_word(word, dictionary):\n    if word in dictionary.keys():\n        return dictionary[word]\n    else:\n        return None\n\ndictionary = {'hello': 'string', 'goodbye': 'bye'}\n\nword = 'hello'\n\nresult = search_word(word, dictionary)\n\nif result:\n    print('Word found in dictionary: ' + result)\n\nelse:\n    print('Word not found in dictionary.')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to search a given dictionary for a given word.\n\n### Input:\ndictionary = {\"hello\": \"Str\n\n### Output:\ndef search_word(word, dictionary):\n    if word in dictionary.keys():\n        return dictionary[word]\n    else:\n        return None\n\ndictionary = {'hello': 'string', 'goodbye': 'bye'}\n\nword = 'hello'\n\nresult = search_word(word, dictionary)\n\nif result:\n    print('Word found in dictionary: ' + result)\n\nelse:\n    print('Word not found in dictionary.')"}
{"instruction":"Create a Python program to generate random numbers between 1 and 10 of a specified length.","input":"Length = 6","output":"import random\ndef generate_random_nums(length):\n  lst = []\n  for _ in range(length):\n    lst.append(random.randint(1, 10))\n  return lst","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate random numbers between 1 and 10 of a specified length.\n\n### Input:\nLength = 6\n\n### Output:\nimport random\ndef generate_random_nums(length):\n  lst = []\n  for _ in range(length):\n    lst.append(random.randint(1, 10))\n  return lst"}
{"instruction":"Write a Python script to extract the top trending topics from a given Twitter page.","input":"","output":"import tweepy\n\nauth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\nauth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)\n\napi = tweepy.API(auth)\n\n# get trending topics for given twitter page\ndef getTrendingTopics(username):\n    topics = []\n    tweets = api.user_timeline(screen_name=username, count=100)\n    for tweet in tweets:\n        for hashtag in tweet.entities.get('hashtags'):\n            topics.append(hashtag['text'])\n    return sorted(set(topics))\n\nusername = input('Enter twitter username: ')\ntrendingTopics = getTrendingTopics(username)\nprint(trendingTopics)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to extract the top trending topics from a given Twitter page.\n\n### Input:\n\n\n### Output:\nimport tweepy\n\nauth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\nauth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)\n\napi = tweepy.API(auth)\n\n# get trending topics for given twitter page\ndef getTrendingTopics(username):\n    topics = []\n    tweets = api.user_timeline(screen_name=username, count=100)\n    for tweet in tweets:\n        for hashtag in tweet.entities.get('hashtags'):\n            topics.append(hashtag['text'])\n    return sorted(set(topics))\n\nusername = input('Enter twitter username: ')\ntrendingTopics = getTrendingTopics(username)\nprint(trendingTopics)"}
{"instruction":"Create a Python function to sort a list of strings alphabetically.","input":"my_list = [\"apple\", \"orange\", \"banana\"]","output":"def sort_list(list):\n    list.sort()\n    return list\n    \nsort_list(my_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to sort a list of strings alphabetically.\n\n### Input:\nmy_list = [\"apple\", \"orange\", \"banana\"]\n\n### Output:\ndef sort_list(list):\n    list.sort()\n    return list\n    \nsort_list(my_list)"}
{"instruction":"Identify the best syntax to use in Python to add two numbers.","input":"","output":"# Python syntax to add two numbers\nresult = number_1 + number_2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIdentify the best syntax to use in Python to add two numbers.\n\n### Input:\n\n\n### Output:\n# Python syntax to add two numbers\nresult = number_1 + number_2"}
{"instruction":"Write a Python program to print out the numbers from one to ten and identify any numbers that are divisible by three.","input":"Not applicable","output":"for i in range(1, 11):\n if i % 3 == 0:\n print (f'{i} is divisible by three.')\n else:\n print (i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print out the numbers from one to ten and identify any numbers that are divisible by three.\n\n### Input:\nNot applicable\n\n### Output:\nfor i in range(1, 11):\n if i % 3 == 0:\n print (f'{i} is divisible by three.')\n else:\n print (i)"}
{"instruction":"Write a function in Python that takes in a size n and returns the n-th prime number.","input":"n = 5","output":"def nth_prime_number(n):\n    prime_numbers = [2]\n    i = 3\n    while len(prime_numbers) < n:\n        for number in prime_numbers:\n            if i % number == 0:\n                break\n        else:\n            prime_numbers.append(i)\n        i+= 2\n    return prime_numbers[-1]\n\n\n# test \nprime_number = nth_prime_number(5)\nprint(prime_number) # Output: 11","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes in a size n and returns the n-th prime number.\n\n### Input:\nn = 5\n\n### Output:\ndef nth_prime_number(n):\n    prime_numbers = [2]\n    i = 3\n    while len(prime_numbers) < n:\n        for number in prime_numbers:\n            if i % number == 0:\n                break\n        else:\n            prime_numbers.append(i)\n        i+= 2\n    return prime_numbers[-1]\n\n\n# test \nprime_number = nth_prime_number(5)\nprint(prime_number) # Output: 11"}
{"instruction":"Create a Python program to create a histogram to show the frequency of different words in a given sentence.","input":"This is a sentence with a lot of different words.","output":"import re\nimport matplotlib.pyplot as plt\n\n# Get the sentence\nsentence = \"This is a sentence with a lot of different words.\"\n\n# Get all the words\nwords = re.findall(r'\\w+', sentence)\n\n# Count the frequency of each word\nfrequency = {}\nfor word in words:\n    count = frequency.get(word, 0)\n    frequency[word] = count + 1\n\n# Create the labels and counts for the histogram\nlabels, counts = list(frequency.keys()), list(frequency.values())\n\n# Plot the histogram using matplotlib\nplt.bar(labels, counts, width=0.8, align='center')\nplt.title('Frequency of Words')\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to create a histogram to show the frequency of different words in a given sentence.\n\n### Input:\nThis is a sentence with a lot of different words.\n\n### Output:\nimport re\nimport matplotlib.pyplot as plt\n\n# Get the sentence\nsentence = \"This is a sentence with a lot of different words.\"\n\n# Get all the words\nwords = re.findall(r'\\w+', sentence)\n\n# Count the frequency of each word\nfrequency = {}\nfor word in words:\n    count = frequency.get(word, 0)\n    frequency[word] = count + 1\n\n# Create the labels and counts for the histogram\nlabels, counts = list(frequency.keys()), list(frequency.values())\n\n# Plot the histogram using matplotlib\nplt.bar(labels, counts, width=0.8, align='center')\nplt.title('Frequency of Words')\nplt.show()"}
{"instruction":"Propose and implement a method to sort a list of varied size nested lists in Python.","input":"Sample input: [[2,6],[1],[3,4,5]]","output":"def sortList(lists):\n sortedList = [sorted(lst) for lst in lists]\n sortedList.sort(key = len)\n return sortedList\n\nlists = [[2,6],[1],[3,4,5]]\nprint(sortList(lists)) \/\/ prints [[1],[2,6],[3,4,5]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPropose and implement a method to sort a list of varied size nested lists in Python.\n\n### Input:\nSample input: [[2,6],[1],[3,4,5]]\n\n### Output:\ndef sortList(lists):\n sortedList = [sorted(lst) for lst in lists]\n sortedList.sort(key = len)\n return sortedList\n\nlists = [[2,6],[1],[3,4,5]]\nprint(sortList(lists)) \/\/ prints [[1],[2,6],[3,4,5]]"}
{"instruction":"Write a Python program to create a data visualization for a given dataset.","input":"The dataset contains information about the number of students enrolled in various courses.","output":"import matplotlib.pyplot as plt\n\ndef create_visualizations(data):\n x = [x[0] for x in data]\n y = [x[1] for x in data]\n plt.plot(x, y, 'bo')\n plt.xlabel('Courses')\n plt.ylabel('Students')\n plt.title('Number of Students Enrolled in Courses')\n plt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a data visualization for a given dataset.\n\n### Input:\nThe dataset contains information about the number of students enrolled in various courses.\n\n### Output:\nimport matplotlib.pyplot as plt\n\ndef create_visualizations(data):\n x = [x[0] for x in data]\n y = [x[1] for x in data]\n plt.plot(x, y, 'bo')\n plt.xlabel('Courses')\n plt.ylabel('Students')\n plt.title('Number of Students Enrolled in Courses')\n plt.show()"}
{"instruction":"Write a Python program to generate a random password containing at least one special character and one numeric character.","input":"Not applicable","output":"import string \nimport random \n\ncharacters = string.ascii_letters + string.digits + string.punctuation \n\n# Generates a random password of length 8  \npassword =  \"\".join(random.sample(characters, 8)) \n\n# Checks if password has at least one special character\n# and one numeric character \nif any(char.isdigit() for char in password) and \\ \n any(char in string.punctuation for char in password):\n print(password)\nelse:\n print(\"Retry!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a random password containing at least one special character and one numeric character.\n\n### Input:\nNot applicable\n\n### Output:\nimport string \nimport random \n\ncharacters = string.ascii_letters + string.digits + string.punctuation \n\n# Generates a random password of length 8  \npassword =  \"\".join(random.sample(characters, 8)) \n\n# Checks if password has at least one special character\n# and one numeric character \nif any(char.isdigit() for char in password) and \\ \n any(char in string.punctuation for char in password):\n print(password)\nelse:\n print(\"Retry!\")"}
{"instruction":"Create an API endpoint to delete a record from a database using Python.","input":"","output":"# Import the necessary modules\nfrom flask import Flask, request\nimport sqlite3\n\n# Create the Flask application\napp = Flask(__name__)\n\n# Establish a connection to the database\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# Create a function to delete a record\n@app.route('\/delete_record\/<int:id>', methods=['DELETE'])\ndef delete_record(id):\n    c.execute(\"DELETE FROM records WHERE rowid = ?\", (id,))\n    conn.commit()\n    return \"Record deleted successfully\"\n\nif __name__ == '__main__':\n    app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API endpoint to delete a record from a database using Python.\n\n### Input:\n\n\n### Output:\n# Import the necessary modules\nfrom flask import Flask, request\nimport sqlite3\n\n# Create the Flask application\napp = Flask(__name__)\n\n# Establish a connection to the database\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# Create a function to delete a record\n@app.route('\/delete_record\/<int:id>', methods=['DELETE'])\ndef delete_record(id):\n    c.execute(\"DELETE FROM records WHERE rowid = ?\", (id,))\n    conn.commit()\n    return \"Record deleted successfully\"\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"instruction":"Create a Python script that takes a number and a power as parameters and calculates the result.","input":"Example input: number=2 power=3","output":"def power(number, power):\n return number**power\n\nprint(power(2, 3)) # Output: 8","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes a number and a power as parameters and calculates the result.\n\n### Input:\nExample input: number=2 power=3\n\n### Output:\ndef power(number, power):\n return number**power\n\nprint(power(2, 3)) # Output: 8"}
{"instruction":"Create a `GenericScalar` class that represents a GraphQL scalar value that could be a String, Boolean, Int, Float, List or Object. Implement the `identity` method that returns the input value, `serialize` and `parse_value` methods that also return the input value, and the `parse_literal` method that parses the input AST and returns the corresponding Python value.","input":"","output":"from __future__ import unicode_literals\n\nfrom graphql.language.ast import (BooleanValue, FloatValue, IntValue,\n                                  StringValue, ListValue, ObjectValue)\n\nfrom graphene.types.scalars import MIN_INT, MAX_INT\nfrom .scalars import Scalar\n\n\nclass GenericScalar(Scalar):\n    \"\"\"\n    The `GenericScalar` scalar type represents a generic\n    GraphQL scalar value that could be:\n    String, Boolean, Int, Float, List or Object.\n    \"\"\"\n\n    @staticmethod\n    def identity(value):\n        return value\n\n    serialize = identity\n    parse_value = identity\n\n    @staticmethod\n    def parse_literal(ast):\n        if isinstance(ast, (StringValue, BooleanValue)):\n            return ast.value\n        elif isinstance(ast, IntValue):\n            num = int(ast.value)\n            if MIN_INT <= num <= MAX_INT:\n                return num\n        elif isinstance(ast, FloatValue):\n            return float(ast.value)\n        elif isinstance(ast, ListValue):\n            return [GenericScalar.parse_literal(value) for value in ast.values]\n        elif isinstance(ast, ObjectValue):\n            return {field.name.value: GenericScalar.parse_literal(field.value) for field in ast.fields}\n        else:\n            return None\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a `GenericScalar` class that represents a GraphQL scalar value that could be a String, Boolean, Int, Float, List or Object. Implement the `identity` method that returns the input value, `serialize` and `parse_value` methods that also return the input value, and the `parse_literal` method that parses the input AST and returns the corresponding Python value.\n\n### Input:\n\n\n### Output:\nfrom __future__ import unicode_literals\n\nfrom graphql.language.ast import (BooleanValue, FloatValue, IntValue,\n                                  StringValue, ListValue, ObjectValue)\n\nfrom graphene.types.scalars import MIN_INT, MAX_INT\nfrom .scalars import Scalar\n\n\nclass GenericScalar(Scalar):\n    \"\"\"\n    The `GenericScalar` scalar type represents a generic\n    GraphQL scalar value that could be:\n    String, Boolean, Int, Float, List or Object.\n    \"\"\"\n\n    @staticmethod\n    def identity(value):\n        return value\n\n    serialize = identity\n    parse_value = identity\n\n    @staticmethod\n    def parse_literal(ast):\n        if isinstance(ast, (StringValue, BooleanValue)):\n            return ast.value\n        elif isinstance(ast, IntValue):\n            num = int(ast.value)\n            if MIN_INT <= num <= MAX_INT:\n                return num\n        elif isinstance(ast, FloatValue):\n            return float(ast.value)\n        elif isinstance(ast, ListValue):\n            return [GenericScalar.parse_literal(value) for value in ast.values]\n        elif isinstance(ast, ObjectValue):\n            return {field.name.value: GenericScalar.parse_literal(field.value) for field in ast.fields}\n        else:\n            return None\n"}
{"instruction":"Generate a Python class to represent a Person object with the attributes of 'firstName', 'lastName', and 'age'.","input":"","output":"class Person:\n    def __init__(self, firstName, lastName, age):\n        self.firstName = firstName\n        self.lastName = lastName\n        self.age = age","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class to represent a Person object with the attributes of 'firstName', 'lastName', and 'age'.\n\n### Input:\n\n\n### Output:\nclass Person:\n    def __init__(self, firstName, lastName, age):\n        self.firstName = firstName\n        self.lastName = lastName\n        self.age = age"}
{"instruction":"Create a Python program to calculate factorials recursively.","input":"Not applicable","output":"def factorial(n):\n  # Base Case\n  if n == 0:\n    return 1\n  # Recursive Case\n  else:\n    return n * factorial(n-1)\n\n#Testing\nnum = int(input(\"Enter a number to calculate it's factorial: \"))\n\nprint(f\"The factorial of {num} is { factorial(num)})","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate factorials recursively.\n\n### Input:\nNot applicable\n\n### Output:\ndef factorial(n):\n  # Base Case\n  if n == 0:\n    return 1\n  # Recursive Case\n  else:\n    return n * factorial(n-1)\n\n#Testing\nnum = int(input(\"Enter a number to calculate it's factorial: \"))\n\nprint(f\"The factorial of {num} is { factorial(num)})"}
{"instruction":"Create a script in Python for predicting the sales for a new product using linear regression.","input":"Input values for the linear regression:\n\"ProductPrice\", \"AdvertisementBudget\"\n\nExample values for the input:\n90, 15","output":"\"\"\"\nPerform linear regression to predict the sales for a new product\n\"\"\"\n\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Define input values\nproduct_price = 90\nadvertisement_budget = 15\n\n# Define the independent and dependent data\nX = np.array([advertisement_budget]).reshape(-1,1)\nY = np.array([product_price]).reshape(-1,1)\n\n# Create and train the model\nlinear_regressor = LinearRegression()\nlinear_regressor.fit(X, Y)\n\n# Make a prediction\npredicted_sales = linear_regressor.predict([[advertisement_budget]])\n\n# Print the result\nprint(\"Predicted sales for new product: \", predicted_sales[0])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a script in Python for predicting the sales for a new product using linear regression.\n\n### Input:\nInput values for the linear regression:\n\"ProductPrice\", \"AdvertisementBudget\"\n\nExample values for the input:\n90, 15\n\n### Output:\n\"\"\"\nPerform linear regression to predict the sales for a new product\n\"\"\"\n\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Define input values\nproduct_price = 90\nadvertisement_budget = 15\n\n# Define the independent and dependent data\nX = np.array([advertisement_budget]).reshape(-1,1)\nY = np.array([product_price]).reshape(-1,1)\n\n# Create and train the model\nlinear_regressor = LinearRegression()\nlinear_regressor.fit(X, Y)\n\n# Make a prediction\npredicted_sales = linear_regressor.predict([[advertisement_budget]])\n\n# Print the result\nprint(\"Predicted sales for new product: \", predicted_sales[0])"}
{"instruction":"Implement a function in Python that takes two integers as \ninput and returns the larger one.","input":"","output":"def larger_of_two(num1, num2):\n    \"\"\"Return the larger of two integers\"\"\"\n    if num1 > num2:\n        return num1\n    else:\n        return num2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that takes two integers as \ninput and returns the larger one.\n\n### Input:\n\n\n### Output:\ndef larger_of_two(num1, num2):\n    \"\"\"Return the larger of two integers\"\"\"\n    if num1 > num2:\n        return num1\n    else:\n        return num2"}
{"instruction":"Generate a Python program to apply custom formatting for the following output.","input":"Given a list of strings, output a HTML table with data in the strings","output":"def create_html_table(slist):\n    table_html = \"<table>\"\n    for str in slist:\n        table_html += \"<tr>\"\n        table_html += \"<td>\" + str + \"<\/td>\" \n        table_html += \"<\/tr>\"\n\n    table_html += \"<\/table>\"\n    return table_html","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to apply custom formatting for the following output.\n\n### Input:\nGiven a list of strings, output a HTML table with data in the strings\n\n### Output:\ndef create_html_table(slist):\n    table_html = \"<table>\"\n    for str in slist:\n        table_html += \"<tr>\"\n        table_html += \"<td>\" + str + \"<\/td>\" \n        table_html += \"<\/tr>\"\n\n    table_html += \"<\/table>\"\n    return table_html"}
{"instruction":"Create a Bash script to run a Python program in the background.","input":"","output":"#!\/bin\/bash\n\n# Run a Python Program in Background\n\n# Store the current directory\nCURRENT_DIR=$(pwd)\n\n# Execute the python script\npython $CURRENT_DIR\/<your_python_script>.py &","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Bash script to run a Python program in the background.\n\n### Input:\n\n\n### Output:\n#!\/bin\/bash\n\n# Run a Python Program in Background\n\n# Store the current directory\nCURRENT_DIR=$(pwd)\n\n# Execute the python script\npython $CURRENT_DIR\/<your_python_script>.py &"}
{"instruction":"Using the comment as a guide, write a Python program to find the occurrence of any given word in a string.","input":"string = \"Welcome to my website website\"\nword = \"website\"","output":"string = \"Welcome to my website website\"\nword = \"website\"\n\n# TODO: Initialize count\ncount = 0\n\n# TODO: Find the words in the string\nwords = string.split()\n\n# TODO: Update count\nfor w in words:\n    if w == word:\n        count += 1\n\n# TODO: Print\nprint(\"The word \\\"{}\\\" occured {} times in the given string\".format(word, count))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the comment as a guide, write a Python program to find the occurrence of any given word in a string.\n\n### Input:\nstring = \"Welcome to my website website\"\nword = \"website\"\n\n### Output:\nstring = \"Welcome to my website website\"\nword = \"website\"\n\n# TODO: Initialize count\ncount = 0\n\n# TODO: Find the words in the string\nwords = string.split()\n\n# TODO: Update count\nfor w in words:\n    if w == word:\n        count += 1\n\n# TODO: Print\nprint(\"The word \\\"{}\\\" occured {} times in the given string\".format(word, count))"}
{"instruction":"Build a web scraper using Python that extracts data from Google search","input":"Keywords: \"Best budget laptop\"","output":"# import libraries \nimport requests\nfrom bs4 import BeautifulSoup\n\n# url\nurl = 'https:\/\/www.google.com\/search?q=best+budget+laptop'\n\n# get page using requests \npage = requests.get(url)\n\n# parse using BeautifulSoup\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# get all links from result page\nresults = soup.select('.r a')\n\n# iterate over each link\nfor item in results:\n  result_url = item.get('href')\n  # get the required data\n  print(result_url)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a web scraper using Python that extracts data from Google search\n\n### Input:\nKeywords: \"Best budget laptop\"\n\n### Output:\n# import libraries \nimport requests\nfrom bs4 import BeautifulSoup\n\n# url\nurl = 'https:\/\/www.google.com\/search?q=best+budget+laptop'\n\n# get page using requests \npage = requests.get(url)\n\n# parse using BeautifulSoup\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# get all links from result page\nresults = soup.select('.r a')\n\n# iterate over each link\nfor item in results:\n  result_url = item.get('href')\n  # get the required data\n  print(result_url)"}
{"instruction":"Write a Python program to take a string as input and to create an object that contains all unique characters in the string as keys and the number of occurrences of the character as values.","input":"string = \"This is a string\"","output":"def char_freq(string):\n freq_dict = {}\n \n for char in string:\n if char in freq_dict:\n freq_dict[char] += 1\n else: \n freq_dict[char] = 1\n \n return freq_dict","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to take a string as input and to create an object that contains all unique characters in the string as keys and the number of occurrences of the character as values.\n\n### Input:\nstring = \"This is a string\"\n\n### Output:\ndef char_freq(string):\n freq_dict = {}\n \n for char in string:\n if char in freq_dict:\n freq_dict[char] += 1\n else: \n freq_dict[char] = 1\n \n return freq_dict"}
{"instruction":"Modify the code to output a float in python instead of integer.","input":"def multiply(a, b): \n    return a * b","output":"def multiply(a, b): \n    return float(a * b)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the code to output a float in python instead of integer.\n\n### Input:\ndef multiply(a, b): \n    return a * b\n\n### Output:\ndef multiply(a, b): \n    return float(a * b)"}
{"instruction":"Edit this Python program to run on Python 3.","input":"import string\ndef create_anagrams(word):\n    result = []\n    if len(word) == 1:\n        result = [word]\n    else:\n        for i, letter in enumerate(word):\n            for j in create_anagrams(word[:i]+word[i+1:]):\n                result.append(letter+j)\n    return result","output":"import string\ndef create_anagrams(word):\n    result = []\n    if len(word) == 1:\n        result = [word]\n    else:\n        for i, letter in enumerate(word):\n            for j in create_anagrams(word[:i]+word[i+1:]):\n                result.append(str(letter)+str(j))\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit this Python program to run on Python 3.\n\n### Input:\nimport string\ndef create_anagrams(word):\n    result = []\n    if len(word) == 1:\n        result = [word]\n    else:\n        for i, letter in enumerate(word):\n            for j in create_anagrams(word[:i]+word[i+1:]):\n                result.append(letter+j)\n    return result\n\n### Output:\nimport string\ndef create_anagrams(word):\n    result = []\n    if len(word) == 1:\n        result = [word]\n    else:\n        for i, letter in enumerate(word):\n            for j in create_anagrams(word[:i]+word[i+1:]):\n                result.append(str(letter)+str(j))\n    return result"}
{"instruction":"Write a Python program that returns the factorial of a number.","input":"5","output":"def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(5)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that returns the factorial of a number.\n\n### Input:\n5\n\n### Output:\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(5)\nprint(result)"}
{"instruction":"Create a function in Python to determine the length of the longest common subsequence of two strings.","input":"string1: abcdef\nstring2: abcef","output":"def longest_subsequence(s1, s2):\n    n = len(s1) \n    m = len(s2) \n   \n    LCS = [[0 for k in range(m+1)]for l in range(n+1)]  \n   \n    for i in range(n+1): \n        for j in range(m+1): \n            if i == 0 or j == 0: \n                LCS[i][j] = 0\n            elif s1[i-1] == s2[j-1]: \n                LCS[i][j] = LCS[i-1][j-1]+1\n            else: \n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1]) \n\n    return LCS[n][m]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to determine the length of the longest common subsequence of two strings.\n\n### Input:\nstring1: abcdef\nstring2: abcef\n\n### Output:\ndef longest_subsequence(s1, s2):\n    n = len(s1) \n    m = len(s2) \n   \n    LCS = [[0 for k in range(m+1)]for l in range(n+1)]  \n   \n    for i in range(n+1): \n        for j in range(m+1): \n            if i == 0 or j == 0: \n                LCS[i][j] = 0\n            elif s1[i-1] == s2[j-1]: \n                LCS[i][j] = LCS[i-1][j-1]+1\n            else: \n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1]) \n\n    return LCS[n][m]"}
{"instruction":"Create a Python3 program to process a list of strings and print each string in uppercase.","input":"['this', 'is', 'a', 'list', 'of', 'strings']","output":"list_of_strings = ['this', 'is', 'a', 'list', 'of', 'strings']\n\nfor string in list_of_strings:\n    print(string.upper())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python3 program to process a list of strings and print each string in uppercase.\n\n### Input:\n['this', 'is', 'a', 'list', 'of', 'strings']\n\n### Output:\nlist_of_strings = ['this', 'is', 'a', 'list', 'of', 'strings']\n\nfor string in list_of_strings:\n    print(string.upper())"}
{"instruction":"Create a Python function to extract the largest prime factor from a given number.","input":"number = 35","output":"def largest_prime_factor(number):\n largest_factor = 1\n for i in range(2, number+1):\n while number % i == 0:\n largest_factor = i\n number \/\/= i\n return largest_factor\n\nlargest_prime_factor(35) # Output: 5","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to extract the largest prime factor from a given number.\n\n### Input:\nnumber = 35\n\n### Output:\ndef largest_prime_factor(number):\n largest_factor = 1\n for i in range(2, number+1):\n while number % i == 0:\n largest_factor = i\n number \/\/= i\n return largest_factor\n\nlargest_prime_factor(35) # Output: 5"}
{"instruction":"Create a Python class that uses a custom exception for handling incorrect data types.","input":"Not applicable","output":"class CustomExceptionHandling:\n    class DataTypeException(Exception):\n        def __init__(self, message):\n            super().__init__(message)\n\n    def check(self, value):\n        if type(value) != str:\n            raise self.DataTypeException(\"Invalid data type\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that uses a custom exception for handling incorrect data types.\n\n### Input:\nNot applicable\n\n### Output:\nclass CustomExceptionHandling:\n    class DataTypeException(Exception):\n        def __init__(self, message):\n            super().__init__(message)\n\n    def check(self, value):\n        if type(value) != str:\n            raise self.DataTypeException(\"Invalid data type\")"}
{"instruction":"Write a Python program to find the longest substring in a given string and print the substring and its length.","input":"string = \"This is the longest substring of this given string\"","output":"# Find the longest substring in a given string\n\ndef longest_substring(string): \n    substring = \"\" \n    longest = 0\n    start = 0\n  \n    # Iterate through the string and find the longest substring\n    for i in range(len(string)): \n        char = string[i] \n  \n        if char not in substring: \n            substring += char  \n        else: \n            if len(substring) > longest:\n                longest = len(substring) \n                longest_substring = substring\n            substring = string[start:i]     \n            start = i\n            substring += char \n          \n    # Check for the last substring \n    if len(substring) > longest: \n        longest = len(substring) \n        longest_substring = substring \n      \n    print (\"The longest substring is {} and its length is {}.\".format(longest_substring, longest))\n  \n# Driver code \nstring = \"This is the longest substring of this given string\"\nlongest_substring(string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the longest substring in a given string and print the substring and its length.\n\n### Input:\nstring = \"This is the longest substring of this given string\"\n\n### Output:\n# Find the longest substring in a given string\n\ndef longest_substring(string): \n    substring = \"\" \n    longest = 0\n    start = 0\n  \n    # Iterate through the string and find the longest substring\n    for i in range(len(string)): \n        char = string[i] \n  \n        if char not in substring: \n            substring += char  \n        else: \n            if len(substring) > longest:\n                longest = len(substring) \n                longest_substring = substring\n            substring = string[start:i]     \n            start = i\n            substring += char \n          \n    # Check for the last substring \n    if len(substring) > longest: \n        longest = len(substring) \n        longest_substring = substring \n      \n    print (\"The longest substring is {} and its length is {}.\".format(longest_substring, longest))\n  \n# Driver code \nstring = \"This is the longest substring of this given string\"\nlongest_substring(string)"}
{"instruction":"Create an API for a movie ticket booking system that allows users to book tickets with specific seat numbers and payment methods.","input":"Not applicable","output":"import flask\nfrom flask import request, jsonify\n \napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n \n# Create some test data for our catalog in the form of a list of dictionaries.\nbookings = [\n    {'user_id': 1, 'movie_id': 1, 'movie_name':'Joker', 'seat_numbers':[1,2,3,4],'payment_method':'credit'},\n    {'user_id': 2, 'movie_id': 2, 'movie_name':'Hobbs and Shaw', 'seat_numbers':[3,4],'payment_method':'debit'},\n    {'user_id': 3, 'movie_id': 3, 'movie_name':'Toy Story 4', 'seat_numbers':[2],'payment_method':'cash'},\n]\n \n@app.route('\/', methods=['GET'])\ndef home():\n    return '''<h1>Movie Tickets Booking API<\/h1>\n<p>A prototype API for booking movie tickets.<\/p>'''\n \n@app.route('\/api\/bookings\/all', methods=['GET'])\ndef api_all():\n    return jsonify(bookings)\n \n@app.route('\/api\/bookings', methods=['GET'])\ndef api_id():\n    # Check if an ID was provided as part of the URL.\n    # If ID is provided, assign it to a variable.\n    # If no ID is provided, display an error in the browser.\n    if 'user_id' in request.args:\n        user_id = int(request.args['user_id'])\n    else:\n        return \"Error: No user_id field provided. Please specify an user_id.\"\n \n    # Create an empty list for our results\n    results = []\n \n    # Loop through the data and match results that fit the requested ID.\n    # IDs are unique, but other fields might return many results\n    for booking in bookings:\n        if booking['user_id'] == user_id:\n            results.append(booking)\n \n    # Use the jsonify function from Flask to convert our list of\n    # Python dictionaries to the JSON format.\n    return jsonify(results)\n\napp.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API for a movie ticket booking system that allows users to book tickets with specific seat numbers and payment methods.\n\n### Input:\nNot applicable\n\n### Output:\nimport flask\nfrom flask import request, jsonify\n \napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n \n# Create some test data for our catalog in the form of a list of dictionaries.\nbookings = [\n    {'user_id': 1, 'movie_id': 1, 'movie_name':'Joker', 'seat_numbers':[1,2,3,4],'payment_method':'credit'},\n    {'user_id': 2, 'movie_id': 2, 'movie_name':'Hobbs and Shaw', 'seat_numbers':[3,4],'payment_method':'debit'},\n    {'user_id': 3, 'movie_id': 3, 'movie_name':'Toy Story 4', 'seat_numbers':[2],'payment_method':'cash'},\n]\n \n@app.route('\/', methods=['GET'])\ndef home():\n    return '''<h1>Movie Tickets Booking API<\/h1>\n<p>A prototype API for booking movie tickets.<\/p>'''\n \n@app.route('\/api\/bookings\/all', methods=['GET'])\ndef api_all():\n    return jsonify(bookings)\n \n@app.route('\/api\/bookings', methods=['GET'])\ndef api_id():\n    # Check if an ID was provided as part of the URL.\n    # If ID is provided, assign it to a variable.\n    # If no ID is provided, display an error in the browser.\n    if 'user_id' in request.args:\n        user_id = int(request.args['user_id'])\n    else:\n        return \"Error: No user_id field provided. Please specify an user_id.\"\n \n    # Create an empty list for our results\n    results = []\n \n    # Loop through the data and match results that fit the requested ID.\n    # IDs are unique, but other fields might return many results\n    for booking in bookings:\n        if booking['user_id'] == user_id:\n            results.append(booking)\n \n    # Use the jsonify function from Flask to convert our list of\n    # Python dictionaries to the JSON format.\n    return jsonify(results)\n\napp.run()"}
{"instruction":"Come up with a correct function to calculate the length of a linked list in Python","input":"","output":"# Python Program to Calculate the Length of a Linked List \n  \nclass Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n    def __init__(self):  \n        self.head = None\n  \n    def lengthLinkedList(self): \n        curr = self.head \n        length = 0 \n          \n        while curr != None: \n            length += 1\n            curr = curr.next\n          \n        return length\n\nif __name__ == '__main__': \n    llist = LinkedList() \n    llist.head = Node(1) \n    second = Node(2) \n    third = Node(3) \n  \n    llist.head.next = second\n    second.next = third\n  \n    print(\"Length of Linked List: \" + str(llist.lengthLinkedList()))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a correct function to calculate the length of a linked list in Python\n\n### Input:\n\n\n### Output:\n# Python Program to Calculate the Length of a Linked List \n  \nclass Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n    def __init__(self):  \n        self.head = None\n  \n    def lengthLinkedList(self): \n        curr = self.head \n        length = 0 \n          \n        while curr != None: \n            length += 1\n            curr = curr.next\n          \n        return length\n\nif __name__ == '__main__': \n    llist = LinkedList() \n    llist.head = Node(1) \n    second = Node(2) \n    third = Node(3) \n  \n    llist.head.next = second\n    second.next = third\n  \n    print(\"Length of Linked List: \" + str(llist.lengthLinkedList()))"}
{"instruction":"Generate a program in Python to classify a series of numbers into even or odd.","input":"[4, 7, 9, 11, 12]","output":"def classify_numbers(nums):\n    for num in nums:\n        if (num % 2) == 0:\n            print(str(num) + \" is even\")\n        else:\n            print(str(num) + \" is odd\")\n\nnums = [4, 7, 9, 11, 12]\nclassify_numbers(nums)\n\n# Output:\n# 4 is even\n# 7 is odd\n# 9 is odd\n# 11 is odd\n# 12 is even","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to classify a series of numbers into even or odd.\n\n### Input:\n[4, 7, 9, 11, 12]\n\n### Output:\ndef classify_numbers(nums):\n    for num in nums:\n        if (num % 2) == 0:\n            print(str(num) + \" is even\")\n        else:\n            print(str(num) + \" is odd\")\n\nnums = [4, 7, 9, 11, 12]\nclassify_numbers(nums)\n\n# Output:\n# 4 is even\n# 7 is odd\n# 9 is odd\n# 11 is odd\n# 12 is even"}
{"instruction":"Develop a Python script to scrape and store data from a specified website.","input":"","output":"\"\"\"\nDevelop a python script to scrape and store data from a specified website.\n\"\"\"\n\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\n# specify website URL\nurl = '<website url>'\n\n# get page content\npage = requests.get(url).text\n\n# parse the page for data\nsoup = BeautifulSoup(page, 'html.parser')\n\n# find data element in page\ndata_elements = soup.find_all('<data>')\n\n# extract data from element and store in a list\ndata_list = []\nfor elem in data_elements:\n    data_list.append(elem.text)\n\n# create dataframe with data and store in csv file\ndf = pd.DataFrame(data_list)\ndf.to_csv('data.csv')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to scrape and store data from a specified website.\n\n### Input:\n\n\n### Output:\n\"\"\"\nDevelop a python script to scrape and store data from a specified website.\n\"\"\"\n\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\n# specify website URL\nurl = '<website url>'\n\n# get page content\npage = requests.get(url).text\n\n# parse the page for data\nsoup = BeautifulSoup(page, 'html.parser')\n\n# find data element in page\ndata_elements = soup.find_all('<data>')\n\n# extract data from element and store in a list\ndata_list = []\nfor elem in data_elements:\n    data_list.append(elem.text)\n\n# create dataframe with data and store in csv file\ndf = pd.DataFrame(data_list)\ndf.to_csv('data.csv')"}
{"instruction":"Construct a class in Python that will represent a shopping cart. The class should contain methods for making a purchase, adding products to the cart, and calculating the total price.","input":"products = [\n { 'name': 'Chocolate', 'price': 6.00 },\n { 'name': 'Milk', 'price': 3.00 },\n { 'name': 'Cheese', 'price': 12.00 },\n]","output":"class ShoppingCart:\n def __init__(self, products):\n self.products = products\n self.total_price = 0\n\n def add_product(self, product):\n self.products.append(product)\n\n def calculate_total_price(self):\n self.total_price = 0\n for product in self.products:\n self.total_price += product['price']\n return self.total_price\n\n def make_purchase(self):\n self.total_price = self.calculate_total_price()\n print('You purchased {} items with a total price of {}'.format(len(self.products), self.total_price))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a class in Python that will represent a shopping cart. The class should contain methods for making a purchase, adding products to the cart, and calculating the total price.\n\n### Input:\nproducts = [\n { 'name': 'Chocolate', 'price': 6.00 },\n { 'name': 'Milk', 'price': 3.00 },\n { 'name': 'Cheese', 'price': 12.00 },\n]\n\n### Output:\nclass ShoppingCart:\n def __init__(self, products):\n self.products = products\n self.total_price = 0\n\n def add_product(self, product):\n self.products.append(product)\n\n def calculate_total_price(self):\n self.total_price = 0\n for product in self.products:\n self.total_price += product['price']\n return self.total_price\n\n def make_purchase(self):\n self.total_price = self.calculate_total_price()\n print('You purchased {} items with a total price of {}'.format(len(self.products), self.total_price))"}
{"instruction":"Design a Python program to convert minutes to hours and minutes.","input":"Total minutes = 150","output":"def convert_minutes(minutes):\n    hours = minutes \/\/ 60\n    remaining_minutes = minutes % 60\n    return hours, remaining_minutes\n\nhours, minutes = convert_minutes(150)\nprint(hours, minutes)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to convert minutes to hours and minutes.\n\n### Input:\nTotal minutes = 150\n\n### Output:\ndef convert_minutes(minutes):\n    hours = minutes \/\/ 60\n    remaining_minutes = minutes % 60\n    return hours, remaining_minutes\n\nhours, minutes = convert_minutes(150)\nprint(hours, minutes)"}
{"instruction":"Write a Python program to calculate the maximum profit for a given stock over a given time period.","input":"The data consists of 7 days of stock data including an opening and closing price for each day.\n\n[9, 11, 8, 12, 10, 15, 8]","output":"def max_profit(stock):\n  current_max, max_profit = 0, 0\n  for i in range(1, len(stock)):\n    current_max = max(0, current_max + stock[i] - stock[i - 1])\n    max_profit = max(current_max, max_profit)\n  return max_profit\n\nprofit = max_profit([9, 11, 8, 12, 10, 15, 8])\nprint(f\"The maximum profit is: {profit}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the maximum profit for a given stock over a given time period.\n\n### Input:\nThe data consists of 7 days of stock data including an opening and closing price for each day.\n\n[9, 11, 8, 12, 10, 15, 8]\n\n### Output:\ndef max_profit(stock):\n  current_max, max_profit = 0, 0\n  for i in range(1, len(stock)):\n    current_max = max(0, current_max + stock[i] - stock[i - 1])\n    max_profit = max(current_max, max_profit)\n  return max_profit\n\nprofit = max_profit([9, 11, 8, 12, 10, 15, 8])\nprint(f\"The maximum profit is: {profit}\")"}
{"instruction":"Generate a method in Python that takes an array of strings and selects strings that contain more than 6 characters.","input":"[\"apple\", \"banana\", \"grape\", \"strawberry\", \"mango\"]","output":"def filter_long_words(words):\n    return [word for word in words if len(word) > 6]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a method in Python that takes an array of strings and selects strings that contain more than 6 characters.\n\n### Input:\n[\"apple\", \"banana\", \"grape\", \"strawberry\", \"mango\"]\n\n### Output:\ndef filter_long_words(words):\n    return [word for word in words if len(word) > 6]"}
{"instruction":"Create a Python script to generate random numbers with using a certain range.","input":"Minimum = 5, Maximum = 15","output":"import random\n\nmin_n = 5\nmax_n = 15\n\ndef random_number_generator(min_n, max_n):\n  return random.randint(min_n, max_n)\n\nfor num in range(0, 10):\n    print (random_number_generator(min_n, max_n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate random numbers with using a certain range.\n\n### Input:\nMinimum = 5, Maximum = 15\n\n### Output:\nimport random\n\nmin_n = 5\nmax_n = 15\n\ndef random_number_generator(min_n, max_n):\n  return random.randint(min_n, max_n)\n\nfor num in range(0, 10):\n    print (random_number_generator(min_n, max_n))"}
{"instruction":"Implement quicksort in Python.","input":"Not applicable","output":"def quicksort(arr):\n     if len(arr) < 2:\n         return arr\n\n     pivot = arr[0]\n\n     less_than_pivot = [x for x in arr[1:] if x <= pivot]\n     greater_than_pivot = [x for x in arr[1:] if x > pivot]\n\n     return quicksort(less_than_pivot) + [pivot] + quicksort(greater_than_pivot)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement quicksort in Python.\n\n### Input:\nNot applicable\n\n### Output:\ndef quicksort(arr):\n     if len(arr) < 2:\n         return arr\n\n     pivot = arr[0]\n\n     less_than_pivot = [x for x in arr[1:] if x <= pivot]\n     greater_than_pivot = [x for x in arr[1:] if x > pivot]\n\n     return quicksort(less_than_pivot) + [pivot] + quicksort(greater_than_pivot)"}
{"instruction":"This code defines a Python class called \"DescribeNotificationItemsAction\" that inherits from \"BaseAction\". To use this class, import it from the \"qingcloud.cli.iaas_client.actions.base\" module. The class has a class variable called \"action\" set to the string \"DescribeNotificationItems\", a class variable called \"command\" set to the string \"describe-notification-items\", and a class variable called \"usage\" set to a string that describes how to use the command.\n\nTo add command line arguments to the command, call the \"add_ext_arguments\" class method and pass in a parser object. This method adds three optional arguments to the parser: \"notification-items\", \"notification-list\", and \"notification-item-type\". These arguments correspond to the \"notification_items\", \"notification_list\", and \"notification_item_type\" keys in the directive dictionary.\n\nTo build a directive dictionary from the command line arguments, call the \"build_directive\" class method and pass in the parsed options object. This method returns a dictionary containing the \"notification_items\", \"notification_list\", and \"notification_item_type\" keys with values taken from the parsed options object.","input":"","output":"# =========================================================================\n# Copyright 2012-present Yunify, Inc.\n# -------------------------------------------------------------------------\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this work except in compliance with the License.\n# You may obtain a copy of the License in the LICENSE file, or at:\n#\n#  http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# =========================================================================\nfrom qingcloud.cli.iaas_client.actions.base import BaseAction\n\n\nclass DescribeNotificationItemsAction(BaseAction):\n\n    action = 'DescribeNotificationItems'\n    command = 'describe-notification-items'\n    usage = '%(prog)s [-i --notification_items...] [-f <conf_file>]'\n\n    @classmethod\n    def add_ext_arguments(cls, parser):\n        parser.add_argument('-i', '--notification-items', dest='notification_items',\n                            action='store', type=str, default=None,\n                            help='An array including IDs of notification items.')\n\n        parser.add_argument('-l', '--notification-list', dest='notification_list',\n                            action='store', type=str, default=None,\n                            help='The ID of notification list.')\n\n        parser.add_argument('-t', '--notification-item-type', dest='notification_item_type',\n                            action='store', type=str, default=None,\n                            help='The type of notification item, including email, phone and webhook.')\n\n    @classmethod\n    def build_directive(cls, options):\n        directive = {\n            \"notification_items\": options.notification_items,\n            \"notification_list\": options.notification_list,\n            \"notification_item_type\": options.notification_item_type\n        }\n\n        return directive\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code defines a Python class called \"DescribeNotificationItemsAction\" that inherits from \"BaseAction\". To use this class, import it from the \"qingcloud.cli.iaas_client.actions.base\" module. The class has a class variable called \"action\" set to the string \"DescribeNotificationItems\", a class variable called \"command\" set to the string \"describe-notification-items\", and a class variable called \"usage\" set to a string that describes how to use the command.\n\nTo add command line arguments to the command, call the \"add_ext_arguments\" class method and pass in a parser object. This method adds three optional arguments to the parser: \"notification-items\", \"notification-list\", and \"notification-item-type\". These arguments correspond to the \"notification_items\", \"notification_list\", and \"notification_item_type\" keys in the directive dictionary.\n\nTo build a directive dictionary from the command line arguments, call the \"build_directive\" class method and pass in the parsed options object. This method returns a dictionary containing the \"notification_items\", \"notification_list\", and \"notification_item_type\" keys with values taken from the parsed options object.\n\n### Input:\n\n\n### Output:\n# =========================================================================\n# Copyright 2012-present Yunify, Inc.\n# -------------------------------------------------------------------------\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this work except in compliance with the License.\n# You may obtain a copy of the License in the LICENSE file, or at:\n#\n#  http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# =========================================================================\nfrom qingcloud.cli.iaas_client.actions.base import BaseAction\n\n\nclass DescribeNotificationItemsAction(BaseAction):\n\n    action = 'DescribeNotificationItems'\n    command = 'describe-notification-items'\n    usage = '%(prog)s [-i --notification_items...] [-f <conf_file>]'\n\n    @classmethod\n    def add_ext_arguments(cls, parser):\n        parser.add_argument('-i', '--notification-items', dest='notification_items',\n                            action='store', type=str, default=None,\n                            help='An array including IDs of notification items.')\n\n        parser.add_argument('-l', '--notification-list', dest='notification_list',\n                            action='store', type=str, default=None,\n                            help='The ID of notification list.')\n\n        parser.add_argument('-t', '--notification-item-type', dest='notification_item_type',\n                            action='store', type=str, default=None,\n                            help='The type of notification item, including email, phone and webhook.')\n\n    @classmethod\n    def build_directive(cls, options):\n        directive = {\n            \"notification_items\": options.notification_items,\n            \"notification_list\": options.notification_list,\n            \"notification_item_type\": options.notification_item_type\n        }\n\n        return directive\n"}
{"instruction":"Build a reinforcement learning agent in Python using OpenAI gym that can solve the CartPole environment.","input":"Not applicable","output":"import gym\nimport numpy as np\n   \n# Set up the environment\nenv = gym.make('CartPole-v1')\nenv.reset()\n\n# Define the hyperparameters\nlearning_rate = 0.01\ndiscount = 0.95\nepisodes = 5000\n\n# Discretize the state space of the environment\nNUMBER_OF_BUCKETS = (1, 1, 6, 3)  # (x, x', theta, theta')\nstate_bounds = list(zip(env.observation_space.low, env.observation_space.high))\nstate_bounds[1] = [-0.5, 0.5] # Limit x velocity as it only goes from -0.5 to 0.5\nstate_bounds[3] = [-math.radians(50), math.radians(50)] # Limit theta as it goes from -50 to 50 degrees\n\n# Create the Q-table\nq_table = np.zeros(NUMBER_OF_BUCKETS + (env.action_space.n,))\n  \n# Train the agent\nfor episode in range(episodes):\n done = False\n state = env.reset()\n\n # Discretize the state\n state_discrete = [np.digitize(s, bins=bounds) for s, bounds in zip(state, state_bounds)]\n \n # Repeat until the episode is done\n while not done:\n # Choose an action\n action = np.argmax(q_table[state_discrete])\n\n# Perform the action\n state, reward, done, _ = env.step(action)\n  \n# Discretize the new state\n state_discrete = [np.digitize(s, bins=bounds) for s, bounds in zip(state, state_bounds)]\n\n# Update the Q-table\n q_table[state_discrete + (action,)] = reward + discount * np.max(q_table[state_discrete])\n\n# Print out the Q-table\nprint(q_table)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a reinforcement learning agent in Python using OpenAI gym that can solve the CartPole environment.\n\n### Input:\nNot applicable\n\n### Output:\nimport gym\nimport numpy as np\n   \n# Set up the environment\nenv = gym.make('CartPole-v1')\nenv.reset()\n\n# Define the hyperparameters\nlearning_rate = 0.01\ndiscount = 0.95\nepisodes = 5000\n\n# Discretize the state space of the environment\nNUMBER_OF_BUCKETS = (1, 1, 6, 3)  # (x, x', theta, theta')\nstate_bounds = list(zip(env.observation_space.low, env.observation_space.high))\nstate_bounds[1] = [-0.5, 0.5] # Limit x velocity as it only goes from -0.5 to 0.5\nstate_bounds[3] = [-math.radians(50), math.radians(50)] # Limit theta as it goes from -50 to 50 degrees\n\n# Create the Q-table\nq_table = np.zeros(NUMBER_OF_BUCKETS + (env.action_space.n,))\n  \n# Train the agent\nfor episode in range(episodes):\n done = False\n state = env.reset()\n\n # Discretize the state\n state_discrete = [np.digitize(s, bins=bounds) for s, bounds in zip(state, state_bounds)]\n \n # Repeat until the episode is done\n while not done:\n # Choose an action\n action = np.argmax(q_table[state_discrete])\n\n# Perform the action\n state, reward, done, _ = env.step(action)\n  \n# Discretize the new state\n state_discrete = [np.digitize(s, bins=bounds) for s, bounds in zip(state, state_bounds)]\n\n# Update the Q-table\n q_table[state_discrete + (action,)] = reward + discount * np.max(q_table[state_discrete])\n\n# Print out the Q-table\nprint(q_table)"}
{"instruction":"Create a Python script to search for a (partial) substring in a string.","input":"","output":"def find_substring(string, substring):\n  if substring in string:\n    index = string.find(substring)\n    return \"Substring found at index \" + str(index)\n  else:\n    return \"Substring not found\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to search for a (partial) substring in a string.\n\n### Input:\n\n\n### Output:\ndef find_substring(string, substring):\n  if substring in string:\n    index = string.find(substring)\n    return \"Substring found at index \" + str(index)\n  else:\n    return \"Substring not found\""}
{"instruction":"Generate a generic sorting algorithm in Python.","input":"","output":"def sort(data):\n    \"\"\"Generic sorting algorithm.\"\"\"\n    if len(data) == 0:\n        return []\n    else:\n        pivot = data[0]\n        less = [i for i in data[1:] if i <= pivot]\n        greater = [i for i in data[1:] if i > pivot]\n        return sort(less) + [pivot] + sort(greater)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a generic sorting algorithm in Python.\n\n### Input:\n\n\n### Output:\ndef sort(data):\n    \"\"\"Generic sorting algorithm.\"\"\"\n    if len(data) == 0:\n        return []\n    else:\n        pivot = data[0]\n        less = [i for i in data[1:] if i <= pivot]\n        greater = [i for i in data[1:] if i > pivot]\n        return sort(less) + [pivot] + sort(greater)"}
{"instruction":"Generate a Python program to delete the element at a given index from the given array.","input":"[1,2,3,4,5], index=3","output":"def delete_element_at_index(arr, index):\n    if index >= len(arr):\n        raise Exception('index out of range')\n    \n    # Delete the element at the index\n    del arr[index]\n\n# Example array and index\nmy_arr = [1,2,3,4,5];\nindex = 3;\n\n# Call the function\ndelete_element_at_index(my_arr, index)\n\n# Print the array\nprint(my_arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to delete the element at a given index from the given array.\n\n### Input:\n[1,2,3,4,5], index=3\n\n### Output:\ndef delete_element_at_index(arr, index):\n    if index >= len(arr):\n        raise Exception('index out of range')\n    \n    # Delete the element at the index\n    del arr[index]\n\n# Example array and index\nmy_arr = [1,2,3,4,5];\nindex = 3;\n\n# Call the function\ndelete_element_at_index(my_arr, index)\n\n# Print the array\nprint(my_arr)"}
{"instruction":"Create a python class to encapsulate stacks.","input":"","output":"class Stack:\n    def __init__(self):\n        # Create an empty stack\n        self.stack = []\n    \n    def push(self, item):\n        # Push an item onto the top of the stack\n        self.stack.append(item)\n    \n    def pop(self):\n        # Pop an item off the top of the stack\n        return self.stack.pop()\n    \n    def peek(self):\n        # Get the top item off the stack\n        return self.stack[-1]\n    \n    def is_empty(self):\n        # Return true if the stack is empty\n        return not self.stack\n    \n    def get_size(self):\n        # Return the size of the stack\n        return len(self.stack)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python class to encapsulate stacks.\n\n### Input:\n\n\n### Output:\nclass Stack:\n    def __init__(self):\n        # Create an empty stack\n        self.stack = []\n    \n    def push(self, item):\n        # Push an item onto the top of the stack\n        self.stack.append(item)\n    \n    def pop(self):\n        # Pop an item off the top of the stack\n        return self.stack.pop()\n    \n    def peek(self):\n        # Get the top item off the stack\n        return self.stack[-1]\n    \n    def is_empty(self):\n        # Return true if the stack is empty\n        return not self.stack\n    \n    def get_size(self):\n        # Return the size of the stack\n        return len(self.stack)"}
{"instruction":"Develop a classifier in python to differentiate between cats and dogs","input":"","output":"import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\n\n# create model\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size = (3, 3), activation='relu', input_shape=(224, 224, 3)))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax'))\n\n# compile model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a classifier in python to differentiate between cats and dogs\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\n\n# create model\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size = (3, 3), activation='relu', input_shape=(224, 224, 3)))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax'))\n\n# compile model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])"}
{"instruction":"Develop a Python program to count the frequency of each word in a given string.","input":"string = \"This is a string\"","output":"def countFreq(str): \n      \n    # break the string into words  \n    str = str.split(\" \")  \n      \n    # Count each word using Dictionary  \n    freq = {} \n    for word in str: \n        if word in freq: \n            freq[word] += 1\n        else: \n            freq[word] = 1\n    return freq","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to count the frequency of each word in a given string.\n\n### Input:\nstring = \"This is a string\"\n\n### Output:\ndef countFreq(str): \n      \n    # break the string into words  \n    str = str.split(\" \")  \n      \n    # Count each word using Dictionary  \n    freq = {} \n    for word in str: \n        if word in freq: \n            freq[word] += 1\n        else: \n            freq[word] = 1\n    return freq"}
{"instruction":"Design a natural language processing model in Python to find  patterns in text data.","input":"","output":"import re\nfrom nltk import tokenize\n\ninput_text = 'string with several words'\n\ntokens = tokenize.word_tokenize(input_text)\nfor token in tokens:\n  if re.search('\\w+', token):\n      print(token)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a natural language processing model in Python to find  patterns in text data.\n\n### Input:\n\n\n### Output:\nimport re\nfrom nltk import tokenize\n\ninput_text = 'string with several words'\n\ntokens = tokenize.word_tokenize(input_text)\nfor token in tokens:\n  if re.search('\\w+', token):\n      print(token)"}
{"instruction":"Create a sorting algorithm in Python that uses Quick Sort.","input":"# unsorted list\narr = [10, 7, 8, 9, 1, 5]","output":"# function to perform quick sort\ndef QuickSort(arr):\n    # base case \n    if len(arr) <= 1:\n        return arr\n    \n    # Select pivot\n    pivot = arr[len(arr) \/\/ 2]\n    # partition the array\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    \n    # recursive call\n    return QuickSort(left) + middle + QuickSort(right)\n\n# unsorted list\narr = [10, 7, 8, 9, 1, 5]\n# Print the sorted array\nprint(\"Sorted array is: \", QuickSort(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sorting algorithm in Python that uses Quick Sort.\n\n### Input:\n# unsorted list\narr = [10, 7, 8, 9, 1, 5]\n\n### Output:\n# function to perform quick sort\ndef QuickSort(arr):\n    # base case \n    if len(arr) <= 1:\n        return arr\n    \n    # Select pivot\n    pivot = arr[len(arr) \/\/ 2]\n    # partition the array\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    \n    # recursive call\n    return QuickSort(left) + middle + QuickSort(right)\n\n# unsorted list\narr = [10, 7, 8, 9, 1, 5]\n# Print the sorted array\nprint(\"Sorted array is: \", QuickSort(arr))"}
{"instruction":"Create a Python method which takes a String and two integers as parameters, and returns the String with the characters between the integers reversed.","input":"String: \"Hello world\"\n1st Integer: 0\n2nd Integer: 5","output":"def reverse_substring(sentence, start, end):\n    reversed = sentence[end:start-1:-1]\n    return sentence[:start] + reversed + sentence[end+1:]\n\nresult = reverse_substring(\"Hello world\", 0, 5)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python method which takes a String and two integers as parameters, and returns the String with the characters between the integers reversed.\n\n### Input:\nString: \"Hello world\"\n1st Integer: 0\n2nd Integer: 5\n\n### Output:\ndef reverse_substring(sentence, start, end):\n    reversed = sentence[end:start-1:-1]\n    return sentence[:start] + reversed + sentence[end+1:]\n\nresult = reverse_substring(\"Hello world\", 0, 5)\nprint(result)"}
{"instruction":"Come up with a complex problem written in Python to be solved in a parallel fashion.","input":"","output":"import multiprocessing as mp\nfrom multiprocessing import Pool\n\n# Main function to process data\ndef process_data(data):\n    # Perform complex processing on data\n    processed_data = complex_processing(data)\n    return process_data \n\n# Function to be called in parallel\ndef parallel_fn(data):\n    # Split data\n    data_slice = np.array_split(data, num_procs)\n    # Define a pool of process\n    pool = Pool(processes=num_procs)\n    # Execute process_data in parallel\n    processed_data = pool.map(process_data, data_slice)\n    # Join list of results\n    results = np.concatenate(processed_data)\n    # Close the pool\n    pool.close()\n    # Return results\n    return results","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a complex problem written in Python to be solved in a parallel fashion.\n\n### Input:\n\n\n### Output:\nimport multiprocessing as mp\nfrom multiprocessing import Pool\n\n# Main function to process data\ndef process_data(data):\n    # Perform complex processing on data\n    processed_data = complex_processing(data)\n    return process_data \n\n# Function to be called in parallel\ndef parallel_fn(data):\n    # Split data\n    data_slice = np.array_split(data, num_procs)\n    # Define a pool of process\n    pool = Pool(processes=num_procs)\n    # Execute process_data in parallel\n    processed_data = pool.map(process_data, data_slice)\n    # Join list of results\n    results = np.concatenate(processed_data)\n    # Close the pool\n    pool.close()\n    # Return results\n    return results"}
{"instruction":"Can you write a python program to identify the last index of a given element in a list?","input":"The list [2, 5, 9, 2, 4] and the element 2","output":"# Define the list\nlist_ = [2, 5, 9, 2, 4]\n  \n# Find the last index of element 2\nlast_index = len(list_) - list_[::-1].index(2) - 1\n  \n# Print the result\nprint(last_index)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you write a python program to identify the last index of a given element in a list?\n\n### Input:\nThe list [2, 5, 9, 2, 4] and the element 2\n\n### Output:\n# Define the list\nlist_ = [2, 5, 9, 2, 4]\n  \n# Find the last index of element 2\nlast_index = len(list_) - list_[::-1].index(2) - 1\n  \n# Print the result\nprint(last_index)"}
{"instruction":"Can you write a program in Python to remove the duplicate elements in a list?","input":"[5, 9, 2, 4, 5, 9, 2]","output":"def remove_duplicates(arr):\n    new_arr = []\n    for item in arr:\n        if item not in new_arr:\n            new_arr.append(item)\n    return new_arr\n\nmy_list = [5, 9, 2, 4, 5, 9, 2]\nprint(remove_duplicates(my_list))\n# Output: [5, 9, 2, 4]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you write a program in Python to remove the duplicate elements in a list?\n\n### Input:\n[5, 9, 2, 4, 5, 9, 2]\n\n### Output:\ndef remove_duplicates(arr):\n    new_arr = []\n    for item in arr:\n        if item not in new_arr:\n            new_arr.append(item)\n    return new_arr\n\nmy_list = [5, 9, 2, 4, 5, 9, 2]\nprint(remove_duplicates(my_list))\n# Output: [5, 9, 2, 4]"}
{"instruction":"Convert the following Python code to equivalent JavaScript code.","input":"def add_two_numbers(a, b):\n    return a + b","output":"function add_two_numbers(a, b) {\n  return a + b;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following Python code to equivalent JavaScript code.\n\n### Input:\ndef add_two_numbers(a, b):\n    return a + b\n\n### Output:\nfunction add_two_numbers(a, b) {\n  return a + b;\n}"}
{"instruction":"Create a Python function to convert a temperature from Fahrenheit to Celsius.","input":"","output":"def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5.0\/9.0\n    return celsius","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to convert a temperature from Fahrenheit to Celsius.\n\n### Input:\n\n\n### Output:\ndef fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5.0\/9.0\n    return celsius"}
{"instruction":"Write a python program to generate Fibonacci series up to a given number.","input":"n = 10","output":"\"\"\"\nWrite a python program to generate Fibonacci series up to a given number \n\"\"\"\n\n# Function to generate fibonacci series \ndef generate_fibonacci(n): \n    # Initialize a list\n    fibonacci_list = [0,1] \n      \n    # Generate the fibonacci series up to n \n    for i in range(2,n): \n        fibonacci_list.append(fibonacci_list[i-1] + fibonacci_list[i-2]) \n\n# Print the result \n    print(fibonacci_list) \n\n# Driver code \nif __name__ == '__main__':\n    n = 10\n    generate_fibonacci(n)  # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to generate Fibonacci series up to a given number.\n\n### Input:\nn = 10\n\n### Output:\n\"\"\"\nWrite a python program to generate Fibonacci series up to a given number \n\"\"\"\n\n# Function to generate fibonacci series \ndef generate_fibonacci(n): \n    # Initialize a list\n    fibonacci_list = [0,1] \n      \n    # Generate the fibonacci series up to n \n    for i in range(2,n): \n        fibonacci_list.append(fibonacci_list[i-1] + fibonacci_list[i-2]) \n\n# Print the result \n    print(fibonacci_list) \n\n# Driver code \nif __name__ == '__main__':\n    n = 10\n    generate_fibonacci(n)  # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"}
{"instruction":"Write a Python function that creates a JSON response with fields for score and data. The data field should contain a message that varies depending on the score value. If the score is 0, the message should state \"Try again\". If the score is 1, the message should state \"Well done\".","input":"score = 0","output":"def create_response(score):\n if score == 0:\n  message = \"Try again\"  \n elif score == 1:\n  message = \"Well done\"\n else:\n  message = \"\"\n \n return {\"score\": score, \"message\": message}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that creates a JSON response with fields for score and data. The data field should contain a message that varies depending on the score value. If the score is 0, the message should state \"Try again\". If the score is 1, the message should state \"Well done\".\n\n### Input:\nscore = 0\n\n### Output:\ndef create_response(score):\n if score == 0:\n  message = \"Try again\"  \n elif score == 1:\n  message = \"Well done\"\n else:\n  message = \"\"\n \n return {\"score\": score, \"message\": message}"}
{"instruction":"Write a Python function that takes an array of integers and returns the sorted array with the most common element in the middle.","input":"[4, 5, 2, 5, 8, 5, 6, 5]","output":"def medianMostCommon(arr):\n  # Count the number of occurences of every element\n  counts = {}\n  for element in arr:\n    if element in counts:\n      counts[element] += 1\n    else:\n      counts[element] = 1\n  \n  # Find the most common element\n  most_common_element = None\n  max_count = 0\n  for element, count in counts.items():\n    if count > max_count:\n      most_common_element = element\n      max_count = count\n\n  # Sort the array\n  sorted_arr = sorted(arr)\n\n  # Find the index of the most common element\n  index = sorted_arr.index(most_common_element)\n\n  # Swap the most common element and the middle element in the array\n  mid = len(sorted_arr) \/\/ 2\n  sorted_arr[index] = sorted_arr[mid]\n  sorted_arr[mid] = most_common_element\n\n  return sorted_arr\n\narr = [4, 5, 2, 5, 8, 5, 6, 5]\nresult = medianMostCommon(arr)\nprint(result) # [4, 5, 5, 5, 5, 6, 8, 2]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes an array of integers and returns the sorted array with the most common element in the middle.\n\n### Input:\n[4, 5, 2, 5, 8, 5, 6, 5]\n\n### Output:\ndef medianMostCommon(arr):\n  # Count the number of occurences of every element\n  counts = {}\n  for element in arr:\n    if element in counts:\n      counts[element] += 1\n    else:\n      counts[element] = 1\n  \n  # Find the most common element\n  most_common_element = None\n  max_count = 0\n  for element, count in counts.items():\n    if count > max_count:\n      most_common_element = element\n      max_count = count\n\n  # Sort the array\n  sorted_arr = sorted(arr)\n\n  # Find the index of the most common element\n  index = sorted_arr.index(most_common_element)\n\n  # Swap the most common element and the middle element in the array\n  mid = len(sorted_arr) \/\/ 2\n  sorted_arr[index] = sorted_arr[mid]\n  sorted_arr[mid] = most_common_element\n\n  return sorted_arr\n\narr = [4, 5, 2, 5, 8, 5, 6, 5]\nresult = medianMostCommon(arr)\nprint(result) # [4, 5, 5, 5, 5, 6, 8, 2]"}
{"instruction":"Create a python script that evaluates a binary expression.","input":"Expr: 1 + 0","output":"def evalBinaryExpr(expr): \n    return eval(expr) \n  \nprint(evalBinaryExpr(\"1 + 0\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script that evaluates a binary expression.\n\n### Input:\nExpr: 1 + 0\n\n### Output:\ndef evalBinaryExpr(expr): \n    return eval(expr) \n  \nprint(evalBinaryExpr(\"1 + 0\"))"}
{"instruction":"Create a Python program to compare two strings.","input":"","output":"def compare_strings(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to compare two strings.\n\n### Input:\n\n\n### Output:\ndef compare_strings(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            return False\n    return True"}
{"instruction":"Write an algorithm in Python to find the number of inversions in an array.","input":"","output":"def countInversions(arr):\n\t# To store counts of inversions\n\tcount = 0\n\n\t# Iterating from first element\n\tfor i in range(len(arr)):\n\t\t# To find number of elements smaller than arr[i]\n\t\t# which are on right side of arr[i]\n\t\tfor j in range(i + 1, len(arr)):\n\t\t\tif arr[i] > arr[j]:\n\t\t\t\tcount += 1\n\treturn count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to find the number of inversions in an array.\n\n### Input:\n\n\n### Output:\ndef countInversions(arr):\n\t# To store counts of inversions\n\tcount = 0\n\n\t# Iterating from first element\n\tfor i in range(len(arr)):\n\t\t# To find number of elements smaller than arr[i]\n\t\t# which are on right side of arr[i]\n\t\tfor j in range(i + 1, len(arr)):\n\t\t\tif arr[i] > arr[j]:\n\t\t\t\tcount += 1\n\treturn count"}
{"instruction":"Construct a program in Python to compute the sum of square numbers in a given range, including the start and end numbers.","input":"Range: 10-20","output":"def sumOfRanges(start, end):\n sum = 0\n \n for i in range(start, end+1):\n sum += i*i\n \n return sum\n\nsumOfRanges(10,20) #673","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program in Python to compute the sum of square numbers in a given range, including the start and end numbers.\n\n### Input:\nRange: 10-20\n\n### Output:\ndef sumOfRanges(start, end):\n sum = 0\n \n for i in range(start, end+1):\n sum += i*i\n \n return sum\n\nsumOfRanges(10,20) #673"}
{"instruction":"Classify the following sentences as positive or negative using Python.","input":"Sentence: She is a great teacher","output":"def classifySentence(sentence):\n    #importing the necessary libraries\n    import nltk\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    \n    #Create a sentiment analyzer object\n    sid_obj = SentimentIntensityAnalyzer() \n    \n    #calling the polarity_scores method \n    sentiment_dict = sid_obj.polarity_scores(sentence) \n  \n    #decide sentiment as positive, negative, neutral or mixed\n    if sentiment_dict['compound'] >= 0.05 : \n        return \"Positive\"\n  \n    elif sentiment_dict['compound'] <= - 0.05 : \n        return \"Negative\"\n  \n    else : \n        return \"Neutral\"\n    \nresult = classifySentence(\"She is a great teacher\")\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nClassify the following sentences as positive or negative using Python.\n\n### Input:\nSentence: She is a great teacher\n\n### Output:\ndef classifySentence(sentence):\n    #importing the necessary libraries\n    import nltk\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    \n    #Create a sentiment analyzer object\n    sid_obj = SentimentIntensityAnalyzer() \n    \n    #calling the polarity_scores method \n    sentiment_dict = sid_obj.polarity_scores(sentence) \n  \n    #decide sentiment as positive, negative, neutral or mixed\n    if sentiment_dict['compound'] >= 0.05 : \n        return \"Positive\"\n  \n    elif sentiment_dict['compound'] <= - 0.05 : \n        return \"Negative\"\n  \n    else : \n        return \"Neutral\"\n    \nresult = classifySentence(\"She is a great teacher\")\nprint(result)"}
{"instruction":"Create an algorithm in Python that reads an array of integers and returns the maximum element.","input":"[1, 5, -3, 10]","output":"def findMaxElement(arr):\n  max_element = 0\n  for element in arr:\n    if element > max_element:\n      max_element = element\n  \n  return max_element\n\narr = [1, 5, -3, 10]\nmax_element = findMaxElement(arr)\nprint(max_element)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that reads an array of integers and returns the maximum element.\n\n### Input:\n[1, 5, -3, 10]\n\n### Output:\ndef findMaxElement(arr):\n  max_element = 0\n  for element in arr:\n    if element > max_element:\n      max_element = element\n  \n  return max_element\n\narr = [1, 5, -3, 10]\nmax_element = findMaxElement(arr)\nprint(max_element)"}
{"instruction":"Generate a Python function that reverses a given string, and test the function with an input of \"Hello\".","input":"\"Hello\"","output":"def reverse(string):\n    return string[::-1]\n\nprint(reverse('Hello')) #prints \"olleH\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that reverses a given string, and test the function with an input of \"Hello\".\n\n### Input:\n\"Hello\"\n\n### Output:\ndef reverse(string):\n    return string[::-1]\n\nprint(reverse('Hello')) #prints \"olleH\""}
{"instruction":"Create a function in Python that takes two strings as input, and generates a permutation of the second string that contains all characters of the first string.","input":"first_string = \u201cabc\u201d\nsecond_string = \u201cxyz\u201d","output":"def generate_permutation(first_string, second_string):\n permutation = \"\"\n for char in first_string:\n if char in second_string:\n permutation += char\n \n for char in second_string:\n if char not in first_string:\n permutation += char\n \n return permutation\n \nif __name__ == \"__main__\":\n first_string = \"abc\"\n second_string = \"xyz\"\n permutation = generate_permutation(first_string, second_string)\n print(\"Permutation of '{}' and '{}' is '{}'\".format(first_string, second_string, \npermutation))\n\n# Output: Permutation of 'abc' and 'xyz' is 'axbycz'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two strings as input, and generates a permutation of the second string that contains all characters of the first string.\n\n### Input:\nfirst_string = \u201cabc\u201d\nsecond_string = \u201cxyz\u201d\n\n### Output:\ndef generate_permutation(first_string, second_string):\n permutation = \"\"\n for char in first_string:\n if char in second_string:\n permutation += char\n \n for char in second_string:\n if char not in first_string:\n permutation += char\n \n return permutation\n \nif __name__ == \"__main__\":\n first_string = \"abc\"\n second_string = \"xyz\"\n permutation = generate_permutation(first_string, second_string)\n print(\"Permutation of '{}' and '{}' is '{}'\".format(first_string, second_string, \npermutation))\n\n# Output: Permutation of 'abc' and 'xyz' is 'axbycz'"}
{"instruction":"Find and fix a bug in this piece of Python code","input":"def sum_list(list_of_numbers):\n    # calculates the sum of a list of numbers\n    result = 0\n    for number in list_of_numbers:\n        result += number\n    return result","output":"def sum_list(list_of_numbers):\n    # calculates the sum of a list of numbers\n    result = 0\n    for number in list_of_numbers:\n        result += number\n    return int(result) # convert to an integer before returning the result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind and fix a bug in this piece of Python code\n\n### Input:\ndef sum_list(list_of_numbers):\n    # calculates the sum of a list of numbers\n    result = 0\n    for number in list_of_numbers:\n        result += number\n    return result\n\n### Output:\ndef sum_list(list_of_numbers):\n    # calculates the sum of a list of numbers\n    result = 0\n    for number in list_of_numbers:\n        result += number\n    return int(result) # convert to an integer before returning the result"}
{"instruction":"Critique the given code for best coding practices.","input":"def calculate_total_sum(list_num):\n    total_sum = 0\n    for num in list_num:\n        total_sum += num\n    return total_sum","output":"The code could improve by using the built-in sum() from the Python library. Also, you should use a more meaningful variable name instead of list_num to better explain the intent of the code. Lastly, you could use type hinting to specify the type of variables passed into the function.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCritique the given code for best coding practices.\n\n### Input:\ndef calculate_total_sum(list_num):\n    total_sum = 0\n    for num in list_num:\n        total_sum += num\n    return total_sum\n\n### Output:\nThe code could improve by using the built-in sum() from the Python library. Also, you should use a more meaningful variable name instead of list_num to better explain the intent of the code. Lastly, you could use type hinting to specify the type of variables passed into the function."}
{"instruction":"Convert the given string into a standard format in Python.","input":"String: \"My name is John Doe\"","output":"string = \"My name is John Doe\"\nstandard_string = string.title()\nprint(standard_string)\n#My Name Is John Doe","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the given string into a standard format in Python.\n\n### Input:\nString: \"My name is John Doe\"\n\n### Output:\nstring = \"My name is John Doe\"\nstandard_string = string.title()\nprint(standard_string)\n#My Name Is John Doe"}
{"instruction":"Write a Python function to compare two given lists and return a list containing only the common elements.","input":"list1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6]","output":"def common_elements(lst1, lst2):\n  return [element for element in lst1 if element in lst2]\n\nlist1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6]\ncommon_elements = common_elements(list1, list2)\n\nprint(\"Common elements:\", common_elements)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to compare two given lists and return a list containing only the common elements.\n\n### Input:\nlist1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6]\n\n### Output:\ndef common_elements(lst1, lst2):\n  return [element for element in lst1 if element in lst2]\n\nlist1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6]\ncommon_elements = common_elements(list1, list2)\n\nprint(\"Common elements:\", common_elements)"}
{"instruction":"Design a recommender system in Python that suggests similar items to a given item based on its attributes.","input":"A list of book objects with id, author, title, publisher, and reviews properties.","output":"def get_recommendations(books):\n  recommendations = []\n  for book in books:\n    # Mapping books to a vector for comparison\n    vector_book = [book['author'], book['title'], book['publisher']]\n    # Iterating through the list of books to check similarities\n    for other_book in books:\n      # Mapping other books in the list books to a vector for comparison\n      other_vector_book = [other_book['author'], other_book['title'], other_book['publisher']]\n      # Check similarity\n      if other_vector_book != vector_book and evaluate_similarity(vector_book, other_vector_book):\n        recommendations.append(other_book['id'])\n  return recommendations\n  \ndef evaluate_similarity(vector_book1, vector_book2):\n  # Perform algorithm for checking the similarity of two books\n  # e.g. Pearson correlation\n  return True # or False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a recommender system in Python that suggests similar items to a given item based on its attributes.\n\n### Input:\nA list of book objects with id, author, title, publisher, and reviews properties.\n\n### Output:\ndef get_recommendations(books):\n  recommendations = []\n  for book in books:\n    # Mapping books to a vector for comparison\n    vector_book = [book['author'], book['title'], book['publisher']]\n    # Iterating through the list of books to check similarities\n    for other_book in books:\n      # Mapping other books in the list books to a vector for comparison\n      other_vector_book = [other_book['author'], other_book['title'], other_book['publisher']]\n      # Check similarity\n      if other_vector_book != vector_book and evaluate_similarity(vector_book, other_vector_book):\n        recommendations.append(other_book['id'])\n  return recommendations\n  \ndef evaluate_similarity(vector_book1, vector_book2):\n  # Perform algorithm for checking the similarity of two books\n  # e.g. Pearson correlation\n  return True # or False"}
{"instruction":"Create a web server in Python.","input":"<no input>","output":"import http.server\nimport socketserver\n\nPORT = 8080\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"Server running at http:\/\/localhost:{}\/\".format(PORT))\n    httpd.serve_forever()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web server in Python.\n\n### Input:\n<no input>\n\n### Output:\nimport http.server\nimport socketserver\n\nPORT = 8080\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"Server running at http:\/\/localhost:{}\/\".format(PORT))\n    httpd.serve_forever()"}
{"instruction":"Write a Python program to create a class to represent a bank account and add two methods, deposit and withdrawal, to modify the account balance.","input":"Not applicable.","output":"class BankAccount:\n    \n    def __init__(self, name, balance=0.0):\n        self.name = name\n        self.balance = balance\n        \n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n    \n    def withdraw(self, amount):\n        if amount > self.balance:\n            raise RuntimeError('Amount greater than available balance.')\n        self.balance -= amount\n        return self.balance","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a class to represent a bank account and add two methods, deposit and withdrawal, to modify the account balance.\n\n### Input:\nNot applicable.\n\n### Output:\nclass BankAccount:\n    \n    def __init__(self, name, balance=0.0):\n        self.name = name\n        self.balance = balance\n        \n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n    \n    def withdraw(self, amount):\n        if amount > self.balance:\n            raise RuntimeError('Amount greater than available balance.')\n        self.balance -= amount\n        return self.balance"}
{"instruction":"Create a Python program to detect if the given number is a prime number or not.","input":"","output":"def is_prime(num):\n    # 1 is not a prime number \n    if num == 1:\n        return False\n  \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to detect if the given number is a prime number or not.\n\n### Input:\n\n\n### Output:\ndef is_prime(num):\n    # 1 is not a prime number \n    if num == 1:\n        return False\n  \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"}
{"instruction":"Write a Python program to join two given lists.","input":"list1 = [1, 2, 3] \nlist2 = [4, 5, 6]","output":"def join_lists(list1, list2):\n    return list1 + list2\n\nlist1 = [1, 2, 3] \nlist2 = [4, 5, 6]\n\njoined_list = join_lists(list1, list2)\nprint(joined_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to join two given lists.\n\n### Input:\nlist1 = [1, 2, 3] \nlist2 = [4, 5, 6]\n\n### Output:\ndef join_lists(list1, list2):\n    return list1 + list2\n\nlist1 = [1, 2, 3] \nlist2 = [4, 5, 6]\n\njoined_list = join_lists(list1, list2)\nprint(joined_list)"}
{"instruction":"Create a list in Python to store the first 10 numbers that are divisible by 4.","input":"","output":"divisible_by_four = [i for i in range(1,11) if i%4 == 0]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a list in Python to store the first 10 numbers that are divisible by 4.\n\n### Input:\n\n\n### Output:\ndivisible_by_four = [i for i in range(1,11) if i%4 == 0]"}
{"instruction":"Create a function in Python for calculating the surface area of a cube.","input":"The length of one of the sides of the cube","output":"def cube_area(side):\n return 6 * (side ** 2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python for calculating the surface area of a cube.\n\n### Input:\nThe length of one of the sides of the cube\n\n### Output:\ndef cube_area(side):\n return 6 * (side ** 2)"}
{"instruction":"Construct a Python program that reads 10 numbers and returns the average.","input":"","output":"def avg_of_10_numbers():\n    numbers = []\n    for i in range(0, 10):\n        num = float(input(\"Enter number: \"))\n        numbers.append(num)\n\n    avg = sum(numbers) \/ len(numbers)\n    return avg\n\nprint(avg_of_10_numbers())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program that reads 10 numbers and returns the average.\n\n### Input:\n\n\n### Output:\ndef avg_of_10_numbers():\n    numbers = []\n    for i in range(0, 10):\n        num = float(input(\"Enter number: \"))\n        numbers.append(num)\n\n    avg = sum(numbers) \/ len(numbers)\n    return avg\n\nprint(avg_of_10_numbers())"}
{"instruction":"Create a Python function to generate anagrams from a given string.","input":"","output":"def generate_anagrams(s):\n    if len(s) == 1:\n        return s\n\n    anagrams = [] \n    for i, letter in enumerate(s):\n        for anagram in generate_anagrams(s[:i] + s[i+1:]):\n            anagrams.append(letter + anagram)\n    return anagrams","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to generate anagrams from a given string.\n\n### Input:\n\n\n### Output:\ndef generate_anagrams(s):\n    if len(s) == 1:\n        return s\n\n    anagrams = [] \n    for i, letter in enumerate(s):\n        for anagram in generate_anagrams(s[:i] + s[i+1:]):\n            anagrams.append(letter + anagram)\n    return anagrams"}
{"instruction":"Create a min-heap data structure in python.","input":"","output":"import heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap_array = []\n\n    def insert(self, value):\n        heapq.heappush(self.heap_array, value)\n\n    def pop(self):\n        return heapq.heappop(self.heap_array)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a min-heap data structure in python.\n\n### Input:\n\n\n### Output:\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap_array = []\n\n    def insert(self, value):\n        heapq.heappush(self.heap_array, value)\n\n    def pop(self):\n        return heapq.heappop(self.heap_array)"}
{"instruction":"Generate a Python function to generate prime numbers in a given range of numbers.","input":"","output":"def generate_primes(start, end):\n    # A list to store prime numbers\n    primes = []\n \n    # Iterate from start to end and\n    # check if number is prime or not\n    for num in range(start, end + 1):\n        isPrime = True\n        for i in range(2, num):\n            if (num % i == 0):\n                isPrime = False\n        if isPrime:\n            primes.append(num)\n \n    return primes","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to generate prime numbers in a given range of numbers.\n\n### Input:\n\n\n### Output:\ndef generate_primes(start, end):\n    # A list to store prime numbers\n    primes = []\n \n    # Iterate from start to end and\n    # check if number is prime or not\n    for num in range(start, end + 1):\n        isPrime = True\n        for i in range(2, num):\n            if (num % i == 0):\n                isPrime = False\n        if isPrime:\n            primes.append(num)\n \n    return primes"}
{"instruction":"Sort a given list of strings into alphabetical order.","input":"my_list = [\"Python\", \"JavaScript\", \"Java\", \"C++\"]","output":"def sort_alphabetically(my_list):\n    return sorted(my_list)\n\nprint(sort_alphabetically(my_list)) # ['C++', 'Java', 'JavaScript', 'Python']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSort a given list of strings into alphabetical order.\n\n### Input:\nmy_list = [\"Python\", \"JavaScript\", \"Java\", \"C++\"]\n\n### Output:\ndef sort_alphabetically(my_list):\n    return sorted(my_list)\n\nprint(sort_alphabetically(my_list)) # ['C++', 'Java', 'JavaScript', 'Python']"}
{"instruction":"Write a Python program to take a list of integers and sort them in ascending order using insertion sort.","input":"[4, 3, 7, 2, 1]","output":"def insertion_sort(arr):\n for index in range(1,len(arr)):\n key = arr[index]\n j = index-1\n while j >=0 and key < arr[j]:\n arr[j+1] = arr[j]\n j -= 1\n arr[j+1] = key\n\narr = [4, 3, 7, 2, 1]\ninsertion_sort(arr)\nprint(arr)\n\n# Output: [1, 2, 3, 4, 7]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to take a list of integers and sort them in ascending order using insertion sort.\n\n### Input:\n[4, 3, 7, 2, 1]\n\n### Output:\ndef insertion_sort(arr):\n for index in range(1,len(arr)):\n key = arr[index]\n j = index-1\n while j >=0 and key < arr[j]:\n arr[j+1] = arr[j]\n j -= 1\n arr[j+1] = key\n\narr = [4, 3, 7, 2, 1]\ninsertion_sort(arr)\nprint(arr)\n\n# Output: [1, 2, 3, 4, 7]"}
{"instruction":"Create a function in Python that checks whether a given string is a palindrome.","input":"","output":"def is_palindrome(string):\n    # convert the string to lowercase\n    str = string.lower()\n    # reverse the string\n    revStr = str[::-1]\n    # check for the condition\n    if str == revStr:\n        return True\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that checks whether a given string is a palindrome.\n\n### Input:\n\n\n### Output:\ndef is_palindrome(string):\n    # convert the string to lowercase\n    str = string.lower()\n    # reverse the string\n    revStr = str[::-1]\n    # check for the condition\n    if str == revStr:\n        return True\n    return False"}
{"instruction":"Create a table in Python that stores a list of countries and their population.","input":"Not applicable","output":"import sqlite3\n\n# Establish a connection\nconn = sqlite3.connect('population.db')\ncursor = conn.cursor()\n\n# Create the table\ncreate_query = 'CREATE TABLE population_table (country TEXT, population INT)'\ncursor.execute(create_query)\n\n# Insert data\ninsert_query = 'INSERT INTO population_table VALUES (\"USA\", 331000000), (\"Brazil\", 212000000), (\"China\", 1420000000), (\"India\", 1380000000), (\"Russia\", 144000000)'\ncursor.execute(insert_query)\n\n# Commit the changes\nconn.commit()\n\n# Close the connection\nconn.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a table in Python that stores a list of countries and their population.\n\n### Input:\nNot applicable\n\n### Output:\nimport sqlite3\n\n# Establish a connection\nconn = sqlite3.connect('population.db')\ncursor = conn.cursor()\n\n# Create the table\ncreate_query = 'CREATE TABLE population_table (country TEXT, population INT)'\ncursor.execute(create_query)\n\n# Insert data\ninsert_query = 'INSERT INTO population_table VALUES (\"USA\", 331000000), (\"Brazil\", 212000000), (\"China\", 1420000000), (\"India\", 1380000000), (\"Russia\", 144000000)'\ncursor.execute(insert_query)\n\n# Commit the changes\nconn.commit()\n\n# Close the connection\nconn.close()"}
{"instruction":"Create an AI anomaly detection tool in Python","input":"","output":"import numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.covariance import EllipticEnvelope\n\n\ndef outlier_detection(x):\n    '''Detect outliers using EllipticEnvelope'''\n\n    clf = EllipticEnvelope(contamination=0.45) # Set contamination param\n    clf.fit(x) # Fit algorithm\n    pred = clf.predict(x) # Predict labels\n\n    outliers = x[pred == -1] # outliers\n\n    return outliers","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI anomaly detection tool in Python\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.covariance import EllipticEnvelope\n\n\ndef outlier_detection(x):\n    '''Detect outliers using EllipticEnvelope'''\n\n    clf = EllipticEnvelope(contamination=0.45) # Set contamination param\n    clf.fit(x) # Fit algorithm\n    pred = clf.predict(x) # Predict labels\n\n    outliers = x[pred == -1] # outliers\n\n    return outliers"}
{"instruction":"Design aPython program to replace the last element in a list with another list.","input":"list1 = [1,3,5,2], list2 = [10,20,30]","output":"def replace_last_element(list1, list2): \n    list1[-1:] = list2 \n    return list1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign aPython program to replace the last element in a list with another list.\n\n### Input:\nlist1 = [1,3,5,2], list2 = [10,20,30]\n\n### Output:\ndef replace_last_element(list1, list2): \n    list1[-1:] = list2 \n    return list1"}
{"instruction":"Construct a Genetic Algorithm in Python to minimize the distance from a given set of points to a given reference point","input":"Points: [(-2, 3), (4, 6), (7, 2)] |Reference Point: (1, 1)","output":"def genetic_algorithm(points, reference_point):\n    # define the search space\n    search_space = [np.random.randint(-20, 20) for _ in range(len(points))]\n\n    # set the initial minimum distance\n    min_distance = float(\"inf\")\n\n    # execute the genetic algorithm\n    while True:\n        # evaluate the search space\n        distances = [euclidean_distance(point, reference_point) for point in points]\n        new_distance = sum(distances)\n\n        # update the min distance\n        if min_distance > new_distance:\n            min_distance = new_distance\n            best_search_space = search_space\n\n        # stochastically adjust the search space\n        for i in range(len(search_space)):\n            search_space[i] += np.random.randint(-3, 3)\n\n        # if the new distance is the same as the previous, break the loop\n        if new_distance == min_distance:\n            break\n\n    return best_search_space","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Genetic Algorithm in Python to minimize the distance from a given set of points to a given reference point\n\n### Input:\nPoints: [(-2, 3), (4, 6), (7, 2)] |Reference Point: (1, 1)\n\n### Output:\ndef genetic_algorithm(points, reference_point):\n    # define the search space\n    search_space = [np.random.randint(-20, 20) for _ in range(len(points))]\n\n    # set the initial minimum distance\n    min_distance = float(\"inf\")\n\n    # execute the genetic algorithm\n    while True:\n        # evaluate the search space\n        distances = [euclidean_distance(point, reference_point) for point in points]\n        new_distance = sum(distances)\n\n        # update the min distance\n        if min_distance > new_distance:\n            min_distance = new_distance\n            best_search_space = search_space\n\n        # stochastically adjust the search space\n        for i in range(len(search_space)):\n            search_space[i] += np.random.randint(-3, 3)\n\n        # if the new distance is the same as the previous, break the loop\n        if new_distance == min_distance:\n            break\n\n    return best_search_space"}
{"instruction":"Create a machine learning model in Python to classify emails into spam and non-spam categories.","input":"","output":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n#Read the dataset\ndata = pd.read_csv('YOUR_DATASET.csv')\n\n#Split dataset into train & test sets\ntrain_data, test_data = train_test_split(data,test_size=0.2)\n\n#Vectorizing the words in the dataset for training and testing\nvectorizer = CountVectorizer(stop_words = 'english',lowercase = True)\n\n# Creating a document-term matrix\nx_train = vectorizer.fit_transform(train_data['TEXT'])\nx_test = vectorizer.transform(test_data['TEXT'])\n\n#Creating the model\nnb_model = MultinomialNB()\n \n# Training the model\nnb_model.fit(x_train, train_data['Spam\/Non-Spam'])\n \n# Predicting the outcomes of the test data\npredictions = nb_model.predict(x_test)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python to classify emails into spam and non-spam categories.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n#Read the dataset\ndata = pd.read_csv('YOUR_DATASET.csv')\n\n#Split dataset into train & test sets\ntrain_data, test_data = train_test_split(data,test_size=0.2)\n\n#Vectorizing the words in the dataset for training and testing\nvectorizer = CountVectorizer(stop_words = 'english',lowercase = True)\n\n# Creating a document-term matrix\nx_train = vectorizer.fit_transform(train_data['TEXT'])\nx_test = vectorizer.transform(test_data['TEXT'])\n\n#Creating the model\nnb_model = MultinomialNB()\n \n# Training the model\nnb_model.fit(x_train, train_data['Spam\/Non-Spam'])\n \n# Predicting the outcomes of the test data\npredictions = nb_model.predict(x_test)"}
{"instruction":"Write a Python program to create a list with the square of all the numbers from 0 to 10.","input":"Not applicable","output":"# Create a list with the square of all the numbers from 0 to 10\n# Create an empty list\nsquares = []\n# Iterate over the range from 0 to 10\nfor i in range(11):\n # Append the square of the current number to the list\n squares.append(i ** 2)\n# Print the list\nprint(squares)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a list with the square of all the numbers from 0 to 10.\n\n### Input:\nNot applicable\n\n### Output:\n# Create a list with the square of all the numbers from 0 to 10\n# Create an empty list\nsquares = []\n# Iterate over the range from 0 to 10\nfor i in range(11):\n # Append the square of the current number to the list\n squares.append(i ** 2)\n# Print the list\nprint(squares)"}
{"instruction":"Create a Python program that takes the average of all numbers in a list.","input":"[10, 15, 20, 25]","output":"def averageList(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total \/ len(numbers)\n\nprint(averageList([10, 15, 20, 25]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes the average of all numbers in a list.\n\n### Input:\n[10, 15, 20, 25]\n\n### Output:\ndef averageList(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total \/ len(numbers)\n\nprint(averageList([10, 15, 20, 25]))"}
{"instruction":"Modify this given Python code to handle inputs of any size","input":"def sum_digits(num):\n    total = 0\n    while num > 0:\n        total += num % 10\n        num \/\/= 10\n    return total","output":"def sum_digits(num):\n    total = 0\n    while num != 0:\n        total += num % 10\n        num \/\/= 10\n    return total","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify this given Python code to handle inputs of any size\n\n### Input:\ndef sum_digits(num):\n    total = 0\n    while num > 0:\n        total += num % 10\n        num \/\/= 10\n    return total\n\n### Output:\ndef sum_digits(num):\n    total = 0\n    while num != 0:\n        total += num % 10\n        num \/\/= 10\n    return total"}
{"instruction":"Utilizing the provided data, generate a fully working K nearest neighbor classifier in Python.","input":"Training Data:\n[(3.6, 4.6, 1), (4.7, 5.1, 0), (6.8, 7.2, 1), (5.5, 6.5, 1), (7.1, 8.2, 0)]\n\nTest Data:\n[(2.2, 3.2, ?), (8.2, 9.2, ?)]","output":"import numpy as np\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# training data\nX = np.array([[3.6, 4.6], [4.7, 5.1], [6.8, 7.2], [5.5, 6.5], [7.1, 8.2]])\ny = np.array([1, 0, 1, 1, 0])\n\n# test data\nX_test = np.array([[2.2, 3.2], [8.2, 9.2]])\n\n# K=3\nknn_classifier = KNeighborsClassifier(3)\nknn_classifier.fit(X, y)\ny_test = knn_classifier.predict(X_test)\n\nprint(y_test) # will output [1, 0]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUtilizing the provided data, generate a fully working K nearest neighbor classifier in Python.\n\n### Input:\nTraining Data:\n[(3.6, 4.6, 1), (4.7, 5.1, 0), (6.8, 7.2, 1), (5.5, 6.5, 1), (7.1, 8.2, 0)]\n\nTest Data:\n[(2.2, 3.2, ?), (8.2, 9.2, ?)]\n\n### Output:\nimport numpy as np\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# training data\nX = np.array([[3.6, 4.6], [4.7, 5.1], [6.8, 7.2], [5.5, 6.5], [7.1, 8.2]])\ny = np.array([1, 0, 1, 1, 0])\n\n# test data\nX_test = np.array([[2.2, 3.2], [8.2, 9.2]])\n\n# K=3\nknn_classifier = KNeighborsClassifier(3)\nknn_classifier.fit(X, y)\ny_test = knn_classifier.predict(X_test)\n\nprint(y_test) # will output [1, 0]"}
{"instruction":"Generate code to apply a K-Means clustering algorithm on a given dataset using Scikit learn in Python.","input":"iris.csv\n\n['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species']\n[4.7, 3.2, 1.3, 0.2, 'setosa']\n[4.6, 3.1, 1.5, 0.2, 'setosa']\n[5.4, 3.9, 1.7, 0.4, 'setosa']","output":"import pandas as pd\nfrom sklearn.cluster import KMeans\n\n# load and prepare the data\ndata = pd.read_csv('iris.csv')\nX = data.iloc[:, :-1].values\n\n# apply K-Means clustering\nkmeans = KMeans(n_clusters = 3, init = 'k-means++', random_state=0)\npred_y = kmeans.fit_predict(X)\n\n# visualise the clusters\nplt.scatter(X[pred_y == 0, 0], X[pred_y == 0, 1], s = 100, c = 'red', label = 'Iris-setosa')\nplt.scatter(X[pred_y == 1, 0], X[pred_y == 1, 1], s = 100, c = 'blue', label = 'Iris-versicolor')\nplt.scatter(X[pred_y == 2, 0], X[pred_y == 2, 1], s = 100, c = 'green', label = 'Iris-virginica')\n\n# plot centroids\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 200, c = 'yellow', label = 'Centroids')\n\nplt.legend()\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code to apply a K-Means clustering algorithm on a given dataset using Scikit learn in Python.\n\n### Input:\niris.csv\n\n['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species']\n[4.7, 3.2, 1.3, 0.2, 'setosa']\n[4.6, 3.1, 1.5, 0.2, 'setosa']\n[5.4, 3.9, 1.7, 0.4, 'setosa']\n\n### Output:\nimport pandas as pd\nfrom sklearn.cluster import KMeans\n\n# load and prepare the data\ndata = pd.read_csv('iris.csv')\nX = data.iloc[:, :-1].values\n\n# apply K-Means clustering\nkmeans = KMeans(n_clusters = 3, init = 'k-means++', random_state=0)\npred_y = kmeans.fit_predict(X)\n\n# visualise the clusters\nplt.scatter(X[pred_y == 0, 0], X[pred_y == 0, 1], s = 100, c = 'red', label = 'Iris-setosa')\nplt.scatter(X[pred_y == 1, 0], X[pred_y == 1, 1], s = 100, c = 'blue', label = 'Iris-versicolor')\nplt.scatter(X[pred_y == 2, 0], X[pred_y == 2, 1], s = 100, c = 'green', label = 'Iris-virginica')\n\n# plot centroids\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 200, c = 'yellow', label = 'Centroids')\n\nplt.legend()\nplt.show()"}
{"instruction":"Write an algorithm in Python for searching through a large collection of text documents and printing out the documents containing a specified keyword.","input":"collection = [\"this is document one\", \"document two is about animals\", \"here is another document\", \"the final document\"]\nkeyword = \"document\"","output":"def search(collection, keyword):\n found = []\n for document in collection:\n  if keyword in document:\n   found.append(document)\n return found\n \nresults = search(collection, keyword)\n\nfor result in results:\n print(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python for searching through a large collection of text documents and printing out the documents containing a specified keyword.\n\n### Input:\ncollection = [\"this is document one\", \"document two is about animals\", \"here is another document\", \"the final document\"]\nkeyword = \"document\"\n\n### Output:\ndef search(collection, keyword):\n found = []\n for document in collection:\n  if keyword in document:\n   found.append(document)\n return found\n \nresults = search(collection, keyword)\n\nfor result in results:\n print(result)"}
{"instruction":"Create a machine learning model in Python for predicting house prices. This model should use data from a dataset that includes features such as number of bedrooms, square footage, and location.","input":"Not applicable","output":"import pandas as pd \nimport numpy as np\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\n\n# Load the house price data \ndata = pd.read_csv('house_prices_data.csv')\n\n# Separate features and labels\nX = data.iloc[:,0:3].values\ny = data.iloc[:,3].values\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Create the model\nmodel = linear_model.LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Use the model to make predictions \npredictions = model.predict(X_test)\n\n# Calculate the accuracy of the predictions \nscore = model.score(X_test, y_test)\nprint(score)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python for predicting house prices. This model should use data from a dataset that includes features such as number of bedrooms, square footage, and location.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd \nimport numpy as np\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\n\n# Load the house price data \ndata = pd.read_csv('house_prices_data.csv')\n\n# Separate features and labels\nX = data.iloc[:,0:3].values\ny = data.iloc[:,3].values\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Create the model\nmodel = linear_model.LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Use the model to make predictions \npredictions = model.predict(X_test)\n\n# Calculate the accuracy of the predictions \nscore = model.score(X_test, y_test)\nprint(score)"}
{"instruction":"Implement this algorithms in Python.","input":"Algorithm: Depth-first Search","output":"def dfs(graph, start):\n    visited = []\n    stack = [start]\n    while stack:\n        vertex = stack.pop()\n        if vertex not in visited:\n            visited.append(vertex)\n            for node in graph[vertex]:\n                stack.append(node)\n    return visited","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement this algorithms in Python.\n\n### Input:\nAlgorithm: Depth-first Search\n\n### Output:\ndef dfs(graph, start):\n    visited = []\n    stack = [start]\n    while stack:\n        vertex = stack.pop()\n        if vertex not in visited:\n            visited.append(vertex)\n            for node in graph[vertex]:\n                stack.append(node)\n    return visited"}
{"instruction":"Generate a program in Python to find the day of the week for any given date.","input":"","output":"# Getting date from user\ndate_string = input('Enter date in (dd\/mm\/yyyy) format: ')\n \n# Split date using '\/' as delimeter\ndate_list = date_string.split('\/')\n \n# Convert date to list of integers\ndate_list = [int(x) for x in date_list]\n \n# Calculate day of week\nweekday = datetime.date(date_list[2], date_list[1], date_list[0]).weekday()\n \n# Print day of week\nprint('Day of the week: ', calendar.day_name[weekday])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to find the day of the week for any given date.\n\n### Input:\n\n\n### Output:\n# Getting date from user\ndate_string = input('Enter date in (dd\/mm\/yyyy) format: ')\n \n# Split date using '\/' as delimeter\ndate_list = date_string.split('\/')\n \n# Convert date to list of integers\ndate_list = [int(x) for x in date_list]\n \n# Calculate day of week\nweekday = datetime.date(date_list[2], date_list[1], date_list[0]).weekday()\n \n# Print day of week\nprint('Day of the week: ', calendar.day_name[weekday])"}
{"instruction":"Create a program in Python which can calculate the median of an array of integers.","input":"[3, 5, 7, 4, 8, 1, 9]","output":"def median(arr):\n    arr.sort()\n\n    if len(arr) % 2 != 0:\n        return arr[len(arr)\/\/2]\n    else: \n        return (arr[len(arr)\/\/2 - 1] + arr[len(arr)\/\/2]) \/ 2\n\narr = [3, 5, 7, 4, 8, 1, 9]\n\nmed = median(arr)\nprint('Median of the given array is:', med)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python which can calculate the median of an array of integers.\n\n### Input:\n[3, 5, 7, 4, 8, 1, 9]\n\n### Output:\ndef median(arr):\n    arr.sort()\n\n    if len(arr) % 2 != 0:\n        return arr[len(arr)\/\/2]\n    else: \n        return (arr[len(arr)\/\/2 - 1] + arr[len(arr)\/\/2]) \/ 2\n\narr = [3, 5, 7, 4, 8, 1, 9]\n\nmed = median(arr)\nprint('Median of the given array is:', med)"}
{"instruction":"Write a Python program to compare two given strings and check if they are anagrams","input":"St1 = \"listen\"\nSt2 = \"silent\"","output":"from collections import Counter \n  \ndef is_anagram(str1, str2): \n    # Convert both strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n  \n    # Remove all whitespaces\n    str1 = str1.replace(\" \", \"\") \n    str2 = str2.replace(\" \", \"\") \n \n    # remove all special characters\n    for char in \"!'_,@#$%^&*():;\":\n        str1 = str1.replace(char, '')\n        str2 = str2.replace(char, '')\n\n    # sort the character of both strings \n    sorted_str1 = sorted(str1) \n    sorted_str2 = sorted(str2) \n  \n    # Check if both strings are equal or not \n    if(sorted_str1 == sorted_str2):  \n        return True \n    else: \n        return False \n  \n# Driver program \nstr1 = \"listen\"\nstr2 = \"silent\"\n\nif is_anagram(str1, str2): \n    print(\"The strings are anagrams.\") \nelse: \n    print(\"The strings are not anagrams.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compare two given strings and check if they are anagrams\n\n### Input:\nSt1 = \"listen\"\nSt2 = \"silent\"\n\n### Output:\nfrom collections import Counter \n  \ndef is_anagram(str1, str2): \n    # Convert both strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n  \n    # Remove all whitespaces\n    str1 = str1.replace(\" \", \"\") \n    str2 = str2.replace(\" \", \"\") \n \n    # remove all special characters\n    for char in \"!'_,@#$%^&*():;\":\n        str1 = str1.replace(char, '')\n        str2 = str2.replace(char, '')\n\n    # sort the character of both strings \n    sorted_str1 = sorted(str1) \n    sorted_str2 = sorted(str2) \n  \n    # Check if both strings are equal or not \n    if(sorted_str1 == sorted_str2):  \n        return True \n    else: \n        return False \n  \n# Driver program \nstr1 = \"listen\"\nstr2 = \"silent\"\n\nif is_anagram(str1, str2): \n    print(\"The strings are anagrams.\") \nelse: \n    print(\"The strings are not anagrams.\")"}
{"instruction":"Implement a basic AI algorithm in Python to solve the 8-puzzle game. The program should be able to solve any given 8-puzzle in optimal time.","input":"Not Applicable","output":"import copy\n\ndef find_zero(state):\n    for i in range(9):\n        if state[i] == 0:\n            return i\n\ndef move_up(state):\n    new_state = copy.copy(state)\n    index = find_zero(state)\n    x = index % 3\n    y = int(index \/ 3) \n    if y == 0:\n        return None\n    temp = state[index - 3]\n    new_state[index - 3] = 0\n    new_state[index] = temp\n    return new_state\n    \ndef move_down(state):\n....\n\ndef move_left(state):\n....\n\ndef move_right(state):\n....\n\ndef bfs(initial_state, goal_state):\n....\n\ndef main():\n   initial_state = [7, 8, 0, 2, 3, 5, 4, 1, 6]\n   goal_state = [0, 1, 2, 3, 4, 5, 6, 7, 8]\n   solution = bfs(initial_state, goal_state)\n   print(solution)\n\nmain()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a basic AI algorithm in Python to solve the 8-puzzle game. The program should be able to solve any given 8-puzzle in optimal time.\n\n### Input:\nNot Applicable\n\n### Output:\nimport copy\n\ndef find_zero(state):\n    for i in range(9):\n        if state[i] == 0:\n            return i\n\ndef move_up(state):\n    new_state = copy.copy(state)\n    index = find_zero(state)\n    x = index % 3\n    y = int(index \/ 3) \n    if y == 0:\n        return None\n    temp = state[index - 3]\n    new_state[index - 3] = 0\n    new_state[index] = temp\n    return new_state\n    \ndef move_down(state):\n....\n\ndef move_left(state):\n....\n\ndef move_right(state):\n....\n\ndef bfs(initial_state, goal_state):\n....\n\ndef main():\n   initial_state = [7, 8, 0, 2, 3, 5, 4, 1, 6]\n   goal_state = [0, 1, 2, 3, 4, 5, 6, 7, 8]\n   solution = bfs(initial_state, goal_state)\n   print(solution)\n\nmain()"}
{"instruction":"Generate a logistic regression classifier in Python that classifies data into two classes (0 or 1).","input":"X: An array containing 8 feature values (floats).\n\n[1.0472, 2.1930, 1.6025, 0.8886, 2.5850, 1.4692, 1.2548, 0.8496]\n\nY: An array containing labels for the data points (1 or 0).\n\n[0, 0, 1, 0, 0, 0, 0, 1]","output":"# Import the necessary libraries\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\n\n# Load in the feature values and labels\nX = np.array([1.0472, 2.1930, 1.6025, 0.8886, 2.5850, 1.4692, 1.2548, 0.8496]).reshape(-1, 1)\ny = np.array([0, 0, 1, 0, 0, 0, 0, 1])\n\n# Create the logistic regression model\nmodel = LogisticRegression(solver='liblinear').fit(X, y)\n\n# Evaluate the model\nscore = model.score(X, y)\nprint('Model accuracy is:', score) # Output: 0.75","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a logistic regression classifier in Python that classifies data into two classes (0 or 1).\n\n### Input:\nX: An array containing 8 feature values (floats).\n\n[1.0472, 2.1930, 1.6025, 0.8886, 2.5850, 1.4692, 1.2548, 0.8496]\n\nY: An array containing labels for the data points (1 or 0).\n\n[0, 0, 1, 0, 0, 0, 0, 1]\n\n### Output:\n# Import the necessary libraries\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\n\n# Load in the feature values and labels\nX = np.array([1.0472, 2.1930, 1.6025, 0.8886, 2.5850, 1.4692, 1.2548, 0.8496]).reshape(-1, 1)\ny = np.array([0, 0, 1, 0, 0, 0, 0, 1])\n\n# Create the logistic regression model\nmodel = LogisticRegression(solver='liblinear').fit(X, y)\n\n# Evaluate the model\nscore = model.score(X, y)\nprint('Model accuracy is:', score) # Output: 0.75"}
{"instruction":"Write a Python function for computing the Fibonacci numbers of n.","input":"","output":"def fibonacci(n):\n    if n < 2:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function for computing the Fibonacci numbers of n.\n\n### Input:\n\n\n### Output:\ndef fibonacci(n):\n    if n < 2:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)"}
{"instruction":"Generate a Python class that overides the default methods of a list.","input":"","output":"class MyList(list):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def append(self, element):\n        super().append(element)\n        print('Element {} is added to the list'.format(element))\n\n    def insert(self, index, element):\n        super().insert(index, element)\n        print('Element {} is inserted at index {}'.format(element, index))\n\n    def pop(self, index=-1):\n        element = super().pop(index)\n        print('Element {} is removed from the list'.format(element))\n        return element","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class that overides the default methods of a list.\n\n### Input:\n\n\n### Output:\nclass MyList(list):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def append(self, element):\n        super().append(element)\n        print('Element {} is added to the list'.format(element))\n\n    def insert(self, index, element):\n        super().insert(index, element)\n        print('Element {} is inserted at index {}'.format(element, index))\n\n    def pop(self, index=-1):\n        element = super().pop(index)\n        print('Element {} is removed from the list'.format(element))\n        return element"}
{"instruction":"Generate a Python program to output a machine-learning model stacked with feature-selection, extraction and preprocessing.","input":"","output":"import pandas as pd\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_extraction import DictVectorizer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Data Preprocessing\nfeatures = pd.read_csv('features.csv')\nX = features.iloc[:, :-1].values\ny = features.iloc[:, -1].values\n\n#Feature Selection\nselector = SelectKBest(k=10)\nselector.fit(X, y)\nX_new = selector.transform(X)\n\n#Feature Extraction\nvectorizer = DictVectorizer(sparse=False)\nX_final = vectorizer.fit_transform(X)\n\n#Feature Scaling\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_final)\n\n#Training and Testing\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2)\n\n#Model Stacking\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(X_train, y_train)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to output a machine-learning model stacked with feature-selection, extraction and preprocessing.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_extraction import DictVectorizer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Data Preprocessing\nfeatures = pd.read_csv('features.csv')\nX = features.iloc[:, :-1].values\ny = features.iloc[:, -1].values\n\n#Feature Selection\nselector = SelectKBest(k=10)\nselector.fit(X, y)\nX_new = selector.transform(X)\n\n#Feature Extraction\nvectorizer = DictVectorizer(sparse=False)\nX_final = vectorizer.fit_transform(X)\n\n#Feature Scaling\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_final)\n\n#Training and Testing\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2)\n\n#Model Stacking\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(X_train, y_train)"}
{"instruction":"Optimize the following python code using best practices","input":"def linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1","output":"def linear_search(arr, x):\n    for index, item in enumerate(arr):\n        if item == x:\n            return index\n    return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following python code using best practices\n\n### Input:\ndef linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\n### Output:\ndef linear_search(arr, x):\n    for index, item in enumerate(arr):\n        if item == x:\n            return index\n    return -1"}
{"instruction":"Write a function in Python to replace multiple consecutive `1`s with just one `1`.","input":"","output":"def remove_consecutive(list_of_numbers):\n    result = []\n    last_number = None\n    for number in list_of_numbers:\n        if number != last_number:\n            result.append(number)\n            last_number = number\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to replace multiple consecutive `1`s with just one `1`.\n\n### Input:\n\n\n### Output:\ndef remove_consecutive(list_of_numbers):\n    result = []\n    last_number = None\n    for number in list_of_numbers:\n        if number != last_number:\n            result.append(number)\n            last_number = number\n    return result"}
{"instruction":"Develop a command line interface using Python for the user to interact with a given database.","input":"","output":"import sqlite3\n\ndef get_connection():\n    # connects to a database given the database name\n    conn = sqlite3.connect(\"my_database.db\")\n    return conn\n\ndef run_command():\n    # takes a command from the user and runs it in the SQL database\n    query = input(\"Enter your command: \")\n    conn = get_connection()\n    c = conn.cursor()\n    c.execute(query)\n    results = c.fetchall()\n    conn.close()\n    return results\n\nif __name__ == '__main__':\n    results = run_command()\n    print(results)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a command line interface using Python for the user to interact with a given database.\n\n### Input:\n\n\n### Output:\nimport sqlite3\n\ndef get_connection():\n    # connects to a database given the database name\n    conn = sqlite3.connect(\"my_database.db\")\n    return conn\n\ndef run_command():\n    # takes a command from the user and runs it in the SQL database\n    query = input(\"Enter your command: \")\n    conn = get_connection()\n    c = conn.cursor()\n    c.execute(query)\n    results = c.fetchall()\n    conn.close()\n    return results\n\nif __name__ == '__main__':\n    results = run_command()\n    print(results)"}
{"instruction":"Create a Python program to reverse a dictionary. The program should take a dictionary as input and return a new dictionary with the keys and values swapped.","input":"dictionary = { 'a': 1, 'b':  2, 'c': 3 }","output":"def reverse_dictionary(dictionary): \n result = dict() \n  \n for key, value in dictionary.items(): \n  result[value] = key \n  \n return result \n\ndictionary = { 'a': 1, 'b':  2, 'c': 3 }\nres = reverse_dictionary(dictionary) \nprint(res) # Output: {1: 'a', 2: 'b', 3: 'c'}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to reverse a dictionary. The program should take a dictionary as input and return a new dictionary with the keys and values swapped.\n\n### Input:\ndictionary = { 'a': 1, 'b':  2, 'c': 3 }\n\n### Output:\ndef reverse_dictionary(dictionary): \n result = dict() \n  \n for key, value in dictionary.items(): \n  result[value] = key \n  \n return result \n\ndictionary = { 'a': 1, 'b':  2, 'c': 3 }\nres = reverse_dictionary(dictionary) \nprint(res) # Output: {1: 'a', 2: 'b', 3: 'c'}"}
{"instruction":"Design a program that outputs the average value of a list in Python.","input":"[1, 4, 10, 6]","output":"# Given a list of numbers\nnums = [1, 4, 10, 6]\n\n# Calculate the average\ntotal = 0\nfor num in nums:\n    total += num\n\naverage = total\/ len(nums)\n\n# Output the average\nprint(average)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program that outputs the average value of a list in Python.\n\n### Input:\n[1, 4, 10, 6]\n\n### Output:\n# Given a list of numbers\nnums = [1, 4, 10, 6]\n\n# Calculate the average\ntotal = 0\nfor num in nums:\n    total += num\n\naverage = total\/ len(nums)\n\n# Output the average\nprint(average)"}
{"instruction":"Construct a program that parses a given string for all of its numbers and returns them as a list in Python.","input":"String : \"This string contains two numbers: 12 and 78\"","output":"def get_numbers_list_from_string(string): \n    numbers_list = [] \n      \n    # Split the string by space \n    words = string.split(' ')  \n      \n    for i in range(0, len(words)): \n          \n        # Take each word separately \n        # And strip off any punctuations \n        # That might be there \n        # Strip() returns a copy of the string \n        # With both leading and trailing characters removed \n        word = words[i].strip() \n          \n        if(word.isnumeric()): \n            numbers_list.append(int(word)) \n      \n    return numbers_list \n\nstring = \"This string contains two numbers: 12 and 78\"\nnumbers_list = get_numbers_list_from_string(string)\n\nprint(\"Numbers list: \", numbers_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program that parses a given string for all of its numbers and returns them as a list in Python.\n\n### Input:\nString : \"This string contains two numbers: 12 and 78\"\n\n### Output:\ndef get_numbers_list_from_string(string): \n    numbers_list = [] \n      \n    # Split the string by space \n    words = string.split(' ')  \n      \n    for i in range(0, len(words)): \n          \n        # Take each word separately \n        # And strip off any punctuations \n        # That might be there \n        # Strip() returns a copy of the string \n        # With both leading and trailing characters removed \n        word = words[i].strip() \n          \n        if(word.isnumeric()): \n            numbers_list.append(int(word)) \n      \n    return numbers_list \n\nstring = \"This string contains two numbers: 12 and 78\"\nnumbers_list = get_numbers_list_from_string(string)\n\nprint(\"Numbers list: \", numbers_list)"}
{"instruction":"Write a python program to check if a given string contains all alphabetic characters.","input":"String: \"Hello World!\"","output":"def is_alpha(word): \n    if word.isalpha(): \n        return True \n    else: \n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to check if a given string contains all alphabetic characters.\n\n### Input:\nString: \"Hello World!\"\n\n### Output:\ndef is_alpha(word): \n    if word.isalpha(): \n        return True \n    else: \n        return False"}
{"instruction":"Develop a Python program to implement stochastic gradient descent to generate a linear regression model.","input":"","output":"import random\nimport numpy as np\n\ndef sgd_model(X, Y, w, b, learning_rate, epochs):\n    \"\"\"Implement Stochastic Gradient Descent to generate a linear regression model\"\"\"\n    N = len(X)\n\n    for e in range(epochs):\n        for i in range(N):\n\n            x = X[i]\n            y = Y[i]\n\n            # Calculate output\n            yhat = w * x + b\n\n            # Update weights\n            w += learning_rate * (y - yhat) * x\n            b += learning_rate * (y - yhat)\n    return w, b\n\n# Example\nX = np.array([1, 2, 3])\nY = np.array([1, 2, 3])\nw, b = sgd_model(X, Y, 0, 0, 0.01, 1000)\nyhat = w * X + b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to implement stochastic gradient descent to generate a linear regression model.\n\n### Input:\n\n\n### Output:\nimport random\nimport numpy as np\n\ndef sgd_model(X, Y, w, b, learning_rate, epochs):\n    \"\"\"Implement Stochastic Gradient Descent to generate a linear regression model\"\"\"\n    N = len(X)\n\n    for e in range(epochs):\n        for i in range(N):\n\n            x = X[i]\n            y = Y[i]\n\n            # Calculate output\n            yhat = w * x + b\n\n            # Update weights\n            w += learning_rate * (y - yhat) * x\n            b += learning_rate * (y - yhat)\n    return w, b\n\n# Example\nX = np.array([1, 2, 3])\nY = np.array([1, 2, 3])\nw, b = sgd_model(X, Y, 0, 0, 0.01, 1000)\nyhat = w * X + b"}
{"instruction":"Create a Python script that will take an array of numbers and generate the maximum possible combination using those numbers.","input":"[4, 2, 8, 12]","output":"def generatemaxcombo(arr):\n    max_combo = []\n    value = 1\n    for x in arr:\n        value = value * x\n        max_combo.append(value)\n    return max_combo\n\narr = [4, 2, 8, 12]\nmax_combo = generatemaxcombo(arr)\n\nprint(\"The maximum combination of {} is: {}\".format(arr, max_combo))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that will take an array of numbers and generate the maximum possible combination using those numbers.\n\n### Input:\n[4, 2, 8, 12]\n\n### Output:\ndef generatemaxcombo(arr):\n    max_combo = []\n    value = 1\n    for x in arr:\n        value = value * x\n        max_combo.append(value)\n    return max_combo\n\narr = [4, 2, 8, 12]\nmax_combo = generatemaxcombo(arr)\n\nprint(\"The maximum combination of {} is: {}\".format(arr, max_combo))"}
{"instruction":"Design a python program that calculates a person's BMI (body mass index).","input":"","output":"def calculate_bmi(weight, height):\n    bmi = weight\/(height**2)\n    return bmi","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program that calculates a person's BMI (body mass index).\n\n### Input:\n\n\n### Output:\ndef calculate_bmi(weight, height):\n    bmi = weight\/(height**2)\n    return bmi"}
{"instruction":"Build a web API in Python to find all books from a given author.","input":"Author name: J.K. Rowling","output":"import flask\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('\/books\/author\/<author_name>', methods=['GET'])\ndef get_books_by_author(author_name):\n books = [\n {'name': 'Harry Potter and the Philosopher\\'s Stone', 'author': 'J.K. Rowling'}, \n {'name': 'Harry Potter and the Chamber of Secrets', 'author': 'J.K. Rowling'},\n {'name': 'Harry Potter and the Prisoner of Azkaban', 'author': 'J.K. Rowling'},\n {'name': 'Harry Potter and the Goblet of Fire', 'author': 'J.K. Rowling'}\n]\n\nbooks_by_author = [book for book in books if book['author'] == author_name]\nreturn jsonify({'books': books_by_author})\n\nif __name__ == '__main__':\n app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a web API in Python to find all books from a given author.\n\n### Input:\nAuthor name: J.K. Rowling\n\n### Output:\nimport flask\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('\/books\/author\/<author_name>', methods=['GET'])\ndef get_books_by_author(author_name):\n books = [\n {'name': 'Harry Potter and the Philosopher\\'s Stone', 'author': 'J.K. Rowling'}, \n {'name': 'Harry Potter and the Chamber of Secrets', 'author': 'J.K. Rowling'},\n {'name': 'Harry Potter and the Prisoner of Azkaban', 'author': 'J.K. Rowling'},\n {'name': 'Harry Potter and the Goblet of Fire', 'author': 'J.K. Rowling'}\n]\n\nbooks_by_author = [book for book in books if book['author'] == author_name]\nreturn jsonify({'books': books_by_author})\n\nif __name__ == '__main__':\n app.run()"}
{"instruction":"Create a Python function which takes a list, and prints out the third item of the list.","input":"mylist = [1, 2, 3, 4, 5]","output":"def thirdElement(mylist):\n    \"\"\" Print out the third element of the list. \"\"\"\n    print(mylist[2])\n\nthirdElement(mylist)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function which takes a list, and prints out the third item of the list.\n\n### Input:\nmylist = [1, 2, 3, 4, 5]\n\n### Output:\ndef thirdElement(mylist):\n    \"\"\" Print out the third element of the list. \"\"\"\n    print(mylist[2])\n\nthirdElement(mylist)"}
{"instruction":"Translate an algorithm from Java to Python to delete a node in a linked list.","input":"Not applicable","output":"# Python function to delete a node \n# in a Linked List. \nclass Node: \n    # Constructor to initialize the node object \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\n# Function to delete node from Linked List \ndef deleteNode(head, position): \n    # If linked list is empty \n    if head == None: \n        return \n\n    temp = head \n \n    # If head needs to be removed \n    if position == 0: \n        head = temp.next\n        temp = None\n        return head \n\n    # Find previous node of the node to be deleted \n    for i in range(position -1 ): \n        temp = temp.next\n        if temp is None: \n            break\n \n    # If position is more than number of nodes \n    if temp is None: \n        return \n \n    if temp.next is None: \n        return \n\n    # Node temp.next is the node to be deleted \n    # store pointer to the next of node to be deleted \n    next = temp.next.next\n\n    # Unlink the node from linked list \n    temp.next = None\n \n    temp.next = next \n\n    return head","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTranslate an algorithm from Java to Python to delete a node in a linked list.\n\n### Input:\nNot applicable\n\n### Output:\n# Python function to delete a node \n# in a Linked List. \nclass Node: \n    # Constructor to initialize the node object \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\n# Function to delete node from Linked List \ndef deleteNode(head, position): \n    # If linked list is empty \n    if head == None: \n        return \n\n    temp = head \n \n    # If head needs to be removed \n    if position == 0: \n        head = temp.next\n        temp = None\n        return head \n\n    # Find previous node of the node to be deleted \n    for i in range(position -1 ): \n        temp = temp.next\n        if temp is None: \n            break\n \n    # If position is more than number of nodes \n    if temp is None: \n        return \n \n    if temp.next is None: \n        return \n\n    # Node temp.next is the node to be deleted \n    # store pointer to the next of node to be deleted \n    next = temp.next.next\n\n    # Unlink the node from linked list \n    temp.next = None\n \n    temp.next = next \n\n    return head"}
{"instruction":"Construct a Python program that prints out all the numbers from 1 to a given number n.","input":"","output":"def print_numbers(n):\n for num in range(1, n+1):\n print(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program that prints out all the numbers from 1 to a given number n.\n\n### Input:\n\n\n### Output:\ndef print_numbers(n):\n for num in range(1, n+1):\n print(num)"}
{"instruction":"Implement a Python method that given a string, it finds the longest palindromic substring and prints it.","input":"str = \"forgeeksskeeg\"","output":"def longestPalindrome(str): \n  maxLength = 1\n  \n  start = 0 \n  length = len(str) \n  \n  low = 0\n  high = 0\n  \n  for i in range(1, length): \n    low = i - 1\n    high = i \n    \n    while low >= 0 and high < length and str[low] == str[high]: \n        if high - low + 1 > maxLength: \n            start = low \n            maxLength = high - low + 1\n        low -= 1\n        high += 1\n  \n    low = i - 1\n    high = i + 1\n    \n    while low >= 0 and high < length and str[low] == str[high]: \n        if high - low + 1 > maxLength: \n            start = low \n            maxLength = high - low + 1\n        low -= 1\n        high += 1\n            \n  print(\"Longest Palindrome : \", str[start:start + maxLength])        \n      \nlongestPalindrome(\"forgeeksskeeg\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python method that given a string, it finds the longest palindromic substring and prints it.\n\n### Input:\nstr = \"forgeeksskeeg\"\n\n### Output:\ndef longestPalindrome(str): \n  maxLength = 1\n  \n  start = 0 \n  length = len(str) \n  \n  low = 0\n  high = 0\n  \n  for i in range(1, length): \n    low = i - 1\n    high = i \n    \n    while low >= 0 and high < length and str[low] == str[high]: \n        if high - low + 1 > maxLength: \n            start = low \n            maxLength = high - low + 1\n        low -= 1\n        high += 1\n  \n    low = i - 1\n    high = i + 1\n    \n    while low >= 0 and high < length and str[low] == str[high]: \n        if high - low + 1 > maxLength: \n            start = low \n            maxLength = high - low + 1\n        low -= 1\n        high += 1\n            \n  print(\"Longest Palindrome : \", str[start:start + maxLength])        \n      \nlongestPalindrome(\"forgeeksskeeg\")"}
{"instruction":"Implement a K Nearest Neighbors algorithm in Python.","input":"","output":"import numpy as np \nfrom math import sqrt \nimport warnings \nfrom collections import Counter \n\ndef k_nearest_neighbors(data, predict, k=3): \n    if len(data) >= k: \n        warnings.warn('K is set to a value less than total voting groups!') \n  \n    distances =[] \n    for group in data: \n        for features in data[group]: \n            euclidean_distance = np.linalg.norm(np.array(features) - np.array(predict)) \n            distances.append([euclidean_distance, group]) \n  \n    votes = [i[1] for i in sorted(distances)[:k]] \n    vote_result = Counter(votes).most_common(1)[0][0] \n    confidence = Counter(votes).most_common(1)[0][1] \/ k \n\n    return vote_result, confidence","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a K Nearest Neighbors algorithm in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np \nfrom math import sqrt \nimport warnings \nfrom collections import Counter \n\ndef k_nearest_neighbors(data, predict, k=3): \n    if len(data) >= k: \n        warnings.warn('K is set to a value less than total voting groups!') \n  \n    distances =[] \n    for group in data: \n        for features in data[group]: \n            euclidean_distance = np.linalg.norm(np.array(features) - np.array(predict)) \n            distances.append([euclidean_distance, group]) \n  \n    votes = [i[1] for i in sorted(distances)[:k]] \n    vote_result = Counter(votes).most_common(1)[0][0] \n    confidence = Counter(votes).most_common(1)[0][1] \/ k \n\n    return vote_result, confidence"}
{"instruction":"Generate a random password using Python that contains at least one special character, an uppercase letter, and a number.","input":"Length of the password: 12","output":"import random\nimport string\n \ndef generate_password():\n # Generate a random string of 12 characters\n password = ''.join(random.choices(string.ascii_uppercase + string.digits + string.punctuation, k=12))\n \n # Return the password \n return password\n\n# Call the function\npassword = generate_password()\n\n# Print the password\nprint(password)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random password using Python that contains at least one special character, an uppercase letter, and a number.\n\n### Input:\nLength of the password: 12\n\n### Output:\nimport random\nimport string\n \ndef generate_password():\n # Generate a random string of 12 characters\n password = ''.join(random.choices(string.ascii_uppercase + string.digits + string.punctuation, k=12))\n \n # Return the password \n return password\n\n# Call the function\npassword = generate_password()\n\n# Print the password\nprint(password)"}
{"instruction":"Write a Python program to create a tic-tac-toe game.","input":"","output":"# define a function to draw the board\ndef draw_board(): \n  \n    print(\"\\n\")                   \n    print(\" --- | --- | --- \")\n    print(\"  7  |  8  |  9  \") \n    print(\" --- | --- | --- \")\n    print(\"  4  |  5  |  6  \") \n    print(\" --- | --- | --- \")\n    print(\"  1  |  2  |  3  \") \n    print(\" --- | --- | --- \")\n  \n# define a function to check if position is empty \ndef check_position(position, board): \n    return board[position] == ' '\n  \n# define a function to check if board is full and return boolean  \ndef is_board_full(board): \n    for i in range(1, 10): \n        if check_position(i, board): \n            return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a tic-tac-toe game.\n\n### Input:\n\n\n### Output:\n# define a function to draw the board\ndef draw_board(): \n  \n    print(\"\\n\")                   \n    print(\" --- | --- | --- \")\n    print(\"  7  |  8  |  9  \") \n    print(\" --- | --- | --- \")\n    print(\"  4  |  5  |  6  \") \n    print(\" --- | --- | --- \")\n    print(\"  1  |  2  |  3  \") \n    print(\" --- | --- | --- \")\n  \n# define a function to check if position is empty \ndef check_position(position, board): \n    return board[position] == ' '\n  \n# define a function to check if board is full and return boolean  \ndef is_board_full(board): \n    for i in range(1, 10): \n        if check_position(i, board): \n            return False\n    return True"}
{"instruction":"Add a try-catch block to the given Python code","input":"x = 10\ny = 0\nz = x\/y","output":"try:\n  x = 10\n  y = 0\n  z = x\/y\nexcept ZeroDivisionError:\n  print(\"ZeroDivisionError occurred: Cannot divide a number by 0\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAdd a try-catch block to the given Python code\n\n### Input:\nx = 10\ny = 0\nz = x\/y\n\n### Output:\ntry:\n  x = 10\n  y = 0\n  z = x\/y\nexcept ZeroDivisionError:\n  print(\"ZeroDivisionError occurred: Cannot divide a number by 0\")"}
{"instruction":"Edit the following Python code to satisfy the requirement.","input":"def order_by_name(people):\n  # return people sorted by name\n  return sorted(people, key=lambda x: x['name'])\n\n# The following code should print people sorted by age\npeople = [{'name': 'John', 'age': 24}, {'name': 'Steve', 'age': 32}, {'name': 'Alice', 'age': 18}]\n\nprint(order_by_name(people))","output":"def order_by_name(people):\n  # return people sorted by name\n  return sorted(people, key=lambda x: x['name'])\n\ndef order_by_age(people):\n  # return people sorted by age\n  return sorted(people, key=lambda x: x['age'])\n\n# The following code should print people sorted by age\npeople = [{'name': 'John', 'age': 24}, {'name': 'Steve', 'age': 32}, {'name': 'Alice', 'age': 18}]\n\nprint(order_by_age(people))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code to satisfy the requirement.\n\n### Input:\ndef order_by_name(people):\n  # return people sorted by name\n  return sorted(people, key=lambda x: x['name'])\n\n# The following code should print people sorted by age\npeople = [{'name': 'John', 'age': 24}, {'name': 'Steve', 'age': 32}, {'name': 'Alice', 'age': 18}]\n\nprint(order_by_name(people))\n\n### Output:\ndef order_by_name(people):\n  # return people sorted by name\n  return sorted(people, key=lambda x: x['name'])\n\ndef order_by_age(people):\n  # return people sorted by age\n  return sorted(people, key=lambda x: x['age'])\n\n# The following code should print people sorted by age\npeople = [{'name': 'John', 'age': 24}, {'name': 'Steve', 'age': 32}, {'name': 'Alice', 'age': 18}]\n\nprint(order_by_age(people))"}
{"instruction":"Write a python program that takes an array as an input and returns a list of all possible combinations from the array where the length must not exceed 3 elements.","input":"[1, 2, 3]","output":"def get_combinations(arr):\n    combinations = []\n    \n    for i in range(len(arr) + 1):\n        for j in range(i + 1, len(arr) + 1):\n            for k in range(j + 1, len(arr)+1):\n                combinations.append(arr[i:j] + arr[j:k])\n    return combinations\n\nresult = get_combinations([1, 2, 3])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that takes an array as an input and returns a list of all possible combinations from the array where the length must not exceed 3 elements.\n\n### Input:\n[1, 2, 3]\n\n### Output:\ndef get_combinations(arr):\n    combinations = []\n    \n    for i in range(len(arr) + 1):\n        for j in range(i + 1, len(arr) + 1):\n            for k in range(j + 1, len(arr)+1):\n                combinations.append(arr[i:j] + arr[j:k])\n    return combinations\n\nresult = get_combinations([1, 2, 3])\nprint(result)"}
{"instruction":"Create a Python function that takes a list of numbers as an argument and sorts it in descending order using quick sort algorithm.","input":"[7, 5, 2, 4, 2, 9, 3, 8]","output":"def quickSort(nums):\n    if len(nums) <= 1:\n        return nums\n    pivot = nums[len(nums) \/\/ 2]\n    left = [x for x in nums if x < pivot]\n    middle = [x for x in nums if x == pivot]\n    right = [x for x in nums if x > pivot]\n    return quickSort(right) + middle + quickSort(left)\n\nif __name__ == \"__main__\":\n    numbers = [7, 5, 2, 4, 2, 9, 3, 8]\n    print(quickSort(numbers))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes a list of numbers as an argument and sorts it in descending order using quick sort algorithm.\n\n### Input:\n[7, 5, 2, 4, 2, 9, 3, 8]\n\n### Output:\ndef quickSort(nums):\n    if len(nums) <= 1:\n        return nums\n    pivot = nums[len(nums) \/\/ 2]\n    left = [x for x in nums if x < pivot]\n    middle = [x for x in nums if x == pivot]\n    right = [x for x in nums if x > pivot]\n    return quickSort(right) + middle + quickSort(left)\n\nif __name__ == \"__main__\":\n    numbers = [7, 5, 2, 4, 2, 9, 3, 8]\n    print(quickSort(numbers))"}
{"instruction":"Create a Python program to read a web page and print all of the links and their text","input":"Not applicable","output":"import re\nfrom urllib.request import urlopen\n\nhtml = urlopen(\"http:\/\/www.example.com\/\").read().decode('utf-8')\nlinks = re.findall(\"<a href=(.*?)>(.*?)<\/a>\", html) \n \nfor link in links:\n    print(\"Link: \", link[0])\n    print(\"Text: \", link[1])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to read a web page and print all of the links and their text\n\n### Input:\nNot applicable\n\n### Output:\nimport re\nfrom urllib.request import urlopen\n\nhtml = urlopen(\"http:\/\/www.example.com\/\").read().decode('utf-8')\nlinks = re.findall(\"<a href=(.*?)>(.*?)<\/a>\", html) \n \nfor link in links:\n    print(\"Link: \", link[0])\n    print(\"Text: \", link[1])"}
{"instruction":"Generate a Python script to automate web scraping of Wikipedia for extracting the data on the list of Presidents of the United States.","input":"Not applicable","output":"import requests\nfrom bs4 import BeautifulSoup\n\n# Make the request \nreq = requests.get('https:\/\/en.wikipedia.org\/wiki\/List_of_Presidents_of_the_United_States')\n\n# Parse html content\nsoup = BeautifulSoup(req.content, 'html.parser')\n\n# Find the table\ntable = soup.find('table', class_='wikitable')\n\n# Find all table rows\ntable_rows = table.find_all('tr')\n\n# Print each row and the contents of each cell \nfor tr in table_rows:\n    td = tr.find_all('td')\n    row = [i.text for i in td]\n    print(row)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to automate web scraping of Wikipedia for extracting the data on the list of Presidents of the United States.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Make the request \nreq = requests.get('https:\/\/en.wikipedia.org\/wiki\/List_of_Presidents_of_the_United_States')\n\n# Parse html content\nsoup = BeautifulSoup(req.content, 'html.parser')\n\n# Find the table\ntable = soup.find('table', class_='wikitable')\n\n# Find all table rows\ntable_rows = table.find_all('tr')\n\n# Print each row and the contents of each cell \nfor tr in table_rows:\n    td = tr.find_all('td')\n    row = [i.text for i in td]\n    print(row)"}
{"instruction":"Design a program in Python to reverse the words of a given string.","input":"String s = \"This is an example sentence.\"","output":"def reverseWords(s): \n\t# split the string \n\twords = s.split(' ') \n\t\n\t# reverse the words \n\twords = words[::-1] \n\t\n\t# join the words \n\treverseString = ' '.join(words)\n\t\n\treturn reverseString \n\ns = \"This is an example sentence.\"\nprint(reverseWords(s)) \n# Output: sentence. example an is This","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to reverse the words of a given string.\n\n### Input:\nString s = \"This is an example sentence.\"\n\n### Output:\ndef reverseWords(s): \n\t# split the string \n\twords = s.split(' ') \n\t\n\t# reverse the words \n\twords = words[::-1] \n\t\n\t# join the words \n\treverseString = ' '.join(words)\n\t\n\treturn reverseString \n\ns = \"This is an example sentence.\"\nprint(reverseWords(s)) \n# Output: sentence. example an is This"}
{"instruction":"Create a function in Python that takes an integer and prints all its factors.","input":"60","output":"def find_factors(num):\n  factors = []\n  for i in range(2, num):\n    if (num % i == 0):\n      factors.append(i)\n  print(f\"Factors of {num}: {factors}\")\n\nfind_factors(60)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes an integer and prints all its factors.\n\n### Input:\n60\n\n### Output:\ndef find_factors(num):\n  factors = []\n  for i in range(2, num):\n    if (num % i == 0):\n      factors.append(i)\n  print(f\"Factors of {num}: {factors}\")\n\nfind_factors(60)"}
{"instruction":"Generate code in Python to traverse a tree in pre-order.","input":"","output":"def preOrder(tree):\n    # Root\n    print(tree.data)\n  \n    # Left\n    if tree.left is not None:\n        preOrder(tree.left)\n  \n    # Right\n    if tree.right is not None:\n        preOrder(tree.right)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code in Python to traverse a tree in pre-order.\n\n### Input:\n\n\n### Output:\ndef preOrder(tree):\n    # Root\n    print(tree.data)\n  \n    # Left\n    if tree.left is not None:\n        preOrder(tree.left)\n  \n    # Right\n    if tree.right is not None:\n        preOrder(tree.right)"}
{"instruction":"Modify the following Python program to generate random numbers between 1 and 10 instead of 1 and 100.","input":"import random\n\nfor i in range(10):\n num = random.randint(1,100)\n print(num)","output":"import random\n\nfor i in range(10):\n num = random.randint(1,10)\n print(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following Python program to generate random numbers between 1 and 10 instead of 1 and 100.\n\n### Input:\nimport random\n\nfor i in range(10):\n num = random.randint(1,100)\n print(num)\n\n### Output:\nimport random\n\nfor i in range(10):\n num = random.randint(1,10)\n print(num)"}
{"instruction":"Design a Python program to compute the sum of the digits of a number.","input":"123","output":"def sum_of_digits(n):\n    r = 0\n    while (n > 0):\n        r += n % 10\n        n \/\/= 10\n    return r\n\nprint(sum_of_digits(123)) # 6","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to compute the sum of the digits of a number.\n\n### Input:\n123\n\n### Output:\ndef sum_of_digits(n):\n    r = 0\n    while (n > 0):\n        r += n % 10\n        n \/\/= 10\n    return r\n\nprint(sum_of_digits(123)) # 6"}
{"instruction":"Create a Python script to reverse each word in a sentence.","input":"Sentence = \"This is a test\"","output":"# Create a empty list to store the reversed sentences\n reversed_sentences = []\n\n# Get the list of words from the given sentence\nwords = sentence.split(' ')\n\n# Reverse each word\nfor word in words:\n  reversed_word = word[::-1]\n  reversed_sentences.append(reversed_word)\n\n# Print the reversed sentence\nreversed_sentence = ' '.join(reversed_sentences)\nprint(reversed_sentence) \n# Output: sihT si a tset","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to reverse each word in a sentence.\n\n### Input:\nSentence = \"This is a test\"\n\n### Output:\n# Create a empty list to store the reversed sentences\n reversed_sentences = []\n\n# Get the list of words from the given sentence\nwords = sentence.split(' ')\n\n# Reverse each word\nfor word in words:\n  reversed_word = word[::-1]\n  reversed_sentences.append(reversed_word)\n\n# Print the reversed sentence\nreversed_sentence = ' '.join(reversed_sentences)\nprint(reversed_sentence) \n# Output: sihT si a tset"}
{"instruction":"Create a Python function that takes in one integer argument and returns an integer with the absolute value.","input":"number = -3","output":"def getAbsoluteValue(number):\n    if (number < 0):\n        return number * -1\n    else:\n        return number\n\nprint(getAbsoluteValue(-3)) # Outputs 3","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes in one integer argument and returns an integer with the absolute value.\n\n### Input:\nnumber = -3\n\n### Output:\ndef getAbsoluteValue(number):\n    if (number < 0):\n        return number * -1\n    else:\n        return number\n\nprint(getAbsoluteValue(-3)) # Outputs 3"}
{"instruction":"Write an object-oriented program in Python to create a calculator.","input":"","output":"class Calculator:\n def __init__(self):\n pass\n\n def add(self, num1, num2):\n return num1 + num2\n\ndef subtract(self, num1, num2):\n return num1 - num2 \n\ndef multiply(self, num1, num2):\n return num1 * num2\n\ndef divide(self, num1, num2):\n return num1 \/ num2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an object-oriented program in Python to create a calculator.\n\n### Input:\n\n\n### Output:\nclass Calculator:\n def __init__(self):\n pass\n\n def add(self, num1, num2):\n return num1 + num2\n\ndef subtract(self, num1, num2):\n return num1 - num2 \n\ndef multiply(self, num1, num2):\n return num1 * num2\n\ndef divide(self, num1, num2):\n return num1 \/ num2"}
{"instruction":"Create a web service in Python that can save blog posts to a database.","input":"Not applicable","output":"import sqlite3\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('\/save', methods=['POST'])\ndef save():\n    # Extract request data\n    title = request.json['title']\n    content = request.json['content']\n\n    # Connect to database\n    conn = sqlite3.connect('blog.db')\n    c = conn.cursor()\n\n    # Save blog post to database\n    c.execute(\n        'INSERT INTO blog_posts(title, content) VALUES(?, ?)',\n        (title, content)\n    )\n    conn.commit()\n    conn.close()\n\n    return 'Blog post saved successfully!'\n\nif __name__ == '__main__':\n    app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web service in Python that can save blog posts to a database.\n\n### Input:\nNot applicable\n\n### Output:\nimport sqlite3\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('\/save', methods=['POST'])\ndef save():\n    # Extract request data\n    title = request.json['title']\n    content = request.json['content']\n\n    # Connect to database\n    conn = sqlite3.connect('blog.db')\n    c = conn.cursor()\n\n    # Save blog post to database\n    c.execute(\n        'INSERT INTO blog_posts(title, content) VALUES(?, ?)',\n        (title, content)\n    )\n    conn.commit()\n    conn.close()\n\n    return 'Blog post saved successfully!'\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"instruction":"Write a Python code to calculate the root mean square error (RMSE) between two given lists of numbers.","input":"A = [2.2, 3.07, 3.68, 1.33] \nB = [1.17, 2.47, 2.57, 0.0]","output":"def rmse(A, B):\n   \"\"\" \n   Calculates the root mean square error between two given lists of numbers. \n   \"\"\"\n   RMSE = 0\n   for i,j in zip(A,B):\n       RMSE += (i-j)**2\n   return (RMSE\/len(A))**(1\/2)\n\n\nif __name__ == '__main__':\n   A = [2.2, 3.07, 3.68, 1.33] \n   B = [1.17, 2.47, 2.57, 0.0]\n   print(rmse(A, B))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to calculate the root mean square error (RMSE) between two given lists of numbers.\n\n### Input:\nA = [2.2, 3.07, 3.68, 1.33] \nB = [1.17, 2.47, 2.57, 0.0]\n\n### Output:\ndef rmse(A, B):\n   \"\"\" \n   Calculates the root mean square error between two given lists of numbers. \n   \"\"\"\n   RMSE = 0\n   for i,j in zip(A,B):\n       RMSE += (i-j)**2\n   return (RMSE\/len(A))**(1\/2)\n\n\nif __name__ == '__main__':\n   A = [2.2, 3.07, 3.68, 1.33] \n   B = [1.17, 2.47, 2.57, 0.0]\n   print(rmse(A, B))"}
{"instruction":"Code an algorithm in Python for generating a random password.","input":"","output":"import string\nimport random\n\ndef generate_password(length):\n    chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(chars) for _ in range(length))\n    return password","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode an algorithm in Python for generating a random password.\n\n### Input:\n\n\n### Output:\nimport string\nimport random\n\ndef generate_password(length):\n    chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(chars) for _ in range(length))\n    return password"}
{"instruction":"Create a Python script that takes in an array with numbers and returns an array with all the even numbers in the original array.","input":"[1, 2, 3, 4, 5, 6, 7, 8]","output":"def even_numbers(numbers):\n \n  # Initialize an empty array to store the even numbers\n  even_numbers_array = []\n  \n  # Iterate through the numbers array\n  for number in numbers:\n    \n    # Check if the number is even\n    if number % 2 == 0:\n      \n      # If the number is even, add it to the even_numbers_array\n      even_numbers_array.append(number)\n      \n  # Return the even_numbers_array  \n  return even_numbers_array\n  \n# Test it\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(even_numbers(numbers)) # Should return [2, 4, 6, 8]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes in an array with numbers and returns an array with all the even numbers in the original array.\n\n### Input:\n[1, 2, 3, 4, 5, 6, 7, 8]\n\n### Output:\ndef even_numbers(numbers):\n \n  # Initialize an empty array to store the even numbers\n  even_numbers_array = []\n  \n  # Iterate through the numbers array\n  for number in numbers:\n    \n    # Check if the number is even\n    if number % 2 == 0:\n      \n      # If the number is even, add it to the even_numbers_array\n      even_numbers_array.append(number)\n      \n  # Return the even_numbers_array  \n  return even_numbers_array\n  \n# Test it\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(even_numbers(numbers)) # Should return [2, 4, 6, 8]"}
{"instruction":"Write a Python program to check an array if it contains consecutive integers.","input":"[2, 3, 4, 5, 6]","output":"def check_array_for_consecutive(arr):\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] != 1:\n            return False\n    return True\n\narr = [2, 3, 4, 5, 6]\nprint(check_array_for_consecutive(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to check an array if it contains consecutive integers.\n\n### Input:\n[2, 3, 4, 5, 6]\n\n### Output:\ndef check_array_for_consecutive(arr):\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] != 1:\n            return False\n    return True\n\narr = [2, 3, 4, 5, 6]\nprint(check_array_for_consecutive(arr))"}
{"instruction":"Construct a parser in Python to read a table from HTML.","input":"<table> \n    <tr>\n        <th>Name<\/th>\n        <th>Age<\/th>\n        <th>City<\/th>\n    <\/tr>\n    <tr>\n        <td>John<\/td>\n        <td>25<\/td>\n        <td>New York<\/td>\n    <\/tr>\n    <tr>\n        <td>Mary<\/td>\n        <td>22<\/td>\n        <td>Chicago<\/td>\n    <\/tr>\n<\/table>","output":"import lxml.html\n\ndef parse_table(html_str):\n    root = lxml.html.fromstring(html_str)\n\n    # locate the table\n    table = root.xpath('\/\/table')[0]\n\n    # collect header names\n    header_names = [th.text_content() for th in table.xpath('\/\/th')]\n\n    # collect data rows\n    data_rows = table.xpath('\/\/tr')[1:]\n    data_rows = [[td.text_content().strip() for td in row.xpath('td')]\n                    for row in data_rows]\n\n    # print the result\n    print(header_names)\n    print(data_rows)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a parser in Python to read a table from HTML.\n\n### Input:\n<table> \n    <tr>\n        <th>Name<\/th>\n        <th>Age<\/th>\n        <th>City<\/th>\n    <\/tr>\n    <tr>\n        <td>John<\/td>\n        <td>25<\/td>\n        <td>New York<\/td>\n    <\/tr>\n    <tr>\n        <td>Mary<\/td>\n        <td>22<\/td>\n        <td>Chicago<\/td>\n    <\/tr>\n<\/table>\n\n### Output:\nimport lxml.html\n\ndef parse_table(html_str):\n    root = lxml.html.fromstring(html_str)\n\n    # locate the table\n    table = root.xpath('\/\/table')[0]\n\n    # collect header names\n    header_names = [th.text_content() for th in table.xpath('\/\/th')]\n\n    # collect data rows\n    data_rows = table.xpath('\/\/tr')[1:]\n    data_rows = [[td.text_content().strip() for td in row.xpath('td')]\n                    for row in data_rows]\n\n    # print the result\n    print(header_names)\n    print(data_rows)"}
{"instruction":"Please write a code to extract the URL from a given string.","input":"There is a website: https:\/\/example.com","output":"#!\/usr\/bin\/python\nimport re\n\n# input string\nstring = \"There is a website: https:\/\/example.com\"\n\n# regex\npattern = r'(https?:\/\/\\S+)'\n\n# match url\nurl = re.findall(pattern, string)[0]\n\n# print result\nprint(url) # Output: https:\/\/example.com","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPlease write a code to extract the URL from a given string.\n\n### Input:\nThere is a website: https:\/\/example.com\n\n### Output:\n#!\/usr\/bin\/python\nimport re\n\n# input string\nstring = \"There is a website: https:\/\/example.com\"\n\n# regex\npattern = r'(https?:\/\/\\S+)'\n\n# match url\nurl = re.findall(pattern, string)[0]\n\n# print result\nprint(url) # Output: https:\/\/example.com"}
{"instruction":"Given a string, write a Python program to remove all leading and trailing whitespace characters.","input":"text = \"  This  is a text string   \"","output":"text = text.strip()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a string, write a Python program to remove all leading and trailing whitespace characters.\n\n### Input:\ntext = \"  This  is a text string   \"\n\n### Output:\ntext = text.strip()"}
{"instruction":"Write a Python program to delete vowels from a given string.","input":"'My name is John'","output":"def removeVowels(string): \n    vowels = ('a', 'e', 'i', 'o', 'u')  \n    new_string = '' \n    for char in string: \n        if char not in vowels: \n            new_string += char \n    return new_string \n\nstring = 'My name is John'\nremoveVowelString = removeVowels(string) \nprint(removeVowelString)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to delete vowels from a given string.\n\n### Input:\n'My name is John'\n\n### Output:\ndef removeVowels(string): \n    vowels = ('a', 'e', 'i', 'o', 'u')  \n    new_string = '' \n    for char in string: \n        if char not in vowels: \n            new_string += char \n    return new_string \n\nstring = 'My name is John'\nremoveVowelString = removeVowels(string) \nprint(removeVowelString)"}
{"instruction":"Write a Python program to search a given string for the first occurrence of a given substring.","input":"string = \"The quick brown fox\", substring = \"fox\"","output":"string = \"The quick brown fox\"\nsubstring = \"fox\"\n\ndef find_substring(string, substring):\n    index = string.find(substring)\n    if index == -1:\n        print(\"Substring not found!\")\n    else:\n        print(\"Substring found at index:\", index)\n\nfind_substring(string, substring)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to search a given string for the first occurrence of a given substring.\n\n### Input:\nstring = \"The quick brown fox\", substring = \"fox\"\n\n### Output:\nstring = \"The quick brown fox\"\nsubstring = \"fox\"\n\ndef find_substring(string, substring):\n    index = string.find(substring)\n    if index == -1:\n        print(\"Substring not found!\")\n    else:\n        print(\"Substring found at index:\", index)\n\nfind_substring(string, substring)"}
{"instruction":"Write a class in Python that can find the median of an unsorted list of numbers.","input":"","output":"class MedianFinder:\n def __init__(self):\n     self._data = []\n \n def add(self, num):\n     self._data.append(num)\n \n def find_median(self):\n     data = sorted(self._data)\n     n = len(data)\n     return (data[(n-1)\/\/2] + data[n\/\/2])\/2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a class in Python that can find the median of an unsorted list of numbers.\n\n### Input:\n\n\n### Output:\nclass MedianFinder:\n def __init__(self):\n     self._data = []\n \n def add(self, num):\n     self._data.append(num)\n \n def find_median(self):\n     data = sorted(self._data)\n     n = len(data)\n     return (data[(n-1)\/\/2] + data[n\/\/2])\/2"}
{"instruction":"Classify the following Python code as a linear search, binary search, or other.","input":"def search(items, item):\n    for i in range(len(items)):\n        if items[i] == item: \n            return i\n    return -1","output":"This is a linear search.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nClassify the following Python code as a linear search, binary search, or other.\n\n### Input:\ndef search(items, item):\n    for i in range(len(items)):\n        if items[i] == item: \n            return i\n    return -1\n\n### Output:\nThis is a linear search."}
{"instruction":"Create a Python script to calculate the Fibonacci numbers up to a given number.","input":"","output":"def Fibonacci(n): \n\tif n==0: \n\t\treturn 0\n\tif n==1: \n\t\treturn 1\n\telse: \n\t\treturn Fibonacci(n-1)+Fibonacci(n-2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to calculate the Fibonacci numbers up to a given number.\n\n### Input:\n\n\n### Output:\ndef Fibonacci(n): \n\tif n==0: \n\t\treturn 0\n\tif n==1: \n\t\treturn 1\n\telse: \n\t\treturn Fibonacci(n-1)+Fibonacci(n-2)"}
{"instruction":"Write a Python script to solve a partial differential equation.","input":"","output":"import numpy as np\nimport scipy.special\nfrom scipy.integrate import ode\n\ndef pde_solve(u0, t0, t1, dt):\n    # Define the right-hand side\n    def f(t, u, args):\n        dudt = args*u\n        return dudt\n    \n    # Create the solver\n    solver = ode(f).set_integrator('dopri5', method='adams')\n    solver.set_initial_value(u0, t0).set_f_params(args)\n    \n    # Solve the equation\n    t = t0\n    u = u0\n    while solver.successful() and solver.t < t1:\n        u = solver.integrate(solver.t + dt)\n        t = solver.t\n    \n    return u","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to solve a partial differential equation.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport scipy.special\nfrom scipy.integrate import ode\n\ndef pde_solve(u0, t0, t1, dt):\n    # Define the right-hand side\n    def f(t, u, args):\n        dudt = args*u\n        return dudt\n    \n    # Create the solver\n    solver = ode(f).set_integrator('dopri5', method='adams')\n    solver.set_initial_value(u0, t0).set_f_params(args)\n    \n    # Solve the equation\n    t = t0\n    u = u0\n    while solver.successful() and solver.t < t1:\n        u = solver.integrate(solver.t + dt)\n        t = solver.t\n    \n    return u"}
{"instruction":"Generate a program to find the longest palindromic substring in given string in Python.","input":"\"forgeeksskeegfor\"","output":"def longestPalSubstr(string):\n    maxLength = 1\n    start = 0\n    length = len(string)\n  \n    low = 0\n    high = 0\n  \n    # One by one consider every character as center point of even and length palindromes \n    for i in range(1, length): \n        # Find the longest even length palindrome with center points as i-1 and i. \n        low = i - 1\n        high = i \n        while low >= 0 and high < length and string[low] == string[high]: \n            if high - low + 1 > maxLength: \n                start = low \n                maxLength = high - low + 1\n            low -= 1\n            high += 1\n  \n        # Find the longest odd length palindrome with center point as i \n        low = i - 1\n        high = i + 1\n        while low >= 0 and high < length and string[low] == string[high]: \n            if high - low + 1 > maxLength: \n                start = low \n                maxLength = high - low + 1\n            low -= 1\n            high += 1\n  \n    print(\"Longest palindrome substring is:\", end = \"\") \n    print(string[start:start + maxLength]) \n\nstring = \"forgeeksskeegfor\"\nlongestPalSubstr(string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program to find the longest palindromic substring in given string in Python.\n\n### Input:\n\"forgeeksskeegfor\"\n\n### Output:\ndef longestPalSubstr(string):\n    maxLength = 1\n    start = 0\n    length = len(string)\n  \n    low = 0\n    high = 0\n  \n    # One by one consider every character as center point of even and length palindromes \n    for i in range(1, length): \n        # Find the longest even length palindrome with center points as i-1 and i. \n        low = i - 1\n        high = i \n        while low >= 0 and high < length and string[low] == string[high]: \n            if high - low + 1 > maxLength: \n                start = low \n                maxLength = high - low + 1\n            low -= 1\n            high += 1\n  \n        # Find the longest odd length palindrome with center point as i \n        low = i - 1\n        high = i + 1\n        while low >= 0 and high < length and string[low] == string[high]: \n            if high - low + 1 > maxLength: \n                start = low \n                maxLength = high - low + 1\n            low -= 1\n            high += 1\n  \n    print(\"Longest palindrome substring is:\", end = \"\") \n    print(string[start:start + maxLength]) \n\nstring = \"forgeeksskeegfor\"\nlongestPalSubstr(string)"}
{"instruction":"Write a Python program to find the longest increasing subsequence of a given sequence.","input":"sequence : [10, 4, 11, 5, 7, 8, 6, 22, 20]","output":"def lis(sequence): \n    lis = [1 for _ in range(len(sequence))] \n  \n    for i in range (1 , len(sequence)): \n        for j in range(0 , i): \n            if sequence[i] > sequence[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n  \n    for i in range(len(sequence)): \n        maximum = max(maximum , lis[i]) \n  \n    return maximum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the longest increasing subsequence of a given sequence.\n\n### Input:\nsequence : [10, 4, 11, 5, 7, 8, 6, 22, 20]\n\n### Output:\ndef lis(sequence): \n    lis = [1 for _ in range(len(sequence))] \n  \n    for i in range (1 , len(sequence)): \n        for j in range(0 , i): \n            if sequence[i] > sequence[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n  \n    for i in range(len(sequence)): \n        maximum = max(maximum , lis[i]) \n  \n    return maximum"}
{"instruction":"Explain what is the purpose of the reduce() function in Python.","input":"","output":"The reduce() function in Python is a part of the functools module. It receives a function and a sequence as arguments and applies the function to each item of the sequence, from left to right, cumulatively. The reduce() function reduces the sequence to a single value by combining items from the sequence using the function that is passed in as argument.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain what is the purpose of the reduce() function in Python.\n\n### Input:\n\n\n### Output:\nThe reduce() function in Python is a part of the functools module. It receives a function and a sequence as arguments and applies the function to each item of the sequence, from left to right, cumulatively. The reduce() function reduces the sequence to a single value by combining items from the sequence using the function that is passed in as argument."}
{"instruction":"Create a program in Python for ASCII conversion.","input":"String: \u201cHello World\u201d","output":"def ascii_conversion(string):\n return ''.join([f'{ord(c):08b}' for c in string])\n\nprint(ascii_conversion(\"Hello World\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python for ASCII conversion.\n\n### Input:\nString: \u201cHello World\u201d\n\n### Output:\ndef ascii_conversion(string):\n return ''.join([f'{ord(c):08b}' for c in string])\n\nprint(ascii_conversion(\"Hello World\"))"}
{"instruction":"Create a vectorized implementation in Python to solve the given problem.","input":"def add(a, b):\n    c = []\n    for i in range(len(a)):\n        c.append(a[i] + b[i])\n    return c","output":"import numpy as np\ndef add_vector(a, b):\n    return np.add(a,b)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a vectorized implementation in Python to solve the given problem.\n\n### Input:\ndef add(a, b):\n    c = []\n    for i in range(len(a)):\n        c.append(a[i] + b[i])\n    return c\n\n### Output:\nimport numpy as np\ndef add_vector(a, b):\n    return np.add(a,b)"}
{"instruction":"Optimize the existing Python script to improve the performance.","input":"import timeit\n\ndef find_value(l):\n    for v in l:\n        if v >= 0:\n            return v\n    return -1\n\nprint(timeit.timeit('find_value([-5, 0, 4, -1, 3])', number=10000))","output":"import timeit\n\ndef find_value(l):\n    for v in l:\n        if v >= 0:\n            # Early exit once value is found\n            return v\n    return -1\n\nprint(timeit.timeit('find_value([-5, 0, 4, -1, 3])', number=10000))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the existing Python script to improve the performance.\n\n### Input:\nimport timeit\n\ndef find_value(l):\n    for v in l:\n        if v >= 0:\n            return v\n    return -1\n\nprint(timeit.timeit('find_value([-5, 0, 4, -1, 3])', number=10000))\n\n### Output:\nimport timeit\n\ndef find_value(l):\n    for v in l:\n        if v >= 0:\n            # Early exit once value is found\n            return v\n    return -1\n\nprint(timeit.timeit('find_value([-5, 0, 4, -1, 3])', number=10000))"}
{"instruction":"Create a PostgreSQL database and Python script to store and retrieve books. The database should include a table for books (with fields for title and author), and the script should have functions to add a new book, view all books, and view a specific book.","input":"Not applicable","output":"import psycopg2\nimport sys\n\ntry:\n conn = psycopg2.connect(\"dbname = 'books' user = 'postgres' host = 'localhost' password = 'password'\")\nexcept psycopg2.Error as e:\n print e\n\ntry:\n cur = conn.cursor()\nexcept psycopg2.Error as e:\n print e\n\ndef createTable():\n query = \"CREATE TABLE books(title text, author text);\"\n try:\n cur.execute(query)\n except psycopg2.Error as e:\n print e\n\ndef addBook(title, author):\n query = \"INSERT INTO books (title, author) VALUES (%s, %s);\"\n try:\n cur.execute(query, (title, author))\n conn.commit()\n except psycopg2.Error as e:\n print e\n\ndef viewBooks():\n query = \"SELECT * FROM books;\"\n try:\n cur.execute(query)\n results = cur.fetchall()\n print results\n except psycopg2.Error as e:\n print e\n\ndef viewBook(title):\n query = \"SELECT * FROM books WHERE title = '%s';\" % title\n try:\n cur.execute(query)\n results = cur.fetchone()\n print results\n except psycopg2.Error as e:\n print e\n\nif __name__ == \"__main__\":\n createTable()\n addBook(\"The Catcher in the Rye\", \"J.D. Salinger\")\n viewBooks()\n viewBook(\"The Catcher in the Rye\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a PostgreSQL database and Python script to store and retrieve books. The database should include a table for books (with fields for title and author), and the script should have functions to add a new book, view all books, and view a specific book.\n\n### Input:\nNot applicable\n\n### Output:\nimport psycopg2\nimport sys\n\ntry:\n conn = psycopg2.connect(\"dbname = 'books' user = 'postgres' host = 'localhost' password = 'password'\")\nexcept psycopg2.Error as e:\n print e\n\ntry:\n cur = conn.cursor()\nexcept psycopg2.Error as e:\n print e\n\ndef createTable():\n query = \"CREATE TABLE books(title text, author text);\"\n try:\n cur.execute(query)\n except psycopg2.Error as e:\n print e\n\ndef addBook(title, author):\n query = \"INSERT INTO books (title, author) VALUES (%s, %s);\"\n try:\n cur.execute(query, (title, author))\n conn.commit()\n except psycopg2.Error as e:\n print e\n\ndef viewBooks():\n query = \"SELECT * FROM books;\"\n try:\n cur.execute(query)\n results = cur.fetchall()\n print results\n except psycopg2.Error as e:\n print e\n\ndef viewBook(title):\n query = \"SELECT * FROM books WHERE title = '%s';\" % title\n try:\n cur.execute(query)\n results = cur.fetchone()\n print results\n except psycopg2.Error as e:\n print e\n\nif __name__ == \"__main__\":\n createTable()\n addBook(\"The Catcher in the Rye\", \"J.D. Salinger\")\n viewBooks()\n viewBook(\"The Catcher in the Rye\")"}
{"instruction":"Create a Python program to list all the integers between a given range input.","input":"Start: 3\nEnd:10","output":"def list_integers(start, end):\n    integers_list=[]\n    while (start <= end):\n        integers_list.append(start)\n        start = start + 1\n    return integers_list\n  \nprint(\"The list of integers in the given range is:\")\nresult = list_integers(3,10)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to list all the integers between a given range input.\n\n### Input:\nStart: 3\nEnd:10\n\n### Output:\ndef list_integers(start, end):\n    integers_list=[]\n    while (start <= end):\n        integers_list.append(start)\n        start = start + 1\n    return integers_list\n  \nprint(\"The list of integers in the given range is:\")\nresult = list_integers(3,10)\nprint(result)"}
{"instruction":"Create a program in Python that prints \"Greetings\" for any name that is passed as an argument.","input":"Andrew","output":"import sys\n\nname = sys.argv[1]\n\nprint(\"Greetings, \"+name+\"!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that prints \"Greetings\" for any name that is passed as an argument.\n\n### Input:\nAndrew\n\n### Output:\nimport sys\n\nname = sys.argv[1]\n\nprint(\"Greetings, \"+name+\"!\")"}
{"instruction":"Design Python code to construct a 2D classification model.","input":"","output":"# Import libraries\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# Load the data\nX = np.loadtxt('data.csv', delimiter=', ',skiprows=1, usecols=[0,1])\ny = np.loadtxt('data.csv', delimiter=', ', skiprows=1, usecols=[2], dtype=str)\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=5)\n\n# Create and train the model\nmodel = LogisticRegression().fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Calculate accuracy\naccuracy = accuracy_score(y_pred, y_test)\nprint('Model accuracy:', accuracy)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign Python code to construct a 2D classification model.\n\n### Input:\n\n\n### Output:\n# Import libraries\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# Load the data\nX = np.loadtxt('data.csv', delimiter=', ',skiprows=1, usecols=[0,1])\ny = np.loadtxt('data.csv', delimiter=', ', skiprows=1, usecols=[2], dtype=str)\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=5)\n\n# Create and train the model\nmodel = LogisticRegression().fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Calculate accuracy\naccuracy = accuracy_score(y_pred, y_test)\nprint('Model accuracy:', accuracy)"}
{"instruction":"Write a Python program to encode an integer into a base64 string.","input":"","output":"import base64\n\ndef encode_base64(num):\n    return base64.b64encode(num.to_bytes(\n        (num.bit_length() + 7) \/\/ 8, 'big'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to encode an integer into a base64 string.\n\n### Input:\n\n\n### Output:\nimport base64\n\ndef encode_base64(num):\n    return base64.b64encode(num.to_bytes(\n        (num.bit_length() + 7) \/\/ 8, 'big'))"}
{"instruction":"Design a python program that takes in input from the command line and populates a dictionary with the data.","input":"","output":"import sys\n\ndata_dict = {}\n\n# Parse command line args\nfor i in range(len(sys.argv)):\n    if i == 0:\n        continue\n    args = sys.argv[i].split(\":\")\n    key = args[0]\n    value = args[1]\n    data_dict[key] = value\n\nprint(data_dict)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program that takes in input from the command line and populates a dictionary with the data.\n\n### Input:\n\n\n### Output:\nimport sys\n\ndata_dict = {}\n\n# Parse command line args\nfor i in range(len(sys.argv)):\n    if i == 0:\n        continue\n    args = sys.argv[i].split(\":\")\n    key = args[0]\n    value = args[1]\n    data_dict[key] = value\n\nprint(data_dict)"}
{"instruction":"Create a simple game in Python with two players.","input":"","output":"import random\nimport time\n \ndef get_player_name():\n \n    return input(\"What is your name? \")\ndef get_player_choice():\n \n    choice = input(\"\\nRock, Paper or Scissors (R\/P\/S)? \").upper()\n    \n    if choice not in [\"R\", \"P\", \"S\"]:\n        print(\"\\nNot an valid answer. try again\")\n        get_player_choice()\n    return choice\n \n \ndef main():\n    # get player info\n    player_1_name = get_player_name()\n    player_2_name = get_player_name()\n    print(f\"\\nWelcome {player_1_name} and {player_2_name}! Let's play Rock, Paper, Scissors!!\")\n    time.sleep(3)\n \n    # get player options\n    player_1_choice = get_player_choice()\n    player_2_choice = get_player_choice()\n \n    # operation\n    print(f\"\\n{player_1_name} puts {player_1_choice}.\")\n    print(f\"\\n{player_2_name} puts {player_2_choice}\")\n    time.sleep(3)\n    print(\"\\nShoot!\")\n    time.sleep(2)\n    print(\"\\nNow let's see!\")\n    time.sleep(3)\n    if player_1_choice == player_2_choice:\n        print(\"\\nIt's a tie!\")\n    elif player_1_choice == 'R' and player_2_choice == 'S':\n        print(f\"\\n{player_1_name} wins!\")\n    elif player_1_choice == 'S' and player_2_choice == 'R':\n        print(f\"\\n{player_2_name} wins!\")\n    elif player_1_choice == 'P' and player_2_choice == 'R':\n        print(f\"\\n{player_1_name} wins!\")\n    elif player_1_choice == 'R' and player_2_choice == 'P':\n        print(f\"\\n{player_2_name} wins!\")\n    else:\n        print(f\"\\n{player_2_name} wins!\")\n \nif __name__ == \"__main__\":\n    main()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple game in Python with two players.\n\n### Input:\n\n\n### Output:\nimport random\nimport time\n \ndef get_player_name():\n \n    return input(\"What is your name? \")\ndef get_player_choice():\n \n    choice = input(\"\\nRock, Paper or Scissors (R\/P\/S)? \").upper()\n    \n    if choice not in [\"R\", \"P\", \"S\"]:\n        print(\"\\nNot an valid answer. try again\")\n        get_player_choice()\n    return choice\n \n \ndef main():\n    # get player info\n    player_1_name = get_player_name()\n    player_2_name = get_player_name()\n    print(f\"\\nWelcome {player_1_name} and {player_2_name}! Let's play Rock, Paper, Scissors!!\")\n    time.sleep(3)\n \n    # get player options\n    player_1_choice = get_player_choice()\n    player_2_choice = get_player_choice()\n \n    # operation\n    print(f\"\\n{player_1_name} puts {player_1_choice}.\")\n    print(f\"\\n{player_2_name} puts {player_2_choice}\")\n    time.sleep(3)\n    print(\"\\nShoot!\")\n    time.sleep(2)\n    print(\"\\nNow let's see!\")\n    time.sleep(3)\n    if player_1_choice == player_2_choice:\n        print(\"\\nIt's a tie!\")\n    elif player_1_choice == 'R' and player_2_choice == 'S':\n        print(f\"\\n{player_1_name} wins!\")\n    elif player_1_choice == 'S' and player_2_choice == 'R':\n        print(f\"\\n{player_2_name} wins!\")\n    elif player_1_choice == 'P' and player_2_choice == 'R':\n        print(f\"\\n{player_1_name} wins!\")\n    elif player_1_choice == 'R' and player_2_choice == 'P':\n        print(f\"\\n{player_2_name} wins!\")\n    else:\n        print(f\"\\n{player_2_name} wins!\")\n \nif __name__ == \"__main__\":\n    main()"}
{"instruction":"Create a Python class to represent a bank account.","input":"","output":"class BankAccount:\n    def __init__(self, owner, balance):\n        self.owner = owner\n        self.balance = balance\n        \n    def deposit (self, amount):\n        self.balance += amount\n        return self.balance\n        \n    def withdraw (self, amount):\n        self.balance -= amount\n        return self.balance","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to represent a bank account.\n\n### Input:\n\n\n### Output:\nclass BankAccount:\n    def __init__(self, owner, balance):\n        self.owner = owner\n        self.balance = balance\n        \n    def deposit (self, amount):\n        self.balance += amount\n        return self.balance\n        \n    def withdraw (self, amount):\n        self.balance -= amount\n        return self.balance"}
{"instruction":"Develop a code that implements linear regression in Python.","input":"","output":"import numpy as np\n\n# define the data\n# X = [1, 2, 3, 4, 5]\n# Y = [2, 4, 5, 4, 5]\nX = np.array([1, 2, 3, 4, 5])\nY = np.array([2, 4, 5, 4, 5])\n\n# calculate the mean of x and y\nxmean = np.mean(X)\nymean = np.mean(Y)\n\n# calculate the equations\nnum = 0\nden = 0\n\nfor i in range(len(X)):\n    num += (X[i] - xmean)*(Y[i] - ymean)\n    den += (X[i] - xmean)**2\n\n# calculate m and c \nm = num\/den\nc = ymean - m*xmean\n\n# display the line equation \nprint(\"Regression line equation:\")\nprint(\"y = {}x + {}\".format(m, c))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a code that implements linear regression in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\n# define the data\n# X = [1, 2, 3, 4, 5]\n# Y = [2, 4, 5, 4, 5]\nX = np.array([1, 2, 3, 4, 5])\nY = np.array([2, 4, 5, 4, 5])\n\n# calculate the mean of x and y\nxmean = np.mean(X)\nymean = np.mean(Y)\n\n# calculate the equations\nnum = 0\nden = 0\n\nfor i in range(len(X)):\n    num += (X[i] - xmean)*(Y[i] - ymean)\n    den += (X[i] - xmean)**2\n\n# calculate m and c \nm = num\/den\nc = ymean - m*xmean\n\n# display the line equation \nprint(\"Regression line equation:\")\nprint(\"y = {}x + {}\".format(m, c))"}
{"instruction":"Build a python program that reads in two strings and combines them into a single string.","input":"","output":"def combine_strings(string1, string2):\n    combined_string = string1 + string2\n    return combined_string","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a python program that reads in two strings and combines them into a single string.\n\n### Input:\n\n\n### Output:\ndef combine_strings(string1, string2):\n    combined_string = string1 + string2\n    return combined_string"}
{"instruction":"Write a Python program to check if an array contains a particular value.","input":"Example array: [2, 3, 7, 8], Check for number: 7","output":"def check_value(arr, val):\n\tfor i in arr:\n\t\tif i == val:\n\t\t\treturn True \n\treturn False \n\narr = [2, 3, 7, 8]\nval = 7\n\nif(check_value(arr, val)):\n\tprint(\"Array contains number \" + str(val))\nelse:\n\tprint(\"Array does not contain number \" + str(val))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to check if an array contains a particular value.\n\n### Input:\nExample array: [2, 3, 7, 8], Check for number: 7\n\n### Output:\ndef check_value(arr, val):\n\tfor i in arr:\n\t\tif i == val:\n\t\t\treturn True \n\treturn False \n\narr = [2, 3, 7, 8]\nval = 7\n\nif(check_value(arr, val)):\n\tprint(\"Array contains number \" + str(val))\nelse:\n\tprint(\"Array does not contain number \" + str(val))"}
{"instruction":"Generate a Python code which calls a function to print the following array?","input":"[1,3,7,9,10]","output":"arr = [1,3,7,9,10]\n\ndef print_array(arr):\n    '''This function prints the elements of an array'''\n    for ele in arr:\n        print(ele)\n\nprint_array(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code which calls a function to print the following array?\n\n### Input:\n[1,3,7,9,10]\n\n### Output:\narr = [1,3,7,9,10]\n\ndef print_array(arr):\n    '''This function prints the elements of an array'''\n    for ele in arr:\n        print(ele)\n\nprint_array(arr)"}
{"instruction":"Generate a Python script to shuffle a list of numbers.","input":"[1,2,3,4,5]","output":"import random\n\ndef shuffle_list(numbers): \n    # Create a copy of the list to avoid mutating the original list\n    shuffled_list = list(numbers)\n    # Iterate over the list\n    for i in range(len(shuffled_list)):\n        # Generate a random index for the current position\n        rand_index = random.randint(0, len(shuffled_list)-1)\n        # Swap the two elements\n        shuffled_list[i], shuffled_list[rand_index] = shuffled_list[rand_index], shuffled_list[i]\n    \n    return shuffled_list\n\nexample_list = [1,2,3,4,5]\nprint(shuffle_list(example_list)) # Output: [3, 2, 5, 1, 4]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to shuffle a list of numbers.\n\n### Input:\n[1,2,3,4,5]\n\n### Output:\nimport random\n\ndef shuffle_list(numbers): \n    # Create a copy of the list to avoid mutating the original list\n    shuffled_list = list(numbers)\n    # Iterate over the list\n    for i in range(len(shuffled_list)):\n        # Generate a random index for the current position\n        rand_index = random.randint(0, len(shuffled_list)-1)\n        # Swap the two elements\n        shuffled_list[i], shuffled_list[rand_index] = shuffled_list[rand_index], shuffled_list[i]\n    \n    return shuffled_list\n\nexample_list = [1,2,3,4,5]\nprint(shuffle_list(example_list)) # Output: [3, 2, 5, 1, 4]"}
{"instruction":"Develop a class in Python to represent a 2D vector.","input":"","output":"class Vector2D:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n  \n  def __add__(self, other):\n    return Vector2D(self.x + other.x, self.y + other.y)\n  \n  def __sub__(self, other):\n    return Vector2D(self.x - other.x, self.y - other.y)\n  \n  def __mul__(self, scalar):\n    return Vector2D(self.x * scalar, self.y * scalar)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a class in Python to represent a 2D vector.\n\n### Input:\n\n\n### Output:\nclass Vector2D:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n  \n  def __add__(self, other):\n    return Vector2D(self.x + other.x, self.y + other.y)\n  \n  def __sub__(self, other):\n    return Vector2D(self.x - other.x, self.y - other.y)\n  \n  def __mul__(self, scalar):\n    return Vector2D(self.x * scalar, self.y * scalar)"}
{"instruction":"Write a Python program to remove all occurrences of a specific number in a given list.","input":"list = [2, 3, 4, 2, 5, 2, 6, 2, 7]","output":"def remove_num(myList, num):\n    return [x for x in myList if x != num]\n  \nremoved_list = remove_num(list, 2)\nprint(removed_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to remove all occurrences of a specific number in a given list.\n\n### Input:\nlist = [2, 3, 4, 2, 5, 2, 6, 2, 7]\n\n### Output:\ndef remove_num(myList, num):\n    return [x for x in myList if x != num]\n  \nremoved_list = remove_num(list, 2)\nprint(removed_list)"}
{"instruction":"Develop a chatbot in Python using Natural Language Processing and Machine Learning.","input":"Not applicable","output":"# Import libraries\nimport nltk\nfrom nltk.stem.lancaster import LancasterStemmer\nstemmer = LancasterStemmer()\n\n# Import datasets\nimport json\nwith open('data.json') as json_data:\n data = json.load(json_data)\n\n# Pre-process\nwords = []\nlabels = []\ndocs_x = []\ndocs_y = []\n\nfor intent in data[\"intents\"]:\n for pattern in intent[\"patterns\"]:\n  wrds = nltk.word_tokenize(pattern)\n  words.extend(wrds)\n  docs_x.append(wrds)\n  docs_y.append(intent[\"tag\"])\n\n  if intent[\"tag\"] not in labels:\n   labels.append(intent[\"tag\"])\n\n# Stem and remove duplicates\nwords = [stemmer.stem(w.lower()) for w in words if w != \"?\"]\nwords = sorted(list(set(words)))\n\n# Create bag-of-words\ntraining = []\noutput = []\n\nout_empty = [0 for _ in range(len(labels))]\n\nfor x, doc in enumerate(docs_x):\n bag = []\n\n wrds = [stemmer.stem(w) for w in doc]\n\n for w in words:\n  if w in wrds:\n   bag.append(1)\n  else:\n   bag.append(0)\n\n output_row = out_empty[:]\n output_row[labels.index(docs_y[x])] = 1\n\n training.append(bag)\n output.append(output_row)\n\n# Train\nimport numpy as np\ntraining = np.array(training)\noutput = np.array(output)\n\n# Create model\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation\n\nmodel = Sequential()\nmodel.add(Dense(128, input_shape=(len(training[0]),), activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(len(output[0]), activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nmodel.fit(training, output, epochs=1000, batch_size=8, verbose=1)\n\n# Save the model\nimport pickle\npickle.dump(model, open(\"model.pkl\", \"wb\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a chatbot in Python using Natural Language Processing and Machine Learning.\n\n### Input:\nNot applicable\n\n### Output:\n# Import libraries\nimport nltk\nfrom nltk.stem.lancaster import LancasterStemmer\nstemmer = LancasterStemmer()\n\n# Import datasets\nimport json\nwith open('data.json') as json_data:\n data = json.load(json_data)\n\n# Pre-process\nwords = []\nlabels = []\ndocs_x = []\ndocs_y = []\n\nfor intent in data[\"intents\"]:\n for pattern in intent[\"patterns\"]:\n  wrds = nltk.word_tokenize(pattern)\n  words.extend(wrds)\n  docs_x.append(wrds)\n  docs_y.append(intent[\"tag\"])\n\n  if intent[\"tag\"] not in labels:\n   labels.append(intent[\"tag\"])\n\n# Stem and remove duplicates\nwords = [stemmer.stem(w.lower()) for w in words if w != \"?\"]\nwords = sorted(list(set(words)))\n\n# Create bag-of-words\ntraining = []\noutput = []\n\nout_empty = [0 for _ in range(len(labels))]\n\nfor x, doc in enumerate(docs_x):\n bag = []\n\n wrds = [stemmer.stem(w) for w in doc]\n\n for w in words:\n  if w in wrds:\n   bag.append(1)\n  else:\n   bag.append(0)\n\n output_row = out_empty[:]\n output_row[labels.index(docs_y[x])] = 1\n\n training.append(bag)\n output.append(output_row)\n\n# Train\nimport numpy as np\ntraining = np.array(training)\noutput = np.array(output)\n\n# Create model\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation\n\nmodel = Sequential()\nmodel.add(Dense(128, input_shape=(len(training[0]),), activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(len(output[0]), activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nmodel.fit(training, output, epochs=1000, batch_size=8, verbose=1)\n\n# Save the model\nimport pickle\npickle.dump(model, open(\"model.pkl\", \"wb\"))"}
{"instruction":"Write a Python program to search a list of strings for the longest common substring.","input":"strings = [\"abcdmno\", \"abcdxyz\", \"bcdefmno\", \"abccyz\"]","output":"def longest_common_substring(strings):\n longest_string = \"\"\n for s in strings:\n longest_string = longest_string if longest_string else s\n for i in range(len(s)):\n for j in range(i, len(s)):\n if all(s[i:j+1] in s2 for s2 in strings) and len(s[i:j+1]) > len(longest_string):\n longest_string = s[i:j+1]\n return longest_string\n\nprint(longest_common_substring(strings))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to search a list of strings for the longest common substring.\n\n### Input:\nstrings = [\"abcdmno\", \"abcdxyz\", \"bcdefmno\", \"abccyz\"]\n\n### Output:\ndef longest_common_substring(strings):\n longest_string = \"\"\n for s in strings:\n longest_string = longest_string if longest_string else s\n for i in range(len(s)):\n for j in range(i, len(s)):\n if all(s[i:j+1] in s2 for s2 in strings) and len(s[i:j+1]) > len(longest_string):\n longest_string = s[i:j+1]\n return longest_string\n\nprint(longest_common_substring(strings))"}
{"instruction":"Design an algorithm in Python to check the validity of a 10-digit phone number.","input":"Phone number = 8888881111","output":"# Check to make sure the length of the phone number is 10\ndef check_phone_number(phone_number):\n    if len(phone_number) != 10:\n        return False\n\n    # Check to make sure all characters are digits\n    for c in phone_number:\n        if c < '0' or c > '9':\n            return False\n\n    # Phone number is valid\n    return True\n\n# Test the function\nprint(check_phone_number('8888881111')) # True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to check the validity of a 10-digit phone number.\n\n### Input:\nPhone number = 8888881111\n\n### Output:\n# Check to make sure the length of the phone number is 10\ndef check_phone_number(phone_number):\n    if len(phone_number) != 10:\n        return False\n\n    # Check to make sure all characters are digits\n    for c in phone_number:\n        if c < '0' or c > '9':\n            return False\n\n    # Phone number is valid\n    return True\n\n# Test the function\nprint(check_phone_number('8888881111')) # True"}
{"instruction":"Optimize the following code in Python.","input":"def largest_elements(arr):\n    max_vals = []\n    while len(arr) > 0:\n        max_value = 0\n        for item in arr:\n            if item > max_value:\n                max_value = item\n        max_vals.append(max_value)\n        i = 0\n        while i < len(arr):\n            if arr[i] == max_value:\n                arr.remove(arr[i])\n                i -= 1\n            i += 1\n    return max_vals","output":"def largest_elements(arr):\n    \n    max_vals = []\n    while arr:\n        max_value = max(arr)\n        max_vals.append(max_value)\n        while max_value in arr:\n            arr.remove(max_value)\n    return max_vals","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following code in Python.\n\n### Input:\ndef largest_elements(arr):\n    max_vals = []\n    while len(arr) > 0:\n        max_value = 0\n        for item in arr:\n            if item > max_value:\n                max_value = item\n        max_vals.append(max_value)\n        i = 0\n        while i < len(arr):\n            if arr[i] == max_value:\n                arr.remove(arr[i])\n                i -= 1\n            i += 1\n    return max_vals\n\n### Output:\ndef largest_elements(arr):\n    \n    max_vals = []\n    while arr:\n        max_value = max(arr)\n        max_vals.append(max_value)\n        while max_value in arr:\n            arr.remove(max_value)\n    return max_vals"}
{"instruction":"Generate a Python script that can classify emails based on their content","input":"","output":"import re\n\ndef classify_email(subject, body):\n    # Check the subject line for keywords\n    flags = check_subject(subject)\n\n    # Check the body for keywords\n    if not flags:\n        flags = check_body(body)\n\n    # return flags\n    return flags\n\ndef check_subject(subject):\n    flags = []\n    # Check for spam\n    spam_keywords = ['***SPAM***', '***ADV***']\n    for keyword in spam_keywords:\n        if re.search(keyword, subject):\n            flags.append('SPAM')\n            break\n\n    # Check for purchases\n    purchase_keywords = ['order', 'purchase', 'shipping', 'payment']\n    for keyword in purchase_keywords:\n        if re.search(keyword, subject):\n            flags.append('PURCHASE')\n            break\n\n    return flags\n\ndef check_body(body):\n    flags = []\n    # Check for offensive language\n    offensive_words = ['crap', 'stupid', 'idiot', 'shut up']\n    for word in offensive_words:\n        if re.search(word, body):\n            flags.append('OFFENSIVE')\n            break\n\n    # Check for marketing content\n    marketing_keywords = ['buy now', 'limited time', 'special offer', 'free']\n    for keyword in marketing_keywords:\n        if re.search(keyword, body):\n            flags.append('MARKETING')\n            break\n\n    return flags","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script that can classify emails based on their content\n\n### Input:\n\n\n### Output:\nimport re\n\ndef classify_email(subject, body):\n    # Check the subject line for keywords\n    flags = check_subject(subject)\n\n    # Check the body for keywords\n    if not flags:\n        flags = check_body(body)\n\n    # return flags\n    return flags\n\ndef check_subject(subject):\n    flags = []\n    # Check for spam\n    spam_keywords = ['***SPAM***', '***ADV***']\n    for keyword in spam_keywords:\n        if re.search(keyword, subject):\n            flags.append('SPAM')\n            break\n\n    # Check for purchases\n    purchase_keywords = ['order', 'purchase', 'shipping', 'payment']\n    for keyword in purchase_keywords:\n        if re.search(keyword, subject):\n            flags.append('PURCHASE')\n            break\n\n    return flags\n\ndef check_body(body):\n    flags = []\n    # Check for offensive language\n    offensive_words = ['crap', 'stupid', 'idiot', 'shut up']\n    for word in offensive_words:\n        if re.search(word, body):\n            flags.append('OFFENSIVE')\n            break\n\n    # Check for marketing content\n    marketing_keywords = ['buy now', 'limited time', 'special offer', 'free']\n    for keyword in marketing_keywords:\n        if re.search(keyword, body):\n            flags.append('MARKETING')\n            break\n\n    return flags"}
{"instruction":"Create a REST API endpoint in Python with a GET route to query a database. The route should accept a 'name' as a query parameter and return a list of results from the query.","input":"name= 'John'","output":"@app.route('\/api\/search', methods=['GET'])\ndef search():\nname = request.args.get('name')\nquery = _db.execute(\"SELECT * FROM users WHERE name=?\", [name]).fetchall()\nreturn jsonify(query)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API endpoint in Python with a GET route to query a database. The route should accept a 'name' as a query parameter and return a list of results from the query.\n\n### Input:\nname= 'John'\n\n### Output:\n@app.route('\/api\/search', methods=['GET'])\ndef search():\nname = request.args.get('name')\nquery = _db.execute(\"SELECT * FROM users WHERE name=?\", [name]).fetchall()\nreturn jsonify(query)"}
{"instruction":"Which python library can be used to access the Twitter API?","input":"","output":"The most popular Python library to access the Twitter API is the \"tweepy\" library. It provides a convenient way to access the Twitter API and provides features such as searching, streaming, and user authentication.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhich python library can be used to access the Twitter API?\n\n### Input:\n\n\n### Output:\nThe most popular Python library to access the Twitter API is the \"tweepy\" library. It provides a convenient way to access the Twitter API and provides features such as searching, streaming, and user authentication."}
{"instruction":"Write a Python program to implement a Hangman game with a limited set of valid words.","input":"Valid words: [\"apple\", \"banana\", \"orange\"]","output":"valid_words = [\"apple\", \"banana\", \"orange\"]\n\nMAX_GUESSES = 6\n\nclass Hangman:\n    def __init__(self):\n        self.secret_word = self.get_random_word()\n        self.incorrect_guesses = 0\n        self.masked_word = ['_'] * len(self.secret_word)\n        self.guessed_letters = []\n    \n    def get_random_word(self):\n        return random.choice(valid_words)\n    \n    def guess_letter(self, letter):\n        self.guessed_letters.append(letter)\n        if letter in self.secret_word:\n            for i, letter in enumerate(self.secret_word):\n                if letter == self.guessed_letters[-1]:\n                    self.masked_word[i] = letter\n            return True\n        else:\n            self.incorrect_guesses += 1\n            return False\n            \n    def is_game_over(self):\n        return self.incorrect_guesses >= MAX_GUESSES or '_' not in self.masked_word","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to implement a Hangman game with a limited set of valid words.\n\n### Input:\nValid words: [\"apple\", \"banana\", \"orange\"]\n\n### Output:\nvalid_words = [\"apple\", \"banana\", \"orange\"]\n\nMAX_GUESSES = 6\n\nclass Hangman:\n    def __init__(self):\n        self.secret_word = self.get_random_word()\n        self.incorrect_guesses = 0\n        self.masked_word = ['_'] * len(self.secret_word)\n        self.guessed_letters = []\n    \n    def get_random_word(self):\n        return random.choice(valid_words)\n    \n    def guess_letter(self, letter):\n        self.guessed_letters.append(letter)\n        if letter in self.secret_word:\n            for i, letter in enumerate(self.secret_word):\n                if letter == self.guessed_letters[-1]:\n                    self.masked_word[i] = letter\n            return True\n        else:\n            self.incorrect_guesses += 1\n            return False\n            \n    def is_game_over(self):\n        return self.incorrect_guesses >= MAX_GUESSES or '_' not in self.masked_word"}
{"instruction":"Create a Python program prompt the user for two numbers and compute the product of these two numbers using recursive and non-recursive algorithms.","input":"","output":"# Non-recursive algorithm\nnum_1 = int(input('Please enter the first number: '))\nnum_2 = int(input('Please enter the second number: '))\n\ndef prod_non_recursive(num_1, num_2):\n    product = 1\n    while num_2 > 0:\n        product = product * num_1\n        num_2 = num_2 - 1\n    return product\n\nproduct_non_recursive = prod_non_recursive(num_1, num_2)\nprint('The product of {} and {} is {}.'.format(num_1, num_2, product_non_recursive))\n\n\n# Recursive algorithm\ndef prod_recursive(num_1, num_2):\n    if num_2 == 0:\n        return 1\n    else:\n        return num_1 * prod_recursive(num_1, num_2 - 1)\n\nproduct_recursive = prod_recursive(num_1, num_2)\nprint('The product of {} and {} is {}.'.format(num_1, num_2, product_recursive))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program prompt the user for two numbers and compute the product of these two numbers using recursive and non-recursive algorithms.\n\n### Input:\n\n\n### Output:\n# Non-recursive algorithm\nnum_1 = int(input('Please enter the first number: '))\nnum_2 = int(input('Please enter the second number: '))\n\ndef prod_non_recursive(num_1, num_2):\n    product = 1\n    while num_2 > 0:\n        product = product * num_1\n        num_2 = num_2 - 1\n    return product\n\nproduct_non_recursive = prod_non_recursive(num_1, num_2)\nprint('The product of {} and {} is {}.'.format(num_1, num_2, product_non_recursive))\n\n\n# Recursive algorithm\ndef prod_recursive(num_1, num_2):\n    if num_2 == 0:\n        return 1\n    else:\n        return num_1 * prod_recursive(num_1, num_2 - 1)\n\nproduct_recursive = prod_recursive(num_1, num_2)\nprint('The product of {} and {} is {}.'.format(num_1, num_2, product_recursive))"}
{"instruction":"This code compares CheckM estimates. To use it, run the script with three arguments: the path to a file indicating genomes that failed QC, the path to a file with alternative CheckM estimates, and the path to an output file. The script will read in the two input files, compare the estimates, and output the results to the specified output file.","input":"","output":"#!\/usr\/bin\/env python\n\n###############################################################################\n#                                                                             #\n#    This program is free software: you can redistribute it and\/or modify     #\n#    it under the terms of the GNU General Public License as published by     #\n#    the Free Software Foundation, either version 3 of the License, or        #\n#    (at your option) any later version.                                      #\n#                                                                             #\n#    This program is distributed in the hope that it will be useful,          #\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\n#    GNU General Public License for more details.                             #\n#                                                                             #\n#    You should have received a copy of the GNU General Public License        #\n#    along with this program. If not, see <http:\/\/www.gnu.org\/licenses\/>.     #\n#                                                                             #\n###############################################################################\n\n__prog_name__ = 'checkm_compare.py'\n__prog_desc__ = 'compare CheckM estimates'\n\n__author__ = 'Donovan Parks'\n__copyright__ = 'Copyright 2018'\n__credits__ = ['Donovan Parks']\n__license__ = 'GPL3'\n__version__ = '0.0.1'\n__maintainer__ = 'Donovan Parks'\n__email__ = 'donovan.parks@gmail.com'\n__status__ = 'Development'\n\nimport os\nimport sys\nimport argparse\nimport tempfile\nimport ntpath\nimport shutil\n\n\nclass Compare(object):\n    \"\"\"Compare CheckM estimates.\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialization.\"\"\"\n        pass\n\n    def run(self, qc_failed_file, checkm_qa_files, output_file):\n        \"\"\"compare CheckM estimates.\"\"\"\n        \n        orig_estimates = {}\n        with open(qc_failed_file) as f:\n            header = f.readline().strip().split('\\t')\n            \n            acc_index = header.index('Accession')\n            comp_index = header.index('Completeness (%)')\n            cont_index = header.index('Contamination (%)')\n            \n            for line in f:\n                line_split = line.strip().split('\\t')\n                \n                gid = line_split[acc_index]\n                comp = float(line_split[comp_index])\n                cont = float(line_split[cont_index])\n                \n                orig_estimates[gid] = (comp, cont)\n                \n        new_estimates = {}\n        with open(checkm_qa_files) as f:\n            header = f.readline().strip().split('\\t')\n            \n            comp_index = header.index('Completeness')\n            cont_index = header.index('Contamination')\n            \n            for line in f:\n                line_split = line.strip().split('\\t')\n                \n                gid = line_split[0].replace('_ncbi_proteins', '')\n                comp = float(line_split[comp_index])\n                cont = float(line_split[cont_index])\n                \n                new_estimates[gid] = (comp, cont)\n        \n        fout = open(output_file, 'w')\n        fout.write('Accession\\tOriginal completeness\\tNew completeness\\tOriginal contamination\\tNew contamination\\n')\n        for gid in new_estimates:\n            orig_comp, orig_cont = orig_estimates[gid]\n            new_comp, new_cont = new_estimates[gid]\n            \n            orig_quality = orig_comp - 5*orig_cont\n            if orig_quality >= 50:\n                continue\n                \n            new_quality = new_comp - 5*new_cont\n            if new_quality < 50:\n                continue\n                \n            if (new_comp - orig_comp > 5\n                or new_cont - orig_cont < -1):\n                print(gid, orig_comp, new_comp, orig_cont, new_cont)\n                fout.write('%s\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n' % (gid, orig_comp, new_comp, orig_cont, new_cont))\n        fout.close()\n\nif __name__ == '__main__':\n    print(__prog_name__ + ' v' + __version__ + ': ' + __prog_desc__)\n    print('  by ' + __author__ + ' (' + __email__ + ')' + '\\n')\n\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('qc_failed_file', help='file indicating genomes that failed QC')\n    parser.add_argument('checkm_qa_files', help='file with alternative CheckM estimates')\n    parser.add_argument('output_file', help='output directory')\n\n    args = parser.parse_args()\n\n    try:\n        p = Compare()\n        p.run(args.qc_failed_file, args.checkm_qa_files, args.output_file)\n    except SystemExit:\n        print(\"\\nControlled exit resulting from an unrecoverable error or warning.\")\n    except:\n        print(\"\\nUnexpected error:\", sys.exc_info()[0])\n        raise\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code compares CheckM estimates. To use it, run the script with three arguments: the path to a file indicating genomes that failed QC, the path to a file with alternative CheckM estimates, and the path to an output file. The script will read in the two input files, compare the estimates, and output the results to the specified output file.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n\n###############################################################################\n#                                                                             #\n#    This program is free software: you can redistribute it and\/or modify     #\n#    it under the terms of the GNU General Public License as published by     #\n#    the Free Software Foundation, either version 3 of the License, or        #\n#    (at your option) any later version.                                      #\n#                                                                             #\n#    This program is distributed in the hope that it will be useful,          #\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\n#    GNU General Public License for more details.                             #\n#                                                                             #\n#    You should have received a copy of the GNU General Public License        #\n#    along with this program. If not, see <http:\/\/www.gnu.org\/licenses\/>.     #\n#                                                                             #\n###############################################################################\n\n__prog_name__ = 'checkm_compare.py'\n__prog_desc__ = 'compare CheckM estimates'\n\n__author__ = 'Donovan Parks'\n__copyright__ = 'Copyright 2018'\n__credits__ = ['Donovan Parks']\n__license__ = 'GPL3'\n__version__ = '0.0.1'\n__maintainer__ = 'Donovan Parks'\n__email__ = 'donovan.parks@gmail.com'\n__status__ = 'Development'\n\nimport os\nimport sys\nimport argparse\nimport tempfile\nimport ntpath\nimport shutil\n\n\nclass Compare(object):\n    \"\"\"Compare CheckM estimates.\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialization.\"\"\"\n        pass\n\n    def run(self, qc_failed_file, checkm_qa_files, output_file):\n        \"\"\"compare CheckM estimates.\"\"\"\n        \n        orig_estimates = {}\n        with open(qc_failed_file) as f:\n            header = f.readline().strip().split('\\t')\n            \n            acc_index = header.index('Accession')\n            comp_index = header.index('Completeness (%)')\n            cont_index = header.index('Contamination (%)')\n            \n            for line in f:\n                line_split = line.strip().split('\\t')\n                \n                gid = line_split[acc_index]\n                comp = float(line_split[comp_index])\n                cont = float(line_split[cont_index])\n                \n                orig_estimates[gid] = (comp, cont)\n                \n        new_estimates = {}\n        with open(checkm_qa_files) as f:\n            header = f.readline().strip().split('\\t')\n            \n            comp_index = header.index('Completeness')\n            cont_index = header.index('Contamination')\n            \n            for line in f:\n                line_split = line.strip().split('\\t')\n                \n                gid = line_split[0].replace('_ncbi_proteins', '')\n                comp = float(line_split[comp_index])\n                cont = float(line_split[cont_index])\n                \n                new_estimates[gid] = (comp, cont)\n        \n        fout = open(output_file, 'w')\n        fout.write('Accession\\tOriginal completeness\\tNew completeness\\tOriginal contamination\\tNew contamination\\n')\n        for gid in new_estimates:\n            orig_comp, orig_cont = orig_estimates[gid]\n            new_comp, new_cont = new_estimates[gid]\n            \n            orig_quality = orig_comp - 5*orig_cont\n            if orig_quality >= 50:\n                continue\n                \n            new_quality = new_comp - 5*new_cont\n            if new_quality < 50:\n                continue\n                \n            if (new_comp - orig_comp > 5\n                or new_cont - orig_cont < -1):\n                print(gid, orig_comp, new_comp, orig_cont, new_cont)\n                fout.write('%s\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n' % (gid, orig_comp, new_comp, orig_cont, new_cont))\n        fout.close()\n\nif __name__ == '__main__':\n    print(__prog_name__ + ' v' + __version__ + ': ' + __prog_desc__)\n    print('  by ' + __author__ + ' (' + __email__ + ')' + '\\n')\n\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('qc_failed_file', help='file indicating genomes that failed QC')\n    parser.add_argument('checkm_qa_files', help='file with alternative CheckM estimates')\n    parser.add_argument('output_file', help='output directory')\n\n    args = parser.parse_args()\n\n    try:\n        p = Compare()\n        p.run(args.qc_failed_file, args.checkm_qa_files, args.output_file)\n    except SystemExit:\n        print(\"\\nControlled exit resulting from an unrecoverable error or warning.\")\n    except:\n        print(\"\\nUnexpected error:\", sys.exc_info()[0])\n        raise\n"}
{"instruction":"Write a Python function to return the area of an equilateral triangle.","input":"","output":"def area_equilateral(side):\n    \"\"\"Calculate the area of an equilateral triangle from the side length.\"\"\"\n    return (math.sqrt(3)\/4)*side**2;","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to return the area of an equilateral triangle.\n\n### Input:\n\n\n### Output:\ndef area_equilateral(side):\n    \"\"\"Calculate the area of an equilateral triangle from the side length.\"\"\"\n    return (math.sqrt(3)\/4)*side**2;"}
{"instruction":"Develop a web scraping program using Python to extract the names and contact information of 10 randomly selected people from a popular website.","input":"Not applicable","output":"import requests\nimport random\nfrom bs4 import BeautifulSoup\n\n#specify website url\nwebsite_url = 'https:\/\/www.example.com\/people'\n\n#scraping function\ndef scrape_contacts():\n    #load website\n    html = requests.get(website_url).text\n    #parse html\n    soup = BeautifulSoup(html, 'html.parser')\n    contacts = []\n    #extract contact information\n    for contact in soup.find_all('div', {'class': 'contact'}):\n        name = contact.find('h3').text\n        email = contact.find('p', {'class': 'email'}).text\n        phone = contact.find('p', {'class': 'phone'}).text\n        contacts.append({'name': name, 'email': email, 'phone': phone})\n    #randomly select 10 contacts\n    return random.sample(contacts, 10)\n\nscraped_contacts = scrape_contacts()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a web scraping program using Python to extract the names and contact information of 10 randomly selected people from a popular website.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nimport random\nfrom bs4 import BeautifulSoup\n\n#specify website url\nwebsite_url = 'https:\/\/www.example.com\/people'\n\n#scraping function\ndef scrape_contacts():\n    #load website\n    html = requests.get(website_url).text\n    #parse html\n    soup = BeautifulSoup(html, 'html.parser')\n    contacts = []\n    #extract contact information\n    for contact in soup.find_all('div', {'class': 'contact'}):\n        name = contact.find('h3').text\n        email = contact.find('p', {'class': 'email'}).text\n        phone = contact.find('p', {'class': 'phone'}).text\n        contacts.append({'name': name, 'email': email, 'phone': phone})\n    #randomly select 10 contacts\n    return random.sample(contacts, 10)\n\nscraped_contacts = scrape_contacts()"}
{"instruction":"Develop an AI-based recommendation system in Python for a movies website.","input":"Not applicable","output":"# import the necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Read in the movie data\nmovies = pd.read_csv('movies.csv')\n\n# Vectorize the movie title\nvectorizer = TfidfVectorizer(tokenizer=lambda x: x.split(' '))\ntfidf_matrix = vectorizer.fit_transform(movies['title']).toarray()\n\n# Calculate the cosine similarity matrix\ncosine_similarity_matrix = cosine_similarity(tfidf_matrix)\n\n# Generate a list of recommended movies\ndef recommend(movie_title):\n recommended_movies = []\n \n # Find the index of the movie by title\n movie_index = movies[movies['title'] == movie_title].index[0]\n \n # Generate a list of movies with cosine similarities > 0\n for i in range(len(cosine_similarity_matrix[movie_index])):\n  if cosine_similarity_matrix[movie_index][i] > 0:\n   recommended_movies.append(i)\n   \n # Return the titles of the recommended movies\n return movies.iloc[recommended_movies]['title']\n\n# Testing \nprint(recommend('The Godfather'))\n# Output: The Shawshank Redemption, The Godfather Part II, Apocalypse Now","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI-based recommendation system in Python for a movies website.\n\n### Input:\nNot applicable\n\n### Output:\n# import the necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Read in the movie data\nmovies = pd.read_csv('movies.csv')\n\n# Vectorize the movie title\nvectorizer = TfidfVectorizer(tokenizer=lambda x: x.split(' '))\ntfidf_matrix = vectorizer.fit_transform(movies['title']).toarray()\n\n# Calculate the cosine similarity matrix\ncosine_similarity_matrix = cosine_similarity(tfidf_matrix)\n\n# Generate a list of recommended movies\ndef recommend(movie_title):\n recommended_movies = []\n \n # Find the index of the movie by title\n movie_index = movies[movies['title'] == movie_title].index[0]\n \n # Generate a list of movies with cosine similarities > 0\n for i in range(len(cosine_similarity_matrix[movie_index])):\n  if cosine_similarity_matrix[movie_index][i] > 0:\n   recommended_movies.append(i)\n   \n # Return the titles of the recommended movies\n return movies.iloc[recommended_movies]['title']\n\n# Testing \nprint(recommend('The Godfather'))\n# Output: The Shawshank Redemption, The Godfather Part II, Apocalypse Now"}
{"instruction":"Create a python program to classify if a given string contains any numbers.","input":"string = \"password123\"","output":"import re\n\ndef contains_numbers(string):\n    \"\"\"Classify if a given string contains any numbers.\"\"\"\n    return bool(re.search(r'\\d', string))\n\n# Usage Example\nstring = \"password123\"\ncontains_numbers = contains_numbers(string)\nprint(contains_numbers)  # True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to classify if a given string contains any numbers.\n\n### Input:\nstring = \"password123\"\n\n### Output:\nimport re\n\ndef contains_numbers(string):\n    \"\"\"Classify if a given string contains any numbers.\"\"\"\n    return bool(re.search(r'\\d', string))\n\n# Usage Example\nstring = \"password123\"\ncontains_numbers = contains_numbers(string)\nprint(contains_numbers)  # True"}
{"instruction":"Create an algorithm in Python for removing all duplicates from an array.","input":"arr = [1, 2, 4, 4, 1, 5, 2]","output":"def removeDuplicates(arr): \n    res = [] \n    seen = set() \n    for e in arr:\n        if e not in seen: \n            res.append(e) \n            seen.add(e) \n      \n    return res \n  \nprint(removeDuplicates([1, 2, 4, 4, 1, 5, 2]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python for removing all duplicates from an array.\n\n### Input:\narr = [1, 2, 4, 4, 1, 5, 2]\n\n### Output:\ndef removeDuplicates(arr): \n    res = [] \n    seen = set() \n    for e in arr:\n        if e not in seen: \n            res.append(e) \n            seen.add(e) \n      \n    return res \n  \nprint(removeDuplicates([1, 2, 4, 4, 1, 5, 2]))"}
{"instruction":"Output a code in Python to find the second largest number in a list provided as input.","input":"","output":"def second_largest(list): \n    first = second = float('-inf')\n    for num in list:\n        if num > first: \n            second = first \n            first = num \n        elif num > second and num != first: \n            second = num     \n    return second","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOutput a code in Python to find the second largest number in a list provided as input.\n\n### Input:\n\n\n### Output:\ndef second_largest(list): \n    first = second = float('-inf')\n    for num in list:\n        if num > first: \n            second = first \n            first = num \n        elif num > second and num != first: \n            second = num     \n    return second"}
{"instruction":"Implement an algorithm in Python to insert a specified element into a sorted array.","input":"[1, 2, 6, 8], element = 3","output":"def insert_element(arr, element):\n    # Find insertion index\n    i = 0\n    while i < len(arr) and element > arr[i]:\n        i += 1\n \n    # Shift array elements\n    j = len(arr) - 1\n    while j >= i:\n        arr[j + 1] = arr[j]\n        j -= 1\n\n    # Insert element\n    arr[i] = element\n\n    return arr\n\narr = [1, 2, 6, 8]\nelement = 3\n\ninsert_element(arr, element)\n\n# Output: [1, 2, 3, 6, 8]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm in Python to insert a specified element into a sorted array.\n\n### Input:\n[1, 2, 6, 8], element = 3\n\n### Output:\ndef insert_element(arr, element):\n    # Find insertion index\n    i = 0\n    while i < len(arr) and element > arr[i]:\n        i += 1\n \n    # Shift array elements\n    j = len(arr) - 1\n    while j >= i:\n        arr[j + 1] = arr[j]\n        j -= 1\n\n    # Insert element\n    arr[i] = element\n\n    return arr\n\narr = [1, 2, 6, 8]\nelement = 3\n\ninsert_element(arr, element)\n\n# Output: [1, 2, 3, 6, 8]"}
{"instruction":"Build a series of steps to implement a Bubble Sort algorithm in Python.","input":"","output":"# Steps to implement Bubble Sort Algorithm: \n# 1. Loop through the list with two indices, the current element and the NEXT element \n# 2. Compare current element with the NEXT element \n# 3. If current element is greater than NEXT element, swap them \n# 4. Repeat this till the list is sorted \n\ndef bubble_sort(list): \n    # Traverse through all elements of list \n    for i in range(0, len(list)-1): \n        for j in range(0, len(list)-i-1): \n            if list[j] > list[j+1]: \n                list[j], list[j+1] = list[j+1], list[j]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a series of steps to implement a Bubble Sort algorithm in Python.\n\n### Input:\n\n\n### Output:\n# Steps to implement Bubble Sort Algorithm: \n# 1. Loop through the list with two indices, the current element and the NEXT element \n# 2. Compare current element with the NEXT element \n# 3. If current element is greater than NEXT element, swap them \n# 4. Repeat this till the list is sorted \n\ndef bubble_sort(list): \n    # Traverse through all elements of list \n    for i in range(0, len(list)-1): \n        for j in range(0, len(list)-i-1): \n            if list[j] > list[j+1]: \n                list[j], list[j+1] = list[j+1], list[j]"}
{"instruction":"Design a Python program to find the difference between two provided times. The two times should be provided as strings in the format \"[HH:mm:ss]\".","input":"time1 = \"08:30:15\"\ntime2 = \"10:20:20\"","output":"from datetime import datetime\n\ndef time_diff(time1, time2):\n t1 = datetime.strptime(time1, \"%H:%M:%S\")\n t2 = datetime.strptime(time2, \"%H:%M:%S\")\n return (t2 - t1).total_seconds()\n\nprint(time_diff('08:30:15', '10:20:20')) \/\/ 7200.0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to find the difference between two provided times. The two times should be provided as strings in the format \"[HH:mm:ss]\".\n\n### Input:\ntime1 = \"08:30:15\"\ntime2 = \"10:20:20\"\n\n### Output:\nfrom datetime import datetime\n\ndef time_diff(time1, time2):\n t1 = datetime.strptime(time1, \"%H:%M:%S\")\n t2 = datetime.strptime(time2, \"%H:%M:%S\")\n return (t2 - t1).total_seconds()\n\nprint(time_diff('08:30:15', '10:20:20')) \/\/ 7200.0"}
{"instruction":"Write a python program to detect the size of two overlapping rectangles.","input":"Rectangle A with 4 corners: (2, 6), (4, 6), (4, 2), (2, 2); \nRectangle B with 4 corners: (3, 5), (6, 5), (6, 3), (3, 3)","output":"rectA_min = (2, 6)\nrectA_max = (4, 2)\n\nrectB_min = (3, 5)\nrectB_max = (6, 3)\n\ndef check_overlap(rectA, rectB):\n  overlap_x = min(rectA_max[0], rectB_max[0]) - max(rectA_min[0], rectB_min[0])\n  overlap_y = min(rectA_max[1], rectB_max[1]) - max(rectA_min[1], rectB_min[1])\n \n  if overlap_x>0 and overlap_y>0:\n    overlap_area = overlap_x * overlap_y\n    return overlap_area\n  else:\n    return 0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to detect the size of two overlapping rectangles.\n\n### Input:\nRectangle A with 4 corners: (2, 6), (4, 6), (4, 2), (2, 2); \nRectangle B with 4 corners: (3, 5), (6, 5), (6, 3), (3, 3)\n\n### Output:\nrectA_min = (2, 6)\nrectA_max = (4, 2)\n\nrectB_min = (3, 5)\nrectB_max = (6, 3)\n\ndef check_overlap(rectA, rectB):\n  overlap_x = min(rectA_max[0], rectB_max[0]) - max(rectA_min[0], rectB_min[0])\n  overlap_y = min(rectA_max[1], rectB_max[1]) - max(rectA_min[1], rectB_min[1])\n \n  if overlap_x>0 and overlap_y>0:\n    overlap_area = overlap_x * overlap_y\n    return overlap_area\n  else:\n    return 0"}
{"instruction":"Design a function in Python to test if the given number is a prime or not.","input":"N = 13","output":"def is_prime(n):\n if n <= 1:\n return False\n\n for i in range(2, n):\n if n % i == 0:\n return False\n\n return True\n\nis_prime(13) # True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to test if the given number is a prime or not.\n\n### Input:\nN = 13\n\n### Output:\ndef is_prime(n):\n if n <= 1:\n return False\n\n for i in range(2, n):\n if n % i == 0:\n return False\n\n return True\n\nis_prime(13) # True"}
{"instruction":"Design a code optimization program for Python programs.","input":"def brute_force_traverse(data):\n    for i in range(len(data)):\n        for j in range(len(data)):\n            if data[i] + data[j] == 0:\n                return (i, j)\n\ndata = [3, -1, 5, 7]","output":"def optimized_traverse(data):\n    # create a mapping of number to its index\n    data_mappings = {num:idx for idx, num in enumerate(data)}\n    # traverse the data in a single pass\n    for idx, num in enumerate(data):\n        if -num in data_mappings.keys():\n            return (idx,data_mappings[-num])\n\ndata = [3, -1, 5, 7]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a code optimization program for Python programs.\n\n### Input:\ndef brute_force_traverse(data):\n    for i in range(len(data)):\n        for j in range(len(data)):\n            if data[i] + data[j] == 0:\n                return (i, j)\n\ndata = [3, -1, 5, 7]\n\n### Output:\ndef optimized_traverse(data):\n    # create a mapping of number to its index\n    data_mappings = {num:idx for idx, num in enumerate(data)}\n    # traverse the data in a single pass\n    for idx, num in enumerate(data):\n        if -num in data_mappings.keys():\n            return (idx,data_mappings[-num])\n\ndata = [3, -1, 5, 7]"}
{"instruction":"Create a function in Python that takes two parameters: a list and a number. The function should return the list sorted in ascending order, based on the result of each element in the list multiplied by the input number.","input":"[3, 1, 5, 4, 2],  5","output":"def sortList(arr, num): \n    arr.sort(key = lambda x: x*num) \n    return arr \n  \narr = [3, 1, 5, 4, 2] \nnum = 5\nprint(sortList(arr, num))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two parameters: a list and a number. The function should return the list sorted in ascending order, based on the result of each element in the list multiplied by the input number.\n\n### Input:\n[3, 1, 5, 4, 2],  5\n\n### Output:\ndef sortList(arr, num): \n    arr.sort(key = lambda x: x*num) \n    return arr \n  \narr = [3, 1, 5, 4, 2] \nnum = 5\nprint(sortList(arr, num))"}
{"instruction":"Convert this sql query into a python program","input":"SELECT * FROM orders\nWHERE YEAR(order_date) = 2020","output":"import datetime, pyodbc\n\n# Establish a connection to the database\nconn = pyodbc.connect(\"<connection details>\")\ncursor = conn.cursor()\n\n# Get the year of the order date\nsql = \"SELECT * FROM orders\"\nquery_date = datetime.date.today().year\nwhere_clause = \"WHERE YEAR(order_date) = ?\"\n\n# Execute the query\ncursor.execute(sql + \" \" + where_clause, query_date)\nresults = cursor.fetchall()\n\n# Output the results\nfor result in results:\n    print(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert this sql query into a python program\n\n### Input:\nSELECT * FROM orders\nWHERE YEAR(order_date) = 2020\n\n### Output:\nimport datetime, pyodbc\n\n# Establish a connection to the database\nconn = pyodbc.connect(\"<connection details>\")\ncursor = conn.cursor()\n\n# Get the year of the order date\nsql = \"SELECT * FROM orders\"\nquery_date = datetime.date.today().year\nwhere_clause = \"WHERE YEAR(order_date) = ?\"\n\n# Execute the query\ncursor.execute(sql + \" \" + where_clause, query_date)\nresults = cursor.fetchall()\n\n# Output the results\nfor result in results:\n    print(result)"}
{"instruction":"Generate a random 5-letter word using a code for a Python program.","input":"","output":"import random\n\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\n\ndef generate_random_word():\n    word = ''\n    for i in range(5):\n        word += random.choice(alphabet)\n    return word\n\nprint(generate_random_word())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random 5-letter word using a code for a Python program.\n\n### Input:\n\n\n### Output:\nimport random\n\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\n\ndef generate_random_word():\n    word = ''\n    for i in range(5):\n        word += random.choice(alphabet)\n    return word\n\nprint(generate_random_word())"}
{"instruction":"Create a Python script to encode a given message using the Caesar cipher.","input":"Message: \"Hello World\"\nShift: 5","output":"def caesar_cipher(message, shift):\n encrypted_message = \"\"\n for char in message:\n charIndex = ord(char)\n encryptedIndex = charIndex + shift\n if encryptedIndex <= 255:\n encrypted_message += chr(encryptedIndex)\n else:\n encrypted_message += chr(encryptedIndex - 255)\n return encrypted_message\n\nprint(caesar_cipher(\"Hello World\", 5)) # prints Mjqqt Btwqi","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to encode a given message using the Caesar cipher.\n\n### Input:\nMessage: \"Hello World\"\nShift: 5\n\n### Output:\ndef caesar_cipher(message, shift):\n encrypted_message = \"\"\n for char in message:\n charIndex = ord(char)\n encryptedIndex = charIndex + shift\n if encryptedIndex <= 255:\n encrypted_message += chr(encryptedIndex)\n else:\n encrypted_message += chr(encryptedIndex - 255)\n return encrypted_message\n\nprint(caesar_cipher(\"Hello World\", 5)) # prints Mjqqt Btwqi"}
{"instruction":"Design an API for a Python script that returns the average of any given list of numbers.","input":"[1, 4, 5, 7, 8]","output":"# Create API endpoint\n@app.route('\/api\/average', methods=['POST'])\ndef average():\n    # Get data from request\n    data = request.get_json()\n\n    # Calculate average\n    avg = np.mean(data)\n\n    # Return result\n    return jsonify({'result': avg})","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an API for a Python script that returns the average of any given list of numbers.\n\n### Input:\n[1, 4, 5, 7, 8]\n\n### Output:\n# Create API endpoint\n@app.route('\/api\/average', methods=['POST'])\ndef average():\n    # Get data from request\n    data = request.get_json()\n\n    # Calculate average\n    avg = np.mean(data)\n\n    # Return result\n    return jsonify({'result': avg})"}
{"instruction":"Create a Python program to retrieve the hours worked by an employee from a given list of timestamps.","input":"[1577296930, 1577297490, 1577299030]","output":"def total_hours(timestamps):\n    total_hours = 0\n    for i in range(1, len(timestamps)):\n        total_hours += (timestamps[i] - timestamps[i-1]) \/ 3600\n    return total_hours\n\ntimestamps = [1577296930, 1577297490, 1577299030]\n\nprint(total_hours(timestamps))\n\n# Output should be 3.33","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to retrieve the hours worked by an employee from a given list of timestamps.\n\n### Input:\n[1577296930, 1577297490, 1577299030]\n\n### Output:\ndef total_hours(timestamps):\n    total_hours = 0\n    for i in range(1, len(timestamps)):\n        total_hours += (timestamps[i] - timestamps[i-1]) \/ 3600\n    return total_hours\n\ntimestamps = [1577296930, 1577297490, 1577299030]\n\nprint(total_hours(timestamps))\n\n# Output should be 3.33"}
{"instruction":"Count the number of unique items in a list using dictionaries in Python.","input":"list = [1, 2, 5, 9, 10, 1, 3, 9, 1, 2]","output":"def count_unique(list):\n    unique = {}\n    for item in list:\n        if item not in unique:\n            unique[item] = 1\n        else:\n            unique[item] += 1\n    return len(unique)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCount the number of unique items in a list using dictionaries in Python.\n\n### Input:\nlist = [1, 2, 5, 9, 10, 1, 3, 9, 1, 2]\n\n### Output:\ndef count_unique(list):\n    unique = {}\n    for item in list:\n        if item not in unique:\n            unique[item] = 1\n        else:\n            unique[item] += 1\n    return len(unique)"}
{"instruction":"Create a sentiment analysis program in Python which takes a given sentence as an input and outputs its sentiment label.","input":"Not applicable","output":"import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentence = 'This movie was great!'\n\nsid = SentimentIntensityAnalyzer()\nsentiment_scores = sid.polarity_scores(sentence)\n\nif sentiment_scores['compound'] > 0:\n print('Positive')\nelif sentiment_scores['compound'] == 0:\n print('Neutral')\nelse:\n print('Negative')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sentiment analysis program in Python which takes a given sentence as an input and outputs its sentiment label.\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentence = 'This movie was great!'\n\nsid = SentimentIntensityAnalyzer()\nsentiment_scores = sid.polarity_scores(sentence)\n\nif sentiment_scores['compound'] > 0:\n print('Positive')\nelif sentiment_scores['compound'] == 0:\n print('Neutral')\nelse:\n print('Negative')"}
{"instruction":"Create a Python program to print out the lyrics of the song \"Happy Birthday\".","input":"Not applicable","output":"print(\"Happy birthday to you\")\nprint(\"Happy birthday to you\")\nprint(\"Happy birthday dear ____\")\nprint(\"Happy birthday to you\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print out the lyrics of the song \"Happy Birthday\".\n\n### Input:\nNot applicable\n\n### Output:\nprint(\"Happy birthday to you\")\nprint(\"Happy birthday to you\")\nprint(\"Happy birthday dear ____\")\nprint(\"Happy birthday to you\")"}
{"instruction":"Can you write a Python function to determine if a supplied number is prime?","input":"num=20","output":"def is_prime(num):\n    \"\"\"Check if the given number is prime.\n\n    Args:\n        num (int): A number to check\n\n    Returns:\n        bool: True if num is prime, False otherwise.\n    \"\"\"\n\n    if num < 2: \n        return False\n\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n    return True\n\nnum = 20\nresult = is_prime(num)\nprint(f\"Is {num} prime? {result}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you write a Python function to determine if a supplied number is prime?\n\n### Input:\nnum=20\n\n### Output:\ndef is_prime(num):\n    \"\"\"Check if the given number is prime.\n\n    Args:\n        num (int): A number to check\n\n    Returns:\n        bool: True if num is prime, False otherwise.\n    \"\"\"\n\n    if num < 2: \n        return False\n\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n    return True\n\nnum = 20\nresult = is_prime(num)\nprint(f\"Is {num} prime? {result}\")"}
{"instruction":"Write a Python script to auto-generate 3D models from CAD designs","input":"Not applicable","output":"import numpy as np\nimport cv2\nfrom stl import mesh\nfrom scipy.spatial import Delaunay\n\ndef generate_3d_model(cad_file):\n    # open file containing 2D designs\n    img = cv2.imread(cad_file)\n    # convert to grayscale\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    # perform a binary threshold\n    ret, thresh = cv2.threshold(gray, 127, 255, 0)\n    # find contours in the binary image\n    contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n    # get coordinates of all points in the contour\n    coordinates = []\n    for contour in contours:\n        for points in contour:\n            coordinates.append([points[0][0], points[0][1]])\n\n    # apply 2D Delaunay triangulation to the coordinates\n    delaunay = Delaunay(coordinates)\n    # apply 3D Delaunay triangulation to the coordinates\n    triangles = np.array([[coordinates[t[0]], coordinates[t[1]], coordinates[t[2]]] for t in delaunay.simplices])\n    # generate 3D mesh\n    mesh3d = mesh.Mesh(np.zeros(triangles.shape[0], metadata={'faces': triangles}))\n\n    return mesh3d","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to auto-generate 3D models from CAD designs\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nimport cv2\nfrom stl import mesh\nfrom scipy.spatial import Delaunay\n\ndef generate_3d_model(cad_file):\n    # open file containing 2D designs\n    img = cv2.imread(cad_file)\n    # convert to grayscale\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    # perform a binary threshold\n    ret, thresh = cv2.threshold(gray, 127, 255, 0)\n    # find contours in the binary image\n    contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n    # get coordinates of all points in the contour\n    coordinates = []\n    for contour in contours:\n        for points in contour:\n            coordinates.append([points[0][0], points[0][1]])\n\n    # apply 2D Delaunay triangulation to the coordinates\n    delaunay = Delaunay(coordinates)\n    # apply 3D Delaunay triangulation to the coordinates\n    triangles = np.array([[coordinates[t[0]], coordinates[t[1]], coordinates[t[2]]] for t in delaunay.simplices])\n    # generate 3D mesh\n    mesh3d = mesh.Mesh(np.zeros(triangles.shape[0], metadata={'faces': triangles}))\n\n    return mesh3d"}
{"instruction":"Develop a Python script to train a multi-layer perceptron to identify MNIST handwritten digits.","input":"Not applicable","output":"# import libraries \nfrom keras.models import Sequential \nfrom keras.layers import Dense, Dropout \nimport numpy \n\n# load the dataset \ndataset = numpy.loadtxt(\"mnist.csv\", delimiter=\",\") \n\n# split into input (X) and output (Y) variables \nX = dataset[:,0:784] \nY = dataset[:,784] \n\n# Create model\nmodel = Sequential() \nmodel.add(Dense(784, input_dim=784, activation='relu'))\nmodel.add(Dense(256, activation='relu')) \nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\n\n# Compile model \nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy']) \n\n# Fit the model \nmodel.fit(X, Y, epochs=10, batch_size=128, verbose=2)\n\n# Evaluate the model \nscores = model.evaluate(X, Y) \nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to train a multi-layer perceptron to identify MNIST handwritten digits.\n\n### Input:\nNot applicable\n\n### Output:\n# import libraries \nfrom keras.models import Sequential \nfrom keras.layers import Dense, Dropout \nimport numpy \n\n# load the dataset \ndataset = numpy.loadtxt(\"mnist.csv\", delimiter=\",\") \n\n# split into input (X) and output (Y) variables \nX = dataset[:,0:784] \nY = dataset[:,784] \n\n# Create model\nmodel = Sequential() \nmodel.add(Dense(784, input_dim=784, activation='relu'))\nmodel.add(Dense(256, activation='relu')) \nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\n\n# Compile model \nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy']) \n\n# Fit the model \nmodel.fit(X, Y, epochs=10, batch_size=128, verbose=2)\n\n# Evaluate the model \nscores = model.evaluate(X, Y) \nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))"}
{"instruction":"Write a function in Python to delete duplicates from a list.","input":"[1,1,3,4,4,5]","output":"def remove_duplicates(lst): \n\treturn list(set(lst)) \nremove_duplicates([1,1,3,4,4,5])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to delete duplicates from a list.\n\n### Input:\n[1,1,3,4,4,5]\n\n### Output:\ndef remove_duplicates(lst): \n\treturn list(set(lst)) \nremove_duplicates([1,1,3,4,4,5])"}
{"instruction":"Generate a main.py python script that will return the maximum of two numbers.","input":"a = 3;\nb = 4","output":"def max(a, b): \n    if a > b: \n        return a \n    else:  \n        return b \n  \n#Driver Code \na = 3\nb = 4\nprint(max(a, b))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a main.py python script that will return the maximum of two numbers.\n\n### Input:\na = 3;\nb = 4\n\n### Output:\ndef max(a, b): \n    if a > b: \n        return a \n    else:  \n        return b \n  \n#Driver Code \na = 3\nb = 4\nprint(max(a, b))"}
{"instruction":"Consider the following statement and write a code for it in Python","input":"A list of integers of length 5 is given. Calculate its sum and average.","output":"my_list = [1,2,3,4,5]\ntotal_sum = 0\n\nfor x in my_list:\n    total_sum = total_sum + x \n  \naverage = total_sum \/ len(my_list)\n\nprint(\"Sum of all elements in given list: \" + str(total_sum))\nprint(\"Average of all elements in given list: \" + str(average))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConsider the following statement and write a code for it in Python\n\n### Input:\nA list of integers of length 5 is given. Calculate its sum and average.\n\n### Output:\nmy_list = [1,2,3,4,5]\ntotal_sum = 0\n\nfor x in my_list:\n    total_sum = total_sum + x \n  \naverage = total_sum \/ len(my_list)\n\nprint(\"Sum of all elements in given list: \" + str(total_sum))\nprint(\"Average of all elements in given list: \" + str(average))"}
{"instruction":"To use PyTransit for exoplanet transit modelling in Python, import the necessary modules and functions, including Path, Table, njit, prange, atleast_2d, zeros, log, concatenate, pi, transpose, sum, compress, ones, UFloat, ufloat, LegendreBaseline, and OCLTTVLPF. Then, define a TESSCLTTVLPF object with the required parameters, including name, dfile, zero_epoch, period, nsamples, trdur, bldur, nlegendre, ctx, and queue. Finally, use the created object to create a population of parameters and calculate the flux model and likelihood.","input":"","output":"#  PyTransit: fast and easy exoplanet transit modelling in Python.\n#  Copyright (C) 2010-2019  Hannu Parviainen\n#\n#  This program is free software: you can redistribute it and\/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program.  If not, see <https:\/\/www.gnu.org\/licenses\/>.\n\nfrom pathlib import Path\n\nfrom astropy.table import Table\nfrom numba import njit, prange\nfrom numpy import atleast_2d, zeros, log, concatenate, pi, transpose, sum, compress, ones\nfrom uncertainties import UFloat, ufloat\n\nfrom .oclttvlpf import OCLTTVLPF\nfrom ..utils.keplerlc import KeplerLC\nfrom .baselines.legendrebaseline import  LegendreBaseline\n\n@njit(parallel=True, cache=False, fastmath=True)\ndef lnlike_normal_v(o, m, e):\n    m = atleast_2d(m)\n    npv = m.shape[0]\n    npt = o.size\n    lnl = zeros(npv)\n    for i in prange(npv):\n        lnl[i] = -npt*log(e[i, 0]) - 0.5*log(2*pi) - 0.5*sum(((o-m[i, :])\/e[i ,0])**2)\n    return lnl\n\n\nclass TESSCLTTVLPF(LegendreBaseline, OCLTTVLPF):\n    def __init__(self, name: str, dfile: Path, zero_epoch: float, period: float, nsamples: int = 10,\n                 trdur: float = 0.125, bldur: float = 0.3, nlegendre: int = 2, ctx = None, queue = None):\n\n        zero_epoch = zero_epoch if isinstance(zero_epoch, UFloat) else ufloat(zero_epoch, 1e-5)\n        period = period if isinstance(period, UFloat) else ufloat(period, 1e-7)\n\n        tb = Table.read(dfile)\n        self.bjdrefi = tb.meta['BJDREFI']\n        zero_epoch = zero_epoch - self.bjdrefi\n\n        df = tb.to_pandas().dropna(subset=['TIME', 'SAP_FLUX', 'PDCSAP_FLUX'])\n        self.lc = lc = KeplerLC(df.TIME.values, df.SAP_FLUX.values, zeros(df.shape[0]),\n                                zero_epoch.n, period.n, trdur, bldur)\n\n        LegendreBaseline.__init__(self, nlegendre)\n        OCLTTVLPF.__init__(self, name, zero_epoch, period, ['TESS'],\n                         times=lc.time_per_transit, fluxes=lc.normalized_flux_per_transit,\n                         pbids=zeros(lc.nt, 'int'), nsamples=nsamples, exptimes=[0.00139],\n                         cl_ctx=ctx, cl_queue=queue)\n\n        self.lnlikelihood = self.lnlikelihood_nb\n\n    def create_pv_population(self, npop=50):\n        pvp = self.ps.sample_from_prior(npop)\n        return pvp\n\n    def flux_model(self, pvp):\n        tmodel = transpose(self.transit_model(pvp, copy=True)).copy()\n        return tmodel * self.baseline(pvp)\n\n    def lnlikelihood_nb(self, pvp):\n        fmodel = self.flux_model(pvp).astype('d')\n        err = 10**atleast_2d(pvp)[:, self._sl_err]\n        return lnlike_normal_v(self.ofluxa, fmodel, err)\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTo use PyTransit for exoplanet transit modelling in Python, import the necessary modules and functions, including Path, Table, njit, prange, atleast_2d, zeros, log, concatenate, pi, transpose, sum, compress, ones, UFloat, ufloat, LegendreBaseline, and OCLTTVLPF. Then, define a TESSCLTTVLPF object with the required parameters, including name, dfile, zero_epoch, period, nsamples, trdur, bldur, nlegendre, ctx, and queue. Finally, use the created object to create a population of parameters and calculate the flux model and likelihood.\n\n### Input:\n\n\n### Output:\n#  PyTransit: fast and easy exoplanet transit modelling in Python.\n#  Copyright (C) 2010-2019  Hannu Parviainen\n#\n#  This program is free software: you can redistribute it and\/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program.  If not, see <https:\/\/www.gnu.org\/licenses\/>.\n\nfrom pathlib import Path\n\nfrom astropy.table import Table\nfrom numba import njit, prange\nfrom numpy import atleast_2d, zeros, log, concatenate, pi, transpose, sum, compress, ones\nfrom uncertainties import UFloat, ufloat\n\nfrom .oclttvlpf import OCLTTVLPF\nfrom ..utils.keplerlc import KeplerLC\nfrom .baselines.legendrebaseline import  LegendreBaseline\n\n@njit(parallel=True, cache=False, fastmath=True)\ndef lnlike_normal_v(o, m, e):\n    m = atleast_2d(m)\n    npv = m.shape[0]\n    npt = o.size\n    lnl = zeros(npv)\n    for i in prange(npv):\n        lnl[i] = -npt*log(e[i, 0]) - 0.5*log(2*pi) - 0.5*sum(((o-m[i, :])\/e[i ,0])**2)\n    return lnl\n\n\nclass TESSCLTTVLPF(LegendreBaseline, OCLTTVLPF):\n    def __init__(self, name: str, dfile: Path, zero_epoch: float, period: float, nsamples: int = 10,\n                 trdur: float = 0.125, bldur: float = 0.3, nlegendre: int = 2, ctx = None, queue = None):\n\n        zero_epoch = zero_epoch if isinstance(zero_epoch, UFloat) else ufloat(zero_epoch, 1e-5)\n        period = period if isinstance(period, UFloat) else ufloat(period, 1e-7)\n\n        tb = Table.read(dfile)\n        self.bjdrefi = tb.meta['BJDREFI']\n        zero_epoch = zero_epoch - self.bjdrefi\n\n        df = tb.to_pandas().dropna(subset=['TIME', 'SAP_FLUX', 'PDCSAP_FLUX'])\n        self.lc = lc = KeplerLC(df.TIME.values, df.SAP_FLUX.values, zeros(df.shape[0]),\n                                zero_epoch.n, period.n, trdur, bldur)\n\n        LegendreBaseline.__init__(self, nlegendre)\n        OCLTTVLPF.__init__(self, name, zero_epoch, period, ['TESS'],\n                         times=lc.time_per_transit, fluxes=lc.normalized_flux_per_transit,\n                         pbids=zeros(lc.nt, 'int'), nsamples=nsamples, exptimes=[0.00139],\n                         cl_ctx=ctx, cl_queue=queue)\n\n        self.lnlikelihood = self.lnlikelihood_nb\n\n    def create_pv_population(self, npop=50):\n        pvp = self.ps.sample_from_prior(npop)\n        return pvp\n\n    def flux_model(self, pvp):\n        tmodel = transpose(self.transit_model(pvp, copy=True)).copy()\n        return tmodel * self.baseline(pvp)\n\n    def lnlikelihood_nb(self, pvp):\n        fmodel = self.flux_model(pvp).astype('d')\n        err = 10**atleast_2d(pvp)[:, self._sl_err]\n        return lnlike_normal_v(self.ofluxa, fmodel, err)\n"}
{"instruction":"Optimize a given machine learning model in Python using techniques such as feature selection, parameter tuning, and regularization.","input":"Not Applicable","output":"# Feature selection\nfrom sklearn.feature_selection import RFE\n\n# Use recursive feature elimination to select the most \n# important features\nrfe = RFE(estimator = model, step = 1)\nfit = rfe.fit(X, y)\n\n# Parameter tuning using grid search\nfrom sklearn.model_selection import GridSearchCV\n\n# Create grid search object\nparms = {'C': [0.1, 1, 10, 100, 1000],  \n         'gamma': [1, 0.1, 0.01, 0.001, 0.0001], \n         'kernel': ['rbf']} \ngrid = GridSearchCV(estimator = model, param_grid = parms, scoring = 'accuracy', cv = 5)\n\n# Fit grid search to the data\ngrid.fit(X, y)\n\n# Regularization and model selection\nfrom sklearn.linear_model import Ridge, Lasso\n\n# Ridge regression with parameter alpha = 0.01\nmodel = Ridge(alpha = 0.01)\nmodel.fit(X, y)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a given machine learning model in Python using techniques such as feature selection, parameter tuning, and regularization.\n\n### Input:\nNot Applicable\n\n### Output:\n# Feature selection\nfrom sklearn.feature_selection import RFE\n\n# Use recursive feature elimination to select the most \n# important features\nrfe = RFE(estimator = model, step = 1)\nfit = rfe.fit(X, y)\n\n# Parameter tuning using grid search\nfrom sklearn.model_selection import GridSearchCV\n\n# Create grid search object\nparms = {'C': [0.1, 1, 10, 100, 1000],  \n         'gamma': [1, 0.1, 0.01, 0.001, 0.0001], \n         'kernel': ['rbf']} \ngrid = GridSearchCV(estimator = model, param_grid = parms, scoring = 'accuracy', cv = 5)\n\n# Fit grid search to the data\ngrid.fit(X, y)\n\n# Regularization and model selection\nfrom sklearn.linear_model import Ridge, Lasso\n\n# Ridge regression with parameter alpha = 0.01\nmodel = Ridge(alpha = 0.01)\nmodel.fit(X, y)"}
{"instruction":"Generate a Python program that will convert a given integer to a string.","input":"","output":"def int_to_string(num):\n   return str(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that will convert a given integer to a string.\n\n### Input:\n\n\n### Output:\ndef int_to_string(num):\n   return str(num)"}
{"instruction":"Optimize the algorithm written in Python below to make it faster and more efficient.","input":"import random\n\ndef function(nums):\n  result  = set() \n  for i in range(len(nums)-2):\n    for j in range(i+1,len(nums)):\n      for k in range(j+1,len(nums)):\n        if (nums[j]-nums[i] == nums[i] - nums[k]):\n          result.add((nums[i],nums[j],nums[k]))\n  return len(result)\n\nnums = [random.randint(1, 10) for x in range(20)]","output":"import itertools\nimport random\n\ndef function(nums):\n  results = set()\n  for i,j,k in itertools.combinations(nums, 3):\n    if j-i == i-k:\n      results.add((i,j,k))\n  return len(results)\n\nnums = [random.randint(1, 10) for x in range(20)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the algorithm written in Python below to make it faster and more efficient.\n\n### Input:\nimport random\n\ndef function(nums):\n  result  = set() \n  for i in range(len(nums)-2):\n    for j in range(i+1,len(nums)):\n      for k in range(j+1,len(nums)):\n        if (nums[j]-nums[i] == nums[i] - nums[k]):\n          result.add((nums[i],nums[j],nums[k]))\n  return len(result)\n\nnums = [random.randint(1, 10) for x in range(20)]\n\n### Output:\nimport itertools\nimport random\n\ndef function(nums):\n  results = set()\n  for i,j,k in itertools.combinations(nums, 3):\n    if j-i == i-k:\n      results.add((i,j,k))\n  return len(results)\n\nnums = [random.randint(1, 10) for x in range(20)]"}
{"instruction":"Write a Python function to convert days to years.","input":"","output":"def days_to_years(days):\n    years = days \/ 365\n    return years","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to convert days to years.\n\n### Input:\n\n\n### Output:\ndef days_to_years(days):\n    years = days \/ 365\n    return years"}
{"instruction":"Complete the following Python code to implement Bubble Sort.","input":"def bubble_sort(arr):\n    # WRITE YOUR CODE HERE","output":"def bubble_sort(arr):\n    # WRITE YOUR CODE HERE\n    n = len(arr) \n     \n    # Traverse through all array elements \n    for i in range(n-1): \n    # range(n) also work but outer loop will repeat one time more than needed. \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nComplete the following Python code to implement Bubble Sort.\n\n### Input:\ndef bubble_sort(arr):\n    # WRITE YOUR CODE HERE\n\n### Output:\ndef bubble_sort(arr):\n    # WRITE YOUR CODE HERE\n    n = len(arr) \n     \n    # Traverse through all array elements \n    for i in range(n-1): \n    # range(n) also work but outer loop will repeat one time more than needed. \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]"}
{"instruction":"Suggest a completion for the following Python code to sort a given list of dictionaries by a given key.","input":"my_list = [{'name': 'Bob', 'age': 20}, {'name': 'Alice', 'age': 10}]","output":"def sort_dicts(my_list, key):\n    return sorted(my_list, key=lambda x: x[key])\n\n# Main\nif __name__ == \"__main__\":\n    my_list = [{'name': 'Bob', 'age': 20}, {'name': 'Alice', 'age': 10}]\n    key = 'age'\n    print(sort_dicts(my_list, key))  # [{'name': 'Alice', 'age': 10}, {'name': 'Bob', 'age': 20}]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a completion for the following Python code to sort a given list of dictionaries by a given key.\n\n### Input:\nmy_list = [{'name': 'Bob', 'age': 20}, {'name': 'Alice', 'age': 10}]\n\n### Output:\ndef sort_dicts(my_list, key):\n    return sorted(my_list, key=lambda x: x[key])\n\n# Main\nif __name__ == \"__main__\":\n    my_list = [{'name': 'Bob', 'age': 20}, {'name': 'Alice', 'age': 10}]\n    key = 'age'\n    print(sort_dicts(my_list, key))  # [{'name': 'Alice', 'age': 10}, {'name': 'Bob', 'age': 20}]"}
{"instruction":"Create a multi-dimensional array containing 3 rows and 3 columns in python","input":"","output":"arr = [[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a multi-dimensional array containing 3 rows and 3 columns in python\n\n### Input:\n\n\n### Output:\narr = [[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]]"}
{"instruction":"Generate a function in Python to transform a string from camelCase to snake_case.","input":"inputString = \"thisIsExample\"","output":"def camelCaseToSnakeCase(inputString):\n    outputString = inputString[0].lower()\n    for i in range(1, len(inputString)):\n        if inputString[i].isupper():\n            outputString += \"_\"\n            outputString += inputString[i].lower()\n        else:\n            outputString += inputString[i]\n    return outputString\n    \nif __name__ == '__main__':\n    inputString = \"thisIsExample\"\n    print (camelCaseToSnakeCase(inputString))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python to transform a string from camelCase to snake_case.\n\n### Input:\ninputString = \"thisIsExample\"\n\n### Output:\ndef camelCaseToSnakeCase(inputString):\n    outputString = inputString[0].lower()\n    for i in range(1, len(inputString)):\n        if inputString[i].isupper():\n            outputString += \"_\"\n            outputString += inputString[i].lower()\n        else:\n            outputString += inputString[i]\n    return outputString\n    \nif __name__ == '__main__':\n    inputString = \"thisIsExample\"\n    print (camelCaseToSnakeCase(inputString))"}
{"instruction":"Design an AI agent in Python to play a game of Tic-Tac-Toe.","input":"","output":"import random\nimport numpy as np\n\nBOARD_SIZE = 3\nPLAYER = 1  # player is X\nAI = 2  # AI is O\n\ndef create_board():\n  board = np.zeros((BOARD_SIZE, BOARD_SIZE)) # board is 3x3 array of 0's\n  return board\n\ndef valid_space(board, position):\n  if position[0] < 0 or position[0] >= BOARD_SIZE:\n    return False\n  elif position[1] < 0 or position[1] >= BOARD_SIZE:\n    return False\n  elif board[position[0], position[1]] != 0:\n    return False\n  else:\n    return True\n\ndef make_move(board, pos, symbol):\n  board[pos[0], pos[1]] = symbol\n\ndef ai_move(board, symbol):\n  pos = random.choice(list(zip(*np.where(board == 0)))) # pick random empty space\n  make_move(board, pos, symbol)\n\ndef player_move(board, symbol):\n  pos = input('Enter your move (row column): ').split()\n  pos = [int(i) for i in pos]\n  if not valid_space(board, pos):\n    print('Invalid move!')\n    return False\n  else:\n    make_move(board, pos, symbol)\n    return True\n\n\ndef main():\n  board = create_board()\n  winner = 0\n  turn = PLAYER\n  complete = False\n\n  while not complete and not winner:\n    if turn == PLAYER:\n      player_move(board, PLAYER)\n      turn = AI\n    else:\n      ai_move(board, AI)\n      turn = PLAYER\n    winner = check_winner(board)\n    complete = check_complete(board)\n    print_board(board)\n\n  if winner == PLAYER:\n    print('Player wins')\n  elif winner == AI:\n    print('AI wins')\n  else:\n    print('Draw')\n\ndef check_complete(board):\n  if 0 in board:\n    return False\n  else:\n    return True\n\ndef check_winner(board):\n  for i in range(BOARD_SIZE):\n    if np.all(board[i] == PLAYER):\n      return PLAYER\n    elif np.all(board[i] == AI):\n      return AI\n\n  for j in range(BOARD_SIZE):\n    if np.all(board[:,j] == PLAYER):\n      return PLAYER\n    elif np.all(board[:,j] == AI):\n      return AI\n\n  diag1 = np.diag(board)\n  diag2 = np.diag(np.fliplr(board))\n  if np.all(diag1 == PLAYER):\n    return PLAYER\n  elif np.all(diag1 == AI):\n    return AI\n  elif np.all(diag2 == PLAYER):\n    return PLAYER\n  elif np.all(diag2 == AI):\n    return AI\n\n  else:\n    return 0\n\ndef print_board(board):\n  for i in range(BOARD_SIZE):\n    for j in range(BOARD_SIZE):\n      if board[i,j] == PLAYER:\n        print('X ', end=\"\")\n      elif board[i,j] == AI:\n        print('O ', end=\"\")\n      else:\n        print('  ', end=\"\")\n    print()\n\nif __name__ == \"__main__\":\n  main()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an AI agent in Python to play a game of Tic-Tac-Toe.\n\n### Input:\n\n\n### Output:\nimport random\nimport numpy as np\n\nBOARD_SIZE = 3\nPLAYER = 1  # player is X\nAI = 2  # AI is O\n\ndef create_board():\n  board = np.zeros((BOARD_SIZE, BOARD_SIZE)) # board is 3x3 array of 0's\n  return board\n\ndef valid_space(board, position):\n  if position[0] < 0 or position[0] >= BOARD_SIZE:\n    return False\n  elif position[1] < 0 or position[1] >= BOARD_SIZE:\n    return False\n  elif board[position[0], position[1]] != 0:\n    return False\n  else:\n    return True\n\ndef make_move(board, pos, symbol):\n  board[pos[0], pos[1]] = symbol\n\ndef ai_move(board, symbol):\n  pos = random.choice(list(zip(*np.where(board == 0)))) # pick random empty space\n  make_move(board, pos, symbol)\n\ndef player_move(board, symbol):\n  pos = input('Enter your move (row column): ').split()\n  pos = [int(i) for i in pos]\n  if not valid_space(board, pos):\n    print('Invalid move!')\n    return False\n  else:\n    make_move(board, pos, symbol)\n    return True\n\n\ndef main():\n  board = create_board()\n  winner = 0\n  turn = PLAYER\n  complete = False\n\n  while not complete and not winner:\n    if turn == PLAYER:\n      player_move(board, PLAYER)\n      turn = AI\n    else:\n      ai_move(board, AI)\n      turn = PLAYER\n    winner = check_winner(board)\n    complete = check_complete(board)\n    print_board(board)\n\n  if winner == PLAYER:\n    print('Player wins')\n  elif winner == AI:\n    print('AI wins')\n  else:\n    print('Draw')\n\ndef check_complete(board):\n  if 0 in board:\n    return False\n  else:\n    return True\n\ndef check_winner(board):\n  for i in range(BOARD_SIZE):\n    if np.all(board[i] == PLAYER):\n      return PLAYER\n    elif np.all(board[i] == AI):\n      return AI\n\n  for j in range(BOARD_SIZE):\n    if np.all(board[:,j] == PLAYER):\n      return PLAYER\n    elif np.all(board[:,j] == AI):\n      return AI\n\n  diag1 = np.diag(board)\n  diag2 = np.diag(np.fliplr(board))\n  if np.all(diag1 == PLAYER):\n    return PLAYER\n  elif np.all(diag1 == AI):\n    return AI\n  elif np.all(diag2 == PLAYER):\n    return PLAYER\n  elif np.all(diag2 == AI):\n    return AI\n\n  else:\n    return 0\n\ndef print_board(board):\n  for i in range(BOARD_SIZE):\n    for j in range(BOARD_SIZE):\n      if board[i,j] == PLAYER:\n        print('X ', end=\"\")\n      elif board[i,j] == AI:\n        print('O ', end=\"\")\n      else:\n        print('  ', end=\"\")\n    print()\n\nif __name__ == \"__main__\":\n  main()"}
{"instruction":"Develop a Python function to find the most common element in the given list.","input":"[\u2018cat\u2019, \u2018dog\u2019, \u2018cat\u2019, \u2018bird\u2019, \u2018horse\u2019, \u2018dog\u2019]","output":"def mostCommonElement(list):\n    element_count = {}\n    for i in list:\n        if i in element_count:\n            element_count[i] += 1\n        else:\n            element_count[i] = 1 \n    \n    max_element = None\n    max_num = 0\n    for i in element_count:\n        if element_count[i] > max_num:\n            max_element = i\n            max_num = element_count[i]\n    \n    return max_element","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function to find the most common element in the given list.\n\n### Input:\n[\u2018cat\u2019, \u2018dog\u2019, \u2018cat\u2019, \u2018bird\u2019, \u2018horse\u2019, \u2018dog\u2019]\n\n### Output:\ndef mostCommonElement(list):\n    element_count = {}\n    for i in list:\n        if i in element_count:\n            element_count[i] += 1\n        else:\n            element_count[i] = 1 \n    \n    max_element = None\n    max_num = 0\n    for i in element_count:\n        if element_count[i] > max_num:\n            max_element = i\n            max_num = element_count[i]\n    \n    return max_element"}
{"instruction":"Write a Python class for Polygon which has the ability to compute the perimeter of a polygon.","input":"","output":"class Polygon:\n    def __init__(self, num_of_sides):\n        self.number_of_sides = num_of_sides\n        self.sides = [0 for i in range(num_of_sides)]\n\n    def input_sides(self, sides):\n        self.sides = sides\n\n    def perimeter(self):\n        peri = 0\n        for side in self.sides:\n            peri += side\n        return peri","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class for Polygon which has the ability to compute the perimeter of a polygon.\n\n### Input:\n\n\n### Output:\nclass Polygon:\n    def __init__(self, num_of_sides):\n        self.number_of_sides = num_of_sides\n        self.sides = [0 for i in range(num_of_sides)]\n\n    def input_sides(self, sides):\n        self.sides = sides\n\n    def perimeter(self):\n        peri = 0\n        for side in self.sides:\n            peri += side\n        return peri"}
{"instruction":"Create a python program to find the sum of all non-negative integers less than a given number.","input":"","output":"def sum_non_negative_integers(n):\n    total = 0\n    for i in range(n): \n        if i > 0:\n            total += i\n    return total","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to find the sum of all non-negative integers less than a given number.\n\n### Input:\n\n\n### Output:\ndef sum_non_negative_integers(n):\n    total = 0\n    for i in range(n): \n        if i > 0:\n            total += i\n    return total"}
{"instruction":"Write a Python program to generate a report on the number of tasks completed in a week. The report should include the total number of tasks completed, as well as the percentage of each type of task completed.","input":"Task Data:\nTask Type: Analysis, Number Completed: 3\nTask Type: Design, Number Completed: 4\nTask Type: Programming, Number Completed: 7","output":"total_completed = 14\n\nreport = \"In the past week, a total of {total_completed} tasks were completed. \\\nAnalysis tasks accounted for {analysis_percent}%, design tasks accounted for \\\n{design_percent}%, and programming tasks accounted for {programming_percent}% of all tasks completed.\"\n\nanalysis_percent = (3\/14)*100\ndesign_percent = (4\/14)*100\nprogramming_percent = (7\/14)*100\n\nprint(report.format(total_completed=total_completed, analysis_percent=analysis_percent, design_percent=design_percent, programming_percent=programming_percent))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a report on the number of tasks completed in a week. The report should include the total number of tasks completed, as well as the percentage of each type of task completed.\n\n### Input:\nTask Data:\nTask Type: Analysis, Number Completed: 3\nTask Type: Design, Number Completed: 4\nTask Type: Programming, Number Completed: 7\n\n### Output:\ntotal_completed = 14\n\nreport = \"In the past week, a total of {total_completed} tasks were completed. \\\nAnalysis tasks accounted for {analysis_percent}%, design tasks accounted for \\\n{design_percent}%, and programming tasks accounted for {programming_percent}% of all tasks completed.\"\n\nanalysis_percent = (3\/14)*100\ndesign_percent = (4\/14)*100\nprogramming_percent = (7\/14)*100\n\nprint(report.format(total_completed=total_completed, analysis_percent=analysis_percent, design_percent=design_percent, programming_percent=programming_percent))"}
{"instruction":"Generate a python program to reverse any given list","input":"","output":"def reverseList(list): \n    list_len = len(list) \n  \n    # Traverse through the list \n    for i in range(list_len \/\/ 2): \n        temp = list[i] \n        list[i] = list[list_len - i - 1] \n        list[list_len - i - 1] = temp \n  \n# Driver Code \nmyList = [1, 2, 3, 4, 5] \nprint(\"Original list:\" + str(myList))\nreverseList(myList) \nprint(\"Reversed list:\" + str(myList))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to reverse any given list\n\n### Input:\n\n\n### Output:\ndef reverseList(list): \n    list_len = len(list) \n  \n    # Traverse through the list \n    for i in range(list_len \/\/ 2): \n        temp = list[i] \n        list[i] = list[list_len - i - 1] \n        list[list_len - i - 1] = temp \n  \n# Driver Code \nmyList = [1, 2, 3, 4, 5] \nprint(\"Original list:\" + str(myList))\nreverseList(myList) \nprint(\"Reversed list:\" + str(myList))"}
{"instruction":"Construct a Python program to generate the following pattern given a number as input.","input":"6","output":"def pattern(n): \n  \n    # outer loop to handle number of rows \n    for i in range(0, n): \n      \n        # inner loop to handle number of columns \n        for j in range(0, i+1): \n              \n            # printing stars \n            if j%2 == 0: \n                print(\"* \",end=\"\") \n            else:\n                print(\"# \",end=\"\")\n              \n        # ending line after each row \n        print(\"\\r\") \n  \n# Driver Code \nn = 6\npattern(n)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to generate the following pattern given a number as input.\n\n### Input:\n6\n\n### Output:\ndef pattern(n): \n  \n    # outer loop to handle number of rows \n    for i in range(0, n): \n      \n        # inner loop to handle number of columns \n        for j in range(0, i+1): \n              \n            # printing stars \n            if j%2 == 0: \n                print(\"* \",end=\"\") \n            else:\n                print(\"# \",end=\"\")\n              \n        # ending line after each row \n        print(\"\\r\") \n  \n# Driver Code \nn = 6\npattern(n)"}
{"instruction":"Create a Python program to generate a list of random numbers.","input":"length = 5, min = 2, max = 10","output":"import random\n\ndef generate_random_numbers(length, min, max):\n  result = []\n  for _ in range(length):\n    result.append(round(random.uniform(min, max), 1))\n  return result\n\nprint(generate_random_numbers(5, 2, 10)) # [2.6, 6.2, 2.5, 8.5, 8.1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a list of random numbers.\n\n### Input:\nlength = 5, min = 2, max = 10\n\n### Output:\nimport random\n\ndef generate_random_numbers(length, min, max):\n  result = []\n  for _ in range(length):\n    result.append(round(random.uniform(min, max), 1))\n  return result\n\nprint(generate_random_numbers(5, 2, 10)) # [2.6, 6.2, 2.5, 8.5, 8.1]"}
{"instruction":"Write a Python program to represent the following data structure:\n\n{\n 'Fruits':[\n  'Apple',\n  'Banana',\n  'Orange'\n ],\n 'Vegetables':[\n  'Carrot',\n  'Cucumber',\n  'Potato'\n ]\n}","input":"Not applicable","output":"data = {\n 'Fruits':[\n  'Apple',\n  'Banana',\n  'Orange'\n ], \n 'Vegetables':[\n  'Carrot',\n  'Cucumber',\n  'Potato'\n ]\n}\n \nprint(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to represent the following data structure:\n\n{\n 'Fruits':[\n  'Apple',\n  'Banana',\n  'Orange'\n ],\n 'Vegetables':[\n  'Carrot',\n  'Cucumber',\n  'Potato'\n ]\n}\n\n### Input:\nNot applicable\n\n### Output:\ndata = {\n 'Fruits':[\n  'Apple',\n  'Banana',\n  'Orange'\n ], \n 'Vegetables':[\n  'Carrot',\n  'Cucumber',\n  'Potato'\n ]\n}\n \nprint(data)"}
{"instruction":"Debug the following python code to make the code run properly","input":"x = \"Hello World\"\nif x == \"Hello World:\nprint('Yes')","output":"x = \"Hello World\"\nif x == \"Hello World\":\n    print('Yes')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDebug the following python code to make the code run properly\n\n### Input:\nx = \"Hello World\"\nif x == \"Hello World:\nprint('Yes')\n\n### Output:\nx = \"Hello World\"\nif x == \"Hello World\":\n    print('Yes')"}
{"instruction":"Create an algorithm to optimize a search query in Python.","input":"","output":"def optimize_search(query):\n    # Clean the query string\n    query = query.lower()\n    query = query.strip()\n    query = re.sub(r'[^\\w\\s]', '', query)\n     \n    # Tokenize the query\n    tokens = nltk.word_tokenize(query)\n     \n    # Stem the tokens\n    stemmer = nltk.stem.PorterStemmer()\n    stemmed_tokens = [stemmer.stem(t) for t in tokens]\n     \n    # Join the stemmed tokens together\n    processed_query = ' '.join(stemmed_tokens)\n     \n    return processed_query","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to optimize a search query in Python.\n\n### Input:\n\n\n### Output:\ndef optimize_search(query):\n    # Clean the query string\n    query = query.lower()\n    query = query.strip()\n    query = re.sub(r'[^\\w\\s]', '', query)\n     \n    # Tokenize the query\n    tokens = nltk.word_tokenize(query)\n     \n    # Stem the tokens\n    stemmer = nltk.stem.PorterStemmer()\n    stemmed_tokens = [stemmer.stem(t) for t in tokens]\n     \n    # Join the stemmed tokens together\n    processed_query = ' '.join(stemmed_tokens)\n     \n    return processed_query"}
{"instruction":"Create a function in Python to sort the elements of a list in ascending order.","input":"[9, 3, 5, 4, 7, 6]","output":"def sort_asc(lst):\n    lst.sort()\n    return lst","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to sort the elements of a list in ascending order.\n\n### Input:\n[9, 3, 5, 4, 7, 6]\n\n### Output:\ndef sort_asc(lst):\n    lst.sort()\n    return lst"}
{"instruction":"Implement a regression algorithm in Python to predict housing prices.","input":"Not applicable","output":"import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Load the data\ndata = pd.read_csv('data.csv')\n\n# Define the inputs and labels\nX = data[['square_feet', 'beds', 'baths']]\ny = data['price']\n\n# Create and train the model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Test the model\npredictions = model.predict(X)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a regression algorithm in Python to predict housing prices.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Load the data\ndata = pd.read_csv('data.csv')\n\n# Define the inputs and labels\nX = data[['square_feet', 'beds', 'baths']]\ny = data['price']\n\n# Create and train the model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Test the model\npredictions = model.predict(X)"}
{"instruction":"Design a web application to  display the search results for sports listings.","input":"","output":"\/\/ Step 1: Design the database schema\n\/*\nThe database schema would include tables such as Users, Sports, Venues, Events, etc and the fields would be chosen accordingly like user id, sports name, venue name, event start\/end time, etc.\n*\/\n\n\/\/ Step 2: Design and develop the application\n\/*\nThe application would be a web application consisting of back-end and front-end components. The back-end would involve a server-side scripting language such as PHP or Python and the front-end would involve HTML\/CSS and JavaScript. The application would interact with the database to retrieve the search results.\n*\/\n\n\/\/ Step 3: Design the user interface\n\/*\nThe user interface of the application would involve a search box for users to enter relevant search terms. The results would be displayed in a tabular format with details such as sport name, venue name, start\/end times, etc.\n*\/","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a web application to  display the search results for sports listings.\n\n### Input:\n\n\n### Output:\n\/\/ Step 1: Design the database schema\n\/*\nThe database schema would include tables such as Users, Sports, Venues, Events, etc and the fields would be chosen accordingly like user id, sports name, venue name, event start\/end time, etc.\n*\/\n\n\/\/ Step 2: Design and develop the application\n\/*\nThe application would be a web application consisting of back-end and front-end components. The back-end would involve a server-side scripting language such as PHP or Python and the front-end would involve HTML\/CSS and JavaScript. The application would interact with the database to retrieve the search results.\n*\/\n\n\/\/ Step 3: Design the user interface\n\/*\nThe user interface of the application would involve a search box for users to enter relevant search terms. The results would be displayed in a tabular format with details such as sport name, venue name, start\/end times, etc.\n*\/"}
{"instruction":"Write a function in Python to find the closest number to a given number in an unsorted array.","input":"[3, 5, 8, 11, 12], 4","output":"def closest_number(arr, number):\n    diff = []\n    for i in arr:\n       diff.append(abs(i-number))\n   \n    closestNumberIndex = 0\n    minDiff = diff[closestNumberIndex]\n    for i in range(len(diff)):\n        if diff[i] < minDiff:\n            closestNumberIndex = i\n            minDiff = diff[i]\n            \n    return arr[closestNumberIndex]\n    \narr = [3, 5, 8, 11, 12]\nnumber = 4\nans = closest_number(arr, number)\nprint(ans)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to find the closest number to a given number in an unsorted array.\n\n### Input:\n[3, 5, 8, 11, 12], 4\n\n### Output:\ndef closest_number(arr, number):\n    diff = []\n    for i in arr:\n       diff.append(abs(i-number))\n   \n    closestNumberIndex = 0\n    minDiff = diff[closestNumberIndex]\n    for i in range(len(diff)):\n        if diff[i] < minDiff:\n            closestNumberIndex = i\n            minDiff = diff[i]\n            \n    return arr[closestNumberIndex]\n    \narr = [3, 5, 8, 11, 12]\nnumber = 4\nans = closest_number(arr, number)\nprint(ans)"}
{"instruction":"Generate a code in Python to find the index of the smallest element in a given list of numbers.","input":"[4, 2, 5, 12, 7]","output":"def index_min(arr):\n    min_index = 0\n    for i in range(1,len(arr)):\n        if arr[i] < arr[min_index]:\n            min_index = i\n    return min_index","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code in Python to find the index of the smallest element in a given list of numbers.\n\n### Input:\n[4, 2, 5, 12, 7]\n\n### Output:\ndef index_min(arr):\n    min_index = 0\n    for i in range(1,len(arr)):\n        if arr[i] < arr[min_index]:\n            min_index = i\n    return min_index"}
{"instruction":"Create a Python program to compare two lists and find their common elements.","input":"list1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]","output":"def compare_lists(list1, list2):\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    return common_elements\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\ncommon_elements = compare_lists(list1, list2)\nprint(common_elements)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to compare two lists and find their common elements.\n\n### Input:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\n### Output:\ndef compare_lists(list1, list2):\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    return common_elements\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\ncommon_elements = compare_lists(list1, list2)\nprint(common_elements)"}
{"instruction":"Using the provided pseudocode, write a program in Python that checks if a given number is a prime number.","input":"","output":"def is_prime(num):\n    if num <= 1:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True\n\nnum = 7\nresult = is_prime(num)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the provided pseudocode, write a program in Python that checks if a given number is a prime number.\n\n### Input:\n\n\n### Output:\ndef is_prime(num):\n    if num <= 1:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True\n\nnum = 7\nresult = is_prime(num)\nprint(result)"}
{"instruction":"Create a Python class that implements a basic calculator with the operations (+, -, *, \/).","input":"","output":"class Calculator:\n    def __init__(self):\n        pass\n\n    def add(self, number1, number2):\n        return number1 + number2\n\n    def subtract(self, number1, number2):\n        return number1 - number2\n\n    def multiply(self, number1, number2):\n        return number1 * number2\n\n    def divide(self, number1, number2):\n        return number1 \/ number2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that implements a basic calculator with the operations (+, -, *, \/).\n\n### Input:\n\n\n### Output:\nclass Calculator:\n    def __init__(self):\n        pass\n\n    def add(self, number1, number2):\n        return number1 + number2\n\n    def subtract(self, number1, number2):\n        return number1 - number2\n\n    def multiply(self, number1, number2):\n        return number1 * number2\n\n    def divide(self, number1, number2):\n        return number1 \/ number2"}
{"instruction":"Create a chatbot in Python that will serve as an assistant to students for university admission process.","input":"Not applicable","output":"import requests\nimport json\n\ndef ask_question(query):\n    #make a get request\n    r = requests.get(\"<URL>\/query?q=\"+query)\n\n    #process the response\n    resp_json = json.loads(r.text)\n    answer = resp_json['results'][0]['fulfillment']['speech']\n    return answer\n\nif __name__ == \"__main__\":\n    #Accept a question from the user\n    query = input(\"You: \")\n    answer = ask_question(query)\n    print(\"Chatbot: %s\" % answer)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a chatbot in Python that will serve as an assistant to students for university admission process.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nimport json\n\ndef ask_question(query):\n    #make a get request\n    r = requests.get(\"<URL>\/query?q=\"+query)\n\n    #process the response\n    resp_json = json.loads(r.text)\n    answer = resp_json['results'][0]['fulfillment']['speech']\n    return answer\n\nif __name__ == \"__main__\":\n    #Accept a question from the user\n    query = input(\"You: \")\n    answer = ask_question(query)\n    print(\"Chatbot: %s\" % answer)"}
{"instruction":"Generate a Python program to generate a list of all prime numbers between 1 and 100.","input":"","output":"prime_numbers = []\nfor num in range(2, 101):\n  isPrime = True\n  for i in range(2, num\/\/2 + 1):\n    if (num % i == 0):\n      isPrime = False\n      break  \n  if isPrime:\n    prime_numbers.append(num)\n\nprint(prime_numbers)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to generate a list of all prime numbers between 1 and 100.\n\n### Input:\n\n\n### Output:\nprime_numbers = []\nfor num in range(2, 101):\n  isPrime = True\n  for i in range(2, num\/\/2 + 1):\n    if (num % i == 0):\n      isPrime = False\n      break  \n  if isPrime:\n    prime_numbers.append(num)\n\nprint(prime_numbers)"}
{"instruction":"Optimize a given Python Class using an OOP approach.","input":"class User:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age","output":"class User:\n    def __init__(self, name, age):\n        self._name = name\n        self._age = age\n    \n    @property\n    def name(self):\n        return self._name\n\n    @name.setter\n    def name(self, value):\n        self._name = value\n    \n    @property \n    def age(self):\n        return self._age\n    \n    @age.setter\n    def age(self, value):\n        if value < 0:\n            raise ValueError('Age must be a positive number')\n        self._age = value","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a given Python Class using an OOP approach.\n\n### Input:\nclass User:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n### Output:\nclass User:\n    def __init__(self, name, age):\n        self._name = name\n        self._age = age\n    \n    @property\n    def name(self):\n        return self._name\n\n    @name.setter\n    def name(self, value):\n        self._name = value\n    \n    @property \n    def age(self):\n        return self._age\n    \n    @age.setter\n    def age(self, value):\n        if value < 0:\n            raise ValueError('Age must be a positive number')\n        self._age = value"}
{"instruction":"Create a neural network in python to classify the dataset below into two categories","input":"0 0 1 0\n1 0 0 0\n1 1 0 0","output":"import numpy as np\nimport tensorflow as tf\n\n# Define inputs and outputs\nX = tf.placeholder(tf.float32, shape=[3, 4])\ny = tf.placeholder(tf.float32, shape=[3, 1])\n\n# Define weights and biases\nW = tf.Variable(tf.random_normal([4, 1]))\nb = tf.Variable(tf.random_normal([1]))\n\n# Define model\nmodel = tf.sigmoid(tf.matmul(X, W ) + b)\n\n# Define cost and optimizer\ncost = tf.reduce_mean(-y * tf.log(model) - (1-y) * tf.log(1-model))\noptimizer = tf.train.GradientDescentOptimizer(0.1).minimize(cost)\n\n# Train model\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    for i in range(1000):\n        sess.run(optimizer, feed_dict={X:[[0,0,1,0],[1,0,0,0],[1,1,0,0]], y:[[0],[1],[1]]})\n\n# Print results\nprint(\"Final weights\", sess.run(W))\nprint(\"Final bais: \", sess.run(b))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network in python to classify the dataset below into two categories\n\n### Input:\n0 0 1 0\n1 0 0 0\n1 1 0 0\n\n### Output:\nimport numpy as np\nimport tensorflow as tf\n\n# Define inputs and outputs\nX = tf.placeholder(tf.float32, shape=[3, 4])\ny = tf.placeholder(tf.float32, shape=[3, 1])\n\n# Define weights and biases\nW = tf.Variable(tf.random_normal([4, 1]))\nb = tf.Variable(tf.random_normal([1]))\n\n# Define model\nmodel = tf.sigmoid(tf.matmul(X, W ) + b)\n\n# Define cost and optimizer\ncost = tf.reduce_mean(-y * tf.log(model) - (1-y) * tf.log(1-model))\noptimizer = tf.train.GradientDescentOptimizer(0.1).minimize(cost)\n\n# Train model\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    for i in range(1000):\n        sess.run(optimizer, feed_dict={X:[[0,0,1,0],[1,0,0,0],[1,1,0,0]], y:[[0],[1],[1]]})\n\n# Print results\nprint(\"Final weights\", sess.run(W))\nprint(\"Final bais: \", sess.run(b))"}
{"instruction":"Create a Python program that takes an email message as input and prints the sender's email address.","input":"Email Message:\nFrom: \"John Doe\" <john.doe@example.com>\nTo: \"Jane Doe\" <jane.doe@example.com>\nSubject: Example Email","output":"import re\n\nemail_message = \"\"\" \nFrom: \"John Doe\" <john.doe@example.com>\nTo: \"Jane Doe\" <jane.doe@example.com>\nSubject: Example Email\n\"\"\"\n\nsender_email = re.findall(r'From: .+?<(.+?)>', email_message)\n\nprint('Sender\\'s email address:', sender_email[0])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes an email message as input and prints the sender's email address.\n\n### Input:\nEmail Message:\nFrom: \"John Doe\" <john.doe@example.com>\nTo: \"Jane Doe\" <jane.doe@example.com>\nSubject: Example Email\n\n### Output:\nimport re\n\nemail_message = \"\"\" \nFrom: \"John Doe\" <john.doe@example.com>\nTo: \"Jane Doe\" <jane.doe@example.com>\nSubject: Example Email\n\"\"\"\n\nsender_email = re.findall(r'From: .+?<(.+?)>', email_message)\n\nprint('Sender\\'s email address:', sender_email[0])"}
{"instruction":"Given a list of squares in a 2D array, generate a Python program to find the number of squares with a side greater than 5.","input":"[[2, 6, 1], [4, 3, 9], [4, 6, 7]]","output":"count = 0\nfor row in arr:\n    for col in row:\n        if col > 5:\n            count += 1\nprint(count)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of squares in a 2D array, generate a Python program to find the number of squares with a side greater than 5.\n\n### Input:\n[[2, 6, 1], [4, 3, 9], [4, 6, 7]]\n\n### Output:\ncount = 0\nfor row in arr:\n    for col in row:\n        if col > 5:\n            count += 1\nprint(count)"}
{"instruction":"Write a Python program that returns the index of a given item in a given list.","input":"","output":"def find_index(item, array):\n    for i in range(len(array)):\n        if array[i] == item:\n            return i","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that returns the index of a given item in a given list.\n\n### Input:\n\n\n### Output:\ndef find_index(item, array):\n    for i in range(len(array)):\n        if array[i] == item:\n            return i"}
{"instruction":"Create a Python function to score the similarity between two strings.","input":"","output":"def score_similarity(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n][m] \/ (n + m)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to score the similarity between two strings.\n\n### Input:\n\n\n### Output:\ndef score_similarity(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n][m] \/ (n + m)"}
{"instruction":"Rearrange the words in the following sentence to create a meaningful sentence.","input":"sentence = \"program a to write Python\"","output":"Write a program in Python.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRearrange the words in the following sentence to create a meaningful sentence.\n\n### Input:\nsentence = \"program a to write Python\"\n\n### Output:\nWrite a program in Python."}
{"instruction":"Generate a Python script for sorting a list of items alphabetically.","input":"items = [\"Apple\", \"Banana\", \"Cherry\", \"Avocado\"]","output":"def sort_items(items):\n  items.sort()\n  return items\n\nprint(sort_items(items))\n\n# Output\n['Apple', 'Avocado', 'Banana', 'Cherry']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script for sorting a list of items alphabetically.\n\n### Input:\nitems = [\"Apple\", \"Banana\", \"Cherry\", \"Avocado\"]\n\n### Output:\ndef sort_items(items):\n  items.sort()\n  return items\n\nprint(sort_items(items))\n\n# Output\n['Apple', 'Avocado', 'Banana', 'Cherry']"}
{"instruction":"Create a Python module for a spiral matrix with the following functions: createSpiralMatrix, printSpiralMatrix, and transposeSpiralMatrix.","input":"Not applicable","output":"def createSpiralMatrix(n):\n matrix = [[0] * n for i in range(n)]\n row = 0\n col = -1\n total = n * n\n spiral = 1\n\n while total > 0:\n # move left -> right\n while col + 1 < n and matrix[row][col + 1] == 0:\n col += 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n # move up -> down\n while row + 1 < n and matrix[row + 1][col] == 0:\n row += 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n # move right -> left\n while col - 1 >= 0 and matrix[row][col - 1] == 0:\n col -= 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n # move down -> up\n while row - 1 >= 0 and matrix[row - 1][col] == 0:\n row -= 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n # move left -> right\n while col + 1 < n and matrix[row][col + 1] == 0:\n col += 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n return matrix\n\ndef printSpiralMatrix(matrix):\n for row in matrix:\n print(*row)\n\ndef transposeSpiralMatrix(matrix):\n return [list(x) for x in zip(*matrix)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module for a spiral matrix with the following functions: createSpiralMatrix, printSpiralMatrix, and transposeSpiralMatrix.\n\n### Input:\nNot applicable\n\n### Output:\ndef createSpiralMatrix(n):\n matrix = [[0] * n for i in range(n)]\n row = 0\n col = -1\n total = n * n\n spiral = 1\n\n while total > 0:\n # move left -> right\n while col + 1 < n and matrix[row][col + 1] == 0:\n col += 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n # move up -> down\n while row + 1 < n and matrix[row + 1][col] == 0:\n row += 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n # move right -> left\n while col - 1 >= 0 and matrix[row][col - 1] == 0:\n col -= 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n # move down -> up\n while row - 1 >= 0 and matrix[row - 1][col] == 0:\n row -= 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n # move left -> right\n while col + 1 < n and matrix[row][col + 1] == 0:\n col += 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n return matrix\n\ndef printSpiralMatrix(matrix):\n for row in matrix:\n print(*row)\n\ndef transposeSpiralMatrix(matrix):\n return [list(x) for x in zip(*matrix)]"}
{"instruction":"Create a Python app to take a list of words and determine if each word is an anagram of another.","input":"","output":"def is_anagram(word1, word2):\n    if sorted(word1) == sorted(word2):\n        return True\n    else:\n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python app to take a list of words and determine if each word is an anagram of another.\n\n### Input:\n\n\n### Output:\ndef is_anagram(word1, word2):\n    if sorted(word1) == sorted(word2):\n        return True\n    else:\n        return False"}
{"instruction":"Write a Python program to format a given string with a coefficient of over 66%.","input":"s = \"Hello World\"","output":"def format_string(s):\n return s.upper() if (s.count(\" \")+1) \/ len(s) > 0.66 else s\n\ns = \"Hello World\"\nprint(format_string(s))\n# Output: HELLO WORLD","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to format a given string with a coefficient of over 66%.\n\n### Input:\ns = \"Hello World\"\n\n### Output:\ndef format_string(s):\n return s.upper() if (s.count(\" \")+1) \/ len(s) > 0.66 else s\n\ns = \"Hello World\"\nprint(format_string(s))\n# Output: HELLO WORLD"}
{"instruction":"Design a algorithm in Python that finds the number of occurrence of a character in a string","input":"String = \"This is a sample string\"\nCharacter = \"s\"","output":"def count_occurrence(string, character):\n    # Initializing the counter\n    count = 0\n    \n    # Traversing the string\n    for i in range(len(string)):\n        # Checking if character is the same\n        if (string[i] == character):\n            count += 1\n            \n    # Returning the result\n    return count\n\n# Testing the code\nif __name__ == \"__main__\": \n    # Testing string\n    string = 'This is a sample string' \n    character = 's' \n    # Printing the result\n    print(\"Number of occurrence of '\", character, \"' =\", count_occurrence(string, character))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a algorithm in Python that finds the number of occurrence of a character in a string\n\n### Input:\nString = \"This is a sample string\"\nCharacter = \"s\"\n\n### Output:\ndef count_occurrence(string, character):\n    # Initializing the counter\n    count = 0\n    \n    # Traversing the string\n    for i in range(len(string)):\n        # Checking if character is the same\n        if (string[i] == character):\n            count += 1\n            \n    # Returning the result\n    return count\n\n# Testing the code\nif __name__ == \"__main__\": \n    # Testing string\n    string = 'This is a sample string' \n    character = 's' \n    # Printing the result\n    print(\"Number of occurrence of '\", character, \"' =\", count_occurrence(string, character))"}
{"instruction":"Create a web scraper to extract data from a website using Python.","input":"Not applicable","output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/example.com\/'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\ndata = soup.findAll('div', class_='data-element')\n\nfor datum in data:\n # extract data and process it\n print(datum.text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper to extract data from a website using Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/example.com\/'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\ndata = soup.findAll('div', class_='data-element')\n\nfor datum in data:\n # extract data and process it\n print(datum.text)"}
{"instruction":"Write an algorithm to optimize an implementation of an algorithm given in Python.","input":"# naive implementation code\n\ndef insertionSort(arr): \n    n = len(arr)\n    for i in range(1, n): \n        key = arr[i]\n        j = i-1\n        while j >=0 and key < arr[j] : \n            arr[j+1] = arr[j] \n            j -= 1\n        arr[j+1] = key","output":"def insertionSort(arr): \n    n = len(arr)\n    for i in range(1, n): \n        key = arr[i]\n        j = binarySearch(arr, key, 0, i - 1)\n        for k in range(i-1, j-1, -1):\n            arr[k+1] = arr[k]\n        arr[j] = key\n\ndef binarySearch(arr, key, start, end):\n    if (end - start == 1):\n        if (key < arr[start]):\n            return start\n        else:\n            return end\n    if (end == start):\n        return start\n    mid = start + (end - start) \/\/ 2\n    if (key < arr[mid]):\n        return binarySearch(arr, key, start, mid)\n    else:\n        return binarySearch(arr, key, mid, end)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to optimize an implementation of an algorithm given in Python.\n\n### Input:\n# naive implementation code\n\ndef insertionSort(arr): \n    n = len(arr)\n    for i in range(1, n): \n        key = arr[i]\n        j = i-1\n        while j >=0 and key < arr[j] : \n            arr[j+1] = arr[j] \n            j -= 1\n        arr[j+1] = key\n\n### Output:\ndef insertionSort(arr): \n    n = len(arr)\n    for i in range(1, n): \n        key = arr[i]\n        j = binarySearch(arr, key, 0, i - 1)\n        for k in range(i-1, j-1, -1):\n            arr[k+1] = arr[k]\n        arr[j] = key\n\ndef binarySearch(arr, key, start, end):\n    if (end - start == 1):\n        if (key < arr[start]):\n            return start\n        else:\n            return end\n    if (end == start):\n        return start\n    mid = start + (end - start) \/\/ 2\n    if (key < arr[mid]):\n        return binarySearch(arr, key, start, mid)\n    else:\n        return binarySearch(arr, key, mid, end)"}
{"instruction":"Create a function in Python that takes a string and returns a new string with the characters in reverse order.","input":"\"Hello World!\"","output":"def reverse_string(input_str):\n    reversed_str = \"\"\n    for i in range(len(input_str)-1,-1,-1):\n        reversed_str += input_str[i]\n    return reversed_str\n\nprint (reverse_string(\"Hello World!\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes a string and returns a new string with the characters in reverse order.\n\n### Input:\n\"Hello World!\"\n\n### Output:\ndef reverse_string(input_str):\n    reversed_str = \"\"\n    for i in range(len(input_str)-1,-1,-1):\n        reversed_str += input_str[i]\n    return reversed_str\n\nprint (reverse_string(\"Hello World!\"))"}
{"instruction":"Write a Python program to scroll a given message on the console.","input":"message = 'Hello World!'","output":"def scrollMessage(message): \n    for char in message: \n        for i in range(100): \n            print (char, end = \" \")\n        print(\"\")\n\n\n# Input\nmessage = 'Hello World!'\n\n# Output\nscrollMessage(message)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to scroll a given message on the console.\n\n### Input:\nmessage = 'Hello World!'\n\n### Output:\ndef scrollMessage(message): \n    for char in message: \n        for i in range(100): \n            print (char, end = \" \")\n        print(\"\")\n\n\n# Input\nmessage = 'Hello World!'\n\n# Output\nscrollMessage(message)"}
{"instruction":"Write a function in Python that creates a random password of length 8 with at least two uppercase letters, one lowercase letter, one number, and one special character.","input":"Not applicable","output":"import random\nimport string\n\ndef random_password():\n  char_length = 8\n  characters = string.ascii_letters + string.digits + string.punctuation\n  password = ''.join(random.choice(characters) for x in range(char_length))\n  has_uppercase = any(x.isupper() for x in password)\n  has_lowercase = any(x.islower() for x in password)\n  has_numbers = any(x.isnumeric() for x in password)\n  has_specials = any(x in string.punctuation for x in password)\n  if has_uppercase+has_lowercase+has_numbers+has_specials >= 3:\n    return password\n  else:\n    return random_password()\n\npwd = random_password","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that creates a random password of length 8 with at least two uppercase letters, one lowercase letter, one number, and one special character.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\nimport string\n\ndef random_password():\n  char_length = 8\n  characters = string.ascii_letters + string.digits + string.punctuation\n  password = ''.join(random.choice(characters) for x in range(char_length))\n  has_uppercase = any(x.isupper() for x in password)\n  has_lowercase = any(x.islower() for x in password)\n  has_numbers = any(x.isnumeric() for x in password)\n  has_specials = any(x in string.punctuation for x in password)\n  if has_uppercase+has_lowercase+has_numbers+has_specials >= 3:\n    return password\n  else:\n    return random_password()\n\npwd = random_password"}
{"instruction":"Create a web scraper using Python and BeautifulSoup to extract the prices of a product from an online store","input":"https:\/\/example.com\/product\/123","output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/example.com\/product\/123'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nprice_block = soup.find('div', class_='price')\nprices = [float(price.text) for price in price_block.find_all('span')]\n\nprint(f\"Prices for {url} are {prices}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper using Python and BeautifulSoup to extract the prices of a product from an online store\n\n### Input:\nhttps:\/\/example.com\/product\/123\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/example.com\/product\/123'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nprice_block = soup.find('div', class_='price')\nprices = [float(price.text) for price in price_block.find_all('span')]\n\nprint(f\"Prices for {url} are {prices}\")"}
{"instruction":"Train a linear regression model using Python to predict the prices of houses.","input":"","output":"import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n#load dataset\ndf = pd.read_csv(\"housing_data.csv\")\n\n#split dataset\nX = df.drop(\"price\", axis=1)\ny = df[\"price\"]\n\n#train model\nmodel = LinearRegression()\nmodel.fit(X, y)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTrain a linear regression model using Python to predict the prices of houses.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n#load dataset\ndf = pd.read_csv(\"housing_data.csv\")\n\n#split dataset\nX = df.drop(\"price\", axis=1)\ny = df[\"price\"]\n\n#train model\nmodel = LinearRegression()\nmodel.fit(X, y)"}
{"instruction":"Construct a Python program that calculates a person's BMI given their height and weight.","input":"Weight: 70 kg\nHeight:  1.80 m","output":"def calculate_bmi(weight, height):\n    bmi = weight \/ (height**2)\n    return bmi\n\nweight = 70\nheight = 1.80\n\nbmi = calculate_bmi(weight, height)\nprint(\"BMI: \" + str(bmi))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program that calculates a person's BMI given their height and weight.\n\n### Input:\nWeight: 70 kg\nHeight:  1.80 m\n\n### Output:\ndef calculate_bmi(weight, height):\n    bmi = weight \/ (height**2)\n    return bmi\n\nweight = 70\nheight = 1.80\n\nbmi = calculate_bmi(weight, height)\nprint(\"BMI: \" + str(bmi))"}
{"instruction":"Create a function in Python that takes a list of strings and returns a dictionary where the key is the first character of each string and the value is a list of the strings starting with that character.","input":"[\u2018apple\u2019, \u2018elephant\u2019, \u2018ball\u2019, \u2018cat\u2019]","output":"def groupStrings(strings):\n    # Initialize a dictionary\n    dict = {}\n\n    # Iterate over the list\n    for string in strings:\n        # Get the first character\n        first_char = string[0]\n\n        # Check if the first character is in the dictionary\n        if first_char in dict:\n            # Append the string to the existing list\n            dict[first_char].append(string)\n        else:\n            # Create a list with the string\n            dict[first_char] = [string]\n\n    return dict\n\nresult = groupStrings(['apple', 'elephant', 'ball', 'cat'])\nprint(result) # {'a': ['apple'], 'e': ['elephant'], 'b': ['ball'], 'c': ['cat']}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes a list of strings and returns a dictionary where the key is the first character of each string and the value is a list of the strings starting with that character.\n\n### Input:\n[\u2018apple\u2019, \u2018elephant\u2019, \u2018ball\u2019, \u2018cat\u2019]\n\n### Output:\ndef groupStrings(strings):\n    # Initialize a dictionary\n    dict = {}\n\n    # Iterate over the list\n    for string in strings:\n        # Get the first character\n        first_char = string[0]\n\n        # Check if the first character is in the dictionary\n        if first_char in dict:\n            # Append the string to the existing list\n            dict[first_char].append(string)\n        else:\n            # Create a list with the string\n            dict[first_char] = [string]\n\n    return dict\n\nresult = groupStrings(['apple', 'elephant', 'ball', 'cat'])\nprint(result) # {'a': ['apple'], 'e': ['elephant'], 'b': ['ball'], 'c': ['cat']}"}
{"instruction":"Create a Python program for encrypting a given string using the XOR technique.","input":"String: \"Hello world!\"","output":"def xor_crypt_string(data, key='my_secret_key'):\n    l = len(key)\n    return bytearray((\n        (data[i] ^ ord(key[i % l])) for i in range(0,len(data))\n    ))\n\nencrypted_data = xor_crypt_string(bytearray('Hello world!', 'utf-8'))\n\nprint(encrypted_data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for encrypting a given string using the XOR technique.\n\n### Input:\nString: \"Hello world!\"\n\n### Output:\ndef xor_crypt_string(data, key='my_secret_key'):\n    l = len(key)\n    return bytearray((\n        (data[i] ^ ord(key[i % l])) for i in range(0,len(data))\n    ))\n\nencrypted_data = xor_crypt_string(bytearray('Hello world!', 'utf-8'))\n\nprint(encrypted_data)"}
{"instruction":"Write a script in python to crawl a web page","input":"","output":"import requests\nurl = 'http:\/\/www.example.com'\nresponse = requests.get(url)\nif response.status_code == 200:\n    html_contents = response.content\n    # Parse the html_contents and store the data","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script in python to crawl a web page\n\n### Input:\n\n\n### Output:\nimport requests\nurl = 'http:\/\/www.example.com'\nresponse = requests.get(url)\nif response.status_code == 200:\n    html_contents = response.content\n    # Parse the html_contents and store the data"}
{"instruction":"Write a python program to create a list of prime numbers between a given range.","input":"","output":"def find_prime_numbers(start, end):\n    prime_numbers_list = []\n    for num in range(start, end + 1):\n        if all(num % i != 0 for i in range(2, num)):\n            prime_numbers_list.append(num)\n    \n    return prime_numbers_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to create a list of prime numbers between a given range.\n\n### Input:\n\n\n### Output:\ndef find_prime_numbers(start, end):\n    prime_numbers_list = []\n    for num in range(start, end + 1):\n        if all(num % i != 0 for i in range(2, num)):\n            prime_numbers_list.append(num)\n    \n    return prime_numbers_list"}
{"instruction":"Generate a Neural Network in Python to do binary classification on a dataset","input":"","output":"# import libraries\nimport numpy as np\nimport tensorflow as tf\n\n# define inputs\nX = tf.placeholder(tf.float32, shape=[None, input_dim])\ny = tf.placeholder(tf.float32, shape=[None, classes])\n\n# define weights & biases\nW = tf.Variable(tf.random_normal([input_dim, classes]))\nb = tf.Variable(tf.random_normal([classes]))\n\n# define prediction\npred = tf.nn.softmax(tf.matmul(X,W) + b)\n\n# define loss\ncost = tf.reduce_mean(-tf.reduce_sum(y*tf.log(pred), reduction_indices=1))\n\n# define optimizer\noptimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)\n\n# start session\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n\n    # train model\n    for epoch in range(training_epochs):\n        _, c = sess.run([optimizer, cost], feed_dict={X: x_train,\n                        y: y_train})\n        \n    # test model\n    output = tf.argmax(pred, 1)\n    accuracy = tf.reduce_mean(tf.cast(tf.equal(output, tf.argmax(y, 1)), tf.float32))\n    result = sess.run(accuracy, feed_dict={X: x_test, y: y_test})\n    print('The accuracy of the model on the test set is: {}'.format(result))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Neural Network in Python to do binary classification on a dataset\n\n### Input:\n\n\n### Output:\n# import libraries\nimport numpy as np\nimport tensorflow as tf\n\n# define inputs\nX = tf.placeholder(tf.float32, shape=[None, input_dim])\ny = tf.placeholder(tf.float32, shape=[None, classes])\n\n# define weights & biases\nW = tf.Variable(tf.random_normal([input_dim, classes]))\nb = tf.Variable(tf.random_normal([classes]))\n\n# define prediction\npred = tf.nn.softmax(tf.matmul(X,W) + b)\n\n# define loss\ncost = tf.reduce_mean(-tf.reduce_sum(y*tf.log(pred), reduction_indices=1))\n\n# define optimizer\noptimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)\n\n# start session\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n\n    # train model\n    for epoch in range(training_epochs):\n        _, c = sess.run([optimizer, cost], feed_dict={X: x_train,\n                        y: y_train})\n        \n    # test model\n    output = tf.argmax(pred, 1)\n    accuracy = tf.reduce_mean(tf.cast(tf.equal(output, tf.argmax(y, 1)), tf.float32))\n    result = sess.run(accuracy, feed_dict={X: x_test, y: y_test})\n    print('The accuracy of the model on the test set is: {}'.format(result))"}
{"instruction":"Create a web crawler in Python that takes a given URL and prints out a list of links.","input":"https:\/\/www.example.com","output":"from bs4 import BeautifulSoup\nimport requests\n\nurl = 'https:\/\/www.example.com'\nresponse = requests.get(url)\n\nsoup = BeautifulSoup(response.text, 'lxml')\nfor link in soup.find_all('a'):\n    print(link.get('href'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web crawler in Python that takes a given URL and prints out a list of links.\n\n### Input:\nhttps:\/\/www.example.com\n\n### Output:\nfrom bs4 import BeautifulSoup\nimport requests\n\nurl = 'https:\/\/www.example.com'\nresponse = requests.get(url)\n\nsoup = BeautifulSoup(response.text, 'lxml')\nfor link in soup.find_all('a'):\n    print(link.get('href'))"}
{"instruction":"Produce a Python program to convert a given number of minutes to years and days.","input":"76586","output":"def convertMinutesToYears(minutes):\n    years = minutes \/ 525600\n    days = minutes % 525600 \/ 1440 \n    \n    print(\"The given\" + str(minutes) + \" minutes is equal to \" + \n    str(round(years)) + \" year(s) and \" + str(round(days)) + \" day(s)\")\n\nconvertMinutesToYears(76586)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a Python program to convert a given number of minutes to years and days.\n\n### Input:\n76586\n\n### Output:\ndef convertMinutesToYears(minutes):\n    years = minutes \/ 525600\n    days = minutes % 525600 \/ 1440 \n    \n    print(\"The given\" + str(minutes) + \" minutes is equal to \" + \n    str(round(years)) + \" year(s) and \" + str(round(days)) + \" day(s)\")\n\nconvertMinutesToYears(76586)"}
{"instruction":"Generate a script in Python to generate a random password that has a minimum of 8 characters, including special characters and numbers.","input":"Not applicable","output":"import string\nimport random\n\n# Generate 8 random characters, including special characters and numbers\nsize = 8\npassword = ''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation, k=size))\n\nprint(password) # Output: eu$y6c17","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a script in Python to generate a random password that has a minimum of 8 characters, including special characters and numbers.\n\n### Input:\nNot applicable\n\n### Output:\nimport string\nimport random\n\n# Generate 8 random characters, including special characters and numbers\nsize = 8\npassword = ''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation, k=size))\n\nprint(password) # Output: eu$y6c17"}
{"instruction":"Create a Python program to create a list of unique emails from a given list of emails, by removing any duplicates.","input":"myList = [\"test1@example.com\", \"test2@example.com\", \"test1@example.com\", \"test3@example.com\"]","output":"def remove_duplicates(myList):\n    unique_list = []\n    for item in myList:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n\nresult = remove_duplicates(myList)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to create a list of unique emails from a given list of emails, by removing any duplicates.\n\n### Input:\nmyList = [\"test1@example.com\", \"test2@example.com\", \"test1@example.com\", \"test3@example.com\"]\n\n### Output:\ndef remove_duplicates(myList):\n    unique_list = []\n    for item in myList:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n\nresult = remove_duplicates(myList)\nprint(result)"}
{"instruction":"Convert the following function from Python to Java.","input":"def generate_list(size):\n    \"\"\"Generate a list of integers from 0 to size - 1.\"\"\"\n    return [x for x in range(size)]","output":"public List<Integer> generateList(int size) {\n    \/* Generate a list of integers from 0 to size - 1. *\/\n    List<Integer> list = new ArrayList<>();\n    for (int i = 0; i < size; i++) {\n        list.add(i);\n    }\n    return list;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following function from Python to Java.\n\n### Input:\ndef generate_list(size):\n    \"\"\"Generate a list of integers from 0 to size - 1.\"\"\"\n    return [x for x in range(size)]\n\n### Output:\npublic List<Integer> generateList(int size) {\n    \/* Generate a list of integers from 0 to size - 1. *\/\n    List<Integer> list = new ArrayList<>();\n    for (int i = 0; i < size; i++) {\n        list.add(i);\n    }\n    return list;\n}"}
{"instruction":"Write a Python program that finds the smallest number in a given array with an algorithm that has an optimal time complexity.","input":"array = [3, 8, 2, 5, 4, 1, 9]","output":"def find_smallest_number(array):\n    smallest = array[0]\n    for element in array:\n        if element < smallest:\n            smallest = element\n    return smallest","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that finds the smallest number in a given array with an algorithm that has an optimal time complexity.\n\n### Input:\narray = [3, 8, 2, 5, 4, 1, 9]\n\n### Output:\ndef find_smallest_number(array):\n    smallest = array[0]\n    for element in array:\n        if element < smallest:\n            smallest = element\n    return smallest"}
{"instruction":"Optimize a Python algorithm that computes the maximum value in a given array.","input":"list = [23, 45, 67, 89, 13, 99, 19, 20]","output":"def max_value(list):\n    max_val = list[0]\n    for val in list[1:]:\n        if val > max_val:\n            max_val = val\n    return max_val\n\nlist = [23, 45, 67, 89, 13, 99, 19, 20]\nprint(max_value(list)) # 99","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Python algorithm that computes the maximum value in a given array.\n\n### Input:\nlist = [23, 45, 67, 89, 13, 99, 19, 20]\n\n### Output:\ndef max_value(list):\n    max_val = list[0]\n    for val in list[1:]:\n        if val > max_val:\n            max_val = val\n    return max_val\n\nlist = [23, 45, 67, 89, 13, 99, 19, 20]\nprint(max_value(list)) # 99"}
{"instruction":"Write a Python function to split a given string in two parts which are separated by a space.","input":"","output":"def split_string(string):\n  parts = string.split(' ')\n  return parts[0], parts[1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to split a given string in two parts which are separated by a space.\n\n### Input:\n\n\n### Output:\ndef split_string(string):\n  parts = string.split(' ')\n  return parts[0], parts[1]"}
{"instruction":"Change the following python code so that the loop only iterates through the even numbers in the list.","input":"for num in range(16):\n    print(num)","output":"for num in range(16):\n    if num % 2 == 0:\n        print(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nChange the following python code so that the loop only iterates through the even numbers in the list.\n\n### Input:\nfor num in range(16):\n    print(num)\n\n### Output:\nfor num in range(16):\n    if num % 2 == 0:\n        print(num)"}
{"instruction":"Generate a Python program to create a dictionary and add elements to it.","input":"","output":"def create_dict():\n    my_dict = {} \n  \n    # adding elements one at a time \n    my_dict['a'] = 'alpha'\n    my_dict['g'] = 'gamma'\n    my_dict['o'] = 'omega'\n  \n    print(my_dict) \n    return my_dict","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to create a dictionary and add elements to it.\n\n### Input:\n\n\n### Output:\ndef create_dict():\n    my_dict = {} \n  \n    # adding elements one at a time \n    my_dict['a'] = 'alpha'\n    my_dict['g'] = 'gamma'\n    my_dict['o'] = 'omega'\n  \n    print(my_dict) \n    return my_dict"}
{"instruction":"Create a Python script to generate a random password. The generated password should have at least 6 characters, and must contain both letters and numbers.","input":"Not applicable","output":"import random\n\ndef generate_password():\n    alphabet = \"abcdefghijklmnopqrstuvwxyz01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    pw_length = 6\n    mypw = \"\"\n\n    for i in range(pw_length):\n        next_index = random.randrange(len(alphabet))\n        mypw = mypw + alphabet[next_index]\n\n    return mypw\n\nprint(generate_password())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate a random password. The generated password should have at least 6 characters, and must contain both letters and numbers.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\ndef generate_password():\n    alphabet = \"abcdefghijklmnopqrstuvwxyz01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    pw_length = 6\n    mypw = \"\"\n\n    for i in range(pw_length):\n        next_index = random.randrange(len(alphabet))\n        mypw = mypw + alphabet[next_index]\n\n    return mypw\n\nprint(generate_password())"}
{"instruction":"Create a data structure to store and print all the codes for the top 10 programming languages.","input":"C, C++, Python, Java, C#, JavaScript, PHP, Rust, Swift, Go","output":"codes = {\n    'C': 'c',\n    'C++': 'cpp',\n    'Python': 'py',\n    'Java': 'java',\n    'C#': 'cs',\n    'JavaScript': 'js',\n    'PHP': 'php',\n    'Rust': 'rs',\n    'Swift': 'swift',\n    'Go': 'go'\n}\n\nfor key, value in codes.items():\n    print('{}: {}'.format(key, value))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a data structure to store and print all the codes for the top 10 programming languages.\n\n### Input:\nC, C++, Python, Java, C#, JavaScript, PHP, Rust, Swift, Go\n\n### Output:\ncodes = {\n    'C': 'c',\n    'C++': 'cpp',\n    'Python': 'py',\n    'Java': 'java',\n    'C#': 'cs',\n    'JavaScript': 'js',\n    'PHP': 'php',\n    'Rust': 'rs',\n    'Swift': 'swift',\n    'Go': 'go'\n}\n\nfor key, value in codes.items():\n    print('{}: {}'.format(key, value))"}
{"instruction":"Write a Python script for preprocessing a CSV dataset. This script should remove any irrelevant columns, scale selected numerical features, apply one hot encoding to categorical features, and split the data into a training and test set.","input":"path_to_csv = 'dataset.csv'","output":"import pandas as pd\n\n# Load data\ndata = pd.read_csv(path_to_csv)\n\n# Remove irrelevant columns\ndata.drop(['irrelevant_column1', 'irrelevant_column2'], axis=1, inplace=True)\n\n# Scale numerical features\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\ndata[['numerical_feature1', 'numerical_feature2']] = scaler.fit_transform(data[['numerical_feature1', 'numerical_feature2']])\n\n# One Hot Encoding\ndata = pd.get_dummies(data, columns=['categorical_feature1', 'categorical_feature2'])\n\n# Split data into training and test sets\nX = data.drop['target']\ny = data['target']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script for preprocessing a CSV dataset. This script should remove any irrelevant columns, scale selected numerical features, apply one hot encoding to categorical features, and split the data into a training and test set.\n\n### Input:\npath_to_csv = 'dataset.csv'\n\n### Output:\nimport pandas as pd\n\n# Load data\ndata = pd.read_csv(path_to_csv)\n\n# Remove irrelevant columns\ndata.drop(['irrelevant_column1', 'irrelevant_column2'], axis=1, inplace=True)\n\n# Scale numerical features\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\ndata[['numerical_feature1', 'numerical_feature2']] = scaler.fit_transform(data[['numerical_feature1', 'numerical_feature2']])\n\n# One Hot Encoding\ndata = pd.get_dummies(data, columns=['categorical_feature1', 'categorical_feature2'])\n\n# Split data into training and test sets\nX = data.drop['target']\ny = data['target']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"}
{"instruction":"Given a string \"Hello World\", write a Python program to generate an encrypted version of the string.","input":"Hello World","output":"encrypted_string = ''\nfor c in 'Hello World':\n encrypted_string += chr(ord(c) + 3)\n\nprint(encrypted_string) # Khoor Zruog","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a string \"Hello World\", write a Python program to generate an encrypted version of the string.\n\n### Input:\nHello World\n\n### Output:\nencrypted_string = ''\nfor c in 'Hello World':\n encrypted_string += chr(ord(c) + 3)\n\nprint(encrypted_string) # Khoor Zruog"}
{"instruction":"Train a machine learning model in Python using the scikit-learn library to predict animal classification.","input":"Not applicable","output":"# import libraries\nfrom sklearn import datasets\nfrom sklearn.ensemble import RandomForestClassifier\n\n# load the dataset\ndataset = datasets.load_iris()\n\n# create the model\nmodel = RandomForestClassifier()\n\n# train the model\nmodel.fit(dataset.data, dataset.target)\n\n# make predictions\npredictions = model.predict(dataset.data)\n\n# check accuracy\naccuracy = model.score(dataset.data, dataset.target)\n\nprint('Accuracy: {}%'.format(accuracy * 100))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTrain a machine learning model in Python using the scikit-learn library to predict animal classification.\n\n### Input:\nNot applicable\n\n### Output:\n# import libraries\nfrom sklearn import datasets\nfrom sklearn.ensemble import RandomForestClassifier\n\n# load the dataset\ndataset = datasets.load_iris()\n\n# create the model\nmodel = RandomForestClassifier()\n\n# train the model\nmodel.fit(dataset.data, dataset.target)\n\n# make predictions\npredictions = model.predict(dataset.data)\n\n# check accuracy\naccuracy = model.score(dataset.data, dataset.target)\n\nprint('Accuracy: {}%'.format(accuracy * 100))"}
{"instruction":"Given a list of integers, write a Python program to compute the maximum difference between any two numbers of the list?","input":"[4, 8, 2, 10, 6]","output":"def max_difference(numbers):\n max_diff = 0\n for i in range(len(numbers)-1):\n for j in range(i+1, len(numbers)):\n cur_diff = abs(numbers[i] - numbers[j])\n if cur_diff > max_diff:\n max_diff = cur_diff\n return max_diff\n\nresult = max_difference([4, 8, 2, 10, 6])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integers, write a Python program to compute the maximum difference between any two numbers of the list?\n\n### Input:\n[4, 8, 2, 10, 6]\n\n### Output:\ndef max_difference(numbers):\n max_diff = 0\n for i in range(len(numbers)-1):\n for j in range(i+1, len(numbers)):\n cur_diff = abs(numbers[i] - numbers[j])\n if cur_diff > max_diff:\n max_diff = cur_diff\n return max_diff\n\nresult = max_difference([4, 8, 2, 10, 6])\nprint(result)"}
{"instruction":"Write a Python script to generate a list of random numbers with specified length.","input":"","output":"import random\nlength = 5\n\nrand_nums = [random.randint(0,100) for i in range(length)]\nprint(rand_nums)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate a list of random numbers with specified length.\n\n### Input:\n\n\n### Output:\nimport random\nlength = 5\n\nrand_nums = [random.randint(0,100) for i in range(length)]\nprint(rand_nums)"}
{"instruction":"Write a Python program to find the most common words in a given list of texts.","input":"[\n    \"This is a test.\",\n    \"This is another test.\",\n    \"This is a different test.\"\n]","output":"import collections \n\ntexts = [\n    \"This is a test.\",\n    \"This is another test.\",\n    \"This is a different test.\"\n]\n\n# split the text into words\nwords = []\nfor text in texts:\n    words.extend(text.split())\n\n# count the frequencies of each word\nword_freq = collections.Counter(words)\n\n# get the most common words\nmost_common_words = word_freq.most_common(3)\n\nfor word, count in most_common_words:\n    print('{}: {}'.format(word, count))\n\n#Output:\n#This: 3\n#is: 3\n#a: 2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the most common words in a given list of texts.\n\n### Input:\n[\n    \"This is a test.\",\n    \"This is another test.\",\n    \"This is a different test.\"\n]\n\n### Output:\nimport collections \n\ntexts = [\n    \"This is a test.\",\n    \"This is another test.\",\n    \"This is a different test.\"\n]\n\n# split the text into words\nwords = []\nfor text in texts:\n    words.extend(text.split())\n\n# count the frequencies of each word\nword_freq = collections.Counter(words)\n\n# get the most common words\nmost_common_words = word_freq.most_common(3)\n\nfor word, count in most_common_words:\n    print('{}: {}'.format(word, count))\n\n#Output:\n#This: 3\n#is: 3\n#a: 2"}
{"instruction":"Create a web crawler in Python to collect the titles of webpages from a given seed URL.","input":"seed_url: http:\/\/example.com","output":"from bs4 import BeautifulSoup\nimport requests\n\nseed_url = 'http:\/\/example.com'\n\ndef crawl_titles(url): \n titles = [] \n html = requests.get(url).text \n soup = BeautifulSoup(html, \"html.parser\") \n for link in soup.find_all('a'): \n  href = link.get('href') \n  if href.startswith(url): \n   html = requests.get(href).text \n   soup = BeautifulSoup(html, \"html.parser\") \n   title = soup.title.string \n   titles.append(title) \n return titles\n\ntitles = crawl_titles(seed_url)\nprint(titles)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web crawler in Python to collect the titles of webpages from a given seed URL.\n\n### Input:\nseed_url: http:\/\/example.com\n\n### Output:\nfrom bs4 import BeautifulSoup\nimport requests\n\nseed_url = 'http:\/\/example.com'\n\ndef crawl_titles(url): \n titles = [] \n html = requests.get(url).text \n soup = BeautifulSoup(html, \"html.parser\") \n for link in soup.find_all('a'): \n  href = link.get('href') \n  if href.startswith(url): \n   html = requests.get(href).text \n   soup = BeautifulSoup(html, \"html.parser\") \n   title = soup.title.string \n   titles.append(title) \n return titles\n\ntitles = crawl_titles(seed_url)\nprint(titles)"}
{"instruction":"Develop a program in python to realize the following task:","input":"Calculate the average of all the elements of an array.","output":"def avg(arr):\n    tot_sum = 0\n    for num in arr:\n        tot_sum += num\n    \n    return tot_sum\/len(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in python to realize the following task:\n\n### Input:\nCalculate the average of all the elements of an array.\n\n### Output:\ndef avg(arr):\n    tot_sum = 0\n    for num in arr:\n        tot_sum += num\n    \n    return tot_sum\/len(arr)"}
{"instruction":"Write a Python program that takes a list and prints out the items after sorting them in descending order.","input":"['apple', 'banana', 'cherry']","output":"fruit = ['apple', 'banana', 'cherry'] \nfruit.sort(reverse=True)\nprint(fruit) # ['cherry', 'banana', 'apple']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a list and prints out the items after sorting them in descending order.\n\n### Input:\n['apple', 'banana', 'cherry']\n\n### Output:\nfruit = ['apple', 'banana', 'cherry'] \nfruit.sort(reverse=True)\nprint(fruit) # ['cherry', 'banana', 'apple']"}
{"instruction":"Construct a program in Python to search for a given number in an array.","input":"array = [1, 2, 3, 4, 5]\nnumber = 3","output":"def search(array, x):\n\tfor i in range(len(array)):\n\t\tif array[i] == x:\n\t\t\treturn i\n\treturn -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program in Python to search for a given number in an array.\n\n### Input:\narray = [1, 2, 3, 4, 5]\nnumber = 3\n\n### Output:\ndef search(array, x):\n\tfor i in range(len(array)):\n\t\tif array[i] == x:\n\t\t\treturn i\n\treturn -1"}
{"instruction":"Create a Python script to extract the top 10 words from the text.","input":"","output":"import collections\n\ndef extract_top_words(file_name):\n    with open(file_name, 'r') as f:\n        data = f.read()\n        words = data.split()\n\n    counts = collections.Counter(words).most_common(10)\n    return counts\n\nfile_name = 'test.txt'\ntop_words = extract_top_words(file_name) \nprint(top_words)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to extract the top 10 words from the text.\n\n### Input:\n\n\n### Output:\nimport collections\n\ndef extract_top_words(file_name):\n    with open(file_name, 'r') as f:\n        data = f.read()\n        words = data.split()\n\n    counts = collections.Counter(words).most_common(10)\n    return counts\n\nfile_name = 'test.txt'\ntop_words = extract_top_words(file_name) \nprint(top_words)"}
{"instruction":"Generate a Python program that takes a numerical list and finds the index of the largest value.","input":"[3, 5, 9, 10]","output":"# list of numbers \nlist = [3, 5, 9, 10] \n\n# maximum number \nMaxNum = max(list) \n\n# index of the maximum number \nindex = list.index(MaxNum) \n\nprint(\"Maximum number is:\", MaxNum) \nprint(\"Index of maximum number is:\", index)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that takes a numerical list and finds the index of the largest value.\n\n### Input:\n[3, 5, 9, 10]\n\n### Output:\n# list of numbers \nlist = [3, 5, 9, 10] \n\n# maximum number \nMaxNum = max(list) \n\n# index of the maximum number \nindex = list.index(MaxNum) \n\nprint(\"Maximum number is:\", MaxNum) \nprint(\"Index of maximum number is:\", index)"}
{"instruction":"Implement a python program to perform document classification.","input":"","output":"import numpy as np\nfrom sklearn.datasets import fetch_20newsgroups\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.naive_bayes import MultinomialNB\n\nnewsgroups_train = fetch_20newsgroups(subset='train', shuffle=True)\n\n# Create bag of words\ncount_vect = CountVectorizer()\nX_train_counts = count_vect.fit_transform(newsgroups_train.data)\n\n# Creating vectors\ntfidf_transformer = TfidfTransformer()\nX_train_tfidf = tfidf_transformer.fit_transform(X_train_counts)\n\n# Create classifier\nclf = MultinomialNB().fit(X_train_tfidf, newsgroups_train.target)\n\n# Get input document to classify\ndocs_new = ['God is love', 'OpenGL on the GPU is fast']\nX_new_counts = count_vect.transform(docs_new)\nX_new_tfidf = tfidf_transformer.transform(X_new_counts)\n\n# Predicted categories for input document\nprint(clf.predict(X_new_tfidf))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a python program to perform document classification.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom sklearn.datasets import fetch_20newsgroups\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.naive_bayes import MultinomialNB\n\nnewsgroups_train = fetch_20newsgroups(subset='train', shuffle=True)\n\n# Create bag of words\ncount_vect = CountVectorizer()\nX_train_counts = count_vect.fit_transform(newsgroups_train.data)\n\n# Creating vectors\ntfidf_transformer = TfidfTransformer()\nX_train_tfidf = tfidf_transformer.fit_transform(X_train_counts)\n\n# Create classifier\nclf = MultinomialNB().fit(X_train_tfidf, newsgroups_train.target)\n\n# Get input document to classify\ndocs_new = ['God is love', 'OpenGL on the GPU is fast']\nX_new_counts = count_vect.transform(docs_new)\nX_new_tfidf = tfidf_transformer.transform(X_new_counts)\n\n# Predicted categories for input document\nprint(clf.predict(X_new_tfidf))"}
{"instruction":"Generate a function in Python to calculate the future value of an investment.","input":"","output":"def calculate_future_value(principal, interest_rate, num_years):\n    return principal * (1 + interest_rate)**num_years","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python to calculate the future value of an investment.\n\n### Input:\n\n\n### Output:\ndef calculate_future_value(principal, interest_rate, num_years):\n    return principal * (1 + interest_rate)**num_years"}
{"instruction":"Generate and return a 4-dimensional array containing random numbers from 0 to 1 in Python.","input":"Not applicable","output":"import numpy as np\n\ndef random_array():\n return np.random.random((4, 4, 4, 4))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate and return a 4-dimensional array containing random numbers from 0 to 1 in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\n\ndef random_array():\n return np.random.random((4, 4, 4, 4))"}
{"instruction":"Define a Python class called Appointment that creates appointment objects.","input":"","output":"class Appointment():\n     \n    def __init__(self, date, time, reason):\n        self.date = date\n        self.time = time\n        self.reason = reason\n    \n    def get_details(self):\n        return f\" The appointment is on {self.date}, at {self.time}, for {self.reason}.\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDefine a Python class called Appointment that creates appointment objects.\n\n### Input:\n\n\n### Output:\nclass Appointment():\n     \n    def __init__(self, date, time, reason):\n        self.date = date\n        self.time = time\n        self.reason = reason\n    \n    def get_details(self):\n        return f\" The appointment is on {self.date}, at {self.time}, for {self.reason}.\""}
{"instruction":"Design a program that takes a date as input and calculates the day of the week that date falls on.","input":"31\/05\/2020","output":"#!\/usr\/bin\/env python3\n\nimport datetime\n\ndef dayOfWeek(date):\n   year,month,day = map(int,date.split('\/'))\n   dayNumber = datetime.date(year, month, day).weekday()\n \n   return [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"][dayNumber]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program that takes a date as input and calculates the day of the week that date falls on.\n\n### Input:\n31\/05\/2020\n\n### Output:\n#!\/usr\/bin\/env python3\n\nimport datetime\n\ndef dayOfWeek(date):\n   year,month,day = map(int,date.split('\/'))\n   dayNumber = datetime.date(year, month, day).weekday()\n \n   return [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"][dayNumber]"}
{"instruction":"This code contains tests for the Merge step of PyRate. To run the tests, use the `test_file_creation` function. The function checks if color maps and merged files are created for different output types and raises an assertion error if any of the files are not found.","input":"","output":"# coding: utf-8\n#   This Python module is part of the PyRate software package.\n#\n#   Copyright 2020 Geoscience Australia\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n\"\"\"\nThis Python module contains tests for the Merge step of PyRate.\n\"\"\"\nimport os\nfrom subprocess import check_call\nimport itertools\nimport pytest\nfrom pathlib import Path\nfrom pyrate.merge import create_png_and_kml_from_tif\nfrom pyrate.core import config as cf\nfrom pyrate.merge import _merge_stack, _merge_linrate\nfrom pyrate.configuration import Configuration, write_config_file\nfrom tests.common import manipulate_test_conf\n\n\n@pytest.fixture\ndef create_merge_output(tempdir, gamma_conf):\n    tdir = Path(tempdir())\n    params = manipulate_test_conf(gamma_conf, tdir)\n    output_conf_file = tdir.joinpath('conf.cfg')\n    output_conf = tdir.joinpath(output_conf_file)\n    write_config_file(params=params, output_conf_file=output_conf)\n    check_call(f\"pyrate conv2tif -f {output_conf}\", shell=True)\n    check_call(f\"pyrate prepifg -f {output_conf}\", shell=True)\n    check_call(f\"pyrate correct -f {output_conf}\", shell=True)\n    check_call(f\"pyrate timeseries -f {output_conf}\", shell=True)\n    check_call(f\"pyrate stack -f {output_conf}\", shell=True)\n\n    params = Configuration(output_conf).__dict__\n    _merge_stack(params)\n    _merge_linrate(params)\n    return params\n\n\n@pytest.mark.slow\ndef test_file_creation(create_merge_output):\n    params = create_merge_output\n\n    # check if color map is created\n    for ot in ['stack_rate', 'stack_error', 'linear_rate', 'linear_error', 'linear_rsquared']:\n        create_png_and_kml_from_tif(params[cf.OUT_DIR], output_type=ot)\n        output_color_map_path = os.path.join(params[cf.OUT_DIR], f\"colourmap_{ot}.txt\")\n        assert Path(output_color_map_path).exists(), \"Output color map file not found at: \" + output_color_map_path\n\n    # check if merged files are created\n    for _type, ot in itertools.product(['stack_rate', 'stack_error', 'linear_rate',\n                                        'linear_error', 'linear_rsquared'], ['.tif', '.png', '.kml']):\n        output_image_path = os.path.join(params[cf.OUT_DIR], _type + ot)\n        print(f\"checking {output_image_path}\")\n        assert Path(output_image_path).exists(), f\"Output {ot} file not found at {output_image_path}\"\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code contains tests for the Merge step of PyRate. To run the tests, use the `test_file_creation` function. The function checks if color maps and merged files are created for different output types and raises an assertion error if any of the files are not found.\n\n### Input:\n\n\n### Output:\n# coding: utf-8\n#   This Python module is part of the PyRate software package.\n#\n#   Copyright 2020 Geoscience Australia\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n\"\"\"\nThis Python module contains tests for the Merge step of PyRate.\n\"\"\"\nimport os\nfrom subprocess import check_call\nimport itertools\nimport pytest\nfrom pathlib import Path\nfrom pyrate.merge import create_png_and_kml_from_tif\nfrom pyrate.core import config as cf\nfrom pyrate.merge import _merge_stack, _merge_linrate\nfrom pyrate.configuration import Configuration, write_config_file\nfrom tests.common import manipulate_test_conf\n\n\n@pytest.fixture\ndef create_merge_output(tempdir, gamma_conf):\n    tdir = Path(tempdir())\n    params = manipulate_test_conf(gamma_conf, tdir)\n    output_conf_file = tdir.joinpath('conf.cfg')\n    output_conf = tdir.joinpath(output_conf_file)\n    write_config_file(params=params, output_conf_file=output_conf)\n    check_call(f\"pyrate conv2tif -f {output_conf}\", shell=True)\n    check_call(f\"pyrate prepifg -f {output_conf}\", shell=True)\n    check_call(f\"pyrate correct -f {output_conf}\", shell=True)\n    check_call(f\"pyrate timeseries -f {output_conf}\", shell=True)\n    check_call(f\"pyrate stack -f {output_conf}\", shell=True)\n\n    params = Configuration(output_conf).__dict__\n    _merge_stack(params)\n    _merge_linrate(params)\n    return params\n\n\n@pytest.mark.slow\ndef test_file_creation(create_merge_output):\n    params = create_merge_output\n\n    # check if color map is created\n    for ot in ['stack_rate', 'stack_error', 'linear_rate', 'linear_error', 'linear_rsquared']:\n        create_png_and_kml_from_tif(params[cf.OUT_DIR], output_type=ot)\n        output_color_map_path = os.path.join(params[cf.OUT_DIR], f\"colourmap_{ot}.txt\")\n        assert Path(output_color_map_path).exists(), \"Output color map file not found at: \" + output_color_map_path\n\n    # check if merged files are created\n    for _type, ot in itertools.product(['stack_rate', 'stack_error', 'linear_rate',\n                                        'linear_error', 'linear_rsquared'], ['.tif', '.png', '.kml']):\n        output_image_path = os.path.join(params[cf.OUT_DIR], _type + ot)\n        print(f\"checking {output_image_path}\")\n        assert Path(output_image_path).exists(), f\"Output {ot} file not found at {output_image_path}\"\n"}
{"instruction":"Design an algorithm in Python to check if a given array has a contiguous subarray of size at least 2 that sums to the given number.","input":"Array: [1, 4, 20, 3, 10, 5]\nNumber: 33","output":"def checkContiguousSubarray(arr, n, sum): \n          \n    # To store current sum and \n    # starting index of subarray \n    currsum = arr[0] \n    start = 0\n  \n    # Initially size of \n    # minimum length subarray is 1 \n    minlength = 1\n      \n    # Traverse through the given array \n    for i in range(1, n): \n          \n        # Update current sum \n        currsum = currsum + arr[i] \n          \n        # If currsum has reached more than \n        # or equal to sum remove starting \n        # elements \n        while currsum >= sum: \n              \n            # Update minimum length if needed \n            if (i + 1 - start < minlength): \n                minlength = i + 1 - start \n  \n            # remove starting elements \n            currsum = currsum - arr[start] \n            start = start + 1\n              \n    # Print the minimum length  \n    if minlength == n + 1: \n        print(\"Not Possible\") \n    else: \n        print(\"Minimum length of subarray is: %d\" %minlength) \n          \n# Driver code \narr =  [1, 4, 20, 3, 10, 5]\nk = 33\nn = len(arr) \nprint(\"Given array is\")\nprint(arr)\ncheckContiguousSubarray(arr, n, k)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to check if a given array has a contiguous subarray of size at least 2 that sums to the given number.\n\n### Input:\nArray: [1, 4, 20, 3, 10, 5]\nNumber: 33\n\n### Output:\ndef checkContiguousSubarray(arr, n, sum): \n          \n    # To store current sum and \n    # starting index of subarray \n    currsum = arr[0] \n    start = 0\n  \n    # Initially size of \n    # minimum length subarray is 1 \n    minlength = 1\n      \n    # Traverse through the given array \n    for i in range(1, n): \n          \n        # Update current sum \n        currsum = currsum + arr[i] \n          \n        # If currsum has reached more than \n        # or equal to sum remove starting \n        # elements \n        while currsum >= sum: \n              \n            # Update minimum length if needed \n            if (i + 1 - start < minlength): \n                minlength = i + 1 - start \n  \n            # remove starting elements \n            currsum = currsum - arr[start] \n            start = start + 1\n              \n    # Print the minimum length  \n    if minlength == n + 1: \n        print(\"Not Possible\") \n    else: \n        print(\"Minimum length of subarray is: %d\" %minlength) \n          \n# Driver code \narr =  [1, 4, 20, 3, 10, 5]\nk = 33\nn = len(arr) \nprint(\"Given array is\")\nprint(arr)\ncheckContiguousSubarray(arr, n, k)"}
{"instruction":"Design a Python code solution to reverse a string with a given input.","input":"string = \"Hello world!\"","output":"def reverse_string(string):\n    return string[::-1]\n\nstring = \"Hello world!\"\nprint(reverse_string(string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python code solution to reverse a string with a given input.\n\n### Input:\nstring = \"Hello world!\"\n\n### Output:\ndef reverse_string(string):\n    return string[::-1]\n\nstring = \"Hello world!\"\nprint(reverse_string(string))"}
{"instruction":"Construct a function in Python to check if the provided year is a leap year.","input":"","output":"def is_leap_year(year):\n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        return True\n    else:\n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function in Python to check if the provided year is a leap year.\n\n### Input:\n\n\n### Output:\ndef is_leap_year(year):\n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        return True\n    else:\n        return False"}
{"instruction":"Design a game in Python in which two players take turns guessing a randomly generated number between 0 and 100. The player who guesses the number first wins.","input":"Not applicable","output":"import random\n\nprint('Player 1 Taking Turn')\n\nrandom_number = random.randint(0, 100)\n\np1_name = input('Enter your name: ')  \np2_name = input('Enter your name: ')\n\ngame_over = False\n\nwhile not game_over:\n\n  # Player 1 guessing\n  p1_guess = int(input('Guess a number between 0 and 100: '))\n  if p1_guess == random_number:\n    print('{} wins!'.format(p1_name))\n    game_over = True\n  elif p1_guess > random_number:\n    print('{} your guess is too high'.format(p1_name))\n\n  # Player 2 guessing\n  print('\\n' + p2_name + ' Taking Turn')\n  p2_guess = int(input('Guess a number between 0 and 100: '))\n  if p2_guess == random_number:\n    print('{} wins!'.format(p2_name))\n    game_over = True\n  elif p2_guess > random_number:\n    print('{} your guess is too high'.format(p2_name))\n    \nprint('Game over!')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a game in Python in which two players take turns guessing a randomly generated number between 0 and 100. The player who guesses the number first wins.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\nprint('Player 1 Taking Turn')\n\nrandom_number = random.randint(0, 100)\n\np1_name = input('Enter your name: ')  \np2_name = input('Enter your name: ')\n\ngame_over = False\n\nwhile not game_over:\n\n  # Player 1 guessing\n  p1_guess = int(input('Guess a number between 0 and 100: '))\n  if p1_guess == random_number:\n    print('{} wins!'.format(p1_name))\n    game_over = True\n  elif p1_guess > random_number:\n    print('{} your guess is too high'.format(p1_name))\n\n  # Player 2 guessing\n  print('\\n' + p2_name + ' Taking Turn')\n  p2_guess = int(input('Guess a number between 0 and 100: '))\n  if p2_guess == random_number:\n    print('{} wins!'.format(p2_name))\n    game_over = True\n  elif p2_guess > random_number:\n    print('{} your guess is too high'.format(p2_name))\n    \nprint('Game over!')"}
{"instruction":"Create a function in Python to implement a divide and conquer algorithm for finding the maximum element in a list.","input":"[2, 3, 4, 5, 9, 1]","output":"def max_element(arr):\n    \"\"\"\n    This function uses divide and conquer algorithm \n    to find the maximum element in a list\n    \"\"\"\n    # Base case\n    if len(arr) == 0:\n        return None\n\n    if len(arr) == 1:\n        return arr[0]\n\n    # Get the middle index of the array\n    mid_idx = len(arr) \/\/ 2\n\n    # Divide and Conquer\n    left_max = max_element(arr[:mid_idx])\n    right_max = max_element(arr[mid_idx:])\n\n    # Find the Maximum\n    if left_max > right_max:\n        return left_max\n    else:\n        return right_max","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to implement a divide and conquer algorithm for finding the maximum element in a list.\n\n### Input:\n[2, 3, 4, 5, 9, 1]\n\n### Output:\ndef max_element(arr):\n    \"\"\"\n    This function uses divide and conquer algorithm \n    to find the maximum element in a list\n    \"\"\"\n    # Base case\n    if len(arr) == 0:\n        return None\n\n    if len(arr) == 1:\n        return arr[0]\n\n    # Get the middle index of the array\n    mid_idx = len(arr) \/\/ 2\n\n    # Divide and Conquer\n    left_max = max_element(arr[:mid_idx])\n    right_max = max_element(arr[mid_idx:])\n\n    # Find the Maximum\n    if left_max > right_max:\n        return left_max\n    else:\n        return right_max"}
{"instruction":"Design a class in Python that stores student information.","input":"","output":"class Student:\n    def __init__(self, name, age, class_name, grade):\n        self.name = name\n        self.age = age\n        self.class_name = class_name\n        self.grade = grade\n\n    def get_name(self):\n        return self.name \n    \n    def get_age(self):\n        return self.age\n\n    def get_class_name(self):\n        return self.class_name\n\n    def get_grade(self):\n        return self.grade","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python that stores student information.\n\n### Input:\n\n\n### Output:\nclass Student:\n    def __init__(self, name, age, class_name, grade):\n        self.name = name\n        self.age = age\n        self.class_name = class_name\n        self.grade = grade\n\n    def get_name(self):\n        return self.name \n    \n    def get_age(self):\n        return self.age\n\n    def get_class_name(self):\n        return self.class_name\n\n    def get_grade(self):\n        return self.grade"}
{"instruction":"Generate a Python algorithm that takes an unsorted array and returns a sorted one.","input":"[5, 8, 1, 4, 9]","output":"def sort_array(arr):\n    sorted_arr = sorted(arr) \n    # use the built-in sorted() method \n    return sorted_arr\n\nresult = sort_array([5, 8, 1, 4, 9])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python algorithm that takes an unsorted array and returns a sorted one.\n\n### Input:\n[5, 8, 1, 4, 9]\n\n### Output:\ndef sort_array(arr):\n    sorted_arr = sorted(arr) \n    # use the built-in sorted() method \n    return sorted_arr\n\nresult = sort_array([5, 8, 1, 4, 9])\nprint(result)"}
{"instruction":"Generate a script in python to split a given string into words and store them in a list.","input":"str = \"This is a great day\"","output":"def split_str(str):\n    words = str.split(\" \")\n    return words","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a script in python to split a given string into words and store them in a list.\n\n### Input:\nstr = \"This is a great day\"\n\n### Output:\ndef split_str(str):\n    words = str.split(\" \")\n    return words"}
{"instruction":"Debug this Python program to sort an array of numbers.","input":"def sort(arr): \n    n = len(arr) \n\n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1]: \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [64, 34, 25, 12, 22, 11, 90] \nsort(arr)","output":"def sort(arr): \n    n = len(arr) \n\n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1]: \n                arr[j], arr[j+1] = arr[j+1], arr[j] # Buggy code, swap the elements\n\narr = [64, 34, 25, 12, 22, 11, 90] \nsort(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDebug this Python program to sort an array of numbers.\n\n### Input:\ndef sort(arr): \n    n = len(arr) \n\n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1]: \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [64, 34, 25, 12, 22, 11, 90] \nsort(arr)\n\n### Output:\ndef sort(arr): \n    n = len(arr) \n\n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1]: \n                arr[j], arr[j+1] = arr[j+1], arr[j] # Buggy code, swap the elements\n\narr = [64, 34, 25, 12, 22, 11, 90] \nsort(arr)"}
{"instruction":"Using the input provided, write a Python script to store the words in a dictionary and get the count of each word.","input":"words= [\"Hello\", \"World\", \"Hello\" , \"again\"]","output":"word_count = {}\n\nfor word in words:\n    if word not in word_count:\n        word_count[word] = 1\n    else:\n        word_count[word] += 1\n\nprint(word_count) # output: {'Hello': 2, 'World': 1, 'again': 1}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the input provided, write a Python script to store the words in a dictionary and get the count of each word.\n\n### Input:\nwords= [\"Hello\", \"World\", \"Hello\" , \"again\"]\n\n### Output:\nword_count = {}\n\nfor word in words:\n    if word not in word_count:\n        word_count[word] = 1\n    else:\n        word_count[word] += 1\n\nprint(word_count) # output: {'Hello': 2, 'World': 1, 'again': 1}"}
{"instruction":"Optimize a code snippet in Python that sorts the given array.","input":"arr = [5, 4, 3, 2, 1]","output":"# optimized code snippet to sort the given array\narr = [5, 4, 3, 2, 1]\narr.sort()\nprint(arr)\n# arr is now sorted in ascending order as [1, 2, 3, 4, 5]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a code snippet in Python that sorts the given array.\n\n### Input:\narr = [5, 4, 3, 2, 1]\n\n### Output:\n# optimized code snippet to sort the given array\narr = [5, 4, 3, 2, 1]\narr.sort()\nprint(arr)\n# arr is now sorted in ascending order as [1, 2, 3, 4, 5]"}
{"instruction":"Create a REST API call in Python that sends a GET request and displays the response.","input":"https:\/\/reqres.in\/api\/users","output":"import requests\n\n# Send GET request\nr = requests.get('https:\/\/reqres.in\/api\/users')\n\n# Get response\nif r.status_code == 200:\n print(r.text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API call in Python that sends a GET request and displays the response.\n\n### Input:\nhttps:\/\/reqres.in\/api\/users\n\n### Output:\nimport requests\n\n# Send GET request\nr = requests.get('https:\/\/reqres.in\/api\/users')\n\n# Get response\nif r.status_code == 200:\n print(r.text)"}
{"instruction":"Can you create a function in Python that takes two strings as input, and returns the number of common characters between them?","input":"\"computer\", \"science\"","output":"def countCommonChars(string1, string2):\n    count = 0\n    for i in string1: \n    \tif i in string2: \n    \t\tcount += 1\n    return count\n\ninput1 = \"computer\"\ninput2 = \"science\"\nprint(countCommonChars(input1, input2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you create a function in Python that takes two strings as input, and returns the number of common characters between them?\n\n### Input:\n\"computer\", \"science\"\n\n### Output:\ndef countCommonChars(string1, string2):\n    count = 0\n    for i in string1: \n    \tif i in string2: \n    \t\tcount += 1\n    return count\n\ninput1 = \"computer\"\ninput2 = \"science\"\nprint(countCommonChars(input1, input2))"}
{"instruction":"Write a Python code to fetch recent twitter posts from a specific account.","input":"","output":"\"\"\"\nFetch recent twitter posts from a specific account\n\"\"\"\n\nimport tweepy\n\ndef get_posts(screen_name):\n    consumer_key = '...'\n    consumer_secret = '...'\n    access_key = '...'\n    access_secret = '...'\n\n    # Authenticate to Twitter\n    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n    auth.set_access_token(access_key, access_secret)\n\n    # Create API object\n    api = tweepy.API(auth)\n\n    # Get recent posts\n    posts = api.user_timeline(screen_name=screen_name, count=200)\n    return [post.text for post in posts]\n\nif __name__ == '__main__':\n    # Get recent posts from a sample account\n    posts = get_posts('example')\n    print(posts)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to fetch recent twitter posts from a specific account.\n\n### Input:\n\n\n### Output:\n\"\"\"\nFetch recent twitter posts from a specific account\n\"\"\"\n\nimport tweepy\n\ndef get_posts(screen_name):\n    consumer_key = '...'\n    consumer_secret = '...'\n    access_key = '...'\n    access_secret = '...'\n\n    # Authenticate to Twitter\n    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n    auth.set_access_token(access_key, access_secret)\n\n    # Create API object\n    api = tweepy.API(auth)\n\n    # Get recent posts\n    posts = api.user_timeline(screen_name=screen_name, count=200)\n    return [post.text for post in posts]\n\nif __name__ == '__main__':\n    # Get recent posts from a sample account\n    posts = get_posts('example')\n    print(posts)"}
{"instruction":"Develop an algorithm to find the maximum depth of a binary treeand generate a Python code for it.","input":"","output":"def max_depth(node):\n  if node is None:\n    return 0\n  \n  leftDepth = max_depth(node.left)\n  rightDepth = max_depth(node.right)\n  \n  if leftDepth > rightDepth:\n    return leftDepth + 1\n  else:\n    return rightDepth + 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm to find the maximum depth of a binary treeand generate a Python code for it.\n\n### Input:\n\n\n### Output:\ndef max_depth(node):\n  if node is None:\n    return 0\n  \n  leftDepth = max_depth(node.left)\n  rightDepth = max_depth(node.right)\n  \n  if leftDepth > rightDepth:\n    return leftDepth + 1\n  else:\n    return rightDepth + 1"}
{"instruction":"Generate minimum test cases for a Python program to check if a given integer is positive or not.","input":"","output":"import unittest\n\n# Define the class\nclass TestInteger(unittest.TestCase):\n    def test_integer_positive(self):\n        self.assertEqual(is_positive(5), True)\n\n    def test_integer_zero(self):\n        self.assertEqual(is_positive(0), False)\n\n    def test_integer_negative(self):\n        self.assertEqual(is_positive(-5), False)\n\n\nif __name__ == '__main__':\n    unittest.main()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate minimum test cases for a Python program to check if a given integer is positive or not.\n\n### Input:\n\n\n### Output:\nimport unittest\n\n# Define the class\nclass TestInteger(unittest.TestCase):\n    def test_integer_positive(self):\n        self.assertEqual(is_positive(5), True)\n\n    def test_integer_zero(self):\n        self.assertEqual(is_positive(0), False)\n\n    def test_integer_negative(self):\n        self.assertEqual(is_positive(-5), False)\n\n\nif __name__ == '__main__':\n    unittest.main()"}
{"instruction":"Create a python program to reverse a string passed as input.","input":"Hello World!","output":"def reverse_string(stringToReverse):\n    reversedString = \"\"\n    for i in reversed(stringToReverse):\n        reversedString += i\n    return reversedString\n    \nstringToReverse = input(\"Enter string to reverse: \")\nresult = reverse_string(stringToReverse)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to reverse a string passed as input.\n\n### Input:\nHello World!\n\n### Output:\ndef reverse_string(stringToReverse):\n    reversedString = \"\"\n    for i in reversed(stringToReverse):\n        reversedString += i\n    return reversedString\n    \nstringToReverse = input(\"Enter string to reverse: \")\nresult = reverse_string(stringToReverse)\nprint(result)"}
{"instruction":"Create a Python program to generate a random password of 8 characters. The output should include random lowercase letters, uppercase letters, and numbers.","input":"Not applicable","output":"import random\n\ndef generate_password():\n    password_length = 8\n    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    password = ''.join(random.choice(chars) for i in range(password_length))\n \n    return password\n\npassword = generate_password()\nprint(password)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a random password of 8 characters. The output should include random lowercase letters, uppercase letters, and numbers.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\ndef generate_password():\n    password_length = 8\n    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    password = ''.join(random.choice(chars) for i in range(password_length))\n \n    return password\n\npassword = generate_password()\nprint(password)"}
{"instruction":"Create a Python script to find all subsets of a given set.","input":"","output":"def all_subsets(s):\n    subsets = []\n    for i in range(2**len(s)):\n        bitmask = bin(i)[2:]\n        subset = []\n        for j in range(len(s)):\n            if bitmask[j] == \"1\":\n                subset.append(s[j])\n        subsets.append(subset)\n    return subsets","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to find all subsets of a given set.\n\n### Input:\n\n\n### Output:\ndef all_subsets(s):\n    subsets = []\n    for i in range(2**len(s)):\n        bitmask = bin(i)[2:]\n        subset = []\n        for j in range(len(s)):\n            if bitmask[j] == \"1\":\n                subset.append(s[j])\n        subsets.append(subset)\n    return subsets"}
{"instruction":"Develop a web scraper in Python that pulls data from ESPN's website for a given team name.","input":"Team name - \"Manchester United\"","output":"from bs4 import BeautifulSoup\nimport requests\n\nteamname = 'Manchester United'\n\nurl = f'https:\/\/www.espn.com\/soccer\/team\/_\/name\/{teamname}'\nhtml = requests.get(url, headers={'User-Agent':'Chrome\/85.0.4183.102'}).text\nsoup = BeautifulSoup(html, 'html.parser')\n\nfor tag in soup.find_all('div', {'class': 'stat-cell'}):\n    if tag.find('span') and tag.find('span').string:\n        statname = tag.find('span').string.strip()\n        statnum = tag.find('p').string.strip()\n        print(f'{statname}: {statnum}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a web scraper in Python that pulls data from ESPN's website for a given team name.\n\n### Input:\nTeam name - \"Manchester United\"\n\n### Output:\nfrom bs4 import BeautifulSoup\nimport requests\n\nteamname = 'Manchester United'\n\nurl = f'https:\/\/www.espn.com\/soccer\/team\/_\/name\/{teamname}'\nhtml = requests.get(url, headers={'User-Agent':'Chrome\/85.0.4183.102'}).text\nsoup = BeautifulSoup(html, 'html.parser')\n\nfor tag in soup.find_all('div', {'class': 'stat-cell'}):\n    if tag.find('span') and tag.find('span').string:\n        statname = tag.find('span').string.strip()\n        statnum = tag.find('p').string.strip()\n        print(f'{statname}: {statnum}')"}
{"instruction":"Generate a script to establish a secure connection between two computers.","input":"","output":"# Use Python\nimport socket\n\n# Create socket object\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Bind the socket to an address and port\ns.bind((\u2018127.0.0.1\u2019, 8888))\n\n# Listen for incomming connections\ns.listen()\n\n# Perform handshake to establish a secure connection\nwhile True:\n    # Accept connection\n    conn, addr = s.accept()\n    with conn:\n        print('Connected by', addr)\n        # Generate handshake messages\n        handshake_msg = generate_handshake_msg()\n        # Send handshake message\n        conn.send(handshake_msg)\n        # Receive message\n        received_msg = conn.recv(1024)\n        # Validate handshake message\n        if validate_handshake_msg(received_msg):\n            # Establish connection\n            print('Secure connection established!')\n            break","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a script to establish a secure connection between two computers.\n\n### Input:\n\n\n### Output:\n# Use Python\nimport socket\n\n# Create socket object\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Bind the socket to an address and port\ns.bind((\u2018127.0.0.1\u2019, 8888))\n\n# Listen for incomming connections\ns.listen()\n\n# Perform handshake to establish a secure connection\nwhile True:\n    # Accept connection\n    conn, addr = s.accept()\n    with conn:\n        print('Connected by', addr)\n        # Generate handshake messages\n        handshake_msg = generate_handshake_msg()\n        # Send handshake message\n        conn.send(handshake_msg)\n        # Receive message\n        received_msg = conn.recv(1024)\n        # Validate handshake message\n        if validate_handshake_msg(received_msg):\n            # Establish connection\n            print('Secure connection established!')\n            break"}
{"instruction":"Write a python script that computes the sum of all the odd numbers between 1 and 1000.","input":"","output":"\"\"\"\nWrite a python script that computes the sum of all the odd numbers between 1 and 1000.\n\"\"\"\n\n#define a function to compute the sum of the odd numbers\ndef sum_odd_numbers(n):\n    result = 0\n    for i in range(1,n+1):\n        #check if the current number is odd\n        if i%2 != 0:\n            result += i\n    \n    return result\n\n#test the function\ninput_n = 1000\nprint(sum_odd_numbers(input_n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script that computes the sum of all the odd numbers between 1 and 1000.\n\n### Input:\n\n\n### Output:\n\"\"\"\nWrite a python script that computes the sum of all the odd numbers between 1 and 1000.\n\"\"\"\n\n#define a function to compute the sum of the odd numbers\ndef sum_odd_numbers(n):\n    result = 0\n    for i in range(1,n+1):\n        #check if the current number is odd\n        if i%2 != 0:\n            result += i\n    \n    return result\n\n#test the function\ninput_n = 1000\nprint(sum_odd_numbers(input_n))"}
{"instruction":"Create a Python program that calculates the median of a given data set.","input":"[12, 64, 22, 17]","output":"# create a function to calculate median\ndef median(data):\n # sort the list\n data.sort()\n\n #get the length of the list\n n= len(data)\n\n # check if the length is odd or even\n if n%2 != 0:\n  #if odd, return the middle element\n  return data[int(n\/2)]\n else:\n  #if even, return the average of two middle elements\n  return (data[int(n\/2)] + data[int((n\/2)-1)])\/2\n\n#input data\ndata = [12, 64, 22, 17]\n#calculate median\nmedian = median(data)\n#print result\nprint(\"Median of the list is:\", median)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that calculates the median of a given data set.\n\n### Input:\n[12, 64, 22, 17]\n\n### Output:\n# create a function to calculate median\ndef median(data):\n # sort the list\n data.sort()\n\n #get the length of the list\n n= len(data)\n\n # check if the length is odd or even\n if n%2 != 0:\n  #if odd, return the middle element\n  return data[int(n\/2)]\n else:\n  #if even, return the average of two middle elements\n  return (data[int(n\/2)] + data[int((n\/2)-1)])\/2\n\n#input data\ndata = [12, 64, 22, 17]\n#calculate median\nmedian = median(data)\n#print result\nprint(\"Median of the list is:\", median)"}
{"instruction":"Create a Python function to filter a dictionary that contains strings only.","input":"{'name': 'John', 'age': 20, 'likes': ['apple', 'banana']}","output":"def filterStringDict(input):\n    result = {}\n    for key, value in input.items():\n        # Check if value is a string\n        if isinstance(value, str):\n            # Add to result\n            result[key] = value\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to filter a dictionary that contains strings only.\n\n### Input:\n{'name': 'John', 'age': 20, 'likes': ['apple', 'banana']}\n\n### Output:\ndef filterStringDict(input):\n    result = {}\n    for key, value in input.items():\n        # Check if value is a string\n        if isinstance(value, str):\n            # Add to result\n            result[key] = value\n    return result"}
{"instruction":"Create a basic web crawler using Python that searches for a given keyword in a website and prints the pages where it is found.","input":"Keyword: \"Python\"\nWebsite: www.example.com","output":"import requests\nfrom bs4 import BeautifulSoup\n\n# Given a keyword and a website URL\ndef web_crawler(keyword, url):\n    # Make a request to the given URL\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n\n    # Loop through the pages\n    visited = set()\n    while True:\n        # Get all the links on the page\n        links = soup.find_all('a')\n        for link in links:\n            # Get the absolute URL for the link\n            link_url = link.get('href')\n\n            # If the URL is already visited, continue\n            if link_url in visited:\n                continue\n\n            # If it is a valid URL, visit it\n            if link_url.startswith('http'):\n                visited.add(link_url)\n                response = requests.get(link_url)\n                soup = BeautifulSoup(response.content, 'html.parser')\n\n                # Search for the keyword in the page\n                if keyword in response.text:\n                    print(f'Found keyword \"{keyword}\" in URL: {link_url}')\n\n# Test\nkeyword = 'Python'\nurl = 'www.example.com'\nweb_crawler(keyword, url)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic web crawler using Python that searches for a given keyword in a website and prints the pages where it is found.\n\n### Input:\nKeyword: \"Python\"\nWebsite: www.example.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Given a keyword and a website URL\ndef web_crawler(keyword, url):\n    # Make a request to the given URL\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n\n    # Loop through the pages\n    visited = set()\n    while True:\n        # Get all the links on the page\n        links = soup.find_all('a')\n        for link in links:\n            # Get the absolute URL for the link\n            link_url = link.get('href')\n\n            # If the URL is already visited, continue\n            if link_url in visited:\n                continue\n\n            # If it is a valid URL, visit it\n            if link_url.startswith('http'):\n                visited.add(link_url)\n                response = requests.get(link_url)\n                soup = BeautifulSoup(response.content, 'html.parser')\n\n                # Search for the keyword in the page\n                if keyword in response.text:\n                    print(f'Found keyword \"{keyword}\" in URL: {link_url}')\n\n# Test\nkeyword = 'Python'\nurl = 'www.example.com'\nweb_crawler(keyword, url)"}
{"instruction":"Create a python program to calculate the factorial of the given argument.","input":"","output":"def factorial(x):\n    if x == 0 or x == 1:\n        return 1\n    else:\n        return x * factorial(x-1)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to calculate the factorial of the given argument.\n\n### Input:\n\n\n### Output:\ndef factorial(x):\n    if x == 0 or x == 1:\n        return 1\n    else:\n        return x * factorial(x-1)"}
{"instruction":"Create a Python program to perform classification based on some given data.","input":"data = [['men', 'sports', 1], ['women', 'foods', 0], ['men', 'foods', 1], ['women', 'sports', 0]]","output":"# Function to calculate mean of two classes\ndef calculate_means(dataset):\n    class_0_total = 0\n    class_1_total = 0\n    for data_point in dataset:\n        if data_point[2] == 0:\n            class_0_total += 1\n        else:\n            class_1_total += 1\n    class_0_mean = class_0_total \/ len(dataset)\n    class_1_mean = class_1_total \/ len(dataset)\n    return [class_0_mean, class_1_mean]\n\n# Function to classify a new point\ndef classify(data_point, means):\n    if data_point[2] <= means[0]:\n        print(\"Class 0\")\n    else:\n        print(\"Class 1\")\n\n# Main \ndata = [['men', 'sports', 1], ['women', 'foods', 0], ['men', 'foods', 1], ['women', 'sports', 0]]\nmeans = calculate_means(data)\nnew_data = ['men', 'sports', 0.5]\nclassify(new_data, means)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to perform classification based on some given data.\n\n### Input:\ndata = [['men', 'sports', 1], ['women', 'foods', 0], ['men', 'foods', 1], ['women', 'sports', 0]]\n\n### Output:\n# Function to calculate mean of two classes\ndef calculate_means(dataset):\n    class_0_total = 0\n    class_1_total = 0\n    for data_point in dataset:\n        if data_point[2] == 0:\n            class_0_total += 1\n        else:\n            class_1_total += 1\n    class_0_mean = class_0_total \/ len(dataset)\n    class_1_mean = class_1_total \/ len(dataset)\n    return [class_0_mean, class_1_mean]\n\n# Function to classify a new point\ndef classify(data_point, means):\n    if data_point[2] <= means[0]:\n        print(\"Class 0\")\n    else:\n        print(\"Class 1\")\n\n# Main \ndata = [['men', 'sports', 1], ['women', 'foods', 0], ['men', 'foods', 1], ['women', 'sports', 0]]\nmeans = calculate_means(data)\nnew_data = ['men', 'sports', 0.5]\nclassify(new_data, means)"}
{"instruction":"Write a python program to print out the numbers from 1 to 10.","input":"","output":"for i in range(1, 11):\n    print (i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to print out the numbers from 1 to 10.\n\n### Input:\n\n\n### Output:\nfor i in range(1, 11):\n    print (i)"}
{"instruction":"Create a Python script to open a web browser and navigate to www.google.com.","input":"","output":"import webbrowser\n\n# open web browser and navigate to google\nwebbrowser.open(\"https:\/\/www.google.com\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to open a web browser and navigate to www.google.com.\n\n### Input:\n\n\n### Output:\nimport webbrowser\n\n# open web browser and navigate to google\nwebbrowser.open(\"https:\/\/www.google.com\")"}
{"instruction":"Design a python program that reverses the input sentence","input":"Sentence = \"This is a sentence\"","output":"def reverse_sentence(sentence):\n    words = sentence.split(\" \")\n    words = list(reversed(words))\n    return \" \".join(words)\n\nreverse_sentence(\"This is a sentence\")  # returns \"sentence a is This\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program that reverses the input sentence\n\n### Input:\nSentence = \"This is a sentence\"\n\n### Output:\ndef reverse_sentence(sentence):\n    words = sentence.split(\" \")\n    words = list(reversed(words))\n    return \" \".join(words)\n\nreverse_sentence(\"This is a sentence\")  # returns \"sentence a is This\""}
{"instruction":"Edit the existing Python code to make the program more efficient.","input":"def sum_array(array):\n  total = 0\n  for element in array:\n    total += element\n  return total","output":"def sum_array(array):\n  total = 0\n  for element in array:\n    total = total + element\n  return total","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the existing Python code to make the program more efficient.\n\n### Input:\ndef sum_array(array):\n  total = 0\n  for element in array:\n    total += element\n  return total\n\n### Output:\ndef sum_array(array):\n  total = 0\n  for element in array:\n    total = total + element\n  return total"}
{"instruction":"Create a program in Python to convert an array of integers to an array of binary numbers.","input":"[2,4,7]","output":"def int_to_bin(arr):\n   binary = []\n   for num in arr:\n       binary.append(bin(num))\n   return binary\n\narr = [2,4,7]\nbin_arr = int_to_bin(arr)\nprint(bin_arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to convert an array of integers to an array of binary numbers.\n\n### Input:\n[2,4,7]\n\n### Output:\ndef int_to_bin(arr):\n   binary = []\n   for num in arr:\n       binary.append(bin(num))\n   return binary\n\narr = [2,4,7]\nbin_arr = int_to_bin(arr)\nprint(bin_arr)"}
{"instruction":"Write a Python script to generate a dictionary that contains (i, i*i) such that i is an integer from 1 to n (both included).","input":"3","output":"n = 3\nmy_dict = {} \nfor i in range(1, n+1): \n    my_dict[i] = i * i\n\nprint(my_dict)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate a dictionary that contains (i, i*i) such that i is an integer from 1 to n (both included).\n\n### Input:\n3\n\n### Output:\nn = 3\nmy_dict = {} \nfor i in range(1, n+1): \n    my_dict[i] = i * i\n\nprint(my_dict)"}
{"instruction":"Develop a web-scraper in Python to retrieve information from a given website.","input":"URL = https:\/\/en.wikipedia.org\/wiki\/Python_(programming_language)","output":"import requests\nfrom bs4 import BeautifulSoup\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get(URL).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# Print all the articles on the page\nprint(\"All articles\")\nprint(\"-----------\")\narticles = soup.find_all('p')\nfor article in articles:\n    print(article.text)\n\n# Print all the headlines\nprint(\"Headlines\")\nprint(\"--------\")\nheadlines = soup.find_all('h1')\nfor headline in headlines:\n    print(headline.text)\n\n# Print all the hyperlinks\nprint(\"Hyperlinks\")\nprint(\"---------\")\nlinks = soup.find_all('a')\nfor link in links:\n    print(link.get('href'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a web-scraper in Python to retrieve information from a given website.\n\n### Input:\nURL = https:\/\/en.wikipedia.org\/wiki\/Python_(programming_language)\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get(URL).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# Print all the articles on the page\nprint(\"All articles\")\nprint(\"-----------\")\narticles = soup.find_all('p')\nfor article in articles:\n    print(article.text)\n\n# Print all the headlines\nprint(\"Headlines\")\nprint(\"--------\")\nheadlines = soup.find_all('h1')\nfor headline in headlines:\n    print(headline.text)\n\n# Print all the hyperlinks\nprint(\"Hyperlinks\")\nprint(\"---------\")\nlinks = soup.find_all('a')\nfor link in links:\n    print(link.get('href'))"}
{"instruction":"Create a Completion function in Python that takes a string and returns a list of strings that match the input string.","input":"string = \u201cth\u201d","output":"def completion(string):\n  results = []\n  words = [\"the\", \"that\", \"this\", \"those\", \"thing\", \"think\", \"thought\"]\n  for word in words:\n    if len(word) > 2 and word.startswith(string):\n      results.append(word)\n  return results\n  \nprint(completion(\"th\")) # Output: [\"those\", \"think\", \"thought\"]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Completion function in Python that takes a string and returns a list of strings that match the input string.\n\n### Input:\nstring = \u201cth\u201d\n\n### Output:\ndef completion(string):\n  results = []\n  words = [\"the\", \"that\", \"this\", \"those\", \"thing\", \"think\", \"thought\"]\n  for word in words:\n    if len(word) > 2 and word.startswith(string):\n      results.append(word)\n  return results\n  \nprint(completion(\"th\")) # Output: [\"those\", \"think\", \"thought\"]"}
{"instruction":"Create a Python script that creates random numbers in the range of 0-20 and displays the result.","input":"","output":"import random\n\ndef generateRandomNumbers():\n\trandomNumbers = []\n\tfor i in range(0, 20):\n\t\trandomNumbers.append(random.randint(0, 20))\n\treturn randomNumbers\n\nprint(generateRandomNumbers())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that creates random numbers in the range of 0-20 and displays the result.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generateRandomNumbers():\n\trandomNumbers = []\n\tfor i in range(0, 20):\n\t\trandomNumbers.append(random.randint(0, 20))\n\treturn randomNumbers\n\nprint(generateRandomNumbers())"}
{"instruction":"Write a python program to determine if a string is a palindrome.","input":"","output":"def is_palindrome(s):\n    return s == s[::-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to determine if a string is a palindrome.\n\n### Input:\n\n\n### Output:\ndef is_palindrome(s):\n    return s == s[::-1]"}
{"instruction":"Write a Python program to do a brute force search for a pair of elements which sum to a given target value.","input":"[1, 3, 4, 5, 6, 7], 8","output":"# brute force search algorithm\ndef brute_force_search(arr, target):\n\tfor i in range(len(arr)):\n\t\tfor j in range(len(arr)):\n\t\t\tif arr[i] + arr[j] == target:\n\t\t\t\treturn arr[i], arr[j]\n\treturn None\n\n# test the algorithm\ntarget = 8\nlst = [1, 3, 4, 5, 6, 7]\nprint(brute_force_search(lst, target))\n\nOutput:\npair = (3, 5)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to do a brute force search for a pair of elements which sum to a given target value.\n\n### Input:\n[1, 3, 4, 5, 6, 7], 8\n\n### Output:\n# brute force search algorithm\ndef brute_force_search(arr, target):\n\tfor i in range(len(arr)):\n\t\tfor j in range(len(arr)):\n\t\t\tif arr[i] + arr[j] == target:\n\t\t\t\treturn arr[i], arr[j]\n\treturn None\n\n# test the algorithm\ntarget = 8\nlst = [1, 3, 4, 5, 6, 7]\nprint(brute_force_search(lst, target))\n\nOutput:\npair = (3, 5)"}
{"instruction":"Translate the following pseudocode into Python.","input":"\/\/ read two numbers\n\/\/ add the two numbers\n\/\/ output the result","output":"# Read two numbers\nn1 = int(input()) \nn2 = int(input()) \n\n# Add the two numbers\nresult = n1 + n2\n\n# Output the result\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTranslate the following pseudocode into Python.\n\n### Input:\n\/\/ read two numbers\n\/\/ add the two numbers\n\/\/ output the result\n\n### Output:\n# Read two numbers\nn1 = int(input()) \nn2 = int(input()) \n\n# Add the two numbers\nresult = n1 + n2\n\n# Output the result\nprint(result)"}
{"instruction":"Write a Python program to print the even numbers from 1 to 50","input":"Not applicable","output":"for i in range(1,51):\n  if (i % 2 == 0):\n    print(i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print the even numbers from 1 to 50\n\n### Input:\nNot applicable\n\n### Output:\nfor i in range(1,51):\n  if (i % 2 == 0):\n    print(i)"}
{"instruction":"Create a FlowModMsgBuilder object with a participant and key. Use the add_flow_mod method to add a flow modification with mod_type, rule_type, priority, match, action, datapath, and cookie (optional). Use the delete_flow_mod method to delete a flow modification with mod_type, rule_type, cookie, and cookie_mask. Use the get_msg method to get the message with auth_info and flow_mods. Use the reset_flow_mod method to reset the flow modifications. The request body format should have auth_info with participant and key, and flow_mods with a list of flow modifications with cookie, mod_type, rule_type, priority, match, and action.","input":"","output":"#!\/usr\/bin\/env python\n#  Author:\n#  Rudiger Birkner (Networked Systems Group ETH Zurich)\n\n\nclass FlowModMsgBuilder(object):\n    def __init__(self, participant, key):\n        self.participant = participant\n        self.key = key\n        self.flow_mods = []\n\n    def add_flow_mod(self, mod_type, rule_type, priority, match, action, datapath = None, cookie = None):\n        if cookie is None:\n            cookie = (len(self.flow_mods)+1, 65535)\n\n        fm = {\n               \"cookie\": cookie,\n               \"datapath\": datapath,\n               \"mod_type\": mod_type,\n               \"rule_type\": rule_type,\n               \"priority\": priority,\n               \"match\": match,\n               \"action\": action\n             }\n\n        self.flow_mods.append(fm)\n\n        return cookie\n\n    def delete_flow_mod(self, mod_type, rule_type, cookie, cookie_mask):\n        fm = {\n            \"cookie\": (cookie, cookie_mask),\n            \"mod_type\": mod_type,\n            \"rule_type\": rule_type,\n        }\n\n        self.flow_mods.append(fm)\n\n    def get_msg(self):\n        msg = {\n                \"auth_info\": {\n                               \"participant\" : self.participant,\n                               \"key\" : self.key\n                             },\n                \"flow_mods\": self.flow_mods\n              }\n\n        return msg\n\n    def reset_flow_mod(self):\n        self.flow_mods = []\n\n#  request body format:\n#    {\"auth_info\": {\n#            \"participant\": 1,\n#            \"key\": \"xyz\"\n#            }\n#     \"flow_mods\": [\n#            { \"cookie\": (1, 2**16-1),\n#              \"mod_type\": \"insert\/remove\",\n#              \"rule_type\": \"inbound\/outbound\/main\",\n#              \"priority\": 1,\n#              \"match\" : {\n#                         \"eth_type\" : 0x0806,\n#                         \"arp_tpa\" : (\"172.1.0.0\", \"255.255.255.0\"),\n#                         \"in_port\" : 5,\n#                         \"eth_dst\" : \"ff:ff:ff:ff:ff:ff\",\n#                         \"eth_src\" : \"80:23:ff:98:10:01\",\n#                         \"ipv4_src\" : \"192.168.1.1\",\n#                         \"ipv4_dst\" : \"192.168.1.2\",\n#                         \"tcp_src\" : 80,\n#                         \"tcp_dst\" : 179,\n#                         \"udp_src\" : 23,\n#                         \"udp_dst\" : 22,\n#                        },\n#              \"action\" : {\n#                         \"fwd\": [\"inbound\"\/\"outbound\"\/\"main-in\"\/main-out\"],\n#                         \"set_eth_src\": \"80:23:ff:98:10:01\",\n#                         \"set_eth_dst\": (\"00:00:00:00:00:01\",\"00:00:00:00:03:ff\")\n#                         }\n#            },\n#            { \"cookie\": (2, 2**16-1),\n#              \"mod_type\": \"insert\/remove\",\n#              \"rule_type\": \"inbound\/outbound\/main\",\n#              \"match\" : {\"tcp_dst\" : 80},\n#              \"action\" : {\"fwd\": [3]}\n#            }\n#            ...]\n#    }\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a FlowModMsgBuilder object with a participant and key. Use the add_flow_mod method to add a flow modification with mod_type, rule_type, priority, match, action, datapath, and cookie (optional). Use the delete_flow_mod method to delete a flow modification with mod_type, rule_type, cookie, and cookie_mask. Use the get_msg method to get the message with auth_info and flow_mods. Use the reset_flow_mod method to reset the flow modifications. The request body format should have auth_info with participant and key, and flow_mods with a list of flow modifications with cookie, mod_type, rule_type, priority, match, and action.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n#  Author:\n#  Rudiger Birkner (Networked Systems Group ETH Zurich)\n\n\nclass FlowModMsgBuilder(object):\n    def __init__(self, participant, key):\n        self.participant = participant\n        self.key = key\n        self.flow_mods = []\n\n    def add_flow_mod(self, mod_type, rule_type, priority, match, action, datapath = None, cookie = None):\n        if cookie is None:\n            cookie = (len(self.flow_mods)+1, 65535)\n\n        fm = {\n               \"cookie\": cookie,\n               \"datapath\": datapath,\n               \"mod_type\": mod_type,\n               \"rule_type\": rule_type,\n               \"priority\": priority,\n               \"match\": match,\n               \"action\": action\n             }\n\n        self.flow_mods.append(fm)\n\n        return cookie\n\n    def delete_flow_mod(self, mod_type, rule_type, cookie, cookie_mask):\n        fm = {\n            \"cookie\": (cookie, cookie_mask),\n            \"mod_type\": mod_type,\n            \"rule_type\": rule_type,\n        }\n\n        self.flow_mods.append(fm)\n\n    def get_msg(self):\n        msg = {\n                \"auth_info\": {\n                               \"participant\" : self.participant,\n                               \"key\" : self.key\n                             },\n                \"flow_mods\": self.flow_mods\n              }\n\n        return msg\n\n    def reset_flow_mod(self):\n        self.flow_mods = []\n\n#  request body format:\n#    {\"auth_info\": {\n#            \"participant\": 1,\n#            \"key\": \"xyz\"\n#            }\n#     \"flow_mods\": [\n#            { \"cookie\": (1, 2**16-1),\n#              \"mod_type\": \"insert\/remove\",\n#              \"rule_type\": \"inbound\/outbound\/main\",\n#              \"priority\": 1,\n#              \"match\" : {\n#                         \"eth_type\" : 0x0806,\n#                         \"arp_tpa\" : (\"172.1.0.0\", \"255.255.255.0\"),\n#                         \"in_port\" : 5,\n#                         \"eth_dst\" : \"ff:ff:ff:ff:ff:ff\",\n#                         \"eth_src\" : \"80:23:ff:98:10:01\",\n#                         \"ipv4_src\" : \"192.168.1.1\",\n#                         \"ipv4_dst\" : \"192.168.1.2\",\n#                         \"tcp_src\" : 80,\n#                         \"tcp_dst\" : 179,\n#                         \"udp_src\" : 23,\n#                         \"udp_dst\" : 22,\n#                        },\n#              \"action\" : {\n#                         \"fwd\": [\"inbound\"\/\"outbound\"\/\"main-in\"\/main-out\"],\n#                         \"set_eth_src\": \"80:23:ff:98:10:01\",\n#                         \"set_eth_dst\": (\"00:00:00:00:00:01\",\"00:00:00:00:03:ff\")\n#                         }\n#            },\n#            { \"cookie\": (2, 2**16-1),\n#              \"mod_type\": \"insert\/remove\",\n#              \"rule_type\": \"inbound\/outbound\/main\",\n#              \"match\" : {\"tcp_dst\" : 80},\n#              \"action\" : {\"fwd\": [3]}\n#            }\n#            ...]\n#    }\n"}
{"instruction":"Edit a Python program to create a multi-threaded network scanner.","input":"import socket\n\ndef connect(ip, port):\n sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n result = sock.connect_ex((ip, port))\n if result == 0:\n print(\"Port {} is open\".format(port))\n else:\n print(\"Port {} is closed\".format(port))","output":"import socket\nfrom threading import Thread\n\ndef connect(ip, port):\n sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n result = sock.connect_ex((ip, port))\n if result == 0:\n print(\"Port {} is open\".format(port))\n else:\n print(\"Port {} is closed\".format(port))\n\ndef scan(ip, ports):\n for port in ports:\n thread = Thread(target=connect, args=(ip, port))\n thread.start()\n\nip=\"127.0.0.1\"\nports=[80, 443, 8080]\n\nscan(ip, ports)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit a Python program to create a multi-threaded network scanner.\n\n### Input:\nimport socket\n\ndef connect(ip, port):\n sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n result = sock.connect_ex((ip, port))\n if result == 0:\n print(\"Port {} is open\".format(port))\n else:\n print(\"Port {} is closed\".format(port))\n\n### Output:\nimport socket\nfrom threading import Thread\n\ndef connect(ip, port):\n sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n result = sock.connect_ex((ip, port))\n if result == 0:\n print(\"Port {} is open\".format(port))\n else:\n print(\"Port {} is closed\".format(port))\n\ndef scan(ip, ports):\n for port in ports:\n thread = Thread(target=connect, args=(ip, port))\n thread.start()\n\nip=\"127.0.0.1\"\nports=[80, 443, 8080]\n\nscan(ip, ports)"}
{"instruction":"Create a function in Python that takes two numbers as inputs and prints out their sum.","input":"x = 5, y = 8","output":"def sum_numbers(x, y):\n    return x + y\n  \nprint(sum_numbers(5, 8))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two numbers as inputs and prints out their sum.\n\n### Input:\nx = 5, y = 8\n\n### Output:\ndef sum_numbers(x, y):\n    return x + y\n  \nprint(sum_numbers(5, 8))"}
{"instruction":"Write a function in Python that returns the maximum element in the given list.","input":"[1, -2, 3, 4]","output":"def get_max_elem(arr):\n    max_elem = arr[0]\n    for elem in arr:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem\n \narr = [1, -2, 3, 4]\nmax_elem = get_max_elem(arr)\nprint(max_elem) # Output: 4","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that returns the maximum element in the given list.\n\n### Input:\n[1, -2, 3, 4]\n\n### Output:\ndef get_max_elem(arr):\n    max_elem = arr[0]\n    for elem in arr:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem\n \narr = [1, -2, 3, 4]\nmax_elem = get_max_elem(arr)\nprint(max_elem) # Output: 4"}
{"instruction":"Create a Python application for predicting house prices using the Boston Housing dataset. Specifically, the application should train a linear regression model and predict the median house prices given the number of rooms and other attributes as inputs.","input":"[\n    {'number_of_rooms': 1, 'zoned_land_usage': 2, 'accessibility_to_highways': 1, 'house_age': 50, 'population_density': 6.5},\n    {'number_of_rooms': 8, 'zoned_land_usage': 4, 'accessibility_to_highways': 3, 'house_age': 60, 'population_density': 4.0},\n    {'number_of_rooms': 3, 'zoned_land_usage': 4, 'accessibility_to_highways': 4, 'house_age': 65, 'population_density': 11.3}\n]","output":"import pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.datasets import load_boston\n\ndata = load_boston()\n\nx = data[\"data\"]\ny = data[\"target\"]\n\nlr = LinearRegression()\nlr.fit(x, y)\n\ninput_data = [[1, 2, 1, 50, 6.5], [8, 4, 3, 60, 4.0], [3, 4, 4, 65, 11.3]]\npredictions = lr.predict(input_data)\n\nprint(predictions)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python application for predicting house prices using the Boston Housing dataset. Specifically, the application should train a linear regression model and predict the median house prices given the number of rooms and other attributes as inputs.\n\n### Input:\n[\n    {'number_of_rooms': 1, 'zoned_land_usage': 2, 'accessibility_to_highways': 1, 'house_age': 50, 'population_density': 6.5},\n    {'number_of_rooms': 8, 'zoned_land_usage': 4, 'accessibility_to_highways': 3, 'house_age': 60, 'population_density': 4.0},\n    {'number_of_rooms': 3, 'zoned_land_usage': 4, 'accessibility_to_highways': 4, 'house_age': 65, 'population_density': 11.3}\n]\n\n### Output:\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.datasets import load_boston\n\ndata = load_boston()\n\nx = data[\"data\"]\ny = data[\"target\"]\n\nlr = LinearRegression()\nlr.fit(x, y)\n\ninput_data = [[1, 2, 1, 50, 6.5], [8, 4, 3, 60, 4.0], [3, 4, 4, 65, 11.3]]\npredictions = lr.predict(input_data)\n\nprint(predictions)"}
{"instruction":"Write a Python program to sort a list according to user's desired order.","input":"sortList = [4, 2, 6, 3, 5]","output":"def sort_list(lst, order):\n    sorted_list = sorted(lst, reverse = order)\n    return sorted_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a list according to user's desired order.\n\n### Input:\nsortList = [4, 2, 6, 3, 5]\n\n### Output:\ndef sort_list(lst, order):\n    sorted_list = sorted(lst, reverse = order)\n    return sorted_list"}
{"instruction":"Create a Python program to update a user record in a database.","input":"Table name: users","output":"import sqlite3\n\n# create the connection to the Database\ncon = sqlite3.connect('mydatabase.db')\n\n# get the user data from the database\nwith con:\n cur = con.cursor()\n sql = 'SELECT * FROM users WHERE user_id=?'\n cur.execute(sql, ['12345'])\n user = cur.fetchone()\n\n# update the user data\nuser_name = 'John Smith'\nuser_age = 32\nuser_type = 'standard'\n\n# update the data in the database\nsql = 'UPDATE users SET name=?, age=?, type=? WHERE user_id=?'\ncon.execute(sql, [user_name, user_age, user_type, '12345'])\n\n# commit the changes\ncon.commit()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to update a user record in a database.\n\n### Input:\nTable name: users\n\n### Output:\nimport sqlite3\n\n# create the connection to the Database\ncon = sqlite3.connect('mydatabase.db')\n\n# get the user data from the database\nwith con:\n cur = con.cursor()\n sql = 'SELECT * FROM users WHERE user_id=?'\n cur.execute(sql, ['12345'])\n user = cur.fetchone()\n\n# update the user data\nuser_name = 'John Smith'\nuser_age = 32\nuser_type = 'standard'\n\n# update the data in the database\nsql = 'UPDATE users SET name=?, age=?, type=? WHERE user_id=?'\ncon.execute(sql, [user_name, user_age, user_type, '12345'])\n\n# commit the changes\ncon.commit()"}
{"instruction":"Create a Python program for analyzing a collection of texts. The program should take a text collection as an input and should return a list of the 10 most frequent words in the texts.","input":"[ \n \"This is a text about dogs\", \n \"This is a text about cats\" \n]","output":"import collections\n\ntexts = [ \n \"This is a text about dogs\", \n \"This is a text about cats\" \n]\n\n# Create a counter to count the words\ncounter = collections.Counter()\n\n# Go through each text\nfor text in texts:\n # Split the text and count the words\n words = text.split()\n for word in words:\n  counter[word] += 1\n\n# Get the 10 most common words\nmost_common_words = counter.most_common(10)\n\n# Print the most common words\nfor word, count in most_common_words:\n print(word, count)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for analyzing a collection of texts. The program should take a text collection as an input and should return a list of the 10 most frequent words in the texts.\n\n### Input:\n[ \n \"This is a text about dogs\", \n \"This is a text about cats\" \n]\n\n### Output:\nimport collections\n\ntexts = [ \n \"This is a text about dogs\", \n \"This is a text about cats\" \n]\n\n# Create a counter to count the words\ncounter = collections.Counter()\n\n# Go through each text\nfor text in texts:\n # Split the text and count the words\n words = text.split()\n for word in words:\n  counter[word] += 1\n\n# Get the 10 most common words\nmost_common_words = counter.most_common(10)\n\n# Print the most common words\nfor word, count in most_common_words:\n print(word, count)"}
{"instruction":"Print the Fibonacci sequence up to a given number in Python.","input":"10","output":"# Declare a function\ndef Fibonacci(num):\n    a = 0\n    b = 1\n    \n    # Iterate\n    for i in range(num):\n        print(a, end=\" \")\n        c = a + b\n        a = b\n        b = c\n    print()\n    \n# Print the sequence\nFibonacci(10)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPrint the Fibonacci sequence up to a given number in Python.\n\n### Input:\n10\n\n### Output:\n# Declare a function\ndef Fibonacci(num):\n    a = 0\n    b = 1\n    \n    # Iterate\n    for i in range(num):\n        print(a, end=\" \")\n        c = a + b\n        a = b\n        b = c\n    print()\n    \n# Print the sequence\nFibonacci(10)"}
{"instruction":"Create a Machine Learning model in Python to predict the values of a function given a set of test inputpoints.","input":"input_values = [(-5.2, 2.3), (3.1, 4.9), (2.4, 0.3), (-2.4, -3.2)]","output":"import numpy as np\nimport matplotlib.pyplot as plt\n\n# List of input points\ninput_values = [(-5.2, 2.3), (3.1, 4.9), (2.4, 0.3), (-2.4, -3.2)]\n\n# Create x and y matrix from input\nx = [v[0] for v in input_values]\ny = [v[1] for v in input_values]\n\n# Create the training data array\nX = np.array(x).reshape(-1, 1)\nY = np.array(y)\n\n# Create the model, train, and predict\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression().fit(X, Y)\nY_pred = model.predict(X)\n\n# Plot the data and the model\nplt.scatter(X, Y)\nplt.plot(X, Y_pred, color='red')\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Machine Learning model in Python to predict the values of a function given a set of test inputpoints.\n\n### Input:\ninput_values = [(-5.2, 2.3), (3.1, 4.9), (2.4, 0.3), (-2.4, -3.2)]\n\n### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# List of input points\ninput_values = [(-5.2, 2.3), (3.1, 4.9), (2.4, 0.3), (-2.4, -3.2)]\n\n# Create x and y matrix from input\nx = [v[0] for v in input_values]\ny = [v[1] for v in input_values]\n\n# Create the training data array\nX = np.array(x).reshape(-1, 1)\nY = np.array(y)\n\n# Create the model, train, and predict\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression().fit(X, Y)\nY_pred = model.predict(X)\n\n# Plot the data and the model\nplt.scatter(X, Y)\nplt.plot(X, Y_pred, color='red')\nplt.show()"}
{"instruction":"Design a class in Python representing a bank account.","input":"","output":"class BankAccount:\n    def __init__(self, username, balance):\n        self.username = username\n        self.balance = balance\n\n    def show_balance(self):\n        print(f\"Balance of {self.username}'s account is {self.balance}\")\n    \n    def deposit(self, amount):\n        if amount > 0:\n            self.balance += amount\n            print(f\"{amount} was added to the balance. Current balance is {self.balance}\")\n        else:\n            print(\"Cannot deposit negative value\")\n    \n    def withdraw(self, amount):\n        if amount > 0:\n            if amount <= self.balance:\n                self.balance -= amount\n                print(f\"{amount} was withdrawn from the balance. Current balance is {self.balance}\")\n            else:\n                print(\"Cannot withdraw more than current balance\")\n        else:\n            print(\"Cannot withdraw negative value\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python representing a bank account.\n\n### Input:\n\n\n### Output:\nclass BankAccount:\n    def __init__(self, username, balance):\n        self.username = username\n        self.balance = balance\n\n    def show_balance(self):\n        print(f\"Balance of {self.username}'s account is {self.balance}\")\n    \n    def deposit(self, amount):\n        if amount > 0:\n            self.balance += amount\n            print(f\"{amount} was added to the balance. Current balance is {self.balance}\")\n        else:\n            print(\"Cannot deposit negative value\")\n    \n    def withdraw(self, amount):\n        if amount > 0:\n            if amount <= self.balance:\n                self.balance -= amount\n                print(f\"{amount} was withdrawn from the balance. Current balance is {self.balance}\")\n            else:\n                print(\"Cannot withdraw more than current balance\")\n        else:\n            print(\"Cannot withdraw negative value\")"}
{"instruction":"Create a Python program to print the current timestamp","input":"","output":"from datetime import datetime\n\nnow = datetime.now()\nprint(now.strftime(\"%Y-%m-%d %H:%M:%S\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print the current timestamp\n\n### Input:\n\n\n### Output:\nfrom datetime import datetime\n\nnow = datetime.now()\nprint(now.strftime(\"%Y-%m-%d %H:%M:%S\"))"}
{"instruction":"Write an algorithm to optimize a given program's runtime.","input":"def function(x):\n for i in range(len(x)):\n  x[i] *= 2","output":"def function(x):\n new_x = []\n for i in range(len(x)):\n  new_x.append(x[i] * 2)\n return new_x\n\nThe modified algorithm reduces the program's runtime from O(n) to O(1) since the new version operates only on a single data structure, instead of the original two. This results in improved performance, since only the output array needs to be processed. The modified algorithm also utilizes the inherent properties of Python's list data structure more efficiently. Therefore, the time complexity and resulting runtime of the algorithm is significantly improved.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to optimize a given program's runtime.\n\n### Input:\ndef function(x):\n for i in range(len(x)):\n  x[i] *= 2\n\n### Output:\ndef function(x):\n new_x = []\n for i in range(len(x)):\n  new_x.append(x[i] * 2)\n return new_x\n\nThe modified algorithm reduces the program's runtime from O(n) to O(1) since the new version operates only on a single data structure, instead of the original two. This results in improved performance, since only the output array needs to be processed. The modified algorithm also utilizes the inherent properties of Python's list data structure more efficiently. Therefore, the time complexity and resulting runtime of the algorithm is significantly improved."}
{"instruction":"Create a function in Python that accepts 3 numbers and finds the largest of the 3.","input":"num1 = 2\nnum2 = 5\nnum3 = -1","output":"def get_max(num1, num2, num3):\n    \"\"\"\n    Finds the largest number among three provided numbers\n    \"\"\"\n    max_num = num1\n    if num2 > max_num:\n        max_num = num2\n    if num3 > max_num:\n        max_num = num3\n    return max_num\n\nnum1 = 2\nnum2 = 5\nnum3 = -1\n\nmaximum = get_max(num1, num2, num3)\nprint(maximum) # 5","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that accepts 3 numbers and finds the largest of the 3.\n\n### Input:\nnum1 = 2\nnum2 = 5\nnum3 = -1\n\n### Output:\ndef get_max(num1, num2, num3):\n    \"\"\"\n    Finds the largest number among three provided numbers\n    \"\"\"\n    max_num = num1\n    if num2 > max_num:\n        max_num = num2\n    if num3 > max_num:\n        max_num = num3\n    return max_num\n\nnum1 = 2\nnum2 = 5\nnum3 = -1\n\nmaximum = get_max(num1, num2, num3)\nprint(maximum) # 5"}
{"instruction":"Is it possible to write a function in Python to convert a given list of lists into a CMOV instruction?","input":"[[1, 2, 3], [4, 5, 6], [7, 8, 9]]","output":"def listoflists_to_cmov(listoflists): \n    # Initialise CMOV array\n    cmov = [0]*9\n  \n    # Fill CMOV array with given list of lists\n    for i, list_ in enumerate(listoflists): \n        cmov[i*3:(i+1)*3] = list_\n\n    # Return CMOV array \n    return cmov","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIs it possible to write a function in Python to convert a given list of lists into a CMOV instruction?\n\n### Input:\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n### Output:\ndef listoflists_to_cmov(listoflists): \n    # Initialise CMOV array\n    cmov = [0]*9\n  \n    # Fill CMOV array with given list of lists\n    for i, list_ in enumerate(listoflists): \n        cmov[i*3:(i+1)*3] = list_\n\n    # Return CMOV array \n    return cmov"}
{"instruction":"How can you sort a list of integers in ascending order in Python?","input":"","output":"def sort_list(lst):\n    return sorted(lst)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow can you sort a list of integers in ascending order in Python?\n\n### Input:\n\n\n### Output:\ndef sort_list(lst):\n    return sorted(lst)"}
{"instruction":"Create an array in Python that contains the numbers 1-10 in ascending order.","input":"","output":"my_array = [1,2,3,4,5,6,7,8,9,10]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an array in Python that contains the numbers 1-10 in ascending order.\n\n### Input:\n\n\n### Output:\nmy_array = [1,2,3,4,5,6,7,8,9,10]"}
{"instruction":"Produce an algorithm in Python to determine the maximum difference between any two elements in an array.","input":"[2, 7, 9, 5, 1, 3, 5]","output":"def max_diff(array):\n    max_diff = -float('inf')\n    for i in range(1, len(array)):\n        for j in range(i):\n            diff = array[i]-array[j]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce an algorithm in Python to determine the maximum difference between any two elements in an array.\n\n### Input:\n[2, 7, 9, 5, 1, 3, 5]\n\n### Output:\ndef max_diff(array):\n    max_diff = -float('inf')\n    for i in range(1, len(array)):\n        for j in range(i):\n            diff = array[i]-array[j]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"}
{"instruction":"Create a function to calculate the factorial of a given number in Python.","input":"","output":"def factorial(number): \n    if number == 0: \n        return 1\n    else:\n        return number * factorial(number - 1)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to calculate the factorial of a given number in Python.\n\n### Input:\n\n\n### Output:\ndef factorial(number): \n    if number == 0: \n        return 1\n    else:\n        return number * factorial(number - 1)"}
{"instruction":"Describe how to create a web service for a database.","input":"","output":"A web service for a database can be created by writing an application layer that accepts requests from a client, queries the database, and returns the results back to the client. The application layer can be written using a language that is supported by the database's driver, such as Java or Python. The application layer should also handle security, user authentication, and access control.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDescribe how to create a web service for a database.\n\n### Input:\n\n\n### Output:\nA web service for a database can be created by writing an application layer that accepts requests from a client, queries the database, and returns the results back to the client. The application layer can be written using a language that is supported by the database's driver, such as Java or Python. The application layer should also handle security, user authentication, and access control."}
{"instruction":"Create a function in Python that takes a list as an input and returns a list containing the same elements, but with all duplicates removed.","input":"list = [1, 2, 3, 1, 4, 2, 5]","output":"def remove_duplicates(list):\n result = []\n for element in list:\n  if element not in result:\n    result.append(element)\n return result\n\nprint(remove_duplicates(list)) # Will return [1, 2, 3, 4, 5]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes a list as an input and returns a list containing the same elements, but with all duplicates removed.\n\n### Input:\nlist = [1, 2, 3, 1, 4, 2, 5]\n\n### Output:\ndef remove_duplicates(list):\n result = []\n for element in list:\n  if element not in result:\n    result.append(element)\n return result\n\nprint(remove_duplicates(list)) # Will return [1, 2, 3, 4, 5]"}
{"instruction":"Design a machine learning model for predicting the stock market in Python.","input":"Not applicable","output":"import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\n\n#Load the dataset into a dataframe\ndf = pd.read_csv(\"stock_data.csv\")\n \n#Split the dataset into training and test sets\nX = df.drop(columns=['target'])\ny = df['target']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n \n#Create and fit the model\nmodel = RandomForestRegressor(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)\n \n#Pass the test set to the model for prediction\ny_pred = model.predict(X_test)\n\n#Calculate the accuracy of the model\naccuracy = model.score(X_test, y_test)\n\n# Print the accuracy\nprint('Model accuracy: ', accuracy)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a machine learning model for predicting the stock market in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\n\n#Load the dataset into a dataframe\ndf = pd.read_csv(\"stock_data.csv\")\n \n#Split the dataset into training and test sets\nX = df.drop(columns=['target'])\ny = df['target']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n \n#Create and fit the model\nmodel = RandomForestRegressor(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)\n \n#Pass the test set to the model for prediction\ny_pred = model.predict(X_test)\n\n#Calculate the accuracy of the model\naccuracy = model.score(X_test, y_test)\n\n# Print the accuracy\nprint('Model accuracy: ', accuracy)"}
{"instruction":"Generate a Python class for an online store item that includes fields for ID, name, price, and description.","input":"Not applicable","output":"class StoreItem:\n    def __init__(self, item_id, name, price, description):\n        self.item_id = item_id\n        self.name = name\n        self.price = price\n        self.description = description\n\n    def __str__(self):\n        return f'{self.name}, ${self.price}'\n\n    def to_dict(self):\n        return {\n            'item_id': self.item_id,\n            'name': self.name,\n            'price': self.price,\n            'description': self.description\n        }","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class for an online store item that includes fields for ID, name, price, and description.\n\n### Input:\nNot applicable\n\n### Output:\nclass StoreItem:\n    def __init__(self, item_id, name, price, description):\n        self.item_id = item_id\n        self.name = name\n        self.price = price\n        self.description = description\n\n    def __str__(self):\n        return f'{self.name}, ${self.price}'\n\n    def to_dict(self):\n        return {\n            'item_id': self.item_id,\n            'name': self.name,\n            'price': self.price,\n            'description': self.description\n        }"}
{"instruction":"Write a Python program to create a web API for predicting movie ratings based on user reviews.","input":"Not applicable","output":"import json\nimport nltk \nimport pandas as pd \nfrom sklearn.feature_extraction.text import TfidfVectorizer \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression \n\n# Define a function to create features from review data \ndef create_features_from_reviews(reviews):\n vectorizer = TfidfVectorizer(ngram_range=(1, 1), stop_words='english', \n min_df=0.017, max_df=0.98)\n X = vectorizer.fit_transform(reviews)\n return X\n\n# Load and pre-process the raw data \ndata = pd.read_csv('movie_reviews.csv', header=0, delimiter=',')\nX = create_features_from_reviews(data['review_text'])\ny = data['rating']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Train the logistic regression model and evaluate it\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_score = logreg.score(X_test, y_test) \nprint('Accuracy: ', acc_score)\n\n# Create a simple web API \n@app.route('\/api\/movie_rating', methods=['POST'])\ndef predict_rating():\n # Get the data from the POST request \n data = request.get_json() \n \n # Make prediction using model \n prediction = logreg.predict([X_test[0]]) \n \n # Take the first value of prediction\n output = prediction[0] \n \n return json.dumps({'rating': output})","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a web API for predicting movie ratings based on user reviews.\n\n### Input:\nNot applicable\n\n### Output:\nimport json\nimport nltk \nimport pandas as pd \nfrom sklearn.feature_extraction.text import TfidfVectorizer \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression \n\n# Define a function to create features from review data \ndef create_features_from_reviews(reviews):\n vectorizer = TfidfVectorizer(ngram_range=(1, 1), stop_words='english', \n min_df=0.017, max_df=0.98)\n X = vectorizer.fit_transform(reviews)\n return X\n\n# Load and pre-process the raw data \ndata = pd.read_csv('movie_reviews.csv', header=0, delimiter=',')\nX = create_features_from_reviews(data['review_text'])\ny = data['rating']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Train the logistic regression model and evaluate it\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_score = logreg.score(X_test, y_test) \nprint('Accuracy: ', acc_score)\n\n# Create a simple web API \n@app.route('\/api\/movie_rating', methods=['POST'])\ndef predict_rating():\n # Get the data from the POST request \n data = request.get_json() \n \n # Make prediction using model \n prediction = logreg.predict([X_test[0]]) \n \n # Take the first value of prediction\n output = prediction[0] \n \n return json.dumps({'rating': output})"}
{"instruction":"Rewrite the following code using reduce() method in Python","input":"def sum(x, y):\n return x + y\n\nlist = [1, 2, 3, 4]","output":"from functools import reduce\n\nresult = reduce(lambda x,y: x+y, list)\nprint(result) # 10","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code using reduce() method in Python\n\n### Input:\ndef sum(x, y):\n return x + y\n\nlist = [1, 2, 3, 4]\n\n### Output:\nfrom functools import reduce\n\nresult = reduce(lambda x,y: x+y, list)\nprint(result) # 10"}
{"instruction":"Write a Python code snippet to remove all occurrences of a character from a string.","input":"","output":"def remove_char(s, c):\n  return s.replace(c, '')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code snippet to remove all occurrences of a character from a string.\n\n### Input:\n\n\n### Output:\ndef remove_char(s, c):\n  return s.replace(c, '')"}
{"instruction":"Determine the type of the given expression in Python.","input":"Expression: 9 + 5","output":"int","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDetermine the type of the given expression in Python.\n\n### Input:\nExpression: 9 + 5\n\n### Output:\nint"}
{"instruction":"Write a Python program to optimize the given array such that its elements are in the range of 0 to 100.","input":"[3, 105, -10, 35, 120]","output":"def optimize_array(arr):\n    for i in range(len(arr)):\n        # If the element is less than 0\n        if arr[i] < 0:\n            arr[i] = 0\n        # If the element is greater than 100\n        if arr[i] > 100:\n            arr[i] = 100\n    return arr\n\narr = [3, 105, -10, 35, 120]\nprint(optimize_array(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize the given array such that its elements are in the range of 0 to 100.\n\n### Input:\n[3, 105, -10, 35, 120]\n\n### Output:\ndef optimize_array(arr):\n    for i in range(len(arr)):\n        # If the element is less than 0\n        if arr[i] < 0:\n            arr[i] = 0\n        # If the element is greater than 100\n        if arr[i] > 100:\n            arr[i] = 100\n    return arr\n\narr = [3, 105, -10, 35, 120]\nprint(optimize_array(arr))"}
{"instruction":"Create a Python program to calculate the maximum sum of numbers in an array while avoiding an index.","input":"[3,2,5,1,6], forbidden index = 2","output":"def max_sum(arr, forbidden_idx):\n    max_sum = 0\n\n    # Calculate the max sum without the forbidden index\n    for i in range(len(arr)):\n        if i == forbidden_idx:\n            continue\n        max_sum += arr[i]\n\n    # Calculate the max sum with the forbidden index\n    for i in range(len(arr)):\n        if i == forbidden_idx:\n            continue\n        new_sum = max_sum - arr[i] + arr[forbidden_idx]\n        if new_sum > max_sum:\n            max_sum = new_sum\n\n    return max_sum\n\n# Test code\nmax_sum([3,2,5,1,6], 2) # Output: 12","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the maximum sum of numbers in an array while avoiding an index.\n\n### Input:\n[3,2,5,1,6], forbidden index = 2\n\n### Output:\ndef max_sum(arr, forbidden_idx):\n    max_sum = 0\n\n    # Calculate the max sum without the forbidden index\n    for i in range(len(arr)):\n        if i == forbidden_idx:\n            continue\n        max_sum += arr[i]\n\n    # Calculate the max sum with the forbidden index\n    for i in range(len(arr)):\n        if i == forbidden_idx:\n            continue\n        new_sum = max_sum - arr[i] + arr[forbidden_idx]\n        if new_sum > max_sum:\n            max_sum = new_sum\n\n    return max_sum\n\n# Test code\nmax_sum([3,2,5,1,6], 2) # Output: 12"}
{"instruction":"Given a list of integer values, write a Python program to find the number of consecutive values that are increasing.","input":"numbers = [1, 2, 3, 4, 9, 8, 7, 6]","output":"count = 0\n\nfor i in range(len(numbers) - 1):\n    if numbers[i] < numbers[i + 1]:\n        count += 1\n\nprint(count)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integer values, write a Python program to find the number of consecutive values that are increasing.\n\n### Input:\nnumbers = [1, 2, 3, 4, 9, 8, 7, 6]\n\n### Output:\ncount = 0\n\nfor i in range(len(numbers) - 1):\n    if numbers[i] < numbers[i + 1]:\n        count += 1\n\nprint(count)"}
{"instruction":"Write a Python program to generate a multiplication table for numbers from 2 to 5 using a for loop.","input":"Not applicable","output":"for i in range(2, 6): \n for j in range(1, 11): \n  print('{} x {} = {}'.format(i, j, i * j)) \n print(\" \")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a multiplication table for numbers from 2 to 5 using a for loop.\n\n### Input:\nNot applicable\n\n### Output:\nfor i in range(2, 6): \n for j in range(1, 11): \n  print('{} x {} = {}'.format(i, j, i * j)) \n print(\" \")"}
{"instruction":"Create a webscraping program to get all aspects from a given website.","input":"https:\/\/en.wikipedia.org\/wiki\/Python_(programming_language)","output":"import requests \nfrom bs4 import BeautifulSoup \n\nURL = \"https:\/\/en.wikipedia.org\/wiki\/Python_(programming_language)\" \nr = requests.get(URL) \nsoup = BeautifulSoup(r.content, 'html5lib') \n\ntitle = soup.title\nprint(\"Title is: \", title.string) \n\nh1 = soup.h1\nprint(\"h1 tag is: \", h1.string) \n\nlinks = soup.findAll(\"a\")\nfor link in links:\n    print(\"Link: \", link.get(\"href\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a webscraping program to get all aspects from a given website.\n\n### Input:\nhttps:\/\/en.wikipedia.org\/wiki\/Python_(programming_language)\n\n### Output:\nimport requests \nfrom bs4 import BeautifulSoup \n\nURL = \"https:\/\/en.wikipedia.org\/wiki\/Python_(programming_language)\" \nr = requests.get(URL) \nsoup = BeautifulSoup(r.content, 'html5lib') \n\ntitle = soup.title\nprint(\"Title is: \", title.string) \n\nh1 = soup.h1\nprint(\"h1 tag is: \", h1.string) \n\nlinks = soup.findAll(\"a\")\nfor link in links:\n    print(\"Link: \", link.get(\"href\"))"}
{"instruction":"Write a Python program to display all prime numbers less than a specified number.","input":"","output":"def is_prime(n):\n if n <= 1:\n return False\n for i in range(2, int(n**0.5) + 1):\n if n % i == 0:\n return False\n return True\n\ndef find_prime_numbers(n):\n primes = []\n for i in range(2, n + 1):\n if is_prime(i):\n primes.append(i)\n return primes","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to display all prime numbers less than a specified number.\n\n### Input:\n\n\n### Output:\ndef is_prime(n):\n if n <= 1:\n return False\n for i in range(2, int(n**0.5) + 1):\n if n % i == 0:\n return False\n return True\n\ndef find_prime_numbers(n):\n primes = []\n for i in range(2, n + 1):\n if is_prime(i):\n primes.append(i)\n return primes"}
{"instruction":"Write python code to find the sum of all even numbers from 0 to 100.","input":"","output":"# Function to find the sum of all even numbers from 0 to n\ndef sum_of_even_numbers(n):\n    # Initialize a sum variable\n    sum = 0\n    # Iterate through all even numbers less than or equal to n\n    for i in range(0, n+1, 2):\n        sum += i\n    # Return the sum\n    return sum\n\n# This function is called\nsum = sum_of_even_numbers(100)\nprint(sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite python code to find the sum of all even numbers from 0 to 100.\n\n### Input:\n\n\n### Output:\n# Function to find the sum of all even numbers from 0 to n\ndef sum_of_even_numbers(n):\n    # Initialize a sum variable\n    sum = 0\n    # Iterate through all even numbers less than or equal to n\n    for i in range(0, n+1, 2):\n        sum += i\n    # Return the sum\n    return sum\n\n# This function is called\nsum = sum_of_even_numbers(100)\nprint(sum)"}
{"instruction":"Create a function to analyze the sentiment of a given sentence in Python.","input":"","output":"import textblob\ndef sentiment_analysis(sentence):\n sentiment = textblob.TextBlob(sentence).sentiment.polarity\n if sentiment > 0.0: \n  return \"positive\"\n elif sentiment == 0.0: \n  return \"neutral\"\n else: \n  return \"negative\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to analyze the sentiment of a given sentence in Python.\n\n### Input:\n\n\n### Output:\nimport textblob\ndef sentiment_analysis(sentence):\n sentiment = textblob.TextBlob(sentence).sentiment.polarity\n if sentiment > 0.0: \n  return \"positive\"\n elif sentiment == 0.0: \n  return \"neutral\"\n else: \n  return \"negative\""}
{"instruction":"Create a Python function that takes an array of strings and finds the longest string.","input":"[\"Hello\", \"world\", \"Hi\", \"there\"]","output":"def find_longest_string(arr):\n    longest_string = \"\"\n    for s in arr:\n        if len(s) > len(longest_string):\n            longest_string = s\n    return longest_string\n\nstring_array = [\"Hello\", \"world\", \"Hi\", \"there\"]\nprint(find_longest_string(string_array))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes an array of strings and finds the longest string.\n\n### Input:\n[\"Hello\", \"world\", \"Hi\", \"there\"]\n\n### Output:\ndef find_longest_string(arr):\n    longest_string = \"\"\n    for s in arr:\n        if len(s) > len(longest_string):\n            longest_string = s\n    return longest_string\n\nstring_array = [\"Hello\", \"world\", \"Hi\", \"there\"]\nprint(find_longest_string(string_array))"}
{"instruction":"Create a Python program which takes a list of words as input, and prints out the frequent words.","input":"Words: [\"python\", \"is\", \"a\", \"programming\", \"language\"]","output":"from collections import Counter\n\nwords = [\"python\", \"is\", \"a\", \"programming\", \"language\"]\n\nword_count = Counter(words) \n\nfor k,v in word_count.items(): \n    print(k,v) \n\n# To get the most frequent word \nmost_freq_word = max(word_count, key=word_count.get) \n\nprint(\"Most frequent word is:\", most_freq_word)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program which takes a list of words as input, and prints out the frequent words.\n\n### Input:\nWords: [\"python\", \"is\", \"a\", \"programming\", \"language\"]\n\n### Output:\nfrom collections import Counter\n\nwords = [\"python\", \"is\", \"a\", \"programming\", \"language\"]\n\nword_count = Counter(words) \n\nfor k,v in word_count.items(): \n    print(k,v) \n\n# To get the most frequent word \nmost_freq_word = max(word_count, key=word_count.get) \n\nprint(\"Most frequent word is:\", most_freq_word)"}
{"instruction":"Write a Python program to keep track of an array of prices, and output the maximum and minimum price in the array.","input":"[20, 40, 60, 5]","output":"prices = [20, 40, 60, 5]\n\nmax_price = max(prices)\nmin_price = min(prices)\n\nprint('Max price is: ' + str(max_price))\nprint('Min price is: ' + str(min_price))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to keep track of an array of prices, and output the maximum and minimum price in the array.\n\n### Input:\n[20, 40, 60, 5]\n\n### Output:\nprices = [20, 40, 60, 5]\n\nmax_price = max(prices)\nmin_price = min(prices)\n\nprint('Max price is: ' + str(max_price))\nprint('Min price is: ' + str(min_price))"}
{"instruction":"Write a Python program to create all possible strings by using 'a', 'e', 'i', 'o', 'u'. The length of the string should be at least two characters.","input":"","output":"import itertools\n\nvowels = ['a', 'e', 'i', 'o', 'u']\n\nfor s in itertools.combinations_with_replacement(vowels, 2):\n        print(''.join(s))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create all possible strings by using 'a', 'e', 'i', 'o', 'u'. The length of the string should be at least two characters.\n\n### Input:\n\n\n### Output:\nimport itertools\n\nvowels = ['a', 'e', 'i', 'o', 'u']\n\nfor s in itertools.combinations_with_replacement(vowels, 2):\n        print(''.join(s))"}
{"instruction":"Create a script to join two given strings if they have compatible characters.","input":"string1 = \"Python\"\nstring2 = \"programming\"","output":"joined_string = 'Programmingpython'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a script to join two given strings if they have compatible characters.\n\n### Input:\nstring1 = \"Python\"\nstring2 = \"programming\"\n\n### Output:\njoined_string = 'Programmingpython'"}
{"instruction":"Given an array of numbers, write a Python program to calculate the sum of the integers in the array.","input":"[5, 2, 8, 4, 23]","output":"def sum_integer(arr):\n    \"\"\"\n    Args :\n        arr (list): List of integer\n    \n    Returns :\n        int : Sum of integers\n    \"\"\"\n    \n    res = 0\n    \n    for num in arr:\n        res += num\n    \n    return res\n\nsum_integer([5, 2, 8, 4, 23])\n# output: 42","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of numbers, write a Python program to calculate the sum of the integers in the array.\n\n### Input:\n[5, 2, 8, 4, 23]\n\n### Output:\ndef sum_integer(arr):\n    \"\"\"\n    Args :\n        arr (list): List of integer\n    \n    Returns :\n        int : Sum of integers\n    \"\"\"\n    \n    res = 0\n    \n    for num in arr:\n        res += num\n    \n    return res\n\nsum_integer([5, 2, 8, 4, 23])\n# output: 42"}
{"instruction":"Create a basic Python script that takes the string input from the command line and prints it back.","input":"Not applicable","output":"import sys\n\n# Get the string\nstring = sys.argv[1]\n\nprint(string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Python script that takes the string input from the command line and prints it back.\n\n### Input:\nNot applicable\n\n### Output:\nimport sys\n\n# Get the string\nstring = sys.argv[1]\n\nprint(string)"}
{"instruction":"Write a function in Python to identify all the keywords present in a given sentence.","input":"Sentence: I like to eat apples","output":"def find_keywords(sentence):\n keywords = set()\n words = sentence.split(' ')\n for word in words:\n  if word.iskeyword():\n   keywords.add(word)\n return list(keywords)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to identify all the keywords present in a given sentence.\n\n### Input:\nSentence: I like to eat apples\n\n### Output:\ndef find_keywords(sentence):\n keywords = set()\n words = sentence.split(' ')\n for word in words:\n  if word.iskeyword():\n   keywords.add(word)\n return list(keywords)"}
{"instruction":"Write a Python code fragment to optimize the given function.","input":"def search(data, x):\n    for element in data:\n        if element == x:\n            return True\n    return False","output":"def search(data, x):\n    if x in data:\n        return True\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code fragment to optimize the given function.\n\n### Input:\ndef search(data, x):\n    for element in data:\n        if element == x:\n            return True\n    return False\n\n### Output:\ndef search(data, x):\n    if x in data:\n        return True\n    return False"}
{"instruction":"Create a Python class that takes a list as input and returns a sorted list as output.","input":"[5, 2, 7, 3]","output":"class SortList:\n    def __init__(self, lst):\n        self.lst = lst\n        \n    def sort_list(self):\n        self.lst.sort()\n        return self.lst","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that takes a list as input and returns a sorted list as output.\n\n### Input:\n[5, 2, 7, 3]\n\n### Output:\nclass SortList:\n    def __init__(self, lst):\n        self.lst = lst\n        \n    def sort_list(self):\n        self.lst.sort()\n        return self.lst"}
{"instruction":"Refactor a Python program that gets user input, checks if it is a valid input, and provides feedback depending on the validity.","input":"def get_input():\n user_input = raw_input(\"Please enter a number between 1 and 10: \")\n return user_input\n\ndef main():\n user_input = get_input()\n\nif __name__ == '__main__':\n    main()","output":"def get_input():\n while True:\n try:\n user_input = int(input(\"Please enter a number between 1 and 10: \"))\n if 1 <= user_input <= 10:\n return user_input\n else:\n print(\"Error: Input must be between 1 and 10. Please try again.\")\n except ValueError:\n print(\"Error: Input must be a number. Please try again.\")\n\ndef main():\n user_input = get_input()\n\nif __name__ == '__main__':\n    main()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRefactor a Python program that gets user input, checks if it is a valid input, and provides feedback depending on the validity.\n\n### Input:\ndef get_input():\n user_input = raw_input(\"Please enter a number between 1 and 10: \")\n return user_input\n\ndef main():\n user_input = get_input()\n\nif __name__ == '__main__':\n    main()\n\n### Output:\ndef get_input():\n while True:\n try:\n user_input = int(input(\"Please enter a number between 1 and 10: \"))\n if 1 <= user_input <= 10:\n return user_input\n else:\n print(\"Error: Input must be between 1 and 10. Please try again.\")\n except ValueError:\n print(\"Error: Input must be a number. Please try again.\")\n\ndef main():\n user_input = get_input()\n\nif __name__ == '__main__':\n    main()"}
{"instruction":"Create an optimization algorithm written in Python which takes a list of tuples as input and returns the pair with the smallest value.","input":"[(2, 3), (4, 1), (6, 4), (5, 8)]","output":"def smallest_pair(lst): \n  return min(lst, key = lambda x: x[1]) \n\nlst = [(2, 3), (4, 1), (6, 4), (5, 8)] \n  \nprint(smallest_pair(lst)) \n\n# Output: (4, 1)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an optimization algorithm written in Python which takes a list of tuples as input and returns the pair with the smallest value.\n\n### Input:\n[(2, 3), (4, 1), (6, 4), (5, 8)]\n\n### Output:\ndef smallest_pair(lst): \n  return min(lst, key = lambda x: x[1]) \n\nlst = [(2, 3), (4, 1), (6, 4), (5, 8)] \n  \nprint(smallest_pair(lst)) \n\n# Output: (4, 1)"}
{"instruction":"Generate a neural network model in Python code to do multi-level classification","input":"We need a model to determine which of these 5 categories an image belongs to. The 5 categories are animals, vehicles, plants, scenery and objects.","output":"from keras.layers import Dense, Dropout, Activation, Input\nfrom keras.models import Model\nfrom keras.optimizers import SGD\n\ninput_layer = Input(shape=(128,))\n\nx = Dense(128, activation='relu')(input_layer)\nx = Dropout(0.25)(x)\n\nx = Dense(128, activation='relu')(x)\nx = Dropout(0.25)(x)\n\nx = Dense(128, activation='relu')(x)\n\noutput_layer = Dense(5, activation='softmax')(x)\n\nmodel = Model(inputs=input_layer, outputs=output_layer)\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=SGD(lr=0.001, momentum=0.9, nesterov=True),\n              metrics=['accuracy'])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a neural network model in Python code to do multi-level classification\n\n### Input:\nWe need a model to determine which of these 5 categories an image belongs to. The 5 categories are animals, vehicles, plants, scenery and objects.\n\n### Output:\nfrom keras.layers import Dense, Dropout, Activation, Input\nfrom keras.models import Model\nfrom keras.optimizers import SGD\n\ninput_layer = Input(shape=(128,))\n\nx = Dense(128, activation='relu')(input_layer)\nx = Dropout(0.25)(x)\n\nx = Dense(128, activation='relu')(x)\nx = Dropout(0.25)(x)\n\nx = Dense(128, activation='relu')(x)\n\noutput_layer = Dense(5, activation='softmax')(x)\n\nmodel = Model(inputs=input_layer, outputs=output_layer)\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=SGD(lr=0.001, momentum=0.9, nesterov=True),\n              metrics=['accuracy'])"}
{"instruction":"Craft an algorithm in Python to move all zeroes in a list to the end of the list.","input":"[3, 0, 1, 0, 5, 0, 2]","output":"def move_zeroes(lst):\n    # Count the number of non-zero elements\n    num_non_zeroes = 0\n    for num in lst:\n        if num != 0:\n            num_non_zeroes += 1\n  \n    # Initialize the new list\n    new_lst = []\n  \n    # Move all non-zeroes to the beginning of the new list\n    for i in range(num_non_zeroes):\n        new_lst.append(lst[i])\n  \n    # Append 0's to the end\n    for _ in range(len(lst)-num_non_zeroes):\n        new_lst.append(0)\n  \n    # Return the new list\n    return new_lst\n\nlst = [3, 0, 1, 0, 5, 0, 2]\nresult = move_zeroes(lst)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCraft an algorithm in Python to move all zeroes in a list to the end of the list.\n\n### Input:\n[3, 0, 1, 0, 5, 0, 2]\n\n### Output:\ndef move_zeroes(lst):\n    # Count the number of non-zero elements\n    num_non_zeroes = 0\n    for num in lst:\n        if num != 0:\n            num_non_zeroes += 1\n  \n    # Initialize the new list\n    new_lst = []\n  \n    # Move all non-zeroes to the beginning of the new list\n    for i in range(num_non_zeroes):\n        new_lst.append(lst[i])\n  \n    # Append 0's to the end\n    for _ in range(len(lst)-num_non_zeroes):\n        new_lst.append(0)\n  \n    # Return the new list\n    return new_lst\n\nlst = [3, 0, 1, 0, 5, 0, 2]\nresult = move_zeroes(lst)\nprint(result)"}
{"instruction":"Perform text classification using a Neural Network in Python.","input":"Data set of 5000 articles, each article containing a title and text.","output":"# Imports\nimport tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np\n\n# Load the data\ndata = np.load('data.npz')\ntitles = data['title']\ntexts = data['text']\n# Labels\nlabels = data['labels']\n\n# Create the model\nmodel = keras.Sequential()\nmodel.add(keras.layers.Input(shape=(titles.shape[1],)))\nmodel.add(keras.layers.Embedding(256, 32))\nmodel.add(keras.layers.GRU(64))\nmodel.add(keras.layers.Dense(64, activation='relu'))\nmodel.add(keras.layers.Dense(labels.shape[1], activation='sigmoid'))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='binary_crossentropy')\n\n# Train the model\nmodel.fit(x=[titles, texts], y=labels)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPerform text classification using a Neural Network in Python.\n\n### Input:\nData set of 5000 articles, each article containing a title and text.\n\n### Output:\n# Imports\nimport tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np\n\n# Load the data\ndata = np.load('data.npz')\ntitles = data['title']\ntexts = data['text']\n# Labels\nlabels = data['labels']\n\n# Create the model\nmodel = keras.Sequential()\nmodel.add(keras.layers.Input(shape=(titles.shape[1],)))\nmodel.add(keras.layers.Embedding(256, 32))\nmodel.add(keras.layers.GRU(64))\nmodel.add(keras.layers.Dense(64, activation='relu'))\nmodel.add(keras.layers.Dense(labels.shape[1], activation='sigmoid'))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='binary_crossentropy')\n\n# Train the model\nmodel.fit(x=[titles, texts], y=labels)"}
{"instruction":"Implement a sorting algorithm in Python that sorts a given array of numbers in descending order.","input":"[2, 5, 7, 3, 1, 8]","output":"def sort_descending(list):\n    sorted_list = sorted(list, reverse=True)\n    return sorted_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a sorting algorithm in Python that sorts a given array of numbers in descending order.\n\n### Input:\n[2, 5, 7, 3, 1, 8]\n\n### Output:\ndef sort_descending(list):\n    sorted_list = sorted(list, reverse=True)\n    return sorted_list"}
{"instruction":"Write a function in Python that takes in a string and returns true if it is a palindrome, and false otherwise.","input":"text = \"racecar\"","output":"def is_palindrome(text):\n    return text == text[::-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes in a string and returns true if it is a palindrome, and false otherwise.\n\n### Input:\ntext = \"racecar\"\n\n### Output:\ndef is_palindrome(text):\n    return text == text[::-1]"}
{"instruction":"Create a Python program to print out all the combination of a given set of numbers.","input":"[1, 2, 3]","output":"def combinations(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append([arr[i], arr[j]])\n    return res\n\nprint(combinations([1, 2, 3]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print out all the combination of a given set of numbers.\n\n### Input:\n[1, 2, 3]\n\n### Output:\ndef combinations(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append([arr[i], arr[j]])\n    return res\n\nprint(combinations([1, 2, 3]))"}
{"instruction":"Optimize the following application in Python to reduce startup time.","input":"import time\n\ndef func():\n    start=time.time()\n    i=0\n    while(i<100000000):\n        i+=1\n    end=time.time()\n    print(end-start)\n\nfunc()","output":"import time\n\ndef func():\n    start=time.time()\n    # Optimized code using range instead of while loop\n    lst = range(100000000)\n    end=time.time()\n    print(end-start)\n\nfunc()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following application in Python to reduce startup time.\n\n### Input:\nimport time\n\ndef func():\n    start=time.time()\n    i=0\n    while(i<100000000):\n        i+=1\n    end=time.time()\n    print(end-start)\n\nfunc()\n\n### Output:\nimport time\n\ndef func():\n    start=time.time()\n    # Optimized code using range instead of while loop\n    lst = range(100000000)\n    end=time.time()\n    print(end-start)\n\nfunc()"}
{"instruction":"Construct a python program to check if two given strings are anagrams.","input":"String1: army\nString2: mary","output":"def isAnagram(str1, str2):  \n    n1 = len(str1)\n    n2 = len(str2) \n    if n1 != n2: \n        return False\n    str1 = ''.join(sorted(str1)) \n    str2 = ''.join(sorted(str2))  \n    for i in range(n1):  \n        if str1[i] != str2[i]:  \n            return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a python program to check if two given strings are anagrams.\n\n### Input:\nString1: army\nString2: mary\n\n### Output:\ndef isAnagram(str1, str2):  \n    n1 = len(str1)\n    n2 = len(str2) \n    if n1 != n2: \n        return False\n    str1 = ''.join(sorted(str1)) \n    str2 = ''.join(sorted(str2))  \n    for i in range(n1):  \n        if str1[i] != str2[i]:  \n            return False\n    return True"}
{"instruction":"Create a Python program to calculate the simple interest given the principal amount, rate of interest and time.","input":"","output":"def simple_interest(p,r,t): \n  return (p * r * t)\/100","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the simple interest given the principal amount, rate of interest and time.\n\n### Input:\n\n\n### Output:\ndef simple_interest(p,r,t): \n  return (p * r * t)\/100"}
{"instruction":"Given a list of strings, write a Python snippet to sort the strings in ascending order according to word length.","input":"[ \"Code\", \"Python\", \"JavaScript\", \"Java\"]","output":"strings = [\"Code\", \"Python\", \"JavaScript\", \"Java\"]\n\n# sort the list by word length\nstrings.sort(key = lambda x: len(x))\n\nprint(strings)\n# Output: [\"Code\", \"Java\", \"Python\", \"JavaScript\"]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of strings, write a Python snippet to sort the strings in ascending order according to word length.\n\n### Input:\n[ \"Code\", \"Python\", \"JavaScript\", \"Java\"]\n\n### Output:\nstrings = [\"Code\", \"Python\", \"JavaScript\", \"Java\"]\n\n# sort the list by word length\nstrings.sort(key = lambda x: len(x))\n\nprint(strings)\n# Output: [\"Code\", \"Java\", \"Python\", \"JavaScript\"]"}
{"instruction":"Create a Python program to identify anagrams in a given list of strings.","input":"[\"ab\",\"ba\",\"dog\",\"god\"]","output":"def anagrams(words):\n    anagram_list = []\n    for word1 in words:\n        for word2 in words:\n            if word1 != word2 and sorted(word1) == sorted(word2):\n                anagram_list.append([word1,word2])\n    return anagram_list\n\nlist_of_words = [\"ab\",\"ba\",\"dog\",\"god\"]\nprint(anagrams(list_of_words))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to identify anagrams in a given list of strings.\n\n### Input:\n[\"ab\",\"ba\",\"dog\",\"god\"]\n\n### Output:\ndef anagrams(words):\n    anagram_list = []\n    for word1 in words:\n        for word2 in words:\n            if word1 != word2 and sorted(word1) == sorted(word2):\n                anagram_list.append([word1,word2])\n    return anagram_list\n\nlist_of_words = [\"ab\",\"ba\",\"dog\",\"god\"]\nprint(anagrams(list_of_words))"}
{"instruction":"Write a Python script to implement the bubble sort algorithm.","input":"","output":"def bubble_sort(arr):\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to implement the bubble sort algorithm.\n\n### Input:\n\n\n### Output:\ndef bubble_sort(arr):\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr"}
{"instruction":"Can you create a python program that returns the index of an item in a given array of numbers?","input":"arr = [1,2,3,4,5,6]\nitem = 5","output":"def getIndex(arr, item):\n    for i in range(len(arr)):\n        if arr[i] == item:\n            return i\n    return -1\n\narr = [1,2,3,4,5,6]\nitem = 5\nindex = getIndex(arr, item)\nprint('Index of', item, 'is', index) # index is 4","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you create a python program that returns the index of an item in a given array of numbers?\n\n### Input:\narr = [1,2,3,4,5,6]\nitem = 5\n\n### Output:\ndef getIndex(arr, item):\n    for i in range(len(arr)):\n        if arr[i] == item:\n            return i\n    return -1\n\narr = [1,2,3,4,5,6]\nitem = 5\nindex = getIndex(arr, item)\nprint('Index of', item, 'is', index) # index is 4"}
{"instruction":"Convert the following Python code to Java:","input":"a = 10\nb = 20\nc = a + b","output":"int a = 10;\nint b = 20; \nint c = a + b;","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following Python code to Java:\n\n### Input:\na = 10\nb = 20\nc = a + b\n\n### Output:\nint a = 10;\nint b = 20; \nint c = a + b;"}
{"instruction":"Develop a python code to find the maximum rectangle area in a given matrix of 1s and 0s.","input":"matrix = [\n    [1, 1, 0, 0],\n    [1, 1, 1, 1],\n    [1, 1, 1, 1],\n    [0, 1, 1, 0]\n]","output":"def max_rect_area(matrix):\n\n    max_area = 0\n\n    for row in range(len(matrix)):\n        for col in range(len(matrix[0])):\n\n            if matrix[row][col] == 0: # if current element is 0, skip\n                continue\n\n            # calculate the maximum possible rectangle area\n            # considering (row, col) as one of the vertices \n            min_column = len(matrix[0])\n            for r in range(row, len(matrix)):\n                min_column = min(min_column, matrix[r][col])\n\n            # calculate area of the rectangle \n            # composed of 1s belonging with these limits \n            area = min_column*(r - row + 1)\n\n            # update maximum area so far \n            max_area = max(max_area, area)\n\n    return max_area\n\n# Main Program \nmatrix = [\n    [1, 1, 0, 0],\n    [1, 1, 1, 1],\n    [1, 1, 1, 1],\n    [0, 1, 1, 0]\n]\nresult = max_rect_area(matrix) \n\nprint(\"The maximum rectangle area is {:d}\".format(result))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python code to find the maximum rectangle area in a given matrix of 1s and 0s.\n\n### Input:\nmatrix = [\n    [1, 1, 0, 0],\n    [1, 1, 1, 1],\n    [1, 1, 1, 1],\n    [0, 1, 1, 0]\n]\n\n### Output:\ndef max_rect_area(matrix):\n\n    max_area = 0\n\n    for row in range(len(matrix)):\n        for col in range(len(matrix[0])):\n\n            if matrix[row][col] == 0: # if current element is 0, skip\n                continue\n\n            # calculate the maximum possible rectangle area\n            # considering (row, col) as one of the vertices \n            min_column = len(matrix[0])\n            for r in range(row, len(matrix)):\n                min_column = min(min_column, matrix[r][col])\n\n            # calculate area of the rectangle \n            # composed of 1s belonging with these limits \n            area = min_column*(r - row + 1)\n\n            # update maximum area so far \n            max_area = max(max_area, area)\n\n    return max_area\n\n# Main Program \nmatrix = [\n    [1, 1, 0, 0],\n    [1, 1, 1, 1],\n    [1, 1, 1, 1],\n    [0, 1, 1, 0]\n]\nresult = max_rect_area(matrix) \n\nprint(\"The maximum rectangle area is {:d}\".format(result))"}
{"instruction":"Generate a Python script for searching for a pattern in a given text.","input":"Text: \"The cat jumped over the fence\"\nPattern: \"cat\"","output":"import re\ntext = \"The cat jumped over the fence\"\npattern = \"cat\"\nmatch = re.search(pattern, text)\nif match:\n    print(\"Pattern found!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script for searching for a pattern in a given text.\n\n### Input:\nText: \"The cat jumped over the fence\"\nPattern: \"cat\"\n\n### Output:\nimport re\ntext = \"The cat jumped over the fence\"\npattern = \"cat\"\nmatch = re.search(pattern, text)\nif match:\n    print(\"Pattern found!\")"}
{"instruction":"Can you provide a Python code snippet to count the number of words in the given text?","input":"Text: Today it is a beautiful day.","output":"text = \"Today it is a beautiful day.\"\nwords = text.split()\nprint(\"Number of words in the given text:\", len(words))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you provide a Python code snippet to count the number of words in the given text?\n\n### Input:\nText: Today it is a beautiful day.\n\n### Output:\ntext = \"Today it is a beautiful day.\"\nwords = text.split()\nprint(\"Number of words in the given text:\", len(words))"}
{"instruction":"Modify the existing python program to fulfill the following purpose","input":"Given a list of strings, find and print the most frequent string in the list.","output":"def most_frequent(lst):\n    max = 0\n    frequent = lst[0]\n    for item in lst:\n        freq = lst.count(item)\n        if freq > max:\n            max = freq\n            frequent = item\n    return frequent","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the existing python program to fulfill the following purpose\n\n### Input:\nGiven a list of strings, find and print the most frequent string in the list.\n\n### Output:\ndef most_frequent(lst):\n    max = 0\n    frequent = lst[0]\n    for item in lst:\n        freq = lst.count(item)\n        if freq > max:\n            max = freq\n            frequent = item\n    return frequent"}
{"instruction":"Create a web scraper in Python using the BeautifulSoup library. The scraper should be able to extract data from a given website in HTML format.","input":"The website URL is https:\/\/www.example.com.","output":"import requests\nfrom bs4 import BeautifulSoup\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get('https:\/\/www.example.com').text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# Scrape the data\ndata = soup.find_all(...)\n\n# Extract the data\nfor item in data:\n    # Extract item properties\n    item_text = item.text\n    item_attrs = item.attrs\n    # ...","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python using the BeautifulSoup library. The scraper should be able to extract data from a given website in HTML format.\n\n### Input:\nThe website URL is https:\/\/www.example.com.\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get('https:\/\/www.example.com').text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# Scrape the data\ndata = soup.find_all(...)\n\n# Extract the data\nfor item in data:\n    # Extract item properties\n    item_text = item.text\n    item_attrs = item.attrs\n    # ..."}
{"instruction":"Create an object-oriented Python program to calculate the area of a triangle given the lengths of its three sides.","input":"Not applicable","output":"class Triangle:\n def __init__(self, a, b, c):\n self.a = a\n self.b = b\n self.c = c\n\n def area(self):\n # Heron's Formula\n s = (self.a + self.b + self.c) \/ 2\n return (s*(s-self.a)*(s-self.b)*(s-self.c)) ** 0.5\n\ntriangle = Triangle(3, 4, 5)\nprint(triangle.area())\n# Output: 6.0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an object-oriented Python program to calculate the area of a triangle given the lengths of its three sides.\n\n### Input:\nNot applicable\n\n### Output:\nclass Triangle:\n def __init__(self, a, b, c):\n self.a = a\n self.b = b\n self.c = c\n\n def area(self):\n # Heron's Formula\n s = (self.a + self.b + self.c) \/ 2\n return (s*(s-self.a)*(s-self.b)*(s-self.c)) ** 0.5\n\ntriangle = Triangle(3, 4, 5)\nprint(triangle.area())\n# Output: 6.0"}
{"instruction":"Write a Python script to print all prime numbers less than or equal to a given number.","input":"25","output":"# all prime numbers less than or equal to 25\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n\n    return True\n\n# generate list of primes\nprimes = []\nfor x in range(2, 26):\n    if is_prime(x):\n        primes.append(x)\n\n# print the list\nprint(primes)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to print all prime numbers less than or equal to a given number.\n\n### Input:\n25\n\n### Output:\n# all prime numbers less than or equal to 25\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n\n    return True\n\n# generate list of primes\nprimes = []\nfor x in range(2, 26):\n    if is_prime(x):\n        primes.append(x)\n\n# print the list\nprint(primes)"}
{"instruction":"Create a web application using Django with two models called 'User' and 'Post', where 'User' has a one-to-many relationship with 'Post'.","input":"","output":"# Create a project\ndjango-admin startproject MyProject\n\n# Create an app\npython manage.py startapp MyApp\n\n# Create the 'User' model in 'models.py'\nfrom django.db import models\n\nclass User(models.Model):\n    \n    # User fields\n    name = models.CharField(max_length=255)\n    age = models.PositiveIntegerField()\n    \n    def __str__(self):\n        return self.name\n\n# Create the 'Post' model in 'models.py'\nclass Post(models.Model):\n    \n\t# Post fields\n    title = models.CharField(max_length=255)\n    content = models.TextField()\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    \n    def __str__(self):\n        return self.title\n\n# Register the models in 'admin.py'\nfrom django.contrib import admin\n\nfrom .models import User, Post\n\nadmin.site.register(User)\nadmin.site.register(Post)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application using Django with two models called 'User' and 'Post', where 'User' has a one-to-many relationship with 'Post'.\n\n### Input:\n\n\n### Output:\n# Create a project\ndjango-admin startproject MyProject\n\n# Create an app\npython manage.py startapp MyApp\n\n# Create the 'User' model in 'models.py'\nfrom django.db import models\n\nclass User(models.Model):\n    \n    # User fields\n    name = models.CharField(max_length=255)\n    age = models.PositiveIntegerField()\n    \n    def __str__(self):\n        return self.name\n\n# Create the 'Post' model in 'models.py'\nclass Post(models.Model):\n    \n\t# Post fields\n    title = models.CharField(max_length=255)\n    content = models.TextField()\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    \n    def __str__(self):\n        return self.title\n\n# Register the models in 'admin.py'\nfrom django.contrib import admin\n\nfrom .models import User, Post\n\nadmin.site.register(User)\nadmin.site.register(Post)"}
{"instruction":"Develop a random number guessing game in Python","input":"","output":"import random \n \nnum = random.randint(1,10)\nguess = 0\nattempts = 0\n \nwhile guess != num and attempts < 3:\n    guess = int(input(\"Guess a number between 1 and 10: \"))\n    attempts += 1\n    if guess == num:\n        print(\"You guessed correctly in\", attempts, \"attempts\")\n    elif guess > num:\n        print(\"Too High\")\n    else:\n        print(\"Too Low\")\nif guess != num:    \n    print(\"You failed to guess the number\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a random number guessing game in Python\n\n### Input:\n\n\n### Output:\nimport random \n \nnum = random.randint(1,10)\nguess = 0\nattempts = 0\n \nwhile guess != num and attempts < 3:\n    guess = int(input(\"Guess a number between 1 and 10: \"))\n    attempts += 1\n    if guess == num:\n        print(\"You guessed correctly in\", attempts, \"attempts\")\n    elif guess > num:\n        print(\"Too High\")\n    else:\n        print(\"Too Low\")\nif guess != num:    \n    print(\"You failed to guess the number\")"}
{"instruction":"Optimize this Python code to run faster.","input":"def find_largest_number(numbers):\n    largest = 0\n    for n in numbers:\n        if n > largest:\n            largest = n\n    return largest","output":"def find_largest_number(numbers):\n    largest = numbers[0] \n    for n in numbers[1:]:\n        if n > largest:\n            largest = n\n    return largest","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize this Python code to run faster.\n\n### Input:\ndef find_largest_number(numbers):\n    largest = 0\n    for n in numbers:\n        if n > largest:\n            largest = n\n    return largest\n\n### Output:\ndef find_largest_number(numbers):\n    largest = numbers[0] \n    for n in numbers[1:]:\n        if n > largest:\n            largest = n\n    return largest"}
{"instruction":"Generate a syntax to input random numbers into a python program","input":"N = 10","output":"import random\n\n# Generates N random numbers\nnumbers = [random.randint(0, N) for i in range(N)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a syntax to input random numbers into a python program\n\n### Input:\nN = 10\n\n### Output:\nimport random\n\n# Generates N random numbers\nnumbers = [random.randint(0, N) for i in range(N)]"}
{"instruction":"Design an algorithm in Python to find the maximum value in a binary tree.","input":"Not applicable","output":"def max_in_tree(node):\n    if node is None:\n        return -float('inf')\n    left_max = max_in_tree(node.left)\n    right_max = max_in_tree(node.right)\n    return max(node.value, left_max, right_max)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to find the maximum value in a binary tree.\n\n### Input:\nNot applicable\n\n### Output:\ndef max_in_tree(node):\n    if node is None:\n        return -float('inf')\n    left_max = max_in_tree(node.left)\n    right_max = max_in_tree(node.right)\n    return max(node.value, left_max, right_max)"}
{"instruction":"Create a program in Python that takes an array of integers and returns a new array with each element multiplied by its index.","input":"[6, 3, 10, 4]","output":"def multiply_by_index(numbers):\n    for i in range(len(numbers)):\n        numbers[i] *= i\n    return numbers","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes an array of integers and returns a new array with each element multiplied by its index.\n\n### Input:\n[6, 3, 10, 4]\n\n### Output:\ndef multiply_by_index(numbers):\n    for i in range(len(numbers)):\n        numbers[i] *= i\n    return numbers"}
{"instruction":"In Python, write a function that takes two strings as inputs and outputs the number of ways of transforming one string into another, using only one letter replacement at a time.","input":"start word: hello \nend word: world","output":"def replacement_transformations(start, end):\n  # prepare an empty 2D array\n  matrix = [[0 for i in range(len(end))] for j in range(len(start))]\n  \n  # fill the top row with 1s\n  for i in range(len(end)):\n    matrix[0][i] = 1\n  \n  # fill the leftmost column with 1s\n  for i in range(len(start)):\n    matrix[i][0] = 1\n  \n  # fill the remaining cells with the number of transformations possible\n  for i in range(1, len(start)):\n    for j in range(1, len(end)):\n      if start[i] == end[j]:\n        matrix[i][j] = matrix[i-1][j-1]\n      else:\n        matrix[i][j] = matrix[i-1][j] + matrix[i][j-1]\n  \n  # return the bottom right cell of the matrix\n  return matrix[len(start)-1][len(end)-1]\n\n# test the function\nresult = replacement_transformations('hello', 'world')  # result will be 24","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, write a function that takes two strings as inputs and outputs the number of ways of transforming one string into another, using only one letter replacement at a time.\n\n### Input:\nstart word: hello \nend word: world\n\n### Output:\ndef replacement_transformations(start, end):\n  # prepare an empty 2D array\n  matrix = [[0 for i in range(len(end))] for j in range(len(start))]\n  \n  # fill the top row with 1s\n  for i in range(len(end)):\n    matrix[0][i] = 1\n  \n  # fill the leftmost column with 1s\n  for i in range(len(start)):\n    matrix[i][0] = 1\n  \n  # fill the remaining cells with the number of transformations possible\n  for i in range(1, len(start)):\n    for j in range(1, len(end)):\n      if start[i] == end[j]:\n        matrix[i][j] = matrix[i-1][j-1]\n      else:\n        matrix[i][j] = matrix[i-1][j] + matrix[i][j-1]\n  \n  # return the bottom right cell of the matrix\n  return matrix[len(start)-1][len(end)-1]\n\n# test the function\nresult = replacement_transformations('hello', 'world')  # result will be 24"}
{"instruction":"Write a python code to calculate the square of any given number.","input":"num = 5","output":"\"\"\"\nCalculate the square of a given number\n\"\"\"\n\ndef square_num(num):\n    return num * num\n\nif __name__==\"__main__\":\n    num = 5\n    square = square_num(num)\n    print(\"Square of \"+str(num)+\" is \"+str(square))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to calculate the square of any given number.\n\n### Input:\nnum = 5\n\n### Output:\n\"\"\"\nCalculate the square of a given number\n\"\"\"\n\ndef square_num(num):\n    return num * num\n\nif __name__==\"__main__\":\n    num = 5\n    square = square_num(num)\n    print(\"Square of \"+str(num)+\" is \"+str(square))"}
{"instruction":"Create a class in Python that allows for a linked list of strings.","input":"","output":"class Node:\n def __init__(self, data):\n self.data = data\n self.next = None\n\nclass LinkedList:\n def __init__(self):\n self.head = None\n\ndef append(self, new_data):\n new_node = Node(new_data)\n if self.head == None:\n self.head = new_node\n return\n last = self.head\n while last.next:\n last = last.next\n last.next = new_node","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that allows for a linked list of strings.\n\n### Input:\n\n\n### Output:\nclass Node:\n def __init__(self, data):\n self.data = data\n self.next = None\n\nclass LinkedList:\n def __init__(self):\n self.head = None\n\ndef append(self, new_data):\n new_node = Node(new_data)\n if self.head == None:\n self.head = new_node\n return\n last = self.head\n while last.next:\n last = last.next\n last.next = new_node"}
{"instruction":"Solve the following problem using python","input":"Given a list of strings, return a list of string where each string is replaced by its length","output":"def replace_by_length(list_of_strings):\n    final_list = []\n    for string in list_of_strings:\n        final_list.append(len(string))\n    return final_list\n\nif __name__ == \"__main__\":\n    list_of_strings = [\"hello\", \"world\", \"coding\"]\n    print(replace_by_length(list_of_strings))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSolve the following problem using python\n\n### Input:\nGiven a list of strings, return a list of string where each string is replaced by its length\n\n### Output:\ndef replace_by_length(list_of_strings):\n    final_list = []\n    for string in list_of_strings:\n        final_list.append(len(string))\n    return final_list\n\nif __name__ == \"__main__\":\n    list_of_strings = [\"hello\", \"world\", \"coding\"]\n    print(replace_by_length(list_of_strings))"}
{"instruction":"Write a function in Python that will take two inputs, an array of strings and a letter, and returns the number of elements in the array that contain the given letter.","input":"['cat', 'dog', 'fish','apple']\nletter: 'a'","output":"def count_elements_with_letter(arr,letter):\n   count = 0\n   for a in arr:\n      if letter in a:\n         count += 1 \n   \n   return count \n\ncount_elements_with_letter(['cat','dog','fish','apple'], 'a')\n# output: 3","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that will take two inputs, an array of strings and a letter, and returns the number of elements in the array that contain the given letter.\n\n### Input:\n['cat', 'dog', 'fish','apple']\nletter: 'a'\n\n### Output:\ndef count_elements_with_letter(arr,letter):\n   count = 0\n   for a in arr:\n      if letter in a:\n         count += 1 \n   \n   return count \n\ncount_elements_with_letter(['cat','dog','fish','apple'], 'a')\n# output: 3"}
{"instruction":"Generate a Python code snippet to compute the sum of the digits of a given number.","input":"","output":"def sum_digits(num):\n    summation = 0\n    while num > 0:\n        summation += num % 10\n        num = num \/\/ 10\n    return summation","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code snippet to compute the sum of the digits of a given number.\n\n### Input:\n\n\n### Output:\ndef sum_digits(num):\n    summation = 0\n    while num > 0:\n        summation += num % 10\n        num = num \/\/ 10\n    return summation"}
{"instruction":"Write a Python program to generate a list that contains the first 10 fibonacci numbers.","input":"","output":"# Initialize a list\nfibonacci_numbers = [1, 1]\n\n# Generate the first 10 fibonacci numbers\nfor i in range(2, 10):\n    fibonacci_numbers.append(fibonacci_numbers[i - 1] + fibonacci_numbers[i - 2])\n\nprint(fibonacci_numbers)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a list that contains the first 10 fibonacci numbers.\n\n### Input:\n\n\n### Output:\n# Initialize a list\nfibonacci_numbers = [1, 1]\n\n# Generate the first 10 fibonacci numbers\nfor i in range(2, 10):\n    fibonacci_numbers.append(fibonacci_numbers[i - 1] + fibonacci_numbers[i - 2])\n\nprint(fibonacci_numbers)"}
{"instruction":"Create a function to normalize a given string using Python.","input":"\"Hello, World!\"","output":"def normalize_string(s):\n    return s.lower().strip()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to normalize a given string using Python.\n\n### Input:\n\"Hello, World!\"\n\n### Output:\ndef normalize_string(s):\n    return s.lower().strip()"}
{"instruction":"Construct a program with Python for calculating the average of the numbers in a given list","input":"","output":"\"\"\"\nConstruct a program with Python for calculating the average of the numbers in a given list\n\"\"\"\n\ndef calculate_average(numbers):\n    # Calculate the sum of the numbers\n    total_sum = 0 \n    for n in numbers:\n        total_sum += n\n\n    # Calculate the average of the numbers\n    average = total_sum\/len(numbers)\n    return average\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5]\n    print(f'The average of the numbers in the list is: {calculate_average(numbers)}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program with Python for calculating the average of the numbers in a given list\n\n### Input:\n\n\n### Output:\n\"\"\"\nConstruct a program with Python for calculating the average of the numbers in a given list\n\"\"\"\n\ndef calculate_average(numbers):\n    # Calculate the sum of the numbers\n    total_sum = 0 \n    for n in numbers:\n        total_sum += n\n\n    # Calculate the average of the numbers\n    average = total_sum\/len(numbers)\n    return average\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5]\n    print(f'The average of the numbers in the list is: {calculate_average(numbers)}')"}
{"instruction":"Write a Python program to fetch the current weather data from OpenWeatherMap API using GET request.","input":"","output":"import requests\n\n# API Key and location Id\napiKey = 'your_api_key'\nlocationId = 'your_location_id'\n\n# Make the request to the API\nr = requests.get('http:\/\/api.openweathermap.org\/data\/2.5\/weather?id='+locationId+'&appid='+apiKey)\n\n# Get the data\ndata = r.json()\n\n# Print the data\nprint(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to fetch the current weather data from OpenWeatherMap API using GET request.\n\n### Input:\n\n\n### Output:\nimport requests\n\n# API Key and location Id\napiKey = 'your_api_key'\nlocationId = 'your_location_id'\n\n# Make the request to the API\nr = requests.get('http:\/\/api.openweathermap.org\/data\/2.5\/weather?id='+locationId+'&appid='+apiKey)\n\n# Get the data\ndata = r.json()\n\n# Print the data\nprint(data)"}
{"instruction":"Create a loop in Python that prints out a list of numbers from 1 to 10 multiplied by 3.","input":"","output":"for i in range(1, 11):\n    print(i * 3)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a loop in Python that prints out a list of numbers from 1 to 10 multiplied by 3.\n\n### Input:\n\n\n### Output:\nfor i in range(1, 11):\n    print(i * 3)"}
{"instruction":"Generate a python list comprehension to square each item in the list.","input":"alist = [1, 2, 3, 4]","output":"[i**2 for i in alist]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python list comprehension to square each item in the list.\n\n### Input:\nalist = [1, 2, 3, 4]\n\n### Output:\n[i**2 for i in alist]"}
{"instruction":"Create a function in Python that takes two dates as parameters and calculates the number of days between them.","input":"","output":"def date_difference(date1, date2):\n    diff = date2 - date1\n    return diff.days","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two dates as parameters and calculates the number of days between them.\n\n### Input:\n\n\n### Output:\ndef date_difference(date1, date2):\n    diff = date2 - date1\n    return diff.days"}
{"instruction":"Generate a Python class for a Person object with attributes for name, age, height, and weight.","input":"Not applicable","output":"class Person:\n def __init__(self, name, age, height, weight):\n self.name = name\n self.age = age\n self.height = height\n self.weight = weight\n \n def get_info(self):\n return f'Name: {self.name}, Age: {self.age}, Height: {self.height}, Weight: {self.weight}'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class for a Person object with attributes for name, age, height, and weight.\n\n### Input:\nNot applicable\n\n### Output:\nclass Person:\n def __init__(self, name, age, height, weight):\n self.name = name\n self.age = age\n self.height = height\n self.weight = weight\n \n def get_info(self):\n return f'Name: {self.name}, Age: {self.age}, Height: {self.height}, Weight: {self.weight}'"}
{"instruction":"Develop a classifier in Python to predict whether a person is male or female based on the height, weight, and shoe size.","input":"Height: 6 foot\nWeight: 170 lbs\nShoe Size: 9","output":"from sklearn import tree\n\n# [Height, Weight, Shoe Size]\ndata = [[6, 170, 9], [5.5, 150, 6], [5.7, 160, 8], [5.9, 180, 10]]\ntarget = ['male', 'female', 'female', 'male']\n\nclf = tree.DecisionTreeClassifier()\nclf.fit(data, target)\n\nheight = 6\nweight = 170\nshoe_size = 9\n\npredict = clf.predict([[height, weight, shoe_size]])\n\nif predict == 'male':\n    print('Male')\nelif predict == 'female':\n    print('Female')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a classifier in Python to predict whether a person is male or female based on the height, weight, and shoe size.\n\n### Input:\nHeight: 6 foot\nWeight: 170 lbs\nShoe Size: 9\n\n### Output:\nfrom sklearn import tree\n\n# [Height, Weight, Shoe Size]\ndata = [[6, 170, 9], [5.5, 150, 6], [5.7, 160, 8], [5.9, 180, 10]]\ntarget = ['male', 'female', 'female', 'male']\n\nclf = tree.DecisionTreeClassifier()\nclf.fit(data, target)\n\nheight = 6\nweight = 170\nshoe_size = 9\n\npredict = clf.predict([[height, weight, shoe_size]])\n\nif predict == 'male':\n    print('Male')\nelif predict == 'female':\n    print('Female')"}
{"instruction":"Implement a function in Python to find the maximum subarray of a given array of integers. The maximum subarray is the contiguous subarray whose sum of elements is greatest.","input":"array = [-2, -3, 4, -1, -2, 1, 5, -3]","output":"def maximum_subarray(arr): \n max_so_far = 0\n max_ending_here = 0\n\n for i in arr: \n max_ending_here = max_ending_here + i \n if max_ending_here % 0: \n max_ending_here = 0\n elif max_so_far < max_ending_here: \n max_so_far = max_ending_here \n return max_so_far\n\nmaximum_subarray(array)  # Returns 7","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python to find the maximum subarray of a given array of integers. The maximum subarray is the contiguous subarray whose sum of elements is greatest.\n\n### Input:\narray = [-2, -3, 4, -1, -2, 1, 5, -3]\n\n### Output:\ndef maximum_subarray(arr): \n max_so_far = 0\n max_ending_here = 0\n\n for i in arr: \n max_ending_here = max_ending_here + i \n if max_ending_here % 0: \n max_ending_here = 0\n elif max_so_far < max_ending_here: \n max_so_far = max_ending_here \n return max_so_far\n\nmaximum_subarray(array)  # Returns 7"}
{"instruction":"Create a web scraper in Python to extract information from a website. The scraper should find all the links in the given webpage and store them in a list.","input":"https:\/\/www.example.com","output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.example.com'\nresponse = requests.get(url)\nhtml = response.content\nsoup = BeautifulSoup(html, 'html5lib')\n\nlinks = []\nfor link in soup.find_all('a', href=True):\n links.append(link['href'])\n \nprint(links)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python to extract information from a website. The scraper should find all the links in the given webpage and store them in a list.\n\n### Input:\nhttps:\/\/www.example.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.example.com'\nresponse = requests.get(url)\nhtml = response.content\nsoup = BeautifulSoup(html, 'html5lib')\n\nlinks = []\nfor link in soup.find_all('a', href=True):\n links.append(link['href'])\n \nprint(links)"}
{"instruction":"Create a Python program that prints out a multiplication table for any number.","input":"","output":"def computeTable(num):\n  # Print the header row\n  print(\"   \", end=\"\")\n  for colNum in range(1, 11):\n    print(f\"{colNum:4}\", end=\"\")\n  print()\n  \n  # Print each row\n  for rowNum in range(1, 11):\n    print(f\"{rowNum:3} \", end=\"\")\n    for colNum in range(1, 11):\n      # Compute and print the product\n      product = rowNum * colNum\n      print(f\"{product:4}\", end=\"\")\n    print()\n\nnum = 6\ncomputeTable(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that prints out a multiplication table for any number.\n\n### Input:\n\n\n### Output:\ndef computeTable(num):\n  # Print the header row\n  print(\"   \", end=\"\")\n  for colNum in range(1, 11):\n    print(f\"{colNum:4}\", end=\"\")\n  print()\n  \n  # Print each row\n  for rowNum in range(1, 11):\n    print(f\"{rowNum:3} \", end=\"\")\n    for colNum in range(1, 11):\n      # Compute and print the product\n      product = rowNum * colNum\n      print(f\"{product:4}\", end=\"\")\n    print()\n\nnum = 6\ncomputeTable(num)"}
{"instruction":"Create a program in Python to normalize a given input string.","input":"input_string = \"david_Xq3r5\"","output":"import re \n\ndef normalize_string(input_string): \n  ## convert to lowercase \n  normalized_string = input_string.lower() \n  \n  ## remove special characters \n  normalized_string = re.sub(\"[^a-z0-9]\", \"\", normalized_string) \n  \n  ## return the normalized string\n  return normalized_string\n\nnormalized_string = normalize_string(input_string) \nprint(normalized_string) # davidxq35","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to normalize a given input string.\n\n### Input:\ninput_string = \"david_Xq3r5\"\n\n### Output:\nimport re \n\ndef normalize_string(input_string): \n  ## convert to lowercase \n  normalized_string = input_string.lower() \n  \n  ## remove special characters \n  normalized_string = re.sub(\"[^a-z0-9]\", \"\", normalized_string) \n  \n  ## return the normalized string\n  return normalized_string\n\nnormalized_string = normalize_string(input_string) \nprint(normalized_string) # davidxq35"}
{"instruction":"Implement a Principal Component Analysis algorithm in Python.","input":"","output":"from sklearn.decomposition import PCA\npca = PCA()\npca.fit(X)\nX_pca = pca.transform(X)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Principal Component Analysis algorithm in Python.\n\n### Input:\n\n\n### Output:\nfrom sklearn.decomposition import PCA\npca = PCA()\npca.fit(X)\nX_pca = pca.transform(X)"}
{"instruction":"Create a Python program that wraps a function with a given input sequence and prints out the output of the function.","input":"def my_function(x):\n return x * x\n\nsequence = [1, 2, 3, 4, 5]","output":"def wrapped(f, seq):\n    for x in seq:\n        print(f(x))\n\ndef my_function(x):\n    return x * x\n\nsequence = [1, 2, 3, 4, 5]\n\nwrapped(my_function, sequence)\n\n# Output: \n1\n4\n9\n16\n25","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that wraps a function with a given input sequence and prints out the output of the function.\n\n### Input:\ndef my_function(x):\n return x * x\n\nsequence = [1, 2, 3, 4, 5]\n\n### Output:\ndef wrapped(f, seq):\n    for x in seq:\n        print(f(x))\n\ndef my_function(x):\n    return x * x\n\nsequence = [1, 2, 3, 4, 5]\n\nwrapped(my_function, sequence)\n\n# Output: \n1\n4\n9\n16\n25"}
{"instruction":"Write a Python program to identify the words with the highest frequency in a given text.","input":"At home, the clock ticks and the foot of the stairs","output":"def most_frequent_words(text):\n    # Split the text into words\n    words = text.split() \n    # Create an empty dictionary\n    word_counter = {}\n    \n    # Iterate through each word in the list of words\n    for word in words:\n        # If the word is already in the dictionary\n        if word in word_counter:\n            # Add 1 to the count of the word\n            word_counter[word] += 1 \n        else:\n            # Else, set the count of the word to 1\n            word_counter[word] = 1\n            \n    # Sort the dictionary by value\n    word_sorted = sorted(word_counter.items(), \n                         key=lambda count: count[1], \n                         reverse=True)\n    \n    # Return the words with highest frequency\n    return [word_sorted[0][0], word_sorted[1][0], \n            word_sorted[2][0]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to identify the words with the highest frequency in a given text.\n\n### Input:\nAt home, the clock ticks and the foot of the stairs\n\n### Output:\ndef most_frequent_words(text):\n    # Split the text into words\n    words = text.split() \n    # Create an empty dictionary\n    word_counter = {}\n    \n    # Iterate through each word in the list of words\n    for word in words:\n        # If the word is already in the dictionary\n        if word in word_counter:\n            # Add 1 to the count of the word\n            word_counter[word] += 1 \n        else:\n            # Else, set the count of the word to 1\n            word_counter[word] = 1\n            \n    # Sort the dictionary by value\n    word_sorted = sorted(word_counter.items(), \n                         key=lambda count: count[1], \n                         reverse=True)\n    \n    # Return the words with highest frequency\n    return [word_sorted[0][0], word_sorted[1][0], \n            word_sorted[2][0]]"}
{"instruction":"Create a Python script to calculate the interest earned on a given bank balance over 10 years.","input":"Balance: 10000\nAnnual Interest Rate: 4.4","output":"balance = 10000\ninterestRate = 4.4\n\ndef getInterestEarned(balance, interestRate):\n totalInterestEarned = 0\n for i in range(1, 11):\n  interest = balance * interestRate\/100\n  balance += interest\n  totalInterestEarned += interest\n return totalInterestEarned\n\ninterestEarned = getInterestEarned(balance, interestRate)\n\nprint(\"Total interest earned in 10 years: \" + str(interestEarned))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to calculate the interest earned on a given bank balance over 10 years.\n\n### Input:\nBalance: 10000\nAnnual Interest Rate: 4.4\n\n### Output:\nbalance = 10000\ninterestRate = 4.4\n\ndef getInterestEarned(balance, interestRate):\n totalInterestEarned = 0\n for i in range(1, 11):\n  interest = balance * interestRate\/100\n  balance += interest\n  totalInterestEarned += interest\n return totalInterestEarned\n\ninterestEarned = getInterestEarned(balance, interestRate)\n\nprint(\"Total interest earned in 10 years: \" + str(interestEarned))"}
{"instruction":"Write a correct Python program to extract all words from a given sentence which have 4 or more characters.","input":"my_sentence = \"This is an example sentence\"","output":"def words_with_four_or_more_characters(my_sentence):\n  words = my_sentence.split(\" \")\n  four_plus_words = []\n  for word in words:\n    if len(word) >= 4:\n      four_plus_words.append(word)\n  return four_plus_words","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a correct Python program to extract all words from a given sentence which have 4 or more characters.\n\n### Input:\nmy_sentence = \"This is an example sentence\"\n\n### Output:\ndef words_with_four_or_more_characters(my_sentence):\n  words = my_sentence.split(\" \")\n  four_plus_words = []\n  for word in words:\n    if len(word) >= 4:\n      four_plus_words.append(word)\n  return four_plus_words"}
{"instruction":"Create a Python program to generate 10 unique and random integers.","input":"","output":"import random\n\ndef generate_random_ints():\n random_ints = []\n for _ in range(10):\n random_int = random.randint(1, 1000)\n while random_int in random_ints:\n random_int = random.randint(1, 1000)\n random_ints.append(random_int)\n return random_ints","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate 10 unique and random integers.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_random_ints():\n random_ints = []\n for _ in range(10):\n random_int = random.randint(1, 1000)\n while random_int in random_ints:\n random_int = random.randint(1, 1000)\n random_ints.append(random_int)\n return random_ints"}
{"instruction":"Write a Python code snippet to display all the items stored in a list given below.","input":"list_items = ['Apple', 'Mango', 'Banana']","output":"for item in list_items:\n    print(item)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code snippet to display all the items stored in a list given below.\n\n### Input:\nlist_items = ['Apple', 'Mango', 'Banana']\n\n### Output:\nfor item in list_items:\n    print(item)"}
{"instruction":"Take the list of people below and create a Python dictionary with the names as keys and the ages as values.","input":"John (20), Jane (40), Alex (18), Peter (45)","output":"people_dict = {'John': 20, 'Jane': 40, 'Alex': 18, 'Peter': 45}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTake the list of people below and create a Python dictionary with the names as keys and the ages as values.\n\n### Input:\nJohn (20), Jane (40), Alex (18), Peter (45)\n\n### Output:\npeople_dict = {'John': 20, 'Jane': 40, 'Alex': 18, 'Peter': 45}"}
{"instruction":"Write python code to detect a palindrome","input":"word = \"noon\"","output":"def is_palindrome(word):\n    # reverse the string \n    rev = word[::-1]  \n  \n    # check if the string is equal to its reverse    \n    if word == rev: \n        return True\n    return False\n\nis_palindrome(\"noon\") # returns True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite python code to detect a palindrome\n\n### Input:\nword = \"noon\"\n\n### Output:\ndef is_palindrome(word):\n    # reverse the string \n    rev = word[::-1]  \n  \n    # check if the string is equal to its reverse    \n    if word == rev: \n        return True\n    return False\n\nis_palindrome(\"noon\") # returns True"}
{"instruction":"Construct a function in Python to remove all the vowels from a given sentence.","input":"","output":"def remove_vowels(phrase): \n  vowels = ['a','e','i','o','u'] \n  return ''.join([c for c in phrase if c not in vowels])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function in Python to remove all the vowels from a given sentence.\n\n### Input:\n\n\n### Output:\ndef remove_vowels(phrase): \n  vowels = ['a','e','i','o','u'] \n  return ''.join([c for c in phrase if c not in vowels])"}
{"instruction":"Write a Python program to calculate the sum of the digits of a given number.","input":"","output":"def sum_of_digits(n): \n  \n   sum = 0\n  \n   # Separate the digits of the number  \n   while n > 0: \n      digit = n % 10\n      sum += digit\n      n \/\/= 10\n  \n   return sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the sum of the digits of a given number.\n\n### Input:\n\n\n### Output:\ndef sum_of_digits(n): \n  \n   sum = 0\n  \n   # Separate the digits of the number  \n   while n > 0: \n      digit = n % 10\n      sum += digit\n      n \/\/= 10\n  \n   return sum"}
{"instruction":"Generate a Python 3 program to find out the highest common factor of two numbers.","input":"60 and 80","output":"def find_hcf(x, y): \n  \n    if x > y: \n        smaller = y \n    else: \n        smaller = x \n    for i in range(1,smaller + 1): \n        if((x % i == 0) and (y % i == 0)): \n            hcf = i \n              \n    return hcf \n      \nx = 60\ny = 80\n\nhcf = find_hcf(x, y) \nprint(\"The Highest Common Factor of\", x,\"and\", y,\"is\", hcf)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python 3 program to find out the highest common factor of two numbers.\n\n### Input:\n60 and 80\n\n### Output:\ndef find_hcf(x, y): \n  \n    if x > y: \n        smaller = y \n    else: \n        smaller = x \n    for i in range(1,smaller + 1): \n        if((x % i == 0) and (y % i == 0)): \n            hcf = i \n              \n    return hcf \n      \nx = 60\ny = 80\n\nhcf = find_hcf(x, y) \nprint(\"The Highest Common Factor of\", x,\"and\", y,\"is\", hcf)"}
{"instruction":"Edit this Python code to raise an error if the length of the list less than 3","input":"def check_list_length(lists):\n    if len(lists) > 3:\n        return True\n    else:\n        return False","output":"def check_list_length(lists):\n    if len(lists) > 3:\n        return True\n    else:\n        raise ValueError(\"list length should be more than 3\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit this Python code to raise an error if the length of the list less than 3\n\n### Input:\ndef check_list_length(lists):\n    if len(lists) > 3:\n        return True\n    else:\n        return False\n\n### Output:\ndef check_list_length(lists):\n    if len(lists) > 3:\n        return True\n    else:\n        raise ValueError(\"list length should be more than 3\")"}
{"instruction":"Design an algorithm in Python to solve the Fibonacci numbers problem.","input":"Not applicable","output":"def fib(n):\n  # Base cases\n  if n <= 0:\n    return 0\n  elif n == 1:\n    return 1\n  # Recursive case\n  else:\n    return fib(n-1) + fib(n-2)\n\n# Generating Fibonacci numbers\nfor i in range(11):\n  print(fib(i))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to solve the Fibonacci numbers problem.\n\n### Input:\nNot applicable\n\n### Output:\ndef fib(n):\n  # Base cases\n  if n <= 0:\n    return 0\n  elif n == 1:\n    return 1\n  # Recursive case\n  else:\n    return fib(n-1) + fib(n-2)\n\n# Generating Fibonacci numbers\nfor i in range(11):\n  print(fib(i))"}
{"instruction":"Develop a Python program that calculates the mean of list of numbers.","input":"[1, 5, 2, 4, 9]","output":"def calculate_mean(nums):\n    total = 0\n    for n in nums:\n        total += n\n    mean = total \/ len(nums)\n    return mean\n\nmean = calculate_mean([1, 5, 2, 4, 9])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that calculates the mean of list of numbers.\n\n### Input:\n[1, 5, 2, 4, 9]\n\n### Output:\ndef calculate_mean(nums):\n    total = 0\n    for n in nums:\n        total += n\n    mean = total \/ len(nums)\n    return mean\n\nmean = calculate_mean([1, 5, 2, 4, 9])"}
{"instruction":"Given a list of student information, design a Python program to compute the total number of As, Bs, Cs and Ds received by each student.","input":"[{\"name\": \"John\", \"scores\": [90, 91, 88, 85]}, \n{\"name\": \"Jane\", \"scores\": [87, 84, 90, 83]}]","output":"def get_grade_counts(student_info):\n    scores_by_grade = {\n        \"As\": 0,\n        \"Bs\": 0,\n        \"Cs\": 0,\n        \"Ds\": 0\n    }\n\n    for student in student_info:\n        for score in student[\"scores\"]:\n            if score >= 90:\n                scores_by_grade[\"As\"] += 1\n            elif score >= 80:\n                scores_by_grade[\"Bs\"] += 1\n            elif score >= 70:\n                scores_by_grade[\"Cs\"] += 1\n            else:\n                scores_by_grade[\"Ds\"] += 1\n\n    return scores_by_grade","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of student information, design a Python program to compute the total number of As, Bs, Cs and Ds received by each student.\n\n### Input:\n[{\"name\": \"John\", \"scores\": [90, 91, 88, 85]}, \n{\"name\": \"Jane\", \"scores\": [87, 84, 90, 83]}]\n\n### Output:\ndef get_grade_counts(student_info):\n    scores_by_grade = {\n        \"As\": 0,\n        \"Bs\": 0,\n        \"Cs\": 0,\n        \"Ds\": 0\n    }\n\n    for student in student_info:\n        for score in student[\"scores\"]:\n            if score >= 90:\n                scores_by_grade[\"As\"] += 1\n            elif score >= 80:\n                scores_by_grade[\"Bs\"] += 1\n            elif score >= 70:\n                scores_by_grade[\"Cs\"] += 1\n            else:\n                scores_by_grade[\"Ds\"] += 1\n\n    return scores_by_grade"}
{"instruction":"Implement a genetic algorithm in Python that finds a solution to a given mathematical expression.","input":"find x in equation x^2 - 3x - 10 = 0","output":"import random\n \n# target equation\nexpression = lambda x: x**2 - 3*x - 10\n \n# population size of 40 solutions\npopSize = 40\n \n# starting range\nxRange = (-10, 10)\n \n# mutation rate\nmRate = 0.01\n \n# generate randomly the population\npopulation = [random.uniform(*xRange) for _ in range(popSize)]\n \n# fitness function\ndef fitness(expression, population):\n \n # loop through population and calculate fitness\n for i in range(len(population)):\n x = population[i]\n population[i] = (x, expression(x))\n \n # sort by fitness\n population = [i[1] for i in sorted(population, key=lambda x : x[1])]\n return population\n \n# initialize best score ever\nbestScore = float('inf')\n \n# genetic algorithm\nwhile True:\n # calculate fitness scores\n scores = fitness(expression, population)\n \n # get the best score of this population\n if scores[0] < bestScore:\n bestScore = scores[0]\n bestSolution = population[0]\n \n # print the best solution and score\n print(\"Best solution : {}\\n Best score: {}\".format(bestSolution, bestScore))\n \n # generate a new population\n newPopulation = []\n \n # add the best performing solutions from previous gen\n newPopulation.extend(population[:5])\n \n # loop through the population size\n while len(newPopulation)<popSize:\n \n # randomly select 2 parents\n parent1 = random.choice(population[:10])\n parent2 = random.choice(population[:10])\n \n # generate a child by crossover of parents\n child = (parent1 + parent2)\/2\n \n # randomly mutate the child\n if random.random() < mRate:\n child += random.random() * 5\n \n # add the child to the new population\n newPopulation.append(child)\n \n # set the new population\n population = newPopulation","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a genetic algorithm in Python that finds a solution to a given mathematical expression.\n\n### Input:\nfind x in equation x^2 - 3x - 10 = 0\n\n### Output:\nimport random\n \n# target equation\nexpression = lambda x: x**2 - 3*x - 10\n \n# population size of 40 solutions\npopSize = 40\n \n# starting range\nxRange = (-10, 10)\n \n# mutation rate\nmRate = 0.01\n \n# generate randomly the population\npopulation = [random.uniform(*xRange) for _ in range(popSize)]\n \n# fitness function\ndef fitness(expression, population):\n \n # loop through population and calculate fitness\n for i in range(len(population)):\n x = population[i]\n population[i] = (x, expression(x))\n \n # sort by fitness\n population = [i[1] for i in sorted(population, key=lambda x : x[1])]\n return population\n \n# initialize best score ever\nbestScore = float('inf')\n \n# genetic algorithm\nwhile True:\n # calculate fitness scores\n scores = fitness(expression, population)\n \n # get the best score of this population\n if scores[0] < bestScore:\n bestScore = scores[0]\n bestSolution = population[0]\n \n # print the best solution and score\n print(\"Best solution : {}\\n Best score: {}\".format(bestSolution, bestScore))\n \n # generate a new population\n newPopulation = []\n \n # add the best performing solutions from previous gen\n newPopulation.extend(population[:5])\n \n # loop through the population size\n while len(newPopulation)<popSize:\n \n # randomly select 2 parents\n parent1 = random.choice(population[:10])\n parent2 = random.choice(population[:10])\n \n # generate a child by crossover of parents\n child = (parent1 + parent2)\/2\n \n # randomly mutate the child\n if random.random() < mRate:\n child += random.random() * 5\n \n # add the child to the new population\n newPopulation.append(child)\n \n # set the new population\n population = newPopulation"}
{"instruction":"Create a program in Python to check if a given list is a subsequence of another given list","input":"[1,2,3,4], [1,2,5,6,7,3,4]","output":"def is_subsequence(sub_list, main_list):\n    i, j = 0, 0\n    n1, n2 = len(sub_list), len(main_list)\n    while i < n1 and j < n2:\n        if sub_list[i] == main_list[j]:\n            i += 1\n        j += 1\n    return i == n1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to check if a given list is a subsequence of another given list\n\n### Input:\n[1,2,3,4], [1,2,5,6,7,3,4]\n\n### Output:\ndef is_subsequence(sub_list, main_list):\n    i, j = 0, 0\n    n1, n2 = len(sub_list), len(main_list)\n    while i < n1 and j < n2:\n        if sub_list[i] == main_list[j]:\n            i += 1\n        j += 1\n    return i == n1"}
{"instruction":"Using a Greedy algorithm, write a program in Python that takes in a list of tasks with varying completion times and returns the order in which the tasks should be completed to achieve the overall minimum completion time.","input":"Tasks - T1 (5 minutes), T2 (8 minutes), T3 (2 minutes), T4 (9 minutes)","output":"# Greedy Algorithm to find minimum completion time\ndef find_min_completion_time(tasks):\n completed_tasks = []\n total_time = 0\n \n while len(tasks) > 0:\n # Find the task with the minimum completion time \n min_time = min(tasks, key=lambda x:x[1])\n completed_tasks.append(min_time[0])\n total_time += min_time[1]\n \n # remove the task from the list of tasks\n tasks.remove(min_time)\n \n return (completed_tasks, total_time)\n \ntasks = [('T1', 5), ('T2', 8), ('T3', 2), ('T4', 9)]\nresult = find_min_completion_time(tasks)\nprint('Order of tasks: ', result[0])\nprint('Minimum Completion time: ', result[1])\n\n# Output\n# Order of tasks: ['T3', 'T1', 'T2', 'T4']\n# Minimum Completion time: 24","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing a Greedy algorithm, write a program in Python that takes in a list of tasks with varying completion times and returns the order in which the tasks should be completed to achieve the overall minimum completion time.\n\n### Input:\nTasks - T1 (5 minutes), T2 (8 minutes), T3 (2 minutes), T4 (9 minutes)\n\n### Output:\n# Greedy Algorithm to find minimum completion time\ndef find_min_completion_time(tasks):\n completed_tasks = []\n total_time = 0\n \n while len(tasks) > 0:\n # Find the task with the minimum completion time \n min_time = min(tasks, key=lambda x:x[1])\n completed_tasks.append(min_time[0])\n total_time += min_time[1]\n \n # remove the task from the list of tasks\n tasks.remove(min_time)\n \n return (completed_tasks, total_time)\n \ntasks = [('T1', 5), ('T2', 8), ('T3', 2), ('T4', 9)]\nresult = find_min_completion_time(tasks)\nprint('Order of tasks: ', result[0])\nprint('Minimum Completion time: ', result[1])\n\n# Output\n# Order of tasks: ['T3', 'T1', 'T2', 'T4']\n# Minimum Completion time: 24"}
{"instruction":"Execute the following SQL query in a Python environment and return the result.","input":"SELECT * FROM Orders\nWHERE OrderDate > '2018-12-31'","output":"import sqlite3 \nconn = sqlite3.connect('Order.db')\nc = conn.cursor()\nc.execute(\"SELECT * FROM Orders WHERE OrderDate > '2018-12-31'\")\nresult = c.fetchall()\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExecute the following SQL query in a Python environment and return the result.\n\n### Input:\nSELECT * FROM Orders\nWHERE OrderDate > '2018-12-31'\n\n### Output:\nimport sqlite3 \nconn = sqlite3.connect('Order.db')\nc = conn.cursor()\nc.execute(\"SELECT * FROM Orders WHERE OrderDate > '2018-12-31'\")\nresult = c.fetchall()\nprint(result)"}
{"instruction":"Edit the following Python program to return true if the following string contains the word \"Hello\".","input":"def check_hello(s):","output":"def check_hello(s):\n    return 'Hello' in s","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python program to return true if the following string contains the word \"Hello\".\n\n### Input:\ndef check_hello(s):\n\n### Output:\ndef check_hello(s):\n    return 'Hello' in s"}
{"instruction":"Write a python program that takes a dictionary as input and returns a list of its values.","input":"data = {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    \"key3\": \"value3\"\n}","output":"def get_values(data):\n    \"\"\"\n    Gets the values from a dictionary.\n    \n    Args:\n        data (dict): The dictionary from which to get the values\n        \n    Returns:\n        values (list): A list of the values from the dictionary\n    \"\"\"\n    values = []\n    for value in data.values():\n        values.append(value)\n    return values\n\nif __name__ == \"__main__\":\n    data = {\n        \"key1\": \"value1\",\n        \"key2\": \"value2\",\n        \"key3\": \"value3\"\n    }\n    print(get_values(data))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that takes a dictionary as input and returns a list of its values.\n\n### Input:\ndata = {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    \"key3\": \"value3\"\n}\n\n### Output:\ndef get_values(data):\n    \"\"\"\n    Gets the values from a dictionary.\n    \n    Args:\n        data (dict): The dictionary from which to get the values\n        \n    Returns:\n        values (list): A list of the values from the dictionary\n    \"\"\"\n    values = []\n    for value in data.values():\n        values.append(value)\n    return values\n\nif __name__ == \"__main__\":\n    data = {\n        \"key1\": \"value1\",\n        \"key2\": \"value2\",\n        \"key3\": \"value3\"\n    }\n    print(get_values(data))"}
{"instruction":"Make Python program to filter out all even numbers from a given list","input":"[10, 11, 5, 16, 4, 9]","output":"def filter_even(arr):\n    result = []\n    for i in arr:\n        if i % 2 != 0:\n            result.append(i)\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake Python program to filter out all even numbers from a given list\n\n### Input:\n[10, 11, 5, 16, 4, 9]\n\n### Output:\ndef filter_even(arr):\n    result = []\n    for i in arr:\n        if i % 2 != 0:\n            result.append(i)\n    return result"}
{"instruction":"Generate a Python program for creating a tiered dictionary with nested keys and values.","input":"Not applicable","output":"def generate_dict(keys, values):\n n = len(keys)\n if n != len(values):\n  return None\n\n dct = {}\n for i in range(n):\n  dct[keys[i]] = values[i] if i == (n-1) else generate_dict(keys[:i+1], values[i])\n\n return dct\n\nkeys = [\u2018a\u2019, \u2018b\u2019, \u2018c\u2019, \u2018d\u2019]\nvalues = [1, 2, 3, 4]\nresult = generate_dict(keys, values)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program for creating a tiered dictionary with nested keys and values.\n\n### Input:\nNot applicable\n\n### Output:\ndef generate_dict(keys, values):\n n = len(keys)\n if n != len(values):\n  return None\n\n dct = {}\n for i in range(n):\n  dct[keys[i]] = values[i] if i == (n-1) else generate_dict(keys[:i+1], values[i])\n\n return dct\n\nkeys = [\u2018a\u2019, \u2018b\u2019, \u2018c\u2019, \u2018d\u2019]\nvalues = [1, 2, 3, 4]\nresult = generate_dict(keys, values)\nprint(result)"}
{"instruction":"Rewrite the following Python function without using loop.","input":"def multiply_list(l): \n\tresult = 1\n\t# Iterate through the list \n\tfor i in l: \n\t\tresult = result * i \n\treturn result","output":"def multiply_list(l): \n\tfrom functools import reduce\n\treturn reduce((lambda x, y: x * y), l)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following Python function without using loop.\n\n### Input:\ndef multiply_list(l): \n\tresult = 1\n\t# Iterate through the list \n\tfor i in l: \n\t\tresult = result * i \n\treturn result\n\n### Output:\ndef multiply_list(l): \n\tfrom functools import reduce\n\treturn reduce((lambda x, y: x * y), l)"}
{"instruction":"Create a basic Python script that takes a user input, filters out any characters that are not letters or numbers, and prints the input after filtering.","input":"This input contains \" special characters!","output":"import re\n\ninput_string = \"This input contains \\\" special characters!\"\nfiltered_string = re.sub(r'[^a-zA-Z0-9]', '', input_string)\n\nprint(filtered_string) # Output: Thisinputcontainsspecialcharacters","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Python script that takes a user input, filters out any characters that are not letters or numbers, and prints the input after filtering.\n\n### Input:\nThis input contains \" special characters!\n\n### Output:\nimport re\n\ninput_string = \"This input contains \\\" special characters!\"\nfiltered_string = re.sub(r'[^a-zA-Z0-9]', '', input_string)\n\nprint(filtered_string) # Output: Thisinputcontainsspecialcharacters"}
{"instruction":"Construct an AI model to predict stocks in Python.","input":"","output":"import pandas as pd\nimport numpy as np\nimport keras\n\n# Read the data\ndf = pd.read_csv('stocks.csv')\n\n# Extract the features and target\nfeatures = df.drop(['Name', 'symbol', 'Close'], axis=1).values\ntarget = df.Close.values\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n\n# Construct a model\nmodel = keras.Sequential([\n    keras.layers.Dense(128, activation='relu'),\n    keras.layers.Dense(32, activation='relu'),\n    keras.layers.Dense(1, activation='linear'),\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='mse',\n              metrics=['mae'])\n\n# Train model\nmodel.fit(X_train, y_train, epochs=10)\n\n# Evaluate the model\ntest_loss, test_acc = model.evaluate(X_test, y_test)\n\nprint('Test accuracy:', test_acc)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an AI model to predict stocks in Python.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nimport numpy as np\nimport keras\n\n# Read the data\ndf = pd.read_csv('stocks.csv')\n\n# Extract the features and target\nfeatures = df.drop(['Name', 'symbol', 'Close'], axis=1).values\ntarget = df.Close.values\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n\n# Construct a model\nmodel = keras.Sequential([\n    keras.layers.Dense(128, activation='relu'),\n    keras.layers.Dense(32, activation='relu'),\n    keras.layers.Dense(1, activation='linear'),\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='mse',\n              metrics=['mae'])\n\n# Train model\nmodel.fit(X_train, y_train, epochs=10)\n\n# Evaluate the model\ntest_loss, test_acc = model.evaluate(X_test, y_test)\n\nprint('Test accuracy:', test_acc)"}
{"instruction":"Create a searching algorithm in Python to find a target element in a list of integers.","input":"target = 7\nelements = [1, 2, 3, 4, 5, 6, 7, 8]","output":"def search(target, elements):\n  start = 0 \n  end = len(elements) - 1\n\n  while start <= end:\n    mid = (start + end) \/\/ 2 \n      \n    if target == elements[mid]: \n      return True \n  \n    elif target < elements[mid]: \n      end = mid - 1\n\n    else: \n      start = mid + 1\n    \n  return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a searching algorithm in Python to find a target element in a list of integers.\n\n### Input:\ntarget = 7\nelements = [1, 2, 3, 4, 5, 6, 7, 8]\n\n### Output:\ndef search(target, elements):\n  start = 0 \n  end = len(elements) - 1\n\n  while start <= end:\n    mid = (start + end) \/\/ 2 \n      \n    if target == elements[mid]: \n      return True \n  \n    elif target < elements[mid]: \n      end = mid - 1\n\n    else: \n      start = mid + 1\n    \n  return False"}
{"instruction":"Create a machine learning model using Python and the Sci-kit Learn package to predict net sales value for a company.","input":"Dataframe containing the following columns: \n- Region (categorical): the region where the company operates\n- Area (categorical): the area (urban, suburban, or rural) of the region\n- Employee Count (int): the number of employees in the company\n- Promotion (int): the amount spent on advertising and promotions\n- Price (float): the price of the products","output":"from sklearn.ensemble import RandomForestRegressor\n\nregion = pd.get_dummies(data['Region'])\narea = pd.get_dummies(data['Area'])\n\nX = data.drop(['Net Sales'], axis=1)\nX = pd.concat([X, region, area], axis=1)\n\ny = data['Net Sales']\n\nml_model = RandomForestRegressor()\nml_model.fit(X, y)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model using Python and the Sci-kit Learn package to predict net sales value for a company.\n\n### Input:\nDataframe containing the following columns: \n- Region (categorical): the region where the company operates\n- Area (categorical): the area (urban, suburban, or rural) of the region\n- Employee Count (int): the number of employees in the company\n- Promotion (int): the amount spent on advertising and promotions\n- Price (float): the price of the products\n\n### Output:\nfrom sklearn.ensemble import RandomForestRegressor\n\nregion = pd.get_dummies(data['Region'])\narea = pd.get_dummies(data['Area'])\n\nX = data.drop(['Net Sales'], axis=1)\nX = pd.concat([X, region, area], axis=1)\n\ny = data['Net Sales']\n\nml_model = RandomForestRegressor()\nml_model.fit(X, y)"}
{"instruction":"Create a Python program for calculating the area of a given triangle.","input":"float a = 5\nfloat b = 10\nfloat c = 8","output":"def triangleArea(a, b, c): \n\n    # calculate the semi-perimeter \n    s = (a + b + c) \/ 2\n\n    # calculate the area \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    return area","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for calculating the area of a given triangle.\n\n### Input:\nfloat a = 5\nfloat b = 10\nfloat c = 8\n\n### Output:\ndef triangleArea(a, b, c): \n\n    # calculate the semi-perimeter \n    s = (a + b + c) \/ 2\n\n    # calculate the area \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    return area"}
{"instruction":"Fix the following python code.","input":"def remove_vowel(string):\n    vowels = ('a', 'e', 'o', 'u')\n    for x in vowels: \n        txt = string.replace(x, \"\")\n    return txt","output":"def remove_vowel(string):\n    vowels = ('a', 'e', 'o', 'u')\n    for x in vowels: \n        string = string.replace(x, \"\")\n    return string","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFix the following python code.\n\n### Input:\ndef remove_vowel(string):\n    vowels = ('a', 'e', 'o', 'u')\n    for x in vowels: \n        txt = string.replace(x, \"\")\n    return txt\n\n### Output:\ndef remove_vowel(string):\n    vowels = ('a', 'e', 'o', 'u')\n    for x in vowels: \n        string = string.replace(x, \"\")\n    return string"}
{"instruction":"Re-write the following Python code using list comprehensions.","input":"lst = []\nfor each in range(5):\n  x = each*each\n  lst.append(x)","output":"lst=[each*each for each in range(5)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRe-write the following Python code using list comprehensions.\n\n### Input:\nlst = []\nfor each in range(5):\n  x = each*each\n  lst.append(x)\n\n### Output:\nlst=[each*each for each in range(5)]"}
{"instruction":"Create a Python program to calculate the number of times a word appears in a given sentence.","input":"sentence = \"Hello World\"\nword = \"Hello\"","output":"count = sentence.count(word)\nprint(count)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the number of times a word appears in a given sentence.\n\n### Input:\nsentence = \"Hello World\"\nword = \"Hello\"\n\n### Output:\ncount = sentence.count(word)\nprint(count)"}
{"instruction":"Write a Python program to find the minimum number of swaps needed to sort the given array in ascending order.","input":"","output":"def min_swaps(nums):\n n = len(nums)\n count = 0\n for i in range(n):\n while nums[i] != i + 1:\n swap(nums, i, nums[i] - 1)\n count += 1\n return count\n\ndef swap(nums, i, j):\n nums[i], nums[j] = nums[j], nums[i]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the minimum number of swaps needed to sort the given array in ascending order.\n\n### Input:\n\n\n### Output:\ndef min_swaps(nums):\n n = len(nums)\n count = 0\n for i in range(n):\n while nums[i] != i + 1:\n swap(nums, i, nums[i] - 1)\n count += 1\n return count\n\ndef swap(nums, i, j):\n nums[i], nums[j] = nums[j], nums[i]"}
{"instruction":"Create a class in Python that calculates the total and average of 3 numbers.","input":"","output":"class Calculator:\n    def __init__(self, num1, num2, num3):\n        self.num1 = num1\n        self.num2 = num2\n        self.num3 = num3\n\n    def total(self):\n        return self.num1 + self.num2 + self.num3\n\n    def average(self):\n        return self.total() \/ 3","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that calculates the total and average of 3 numbers.\n\n### Input:\n\n\n### Output:\nclass Calculator:\n    def __init__(self, num1, num2, num3):\n        self.num1 = num1\n        self.num2 = num2\n        self.num3 = num3\n\n    def total(self):\n        return self.num1 + self.num2 + self.num3\n\n    def average(self):\n        return self.total() \/ 3"}
{"instruction":"Create a program in Python that takes a word as an argument and print it in reverse.","input":"'Hello World'","output":"def reverse(word):\n    return word[::-1]\n\nprint(reverse('Hello World'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes a word as an argument and print it in reverse.\n\n### Input:\n'Hello World'\n\n### Output:\ndef reverse(word):\n    return word[::-1]\n\nprint(reverse('Hello World'))"}
{"instruction":"Generate a Python program to classify integers between -5 and 5 into \"negative\", \"zero\", and \"positive\".","input":"","output":"def classify_int(x):\n    if x < 0:\n        return 'negative'\n    elif x == 0: \n        return 'zero'\n    elif x > 0:\n        return 'positive'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to classify integers between -5 and 5 into \"negative\", \"zero\", and \"positive\".\n\n### Input:\n\n\n### Output:\ndef classify_int(x):\n    if x < 0:\n        return 'negative'\n    elif x == 0: \n        return 'zero'\n    elif x > 0:\n        return 'positive'"}
{"instruction":"Create a Python script to interact with a PostgreSQL database. The script should be able to add new entries to the database.","input":"Not applicable","output":"import psycopg2\n\ntry:\n connection = psycopg2.connect(\n user = \"postgres\",\n password = \"your_password\",\n host = \"localhost\",\n port = \"5432\",\n database = \"your_database\"\n )\n\n cursor = connection.cursor()\n postgreSQL_select_Query = \"select * from table_name\"\n  \n cursor.execute(postgreSQL_select_Query)\n  \n print(\"Table Before inserting a record\")\n records = cursor.fetchall() \n \n postgres_insert_query = \"\"\" INSERT INTO table_name (column_1, column_2, colum_n) VALUES (%s,%s,%s)\"\"\"\n record_to_insert = ('value1', 'value2', 'value3')\n cursor.execute(postgres_insert_query, record_to_insert)\n connection.commit()\n\n print(\"Table After inserting a record\")\n cursor.execute(postgreSQL_select_Query)\n records = cursor.fetchall() \n\nexcept (Exception, psycopg2.Error) as error :\n    print (\"Error while connecting to PostgreSQL\", error)\nfinally:\n    if(connection):\n        cursor.close()\n        connection.close()\n        print(\"PostgreSQL connection is closed\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to interact with a PostgreSQL database. The script should be able to add new entries to the database.\n\n### Input:\nNot applicable\n\n### Output:\nimport psycopg2\n\ntry:\n connection = psycopg2.connect(\n user = \"postgres\",\n password = \"your_password\",\n host = \"localhost\",\n port = \"5432\",\n database = \"your_database\"\n )\n\n cursor = connection.cursor()\n postgreSQL_select_Query = \"select * from table_name\"\n  \n cursor.execute(postgreSQL_select_Query)\n  \n print(\"Table Before inserting a record\")\n records = cursor.fetchall() \n \n postgres_insert_query = \"\"\" INSERT INTO table_name (column_1, column_2, colum_n) VALUES (%s,%s,%s)\"\"\"\n record_to_insert = ('value1', 'value2', 'value3')\n cursor.execute(postgres_insert_query, record_to_insert)\n connection.commit()\n\n print(\"Table After inserting a record\")\n cursor.execute(postgreSQL_select_Query)\n records = cursor.fetchall() \n\nexcept (Exception, psycopg2.Error) as error :\n    print (\"Error while connecting to PostgreSQL\", error)\nfinally:\n    if(connection):\n        cursor.close()\n        connection.close()\n        print(\"PostgreSQL connection is closed\")"}
{"instruction":"Modify the following Python program to explore and retrieve data from a dataset using Pandas.","input":"import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\nprint(df)","output":"import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\nprint(df.head())\nprint(df.info())\nprint(\"Average age of passengers:\", df['Age'].mean())\nprint(\"Number of female passengers:\", df[df['Sex'] == 'female'].shape[0])\nprint(\"Oldest passenger:\", df.loc[df['Age'].idxmax()])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following Python program to explore and retrieve data from a dataset using Pandas.\n\n### Input:\nimport pandas as pd\n\ndf = pd.read_csv('data.csv')\n\nprint(df)\n\n### Output:\nimport pandas as pd\n\ndf = pd.read_csv('data.csv')\n\nprint(df.head())\nprint(df.info())\nprint(\"Average age of passengers:\", df['Age'].mean())\nprint(\"Number of female passengers:\", df[df['Sex'] == 'female'].shape[0])\nprint(\"Oldest passenger:\", df.loc[df['Age'].idxmax()])"}
{"instruction":"Optimize a given Python program to calculate the Fibonacci series.","input":"Not applicable","output":"def Fibonacci(n):\n if n<0:\n  print(\"Incorrect input\")\n elif n==1:\n  return 0\n elif n==2:\n  return 1\n else:\n  a = [0] * (n+1)\n  a[0] = 0\n  a[1] = 1\n \n  for i in range(2, n+1):\n   a[i] = a[i-1] + a[i-2]\n  return a[n]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a given Python program to calculate the Fibonacci series.\n\n### Input:\nNot applicable\n\n### Output:\ndef Fibonacci(n):\n if n<0:\n  print(\"Incorrect input\")\n elif n==1:\n  return 0\n elif n==2:\n  return 1\n else:\n  a = [0] * (n+1)\n  a[0] = 0\n  a[1] = 1\n \n  for i in range(2, n+1):\n   a[i] = a[i-1] + a[i-2]\n  return a[n]"}
{"instruction":"Create a class in Python to represent a rectangle with length and width as instance variables.","input":"","output":"class Rectangle:\n   def __init__(self, length, width):\n      self.length = length\n      self.width  = width","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to represent a rectangle with length and width as instance variables.\n\n### Input:\n\n\n### Output:\nclass Rectangle:\n   def __init__(self, length, width):\n      self.length = length\n      self.width  = width"}
{"instruction":"Optimize this code to calculate the sum of squares of all numbers from 1 to 10 in Python.","input":"total = 0\nfor i in range(1, 11):\n    total += i * i","output":"total = sum(i**2 for i in range(1, 11))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize this code to calculate the sum of squares of all numbers from 1 to 10 in Python.\n\n### Input:\ntotal = 0\nfor i in range(1, 11):\n    total += i * i\n\n### Output:\ntotal = sum(i**2 for i in range(1, 11))"}
{"instruction":"Create a Python application to send emails. The application should use the SMTP library to send messages to a specified address.","input":"Email Address: example@example.com","output":"import smtplib\n\n# Email information\nsender = 'user@example.com'\nreceivers = 'example@example.com'\n\nmessage = \"\"\"From: From User <user@example.com>\nTo: To User <example@example.com>\nSubject: SMTP e-mail test\n\nThis is a test e-mail message.\n\"\"\"\n\ntry:\n   smtpObj = smtplib.SMTP('localhost')\n   smtpObj.sendmail(sender, receivers, message)         \n   print (\"Successfully sent email\")\nexcept SMTPException:\n   print (\"Error: unable to send email\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python application to send emails. The application should use the SMTP library to send messages to a specified address.\n\n### Input:\nEmail Address: example@example.com\n\n### Output:\nimport smtplib\n\n# Email information\nsender = 'user@example.com'\nreceivers = 'example@example.com'\n\nmessage = \"\"\"From: From User <user@example.com>\nTo: To User <example@example.com>\nSubject: SMTP e-mail test\n\nThis is a test e-mail message.\n\"\"\"\n\ntry:\n   smtpObj = smtplib.SMTP('localhost')\n   smtpObj.sendmail(sender, receivers, message)         \n   print (\"Successfully sent email\")\nexcept SMTPException:\n   print (\"Error: unable to send email\")"}
{"instruction":"Create a function in Python to print the Fibonacci numbers from 0 to 1000.","input":"","output":"def printFibonacci(): \n    fib1 = 0\n    fib2 = 1\n    print(fib1, end = \" \") \n    while (fib2 < 1000): \n        print(fib2, end = \" \") \n        temp = fib2\n        fib2 = fib2 + fib1   \n        fib1 = temp","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to print the Fibonacci numbers from 0 to 1000.\n\n### Input:\n\n\n### Output:\ndef printFibonacci(): \n    fib1 = 0\n    fib2 = 1\n    print(fib1, end = \" \") \n    while (fib2 < 1000): \n        print(fib2, end = \" \") \n        temp = fib2\n        fib2 = fib2 + fib1   \n        fib1 = temp"}
{"instruction":"Write a Python program to calculate the total number of characters in a given string.","input":"","output":"def total_characters(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the total number of characters in a given string.\n\n### Input:\n\n\n### Output:\ndef total_characters(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count"}
{"instruction":"Write a script to classify the sentiment of a list of comments with Python.","input":"comments = [\"This product is great!\", \"I hate this product\", \"Not sure whether to buy it\"]","output":"def classify_sentiment(comments):\n    results = []\n    for comment in comments:\n        if \"great\" in comment or \"love\" in comment:\n            results.append(\"positive\")\n        elif \"hate\" in comment or \"bad\" in comment:\n            results.append(\"negative\")\n        else: \n            results.append(\"neutral\")\n    return results\n\nprint(classify_sentiment(comments))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script to classify the sentiment of a list of comments with Python.\n\n### Input:\ncomments = [\"This product is great!\", \"I hate this product\", \"Not sure whether to buy it\"]\n\n### Output:\ndef classify_sentiment(comments):\n    results = []\n    for comment in comments:\n        if \"great\" in comment or \"love\" in comment:\n            results.append(\"positive\")\n        elif \"hate\" in comment or \"bad\" in comment:\n            results.append(\"negative\")\n        else: \n            results.append(\"neutral\")\n    return results\n\nprint(classify_sentiment(comments))"}
{"instruction":"Create a Python program that prints the following numbers in a comma seperated list.","input":"1, 8, 10, 15, 12","output":"print(\", \".join([str(x) for x in [1, 8, 10, 15, 12]]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that prints the following numbers in a comma seperated list.\n\n### Input:\n1, 8, 10, 15, 12\n\n### Output:\nprint(\", \".join([str(x) for x in [1, 8, 10, 15, 12]]))"}
{"instruction":"Write a code optimization code that reduces the number of lines of code in a given Python script.","input":"def count_words(string):\n    counts = { }\n    for w in string.split():\n        if w in counts:\n            counts[w] += 1\n        else:\n            counts[w] = 1\n    return counts","output":"def count_words(string):\n    counts = { }\n    for w in string.split():\n        counts[w] = counts.get(w, 0) + 1\n    return counts","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code optimization code that reduces the number of lines of code in a given Python script.\n\n### Input:\ndef count_words(string):\n    counts = { }\n    for w in string.split():\n        if w in counts:\n            counts[w] += 1\n        else:\n            counts[w] = 1\n    return counts\n\n### Output:\ndef count_words(string):\n    counts = { }\n    for w in string.split():\n        counts[w] = counts.get(w, 0) + 1\n    return counts"}
{"instruction":"Create a Python program that reads user input and prints it out.","input":"","output":"name = input('Please enter your name: ')\nprint('Hello, ' +name)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that reads user input and prints it out.\n\n### Input:\n\n\n### Output:\nname = input('Please enter your name: ')\nprint('Hello, ' +name)"}
{"instruction":"Come up with a python program that takes a string and return a reversed version of the string.","input":"\"<noinput>\"","output":"def reverse_string(string):\n    return string[::-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a python program that takes a string and return a reversed version of the string.\n\n### Input:\n\"<noinput>\"\n\n### Output:\ndef reverse_string(string):\n    return string[::-1]"}
{"instruction":"Create a Python script to perform sentiment analysis on a given text. The application should use a pre-trained machine learning model to analyze the sentiment and output either 'positive', 'negative', 'neutral', or 'mixed' sentiment.","input":"The product was amazing and I highly recommend it!","output":"import nltk\nimport sklearn\nnltk.download('vader_lexicon')\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ntext = \"The product was amazing and I highly recommend it!\"\n\nanalyzer = SentimentIntensityAnalyzer()\nsentiment = analyzer.polarity_scores(text)\n\nif sentiment['compound'] > 0.05:\n sentiment_text = \"positive\"\nelif sentiment['compound'] < -0.05:\n sentiment_text = \"negative\"\nelse:\n sentiment_text = \"neutral\"\n\nprint(sentiment_text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to perform sentiment analysis on a given text. The application should use a pre-trained machine learning model to analyze the sentiment and output either 'positive', 'negative', 'neutral', or 'mixed' sentiment.\n\n### Input:\nThe product was amazing and I highly recommend it!\n\n### Output:\nimport nltk\nimport sklearn\nnltk.download('vader_lexicon')\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ntext = \"The product was amazing and I highly recommend it!\"\n\nanalyzer = SentimentIntensityAnalyzer()\nsentiment = analyzer.polarity_scores(text)\n\nif sentiment['compound'] > 0.05:\n sentiment_text = \"positive\"\nelif sentiment['compound'] < -0.05:\n sentiment_text = \"negative\"\nelse:\n sentiment_text = \"neutral\"\n\nprint(sentiment_text)"}
{"instruction":"Write a class in Python that encodes a DataFrame object.","input":"","output":"class DataFrameEncoder:\n    def __init__(self, data):\n        self.data = data\n        \n    def encode(self):\n        encoded = []\n        for row in self.data:\n            encoded_row = []\n            for column in row:\n                encoded_column = str(column)\n                encoded_row.append(encoded_column)\n            encoded.append(encoded_row)\n        return encoded","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a class in Python that encodes a DataFrame object.\n\n### Input:\n\n\n### Output:\nclass DataFrameEncoder:\n    def __init__(self, data):\n        self.data = data\n        \n    def encode(self):\n        encoded = []\n        for row in self.data:\n            encoded_row = []\n            for column in row:\n                encoded_column = str(column)\n                encoded_row.append(encoded_column)\n            encoded.append(encoded_row)\n        return encoded"}
{"instruction":"Write a Python program to remove consecutive sequences of duplicates from the given list","input":"list = [0, 0, 0, 1, 2, 0, 2, 0]","output":"def remove_duplicates(list):\n    new_list = []\n    previous_item = None\n    for item in list:\n        if item != previous_item:\n            new_list.append(item)\n        previous_item = item\n    return new_list\n\nnew_list = remove_duplicates(list)\nprint(new_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to remove consecutive sequences of duplicates from the given list\n\n### Input:\nlist = [0, 0, 0, 1, 2, 0, 2, 0]\n\n### Output:\ndef remove_duplicates(list):\n    new_list = []\n    previous_item = None\n    for item in list:\n        if item != previous_item:\n            new_list.append(item)\n        previous_item = item\n    return new_list\n\nnew_list = remove_duplicates(list)\nprint(new_list)"}
{"instruction":"Create a python script which replaces each letter in a string by the letter which appears n positions after it.","input":"string = \"abcdef\"\nn = 2","output":"def replace_letter(string, n):\n    result = \"\"\n    for char in string:\n        if char == 'z':\n            result += 'b'\n        elif char == 'Z':\n            result += 'B'\n        else:\n            result += chr(ord(char) + n)\n    \n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script which replaces each letter in a string by the letter which appears n positions after it.\n\n### Input:\nstring = \"abcdef\"\nn = 2\n\n### Output:\ndef replace_letter(string, n):\n    result = \"\"\n    for char in string:\n        if char == 'z':\n            result += 'b'\n        elif char == 'Z':\n            result += 'B'\n        else:\n            result += chr(ord(char) + n)\n    \n    return result"}
{"instruction":"Create a Python program to request data from an API and find the largest value in a given field.","input":"Not applicable","output":"import requests\n\nurl = 'https:\/\/example.com\/api'\nresponse = requests.get(url)\ndata = response.json()\n\nmax_value = 0\nfor item in data:\n if item['field'] > max_value:\n max_value = item['field']\n\nprint('The largest value is:', max_value)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to request data from an API and find the largest value in a given field.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\n\nurl = 'https:\/\/example.com\/api'\nresponse = requests.get(url)\ndata = response.json()\n\nmax_value = 0\nfor item in data:\n if item['field'] > max_value:\n max_value = item['field']\n\nprint('The largest value is:', max_value)"}
{"instruction":"Construct a Python program to check whether a given number is prime or not.","input":"13","output":"def check_prime(num):\n    if num == 1:\n        return False\n    for i in range(2,num):\n        if not num % i:\n            return False\n    return True\n\nresult = check_prime(13)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to check whether a given number is prime or not.\n\n### Input:\n13\n\n### Output:\ndef check_prime(num):\n    if num == 1:\n        return False\n    for i in range(2,num):\n        if not num % i:\n            return False\n    return True\n\nresult = check_prime(13)\nprint(result)"}
{"instruction":"Design a Python program to reduce a fraction to its lowest terms.","input":"","output":"def gcd(a, b): \n    if a == 0: \n        return b \n    return gcd(b % a, a) \n      \ndef reduceFraction(numerator, denominator): \n    common_divisor = gcd(numerator, denominator) \n      \n    reduced_numerator = numerator \/\/ common_divisor \n    reduced_denominator = denominator \/\/ common_divisor \n    return reduced_numerator, reduced_denominator \n\nnumerator = 12\ndenominator = 20\n\nreduced_numerator, reduced_denominator = reduceFraction(numerator, denominator) \nprint(f\"{numerator}\/{denominator} is equivalent to {reduced_numerator}\/{reduced_denominator}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to reduce a fraction to its lowest terms.\n\n### Input:\n\n\n### Output:\ndef gcd(a, b): \n    if a == 0: \n        return b \n    return gcd(b % a, a) \n      \ndef reduceFraction(numerator, denominator): \n    common_divisor = gcd(numerator, denominator) \n      \n    reduced_numerator = numerator \/\/ common_divisor \n    reduced_denominator = denominator \/\/ common_divisor \n    return reduced_numerator, reduced_denominator \n\nnumerator = 12\ndenominator = 20\n\nreduced_numerator, reduced_denominator = reduceFraction(numerator, denominator) \nprint(f\"{numerator}\/{denominator} is equivalent to {reduced_numerator}\/{reduced_denominator}\")"}
{"instruction":"Suggest an optimization technique to reduce the run time of this Python program.","input":"Python Program:\n\ndef time_function(n):\n    a = []\n    for i in range(n):\n        a.append(i)\n    return a","output":"def time_function(n):\n    a = [i for i in range(n)]\n    return a\n\nThis will reduce the run time of the program as it eliminates the need for iterating over the range and appending to the list. Using list comprehension is faster and more memory efficient than regular looping.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest an optimization technique to reduce the run time of this Python program.\n\n### Input:\nPython Program:\n\ndef time_function(n):\n    a = []\n    for i in range(n):\n        a.append(i)\n    return a\n\n### Output:\ndef time_function(n):\n    a = [i for i in range(n)]\n    return a\n\nThis will reduce the run time of the program as it eliminates the need for iterating over the range and appending to the list. Using list comprehension is faster and more memory efficient than regular looping."}
{"instruction":"Create a python class called \"Laptop\" that initializes with a brand and a model.","input":"","output":"class Laptop:\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python class called \"Laptop\" that initializes with a brand and a model.\n\n### Input:\n\n\n### Output:\nclass Laptop:\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model"}
{"instruction":"Create a program in Python to generate random passwords of 8 characters.","input":"","output":"import random\nimport string\n  \n# Random password generator \ndef randomString(stringLength=8):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n  \nprint (\"Random Password is:\", randomString())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to generate random passwords of 8 characters.\n\n### Input:\n\n\n### Output:\nimport random\nimport string\n  \n# Random password generator \ndef randomString(stringLength=8):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n  \nprint (\"Random Password is:\", randomString())"}
{"instruction":"Write a Python program to generate all subsets of a given set.","input":"","output":"def generate_subset(input_set):\n    subsets = [[]]\n \n    for elem in input_set:\n        n = len(subsets)\n        for i in range(n):\n            current_subset = subsets[i]\n            subsets.append(current_subset + [elem])\n \n    return subsets","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate all subsets of a given set.\n\n### Input:\n\n\n### Output:\ndef generate_subset(input_set):\n    subsets = [[]]\n \n    for elem in input_set:\n        n = len(subsets)\n        for i in range(n):\n            current_subset = subsets[i]\n            subsets.append(current_subset + [elem])\n \n    return subsets"}
{"instruction":"You need to optimize a given Python code for improving speed.","input":"def find_corresponding_nums(nums1, nums2):\n  result = []\n  for num1 in nums1:\n    for num2 in nums2:\n      if num1 == num2:\n        result.append(num1)\n  return result","output":"def find_corresponding_nums(nums1, nums2):\n    result = []\n    seen = set(nums2) \n    for num1 in nums1:\n        if num1 in seen:\n            result.append(num1)\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nYou need to optimize a given Python code for improving speed.\n\n### Input:\ndef find_corresponding_nums(nums1, nums2):\n  result = []\n  for num1 in nums1:\n    for num2 in nums2:\n      if num1 == num2:\n        result.append(num1)\n  return result\n\n### Output:\ndef find_corresponding_nums(nums1, nums2):\n    result = []\n    seen = set(nums2) \n    for num1 in nums1:\n        if num1 in seen:\n            result.append(num1)\n    return result"}
{"instruction":"Write a Python program to convert a given date in the format mm\/dd\/yyyy to its equivalent day of the week.","input":"","output":"import datetime\ndate_string = input(\"Enter date in mm\/dd\/yyyy format:\")\ndate = datetime.datetime.strptime(date_string, \"%m\/%d\/%Y\")\nweekday = date.strftime(\"%A\")\nprint(\"The day for the date\",date_string,\"is\",weekday)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a given date in the format mm\/dd\/yyyy to its equivalent day of the week.\n\n### Input:\n\n\n### Output:\nimport datetime\ndate_string = input(\"Enter date in mm\/dd\/yyyy format:\")\ndate = datetime.datetime.strptime(date_string, \"%m\/%d\/%Y\")\nweekday = date.strftime(\"%A\")\nprint(\"The day for the date\",date_string,\"is\",weekday)"}
{"instruction":"Design a Python script to compute the sum of prime numbers below 1000","input":"","output":"def is_prime(num): \n    if num == 1: \n        return False\n    elif num == 2: \n        return True\n    else: \n        for n in range(2, num): \n            if (num % n == 0): \n                return False\n        return True\n\nsum = 0\nfor num in range(2, 1000):\n    if is_prime(num): \n        sum += num \n\nprint(\"Sum of prime numbers below 1000:\", sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script to compute the sum of prime numbers below 1000\n\n### Input:\n\n\n### Output:\ndef is_prime(num): \n    if num == 1: \n        return False\n    elif num == 2: \n        return True\n    else: \n        for n in range(2, num): \n            if (num % n == 0): \n                return False\n        return True\n\nsum = 0\nfor num in range(2, 1000):\n    if is_prime(num): \n        sum += num \n\nprint(\"Sum of prime numbers below 1000:\", sum)"}
{"instruction":"Please rank the following libraries according to their relevance for our program in Python.","input":"NumPy, SciPy, Pandas","output":"NumPy > SciPy > Pandas","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPlease rank the following libraries according to their relevance for our program in Python.\n\n### Input:\nNumPy, SciPy, Pandas\n\n### Output:\nNumPy > SciPy > Pandas"}
{"instruction":"Create a Python program to calculate the sum of two numbers, given their positions in a given list.","input":"[1, 4, 5, 8, 9], positions = 3, 5","output":"def sum_positions(numbers, pos1, pos2):\n sum = numbers[pos1] + numbers[pos2]\n return sum\n\nnumbers = [1, 4, 5, 8, 9]\npositions = (3, 5)\nprint(sum_positions(numbers, positions[0], positions[1]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the sum of two numbers, given their positions in a given list.\n\n### Input:\n[1, 4, 5, 8, 9], positions = 3, 5\n\n### Output:\ndef sum_positions(numbers, pos1, pos2):\n sum = numbers[pos1] + numbers[pos2]\n return sum\n\nnumbers = [1, 4, 5, 8, 9]\npositions = (3, 5)\nprint(sum_positions(numbers, positions[0], positions[1]))"}
{"instruction":"Design an API in Python to compare two strings and provide an output\/ match score.","input":"String1 = \"Hello World\"\nString2 = \"Hello Everyone\"","output":"import difflib\n\ndef compare_strings(string1, string2):\n    # Convert strings to lowercase\n    string1 = string1.lower()\n    string2 = string2.lower()\n\n    # Compute match score\n    score = difflib.SequenceMatcher(None, string1, string2).ratio()\n\n    # Return the match score\n    return score","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an API in Python to compare two strings and provide an output\/ match score.\n\n### Input:\nString1 = \"Hello World\"\nString2 = \"Hello Everyone\"\n\n### Output:\nimport difflib\n\ndef compare_strings(string1, string2):\n    # Convert strings to lowercase\n    string1 = string1.lower()\n    string2 = string2.lower()\n\n    # Compute match score\n    score = difflib.SequenceMatcher(None, string1, string2).ratio()\n\n    # Return the match score\n    return score"}
{"instruction":"Create a sentiment analysis algorithm for Python","input":"The algorithm should identify the sentiment of a given sentence by analyzing its words and phrases.","output":"from textblob import TextBlob\nfrom collections import Counter\n\ndef sentiment_analysis(sentence):\n    # Tokenize the sentence\n    tokens = TextBlob(sentence).words\n\n    # Create a dictionary to store the sentiment polarity\n    sentiments = Counter()\n    # Calculate polarity scores and store the results\n    for token in tokens:\n        blob = TextBlob(token)\n        sentiments[token] += blob.sentiment.polarity\n    \n    # Calculate total polarity \n    total = sum(sentiments.values())\n    # Round to 2 decimal places \n    total = round(total, 2)\n    # Assign sentiment label \n    if total > 0.2: \n        sentiment = 'Positive' \n    elif total < -0.2:\n        sentiment = 'Negative' \n    else: \n        sentiment = 'Neutral'\n        \n    sentiment_info = {'total':total, 'sentiment': sentiment}\n    return sentiment_info","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sentiment analysis algorithm for Python\n\n### Input:\nThe algorithm should identify the sentiment of a given sentence by analyzing its words and phrases.\n\n### Output:\nfrom textblob import TextBlob\nfrom collections import Counter\n\ndef sentiment_analysis(sentence):\n    # Tokenize the sentence\n    tokens = TextBlob(sentence).words\n\n    # Create a dictionary to store the sentiment polarity\n    sentiments = Counter()\n    # Calculate polarity scores and store the results\n    for token in tokens:\n        blob = TextBlob(token)\n        sentiments[token] += blob.sentiment.polarity\n    \n    # Calculate total polarity \n    total = sum(sentiments.values())\n    # Round to 2 decimal places \n    total = round(total, 2)\n    # Assign sentiment label \n    if total > 0.2: \n        sentiment = 'Positive' \n    elif total < -0.2:\n        sentiment = 'Negative' \n    else: \n        sentiment = 'Neutral'\n        \n    sentiment_info = {'total':total, 'sentiment': sentiment}\n    return sentiment_info"}
{"instruction":"Write a Python program to calculate the maximum possible sum of a route between two nodes in a tree.","input":"A tree with 3 nodes. Node A with a value of 8, Node B with a value of 11, and Node C with a value of 7.","output":"def max_sum_route(tree, start, end):\n if start == end:\n return tree[start]\n else:\n return tree[start] + max(max_sum_route(tree, start + 1, end), \n max_sum_route(tree, start + 2, end))\n \ntree = {'A':8, 'B':11, 'C':7}\nstart = 'A'\nend = 'C'\n \nans = max_sum_route(tree, start, end)\nprint(ans)\n\n#Output\n23","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the maximum possible sum of a route between two nodes in a tree.\n\n### Input:\nA tree with 3 nodes. Node A with a value of 8, Node B with a value of 11, and Node C with a value of 7.\n\n### Output:\ndef max_sum_route(tree, start, end):\n if start == end:\n return tree[start]\n else:\n return tree[start] + max(max_sum_route(tree, start + 1, end), \n max_sum_route(tree, start + 2, end))\n \ntree = {'A':8, 'B':11, 'C':7}\nstart = 'A'\nend = 'C'\n \nans = max_sum_route(tree, start, end)\nprint(ans)\n\n#Output\n23"}
{"instruction":"Generate Python code to print all Armstrong numbers between 1 and 1000.","input":"","output":"for num in range(1,1001):\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp \/\/= 10\n    if num == sum:\n        print(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to print all Armstrong numbers between 1 and 1000.\n\n### Input:\n\n\n### Output:\nfor num in range(1,1001):\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp \/\/= 10\n    if num == sum:\n        print(num)"}
{"instruction":"Create a class in Python named \"MyCalculator\" with a method \"sum\" that calculates the sum of two numbers.","input":"","output":"class MyCalculator:\n    def __init__(self):\n        pass\n    \n    def sum(self, a, b):\n        return a + b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python named \"MyCalculator\" with a method \"sum\" that calculates the sum of two numbers.\n\n### Input:\n\n\n### Output:\nclass MyCalculator:\n    def __init__(self):\n        pass\n    \n    def sum(self, a, b):\n        return a + b"}
{"instruction":"Generate a code to merge two python dictionaries and update the values.","input":"dict_1 = {\n    'a': 1,\n    'b': 2\n}\n\ndict_2 = {\n    'b': 3,\n    'c': 4\n}","output":"def merge_dicts(dict_1, dict_2):\n    # copy both dictionaries\n    merged_dict = dict_1.copy()  \n    merged_dict.update(dict_2)  \n    return merged_dict\n\nprint(merge_dicts(dict_1, dict_2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to merge two python dictionaries and update the values.\n\n### Input:\ndict_1 = {\n    'a': 1,\n    'b': 2\n}\n\ndict_2 = {\n    'b': 3,\n    'c': 4\n}\n\n### Output:\ndef merge_dicts(dict_1, dict_2):\n    # copy both dictionaries\n    merged_dict = dict_1.copy()  \n    merged_dict.update(dict_2)  \n    return merged_dict\n\nprint(merge_dicts(dict_1, dict_2))"}
{"instruction":"Develop a function in Python that takes in a string of sentences and removes all the punctuations.","input":"\"This is a sample string!\"","output":"import string\n\ndef remove_punctuations(s):\n    return s.translate(str.maketrans('', '', string.punctuation))\n\nif __name__ == '__main__':\n    sentence = \"This is a sample string!\"\n    print(remove_punctuations(sentence))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python that takes in a string of sentences and removes all the punctuations.\n\n### Input:\n\"This is a sample string!\"\n\n### Output:\nimport string\n\ndef remove_punctuations(s):\n    return s.translate(str.maketrans('', '', string.punctuation))\n\nif __name__ == '__main__':\n    sentence = \"This is a sample string!\"\n    print(remove_punctuations(sentence))"}
{"instruction":"Develop a function in Python to sort a given array of strings.","input":"","output":"def sort_strings(strings):\n  return sorted(strings)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python to sort a given array of strings.\n\n### Input:\n\n\n### Output:\ndef sort_strings(strings):\n  return sorted(strings)"}
{"instruction":"Create a class in Python to define a point in 3D space.","input":"","output":"class Point3D(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def to_string(self):\n        return \"({}, {}, {})\".format(self.x, self.y, self.z)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to define a point in 3D space.\n\n### Input:\n\n\n### Output:\nclass Point3D(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def to_string(self):\n        return \"({}, {}, {})\".format(self.x, self.y, self.z)"}
{"instruction":"Design an algorithm in Python that checks whether a given number is a perfect square.","input":"","output":"def is_perfect_square(n):\n  if n < 0: \n    return False\n  x = n\n  while x*x > n:\n      x = (x + n\/x) \/\/ 2\n  return x*x == n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that checks whether a given number is a perfect square.\n\n### Input:\n\n\n### Output:\ndef is_perfect_square(n):\n  if n < 0: \n    return False\n  x = n\n  while x*x > n:\n      x = (x + n\/x) \/\/ 2\n  return x*x == n"}
{"instruction":"Write a Bash script to activate a python virtual environment.","input":"","output":"# activate the virtual environment \nsource venv\/bin\/activate","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Bash script to activate a python virtual environment.\n\n### Input:\n\n\n### Output:\n# activate the virtual environment \nsource venv\/bin\/activate"}
{"instruction":"Design a Python script for encrypting text using AES encryption.","input":"Example text: \"hello world\"","output":"import base64\nfrom Crypto.Cipher import AES\n\ndef encrypt(key, text):\n cipher = AES.new(key, AES.MODE_EAX)\n nonce = cipher.nonce\n ciphertext, tag = cipher.encrypt_and_digest(text.encode('utf-8'))\n return (nonce, tag, ciphertext)\n\nkey = b'Sixteen byte key'\ntext = \"hello world\"\n\nnonce, tag, ciphertext = encrypt(key, text)\n\nencoded_nonce = base64.b64encode(nonce)\nencoded_tag = base64.b64encode(tag)\nencoded_ciphertext = base64.b64encode(ciphertext)\n\nprint(\"Encrypted Text:\", encoded_nonce, encoded_tag, encoded_ciphertext)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script for encrypting text using AES encryption.\n\n### Input:\nExample text: \"hello world\"\n\n### Output:\nimport base64\nfrom Crypto.Cipher import AES\n\ndef encrypt(key, text):\n cipher = AES.new(key, AES.MODE_EAX)\n nonce = cipher.nonce\n ciphertext, tag = cipher.encrypt_and_digest(text.encode('utf-8'))\n return (nonce, tag, ciphertext)\n\nkey = b'Sixteen byte key'\ntext = \"hello world\"\n\nnonce, tag, ciphertext = encrypt(key, text)\n\nencoded_nonce = base64.b64encode(nonce)\nencoded_tag = base64.b64encode(tag)\nencoded_ciphertext = base64.b64encode(ciphertext)\n\nprint(\"Encrypted Text:\", encoded_nonce, encoded_tag, encoded_ciphertext)"}
{"instruction":"Generate a python program to reverse an integer.","input":"","output":"def reverse_integer(n):\n    # initialize the output to 0\n    rev = 0\n\n    # use a while loop to iterate through the number,\n    # adding each digit to the output\n    while n > 0:\n        rev = (rev * 10) + (n % 10)\n        n = n \/\/ 10\n\n    return rev","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to reverse an integer.\n\n### Input:\n\n\n### Output:\ndef reverse_integer(n):\n    # initialize the output to 0\n    rev = 0\n\n    # use a while loop to iterate through the number,\n    # adding each digit to the output\n    while n > 0:\n        rev = (rev * 10) + (n % 10)\n        n = n \/\/ 10\n\n    return rev"}
{"instruction":"Design a web scraper in python to get the latest news.","input":"","output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http:\/\/www.example.com\/latest-news'\n\n# get the html content\ncontent = requests.get(url)\n\n# create a soup object\nsoup = BeautifulSoup(content.text, 'html.parser')\n\n# get all the news title and links\nnews = soup.findAll('a', attrs = {'class': 'news-link'})\n\n# loop over all the news\nfor n in news:\n    print(n.text, n['href'])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a web scraper in python to get the latest news.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http:\/\/www.example.com\/latest-news'\n\n# get the html content\ncontent = requests.get(url)\n\n# create a soup object\nsoup = BeautifulSoup(content.text, 'html.parser')\n\n# get all the news title and links\nnews = soup.findAll('a', attrs = {'class': 'news-link'})\n\n# loop over all the news\nfor n in news:\n    print(n.text, n['href'])"}
{"instruction":"Generate a code to implement a linear search algorithm in python.","input":"","output":"def linear_search(list_of_items, item_to_search):\n    for items in list_of_items: \n        if items == item_to_search: \n            return list_of_items.index(item_to_search) \n    return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to implement a linear search algorithm in python.\n\n### Input:\n\n\n### Output:\ndef linear_search(list_of_items, item_to_search):\n    for items in list_of_items: \n        if items == item_to_search: \n            return list_of_items.index(item_to_search) \n    return -1"}
{"instruction":"Given a sentence and a word, extract the POS tag of the word using nltk library in Python.","input":"Sentence: He is enjoying the warm weather\nWord: enjoying","output":"import nltk\n\nsentence = \"He is enjoying the warm weather\"\nword = \"enjoying\"\n\ntokens = nltk.word_tokenize(sentence)\ntagged = nltk.pos_tag(tokens)\n\nfor (token, tag) in tagged:\n   if token == word:\n     print(\"POS Tag of the word:\", tag)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a sentence and a word, extract the POS tag of the word using nltk library in Python.\n\n### Input:\nSentence: He is enjoying the warm weather\nWord: enjoying\n\n### Output:\nimport nltk\n\nsentence = \"He is enjoying the warm weather\"\nword = \"enjoying\"\n\ntokens = nltk.word_tokenize(sentence)\ntagged = nltk.pos_tag(tokens)\n\nfor (token, tag) in tagged:\n   if token == word:\n     print(\"POS Tag of the word:\", tag)"}
{"instruction":"Create a function in Python that takes two inputs: a number and a list of numbers. The function should return a list of numbers that sum to the input number.","input":"number = 5\nnums = [1, 2, 3, 4]","output":"def find_sum(number, nums):\n    result_list = []\n\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == number:\n                result_list.append([nums[i], nums[j]])\n\n    return result_list\n\nresult = find_sum(number, nums) \nprint(result) # [[1, 4], [2, 3]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two inputs: a number and a list of numbers. The function should return a list of numbers that sum to the input number.\n\n### Input:\nnumber = 5\nnums = [1, 2, 3, 4]\n\n### Output:\ndef find_sum(number, nums):\n    result_list = []\n\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == number:\n                result_list.append([nums[i], nums[j]])\n\n    return result_list\n\nresult = find_sum(number, nums) \nprint(result) # [[1, 4], [2, 3]]"}
{"instruction":"Create a program to find the minimum depth of a binary tree using Python.","input":"3\n        \/  \\\n       9   20\n           \/ \\\n          15  7","output":"def minDepth(root):\n    if root is None:\n        return 0\n    if root.left is None and root.right is None:\n        return 1\n    elif root.left is None:\n        return minDepth(root.right) + 1\n    elif root.right is None:\n        return minDepth(root.left) + 1\n    else:\n        return min(minDepth(root.left), minDepth(root.right)) + 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to find the minimum depth of a binary tree using Python.\n\n### Input:\n3\n        \/  \\\n       9   20\n           \/ \\\n          15  7\n\n### Output:\ndef minDepth(root):\n    if root is None:\n        return 0\n    if root.left is None and root.right is None:\n        return 1\n    elif root.left is None:\n        return minDepth(root.right) + 1\n    elif root.right is None:\n        return minDepth(root.left) + 1\n    else:\n        return min(minDepth(root.left), minDepth(root.right)) + 1"}
{"instruction":"Specify a quick sort algorithm in Python to sort the given array of numbers.","input":"[9, 6, 5, 3, 4, 7, 4, 1]","output":"def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) \/\/ 2]\n    left = [x for x in arr if x < pivot]\n    mid = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + mid + quick_sort(right)\n\nprint(quick_sort([9, 6, 5, 3, 4, 7, 4, 1]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSpecify a quick sort algorithm in Python to sort the given array of numbers.\n\n### Input:\n[9, 6, 5, 3, 4, 7, 4, 1]\n\n### Output:\ndef quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) \/\/ 2]\n    left = [x for x in arr if x < pivot]\n    mid = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + mid + quick_sort(right)\n\nprint(quick_sort([9, 6, 5, 3, 4, 7, 4, 1]))"}
{"instruction":"Generate a Python program that implements a class for calculating the area of a circle.","input":"Not applicable","output":"class Circle:\n \n    def __init__(self, radius):\n        self.radius = radius \n \n    def area(self):\n        \"\"\"Returns the area of a circle given the radius\"\"\"\n        return (self.radius**2) * 3.14159\n \n \n# Usage example:\n \nmy_circle = Circle(2)\nprint(my_circle.area()) # 12.56636","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that implements a class for calculating the area of a circle.\n\n### Input:\nNot applicable\n\n### Output:\nclass Circle:\n \n    def __init__(self, radius):\n        self.radius = radius \n \n    def area(self):\n        \"\"\"Returns the area of a circle given the radius\"\"\"\n        return (self.radius**2) * 3.14159\n \n \n# Usage example:\n \nmy_circle = Circle(2)\nprint(my_circle.area()) # 12.56636"}
{"instruction":"Build a blockchain network using Python that can record a user's name and age.","input":"","output":"import hashlib\nimport json\n\n# define a block in the blockchain\nclass Block:\n    def __init__(self, index, data, timestamp, prev_hash):\n        self.index = index\n        self.data = data\n        self.timestamp = timestamp\n        self.prev_hash = prev_hash\n        self.hash = self.hash_it()\n\n    # generates a SHA256 based on the contents of the block\n    def hash_it(self):\n        sha = hashlib.sha256()\n        block_data = str(self.index) + str(self.data) + str(self.timestamp) + str(self.prev_hash) \n        sha.update(block_data.encode())\n        return sha.hexdigest()\n\n# defines a blockchain\nclass Blockchain:\n    def __init__(self):\n        self.chain = []\n\n    # adds a block to the blockchain\n    def add_block(self, data):\n        data = self.parse_data(data)\n        index = len(self.chain)\n        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        prev_hash = self.chain[-1].hash if self.chain else '0'\n\n        self.chain.append(Block(index, data, timestamp, prev_hash))\n\n    # records a user's name and age in the block data\n    def parse_data(self, data):\n        user_data = {\n            'name': data['name'],\n            'age': data['age']\n        }\n        return json.dumps(user_data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a blockchain network using Python that can record a user's name and age.\n\n### Input:\n\n\n### Output:\nimport hashlib\nimport json\n\n# define a block in the blockchain\nclass Block:\n    def __init__(self, index, data, timestamp, prev_hash):\n        self.index = index\n        self.data = data\n        self.timestamp = timestamp\n        self.prev_hash = prev_hash\n        self.hash = self.hash_it()\n\n    # generates a SHA256 based on the contents of the block\n    def hash_it(self):\n        sha = hashlib.sha256()\n        block_data = str(self.index) + str(self.data) + str(self.timestamp) + str(self.prev_hash) \n        sha.update(block_data.encode())\n        return sha.hexdigest()\n\n# defines a blockchain\nclass Blockchain:\n    def __init__(self):\n        self.chain = []\n\n    # adds a block to the blockchain\n    def add_block(self, data):\n        data = self.parse_data(data)\n        index = len(self.chain)\n        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        prev_hash = self.chain[-1].hash if self.chain else '0'\n\n        self.chain.append(Block(index, data, timestamp, prev_hash))\n\n    # records a user's name and age in the block data\n    def parse_data(self, data):\n        user_data = {\n            'name': data['name'],\n            'age': data['age']\n        }\n        return json.dumps(user_data)"}
{"instruction":"Write a Python program to classify the given data using logistic regression.","input":"\".\/data.csv\"\n\nx1, x2, y\n1, 2, 0\n2, 3, 0\n4, 5, 1\n5, 4, 1","output":"import pandas as pd\nfrom sklearn.linear_model import LogisticRegression\n\n# load the data\ndata = pd.read_csv('data.csv')\n\n# create the training and test set\nX = data[['x1', 'x2']]\ny = data['y']\n\n# train the model\nmodel = LogisticRegression()\nmodel.fit(X, y)\n\n# make predictions\npreds = model.predict(X)\n\n# check accuracy\naccuracy = model.score(X, y)\nprint('accuracy', accuracy) \n# output: accuracy 1.0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify the given data using logistic regression.\n\n### Input:\n\".\/data.csv\"\n\nx1, x2, y\n1, 2, 0\n2, 3, 0\n4, 5, 1\n5, 4, 1\n\n### Output:\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\n\n# load the data\ndata = pd.read_csv('data.csv')\n\n# create the training and test set\nX = data[['x1', 'x2']]\ny = data['y']\n\n# train the model\nmodel = LogisticRegression()\nmodel.fit(X, y)\n\n# make predictions\npreds = model.predict(X)\n\n# check accuracy\naccuracy = model.score(X, y)\nprint('accuracy', accuracy) \n# output: accuracy 1.0"}
{"instruction":"Write a Python program to find out the root of a given quadratic equation.","input":"1x^2 + 4x + 4","output":"\"\"\"\nFind out the roots of given quadratic equation\n\"\"\"\nfrom math import sqrt\n\ndef quadratic_roots(a, b, c):\n    # calculate the discriminant\n    D = b**2 - 4*a*c\n\n    # calculate the two roots\n    if D == 0:\n        return (-b+sqrt(D)) \/\/ (2*a)\n    else:\n        x1 = (-b + sqrt(D)) \/\/ (2*a)\n        x2 = (-b - sqrt(D)) \/\/ (2*a)\n        return (x1, x2)\n    \nif __name__ == '__main__':\n    a = 1\n    b = 4\n    c = 4\n    print(\"Roots of the quadratic equation:\", quadratic_roots(a, b, c))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find out the root of a given quadratic equation.\n\n### Input:\n1x^2 + 4x + 4\n\n### Output:\n\"\"\"\nFind out the roots of given quadratic equation\n\"\"\"\nfrom math import sqrt\n\ndef quadratic_roots(a, b, c):\n    # calculate the discriminant\n    D = b**2 - 4*a*c\n\n    # calculate the two roots\n    if D == 0:\n        return (-b+sqrt(D)) \/\/ (2*a)\n    else:\n        x1 = (-b + sqrt(D)) \/\/ (2*a)\n        x2 = (-b - sqrt(D)) \/\/ (2*a)\n        return (x1, x2)\n    \nif __name__ == '__main__':\n    a = 1\n    b = 4\n    c = 4\n    print(\"Roots of the quadratic equation:\", quadratic_roots(a, b, c))"}
{"instruction":"Create a module for a python program that sanitizes user input. This module should strip away whitespace, remove HTML tags and special characters, convert ASCII characters to Unicode characters, and convert strings to lowercase.","input":"my string = '<Strin>G &#3238; !@#$%^'","output":"import re\n\n# strip whitespace\ndef strip_whitespace(s):\n return s.strip()\n\n# remove HTML tags\ndef remove_html_tags(s):\n return re.sub('<[^>]*>', '', s)\n\n# remove special characters\ndef remove_special_chars(s):\n return re.sub('[^\\w\\s]', '', s)\n\n# convert ASCII characters to unicode characters\ndef convert_ascii_to_unicode(s):\n return s.encode('unicode-escape').decode('utf-8')\n\n# convert strings to lowercase\ndef to_lower(s):\n return s.lower()\n\n# sanitize user input\ndef sanitize_string(s):\n s = strip_whitespace(s)\n s = remove_html_tags(s)\n s = remove_special_chars(s)\n s = convert_ascii_to_unicode(s)\n s = to_lower(s)\n return s\n\n# Example\nmy_string = '<Strin>G &#3238; !@#$%^'\nmy_string = sanitize_string(my_string)\nprint(my_string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a module for a python program that sanitizes user input. This module should strip away whitespace, remove HTML tags and special characters, convert ASCII characters to Unicode characters, and convert strings to lowercase.\n\n### Input:\nmy string = '<Strin>G &#3238; !@#$%^'\n\n### Output:\nimport re\n\n# strip whitespace\ndef strip_whitespace(s):\n return s.strip()\n\n# remove HTML tags\ndef remove_html_tags(s):\n return re.sub('<[^>]*>', '', s)\n\n# remove special characters\ndef remove_special_chars(s):\n return re.sub('[^\\w\\s]', '', s)\n\n# convert ASCII characters to unicode characters\ndef convert_ascii_to_unicode(s):\n return s.encode('unicode-escape').decode('utf-8')\n\n# convert strings to lowercase\ndef to_lower(s):\n return s.lower()\n\n# sanitize user input\ndef sanitize_string(s):\n s = strip_whitespace(s)\n s = remove_html_tags(s)\n s = remove_special_chars(s)\n s = convert_ascii_to_unicode(s)\n s = to_lower(s)\n return s\n\n# Example\nmy_string = '<Strin>G &#3238; !@#$%^'\nmy_string = sanitize_string(my_string)\nprint(my_string)"}
{"instruction":"Sort a list in Python using the Quick Sort algorithm","input":"[5, 2, 9, 1, 4, 12]","output":"def quicksort (array) :\n    if len(array) <= 1 :\n        return array\n    else:\n        pivot = array[len(array) \/\/ 2]\n        left = [x for x in array if x < pivot]\n        middle = [x for x in array if x == pivot]\n        right = [x for x in array if x > pivot]\n        return quicksort(left) + middle + quicksort(right)\n\narray = [5, 2, 9, 1, 4, 12]\nresult = quicksort(array)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSort a list in Python using the Quick Sort algorithm\n\n### Input:\n[5, 2, 9, 1, 4, 12]\n\n### Output:\ndef quicksort (array) :\n    if len(array) <= 1 :\n        return array\n    else:\n        pivot = array[len(array) \/\/ 2]\n        left = [x for x in array if x < pivot]\n        middle = [x for x in array if x == pivot]\n        right = [x for x in array if x > pivot]\n        return quicksort(left) + middle + quicksort(right)\n\narray = [5, 2, 9, 1, 4, 12]\nresult = quicksort(array)\nprint(result)"}
{"instruction":"Write a python code to generate a sentence from a given grammar.","input":"","output":"import random\n\ngrammar = { \n    \"_S\"  : [\"_NP _VP\"],\n    \"_NP\" : [\"I\", \"you\", \"she\"],\n    \"_VP\" : [\"love _NP\", \"hate _NP\"]\n}\n\ndef generate_sentence(grammar):\n    # Select random start symbol\n    symbol = random.choice(list(grammar.keys()))\n    # Generate a new sentence\n    sentence = [symbol]\n    while symbol in grammar.keys():\n        # Choose a random alternative \n        # of the current symbol\n        alternatives = grammar[symbol]\n        alternative = random.choice(alternatives)\n        # Create a list of symbols from \n        # the chosen alternative\n        alternative_symbols = alternative.split()\n        # Add the symbols to the sentence\n        sentence.extend(alternative_symbols)\n        # Get the next symbol\n        symbol = sentence[-1]\n    \n    # Add a fullstop and return the sentence\n    sentence[0] = sentence[0].capitalize()\n    sentence.append(\".\")\n    return \" \".join(sentence)\n\nif __name__ == '__main__':\n    output = generate_sentence(grammar)\n    print(output)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to generate a sentence from a given grammar.\n\n### Input:\n\n\n### Output:\nimport random\n\ngrammar = { \n    \"_S\"  : [\"_NP _VP\"],\n    \"_NP\" : [\"I\", \"you\", \"she\"],\n    \"_VP\" : [\"love _NP\", \"hate _NP\"]\n}\n\ndef generate_sentence(grammar):\n    # Select random start symbol\n    symbol = random.choice(list(grammar.keys()))\n    # Generate a new sentence\n    sentence = [symbol]\n    while symbol in grammar.keys():\n        # Choose a random alternative \n        # of the current symbol\n        alternatives = grammar[symbol]\n        alternative = random.choice(alternatives)\n        # Create a list of symbols from \n        # the chosen alternative\n        alternative_symbols = alternative.split()\n        # Add the symbols to the sentence\n        sentence.extend(alternative_symbols)\n        # Get the next symbol\n        symbol = sentence[-1]\n    \n    # Add a fullstop and return the sentence\n    sentence[0] = sentence[0].capitalize()\n    sentence.append(\".\")\n    return \" \".join(sentence)\n\nif __name__ == '__main__':\n    output = generate_sentence(grammar)\n    print(output)"}
{"instruction":"Write a Python code to calculate the factorial of a given number using memoization.","input":"","output":"def factorial_memoization(n): \n\n\t#Creating table to store result \n\tfactorial_table = [1] * (n+1) \n\n\t# Calculating factorial and storing in \n\t# the table \n\tfor i in range(1, n+1): \n\t\tfactorial_table[i] = i * factorial_table[i - 1] \n\n\treturn factorial_table[n] \n\nresult = factorial_memoization(5)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to calculate the factorial of a given number using memoization.\n\n### Input:\n\n\n### Output:\ndef factorial_memoization(n): \n\n\t#Creating table to store result \n\tfactorial_table = [1] * (n+1) \n\n\t# Calculating factorial and storing in \n\t# the table \n\tfor i in range(1, n+1): \n\t\tfactorial_table[i] = i * factorial_table[i - 1] \n\n\treturn factorial_table[n] \n\nresult = factorial_memoization(5)\nprint(result)"}
{"instruction":"The code is a Python script that parses metadata.csv files in a given SIPPath. To use the script, import the necessary modules and call the function `parseMetadata(SIPPath)` with the path to the SIP as an argument. The function returns a dictionary of metadata, where the keys are filenames and the values are ordered dictionaries of metadata values. The script can be run from the command line by passing the path to the SIP as an argument.","input":"","output":"#!\/usr\/bin\/env python2\n#\n# This file is part of Archivematica.\n#\n# Copyright 2010-2012 Artefactual Systems Inc. <http:\/\/artefactual.com>\n#\n# Archivematica is free software: you can redistribute it and\/or modify\n# it under the terms of the GNU Affero General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Archivematica is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Archivematica.    If not, see <http:\/\/www.gnu.org\/licenses\/>.\n\n# @package Archivematica\n# @subpackage archivematicaClientScript\n# @author Joseph Perry <joseph@artefactual.com>\n# @version svn: $Id$\n\n#\/src\/dashboard\/src\/main\/models.py\n\nimport collections\nimport csv\nimport os\nimport sys\nimport traceback\n# archivematicaCommon\nimport archivematicaFunctions\nfrom custom_handlers import get_script_logger\nfrom sharedVariablesAcrossModules import sharedVariablesAcrossModules\n\n\ndef parseMetadata(SIPPath):\n    \"\"\"\n    Parse all metadata.csv files in SIPPath.\n\n    Looking for metadata.csvs in metadata\/ and\n    objects\/metadata\/transfers\/<transfer name>\/metadata\/\n\n    See parseMetadataCSV for details on parsing.\n\n    :param SIPPath: Path to the SIP\n    :return: {<filename>: OrderedDict(key: [values]) }\n    \"\"\"\n    all_metadata = {}\n    metadata_csvs = archivematicaFunctions.find_metadata_files(SIPPath, 'metadata.csv')\n\n    for metadataCSVFilePath in metadata_csvs:\n        try:\n            csv_metadata = parseMetadataCSV(metadataCSVFilePath)\n        except Exception:\n            print >>sys.stderr, \"error parsing: \", metadataCSVFilePath\n            traceback.print_exc(file=sys.stderr)\n            sharedVariablesAcrossModules.globalErrorCount += 1\n            continue\n        # Provide warning if this file already has differing metadata\n        # Not using all_metadata.update(csv_metadata) because of that\n        for entry, values in csv_metadata.iteritems():\n            if entry in all_metadata and all_metadata[entry] != values:\n                print >> sys.stderr, 'Metadata for', entry, 'being updated. Old:', all_metadata[entry], 'New:', values\n            existing = all_metadata.get(entry, collections.OrderedDict())\n            existing.update(values)\n            all_metadata[entry] = existing\n\n    return all_metadata\n\n\ndef parseMetadataCSV(metadataCSVFilePath):\n    \"\"\"\n    Parses the metadata.csv into a dict with entries for each file.\n\n    Each file's entry is an OrderedDict containing the column header and a list of values for each column.\n\n    Example CSV:\n    Filename,dc.title,dc.type,dc.type,Other metadata\n    objects\/foo.jpg,Foo,Photograph,Still Image,Taken on a sunny day\n    objects\/bar\/,Bar,Photograph,Still Image,All taken on a rainy day\n\n    Produces:\n    {\n        'objects\/foo.jpg': OrderedDict(dc.title=[Foo], dc.type=[Photograph, Still Image], Other metadata=[Taken on a sunny day])\n        'objects\/bar': OrderedDict(dc.title=[Bar], dc.date=[Photograph, Still Image], Other metadata=[All taken on a rainy day])\n    }\n\n    :param metadataCSVFilePath: Path to the metadata CSV to parse\n    :return: {<filename>: OrderedDict(<metadata name>: [<metadata value>]) }\n    \"\"\"\n    metadata = {}\n    # use universal newline mode to support unusual newlines, like \\r\n    with open(metadataCSVFilePath, 'rbU') as f:\n        reader = csv.reader(f)\n        # Parse first row as header\n        header = reader.next()\n        # Strip filename column, strip whitespace from header values\n        header = [h.strip() for h in header[1:]]\n        # Parse data\n        for row in reader:\n            if not row:\n                continue\n            entry_name = row[0]\n            if entry_name.endswith(\"\/\"):\n                entry_name = entry_name[:-1]\n            # Strip file\/dir name from values\n            row = row[1:]\n            values = archivematicaFunctions.OrderedListsDict(zip(header, row))\n            if entry_name in metadata and metadata[entry_name] != values:\n                print >> sys.stderr, 'Metadata for', entry_name, 'being overwritten. Old:', metadata[entry_name], 'New:', values\n            metadata[entry_name] = values\n\n    return collections.OrderedDict(metadata)  # Return a normal OrderedDict\n\n\nif __name__ == '__main__':\n    logger = get_script_logger(\"archivematica.mcp.client.createMETSMetadataCSV\")\n\n    parseMetadata(sys.argv[1])\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe code is a Python script that parses metadata.csv files in a given SIPPath. To use the script, import the necessary modules and call the function `parseMetadata(SIPPath)` with the path to the SIP as an argument. The function returns a dictionary of metadata, where the keys are filenames and the values are ordered dictionaries of metadata values. The script can be run from the command line by passing the path to the SIP as an argument.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python2\n#\n# This file is part of Archivematica.\n#\n# Copyright 2010-2012 Artefactual Systems Inc. <http:\/\/artefactual.com>\n#\n# Archivematica is free software: you can redistribute it and\/or modify\n# it under the terms of the GNU Affero General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Archivematica is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Archivematica.    If not, see <http:\/\/www.gnu.org\/licenses\/>.\n\n# @package Archivematica\n# @subpackage archivematicaClientScript\n# @author Joseph Perry <joseph@artefactual.com>\n# @version svn: $Id$\n\n#\/src\/dashboard\/src\/main\/models.py\n\nimport collections\nimport csv\nimport os\nimport sys\nimport traceback\n# archivematicaCommon\nimport archivematicaFunctions\nfrom custom_handlers import get_script_logger\nfrom sharedVariablesAcrossModules import sharedVariablesAcrossModules\n\n\ndef parseMetadata(SIPPath):\n    \"\"\"\n    Parse all metadata.csv files in SIPPath.\n\n    Looking for metadata.csvs in metadata\/ and\n    objects\/metadata\/transfers\/<transfer name>\/metadata\/\n\n    See parseMetadataCSV for details on parsing.\n\n    :param SIPPath: Path to the SIP\n    :return: {<filename>: OrderedDict(key: [values]) }\n    \"\"\"\n    all_metadata = {}\n    metadata_csvs = archivematicaFunctions.find_metadata_files(SIPPath, 'metadata.csv')\n\n    for metadataCSVFilePath in metadata_csvs:\n        try:\n            csv_metadata = parseMetadataCSV(metadataCSVFilePath)\n        except Exception:\n            print >>sys.stderr, \"error parsing: \", metadataCSVFilePath\n            traceback.print_exc(file=sys.stderr)\n            sharedVariablesAcrossModules.globalErrorCount += 1\n            continue\n        # Provide warning if this file already has differing metadata\n        # Not using all_metadata.update(csv_metadata) because of that\n        for entry, values in csv_metadata.iteritems():\n            if entry in all_metadata and all_metadata[entry] != values:\n                print >> sys.stderr, 'Metadata for', entry, 'being updated. Old:', all_metadata[entry], 'New:', values\n            existing = all_metadata.get(entry, collections.OrderedDict())\n            existing.update(values)\n            all_metadata[entry] = existing\n\n    return all_metadata\n\n\ndef parseMetadataCSV(metadataCSVFilePath):\n    \"\"\"\n    Parses the metadata.csv into a dict with entries for each file.\n\n    Each file's entry is an OrderedDict containing the column header and a list of values for each column.\n\n    Example CSV:\n    Filename,dc.title,dc.type,dc.type,Other metadata\n    objects\/foo.jpg,Foo,Photograph,Still Image,Taken on a sunny day\n    objects\/bar\/,Bar,Photograph,Still Image,All taken on a rainy day\n\n    Produces:\n    {\n        'objects\/foo.jpg': OrderedDict(dc.title=[Foo], dc.type=[Photograph, Still Image], Other metadata=[Taken on a sunny day])\n        'objects\/bar': OrderedDict(dc.title=[Bar], dc.date=[Photograph, Still Image], Other metadata=[All taken on a rainy day])\n    }\n\n    :param metadataCSVFilePath: Path to the metadata CSV to parse\n    :return: {<filename>: OrderedDict(<metadata name>: [<metadata value>]) }\n    \"\"\"\n    metadata = {}\n    # use universal newline mode to support unusual newlines, like \\r\n    with open(metadataCSVFilePath, 'rbU') as f:\n        reader = csv.reader(f)\n        # Parse first row as header\n        header = reader.next()\n        # Strip filename column, strip whitespace from header values\n        header = [h.strip() for h in header[1:]]\n        # Parse data\n        for row in reader:\n            if not row:\n                continue\n            entry_name = row[0]\n            if entry_name.endswith(\"\/\"):\n                entry_name = entry_name[:-1]\n            # Strip file\/dir name from values\n            row = row[1:]\n            values = archivematicaFunctions.OrderedListsDict(zip(header, row))\n            if entry_name in metadata and metadata[entry_name] != values:\n                print >> sys.stderr, 'Metadata for', entry_name, 'being overwritten. Old:', metadata[entry_name], 'New:', values\n            metadata[entry_name] = values\n\n    return collections.OrderedDict(metadata)  # Return a normal OrderedDict\n\n\nif __name__ == '__main__':\n    logger = get_script_logger(\"archivematica.mcp.client.createMETSMetadataCSV\")\n\n    parseMetadata(sys.argv[1])\n"}
{"instruction":"Write a Python program to convert strings from upper case to lower case.","input":"","output":"def convert_lowercase(string):\n    return string.lower()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert strings from upper case to lower case.\n\n### Input:\n\n\n### Output:\ndef convert_lowercase(string):\n    return string.lower()"}
{"instruction":"Create a Python program to filter a list of names by the length of their name. The output should be a new list containing only names with lengths equal to 10 characters.","input":"names = ['Johanna', 'George', 'John', 'Bobby', 'Steven']","output":"def filter_names(names):\n filtered = []\n for name in names:\n  if len(name) == 10:\n   filtered.append(name)\n\n return filtered\n\nnames = ['Johanna', 'George', 'John', 'Bobby', 'Steven']\nfiltered = filter_names(names)\n\nprint(filtered) # ['Johanna', 'Steven']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to filter a list of names by the length of their name. The output should be a new list containing only names with lengths equal to 10 characters.\n\n### Input:\nnames = ['Johanna', 'George', 'John', 'Bobby', 'Steven']\n\n### Output:\ndef filter_names(names):\n filtered = []\n for name in names:\n  if len(name) == 10:\n   filtered.append(name)\n\n return filtered\n\nnames = ['Johanna', 'George', 'John', 'Bobby', 'Steven']\nfiltered = filter_names(names)\n\nprint(filtered) # ['Johanna', 'Steven']"}
{"instruction":"Write a Python script to implement an iterator that iterates over a given array.","input":"[2, 5, 6, 8, 9]","output":"def iterator(array):\n  index = 0\n  while (index < len(array)):\n    yield array[index]\n    index += 1\n\ngiven_array = [2, 5, 6, 8, 9]\niterating = iterator(given_array)\n\nfor value in iterating:\n  print(value)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to implement an iterator that iterates over a given array.\n\n### Input:\n[2, 5, 6, 8, 9]\n\n### Output:\ndef iterator(array):\n  index = 0\n  while (index < len(array)):\n    yield array[index]\n    index += 1\n\ngiven_array = [2, 5, 6, 8, 9]\niterating = iterator(given_array)\n\nfor value in iterating:\n  print(value)"}
{"instruction":"Create a Python program to reverse a given array by swapping the elements.","input":"Reversing array [1, 2, 3]","output":"def reverse_array(arr): \n      \n    # Initialize start and end index \n        start = 0\n        end = len(arr) - 1\n  \n    # Loop over the array \n    while start < end: \n  \n        # Swap the elements at start and end \n        arr[start], arr[end] = arr[end], arr[start]  \n          \n        # Update start and end index \n        start += 1\n        end -= 1\n  \n# Driver code \narr = [1, 2, 3] \n  \nreverse_array(arr) \n  \n# Print our modified array   \nprint(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to reverse a given array by swapping the elements.\n\n### Input:\nReversing array [1, 2, 3]\n\n### Output:\ndef reverse_array(arr): \n      \n    # Initialize start and end index \n        start = 0\n        end = len(arr) - 1\n  \n    # Loop over the array \n    while start < end: \n  \n        # Swap the elements at start and end \n        arr[start], arr[end] = arr[end], arr[start]  \n          \n        # Update start and end index \n        start += 1\n        end -= 1\n  \n# Driver code \narr = [1, 2, 3] \n  \nreverse_array(arr) \n  \n# Print our modified array   \nprint(arr)"}
{"instruction":"Reverse a string via a Python function.","input":"String: Hello","output":"def reverse_string(string):\n    return string[::-1]\n\nresult = reverse_string(\"Hello\")\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nReverse a string via a Python function.\n\n### Input:\nString: Hello\n\n### Output:\ndef reverse_string(string):\n    return string[::-1]\n\nresult = reverse_string(\"Hello\")\nprint(result)"}
{"instruction":"Create a Python program that takes a list and returns a dictionary with the elements from the list as keys, and their frequency as values.","input":"my_list = [1,1,2,3,4,4,4,4,5,6]","output":"my_dict = {}\n\nfor item in my_list:\n    if item not in my_dict:\n        my_dict[item] = 0\n    my_dict[item] += 1\n\nprint(my_dict) # {1: 2, 2: 1, 3: 1, 4: 4, 5: 1, 6: 1}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a list and returns a dictionary with the elements from the list as keys, and their frequency as values.\n\n### Input:\nmy_list = [1,1,2,3,4,4,4,4,5,6]\n\n### Output:\nmy_dict = {}\n\nfor item in my_list:\n    if item not in my_dict:\n        my_dict[item] = 0\n    my_dict[item] += 1\n\nprint(my_dict) # {1: 2, 2: 1, 3: 1, 4: 4, 5: 1, 6: 1}"}
{"instruction":"Develop a function in Python that takes a string as input and finds a pattern in it and replaces it with a given set of characters.","input":"\"abcabcabc\", \"abc\", \"xyz\"","output":"def replacePattern(string, pattern, replacement):\n    return string.replace(pattern, replacement)\n\nresult = replacePattern(\"abcabcabc\", \"abc\", \"xyz\")\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python that takes a string as input and finds a pattern in it and replaces it with a given set of characters.\n\n### Input:\n\"abcabcabc\", \"abc\", \"xyz\"\n\n### Output:\ndef replacePattern(string, pattern, replacement):\n    return string.replace(pattern, replacement)\n\nresult = replacePattern(\"abcabcabc\", \"abc\", \"xyz\")\nprint(result)"}
{"instruction":"Develop a Python program to calculate the total area of a group of rectangles.","input":"[[3, 4], [6, 6], [1, 8]]","output":"rectangles = [[3, 4], [6, 6], [1, 8]]\n\n# calculate the total area\ndef calculateTotalArea(rectangles):\n total_area = 0\n for x, y in rectangles:\n total_area += x * y\n return total_area\n\ntotal_area = calculateTotalArea(rectangles)\nprint(total_area) # 81","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to calculate the total area of a group of rectangles.\n\n### Input:\n[[3, 4], [6, 6], [1, 8]]\n\n### Output:\nrectangles = [[3, 4], [6, 6], [1, 8]]\n\n# calculate the total area\ndef calculateTotalArea(rectangles):\n total_area = 0\n for x, y in rectangles:\n total_area += x * y\n return total_area\n\ntotal_area = calculateTotalArea(rectangles)\nprint(total_area) # 81"}
{"instruction":"Write a Python program to calculate the Fibonacci number at a particular position.","input":"6","output":"def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\n# Driver Program \nif __name__ == \"__main__\": \n    print(Fibonacci(6))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the Fibonacci number at a particular position.\n\n### Input:\n6\n\n### Output:\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\n# Driver Program \nif __name__ == \"__main__\": \n    print(Fibonacci(6))"}
{"instruction":"Generate a Python code to find all substrings in a given string.","input":"","output":"def find_all_substrings(string):\n    substrings = []\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            substrings.append(string[i:j])\n    return substrings","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code to find all substrings in a given string.\n\n### Input:\n\n\n### Output:\ndef find_all_substrings(string):\n    substrings = []\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            substrings.append(string[i:j])\n    return substrings"}
{"instruction":"Generate an optimized version of a given Python script that reduces its runtime.","input":"A sample Python script - \ndef sort(data):\n    n = len(data)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if data[i] > data[j]:\n                t = data[i]\n                data[i] = data[j]\n                data[j] = t","output":"def sort(data):\n    n = len(data)\n    for i in range(n - 1):\n        min_index = i\n        for j in range(i + 1, n):\n            if data[min_index] > data[j]:\n                min_index = j\n        data[i], data[min_index] = data[min_index], data[i]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an optimized version of a given Python script that reduces its runtime.\n\n### Input:\nA sample Python script - \ndef sort(data):\n    n = len(data)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if data[i] > data[j]:\n                t = data[i]\n                data[i] = data[j]\n                data[j] = t\n\n### Output:\ndef sort(data):\n    n = len(data)\n    for i in range(n - 1):\n        min_index = i\n        for j in range(i + 1, n):\n            if data[min_index] > data[j]:\n                min_index = j\n        data[i], data[min_index] = data[min_index], data[i]"}
{"instruction":"Build an AI-powered feature engineering pipeline in Python that takes in a dataset, selects features, and generates a list of features for a given classification task.","input":"Dataset : The dataset contains 4 columns - Age, Gender, Income and Education.","output":"import numpy as np\nimport pandas as pd\nimport scipy\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import ExtraTreesClassifier\n\n# Load the data\ndata = pd.read_csv('data.csv')\n\n# Separate out the target column\nX = data.drop('target', axis=1)\ny = data['target']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Fit an Extra Trees Classifier to the training data\nclf = ExtraTreesClassifier()\nclf.fit(X_train, y_train)\n\n# Generate a list of features sorted by feature importance\nfeature_list = list(zip(clf.feature_importances_, X_train.columns))\nsorted_features = sorted(feature_list, key=lambda x: x[0], reverse=True)\n\n# Print the list of features sorted by importance\nfor feature in sorted_features:\n    print(feature)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild an AI-powered feature engineering pipeline in Python that takes in a dataset, selects features, and generates a list of features for a given classification task.\n\n### Input:\nDataset : The dataset contains 4 columns - Age, Gender, Income and Education.\n\n### Output:\nimport numpy as np\nimport pandas as pd\nimport scipy\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import ExtraTreesClassifier\n\n# Load the data\ndata = pd.read_csv('data.csv')\n\n# Separate out the target column\nX = data.drop('target', axis=1)\ny = data['target']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Fit an Extra Trees Classifier to the training data\nclf = ExtraTreesClassifier()\nclf.fit(X_train, y_train)\n\n# Generate a list of features sorted by feature importance\nfeature_list = list(zip(clf.feature_importances_, X_train.columns))\nsorted_features = sorted(feature_list, key=lambda x: x[0], reverse=True)\n\n# Print the list of features sorted by importance\nfor feature in sorted_features:\n    print(feature)"}
{"instruction":"Create an API endpoint with Python and Flask that allows users to add posts to a blog.","input":"Not applicable","output":"from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n# Create a post\n@app.route('\/post', methods=['POST'])\ndef create_post():\n data = request.get_json()\n post = {\n 'title': data['title'],\n 'content': data['content'],\n 'author': data['author'],\n }\n # store post in database\n return jsonify(post)\n\nif __name__ == '__main__':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API endpoint with Python and Flask that allows users to add posts to a blog.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n# Create a post\n@app.route('\/post', methods=['POST'])\ndef create_post():\n data = request.get_json()\n post = {\n 'title': data['title'],\n 'content': data['content'],\n 'author': data['author'],\n }\n # store post in database\n return jsonify(post)\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"instruction":"Implement a logistic regression algorithm in Python to solve a classification task.","input":"Not applicable","output":"import numpy as np\n\nclass LogisticRegression:\n    def __init__(self, learning_rate=0.001, max_iter=1000):\n        self.learning_rate = learning_rate\n        self.max_iter = max_iter\n        self.weights = None\n\n    def sigmoid(self, z):\n        return 1 \/ (1 + np.exp(-z))\n\n\n    def fit(self, X, y):\n        # add bias term to X\n        X = np.hstack([np.ones([X.shape[0], 1]), X])\n        num_features = X.shape[1]\n        self.weights = np.zeros(num_features)\n\n        for _ in range(self.max_iter):\n            # compute the linear combination of the input and weights (z)\n            z = np.dot(X, self.weights)\n            # compute the model output (a)\n            a = self.sigmoid(z)\n            # compute the cost of the model output\n            cost = (-y * np.log(a) - (1 - y) * np.log(1 - a)).mean()\n            # compute the derivatives of the cost for each weights\n            dCost_dw = np.dot(X.T, (a - y)) \/ len(y)\n            # update weights\n            self.weights -= self.learning_rate * dCost_dw\n\n    def predict(self, X):\n        # add bias term to X\n        X = np.hstack([np.ones([X.shape[0], 1]), X])\n        z = np.dot(X, self.weights)\n        a = self.sigmoid(z) \n        return np.round(a)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a logistic regression algorithm in Python to solve a classification task.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\n\nclass LogisticRegression:\n    def __init__(self, learning_rate=0.001, max_iter=1000):\n        self.learning_rate = learning_rate\n        self.max_iter = max_iter\n        self.weights = None\n\n    def sigmoid(self, z):\n        return 1 \/ (1 + np.exp(-z))\n\n\n    def fit(self, X, y):\n        # add bias term to X\n        X = np.hstack([np.ones([X.shape[0], 1]), X])\n        num_features = X.shape[1]\n        self.weights = np.zeros(num_features)\n\n        for _ in range(self.max_iter):\n            # compute the linear combination of the input and weights (z)\n            z = np.dot(X, self.weights)\n            # compute the model output (a)\n            a = self.sigmoid(z)\n            # compute the cost of the model output\n            cost = (-y * np.log(a) - (1 - y) * np.log(1 - a)).mean()\n            # compute the derivatives of the cost for each weights\n            dCost_dw = np.dot(X.T, (a - y)) \/ len(y)\n            # update weights\n            self.weights -= self.learning_rate * dCost_dw\n\n    def predict(self, X):\n        # add bias term to X\n        X = np.hstack([np.ones([X.shape[0], 1]), X])\n        z = np.dot(X, self.weights)\n        a = self.sigmoid(z) \n        return np.round(a)"}
{"instruction":"Create an algorithm in Python to calculate the prime factors of an integer number.","input":"","output":"def primeFactors(n): \n    pf = [] \n    i = 2\n    while i * i <= n: \n        if n % i: \n            i += 1\n        else: \n            n \/\/= i \n            pf.append(i)\n    if n > 1: \n        pf.append(n)\n  \n    return pf","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to calculate the prime factors of an integer number.\n\n### Input:\n\n\n### Output:\ndef primeFactors(n): \n    pf = [] \n    i = 2\n    while i * i <= n: \n        if n % i: \n            i += 1\n        else: \n            n \/\/= i \n            pf.append(i)\n    if n > 1: \n        pf.append(n)\n  \n    return pf"}
{"instruction":"Design a python program that stores data associated to each user as a dictionary.","input":"","output":"users = {} \n\ndef addUser(name, details): \n    users[name] = details \n\ndef getUser(name): \n    return users[name] \n\n# Add new user\naddUser('John', {'age': 25, 'email': 'john@example.com'})\n\n# Get user details\nuser_details = getUser('John')\nprint('Age: ', user_details['age'])\nprint('Email: ', user_details['email'])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program that stores data associated to each user as a dictionary.\n\n### Input:\n\n\n### Output:\nusers = {} \n\ndef addUser(name, details): \n    users[name] = details \n\ndef getUser(name): \n    return users[name] \n\n# Add new user\naddUser('John', {'age': 25, 'email': 'john@example.com'})\n\n# Get user details\nuser_details = getUser('John')\nprint('Age: ', user_details['age'])\nprint('Email: ', user_details['email'])"}
{"instruction":"Write a Python program to print out the Fibonacci sequence, up to the 100th number in the sequence.","input":"Not applicable","output":"def fibonacci(n):\n a, b = 0, 1\n while a < n:\n print(a, end=' ')\n a, b = b, a + b\n print()\n\nfibonacci(100)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print out the Fibonacci sequence, up to the 100th number in the sequence.\n\n### Input:\nNot applicable\n\n### Output:\ndef fibonacci(n):\n a, b = 0, 1\n while a < n:\n print(a, end=' ')\n a, b = b, a + b\n print()\n\nfibonacci(100)"}
{"instruction":"Generate a Python function to generate an equation with given coefficients and variables.","input":"coefficients: [2, 3, 1], variables: [\"x\", \"y\", \"z\"]","output":"def generate_equation(coefficients, variables):\n equation = \"\"\n for i, coeff in enumerate(coefficients):\n  equation += str(coeff) + variables[i] + \" + \"\n equation = equation[:-3]\n return equation","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to generate an equation with given coefficients and variables.\n\n### Input:\ncoefficients: [2, 3, 1], variables: [\"x\", \"y\", \"z\"]\n\n### Output:\ndef generate_equation(coefficients, variables):\n equation = \"\"\n for i, coeff in enumerate(coefficients):\n  equation += str(coeff) + variables[i] + \" + \"\n equation = equation[:-3]\n return equation"}
{"instruction":"Create an algorithm in Python to check if a given string is a valid IP address.","input":"","output":"def is_valid_ip(ip_address):\n    parts = ip_address.split('.')\n    if len(parts) != 4:\n        return False\n    for part in parts:\n        try:\n            if not 0 <= int(part) <= 255:\n                return False\n        except ValueError:\n            return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to check if a given string is a valid IP address.\n\n### Input:\n\n\n### Output:\ndef is_valid_ip(ip_address):\n    parts = ip_address.split('.')\n    if len(parts) != 4:\n        return False\n    for part in parts:\n        try:\n            if not 0 <= int(part) <= 255:\n                return False\n        except ValueError:\n            return False\n    return True"}
{"instruction":"Optimize this python code to reduce the number of lines and make it more efficient","input":"def calculate_sum(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    return sum","output":"def calculate_sum(numbers):\n    return sum(numbers)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize this python code to reduce the number of lines and make it more efficient\n\n### Input:\ndef calculate_sum(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    return sum\n\n### Output:\ndef calculate_sum(numbers):\n    return sum(numbers)"}
{"instruction":"Create a Python program to calculate the sum of natural numbers below a certain number.","input":"n=100","output":"def sumNaturalNumbers(n): \n  sum = 0\n  for i in range(1, n+1): \n    sum+=i \n  return sum\n    \nprint(sumNaturalNumbers(100))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the sum of natural numbers below a certain number.\n\n### Input:\nn=100\n\n### Output:\ndef sumNaturalNumbers(n): \n  sum = 0\n  for i in range(1, n+1): \n    sum+=i \n  return sum\n    \nprint(sumNaturalNumbers(100))"}
{"instruction":"Generate a Python program to clean a string of HTML tags.","input":"Example Input: \"<p>This is a <b>test<\/b> string<\/p>\".","output":"import re\n\n# Clean a string of HTML tags \ndef clean_html_tags(str):\n    clean_str = re.sub(\"<.*?>\", \"\", str)\n    return clean_str\n\nhtml_string = \"<p>This is a <b>test<\/b> string<\/p>\"\n\nclean_str = clean_html_tags(html_string)\n\nprint(clean_str) #This is a test string","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to clean a string of HTML tags.\n\n### Input:\nExample Input: \"<p>This is a <b>test<\/b> string<\/p>\".\n\n### Output:\nimport re\n\n# Clean a string of HTML tags \ndef clean_html_tags(str):\n    clean_str = re.sub(\"<.*?>\", \"\", str)\n    return clean_str\n\nhtml_string = \"<p>This is a <b>test<\/b> string<\/p>\"\n\nclean_str = clean_html_tags(html_string)\n\nprint(clean_str) #This is a test string"}
{"instruction":"Build a program in Python to print out the first n prime numbers.","input":"The value of n: 10","output":"def n_primes(n):\n    count = 0\n    number = 2\n\n    while count < n:\n        is_prime = True\n\n        for i in range (2, number): \n            if number % i == 0:\n                is_prime = False\n        \n        if is_prime: \n            print(number, end=\" \")\n            count += 1\n\n        number += 1\n\n\nn_primes(10)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a program in Python to print out the first n prime numbers.\n\n### Input:\nThe value of n: 10\n\n### Output:\ndef n_primes(n):\n    count = 0\n    number = 2\n\n    while count < n:\n        is_prime = True\n\n        for i in range (2, number): \n            if number % i == 0:\n                is_prime = False\n        \n        if is_prime: \n            print(number, end=\" \")\n            count += 1\n\n        number += 1\n\n\nn_primes(10)"}
{"instruction":"Convert a given Python function to a JavaScript function.","input":"def showMessage(message):\n    print(message)","output":"function showMessage(message) {\n console.log(message);\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a given Python function to a JavaScript function.\n\n### Input:\ndef showMessage(message):\n    print(message)\n\n### Output:\nfunction showMessage(message) {\n console.log(message);\n}"}
{"instruction":"Create a function in Python to remove all characters which are not alphanumeric from a given string.","input":"text = \"This is a $tring with #ymbols\"","output":"def remove_nonalphanum(text):\n  new_string = \"\"\n  for char in text:\n    if char.isalnum():\n      new_string += char\n  return new_string\n\ncleaned_string = remove_nonalphanum(text)\nprint(cleaned_string) #prints \"ThisisaStringwithymbols\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to remove all characters which are not alphanumeric from a given string.\n\n### Input:\ntext = \"This is a $tring with #ymbols\"\n\n### Output:\ndef remove_nonalphanum(text):\n  new_string = \"\"\n  for char in text:\n    if char.isalnum():\n      new_string += char\n  return new_string\n\ncleaned_string = remove_nonalphanum(text)\nprint(cleaned_string) #prints \"ThisisaStringwithymbols\""}
{"instruction":"Create a Python program that prints the sum of all integers that are divisible by 3 and 5 from 0 to a given number.","input":"Max number: 10","output":"def sum_divisible_by_3_and_5(n):\n s = 0\n for i in range(n + 1):\n if i % 3 == 0 or i % 5 == 0:\n s += i\n return s\n\nprint(sum_divisible_by_3_and_5(10)) # 33","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that prints the sum of all integers that are divisible by 3 and 5 from 0 to a given number.\n\n### Input:\nMax number: 10\n\n### Output:\ndef sum_divisible_by_3_and_5(n):\n s = 0\n for i in range(n + 1):\n if i % 3 == 0 or i % 5 == 0:\n s += i\n return s\n\nprint(sum_divisible_by_3_and_5(10)) # 33"}
{"instruction":"Create a Python function that prints out the permutations of a list of words.","input":"words = ['cat', 'dog', 'bird']","output":"def permutations(words):\n \n  if len(words) == 0:\n    return []\n  elif len(words) == 1: \n    return [words]\n  else:\n    perms = []\n    for word in words: \n      remaining_words = words[:] \n      remaining_words.remove(word)\n      z = permutations(remaining_words)   \n      for perm in z: \n        perms.append([word] + perm)\n    return perms\n \n# Test \nwords = ['cat', 'dog', 'bird']\nprint(permutations(words))\n\n# Output \n[['cat', 'dog', 'bird'], ['cat', 'bird', 'dog'], ['dog', 'cat', 'bird'], ['dog', 'bird', 'cat'], ['bird', 'cat', 'dog'], ['bird', 'dog', 'cat']]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that prints out the permutations of a list of words.\n\n### Input:\nwords = ['cat', 'dog', 'bird']\n\n### Output:\ndef permutations(words):\n \n  if len(words) == 0:\n    return []\n  elif len(words) == 1: \n    return [words]\n  else:\n    perms = []\n    for word in words: \n      remaining_words = words[:] \n      remaining_words.remove(word)\n      z = permutations(remaining_words)   \n      for perm in z: \n        perms.append([word] + perm)\n    return perms\n \n# Test \nwords = ['cat', 'dog', 'bird']\nprint(permutations(words))\n\n# Output \n[['cat', 'dog', 'bird'], ['cat', 'bird', 'dog'], ['dog', 'cat', 'bird'], ['dog', 'bird', 'cat'], ['bird', 'cat', 'dog'], ['bird', 'dog', 'cat']]"}
{"instruction":"Create an email client GUI in Python using Tkinter library","input":"","output":"import tkinter as tk\n \n# create a main window\nwindow = tk.Tk()\nwindow.title(\"Email Client\")  \n    \n# add labels and entry fields\nlbl_from = tk.Label(window, text=\"From:\")\nlbl_from.grid(padx=10, pady=10, row=0, column=0, sticky=\"W\")\nent_from = tk.Entry(window,width=50)\nent_from.grid(padx=10, pady=10, row=0, column=1)\n \nlbl_to = tk.Label(window, text=\"To:\")\nlbl_to.grid(padx=10, pady=10, row=1, column=0, sticky=\"W\")\nent_to = tk.Entry(window,width=50)\nent_to.grid(padx=10, pady=10, row=1, column=1) \n \nlbl_subject = tk.Label(window, text=\"Subject:\")\nlbl_subject.grid(padx=10, pady=10, row=2, column=0, sticky=\"W\")\nent_subject = tk.Entry(window,width=50)\nent_subject.grid(padx=10, pady=10, row=2, column=1)\n \nlbl_body = tk.Label(window, text=\"Body:\")\nlbl_body.grid(padx=10, pady=10, row=3,column=0, sticky=\"W\")\ntxt_body = tk.Text(window, height=10, width=50)\ntxt_body.grid(padx=10, pady=10, row=3, column=1)\n \n# enter main loop\nwindow.mainloop()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an email client GUI in Python using Tkinter library\n\n### Input:\n\n\n### Output:\nimport tkinter as tk\n \n# create a main window\nwindow = tk.Tk()\nwindow.title(\"Email Client\")  \n    \n# add labels and entry fields\nlbl_from = tk.Label(window, text=\"From:\")\nlbl_from.grid(padx=10, pady=10, row=0, column=0, sticky=\"W\")\nent_from = tk.Entry(window,width=50)\nent_from.grid(padx=10, pady=10, row=0, column=1)\n \nlbl_to = tk.Label(window, text=\"To:\")\nlbl_to.grid(padx=10, pady=10, row=1, column=0, sticky=\"W\")\nent_to = tk.Entry(window,width=50)\nent_to.grid(padx=10, pady=10, row=1, column=1) \n \nlbl_subject = tk.Label(window, text=\"Subject:\")\nlbl_subject.grid(padx=10, pady=10, row=2, column=0, sticky=\"W\")\nent_subject = tk.Entry(window,width=50)\nent_subject.grid(padx=10, pady=10, row=2, column=1)\n \nlbl_body = tk.Label(window, text=\"Body:\")\nlbl_body.grid(padx=10, pady=10, row=3,column=0, sticky=\"W\")\ntxt_body = tk.Text(window, height=10, width=50)\ntxt_body.grid(padx=10, pady=10, row=3, column=1)\n \n# enter main loop\nwindow.mainloop()"}
{"instruction":"Write a Python function to insert an element in a given list after a given index.","input":"list = [1, 2, 3, 4, 5]\nindex = 2\nelement = 6","output":"def insert_element(list, index, element):\n    list.insert(index + 1, element)\n    return list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to insert an element in a given list after a given index.\n\n### Input:\nlist = [1, 2, 3, 4, 5]\nindex = 2\nelement = 6\n\n### Output:\ndef insert_element(list, index, element):\n    list.insert(index + 1, element)\n    return list"}
{"instruction":"Create a python script to pass command line arguments to a function.","input":"","output":"# Pass command line arguments to a function\n\nimport sys\n \ndef command_line_args():\n    args = []\n    # Loop over the command line arguments\n    for arg in sys.argv[1:]:\n        args.append(arg)\n    return args\n \nargs = command_line_args()\nprint(args)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to pass command line arguments to a function.\n\n### Input:\n\n\n### Output:\n# Pass command line arguments to a function\n\nimport sys\n \ndef command_line_args():\n    args = []\n    # Loop over the command line arguments\n    for arg in sys.argv[1:]:\n        args.append(arg)\n    return args\n \nargs = command_line_args()\nprint(args)"}
{"instruction":"Create a webserver with Python which listens at port 80 and responds with a \"Hello World!\" message.","input":"","output":"import http.server\n\nserver_address = ('', 80)\n\nclass MyHttpRequestHandler(http.server.SimpleHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type','text\/html')\n        self.end_headers()\n        self.wfile.write(b\"Hello World!\")\n\nhttpd = http.server.HTTPServer(server_address, MyHttpRequestHandler)\nhttpd.serve_forever()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a webserver with Python which listens at port 80 and responds with a \"Hello World!\" message.\n\n### Input:\n\n\n### Output:\nimport http.server\n\nserver_address = ('', 80)\n\nclass MyHttpRequestHandler(http.server.SimpleHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type','text\/html')\n        self.end_headers()\n        self.wfile.write(b\"Hello World!\")\n\nhttpd = http.server.HTTPServer(server_address, MyHttpRequestHandler)\nhttpd.serve_forever()"}
{"instruction":"Create a web scraper using Python to extract data from a website.","input":"https:\/\/www.example.com","output":"# import library\nimport requests\nfrom bs4 import BeautifulSoup\n \n# create a variable with the target URL\nurl = \"https:\/\/www.example.com\"\n \n# use requests library to get website content\nr = requests.get(url) \n \n# parse html content\nsoup = BeautifulSoup(r.content, 'html.parser') \n \n# store all the data in a list\ndata_list = []\n \n# extract data\nfor div in soup.find_all('div'):\n    data = div.find_all('p')\n    for row in data:\n        data_list.append(row.text.strip())\n \n# print the data \nprint(data_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper using Python to extract data from a website.\n\n### Input:\nhttps:\/\/www.example.com\n\n### Output:\n# import library\nimport requests\nfrom bs4 import BeautifulSoup\n \n# create a variable with the target URL\nurl = \"https:\/\/www.example.com\"\n \n# use requests library to get website content\nr = requests.get(url) \n \n# parse html content\nsoup = BeautifulSoup(r.content, 'html.parser') \n \n# store all the data in a list\ndata_list = []\n \n# extract data\nfor div in soup.find_all('div'):\n    data = div.find_all('p')\n    for row in data:\n        data_list.append(row.text.strip())\n \n# print the data \nprint(data_list)"}
{"instruction":"Create a sentiment analysis algorithm in Python that evaluates the sentiment of a text document.","input":"<no input>","output":"import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# Create the sentiment analyzer object\nsentiment_analyzer = SentimentIntensityAnalyzer()\n\n# Read the text document\ntext = open('example.txt', 'r').read()\n\n# Get the sentiment scores\nsentiment_scores = sentiment_analyzer.polarity_scores(text)\n\n# Print the sentiment\nfor key in sentiment_scores:\n print('{0}: {1}, '.format(key, sentiment_scores[key]), end='')\n\nprint('\\nThe sentiment of the text is: ', end='')\n\nif sentiment_scores['compound'] >= 0.05:\n print('Positive')\nelif sentiment_scores['compound'] <= - 0.05:\n print('Negative')\nelse:\n print('Neutral')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sentiment analysis algorithm in Python that evaluates the sentiment of a text document.\n\n### Input:\n<no input>\n\n### Output:\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# Create the sentiment analyzer object\nsentiment_analyzer = SentimentIntensityAnalyzer()\n\n# Read the text document\ntext = open('example.txt', 'r').read()\n\n# Get the sentiment scores\nsentiment_scores = sentiment_analyzer.polarity_scores(text)\n\n# Print the sentiment\nfor key in sentiment_scores:\n print('{0}: {1}, '.format(key, sentiment_scores[key]), end='')\n\nprint('\\nThe sentiment of the text is: ', end='')\n\nif sentiment_scores['compound'] >= 0.05:\n print('Positive')\nelif sentiment_scores['compound'] <= - 0.05:\n print('Negative')\nelse:\n print('Neutral')"}
{"instruction":"Design an algorithm in Python that can solve a Rubik\u2019s cube.","input":"Not applicable","output":"def execute_moves(cube, moves):\n# Executes a specified set of moves on a rubik's cube\n# cube: list representing a rubik's cube\n# move: list of moves, each move specifying a set of slices to rotate\n\n\tfor move in moves:\n\t\trotate_cube(cube, move)\n\ndef rotate_cube(cube, move):\n# Rotates the sides of a rubik's cube according to a single move\n# cube: list representing a rubik's cube\n# move: list of slices of a rubik's cube to rotate\n\n\t# Perform rotations \n\tfor slice in move:\n\t\tcube[slice] = rotate_layer(cube[slice])\n\n\treturn cube\n\ndef rotate_layer(slice):\n# Rotates a single layer of a rubik's cube\n# slice: 3x3 list of the values in that layer\n\n\t# Rotate the layer clockwise\n\treturn [slice[2][0],slice[1][0],slice[0][0],\n    slice[2][1],slice[1][1],slice[0][1],\n    slice[2][2],slice[1][2],slice[0][2]]\n\ndef solve_cube(cube):\n# Main function that solves a rubik's cube\n# cube: list representing a rubik's cube\n\n\t# Determine cube state by analyzing thecube[i][j][k] values\n\tscramble_state = analyze_cube(cube)\n\n\t# Find the sequence of moves required to solve thecube[i][j][k]\n\tmoves = get_solve_moves(scramble_state)\n\n\t# Execute moves to solve thecube[i][j][k]\n\texecute_moves(cube, moves)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that can solve a Rubik\u2019s cube.\n\n### Input:\nNot applicable\n\n### Output:\ndef execute_moves(cube, moves):\n# Executes a specified set of moves on a rubik's cube\n# cube: list representing a rubik's cube\n# move: list of moves, each move specifying a set of slices to rotate\n\n\tfor move in moves:\n\t\trotate_cube(cube, move)\n\ndef rotate_cube(cube, move):\n# Rotates the sides of a rubik's cube according to a single move\n# cube: list representing a rubik's cube\n# move: list of slices of a rubik's cube to rotate\n\n\t# Perform rotations \n\tfor slice in move:\n\t\tcube[slice] = rotate_layer(cube[slice])\n\n\treturn cube\n\ndef rotate_layer(slice):\n# Rotates a single layer of a rubik's cube\n# slice: 3x3 list of the values in that layer\n\n\t# Rotate the layer clockwise\n\treturn [slice[2][0],slice[1][0],slice[0][0],\n    slice[2][1],slice[1][1],slice[0][1],\n    slice[2][2],slice[1][2],slice[0][2]]\n\ndef solve_cube(cube):\n# Main function that solves a rubik's cube\n# cube: list representing a rubik's cube\n\n\t# Determine cube state by analyzing thecube[i][j][k] values\n\tscramble_state = analyze_cube(cube)\n\n\t# Find the sequence of moves required to solve thecube[i][j][k]\n\tmoves = get_solve_moves(scramble_state)\n\n\t# Execute moves to solve thecube[i][j][k]\n\texecute_moves(cube, moves)"}
{"instruction":"Modify the following Python function to get the first index of the keyword within the string.","input":"def first_index(str, keyword):\n    for i in range(len(str)):\n        if str[i] == keyword:\n            return i","output":"def first_index(str, keyword):\n    for i in range(len(str)):\n        if str[i] == keyword:\n            return i\n    return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following Python function to get the first index of the keyword within the string.\n\n### Input:\ndef first_index(str, keyword):\n    for i in range(len(str)):\n        if str[i] == keyword:\n            return i\n\n### Output:\ndef first_index(str, keyword):\n    for i in range(len(str)):\n        if str[i] == keyword:\n            return i\n    return -1"}
{"instruction":"Detect the data type of a given string in Python.","input":"String: \"Hello World!\"","output":"str type","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDetect the data type of a given string in Python.\n\n### Input:\nString: \"Hello World!\"\n\n### Output:\nstr type"}
{"instruction":"Create a python program to check if a list is palindromic.","input":"list1 = [1,2,3,2,1]","output":"def is_palindrome(lst):\n  if len(lst) < 2:\n    return True\n  if lst[0] != lst[-1]:\n    return False\n  return is_palindrome(lst[1:-1])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to check if a list is palindromic.\n\n### Input:\nlist1 = [1,2,3,2,1]\n\n### Output:\ndef is_palindrome(lst):\n  if len(lst) < 2:\n    return True\n  if lst[0] != lst[-1]:\n    return False\n  return is_palindrome(lst[1:-1])"}
{"instruction":"Write a Python program to scrape the text from a web page and remove all the html tags.","input":"<p>This is a sample web page.<br>This text has <b>some<\/b> <i>html<\/i> tags.<\/p>","output":"import re\n\ntext = \"<p>This is a sample web page.<br>This text has <b>some<\/b> <i>html<\/i> tags.<\/p>\"\n\ncleaned_text = re.sub(r'<.*?>', '', text)\n\nprint(cleaned_text)\n# Output: This is a sample web page.This text has some html tags.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to scrape the text from a web page and remove all the html tags.\n\n### Input:\n<p>This is a sample web page.<br>This text has <b>some<\/b> <i>html<\/i> tags.<\/p>\n\n### Output:\nimport re\n\ntext = \"<p>This is a sample web page.<br>This text has <b>some<\/b> <i>html<\/i> tags.<\/p>\"\n\ncleaned_text = re.sub(r'<.*?>', '', text)\n\nprint(cleaned_text)\n# Output: This is a sample web page.This text has some html tags."}
{"instruction":"Generate a Python program to print the most popular item in a list.","input":"A list of integers [1, 5, 9, 1, 4, 5, 9]","output":"from collections import Counter\n\ndef most_popular(arr):\n    cnt = Counter()\n    for number in arr:\n        cnt[number] += 1\n    return cnt.most_common(1)[0][0]\n\nresult = most_popular([1, 5, 9, 1, 4, 5, 9])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to print the most popular item in a list.\n\n### Input:\nA list of integers [1, 5, 9, 1, 4, 5, 9]\n\n### Output:\nfrom collections import Counter\n\ndef most_popular(arr):\n    cnt = Counter()\n    for number in arr:\n        cnt[number] += 1\n    return cnt.most_common(1)[0][0]\n\nresult = most_popular([1, 5, 9, 1, 4, 5, 9])\nprint(result)"}
{"instruction":"Develop a Python algorithm to generate a Fibonacci sequence.","input":"","output":"def generateFibonacciSequence(length):\n    sequence = [1, 1]\n    for i in range(2, length):\n        sequence.append( sequence[i-1] + sequence[i-2] )\n    return sequence\n\nprint(generateFibonacciSequence(10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python algorithm to generate a Fibonacci sequence.\n\n### Input:\n\n\n### Output:\ndef generateFibonacciSequence(length):\n    sequence = [1, 1]\n    for i in range(2, length):\n        sequence.append( sequence[i-1] + sequence[i-2] )\n    return sequence\n\nprint(generateFibonacciSequence(10))"}
{"instruction":"Create a Python code to calculate the speed of an object at a given time.","input":"position = 50\ntime = 10","output":"def calculate_speed(position, time): \n    speed = position \/ time \n    return speed\n\nif __name__ == '__main__':\n    position = 50\n    time = 10\n    speed = calculate_speed(position, time)\n    print(speed)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code to calculate the speed of an object at a given time.\n\n### Input:\nposition = 50\ntime = 10\n\n### Output:\ndef calculate_speed(position, time): \n    speed = position \/ time \n    return speed\n\nif __name__ == '__main__':\n    position = 50\n    time = 10\n    speed = calculate_speed(position, time)\n    print(speed)"}
{"instruction":"Write a Python program to quickly search for a substring in a larger string.","input":"string = \"hello world\" substring = \"or\"","output":"def search_substring(string, substring):\n    index = string.find(substring)\n    return index \n\nresult = search_substring(\"hello world\", \"or\")\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to quickly search for a substring in a larger string.\n\n### Input:\nstring = \"hello world\" substring = \"or\"\n\n### Output:\ndef search_substring(string, substring):\n    index = string.find(substring)\n    return index \n\nresult = search_substring(\"hello world\", \"or\")\nprint(result)"}
{"instruction":"Design a Python program which sorts a list of integers from lowest to highest.","input":"[5, 2, 4, 1, 3]","output":"def sort_list(list):\n     for i in range(0, len(list)): \n          for j in range(0, len(list) - 1 - i): \n               if list[j] > list[j + 1]: \n                    list[j], list[j + 1] = list[j + 1], list[j]\n     return list\n\nlist = [5, 2, 4, 1, 3]\n\nsorted_list = sort_list(list)\n\nprint(sorted_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program which sorts a list of integers from lowest to highest.\n\n### Input:\n[5, 2, 4, 1, 3]\n\n### Output:\ndef sort_list(list):\n     for i in range(0, len(list)): \n          for j in range(0, len(list) - 1 - i): \n               if list[j] > list[j + 1]: \n                    list[j], list[j + 1] = list[j + 1], list[j]\n     return list\n\nlist = [5, 2, 4, 1, 3]\n\nsorted_list = sort_list(list)\n\nprint(sorted_list)"}
{"instruction":"Design a command-line interface in Python to accept user input","input":"","output":"import sys\n\n# collect the user's input\nuser_input = input('Enter your command: ')\n\n# process the user's input and execute the corresponding command\nif user_input == 'exit':\n    sys.exit()\nelif user_input == 'help':\n    print('This is a helpful message.')\nelse:\n    print('Command not recognized, try again.')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a command-line interface in Python to accept user input\n\n### Input:\n\n\n### Output:\nimport sys\n\n# collect the user's input\nuser_input = input('Enter your command: ')\n\n# process the user's input and execute the corresponding command\nif user_input == 'exit':\n    sys.exit()\nelif user_input == 'help':\n    print('This is a helpful message.')\nelse:\n    print('Command not recognized, try again.')"}
{"instruction":"This code is a Python script that defines a class called \"source\" with several methods for searching and retrieving movie and TV show sources from the website filmpalast.to. To use this code, import the \"source\" class and create an instance of it, then call its methods to search for and retrieve sources for specific movies or TV shows.","input":"","output":"# -*- coding: UTF-8 -*-\n\n#  ..#######.########.#######.##....#..######..######.########....###...########.#######.########..######.\n#  .##.....#.##.....#.##......###...#.##....#.##....#.##.....#...##.##..##.....#.##......##.....#.##....##\n#  .##.....#.##.....#.##......####..#.##......##......##.....#..##...##.##.....#.##......##.....#.##......\n#  .##.....#.########.######..##.##.#..######.##......########.##.....#.########.######..########..######.\n#  .##.....#.##.......##......##..###.......#.##......##...##..########.##.......##......##...##........##\n#  .##.....#.##.......##......##...##.##....#.##....#.##....##.##.....#.##.......##......##....##.##....##\n#  ..#######.##.......#######.##....#..######..######.##.....#.##.....#.##.......#######.##.....#..######.\n\n#######################################################################\n# ----------------------------------------------------------------------------\n# \"THE BEER-WARE LICENSE\" (Revision 42):\n# @Daddy_Blamo wrote this file.  As long as you retain this notice you\n# can do whatever you want with this stuff. If we meet some day, and you think\n# this stuff is worth it, you can buy me a beer in return. - Muad'Dib\n# ----------------------------------------------------------------------------\n#######################################################################\n\n# Addon Name: Placenta\n# Addon id: plugin.video.placenta\n# Addon Provider: Mr.Blamo\n\nimport json\nimport re\nimport urllib\nimport urlparse\n\nfrom openscrapers.modules import cleantitle\nfrom openscrapers.modules import client\nfrom openscrapers.modules import dom_parser\nfrom openscrapers.modules import source_utils\n\n\nclass source:\n    def __init__(self):\n        self.priority = 1\n        self.language = ['de']\n        self.domains = ['filmpalast.to']\n        self.base_link = 'http:\/\/filmpalast.to'\n        self.search_link = '\/search\/title\/%s'\n        self.stream_link = 'stream\/%s\/1'\n\n    def movie(self, imdb, title, localtitle, aliases, year):\n        try:\n            url = self.__search([localtitle] + source_utils.aliases_to_array(aliases))\n            if not url and title != localtitle: url = self.__search([title] + source_utils.aliases_to_array(aliases))\n            return url\n        except:\n            return\n\n    def tvshow(self, imdb, tvdb, tvshowtitle, localtvshowtitle, aliases, year):\n        try:\n            url = {'imdb': imdb, 'tvdb': tvdb, 'tvshowtitle': tvshowtitle, 'localtvshowtitle': localtvshowtitle,\n                   'aliases': aliases, 'year': year}\n            url = urllib.urlencode(url)\n            return url\n        except:\n            return\n\n    def episode(self, url, imdb, tvdb, title, premiered, season, episode):\n        try:\n            if not url:\n                return\n\n            data = urlparse.parse_qs(url)\n            data = dict([(i, data[i][0]) if data[i] else (i, '') for i in data])\n            title = data['localtvshowtitle']\n            title += ' S%02dE%02d' % (int(season), int(episode))\n            aliases = source_utils.aliases_to_array(eval(data['aliases']))\n            aliases = [i + ' S%02dE%02d' % (int(season), int(episode)) for i in aliases]\n\n            url = self.__search([title] + aliases)\n            if not url and data['tvshowtitle'] != data['localtvshowtitle']:\n                title = data['tvshowtitle']\n                title += ' S%02dE%02d' % (int(season), int(episode))\n                url = self.__search([title] + aliases)\n            return url\n        except:\n            return\n\n    def sources(self, url, hostDict, hostprDict):\n        sources = []\n\n        try:\n            if not url:\n                return sources\n\n            query = urlparse.urljoin(self.base_link, url)\n\n            r = client.request(query)\n\n            quality = dom_parser.parse_dom(r, 'span', attrs={'id': 'release_text'})[0].content.split('&nbsp;')[0]\n            quality, info = source_utils.get_release_quality(quality)\n\n            r = dom_parser.parse_dom(r, 'ul', attrs={'class': 'currentStreamLinks'})\n            r = [(dom_parser.parse_dom(i, 'p', attrs={'class': 'hostName'}),\n                  dom_parser.parse_dom(i, 'a', attrs={'class': 'stream-src'}, req='data-id')) for i in r]\n            r = [(re.sub(' hd$', '', i[0][0].content.lower()), [x.attrs['data-id'] for x in i[1]]) for i in r if\n                 i[0] and i[1]]\n\n            for hoster, id in r:\n                valid, hoster = source_utils.is_host_valid(hoster, hostDict)\n                if not valid: continue\n\n                sources.append({'source': hoster, 'quality': quality, 'language': 'de',\n                                'info': ' | '.join(info + ['' if len(id) == 1 else 'multi-part']), 'url': id,\n                                'direct': False, 'debridonly': False, 'checkquality': True})\n\n            return sources\n        except:\n            return sources\n\n    def resolve(self, url):\n        try:\n            h_url = []\n\n            for id in url:\n                query = urlparse.urljoin(self.base_link, self.stream_link % id)\n                r = client.request(query, XHR=True, post=urllib.urlencode({'streamID': id}))\n                r = json.loads(r)\n                if 'error' in r and r['error'] == '0' and 'url' in r:\n                    h_url.append(r['url'])\n\n            h_url = h_url[0] if len(h_url) == 1 else 'stack:\/\/' + ' , '.join(h_url)\n\n            return h_url\n        except:\n            return\n\n    def __search(self, titles):\n        try:\n            query = self.search_link % (urllib.quote_plus(titles[0]))\n            query = urlparse.urljoin(self.base_link, query)\n\n            t = [cleantitle.get(i) for i in set(titles) if i]\n\n            r = client.request(query)\n\n            r = dom_parser.parse_dom(r, 'article')\n            r = dom_parser.parse_dom(r, 'a', attrs={'class': 'rb'}, req='href')\n            r = [(i.attrs['href'], i.content) for i in r]\n            r = [i[0] for i in r if cleantitle.get(i[1]) in t][0]\n\n            return source_utils.strip_domain(r)\n        except:\n            return\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a Python script that defines a class called \"source\" with several methods for searching and retrieving movie and TV show sources from the website filmpalast.to. To use this code, import the \"source\" class and create an instance of it, then call its methods to search for and retrieve sources for specific movies or TV shows.\n\n### Input:\n\n\n### Output:\n# -*- coding: UTF-8 -*-\n\n#  ..#######.########.#######.##....#..######..######.########....###...########.#######.########..######.\n#  .##.....#.##.....#.##......###...#.##....#.##....#.##.....#...##.##..##.....#.##......##.....#.##....##\n#  .##.....#.##.....#.##......####..#.##......##......##.....#..##...##.##.....#.##......##.....#.##......\n#  .##.....#.########.######..##.##.#..######.##......########.##.....#.########.######..########..######.\n#  .##.....#.##.......##......##..###.......#.##......##...##..########.##.......##......##...##........##\n#  .##.....#.##.......##......##...##.##....#.##....#.##....##.##.....#.##.......##......##....##.##....##\n#  ..#######.##.......#######.##....#..######..######.##.....#.##.....#.##.......#######.##.....#..######.\n\n#######################################################################\n# ----------------------------------------------------------------------------\n# \"THE BEER-WARE LICENSE\" (Revision 42):\n# @Daddy_Blamo wrote this file.  As long as you retain this notice you\n# can do whatever you want with this stuff. If we meet some day, and you think\n# this stuff is worth it, you can buy me a beer in return. - Muad'Dib\n# ----------------------------------------------------------------------------\n#######################################################################\n\n# Addon Name: Placenta\n# Addon id: plugin.video.placenta\n# Addon Provider: Mr.Blamo\n\nimport json\nimport re\nimport urllib\nimport urlparse\n\nfrom openscrapers.modules import cleantitle\nfrom openscrapers.modules import client\nfrom openscrapers.modules import dom_parser\nfrom openscrapers.modules import source_utils\n\n\nclass source:\n    def __init__(self):\n        self.priority = 1\n        self.language = ['de']\n        self.domains = ['filmpalast.to']\n        self.base_link = 'http:\/\/filmpalast.to'\n        self.search_link = '\/search\/title\/%s'\n        self.stream_link = 'stream\/%s\/1'\n\n    def movie(self, imdb, title, localtitle, aliases, year):\n        try:\n            url = self.__search([localtitle] + source_utils.aliases_to_array(aliases))\n            if not url and title != localtitle: url = self.__search([title] + source_utils.aliases_to_array(aliases))\n            return url\n        except:\n            return\n\n    def tvshow(self, imdb, tvdb, tvshowtitle, localtvshowtitle, aliases, year):\n        try:\n            url = {'imdb': imdb, 'tvdb': tvdb, 'tvshowtitle': tvshowtitle, 'localtvshowtitle': localtvshowtitle,\n                   'aliases': aliases, 'year': year}\n            url = urllib.urlencode(url)\n            return url\n        except:\n            return\n\n    def episode(self, url, imdb, tvdb, title, premiered, season, episode):\n        try:\n            if not url:\n                return\n\n            data = urlparse.parse_qs(url)\n            data = dict([(i, data[i][0]) if data[i] else (i, '') for i in data])\n            title = data['localtvshowtitle']\n            title += ' S%02dE%02d' % (int(season), int(episode))\n            aliases = source_utils.aliases_to_array(eval(data['aliases']))\n            aliases = [i + ' S%02dE%02d' % (int(season), int(episode)) for i in aliases]\n\n            url = self.__search([title] + aliases)\n            if not url and data['tvshowtitle'] != data['localtvshowtitle']:\n                title = data['tvshowtitle']\n                title += ' S%02dE%02d' % (int(season), int(episode))\n                url = self.__search([title] + aliases)\n            return url\n        except:\n            return\n\n    def sources(self, url, hostDict, hostprDict):\n        sources = []\n\n        try:\n            if not url:\n                return sources\n\n            query = urlparse.urljoin(self.base_link, url)\n\n            r = client.request(query)\n\n            quality = dom_parser.parse_dom(r, 'span', attrs={'id': 'release_text'})[0].content.split('&nbsp;')[0]\n            quality, info = source_utils.get_release_quality(quality)\n\n            r = dom_parser.parse_dom(r, 'ul', attrs={'class': 'currentStreamLinks'})\n            r = [(dom_parser.parse_dom(i, 'p', attrs={'class': 'hostName'}),\n                  dom_parser.parse_dom(i, 'a', attrs={'class': 'stream-src'}, req='data-id')) for i in r]\n            r = [(re.sub(' hd$', '', i[0][0].content.lower()), [x.attrs['data-id'] for x in i[1]]) for i in r if\n                 i[0] and i[1]]\n\n            for hoster, id in r:\n                valid, hoster = source_utils.is_host_valid(hoster, hostDict)\n                if not valid: continue\n\n                sources.append({'source': hoster, 'quality': quality, 'language': 'de',\n                                'info': ' | '.join(info + ['' if len(id) == 1 else 'multi-part']), 'url': id,\n                                'direct': False, 'debridonly': False, 'checkquality': True})\n\n            return sources\n        except:\n            return sources\n\n    def resolve(self, url):\n        try:\n            h_url = []\n\n            for id in url:\n                query = urlparse.urljoin(self.base_link, self.stream_link % id)\n                r = client.request(query, XHR=True, post=urllib.urlencode({'streamID': id}))\n                r = json.loads(r)\n                if 'error' in r and r['error'] == '0' and 'url' in r:\n                    h_url.append(r['url'])\n\n            h_url = h_url[0] if len(h_url) == 1 else 'stack:\/\/' + ' , '.join(h_url)\n\n            return h_url\n        except:\n            return\n\n    def __search(self, titles):\n        try:\n            query = self.search_link % (urllib.quote_plus(titles[0]))\n            query = urlparse.urljoin(self.base_link, query)\n\n            t = [cleantitle.get(i) for i in set(titles) if i]\n\n            r = client.request(query)\n\n            r = dom_parser.parse_dom(r, 'article')\n            r = dom_parser.parse_dom(r, 'a', attrs={'class': 'rb'}, req='href')\n            r = [(i.attrs['href'], i.content) for i in r]\n            r = [i[0] for i in r if cleantitle.get(i[1]) in t][0]\n\n            return source_utils.strip_domain(r)\n        except:\n            return\n"}
{"instruction":"Design a program in Python to reverse a given string.","input":"","output":"def reverse_string(string): \n  rev_str = ''\n  idx = len(string) \n  while idx > 0: \n    rev_str += string[idx-1] \n    idx -= 1\n  return rev_str","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to reverse a given string.\n\n### Input:\n\n\n### Output:\ndef reverse_string(string): \n  rev_str = ''\n  idx = len(string) \n  while idx > 0: \n    rev_str += string[idx-1] \n    idx -= 1\n  return rev_str"}
{"instruction":"We have a list of student records with the following format: name, age and marks. Write a Python program to sort the records in descending order based on marks.","input":"records = [\n    [\"Bob\", 30, 80.50], \n    [\"James\", 32, 65.78], \n    [\"Cameron\", 27, 97.89],\n    [\"Grace\", 24, 76.67]\n]","output":"def sortRecords(records):\n    sortedRecords = sorted(records, key = lambda x: x[2], reverse=True)\n    return sortedRecords\n\nrecords = [\n    [\"Bob\", 30, 80.50], \n    [\"James\", 32, 65.78], \n    [\"Cameron\", 27, 97.89],\n    [\"Grace\", 24, 76.67]\n]\n\nsortedRecords = sortRecords(records)\n\nprint(\"Sorted records: \", sortedRecords)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWe have a list of student records with the following format: name, age and marks. Write a Python program to sort the records in descending order based on marks.\n\n### Input:\nrecords = [\n    [\"Bob\", 30, 80.50], \n    [\"James\", 32, 65.78], \n    [\"Cameron\", 27, 97.89],\n    [\"Grace\", 24, 76.67]\n]\n\n### Output:\ndef sortRecords(records):\n    sortedRecords = sorted(records, key = lambda x: x[2], reverse=True)\n    return sortedRecords\n\nrecords = [\n    [\"Bob\", 30, 80.50], \n    [\"James\", 32, 65.78], \n    [\"Cameron\", 27, 97.89],\n    [\"Grace\", 24, 76.67]\n]\n\nsortedRecords = sortRecords(records)\n\nprint(\"Sorted records: \", sortedRecords)"}
{"instruction":"Generate an algorithm in Python to count the number of inversions in an array.","input":"[3, 5, 2, 1, 4]","output":"def count_inversions(arr):\n  inv_count = 0\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[i] > arr[j]:\n        inv_count += 1\n  return inv_count\n\narr = [3, 5, 2, 1, 4] \nprint(count_inversions(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an algorithm in Python to count the number of inversions in an array.\n\n### Input:\n[3, 5, 2, 1, 4]\n\n### Output:\ndef count_inversions(arr):\n  inv_count = 0\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[i] > arr[j]:\n        inv_count += 1\n  return inv_count\n\narr = [3, 5, 2, 1, 4] \nprint(count_inversions(arr))"}
{"instruction":"Create a Python program to prompt the user for a number (x) and then print the list of its factors in increasing order.","input":"Not applicable","output":"x = int(input(\"Enter a number: \"))\n\n# Initialize list\nfactors = []\n# Find the factors\nfor i in range(1, x + 1):\n    if x % i == 0:\n        factors.append(i)\n# Sort factors\nfactors.sort()\n\n# Print the factors\nprint(\"The factors of\", x, \"are:\")\nfor factor in factors:\n    print(factor)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to prompt the user for a number (x) and then print the list of its factors in increasing order.\n\n### Input:\nNot applicable\n\n### Output:\nx = int(input(\"Enter a number: \"))\n\n# Initialize list\nfactors = []\n# Find the factors\nfor i in range(1, x + 1):\n    if x % i == 0:\n        factors.append(i)\n# Sort factors\nfactors.sort()\n\n# Print the factors\nprint(\"The factors of\", x, \"are:\")\nfor factor in factors:\n    print(factor)"}
{"instruction":"Create a program in Python that takes an array of integers and prints the first odd number from the left side.","input":"arr = [1, 4, 5, 6, 9, 10, 11]","output":"def first_odd(arr):\n    for num in arr:\n        if num % 2 != 0:\n            print(num)\n            break\n\narr = [1, 4, 5, 6, 9, 10, 11]\nfirst_odd(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes an array of integers and prints the first odd number from the left side.\n\n### Input:\narr = [1, 4, 5, 6, 9, 10, 11]\n\n### Output:\ndef first_odd(arr):\n    for num in arr:\n        if num % 2 != 0:\n            print(num)\n            break\n\narr = [1, 4, 5, 6, 9, 10, 11]\nfirst_odd(arr)"}
{"instruction":"Write a Python program to traverse a two-dimensional array and print each row.","input":"[\n    [1, 2, 3],\n    [4, 5, 6]\n]","output":"def traverse_2d_list(list2d):\n    for row in list2d:\n        print(row)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to traverse a two-dimensional array and print each row.\n\n### Input:\n[\n    [1, 2, 3],\n    [4, 5, 6]\n]\n\n### Output:\ndef traverse_2d_list(list2d):\n    for row in list2d:\n        print(row)"}
{"instruction":"Generate a random number from 1 to 10 in Python and assign it to the variable 'number'.","input":"","output":"import random\n\nnumber = random.randint(1, 10)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random number from 1 to 10 in Python and assign it to the variable 'number'.\n\n### Input:\n\n\n### Output:\nimport random\n\nnumber = random.randint(1, 10)"}
{"instruction":"Create a Python program that classifies articles based on sentiment.","input":"This article is bad","output":"import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentences = [\"This article is bad\"]\n\nsid = SentimentIntensityAnalyzer()\nfor sentence in sentences:\n  print(sentence)\n  ss = sid.polarity_scores(sentence)\n  print(ss)\n  if ss['compound'] >= 0.05:\n    print(\"Positive\")\n  elif -0.05 < ss['compound'] < 0.05:\n    print(\"Neutral\")\n  else:\n    print(\"Negative\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that classifies articles based on sentiment.\n\n### Input:\nThis article is bad\n\n### Output:\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentences = [\"This article is bad\"]\n\nsid = SentimentIntensityAnalyzer()\nfor sentence in sentences:\n  print(sentence)\n  ss = sid.polarity_scores(sentence)\n  print(ss)\n  if ss['compound'] >= 0.05:\n    print(\"Positive\")\n  elif -0.05 < ss['compound'] < 0.05:\n    print(\"Neutral\")\n  else:\n    print(\"Negative\")"}
{"instruction":"Write a Python program to use the natural language processing library NLTK to classify emails into two categories: spam and non-spam.","input":"The following are five sample emails:\n1. \u201cHey, I'm offering a 50% discount on our services!\u201d\n2. \u201cDid you see the latest news about the software update?\u201d\n3. \u201cDo you want to make money fast and easy?\u201d\n4. \u201cPlease save the date for our upcoming event on April 15th.\u201d\n5. \u201cYou have one last chance to get this limited offer!\u201d","output":"import nltk\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# sample emails\nemails = [\n\"Hey, I'm offering a 50% discount on our services!\",\n\"Did you see the latest news about the software update?\",\n\"Do you want to make money fast and easy?\",\n\"Please save the date for our upcoming event on April 15th.\",\n\"You have one last chance to get this limited offer!\"\n]\n\nlabels = [1, 0, 1, 0, 1]\n\n# pre-process the emails\nemail_words = []\nfor email in emails:\n email_words.append(' '.join(nltk.word_tokenize(email)))\n\n# feature extraction\nvectorizer = CountVectorizer()\nfeatures = vectorizer.fit_transform(email_words)\n\n#naive bayes calssifier\nclassifier = MultinomialNB()\nclassifier.fit(features, labels)\n\n# test the model\ntest_email = \"Will you join us at the upcoming meeting?\u201d\ntest_email_words = ' '.join(nltk.word_tokenize(test_email))\ntest_features = vectorizer.transform([test_email_words])\n\n# predict the class\nprint(classifier.predict(test_features))  # output: [0] - non-spam email","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to use the natural language processing library NLTK to classify emails into two categories: spam and non-spam.\n\n### Input:\nThe following are five sample emails:\n1. \u201cHey, I'm offering a 50% discount on our services!\u201d\n2. \u201cDid you see the latest news about the software update?\u201d\n3. \u201cDo you want to make money fast and easy?\u201d\n4. \u201cPlease save the date for our upcoming event on April 15th.\u201d\n5. \u201cYou have one last chance to get this limited offer!\u201d\n\n### Output:\nimport nltk\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# sample emails\nemails = [\n\"Hey, I'm offering a 50% discount on our services!\",\n\"Did you see the latest news about the software update?\",\n\"Do you want to make money fast and easy?\",\n\"Please save the date for our upcoming event on April 15th.\",\n\"You have one last chance to get this limited offer!\"\n]\n\nlabels = [1, 0, 1, 0, 1]\n\n# pre-process the emails\nemail_words = []\nfor email in emails:\n email_words.append(' '.join(nltk.word_tokenize(email)))\n\n# feature extraction\nvectorizer = CountVectorizer()\nfeatures = vectorizer.fit_transform(email_words)\n\n#naive bayes calssifier\nclassifier = MultinomialNB()\nclassifier.fit(features, labels)\n\n# test the model\ntest_email = \"Will you join us at the upcoming meeting?\u201d\ntest_email_words = ' '.join(nltk.word_tokenize(test_email))\ntest_features = vectorizer.transform([test_email_words])\n\n# predict the class\nprint(classifier.predict(test_features))  # output: [0] - non-spam email"}
{"instruction":"Using the given lists, create a Python dictionary that contains the expected output.","input":"key_list = ['a', 'b', 'c']\nvalue_list = [1, 2, 3]","output":"dictionary = dict(zip(key_list, value_list))\nprint(dictionary)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the given lists, create a Python dictionary that contains the expected output.\n\n### Input:\nkey_list = ['a', 'b', 'c']\nvalue_list = [1, 2, 3]\n\n### Output:\ndictionary = dict(zip(key_list, value_list))\nprint(dictionary)"}
{"instruction":"Create a web application using Python Flask for managing a library database, including models for Book, Author, and Publisher.","input":"Not applicable","output":"from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI']  = 'sqlite:\/\/\/\/tmp\/test.db'\ndb = SQLAlchemy(app)\n\nclass Book(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n title = db.Column(db.String(80), unique=True)\n author_id = db.Column(db.Integer, db.ForeignKey('author.id'))\n publisher_id = db.Column(db.Integer, db.ForeignKey('publisher.id'))\n\nclass Author(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(80), unique=True)\n\nclass Publisher(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(80), unique=True)\n\ndb.create_all()\n\nif __name__ == '__main__':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application using Python Flask for managing a library database, including models for Book, Author, and Publisher.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI']  = 'sqlite:\/\/\/\/tmp\/test.db'\ndb = SQLAlchemy(app)\n\nclass Book(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n title = db.Column(db.String(80), unique=True)\n author_id = db.Column(db.Integer, db.ForeignKey('author.id'))\n publisher_id = db.Column(db.Integer, db.ForeignKey('publisher.id'))\n\nclass Author(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(80), unique=True)\n\nclass Publisher(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(80), unique=True)\n\ndb.create_all()\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"instruction":"Create a RESTful API endpoint in Python with Flask that returns a list of items.","input":"The endpoint should return a list of books (with fields for title and author).","output":"from flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('\/books', methods=['GET'])\ndef get_books():\n books = [\n {\n 'title': 'The Great Gatsby',\n 'author': 'F. Scott Fitzgerald'\n },\n {\n 'title': 'The Catcher in the Rye',\n 'author': 'J. D. Salinger'\n },\n {\n 'title': 'To Kill a Mockingbird',\n 'author': 'Harper Lee'\n }\n ]\n \n return jsonify(books)\n\nif __name__ == '__main__':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a RESTful API endpoint in Python with Flask that returns a list of items.\n\n### Input:\nThe endpoint should return a list of books (with fields for title and author).\n\n### Output:\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('\/books', methods=['GET'])\ndef get_books():\n books = [\n {\n 'title': 'The Great Gatsby',\n 'author': 'F. Scott Fitzgerald'\n },\n {\n 'title': 'The Catcher in the Rye',\n 'author': 'J. D. Salinger'\n },\n {\n 'title': 'To Kill a Mockingbird',\n 'author': 'Harper Lee'\n }\n ]\n \n return jsonify(books)\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"instruction":"Design a web application in Django that fetches tweets with the #python hashtag.","input":"Not applicable","output":"import os\nimport tweepy\nfrom django.shortcuts import render\n\n# Create your views here.\ndef index(request):\n    consumer_key = os.environ['TWITTER_CONSUMER_KEY']\n    consumer_secret = os.environ['TWITTER_CONSUMER_SECRET']\n    access_key = os.environ['TWITTER_ACCESS_KEY']\n    access_secret = os.environ['TWITTER_ACCESS_SECRET']\n \n    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n    auth.set_access_token(access_key, access_secret)\n    api = tweepy.API(auth)\n \n    hashtags = [\"#python\"]\n    tweets = api.search(q=hashtags, lang='en')\n \n    args = {'tweets': tweets}\n    return render(request, 'index.html', args)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a web application in Django that fetches tweets with the #python hashtag.\n\n### Input:\nNot applicable\n\n### Output:\nimport os\nimport tweepy\nfrom django.shortcuts import render\n\n# Create your views here.\ndef index(request):\n    consumer_key = os.environ['TWITTER_CONSUMER_KEY']\n    consumer_secret = os.environ['TWITTER_CONSUMER_SECRET']\n    access_key = os.environ['TWITTER_ACCESS_KEY']\n    access_secret = os.environ['TWITTER_ACCESS_SECRET']\n \n    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n    auth.set_access_token(access_key, access_secret)\n    api = tweepy.API(auth)\n \n    hashtags = [\"#python\"]\n    tweets = api.search(q=hashtags, lang='en')\n \n    args = {'tweets': tweets}\n    return render(request, 'index.html', args)"}
{"instruction":"Write a Python program that generates a multiplication table of a given size.","input":"5","output":"def multiplication_table(n):\n for i in range(1, n+1):\n   for j in range(1, n+1):\n     print(str(i*j).rjust(4), end=\" \")\n   print()\n\nmultiplication_table(5)\n\n# Output:\n 1   2   3   4   5\n 2   4   6   8  10\n 3   6   9  12  15\n 4   8  12  16  20\n 5  10  15  20  25","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that generates a multiplication table of a given size.\n\n### Input:\n5\n\n### Output:\ndef multiplication_table(n):\n for i in range(1, n+1):\n   for j in range(1, n+1):\n     print(str(i*j).rjust(4), end=\" \")\n   print()\n\nmultiplication_table(5)\n\n# Output:\n 1   2   3   4   5\n 2   4   6   8  10\n 3   6   9  12  15\n 4   8  12  16  20\n 5  10  15  20  25"}
{"instruction":"Design a function in Python to generate Fibonacci numbers from 1 to a given range.","input":"10","output":"def fibonacci(x):\n fib_numbers = [1,1]\n for i in range(2,x):\n  fib_numbers.append(fib_numbers[i-1] + fib_numbers[i-2])\n return fib_numbers","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to generate Fibonacci numbers from 1 to a given range.\n\n### Input:\n10\n\n### Output:\ndef fibonacci(x):\n fib_numbers = [1,1]\n for i in range(2,x):\n  fib_numbers.append(fib_numbers[i-1] + fib_numbers[i-2])\n return fib_numbers"}
{"instruction":"Write a python program to combine two lists in a dictionary. The dictionary should have the first list as keys and the second list as the corresponding values.","input":"list1 = [1,2,3]\nlist2 = [4,5,6]","output":"def list_to_dict(keys, values):\n result = {}\n for i in range(len(keys)):\n  result[keys[i]] = values[i] \n return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to combine two lists in a dictionary. The dictionary should have the first list as keys and the second list as the corresponding values.\n\n### Input:\nlist1 = [1,2,3]\nlist2 = [4,5,6]\n\n### Output:\ndef list_to_dict(keys, values):\n result = {}\n for i in range(len(keys)):\n  result[keys[i]] = values[i] \n return result"}
{"instruction":"Create a Python script to format a JSON string.","input":"json_str = \u2018{\u201dname\u201d:\u201dRobert\u201d, \u201dage\u201d:30, \u201dcity\u201d:\u201dNew York\u201d}\u2019","output":"# import json library\nimport json\n\n# parse input string as JSON\njson_data = json.loads(json_str)\n\n# format the json string\nformatted_json = json.dumps(json_data, indent=4)\n\n# print the formatted json string\nprint(formatted_json)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to format a JSON string.\n\n### Input:\njson_str = \u2018{\u201dname\u201d:\u201dRobert\u201d, \u201dage\u201d:30, \u201dcity\u201d:\u201dNew York\u201d}\u2019\n\n### Output:\n# import json library\nimport json\n\n# parse input string as JSON\njson_data = json.loads(json_str)\n\n# format the json string\nformatted_json = json.dumps(json_data, indent=4)\n\n# print the formatted json string\nprint(formatted_json)"}
{"instruction":"Generate a python program to find the sum of series 1 +1\/2 + 1\/4 +\u2026.+ 1\/n","input":"","output":"def series_sum(n):\n    sum_series = 0\n    for i in range(1, n + 1):\n        sum_series += 1\/i\n    return sum_series","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to find the sum of series 1 +1\/2 + 1\/4 +\u2026.+ 1\/n\n\n### Input:\n\n\n### Output:\ndef series_sum(n):\n    sum_series = 0\n    for i in range(1, n + 1):\n        sum_series += 1\/i\n    return sum_series"}
{"instruction":"Make a python program to check the palindrome of a given word","input":"","output":"def palindrome(word): \n    if word == word[::-1]: \n        return True\n    else: \n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a python program to check the palindrome of a given word\n\n### Input:\n\n\n### Output:\ndef palindrome(word): \n    if word == word[::-1]: \n        return True\n    else: \n        return False"}
{"instruction":"Create a web scraper application in Python to retrieve the title, author and publication date of books from Amazon.","input":"Not applicable","output":"import requests\nfrom bs4 import BeautifulSoup\n\n# the URL of the page to scrape\nurl = 'https:\/\/www.amazon.com\/books-used-books-textbooks\/b\/ref=sv_b_5?ie=UTF8&node=283155'\n\n# download the HTML of the page\nr = requests.get(url)\nhtml = r.text\n\n# create a BeautifulSoup object\nsoup = BeautifulSoup(html, 'html.parser')\n\n# find all elements with the desired info\nbooks = soup.find_all('div', {'class': 'a-row a-spacing-mini'})\n\n# create an output file\noutfile = open('output.txt', 'w', encoding='utf-8')\n\n# loop through each book\nfor book in books:\n # get the title\n title = book.find('a', {'class': 'a-link-normal a-text-normal'}).text\n \n # get the author\n author = book.find('span', {'class': 'a-size-small a-color-secondary'}).text\n \n # get the publication date\n date_string = book.find('span', {'class': 'a-size-small a-color-secondary a-text-normal'}).text\n date = date_string.split('on')[1]\n \n # write the info to the file\n outfile.write(title + ',' + author + ',' + date + '\\n')\n\n# close the output file\noutfile.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper application in Python to retrieve the title, author and publication date of books from Amazon.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# the URL of the page to scrape\nurl = 'https:\/\/www.amazon.com\/books-used-books-textbooks\/b\/ref=sv_b_5?ie=UTF8&node=283155'\n\n# download the HTML of the page\nr = requests.get(url)\nhtml = r.text\n\n# create a BeautifulSoup object\nsoup = BeautifulSoup(html, 'html.parser')\n\n# find all elements with the desired info\nbooks = soup.find_all('div', {'class': 'a-row a-spacing-mini'})\n\n# create an output file\noutfile = open('output.txt', 'w', encoding='utf-8')\n\n# loop through each book\nfor book in books:\n # get the title\n title = book.find('a', {'class': 'a-link-normal a-text-normal'}).text\n \n # get the author\n author = book.find('span', {'class': 'a-size-small a-color-secondary'}).text\n \n # get the publication date\n date_string = book.find('span', {'class': 'a-size-small a-color-secondary a-text-normal'}).text\n date = date_string.split('on')[1]\n \n # write the info to the file\n outfile.write(title + ',' + author + ',' + date + '\\n')\n\n# close the output file\noutfile.close()"}
{"instruction":"Develop an algorithm in Python to find the number of unique paths between two points on a 2-dimensional grid","input":"m = 4\nn = 3","output":"def numPaths(m, n):\n\n #Create an array to store the results of subproblems\n paths = [[0] * n for _ in range(m)] \n  \n #Fill the base cases \n for i in range(m): \n  paths[i][0] = 1\n for j in range(n): \n  paths[0][j] = 1\n  \n #Calculate the number of unique paths\n for i in range(1, m): \n  for j in range(1, n): \n   paths[i][j] = paths[i - 1][j] + paths[i][j - 1] \n  \n #return the final result\n return paths[m - 1][n - 1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to find the number of unique paths between two points on a 2-dimensional grid\n\n### Input:\nm = 4\nn = 3\n\n### Output:\ndef numPaths(m, n):\n\n #Create an array to store the results of subproblems\n paths = [[0] * n for _ in range(m)] \n  \n #Fill the base cases \n for i in range(m): \n  paths[i][0] = 1\n for j in range(n): \n  paths[0][j] = 1\n  \n #Calculate the number of unique paths\n for i in range(1, m): \n  for j in range(1, n): \n   paths[i][j] = paths[i - 1][j] + paths[i][j - 1] \n  \n #return the final result\n return paths[m - 1][n - 1]"}
{"instruction":"Edit the following Python code to optimize the performance of a function that takes a list of numbers as input and prints the maximum and minimum values.","input":"The input should include a sample piece of Python code for testing and optimizing purposes:\n\ndef print_min_max(numbers):\n    max_num = 0\n    min_num = 0\n    for n in numbers:\n        if n > max_num:\n            max_num = n;\n        if n < min_num:\n            min_num = n;\n    print(\"Max: {0}, Min: {1}\".format(max_num, min_num))","output":"def print_min_max(numbers):\n max_num = min_num = numbers[0]\n for n in numbers[1:]:\n     max_num = max(max_num, n)\n     min_num = min(min_num, n)\n print(\"Max: {0}, Min: {1}\".format(max_num, min_num))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code to optimize the performance of a function that takes a list of numbers as input and prints the maximum and minimum values.\n\n### Input:\nThe input should include a sample piece of Python code for testing and optimizing purposes:\n\ndef print_min_max(numbers):\n    max_num = 0\n    min_num = 0\n    for n in numbers:\n        if n > max_num:\n            max_num = n;\n        if n < min_num:\n            min_num = n;\n    print(\"Max: {0}, Min: {1}\".format(max_num, min_num))\n\n### Output:\ndef print_min_max(numbers):\n max_num = min_num = numbers[0]\n for n in numbers[1:]:\n     max_num = max(max_num, n)\n     min_num = min(min_num, n)\n print(\"Max: {0}, Min: {1}\".format(max_num, min_num))"}
{"instruction":"Write a Python script to generate a text report of the results of a survey of 10 people.","input":"No. of people who said yes, 4  \nNo. of people who said no, 6","output":"num_yes = 4\nnum_no = 6\n\ntotal_responses = num_yes + num_no\n\nprint('Survey Results')\nprint('Number of people who said yes: {}'.format(num_yes))\nprint('Number of people who said no: {}'.format(num_no))\nprint('Total number of responses: {}'.format(total_responses))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate a text report of the results of a survey of 10 people.\n\n### Input:\nNo. of people who said yes, 4  \nNo. of people who said no, 6\n\n### Output:\nnum_yes = 4\nnum_no = 6\n\ntotal_responses = num_yes + num_no\n\nprint('Survey Results')\nprint('Number of people who said yes: {}'.format(num_yes))\nprint('Number of people who said no: {}'.format(num_no))\nprint('Total number of responses: {}'.format(total_responses))"}
{"instruction":"Using Python, create a function that takes as input a list of numbers and returns the median of the list.","input":"","output":"def median(nums):\n    sorted_nums = sorted(nums)\n    length = len(nums)\n    if length % 2 == 0:\n        return (sorted_nums[length\/\/2] + sorted_nums[length\/\/2 - 1]) \/ 2\n    else:\n        return sorted_nums[length\/\/2]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, create a function that takes as input a list of numbers and returns the median of the list.\n\n### Input:\n\n\n### Output:\ndef median(nums):\n    sorted_nums = sorted(nums)\n    length = len(nums)\n    if length % 2 == 0:\n        return (sorted_nums[length\/\/2] + sorted_nums[length\/\/2 - 1]) \/ 2\n    else:\n        return sorted_nums[length\/\/2]"}
{"instruction":"Integrate the following logic into a python program","input":"Read a number and print \"OK\" if the number is greater than 10, and print \"Not OK\" otherwise.","output":"num = int(input(\"Enter a number: \"))\nif num > 10:\n    print(\"OK\")\nelse:\n    print(\"Not OK\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIntegrate the following logic into a python program\n\n### Input:\nRead a number and print \"OK\" if the number is greater than 10, and print \"Not OK\" otherwise.\n\n### Output:\nnum = int(input(\"Enter a number: \"))\nif num > 10:\n    print(\"OK\")\nelse:\n    print(\"Not OK\")"}
{"instruction":"Develop an algorithm for a Linear Search of an unordered array in Python.","input":"[4, 8, 15, 23]","output":"def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm for a Linear Search of an unordered array in Python.\n\n### Input:\n[4, 8, 15, 23]\n\n### Output:\ndef linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1"}
{"instruction":"Install necessary modules and libraries, including pyfirmata, mcpi, minecraftstuff, time, server, and serial. Connect to the Minecraft server and post a message to the chat window. Define a function called MemoryCloud1 that takes in parameters for starting x, y, and z coordinates, chart width, height, and depth, block type, and block ID. Use the function to create a memory cloud at specific coordinates.","input":"","output":"#!\/usr\/bin\/python\n\n#Install the modules we need\n#from pyfirmata import Arduino, util, INPUT\nfrom mcpi import minecraft\nfrom mcpi import minecraftstuff\nfrom time import sleep\nimport server\nimport serial\n\n# Set up a connection to the Arduino\/Shrimp if we need it\n#PORT = \"\/dev\/tty.SLAB_USBtoUART\"\n#ser = serial.Serial(PORT, 9600)\n\n# Connect to the server: we use the imported server.py to make it work with CloudMaker\nmc = minecraft.Minecraft.create(server.address)\n#Post a message to the minecraft chat window \nmc.postToChat(\"Ready to read Memory!\")\n\n# Use the command \/getpos or F3 in Minecraft client to find out where you are then use those\n# x, y, z coordinates to build things\n# translate CloudMaker coords for mcpi ones\n# add this to x\nmcx = 177\n# - this from y\nmcy = 64\n# - this from z\nmcz = 135\n\n# Text Bubble 1\ndef MemoryCloud1(startx,starty,startz, chartwidth, chartheight, chartdepth, blocktype, blockid):\n\t# Main Bubble\n\tmc.setBlocks((startx + mcx), (starty-mcy), (startz-mcz), (startx + mcx) + chartwidth, (starty-mcy) + chartheight, (startz - mcz) + chartdepth, blocktype, blockid)\n\t# inset bottom\n\tmc.setBlocks((startx + mcx) + 1, (starty-mcy) - 1, (startz-mcz), (startx + mcx) + (chartwidth-1), (starty-mcy) -1, (startz - mcz) + chartdepth, blocktype, blockid)\n\t#inset top\n\tmc.setBlocks((startx + mcx) + 1, (starty-mcy) + (chartheight + 1), (startz-mcz), (startx + mcx) + (chartwidth-1), (starty-mcy) + (chartheight + 1), (startz - mcz) + chartdepth, blocktype, blockid)\n\n\n# If you want to add a bubble diagram, insert your coordinates\n# Then use \/js blocktype(\"My Message\", blockid) while facing the block where you want to write\n\n#MemoryCloud1(-343, 75, -15, 44, 14, 2, 35, 0)\n#MemoryCloud1(-343, 110, -15, 44, 14, 2, 35, 0)\n#MemoryCloud1(-343, 75, -15, 44, 14, 2, 0)\n#MemoryCloud1(-343, 100, -15, 44, 14, 2, 0)\n\n# the memory cloud funtction is (myposx, myposy, myposz, width, height, thickness,\n# blocktype, blockidoption)\n\nMemoryCloud1(332, 100, -1185, 44, 4, 2, 35, 0)\n\n\n#\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nInstall necessary modules and libraries, including pyfirmata, mcpi, minecraftstuff, time, server, and serial. Connect to the Minecraft server and post a message to the chat window. Define a function called MemoryCloud1 that takes in parameters for starting x, y, and z coordinates, chart width, height, and depth, block type, and block ID. Use the function to create a memory cloud at specific coordinates.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/python\n\n#Install the modules we need\n#from pyfirmata import Arduino, util, INPUT\nfrom mcpi import minecraft\nfrom mcpi import minecraftstuff\nfrom time import sleep\nimport server\nimport serial\n\n# Set up a connection to the Arduino\/Shrimp if we need it\n#PORT = \"\/dev\/tty.SLAB_USBtoUART\"\n#ser = serial.Serial(PORT, 9600)\n\n# Connect to the server: we use the imported server.py to make it work with CloudMaker\nmc = minecraft.Minecraft.create(server.address)\n#Post a message to the minecraft chat window \nmc.postToChat(\"Ready to read Memory!\")\n\n# Use the command \/getpos or F3 in Minecraft client to find out where you are then use those\n# x, y, z coordinates to build things\n# translate CloudMaker coords for mcpi ones\n# add this to x\nmcx = 177\n# - this from y\nmcy = 64\n# - this from z\nmcz = 135\n\n# Text Bubble 1\ndef MemoryCloud1(startx,starty,startz, chartwidth, chartheight, chartdepth, blocktype, blockid):\n\t# Main Bubble\n\tmc.setBlocks((startx + mcx), (starty-mcy), (startz-mcz), (startx + mcx) + chartwidth, (starty-mcy) + chartheight, (startz - mcz) + chartdepth, blocktype, blockid)\n\t# inset bottom\n\tmc.setBlocks((startx + mcx) + 1, (starty-mcy) - 1, (startz-mcz), (startx + mcx) + (chartwidth-1), (starty-mcy) -1, (startz - mcz) + chartdepth, blocktype, blockid)\n\t#inset top\n\tmc.setBlocks((startx + mcx) + 1, (starty-mcy) + (chartheight + 1), (startz-mcz), (startx + mcx) + (chartwidth-1), (starty-mcy) + (chartheight + 1), (startz - mcz) + chartdepth, blocktype, blockid)\n\n\n# If you want to add a bubble diagram, insert your coordinates\n# Then use \/js blocktype(\"My Message\", blockid) while facing the block where you want to write\n\n#MemoryCloud1(-343, 75, -15, 44, 14, 2, 35, 0)\n#MemoryCloud1(-343, 110, -15, 44, 14, 2, 35, 0)\n#MemoryCloud1(-343, 75, -15, 44, 14, 2, 0)\n#MemoryCloud1(-343, 100, -15, 44, 14, 2, 0)\n\n# the memory cloud funtction is (myposx, myposy, myposz, width, height, thickness,\n# blocktype, blockidoption)\n\nMemoryCloud1(332, 100, -1185, 44, 4, 2, 35, 0)\n\n\n#\n"}
{"instruction":"Write a Python program to ask the user for an input and then calculate the factorial of that number.","input":"","output":"num = int(input('Enter an integer: '))\nfactorial = 1\n\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for i in range(1,num + 1):\n       factorial = factorial*i\n   print(\"The factorial of\",num,\"is\",factorial)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to ask the user for an input and then calculate the factorial of that number.\n\n### Input:\n\n\n### Output:\nnum = int(input('Enter an integer: '))\nfactorial = 1\n\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for i in range(1,num + 1):\n       factorial = factorial*i\n   print(\"The factorial of\",num,\"is\",factorial)"}
{"instruction":"Write a Python script to get the nth Fibonacci number","input":"","output":"def get_fibonacci_number(n):\n if n == 0:\n return 0\n elif n == 1:\n return 1\n else:\n return get_fibonacci_number(n-1) + get_fibonacci_number(n-2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to get the nth Fibonacci number\n\n### Input:\n\n\n### Output:\ndef get_fibonacci_number(n):\n if n == 0:\n return 0\n elif n == 1:\n return 1\n else:\n return get_fibonacci_number(n-1) + get_fibonacci_number(n-2)"}
{"instruction":"Generate a script in Python to run a linear regression model using scikit-learn.","input":"[7 5 3 9 8 4] [7 3 4 6]","output":"import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nx = np.array([[7,5,3,9,8,4]]).T\ny = np.array([7,3,4,6])\n\nmodel = LinearRegression()\nmodel.fit(x, y)\n\npreds = model.predict(x)\n\nprint(f\"R-squared score: {model.score(x,y)}\")\nprint(f\"Coefficients: {model.coef_}\")\nprint(f\"Predictions: {preds}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a script in Python to run a linear regression model using scikit-learn.\n\n### Input:\n[7 5 3 9 8 4] [7 3 4 6]\n\n### Output:\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nx = np.array([[7,5,3,9,8,4]]).T\ny = np.array([7,3,4,6])\n\nmodel = LinearRegression()\nmodel.fit(x, y)\n\npreds = model.predict(x)\n\nprint(f\"R-squared score: {model.score(x,y)}\")\nprint(f\"Coefficients: {model.coef_}\")\nprint(f\"Predictions: {preds}\")"}
{"instruction":"Write a Python program to compare two lists of numbers and return any combination of numbers that occur in both lists.","input":"list1=[1,2,3,4,5,6]\nlist2=[3,4,5,7,8,9]","output":"combinedList = [] \n\nfor num1 in list1:\n for num2 in list2:\n if num1 == num2:\n combinedList.append(num1)\n\nprint(combinedList) # [3,4,5]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compare two lists of numbers and return any combination of numbers that occur in both lists.\n\n### Input:\nlist1=[1,2,3,4,5,6]\nlist2=[3,4,5,7,8,9]\n\n### Output:\ncombinedList = [] \n\nfor num1 in list1:\n for num2 in list2:\n if num1 == num2:\n combinedList.append(num1)\n\nprint(combinedList) # [3,4,5]"}
{"instruction":"Optimize this Python code for finding the maximum value in an array.","input":"def find_max(arr):\n    max_value = 0\n    for x in arr:\n        if x > max_value:\n            max_value = x\n    return max_value","output":"def find_max(arr): \n    return max(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize this Python code for finding the maximum value in an array.\n\n### Input:\ndef find_max(arr):\n    max_value = 0\n    for x in arr:\n        if x > max_value:\n            max_value = x\n    return max_value\n\n### Output:\ndef find_max(arr): \n    return max(arr)"}
{"instruction":"Create a Python script to detect if a number is prime.","input":"10","output":"def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    n = 10\n    if is_prime(n):\n        print(\"{} is a prime number\".format(n))\n    else:\n        print(\"{} is not a prime number\".format(n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to detect if a number is prime.\n\n### Input:\n10\n\n### Output:\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    n = 10\n    if is_prime(n):\n        print(\"{} is a prime number\".format(n))\n    else:\n        print(\"{} is not a prime number\".format(n))"}
{"instruction":"Create a REST API endpoint in Python Flask for registering a new user.","input":"Example user parameters: {name: \"Alice\", email: \"alice@example.com\", password: \"123456\"}","output":"from flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:\/\/\/\/tmp\/test.db'\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(50))\n email = db.Column(db.String(50), unique=True)\n password = db.Column(db.String(50))\n\ndb.create_all()\n\n@app.route('\/register', methods=['POST'])\ndef register_user():\n user = User(name=request.json['name'],\n email=request.json['email'],\n password=request.json['password'])\n db.session.add(user)\n db.session.commit()\n return {'message': 'User created'}\n\nif name == 'main':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API endpoint in Python Flask for registering a new user.\n\n### Input:\nExample user parameters: {name: \"Alice\", email: \"alice@example.com\", password: \"123456\"}\n\n### Output:\nfrom flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:\/\/\/\/tmp\/test.db'\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(50))\n email = db.Column(db.String(50), unique=True)\n password = db.Column(db.String(50))\n\ndb.create_all()\n\n@app.route('\/register', methods=['POST'])\ndef register_user():\n user = User(name=request.json['name'],\n email=request.json['email'],\n password=request.json['password'])\n db.session.add(user)\n db.session.commit()\n return {'message': 'User created'}\n\nif name == 'main':\n app.run(debug=True)"}
{"instruction":"Create a python program to return the difference between two sets x and y.","input":"","output":"def set_difference(x, y): \n    return x.difference(y)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to return the difference between two sets x and y.\n\n### Input:\n\n\n### Output:\ndef set_difference(x, y): \n    return x.difference(y)"}
{"instruction":"Write a python program to calculate the discount given a list of items and their respective price and quantity.","input":"items = {\u201cShirt\u201d: [20, 3], \u201cPants\u201d: [30, 2] }","output":"def discount(items):\n    '''\n    This function takes a dictionary of items and their respective price and quantity as input and calculates the discount.\n    '''\n    # calculate the total cost \n    total_cost = 0\n    for item, price in items.items():\n        total_cost += price[0] * price[1]\n    \n    # calculate the discount \n    discount = 0.2 * total_cost\n    \n    return discount","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to calculate the discount given a list of items and their respective price and quantity.\n\n### Input:\nitems = {\u201cShirt\u201d: [20, 3], \u201cPants\u201d: [30, 2] }\n\n### Output:\ndef discount(items):\n    '''\n    This function takes a dictionary of items and their respective price and quantity as input and calculates the discount.\n    '''\n    # calculate the total cost \n    total_cost = 0\n    for item, price in items.items():\n        total_cost += price[0] * price[1]\n    \n    # calculate the discount \n    discount = 0.2 * total_cost\n    \n    return discount"}
{"instruction":"Create a Python program to detect spam messages in an email dataset.","input":"The dataset contains a list of emails and a label (\"spam\" or \"not spam\")","output":"import pandas as pd\n\ndf = pd.read_csv('email_dataset.csv')\n\n#Create feature vectors\nfrom sklearn.feature_extraction.text import CountVectorizer\n\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(df['email'])\n\n#Train the data with Naive Bayes\nfrom sklearn.naive_bayes import MultinomialNB\n\nmodel = MultinomialNB()\nmodel.fit(X, df['label'])\n\n#Test the model\nspam_predictions = model.predict(X)\nprint(spam_predictions)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to detect spam messages in an email dataset.\n\n### Input:\nThe dataset contains a list of emails and a label (\"spam\" or \"not spam\")\n\n### Output:\nimport pandas as pd\n\ndf = pd.read_csv('email_dataset.csv')\n\n#Create feature vectors\nfrom sklearn.feature_extraction.text import CountVectorizer\n\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(df['email'])\n\n#Train the data with Naive Bayes\nfrom sklearn.naive_bayes import MultinomialNB\n\nmodel = MultinomialNB()\nmodel.fit(X, df['label'])\n\n#Test the model\nspam_predictions = model.predict(X)\nprint(spam_predictions)"}
{"instruction":"Create a Python script for formatting a sentence.","input":"He  went  to the store","output":"def format_sentence(sentence):\n    sentence = sentence.split()\n    sentence = [word.capitalize() for word in sentence]\n    return ' '.join(sentence)\n\nprint(format_sentence(\"He went to the store\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for formatting a sentence.\n\n### Input:\nHe  went  to the store\n\n### Output:\ndef format_sentence(sentence):\n    sentence = sentence.split()\n    sentence = [word.capitalize() for word in sentence]\n    return ' '.join(sentence)\n\nprint(format_sentence(\"He went to the store\"))"}
{"instruction":"Write a user profile generator in Python.","input":"","output":"import random\n\n# User profile class\nclass UserProfile:\n    def __init__(self):\n        self.name = None\n        self.age = None\n        self.location = None\n        self.interests = None\n\n# Generate random user profile\ndef generate_profile():\n    profile = UserProfile()\n    profile.name = generate_name()\n    profile.age = generate_age()\n    profile.location = generate_location()\n    profile.interests = generate_interests()\n    return profile\n\n# Generate random name\ndef generate_name():\n    ...\n\n# Generate random age\ndef generate_age():\n    ...\n\n# Generate random location\ndef generate_location():\n    ...\n\n# Generate random interests\ndef generate_interests():\n    ...","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a user profile generator in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\n# User profile class\nclass UserProfile:\n    def __init__(self):\n        self.name = None\n        self.age = None\n        self.location = None\n        self.interests = None\n\n# Generate random user profile\ndef generate_profile():\n    profile = UserProfile()\n    profile.name = generate_name()\n    profile.age = generate_age()\n    profile.location = generate_location()\n    profile.interests = generate_interests()\n    return profile\n\n# Generate random name\ndef generate_name():\n    ...\n\n# Generate random age\ndef generate_age():\n    ...\n\n# Generate random location\ndef generate_location():\n    ...\n\n# Generate random interests\ndef generate_interests():\n    ..."}
{"instruction":"Implement a function in Python that generates a random password with a minimum length of 10 characters.","input":"No input","output":"import random\nimport string\n\ndef generate_random_password(n=10):\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    return ''.join(random.choice(chars) for _ in range(n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that generates a random password with a minimum length of 10 characters.\n\n### Input:\nNo input\n\n### Output:\nimport random\nimport string\n\ndef generate_random_password(n=10):\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    return ''.join(random.choice(chars) for _ in range(n))"}
{"instruction":"Generate a Python function that takes an array of elements and finds the frequency of each element","input":"[1,4,1,4,4,4,9,7]","output":"def count_frequency(l):\n    frequencies = {}\n    for i in l:\n        if i in frequencies:\n            frequencies[i] += 1\n        else:\n            frequencies[i] = 1\n    return frequencies\n\nl = [1,4,1,4,4,4,9,7]\nprint(count_frequency(l))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that takes an array of elements and finds the frequency of each element\n\n### Input:\n[1,4,1,4,4,4,9,7]\n\n### Output:\ndef count_frequency(l):\n    frequencies = {}\n    for i in l:\n        if i in frequencies:\n            frequencies[i] += 1\n        else:\n            frequencies[i] = 1\n    return frequencies\n\nl = [1,4,1,4,4,4,9,7]\nprint(count_frequency(l))"}
{"instruction":"Create a Python program to delete all characters at odd index in a given string.","input":"Hello, World!","output":"def deleteAtOddIndex(s):\n    output = \"\"\n    for i in range(len(s)):\n        # delete the character at an odd index\n        if i % 2 != 0:\n            pass\n        else:\n            output += s[i]\n    return output","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to delete all characters at odd index in a given string.\n\n### Input:\nHello, World!\n\n### Output:\ndef deleteAtOddIndex(s):\n    output = \"\"\n    for i in range(len(s)):\n        # delete the character at an odd index\n        if i % 2 != 0:\n            pass\n        else:\n            output += s[i]\n    return output"}
{"instruction":"Generate a Python program to output the maximum element in a given array.","input":"The array is [1, 4, 9, 3, 6, 5]","output":"def findMax(arr):\n    max_number = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_number:\n            max_number = arr[i]\n    return max_number\n\narr = [1, 4, 9, 3, 6, 5]\nmax_number = findMax(arr)\nprint(\"The maximum element in the array is:\", max_number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to output the maximum element in a given array.\n\n### Input:\nThe array is [1, 4, 9, 3, 6, 5]\n\n### Output:\ndef findMax(arr):\n    max_number = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_number:\n            max_number = arr[i]\n    return max_number\n\narr = [1, 4, 9, 3, 6, 5]\nmax_number = findMax(arr)\nprint(\"The maximum element in the array is:\", max_number)"}
{"instruction":"Write a Python code to find the RMSE (root mean squared error) of two given lists.","input":"list1 = [1, 2, 3]\nlist2 = [2, 3, 4]","output":"import math \n\ndef rmse(list1, list2): \n    mean_square = 0\n    for i in range(len(list1)):\n        mean_square += math.pow((list1[i] - list2[i]), 2)\n    return math.sqrt(mean_square\/len(list1))\n\nrmse_value = rmse(list1, list2)\nprint(\"Root Mean Square Error is:\", rmse_value)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to find the RMSE (root mean squared error) of two given lists.\n\n### Input:\nlist1 = [1, 2, 3]\nlist2 = [2, 3, 4]\n\n### Output:\nimport math \n\ndef rmse(list1, list2): \n    mean_square = 0\n    for i in range(len(list1)):\n        mean_square += math.pow((list1[i] - list2[i]), 2)\n    return math.sqrt(mean_square\/len(list1))\n\nrmse_value = rmse(list1, list2)\nprint(\"Root Mean Square Error is:\", rmse_value)"}
{"instruction":"Write an algorithm in Python for finding the minimum element in an array.","input":"[3, 4, 12, 19, 5, 17]","output":"def findMin(arr): \n    min = arr[0] \n    for i in range(1, len(arr)): \n        if arr[i] < min: \n            min = arr[i] \n    return min\n\narr = [3, 4, 12, 19, 5, 17]\nprint(findMin(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python for finding the minimum element in an array.\n\n### Input:\n[3, 4, 12, 19, 5, 17]\n\n### Output:\ndef findMin(arr): \n    min = arr[0] \n    for i in range(1, len(arr)): \n        if arr[i] < min: \n            min = arr[i] \n    return min\n\narr = [3, 4, 12, 19, 5, 17]\nprint(findMin(arr))"}
{"instruction":"Construct an XML document using Python which contains the following data.","input":"Item1, Item2, Item3","output":"import xml.etree.ElementTree as ET\n\n# creating the root element\ndata = ET.Element('data')\n\nitems = ['Item1', 'Item2', 'Item3']\n\n# loop over items\nfor item in items:\n    # creating sub elements\n    item_element = ET.SubElement(data, 'item')\n\n    # assign the value for the sub elements\n    item_element.text = item\n\n# write the XML Tree\ntree = ET.ElementTree(data)\ntree.write('data.xml')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an XML document using Python which contains the following data.\n\n### Input:\nItem1, Item2, Item3\n\n### Output:\nimport xml.etree.ElementTree as ET\n\n# creating the root element\ndata = ET.Element('data')\n\nitems = ['Item1', 'Item2', 'Item3']\n\n# loop over items\nfor item in items:\n    # creating sub elements\n    item_element = ET.SubElement(data, 'item')\n\n    # assign the value for the sub elements\n    item_element.text = item\n\n# write the XML Tree\ntree = ET.ElementTree(data)\ntree.write('data.xml')"}
{"instruction":"Use Selenium to create a Python program to automate testing an existing web page.","input":"https:\/\/example.com","output":"from selenium import webdriver\nimport time\n\ndriver = webdriver.Chrome()\ndriver.get('https:\/\/example.com')\n\n# Check the title of the page\nassert driver.title == 'Example Domain'\n\n# Check the text on the page\ntext = driver.find_element_by_xpath('\/\/p').text\nassert text == 'This domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission.'\n\n# Check for a hyperlink\nlink = driver.find_element_by_xpath('\/\/a')\nassert link.text == 'More information...'\n\ntime.sleep(2)\ndriver.quit()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse Selenium to create a Python program to automate testing an existing web page.\n\n### Input:\nhttps:\/\/example.com\n\n### Output:\nfrom selenium import webdriver\nimport time\n\ndriver = webdriver.Chrome()\ndriver.get('https:\/\/example.com')\n\n# Check the title of the page\nassert driver.title == 'Example Domain'\n\n# Check the text on the page\ntext = driver.find_element_by_xpath('\/\/p').text\nassert text == 'This domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission.'\n\n# Check for a hyperlink\nlink = driver.find_element_by_xpath('\/\/a')\nassert link.text == 'More information...'\n\ntime.sleep(2)\ndriver.quit()"}
{"instruction":"Write a class definition in Python for a custom object called \u201cEmployee\u201d, which has two data members: \u201cname\u201d, a String, and \u201csalary\u201d, an integer.","input":"","output":"class Employee: \n    def __init__(self, name, salary): \n        self.name = name \n        self.salary = salary \n  \n# Driver Code  \ne1 = Employee(\"John\", 15000) \ne2 = Employee(\"Mary\", 12000) \n  \nprint(e1.name) \nprint(e1.salary)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a class definition in Python for a custom object called \u201cEmployee\u201d, which has two data members: \u201cname\u201d, a String, and \u201csalary\u201d, an integer.\n\n### Input:\n\n\n### Output:\nclass Employee: \n    def __init__(self, name, salary): \n        self.name = name \n        self.salary = salary \n  \n# Driver Code  \ne1 = Employee(\"John\", 15000) \ne2 = Employee(\"Mary\", 12000) \n  \nprint(e1.name) \nprint(e1.salary)"}
{"instruction":"Implement a function in Python that takes a list of integers and returns the sum of the squares of the even numbers.","input":"[1, 2, 3, 4, 5]","output":"def sum_of_squares_of_evens(list_):\n  sum_ = 0\n  for num in list_:\n    if num % 2 == 0:\n      sum_ += num**2\n  \n  return sum_","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that takes a list of integers and returns the sum of the squares of the even numbers.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef sum_of_squares_of_evens(list_):\n  sum_ = 0\n  for num in list_:\n    if num % 2 == 0:\n      sum_ += num**2\n  \n  return sum_"}
{"instruction":"Build an algorithm in Python for classification task.","input":"","output":"def classify(x):\n  if (x > 0):\n    return 'positive'\n  else:\n    return 'negative'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild an algorithm in Python for classification task.\n\n### Input:\n\n\n### Output:\ndef classify(x):\n  if (x > 0):\n    return 'positive'\n  else:\n    return 'negative'"}
{"instruction":"Create a Python function to convert centimeter to inches.","input":"","output":"def centimeter_to_inches(cm):\n    inches = cm * 0.39\n    return inches\n\ncm = 10\ninches = centimeter_to_inches(cm)\nprint(inches)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to convert centimeter to inches.\n\n### Input:\n\n\n### Output:\ndef centimeter_to_inches(cm):\n    inches = cm * 0.39\n    return inches\n\ncm = 10\ninches = centimeter_to_inches(cm)\nprint(inches)"}
{"instruction":"Optimize a given Python function to make it more efficient.","input":"def my_function(n):\n  sum = 1\n  for i in range(n):\n    for j in range(n):\n        sum *= j\n  return sum","output":"def my_function(n):\n  sum = 1\n  for j in range(1, n+1):\n    sum *= j\n  return sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a given Python function to make it more efficient.\n\n### Input:\ndef my_function(n):\n  sum = 1\n  for i in range(n):\n    for j in range(n):\n        sum *= j\n  return sum\n\n### Output:\ndef my_function(n):\n  sum = 1\n  for j in range(1, n+1):\n    sum *= j\n  return sum"}
{"instruction":"Create a class in Python to add two matrices.","input":"","output":"class MatrixAddition:\n \n    def addTwoMatrices(self, X, Y):\n        result = [[0, 0, 0],\n                  [0, 0, 0],\n                  [0, 0, 0]]\n \n        for i in range(len(X)):\n            for j in range(len(X[0])):\n                result[i][j] = X[i][j] + Y[i][j]\n        for r in result:\n            print(r)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to add two matrices.\n\n### Input:\n\n\n### Output:\nclass MatrixAddition:\n \n    def addTwoMatrices(self, X, Y):\n        result = [[0, 0, 0],\n                  [0, 0, 0],\n                  [0, 0, 0]]\n \n        for i in range(len(X)):\n            for j in range(len(X[0])):\n                result[i][j] = X[i][j] + Y[i][j]\n        for r in result:\n            print(r)"}
{"instruction":"Using Python, create a function that calculates the objective function of a linear equation.","input":"ax + by = c\n\na = 3, b = 5, c = 7","output":"def linear_eq(a, b, c):\n    return a*x + b*y - c\n\n# For example:\nresult = linear_eq(3, 5, 7)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, create a function that calculates the objective function of a linear equation.\n\n### Input:\nax + by = c\n\na = 3, b = 5, c = 7\n\n### Output:\ndef linear_eq(a, b, c):\n    return a*x + b*y - c\n\n# For example:\nresult = linear_eq(3, 5, 7)\nprint(result)"}
{"instruction":"Given a multi-dimensional array, write a python code snippet to find the sum of its elements.","input":"arr = [[1, 4, 7], [2, 6, 3], [3, 5, 9]]","output":"# Use nested list comprehension to calculate the sum \ntotal_sum = sum([sum(row) for row in arr])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a multi-dimensional array, write a python code snippet to find the sum of its elements.\n\n### Input:\narr = [[1, 4, 7], [2, 6, 3], [3, 5, 9]]\n\n### Output:\n# Use nested list comprehension to calculate the sum \ntotal_sum = sum([sum(row) for row in arr])"}
{"instruction":"In Python, write a function to create a dictionary using the given two lists.","input":"keys = [\"name\", \"age\", \"number\"]\nvalues = [\"John\", 32, 258]","output":"def create_dict(keys, values):\n    return {key: val for key, val in zip(keys, values)}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, write a function to create a dictionary using the given two lists.\n\n### Input:\nkeys = [\"name\", \"age\", \"number\"]\nvalues = [\"John\", 32, 258]\n\n### Output:\ndef create_dict(keys, values):\n    return {key: val for key, val in zip(keys, values)}"}
{"instruction":"Develop a Python class to represent a point on 2D-space.","input":"","output":"class Point:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n\nif __name__ == '__main__':\n  point = Point(2, 3)\n  print(point.x, point.y)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python class to represent a point on 2D-space.\n\n### Input:\n\n\n### Output:\nclass Point:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n\nif __name__ == '__main__':\n  point = Point(2, 3)\n  print(point.x, point.y)"}
{"instruction":"Create a python code that can randomly select 10 numbers from a sequence of numbers from 1 to 100","input":"","output":"import random as rd\n\ndef random_selection(n):\n    num_list = [i for i in range(1, n+1)]\n    index_list = rd.sample(range(1, n+1), 10)\n    \n    selected_list = [num_list[i] for i in index_list]\n    return selected_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python code that can randomly select 10 numbers from a sequence of numbers from 1 to 100\n\n### Input:\n\n\n### Output:\nimport random as rd\n\ndef random_selection(n):\n    num_list = [i for i in range(1, n+1)]\n    index_list = rd.sample(range(1, n+1), 10)\n    \n    selected_list = [num_list[i] for i in index_list]\n    return selected_list"}
{"instruction":"Design a python function to filter out the fields from a JSON data.","input":"{\n  \"name\": \"John\",\n  \"age\": 25,\n  \"position\": \"Developer\"\n}","output":"def filter_json_data(input, fields):\n    output = {}\n    for field in fields:\n        if field in input:\n            output[field] = input[field]\n    return output","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python function to filter out the fields from a JSON data.\n\n### Input:\n{\n  \"name\": \"John\",\n  \"age\": 25,\n  \"position\": \"Developer\"\n}\n\n### Output:\ndef filter_json_data(input, fields):\n    output = {}\n    for field in fields:\n        if field in input:\n            output[field] = input[field]\n    return output"}
{"instruction":"Create a Python program to sort numbers in an array using different algorithms, such as quick sort, insertion sort and merge sort.","input":"","output":"def quick_sort(array):\n    if len(array) < 2:\n        return array\n\n    pivot = array[0]\n    less = [i for i in array[1:] if i <= pivot]\n    greater = [i for i in array[1:] if i > pivot]\n    return quick_sort(less) + [pivot] + quick_sort(greater)\n\ndef insertion_sort(array):\n    for i in range(1, len(array)):\n        j = i\n        while j > 0 and array[j - 1] > array[j]:\n            array[j], array[j - 1] = array[j - 1], array[j]\n            j -= 1\n    return array\n\ndef merge_sort(array):\n    if len(array) > 1:\n        mid = len(array) \/\/ 2\n        left = array[:mid]\n        right = array[mid:]\n        merge_sort(left)\n        merge_sort(right)\n        i, j, k = 0, 0, 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                array[k] = left[i]\n                i += 1\n            else:\n                array[k] = right[j]\n                j += 1\n            k += 1\n        while i < len(left):\n            array[k] = left[i]\n            i += 1\n            k += 1\n        while j < len(right):\n            array[k] = right[j]\n            j += 1\n            k += 1\n    return array","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to sort numbers in an array using different algorithms, such as quick sort, insertion sort and merge sort.\n\n### Input:\n\n\n### Output:\ndef quick_sort(array):\n    if len(array) < 2:\n        return array\n\n    pivot = array[0]\n    less = [i for i in array[1:] if i <= pivot]\n    greater = [i for i in array[1:] if i > pivot]\n    return quick_sort(less) + [pivot] + quick_sort(greater)\n\ndef insertion_sort(array):\n    for i in range(1, len(array)):\n        j = i\n        while j > 0 and array[j - 1] > array[j]:\n            array[j], array[j - 1] = array[j - 1], array[j]\n            j -= 1\n    return array\n\ndef merge_sort(array):\n    if len(array) > 1:\n        mid = len(array) \/\/ 2\n        left = array[:mid]\n        right = array[mid:]\n        merge_sort(left)\n        merge_sort(right)\n        i, j, k = 0, 0, 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                array[k] = left[i]\n                i += 1\n            else:\n                array[k] = right[j]\n                j += 1\n            k += 1\n        while i < len(left):\n            array[k] = left[i]\n            i += 1\n            k += 1\n        while j < len(right):\n            array[k] = right[j]\n            j += 1\n            k += 1\n    return array"}
{"instruction":"Create a program in Python that will calculate the mean of a given set of numbers.","input":"[1, 2, 3, 4, 5]","output":"nums = [1, 2, 3, 4, 5]\n\ndef mean(nums):\n total = 0\n for i in nums:\n  total += i\n mean = total\/len(nums)\n return mean\n\nprint(mean(nums)) # 3.0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that will calculate the mean of a given set of numbers.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\nnums = [1, 2, 3, 4, 5]\n\ndef mean(nums):\n total = 0\n for i in nums:\n  total += i\n mean = total\/len(nums)\n return mean\n\nprint(mean(nums)) # 3.0"}
{"instruction":"Develop an AI-powered movie recommendation system in Python.","input":"A list of user's ratings for 50 different movies.","output":"# import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n#Define the rating matrix\ndf = pd.read_csv('ratings.csv')\nrating_matrix = df.pivot_table(values='rating',index='user_id',columns='movie_title')\n\n#Calculate cosine similarity\nsimilarity_scores = cosine_similarity(rating_matrix.values)\n\n#Define a function to recommend movies\ndef recommend_movies(user_id, input_rating_matrix, similarity_matrix):\n  #Calculate the mean of all ratings for each user\n  user_mean = np.nanmean(input_rating_matrix,axis=1)\n  #Calculate and subtract mean from user ratings\n  user_rating_minus_mean = input_rating_matrix - user_mean.reshape(-1,1)\n  \n  #Calculate weighted similarity scores\n  weighted_similarity_scores = similarity_matrix * user_rating_minus_mean\n  \n  #Calculate the weighted sum of all similarity scores for each movie\n  movie_score = weighted_similarity_scores.sum(axis=0)\n  \n  #Generate list of recommended movies, sorted by score in descending order\n  sorted_movie_scores = np.sort(movie_score)[::-1]\n  sorted_movies = np.argsort(movie_score)[::-1]\n  \n  #Recommend movies, excluding movies which the user has already rated\n  user_rated_movies = input_rating_matrix[user_id].nonzero()[0]\n  recommend_movies = []\n  for i in sorted_movies:\n    if i not in user_rated_movies:\n      recommend_movies.append(i)\n      \n  return recommend_movies\n  \n#Call the function \nrecommend_movies(user_id, rating_matrix, similarity_scores)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI-powered movie recommendation system in Python.\n\n### Input:\nA list of user's ratings for 50 different movies.\n\n### Output:\n# import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n#Define the rating matrix\ndf = pd.read_csv('ratings.csv')\nrating_matrix = df.pivot_table(values='rating',index='user_id',columns='movie_title')\n\n#Calculate cosine similarity\nsimilarity_scores = cosine_similarity(rating_matrix.values)\n\n#Define a function to recommend movies\ndef recommend_movies(user_id, input_rating_matrix, similarity_matrix):\n  #Calculate the mean of all ratings for each user\n  user_mean = np.nanmean(input_rating_matrix,axis=1)\n  #Calculate and subtract mean from user ratings\n  user_rating_minus_mean = input_rating_matrix - user_mean.reshape(-1,1)\n  \n  #Calculate weighted similarity scores\n  weighted_similarity_scores = similarity_matrix * user_rating_minus_mean\n  \n  #Calculate the weighted sum of all similarity scores for each movie\n  movie_score = weighted_similarity_scores.sum(axis=0)\n  \n  #Generate list of recommended movies, sorted by score in descending order\n  sorted_movie_scores = np.sort(movie_score)[::-1]\n  sorted_movies = np.argsort(movie_score)[::-1]\n  \n  #Recommend movies, excluding movies which the user has already rated\n  user_rated_movies = input_rating_matrix[user_id].nonzero()[0]\n  recommend_movies = []\n  for i in sorted_movies:\n    if i not in user_rated_movies:\n      recommend_movies.append(i)\n      \n  return recommend_movies\n  \n#Call the function \nrecommend_movies(user_id, rating_matrix, similarity_scores)"}
{"instruction":"Generate a machine learning model in Python for predicting the rating for a provided list of attractions.","input":"List of attractions:\n\n1. Harbour Bridge\n2. Opera House\n3. Bondi Beach","output":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\n#importing the dataset\nattractions = ['Harbour Bridge', 'Opera House', 'Bondi Beach']\nratings = [5, 4, 4.5]\n\n#generating the model\nmodel = LinearRegression()\nmodel.fit(attractions, ratings)\n\n#testing the model\npredicted = model.predict([['Harbour Bridge']])\nprint('Predicted rating for Harbour Bridge is ' + str(predicted[0]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a machine learning model in Python for predicting the rating for a provided list of attractions.\n\n### Input:\nList of attractions:\n\n1. Harbour Bridge\n2. Opera House\n3. Bondi Beach\n\n### Output:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\n#importing the dataset\nattractions = ['Harbour Bridge', 'Opera House', 'Bondi Beach']\nratings = [5, 4, 4.5]\n\n#generating the model\nmodel = LinearRegression()\nmodel.fit(attractions, ratings)\n\n#testing the model\npredicted = model.predict([['Harbour Bridge']])\nprint('Predicted rating for Harbour Bridge is ' + str(predicted[0]))"}
{"instruction":"Construct a loop in Python that iterates over a given list of strings and prints each string.","input":"[\"apple\", \"banana\", \"cherry\"]","output":"strings = [\"apple\", \"banana\", \"cherry\"]\n\nfor string in strings:\n    print(string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a loop in Python that iterates over a given list of strings and prints each string.\n\n### Input:\n[\"apple\", \"banana\", \"cherry\"]\n\n### Output:\nstrings = [\"apple\", \"banana\", \"cherry\"]\n\nfor string in strings:\n    print(string)"}
{"instruction":"Design a REST-API in Python using Flask that displays the current date and time when a GET request is sent.","input":"Not applicable","output":"from flask import Flask, jsonify\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n@app.route('\/time', methods=['GET'])\ndef time():\n  time = {\n    'time': datetime.now()\n  }\n  return jsonify(time)\n\nif __name__ == '__main__':\n  app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a REST-API in Python using Flask that displays the current date and time when a GET request is sent.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, jsonify\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n@app.route('\/time', methods=['GET'])\ndef time():\n  time = {\n    'time': datetime.now()\n  }\n  return jsonify(time)\n\nif __name__ == '__main__':\n  app.run()"}
{"instruction":"Create a Python program to make a copy of an array.","input":"","output":"\"\"\"\nCreate a Python program to make a copy of an array. \n\"\"\"\n\ndef copy_array(arr):\n    return arr[:]\n\nif __name__ == '__main__':\n    arr = [1,2,3,4,5]\n    print(copy_array(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to make a copy of an array.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a Python program to make a copy of an array. \n\"\"\"\n\ndef copy_array(arr):\n    return arr[:]\n\nif __name__ == '__main__':\n    arr = [1,2,3,4,5]\n    print(copy_array(arr))"}
{"instruction":"Design a Python algorithm to detect the presence of a target word in a text.","input":"","output":"# This is a python program to detect the presence of a target word in a text\ndef detect_word(target, text):\n    return target in text.split()\n\n# Example\ntarget = 'apple'\ntext = 'I like apples, they are sweet and juicy.'\n\nif detect_word(target, text):\n    print('Target word found in the text.')\nelse:\n    print('Target word not found in the text.')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python algorithm to detect the presence of a target word in a text.\n\n### Input:\n\n\n### Output:\n# This is a python program to detect the presence of a target word in a text\ndef detect_word(target, text):\n    return target in text.split()\n\n# Example\ntarget = 'apple'\ntext = 'I like apples, they are sweet and juicy.'\n\nif detect_word(target, text):\n    print('Target word found in the text.')\nelse:\n    print('Target word not found in the text.')"}
{"instruction":"Create a Python program to simulate a dice roll and print the result.","input":"","output":"import random\n\n# Simulate a dice roll\nresult = random.randint(1,6)\nprint(\"Result of the dice roll:\", result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to simulate a dice roll and print the result.\n\n### Input:\n\n\n### Output:\nimport random\n\n# Simulate a dice roll\nresult = random.randint(1,6)\nprint(\"Result of the dice roll:\", result)"}
{"instruction":"Generate all possible permutations of a given string in Python.","input":"","output":"import itertools\n\ndef permutations(string): \n    return list(itertools.permutations(string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate all possible permutations of a given string in Python.\n\n### Input:\n\n\n### Output:\nimport itertools\n\ndef permutations(string): \n    return list(itertools.permutations(string))"}
{"instruction":"Write a code to delete a certain element from a linked list.","input":"","output":"# Python program to delete a node from Linked List  \n  \n# Node class  \nclass Node:  \n  \n    # Function to initialize the node object  \n    def __init__(self, data):  \n        self.data = data  # Assign data  \n        self.next = None  # Initialize next as null  \n  \n  \n# Linked List class contains a Node object  \nclass LinkedList:  \n  \n    # Function to initialize head  \n    def __init__(self):  \n        self.head = None\n  \n    # Function to delete a node  \n    def deleteNode(self, node): \n  \n        # Store head node  \n        temp = self.head  \n  \n        # If head node itself holds the key to be deleted  \n        if (temp is not None):  \n            if (temp == node):  \n                self.head = temp.next\n                temp = None\n                return\n  \n        # Search for the key to be deleted, keep track of the  \n        # previous node as we need to change 'prev.next'  \n        while(temp is not None):  \n            if temp == node:  \n                break\n            prev = temp  \n            temp = temp.next \n  \n        # if key is not present in linked list  \n        if(temp == None):  \n            return\n  \n        # Unlink the node from linked list  \n        prev.next = temp.next\n  \n        temp = None","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to delete a certain element from a linked list.\n\n### Input:\n\n\n### Output:\n# Python program to delete a node from Linked List  \n  \n# Node class  \nclass Node:  \n  \n    # Function to initialize the node object  \n    def __init__(self, data):  \n        self.data = data  # Assign data  \n        self.next = None  # Initialize next as null  \n  \n  \n# Linked List class contains a Node object  \nclass LinkedList:  \n  \n    # Function to initialize head  \n    def __init__(self):  \n        self.head = None\n  \n    # Function to delete a node  \n    def deleteNode(self, node): \n  \n        # Store head node  \n        temp = self.head  \n  \n        # If head node itself holds the key to be deleted  \n        if (temp is not None):  \n            if (temp == node):  \n                self.head = temp.next\n                temp = None\n                return\n  \n        # Search for the key to be deleted, keep track of the  \n        # previous node as we need to change 'prev.next'  \n        while(temp is not None):  \n            if temp == node:  \n                break\n            prev = temp  \n            temp = temp.next \n  \n        # if key is not present in linked list  \n        if(temp == None):  \n            return\n  \n        # Unlink the node from linked list  \n        prev.next = temp.next\n  \n        temp = None"}
{"instruction":"Create a data structure in Python to efficiently store and retrieve customer profiles.","input":"Customer profile information could include:\n- Customer name\n- Date of birth\n- Address\n- Phone number\n- Credit Card details","output":"class Customer:\n    def __init__(self, name, date_of_birth, address, phone_number, credit_card_details):\n        self.name = name\n        self.date_of_birth = date_of_birth\n        self.address = address\n        self.phone_number = phone_number\n        self.credit_card_details = credit_card_details\n\nclass CustomerDatabase:\n    def __init__(self):\n        self.customers = {}\n    \n    def add_customer(self, customer):\n        self.customers[customer.name] = customer\n    \n    def get_customer(self, name):\n        return self.customers.get(name)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a data structure in Python to efficiently store and retrieve customer profiles.\n\n### Input:\nCustomer profile information could include:\n- Customer name\n- Date of birth\n- Address\n- Phone number\n- Credit Card details\n\n### Output:\nclass Customer:\n    def __init__(self, name, date_of_birth, address, phone_number, credit_card_details):\n        self.name = name\n        self.date_of_birth = date_of_birth\n        self.address = address\n        self.phone_number = phone_number\n        self.credit_card_details = credit_card_details\n\nclass CustomerDatabase:\n    def __init__(self):\n        self.customers = {}\n    \n    def add_customer(self, customer):\n        self.customers[customer.name] = customer\n    \n    def get_customer(self, name):\n        return self.customers.get(name)"}
{"instruction":"Create an object-oriented program in Python to represent a game.","input":"Not applicable","output":"class Game:\n def __init__(self):\n self.players = []\n self.board = None\n\ndef add_player(self, player):\n self.players.append(player)\n\ndef set_board(self, board):\n self.board = board\n\ndef start(self):\n for player in self.players:\n player.turn()\n\ndef end(self):\n for player in self.players:\n player.game_over()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an object-oriented program in Python to represent a game.\n\n### Input:\nNot applicable\n\n### Output:\nclass Game:\n def __init__(self):\n self.players = []\n self.board = None\n\ndef add_player(self, player):\n self.players.append(player)\n\ndef set_board(self, board):\n self.board = board\n\ndef start(self):\n for player in self.players:\n player.turn()\n\ndef end(self):\n for player in self.players:\n player.game_over()"}
{"instruction":"Write a Python program to find the prime numbers from a list given by the user.","input":"mylist = [3,4,7,11,13,18]","output":"def isPrime(num):\n    for i in range (2, num): \n        if num % i == 0: \n            return False\n    return True  \n  \n# Driver Code \nmylist = [3,4,7,11,13,18]\n  \nfor num in mylist: \n    # if condition is true, print the number \n    if isPrime(num): \n        print(num, end =\" \")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the prime numbers from a list given by the user.\n\n### Input:\nmylist = [3,4,7,11,13,18]\n\n### Output:\ndef isPrime(num):\n    for i in range (2, num): \n        if num % i == 0: \n            return False\n    return True  \n  \n# Driver Code \nmylist = [3,4,7,11,13,18]\n  \nfor num in mylist: \n    # if condition is true, print the number \n    if isPrime(num): \n        print(num, end =\" \")"}
{"instruction":"Create a Python program to consume an API and print the data it receives.","input":"Not applicable","output":"import requests\n\nurl = 'https:\/\/jsonplaceholder.typicode.com\/posts'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n  posts = response.json()\n  for post in posts:\n    print(post['title'])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to consume an API and print the data it receives.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\n\nurl = 'https:\/\/jsonplaceholder.typicode.com\/posts'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n  posts = response.json()\n  for post in posts:\n    print(post['title'])"}
{"instruction":"Create a JSON object using Python that contains the following data:","input":"Name: John \nAge: 56\nCity: New York","output":"data = {\n    'name': 'John',\n    'age': 56,\n    'city': 'New York'\n    }","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a JSON object using Python that contains the following data:\n\n### Input:\nName: John \nAge: 56\nCity: New York\n\n### Output:\ndata = {\n    'name': 'John',\n    'age': 56,\n    'city': 'New York'\n    }"}
{"instruction":"Modify the following Python program to check whether a given string is a palindrome","input":"","output":"def is_palindrome(str):\n    str = str.replace(\" \", \"\")\n    return str == str[::-1] \n\nwhile True:\n    input_str = input(\"Enter a string: \")\n    result = is_palindrome(input_str)\n    if result:\n        print(\"{} is a palindrome\".format(input_str))\n    else:\n        print(\"{} is not a palindrome\".format(input_str))\n    ans = input(\"Do you want to enter more strings (y\/n)?\")\n        if ans == 'n':\n            break","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following Python program to check whether a given string is a palindrome\n\n### Input:\n\n\n### Output:\ndef is_palindrome(str):\n    str = str.replace(\" \", \"\")\n    return str == str[::-1] \n\nwhile True:\n    input_str = input(\"Enter a string: \")\n    result = is_palindrome(input_str)\n    if result:\n        print(\"{} is a palindrome\".format(input_str))\n    else:\n        print(\"{} is not a palindrome\".format(input_str))\n    ans = input(\"Do you want to enter more strings (y\/n)?\")\n        if ans == 'n':\n            break"}
{"instruction":"Make a program that finds the reverse of a string in Python.","input":"Hello World","output":"def reverse(s): \n    return s[::-1] \n\nreverse(\"Hello World\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a program that finds the reverse of a string in Python.\n\n### Input:\nHello World\n\n### Output:\ndef reverse(s): \n    return s[::-1] \n\nreverse(\"Hello World\")"}
{"instruction":"Convert the given JSON data into python dictionary.","input":"{\"key\": \"value\"}","output":"import json \n\njson_data = '{\"key\": \"value\"}'\n\npydict = json.loads(json_data) \nprint (\"Python dictionary:\", pydict)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the given JSON data into python dictionary.\n\n### Input:\n{\"key\": \"value\"}\n\n### Output:\nimport json \n\njson_data = '{\"key\": \"value\"}'\n\npydict = json.loads(json_data) \nprint (\"Python dictionary:\", pydict)"}
{"instruction":"Create a Python program that outputs a dictionary containing the names of the months as keys and the number of days they contain as values.","input":"Not applicable","output":"month_days = { \n \"January\": 31, \n \"February\": 28, \n \"March\": 31, \n \"April\": 30, \n \"May\": 31, \n \"June\": 30, \n \"July\": 31, \n \"August\": 31, \n \"September\": 30, \n \"October\": 31, \n \"November\": 30, \n \"December\": 31 \n} \n \nprint(month_days)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that outputs a dictionary containing the names of the months as keys and the number of days they contain as values.\n\n### Input:\nNot applicable\n\n### Output:\nmonth_days = { \n \"January\": 31, \n \"February\": 28, \n \"March\": 31, \n \"April\": 30, \n \"May\": 31, \n \"June\": 30, \n \"July\": 31, \n \"August\": 31, \n \"September\": 30, \n \"October\": 31, \n \"November\": 30, \n \"December\": 31 \n} \n \nprint(month_days)"}
{"instruction":"The given code provides utility functions for Azure services. Use the functions as needed to validate inputs, handle errors, and perform operations.","input":"","output":"# -------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for\n# license information.\n# --------------------------------------------------------------------------\nfrom sys import version_info\n\nif version_info < (3,):\n    def _str(value):\n        if isinstance(value, unicode):\n            return value.encode('utf-8')\n\n        return str(value)\nelse:\n    _str = str\n\n\ndef _to_str(value):\n    return _str(value) if value is not None else None\n\n\nfrom azure.common import (\n    AzureHttpError,\n    AzureConflictHttpError,\n    AzureMissingResourceHttpError,\n    AzureException,\n)\nfrom ._constants import (\n    _ENCRYPTION_PROTOCOL_V1,\n)\n\n_ERROR_CONFLICT = 'Conflict ({0})'\n_ERROR_NOT_FOUND = 'Not found ({0})'\n_ERROR_UNKNOWN = 'Unknown error ({0})'\n_ERROR_STORAGE_MISSING_INFO = \\\n    'You need to provide an account name and either an account_key or sas_token when creating a storage service.'\n_ERROR_EMULATOR_DOES_NOT_SUPPORT_FILES = \\\n    'The emulator does not support the file service.'\n_ERROR_ACCESS_POLICY = \\\n    'share_access_policy must be either SignedIdentifier or AccessPolicy ' + \\\n    'instance'\n_ERROR_PARALLEL_NOT_SEEKABLE = 'Parallel operations require a seekable stream.'\n_ERROR_VALUE_SHOULD_BE_BYTES = '{0} should be of type bytes.'\n_ERROR_VALUE_SHOULD_BE_BYTES_OR_STREAM = '{0} should be of type bytes or a readable file-like\/io.IOBase stream object.'\n_ERROR_VALUE_SHOULD_BE_SEEKABLE_STREAM = '{0} should be a seekable file-like\/io.IOBase type stream object.'\n_ERROR_VALUE_SHOULD_BE_STREAM = '{0} should be a file-like\/io.IOBase type stream object with a read method.'\n_ERROR_VALUE_NONE = '{0} should not be None.'\n_ERROR_VALUE_NONE_OR_EMPTY = '{0} should not be None or empty.'\n_ERROR_VALUE_NEGATIVE = '{0} should not be negative.'\n_ERROR_START_END_NEEDED_FOR_MD5 = \\\n    'Both end_range and start_range need to be specified ' + \\\n    'for getting content MD5.'\n_ERROR_RANGE_TOO_LARGE_FOR_MD5 = \\\n    'Getting content MD5 for a range greater than 4MB ' + \\\n    'is not supported.'\n_ERROR_MD5_MISMATCH = \\\n    'MD5 mismatch. Expected value is \\'{0}\\', computed value is \\'{1}\\'.'\n_ERROR_TOO_MANY_ACCESS_POLICIES = \\\n    'Too many access policies provided. The server does not support setting more than 5 access policies on a single resource.'\n_ERROR_OBJECT_INVALID = \\\n    '{0} does not define a complete interface. Value of {1} is either missing or invalid.'\n_ERROR_UNSUPPORTED_ENCRYPTION_VERSION = \\\n    'Encryption version is not supported.'\n_ERROR_DECRYPTION_FAILURE = \\\n    'Decryption failed'\n_ERROR_ENCRYPTION_REQUIRED = \\\n    'Encryption required but no key was provided.'\n_ERROR_DECRYPTION_REQUIRED = \\\n    'Decryption required but neither key nor resolver was provided.' + \\\n    ' If you do not want to decypt, please do not set the require encryption flag.'\n_ERROR_INVALID_KID = \\\n    'Provided or resolved key-encryption-key does not match the id of key used to encrypt.'\n_ERROR_UNSUPPORTED_ENCRYPTION_ALGORITHM = \\\n    'Specified encryption algorithm is not supported.'\n_ERROR_UNSUPPORTED_METHOD_FOR_ENCRYPTION = 'The require_encryption flag is set, but encryption is not supported' + \\\n                                           ' for this method.'\n_ERROR_UNKNOWN_KEY_WRAP_ALGORITHM = 'Unknown key wrap algorithm.'\n_ERROR_DATA_NOT_ENCRYPTED = 'Encryption required, but received data does not contain appropriate metatadata.' + \\\n                            'Data was either not encrypted or metadata has been lost.'\n\n\ndef _dont_fail_on_exist(error):\n    ''' don't throw exception if the resource exists.\n    This is called by create_* APIs with fail_on_exist=False'''\n    if isinstance(error, AzureConflictHttpError):\n        return False\n    else:\n        raise error\n\n\ndef _dont_fail_not_exist(error):\n    ''' don't throw exception if the resource doesn't exist.\n    This is called by create_* APIs with fail_on_exist=False'''\n    if isinstance(error, AzureMissingResourceHttpError):\n        return False\n    else:\n        raise error\n\n\ndef _http_error_handler(http_error):\n    ''' Simple error handler for azure.'''\n    message = str(http_error)\n    error_code = None\n\n    if 'x-ms-error-code' in http_error.respheader:\n        error_code = http_error.respheader['x-ms-error-code']\n        message += ' ErrorCode: ' + error_code\n\n    if http_error.respbody is not None:\n        message += '\\n' + http_error.respbody.decode('utf-8-sig')\n\n    ex = AzureHttpError(message, http_error.status)\n    ex.error_code = error_code\n\n    raise ex\n\n\ndef _validate_type_bytes(param_name, param):\n    if not isinstance(param, bytes):\n        raise TypeError(_ERROR_VALUE_SHOULD_BE_BYTES.format(param_name))\n\n\ndef _validate_type_bytes_or_stream(param_name, param):\n    if not (isinstance(param, bytes) or hasattr(param, 'read')):\n        raise TypeError(_ERROR_VALUE_SHOULD_BE_BYTES_OR_STREAM.format(param_name))\n\n\ndef _validate_not_none(param_name, param):\n    if param is None:\n        raise ValueError(_ERROR_VALUE_NONE.format(param_name))\n\n\ndef _validate_content_match(server_md5, computed_md5):\n    if server_md5 != computed_md5:\n        raise AzureException(_ERROR_MD5_MISMATCH.format(server_md5, computed_md5))\n\n\ndef _validate_access_policies(identifiers):\n    if identifiers and len(identifiers) > 5:\n        raise AzureException(_ERROR_TOO_MANY_ACCESS_POLICIES)\n\n\ndef _validate_key_encryption_key_wrap(kek):\n    # Note that None is not callable and so will fail the second clause of each check.\n    if not hasattr(kek, 'wrap_key') or not callable(kek.wrap_key):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'wrap_key'))\n    if not hasattr(kek, 'get_kid') or not callable(kek.get_kid):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'get_kid'))\n    if not hasattr(kek, 'get_key_wrap_algorithm') or not callable(kek.get_key_wrap_algorithm):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'get_key_wrap_algorithm'))\n\n\ndef _validate_key_encryption_key_unwrap(kek):\n    if not hasattr(kek, 'get_kid') or not callable(kek.get_kid):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'get_kid'))\n    if not hasattr(kek, 'unwrap_key') or not callable(kek.unwrap_key):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'unwrap_key'))\n\n\ndef _validate_encryption_required(require_encryption, kek):\n    if require_encryption and (kek is None):\n        raise ValueError(_ERROR_ENCRYPTION_REQUIRED)\n\n\ndef _validate_decryption_required(require_encryption, kek, resolver):\n    if (require_encryption and (kek is None) and\n            (resolver is None)):\n        raise ValueError(_ERROR_DECRYPTION_REQUIRED)\n\n\ndef _validate_encryption_protocol_version(encryption_protocol):\n    if not (_ENCRYPTION_PROTOCOL_V1 == encryption_protocol):\n        raise ValueError(_ERROR_UNSUPPORTED_ENCRYPTION_VERSION)\n\n\ndef _validate_kek_id(kid, resolved_id):\n    if not (kid == resolved_id):\n        raise ValueError(_ERROR_INVALID_KID)\n\n\ndef _validate_encryption_unsupported(require_encryption, key_encryption_key):\n    if require_encryption or (key_encryption_key is not None):\n        raise ValueError(_ERROR_UNSUPPORTED_METHOD_FOR_ENCRYPTION)\n\n\ndef _validate_user_delegation_key(user_delegation_key):\n    _validate_not_none('user_delegation_key.signed_oid', user_delegation_key.signed_oid)\n    _validate_not_none('user_delegation_key.signed_tid', user_delegation_key.signed_tid)\n    _validate_not_none('user_delegation_key.signed_start', user_delegation_key.signed_start)\n    _validate_not_none('user_delegation_key.signed_expiry', user_delegation_key.signed_expiry)\n    _validate_not_none('user_delegation_key.signed_version', user_delegation_key.signed_version)\n    _validate_not_none('user_delegation_key.signed_service', user_delegation_key.signed_service)\n    _validate_not_none('user_delegation_key.value', user_delegation_key.value)\n\n\n# wraps a given exception with the desired exception type\ndef _wrap_exception(ex, desired_type):\n    msg = \"\"\n    if len(ex.args) > 0:\n        msg = ex.args[0]\n    if version_info >= (3,):\n        # Automatic chaining in Python 3 means we keep the trace\n        return desired_type(msg)\n    else:\n        # There isn't a good solution in 2 for keeping the stack trace\n        # in general, or that will not result in an error in 3\n        # However, we can keep the previous error type and message\n        # TODO: In the future we will log the trace\n        return desired_type('{}: {}'.format(ex.__class__.__name__, msg))\n\n\nclass AzureSigningError(AzureException):\n    \"\"\"\n    Represents a fatal error when attempting to sign a request.\n    In general, the cause of this exception is user error. For example, the given account key is not valid.\n    Please visit https:\/\/docs.microsoft.com\/en-us\/azure\/storage\/common\/storage-create-storage-account for more info.\n    \"\"\"\n    pass\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code provides utility functions for Azure services. Use the functions as needed to validate inputs, handle errors, and perform operations.\n\n### Input:\n\n\n### Output:\n# -------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for\n# license information.\n# --------------------------------------------------------------------------\nfrom sys import version_info\n\nif version_info < (3,):\n    def _str(value):\n        if isinstance(value, unicode):\n            return value.encode('utf-8')\n\n        return str(value)\nelse:\n    _str = str\n\n\ndef _to_str(value):\n    return _str(value) if value is not None else None\n\n\nfrom azure.common import (\n    AzureHttpError,\n    AzureConflictHttpError,\n    AzureMissingResourceHttpError,\n    AzureException,\n)\nfrom ._constants import (\n    _ENCRYPTION_PROTOCOL_V1,\n)\n\n_ERROR_CONFLICT = 'Conflict ({0})'\n_ERROR_NOT_FOUND = 'Not found ({0})'\n_ERROR_UNKNOWN = 'Unknown error ({0})'\n_ERROR_STORAGE_MISSING_INFO = \\\n    'You need to provide an account name and either an account_key or sas_token when creating a storage service.'\n_ERROR_EMULATOR_DOES_NOT_SUPPORT_FILES = \\\n    'The emulator does not support the file service.'\n_ERROR_ACCESS_POLICY = \\\n    'share_access_policy must be either SignedIdentifier or AccessPolicy ' + \\\n    'instance'\n_ERROR_PARALLEL_NOT_SEEKABLE = 'Parallel operations require a seekable stream.'\n_ERROR_VALUE_SHOULD_BE_BYTES = '{0} should be of type bytes.'\n_ERROR_VALUE_SHOULD_BE_BYTES_OR_STREAM = '{0} should be of type bytes or a readable file-like\/io.IOBase stream object.'\n_ERROR_VALUE_SHOULD_BE_SEEKABLE_STREAM = '{0} should be a seekable file-like\/io.IOBase type stream object.'\n_ERROR_VALUE_SHOULD_BE_STREAM = '{0} should be a file-like\/io.IOBase type stream object with a read method.'\n_ERROR_VALUE_NONE = '{0} should not be None.'\n_ERROR_VALUE_NONE_OR_EMPTY = '{0} should not be None or empty.'\n_ERROR_VALUE_NEGATIVE = '{0} should not be negative.'\n_ERROR_START_END_NEEDED_FOR_MD5 = \\\n    'Both end_range and start_range need to be specified ' + \\\n    'for getting content MD5.'\n_ERROR_RANGE_TOO_LARGE_FOR_MD5 = \\\n    'Getting content MD5 for a range greater than 4MB ' + \\\n    'is not supported.'\n_ERROR_MD5_MISMATCH = \\\n    'MD5 mismatch. Expected value is \\'{0}\\', computed value is \\'{1}\\'.'\n_ERROR_TOO_MANY_ACCESS_POLICIES = \\\n    'Too many access policies provided. The server does not support setting more than 5 access policies on a single resource.'\n_ERROR_OBJECT_INVALID = \\\n    '{0} does not define a complete interface. Value of {1} is either missing or invalid.'\n_ERROR_UNSUPPORTED_ENCRYPTION_VERSION = \\\n    'Encryption version is not supported.'\n_ERROR_DECRYPTION_FAILURE = \\\n    'Decryption failed'\n_ERROR_ENCRYPTION_REQUIRED = \\\n    'Encryption required but no key was provided.'\n_ERROR_DECRYPTION_REQUIRED = \\\n    'Decryption required but neither key nor resolver was provided.' + \\\n    ' If you do not want to decypt, please do not set the require encryption flag.'\n_ERROR_INVALID_KID = \\\n    'Provided or resolved key-encryption-key does not match the id of key used to encrypt.'\n_ERROR_UNSUPPORTED_ENCRYPTION_ALGORITHM = \\\n    'Specified encryption algorithm is not supported.'\n_ERROR_UNSUPPORTED_METHOD_FOR_ENCRYPTION = 'The require_encryption flag is set, but encryption is not supported' + \\\n                                           ' for this method.'\n_ERROR_UNKNOWN_KEY_WRAP_ALGORITHM = 'Unknown key wrap algorithm.'\n_ERROR_DATA_NOT_ENCRYPTED = 'Encryption required, but received data does not contain appropriate metatadata.' + \\\n                            'Data was either not encrypted or metadata has been lost.'\n\n\ndef _dont_fail_on_exist(error):\n    ''' don't throw exception if the resource exists.\n    This is called by create_* APIs with fail_on_exist=False'''\n    if isinstance(error, AzureConflictHttpError):\n        return False\n    else:\n        raise error\n\n\ndef _dont_fail_not_exist(error):\n    ''' don't throw exception if the resource doesn't exist.\n    This is called by create_* APIs with fail_on_exist=False'''\n    if isinstance(error, AzureMissingResourceHttpError):\n        return False\n    else:\n        raise error\n\n\ndef _http_error_handler(http_error):\n    ''' Simple error handler for azure.'''\n    message = str(http_error)\n    error_code = None\n\n    if 'x-ms-error-code' in http_error.respheader:\n        error_code = http_error.respheader['x-ms-error-code']\n        message += ' ErrorCode: ' + error_code\n\n    if http_error.respbody is not None:\n        message += '\\n' + http_error.respbody.decode('utf-8-sig')\n\n    ex = AzureHttpError(message, http_error.status)\n    ex.error_code = error_code\n\n    raise ex\n\n\ndef _validate_type_bytes(param_name, param):\n    if not isinstance(param, bytes):\n        raise TypeError(_ERROR_VALUE_SHOULD_BE_BYTES.format(param_name))\n\n\ndef _validate_type_bytes_or_stream(param_name, param):\n    if not (isinstance(param, bytes) or hasattr(param, 'read')):\n        raise TypeError(_ERROR_VALUE_SHOULD_BE_BYTES_OR_STREAM.format(param_name))\n\n\ndef _validate_not_none(param_name, param):\n    if param is None:\n        raise ValueError(_ERROR_VALUE_NONE.format(param_name))\n\n\ndef _validate_content_match(server_md5, computed_md5):\n    if server_md5 != computed_md5:\n        raise AzureException(_ERROR_MD5_MISMATCH.format(server_md5, computed_md5))\n\n\ndef _validate_access_policies(identifiers):\n    if identifiers and len(identifiers) > 5:\n        raise AzureException(_ERROR_TOO_MANY_ACCESS_POLICIES)\n\n\ndef _validate_key_encryption_key_wrap(kek):\n    # Note that None is not callable and so will fail the second clause of each check.\n    if not hasattr(kek, 'wrap_key') or not callable(kek.wrap_key):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'wrap_key'))\n    if not hasattr(kek, 'get_kid') or not callable(kek.get_kid):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'get_kid'))\n    if not hasattr(kek, 'get_key_wrap_algorithm') or not callable(kek.get_key_wrap_algorithm):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'get_key_wrap_algorithm'))\n\n\ndef _validate_key_encryption_key_unwrap(kek):\n    if not hasattr(kek, 'get_kid') or not callable(kek.get_kid):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'get_kid'))\n    if not hasattr(kek, 'unwrap_key') or not callable(kek.unwrap_key):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'unwrap_key'))\n\n\ndef _validate_encryption_required(require_encryption, kek):\n    if require_encryption and (kek is None):\n        raise ValueError(_ERROR_ENCRYPTION_REQUIRED)\n\n\ndef _validate_decryption_required(require_encryption, kek, resolver):\n    if (require_encryption and (kek is None) and\n            (resolver is None)):\n        raise ValueError(_ERROR_DECRYPTION_REQUIRED)\n\n\ndef _validate_encryption_protocol_version(encryption_protocol):\n    if not (_ENCRYPTION_PROTOCOL_V1 == encryption_protocol):\n        raise ValueError(_ERROR_UNSUPPORTED_ENCRYPTION_VERSION)\n\n\ndef _validate_kek_id(kid, resolved_id):\n    if not (kid == resolved_id):\n        raise ValueError(_ERROR_INVALID_KID)\n\n\ndef _validate_encryption_unsupported(require_encryption, key_encryption_key):\n    if require_encryption or (key_encryption_key is not None):\n        raise ValueError(_ERROR_UNSUPPORTED_METHOD_FOR_ENCRYPTION)\n\n\ndef _validate_user_delegation_key(user_delegation_key):\n    _validate_not_none('user_delegation_key.signed_oid', user_delegation_key.signed_oid)\n    _validate_not_none('user_delegation_key.signed_tid', user_delegation_key.signed_tid)\n    _validate_not_none('user_delegation_key.signed_start', user_delegation_key.signed_start)\n    _validate_not_none('user_delegation_key.signed_expiry', user_delegation_key.signed_expiry)\n    _validate_not_none('user_delegation_key.signed_version', user_delegation_key.signed_version)\n    _validate_not_none('user_delegation_key.signed_service', user_delegation_key.signed_service)\n    _validate_not_none('user_delegation_key.value', user_delegation_key.value)\n\n\n# wraps a given exception with the desired exception type\ndef _wrap_exception(ex, desired_type):\n    msg = \"\"\n    if len(ex.args) > 0:\n        msg = ex.args[0]\n    if version_info >= (3,):\n        # Automatic chaining in Python 3 means we keep the trace\n        return desired_type(msg)\n    else:\n        # There isn't a good solution in 2 for keeping the stack trace\n        # in general, or that will not result in an error in 3\n        # However, we can keep the previous error type and message\n        # TODO: In the future we will log the trace\n        return desired_type('{}: {}'.format(ex.__class__.__name__, msg))\n\n\nclass AzureSigningError(AzureException):\n    \"\"\"\n    Represents a fatal error when attempting to sign a request.\n    In general, the cause of this exception is user error. For example, the given account key is not valid.\n    Please visit https:\/\/docs.microsoft.com\/en-us\/azure\/storage\/common\/storage-create-storage-account for more info.\n    \"\"\"\n    pass\n"}
{"instruction":"Modify this Python program to sort a given list of numbers.","input":"numbers = [2, 3, 4, 5, 1]","output":"numbers.sort()\nprint(numbers) # prints [1, 2, 3, 4, 5]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify this Python program to sort a given list of numbers.\n\n### Input:\nnumbers = [2, 3, 4, 5, 1]\n\n### Output:\nnumbers.sort()\nprint(numbers) # prints [1, 2, 3, 4, 5]"}
{"instruction":"Design an interface for a Python program that parses HTML documents.","input":"Not applicable","output":"from bs4 import BeautifulSoup\n\n\nclass HTMLParser:\n    def __init__(self, html_doc):\n        self.html_doc = html_doc\n\n    def parse(self):\n        soup = BeautifulSoup(self.html_doc, 'html.parser')\n        return soup","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an interface for a Python program that parses HTML documents.\n\n### Input:\nNot applicable\n\n### Output:\nfrom bs4 import BeautifulSoup\n\n\nclass HTMLParser:\n    def __init__(self, html_doc):\n        self.html_doc = html_doc\n\n    def parse(self):\n        soup = BeautifulSoup(self.html_doc, 'html.parser')\n        return soup"}
{"instruction":"Generate a classification model to classify spam messages using logistic regression in python.","input":"","output":"\"\"\"\nGenerate a classification model to classify spam messages using logistic regression in python\n\"\"\"\n\n# Import libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression \n\n# Read the dataset\ndataset = pd.read_csv('spam.csv')\n\n# Split the dataset into features and labels\nX = dataset.iloc[:, :-1].values \ny = dataset.iloc[:, -1].values\n\n# Split the dataset into training and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)\n\n# Create a Logistic Regression model and train it\nlog_reg = LogisticRegression() \nlog_reg.fit(X_train, y_train)\n\n# Calculate the accuracy score\naccuracy = log_reg.score(X_test, y_test)\n\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(accuracy))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a classification model to classify spam messages using logistic regression in python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nGenerate a classification model to classify spam messages using logistic regression in python\n\"\"\"\n\n# Import libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression \n\n# Read the dataset\ndataset = pd.read_csv('spam.csv')\n\n# Split the dataset into features and labels\nX = dataset.iloc[:, :-1].values \ny = dataset.iloc[:, -1].values\n\n# Split the dataset into training and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)\n\n# Create a Logistic Regression model and train it\nlog_reg = LogisticRegression() \nlog_reg.fit(X_train, y_train)\n\n# Calculate the accuracy score\naccuracy = log_reg.score(X_test, y_test)\n\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(accuracy))"}
{"instruction":"Write a Python program to generate a HTML table with 3 columns and 5 rows, filled with random numbers.","input":"","output":"import random\n\ndef generate_html_table():\n    html_table = \"<table>\\n\"\n    for i in range(5):\n        html_table += \"  <tr>\\n\"\n        for j in range(3):\n            html_table += \"    <td>{}<\/td>\\n\".format(random.randint(1, 100))\n        html_table += \"  <\/tr>\\n\"\n    html_table += \"<\/table>\"\n    return html_table\n\nprint(generate_html_table())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a HTML table with 3 columns and 5 rows, filled with random numbers.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_html_table():\n    html_table = \"<table>\\n\"\n    for i in range(5):\n        html_table += \"  <tr>\\n\"\n        for j in range(3):\n            html_table += \"    <td>{}<\/td>\\n\".format(random.randint(1, 100))\n        html_table += \"  <\/tr>\\n\"\n    html_table += \"<\/table>\"\n    return html_table\n\nprint(generate_html_table())"}
{"instruction":"Write a python function to calculate an exponential series","input":"","output":"def exponential_series(x,n):\n    sum = 0\n    for i in range(n+1):\n        sum += x ** i\n    return sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python function to calculate an exponential series\n\n### Input:\n\n\n### Output:\ndef exponential_series(x,n):\n    sum = 0\n    for i in range(n+1):\n        sum += x ** i\n    return sum"}
{"instruction":"Write a Python script to reduce an array of integers by their GCD.","input":"[30, 20, 45]","output":"def gcd(a, b):\n   while a != 0:\n       a, b = b % a, a\n   return b\n\ndef reduce_by_gcd(arr):\n    gcd_val = arr[0]\n    for i in range(len(arr)):\n        gcd_val = gcd(gcd_val, arr[i])\n    return [a \/\/ gcd_val for a in arr]\n\nreduced_arr = reduce_by_gcd([30, 20, 45])\nprint(reduced_arr) # [2, 3, 5]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to reduce an array of integers by their GCD.\n\n### Input:\n[30, 20, 45]\n\n### Output:\ndef gcd(a, b):\n   while a != 0:\n       a, b = b % a, a\n   return b\n\ndef reduce_by_gcd(arr):\n    gcd_val = arr[0]\n    for i in range(len(arr)):\n        gcd_val = gcd(gcd_val, arr[i])\n    return [a \/\/ gcd_val for a in arr]\n\nreduced_arr = reduce_by_gcd([30, 20, 45])\nprint(reduced_arr) # [2, 3, 5]"}
{"instruction":"Develop a python program to quantify the number of appearances of each character in a given string.","input":"","output":"def char_count(str1):\n    dict = {} \n    for n in str1: \n        keys = dict.keys() \n        if n in keys: \n            dict[n] += 1\n        else: \n            dict[n] = 1 \n    return dict","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python program to quantify the number of appearances of each character in a given string.\n\n### Input:\n\n\n### Output:\ndef char_count(str1):\n    dict = {} \n    for n in str1: \n        keys = dict.keys() \n        if n in keys: \n            dict[n] += 1\n        else: \n            dict[n] = 1 \n    return dict"}
{"instruction":"Implement an algorithm to find the minimum number of coins required to sum up to a given amount in Python.","input":"amount = 9","output":"def findMinCoins(coins, amount):\n    dp = [0] * (amount + 1)\n    dp[0] = 0\n  \n    for i in range(1, amount + 1):\n        dp[i] = float('inf') \n        for j in range(len(coins)):\n            if (coins[j] <= i):\n                res = dp[i - coins[j]]\n                if (res != float('inf') and res + 1 < dp[i]):\n                    dp[i] = res + 1\n    return dp[amount]\n\nprint(findMinCoins([1, 4, 6], 9))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm to find the minimum number of coins required to sum up to a given amount in Python.\n\n### Input:\namount = 9\n\n### Output:\ndef findMinCoins(coins, amount):\n    dp = [0] * (amount + 1)\n    dp[0] = 0\n  \n    for i in range(1, amount + 1):\n        dp[i] = float('inf') \n        for j in range(len(coins)):\n            if (coins[j] <= i):\n                res = dp[i - coins[j]]\n                if (res != float('inf') and res + 1 < dp[i]):\n                    dp[i] = res + 1\n    return dp[amount]\n\nprint(findMinCoins([1, 4, 6], 9))"}
{"instruction":"Build a class in Python that creates a Point in a two dimensional space.","input":"","output":"class Point:\n def __init__(self, x, y):\n     self.x = x\n     self.y = y\n\n# create a Point object\np = Point(2, 4)\n\nprint(p.x)\nprint(p.y)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a class in Python that creates a Point in a two dimensional space.\n\n### Input:\n\n\n### Output:\nclass Point:\n def __init__(self, x, y):\n     self.x = x\n     self.y = y\n\n# create a Point object\np = Point(2, 4)\n\nprint(p.x)\nprint(p.y)"}
{"instruction":"Build a machine learning model in Python to predict whether a customer should be contacted or not.","input":"The data given consists of the columns; age, salary, bank balance, purchased product and response.","output":"import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Read the dataset\ndata = pd.read_csv('data.csv')\n\n# Separate the features and targets\nX = data.iloc[:, 0:4] # independent variables\ny = data.iloc[:, 4] # target variable\n\n# Create an instance of a linear regression model\nmodel = LinearRegression()\n\n# Fit model to training data\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)\n\n# Determine whether a customer should be contacted or not\ncontacted = np.where(predictions > 0.5, \"Yes\", \"No\")\n\nprint(contacted)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a machine learning model in Python to predict whether a customer should be contacted or not.\n\n### Input:\nThe data given consists of the columns; age, salary, bank balance, purchased product and response.\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Read the dataset\ndata = pd.read_csv('data.csv')\n\n# Separate the features and targets\nX = data.iloc[:, 0:4] # independent variables\ny = data.iloc[:, 4] # target variable\n\n# Create an instance of a linear regression model\nmodel = LinearRegression()\n\n# Fit model to training data\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)\n\n# Determine whether a customer should be contacted or not\ncontacted = np.where(predictions > 0.5, \"Yes\", \"No\")\n\nprint(contacted)"}
{"instruction":"Generate a Python class with the following variables.","input":"name, job, age","output":"class Person:\n  def __init__(self, name, job, age):\n    self.name = name\n    self.job = job\n    self.age = age","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class with the following variables.\n\n### Input:\nname, job, age\n\n### Output:\nclass Person:\n  def __init__(self, name, job, age):\n    self.name = name\n    self.job = job\n    self.age = age"}
{"instruction":"Write a Python program to measure the similarity between two strings using Jaccard index.","input":"String1: Apple\nString2: Orange","output":"def jaccard_index(str1, str2):\n    set1 = set(str1.split())\n    set2 = set(str2.split())\n\n    return float(len(set1 & set2)) \/ len(set1 | set2)\n\nstr1 = input(\"String1: \")\nstr2 = input(\"String2: \")\nprint(\"Jaccard Index: \", jaccard_index(str1, str2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to measure the similarity between two strings using Jaccard index.\n\n### Input:\nString1: Apple\nString2: Orange\n\n### Output:\ndef jaccard_index(str1, str2):\n    set1 = set(str1.split())\n    set2 = set(str2.split())\n\n    return float(len(set1 & set2)) \/ len(set1 | set2)\n\nstr1 = input(\"String1: \")\nstr2 = input(\"String2: \")\nprint(\"Jaccard Index: \", jaccard_index(str1, str2))"}
{"instruction":"Convert this SQL query to Python.","input":"SELECT *\nFROM customers\nWHERE customer_name LIKE '%John%'","output":"import pydb\n\ndef query_customer_name(name):\n    query = \"\"\"\n    SELECT *\n    FROM customers\n    WHERE customer_name LIKE %s\"\"\"\n    name_wildcard = '%' + name + '%'\n    query_result = pydb.query(query, name_wildcard)\n    return query_result\n    \nif __name__ == '__main__':\n    query_customer_name('John')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert this SQL query to Python.\n\n### Input:\nSELECT *\nFROM customers\nWHERE customer_name LIKE '%John%'\n\n### Output:\nimport pydb\n\ndef query_customer_name(name):\n    query = \"\"\"\n    SELECT *\n    FROM customers\n    WHERE customer_name LIKE %s\"\"\"\n    name_wildcard = '%' + name + '%'\n    query_result = pydb.query(query, name_wildcard)\n    return query_result\n    \nif __name__ == '__main__':\n    query_customer_name('John')"}
{"instruction":"Compress a given folder using GZip in Python.","input":"folder \/files","output":"import gzip \nimport shutil \n\n# Source files to compress \nsource = '\/files'\n  \n# Destination to store compressed files \ndestination = '\/files\/compressed'\n  \n# set the compression level \ncompression_level = 3\n\nshutil.make_archive(destination, 'gz', source, compression_level)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompress a given folder using GZip in Python.\n\n### Input:\nfolder \/files\n\n### Output:\nimport gzip \nimport shutil \n\n# Source files to compress \nsource = '\/files'\n  \n# Destination to store compressed files \ndestination = '\/files\/compressed'\n  \n# set the compression level \ncompression_level = 3\n\nshutil.make_archive(destination, 'gz', source, compression_level)"}
{"instruction":"Create a Python program that uses the Coinmarketcap API to track the prices of top 10 cryptocurrencies over a period of time.","input":"Not applicable","output":"import requests\nimport pandas as pd\n\nurl = 'https:\/\/api.coinmarketcap.com\/v1\/ticker\/?limit=10'\ndata = requests.get(url).json()\n\ndf = pd.DataFrame(data)\n# select required column\ndf = df[['name', 'price_usd']]\n\n# print the dataframe\nprint(df)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses the Coinmarketcap API to track the prices of top 10 cryptocurrencies over a period of time.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nimport pandas as pd\n\nurl = 'https:\/\/api.coinmarketcap.com\/v1\/ticker\/?limit=10'\ndata = requests.get(url).json()\n\ndf = pd.DataFrame(data)\n# select required column\ndf = df[['name', 'price_usd']]\n\n# print the dataframe\nprint(df)"}
{"instruction":"Write a Python script to train a sentiment classifier on a given dataset.","input":"Dataset containing sentences and labels, where each label represents the sentiment of the associated sentence.","output":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\ndf = pd.read_csv('dataset.csv')\n\nX_train, X_test, y_train, y_test = train_test_split(df['text'], df['label'], random_state=0)\n\nvectorizer = TfidfVectorizer().fit(X_train)\nX_train_vectorized = vectorizer.transform(X_train)\n\nmodel = LogisticRegression(max_iter=1000).fit(X_train_vectorized, y_train)\n\ny_pred = model.predict(vectorizer.transform(X_test))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to train a sentiment classifier on a given dataset.\n\n### Input:\nDataset containing sentences and labels, where each label represents the sentiment of the associated sentence.\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\ndf = pd.read_csv('dataset.csv')\n\nX_train, X_test, y_train, y_test = train_test_split(df['text'], df['label'], random_state=0)\n\nvectorizer = TfidfVectorizer().fit(X_train)\nX_train_vectorized = vectorizer.transform(X_train)\n\nmodel = LogisticRegression(max_iter=1000).fit(X_train_vectorized, y_train)\n\ny_pred = model.predict(vectorizer.transform(X_test))"}
{"instruction":"Generate an algorithm in Python that reverses the order of elements in an array.","input":"","output":"def reverseArray(arr): \n    start = 0\n    end = len(arr) - 1\n    while start < end: \n        arr[start], arr[end] = arr[end], arr[start] \n        start += 1\n        end -= 1\n    return arr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an algorithm in Python that reverses the order of elements in an array.\n\n### Input:\n\n\n### Output:\ndef reverseArray(arr): \n    start = 0\n    end = len(arr) - 1\n    while start < end: \n        arr[start], arr[end] = arr[end], arr[start] \n        start += 1\n        end -= 1\n    return arr"}
{"instruction":"Design a loop in Python to iterate over the elements of a list and print the elements in reverse order.","input":"[10, 15, 20]","output":"my_list = [10, 15, 20]\nfor i in my_list[::-1]:\n    print(i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a loop in Python to iterate over the elements of a list and print the elements in reverse order.\n\n### Input:\n[10, 15, 20]\n\n### Output:\nmy_list = [10, 15, 20]\nfor i in my_list[::-1]:\n    print(i)"}
{"instruction":"Given a list of words, write a Python program to check whether two words are anagrams of each other.","input":"words = [\"silent\", \"listen\"]","output":"def is_anagram(s1, s2):\n    # remove all whitespaces and make it lower case\n    s1 = ''.join(s1.split()).lower()\n    s2 = ''.join(s2.split()).lower()\n\n    # edge case check\n    if len(s1) != len(s2):\n        return False\n\n    # count occurrences of each character\n    count = {}\n    for char in s1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n            \n    for char in s2:\n        if char in count:\n            count[char] -= 1\n        else:\n            return False\n    \n    # check that count of each character is zero\n    for k in count:\n        if count[k] != 0:\n            return False\n\n    return True\n\n# sample call to function\nwords = [\"silent\", \"listen\"]\nprint(is_anagram(words[0], words[1]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of words, write a Python program to check whether two words are anagrams of each other.\n\n### Input:\nwords = [\"silent\", \"listen\"]\n\n### Output:\ndef is_anagram(s1, s2):\n    # remove all whitespaces and make it lower case\n    s1 = ''.join(s1.split()).lower()\n    s2 = ''.join(s2.split()).lower()\n\n    # edge case check\n    if len(s1) != len(s2):\n        return False\n\n    # count occurrences of each character\n    count = {}\n    for char in s1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n            \n    for char in s2:\n        if char in count:\n            count[char] -= 1\n        else:\n            return False\n    \n    # check that count of each character is zero\n    for k in count:\n        if count[k] != 0:\n            return False\n\n    return True\n\n# sample call to function\nwords = [\"silent\", \"listen\"]\nprint(is_anagram(words[0], words[1]))"}
{"instruction":"Create a function in python to calculate the square root","input":"","output":"def sqrt(x): \n    if x == 0 or x == 1: \n        return x \n      \n    i = 1 \n    res = 1 \n    while res <= x: \n        i += 1 \n        res = i * i \n      \n    return i-1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in python to calculate the square root\n\n### Input:\n\n\n### Output:\ndef sqrt(x): \n    if x == 0 or x == 1: \n        return x \n      \n    i = 1 \n    res = 1 \n    while res <= x: \n        i += 1 \n        res = i * i \n      \n    return i-1"}
{"instruction":"Write a python code to","input":"Extract the mean from a list of numbers.","output":"def mean(lst):\n    total = 0\n    for x in lst:\n        total += x\n    return total \/ len(lst)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to\n\n### Input:\nExtract the mean from a list of numbers.\n\n### Output:\ndef mean(lst):\n    total = 0\n    for x in lst:\n        total += x\n    return total \/ len(lst)"}
{"instruction":"Create a Python script that takes a list of numbers as input and prints out the mean and the standard deviation of the list.","input":"[5, 7, 10, 8, 6]","output":"def mean(lst):\n    return sum(lst) \/ len(lst)\n\ndef std_dev(lst):\n    avg = mean(lst)\n    variance = 0\n    for num in lst:\n        variance += (num - avg)**2\n    variance \/= len(lst)\n    return variance**0.5\n\n# Driver Code\nlst = [5, 7, 10, 8, 6]\n\nprint(\"Mean: \", mean(lst))\nprint(\"Standard Deviation: \", std_dev(lst))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes a list of numbers as input and prints out the mean and the standard deviation of the list.\n\n### Input:\n[5, 7, 10, 8, 6]\n\n### Output:\ndef mean(lst):\n    return sum(lst) \/ len(lst)\n\ndef std_dev(lst):\n    avg = mean(lst)\n    variance = 0\n    for num in lst:\n        variance += (num - avg)**2\n    variance \/= len(lst)\n    return variance**0.5\n\n# Driver Code\nlst = [5, 7, 10, 8, 6]\n\nprint(\"Mean: \", mean(lst))\nprint(\"Standard Deviation: \", std_dev(lst))"}
{"instruction":"Optimize the following Python code by replacing the for-loop with a list comprehension","input":"def hipsterify(sentence):\n  hipster_sentence = []\n\n  for i in range(len(sentence)):\n    hipster_sentence.append(\"hipster \" + sentence[i])\n\n  return ' '.join(hipster_sentence)","output":"def hipsterify(sentence):\n  return ' '.join([\"hipster \" + word for word in sentence])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python code by replacing the for-loop with a list comprehension\n\n### Input:\ndef hipsterify(sentence):\n  hipster_sentence = []\n\n  for i in range(len(sentence)):\n    hipster_sentence.append(\"hipster \" + sentence[i])\n\n  return ' '.join(hipster_sentence)\n\n### Output:\ndef hipsterify(sentence):\n  return ' '.join([\"hipster \" + word for word in sentence])"}
{"instruction":"Write a Python program to generate customer profiles from a large data set.","input":"The dataset contains 1000 customer records with fields such as age, gender, location, product purchase, etc.","output":"import numpy as np\nimport pandas as pd\n\n# Read the data set\ndataset = pd.read_csv('customer-data.csv') \n\n# Determine the unique features in the data\nfeatures = np.unique(np.concatenate([dataset[column].value_counts().keys() for column in dataset.columns]))\n\n# Create the customer profile from the data\ncustomer_profile = dict()\n\nfor f in features:\n # Find the frequency of feature across the dataset\n freq = np.sum(dataset == f)\n # Calculate the probability of the feature\n prob = freq \/ dataset.shape[0]\n # Store the results in customer_profile\n if prob >= 0.5:\n  customer_profile[f] = 'High'\n elif prob < 0.5 and prob > 0.2:\n  customer_profile[f] = 'Medium'\n else:\n  customer_profile[f] = 'Low'\n  \nprint(customer_profile)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate customer profiles from a large data set.\n\n### Input:\nThe dataset contains 1000 customer records with fields such as age, gender, location, product purchase, etc.\n\n### Output:\nimport numpy as np\nimport pandas as pd\n\n# Read the data set\ndataset = pd.read_csv('customer-data.csv') \n\n# Determine the unique features in the data\nfeatures = np.unique(np.concatenate([dataset[column].value_counts().keys() for column in dataset.columns]))\n\n# Create the customer profile from the data\ncustomer_profile = dict()\n\nfor f in features:\n # Find the frequency of feature across the dataset\n freq = np.sum(dataset == f)\n # Calculate the probability of the feature\n prob = freq \/ dataset.shape[0]\n # Store the results in customer_profile\n if prob >= 0.5:\n  customer_profile[f] = 'High'\n elif prob < 0.5 and prob > 0.2:\n  customer_profile[f] = 'Medium'\n else:\n  customer_profile[f] = 'Low'\n  \nprint(customer_profile)"}
{"instruction":"Write a python program to calculate the average of a list of numbers.","input":"[1, 2, 3, 4, 5]","output":"def calculate_average(numbers):\n    total = sum(numbers)\n    length = len(numbers)\n    return total \/ length\n\nnumbers = [1, 2, 3, 4, 5]\naverage = calculate_average(numbers)\nprint(average)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to calculate the average of a list of numbers.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef calculate_average(numbers):\n    total = sum(numbers)\n    length = len(numbers)\n    return total \/ length\n\nnumbers = [1, 2, 3, 4, 5]\naverage = calculate_average(numbers)\nprint(average)"}
{"instruction":"Create a Python script to connect to a database and fetch the details of a particular table.","input":"","output":"import mysql.connector\n\n# establish a database connection\nmydb = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"user\",\n    password=\"password\",\n    database=\"database\"\n)\n\n# create a cursor object\ncursor = mydb.cursor()\n\n# execute the SQL query\ncursor.execute(\"SELECT * FROM table\")\n\n# fetch the rows from the cursor object\nrows = cursor.fetchall()\n\n# print all the details\nfor row in rows:\n    print(row)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to connect to a database and fetch the details of a particular table.\n\n### Input:\n\n\n### Output:\nimport mysql.connector\n\n# establish a database connection\nmydb = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"user\",\n    password=\"password\",\n    database=\"database\"\n)\n\n# create a cursor object\ncursor = mydb.cursor()\n\n# execute the SQL query\ncursor.execute(\"SELECT * FROM table\")\n\n# fetch the rows from the cursor object\nrows = cursor.fetchall()\n\n# print all the details\nfor row in rows:\n    print(row)"}
{"instruction":"Create a Python program that combines two lists and returns a single list that contains a combination of elements from both.","input":"list1 = [1, 2, 3]\nlist2 = [4, 5, 6]","output":"def combine_lists(list1, list2):\n return list1 + list2\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nprint(combine_lists(list1, list2)) # [1, 2, 3, 4, 5, 6]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that combines two lists and returns a single list that contains a combination of elements from both.\n\n### Input:\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n### Output:\ndef combine_lists(list1, list2):\n return list1 + list2\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nprint(combine_lists(list1, list2)) # [1, 2, 3, 4, 5, 6]"}
{"instruction":"Write a Python function to count the number of substrings of a given string that contains exactly K distinct characters.","input":"\"abcabcabcabc\", K = 2","output":"def count_substrings_with_k_distinct_characters(in_str, k):\n    count = 0\n    for i in range(len(in_str)-k+1):\n        sub_str = in_str[i:i+k]\n        if len(set(sub_str)) == k:\n            count +=1 \n    return count\n\ncount = count_substrings_with_k_distinct_characters(\"abcabcabcabc\", 2)\nprint(count)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to count the number of substrings of a given string that contains exactly K distinct characters.\n\n### Input:\n\"abcabcabcabc\", K = 2\n\n### Output:\ndef count_substrings_with_k_distinct_characters(in_str, k):\n    count = 0\n    for i in range(len(in_str)-k+1):\n        sub_str = in_str[i:i+k]\n        if len(set(sub_str)) == k:\n            count +=1 \n    return count\n\ncount = count_substrings_with_k_distinct_characters(\"abcabcabcabc\", 2)\nprint(count)"}
{"instruction":"This code sets up a web application using the Bottle framework to implement a number entry and query system. It uses SQLite for database management and includes functionality for internationalization. To use the application, run the Python script and navigate to the appropriate URLs in a web browser.","input":"","output":"# coding: utf-8\n\nimport sqlite3\nimport os\nimport time\n\nimport bottle\nfrom bottle import default_app, route, view\nfrom bottle import request\nfrom bottle_utils.i18n import I18NPlugin\n#from bottle_utils.i18n import lazy_gettext as _\n\n#todo: refactor so that there is no error in Py3 local deployment and testing\nimport input_number as ip\nfrom dbhelper import initialize_database\nimport hashlib\n\nMOD_PATH = os.path.dirname(os.path.abspath(__file__))\nDB_PATH = os.path.abspath(os.path.join(MOD_PATH, '..', '..', \"lagesonr.db\"))\n\nif not os.path.exists(DB_PATH):\n    initialize_database(DB_PATH)\n\nlagesonrdb = sqlite3.connect(DB_PATH)\n\n#todo: populate list dynamically based on available\/selected translations\nLANGS = [\n    ('de_DE', 'Deutsch'),\n    ('en_US', 'English'),\n]\n# ('ar_AR', 'Arab'),\nDEFAULT_LOCALE = 'en_US'\n\n@route('\/')\n@view('start_page')\ndef index():\n    \"\"\"1.Seite: Helfer steht am LaGeSo und gibt Nummern ein [_____] \"\"\"\n    return {'entered': []}\n\n@route('\/', method='POST')\n@view('start_page')\ndef do_enter():\n    numbers = request.forms.get('numbers')\n    timestamp = time.asctime()\n    numbers = [num.strip() for num in numbers.split('\\n')]\n    result_num = []\n\n    #todo: refactor fingerprint in extra function for better testing\n    usr_agent = str(request.environ.get('HTTP_USER_AGENT'))\n    usr_lang = str(request.environ.get('HTTP_ACCEPT_LANGUAGE'))\n    usr_ip = str(request.remote_addr)\n\n    usr_fingerprint = usr_agent + usr_lang + usr_ip\n    usr_hash = hashlib.md5(usr_fingerprint.encode(\"utf-8\")).hexdigest()\n\n    with lagesonrdb as con:\n        cur = con.cursor()\n        for num in set(numbers):\n            if ip.is_valid_number(num) and ip.is_ok_with_db(\n                    num) and ip.is_valid_user():\n\n                num = str(num).capitalize()\n                query = 'SELECT NUMBER FROM NUMBERS WHERE NUMBER=\"%s\" AND FINGERPRINT=\"%s\"' % (num, usr_hash)\n                if len(list(cur.execute(query))) == 0:\n\n                    insert = 'INSERT INTO NUMBERS(NUMBER, TIME, PLACE, USER, FINGERPRINT) VALUES (\"%s\", \"%s\", \"-\", ' \\\n                             '\"-\", \"%s\")' % (num, timestamp, usr_hash)\n                    cur.execute(insert)\n                    result_num.append(num)\n                else:\n                    result_num.append(\"ALREADY ENTERED BY - %s - %s - %s: %s\" % (usr_ip, usr_agent, usr_lang, num))\n                    #return {'entered': [\"already before - by you!\"], 'timestamp': timestamp}\n            else:\n                result_num.append(\"INVALID INPUT: %s\" % num)\n\n    return {'entered': result_num, 'timestamp': timestamp}\n\n\n@route('\/query')\n@view('query_page')\ndef query():\n    return {'result': '-', 'timestamp_first': '-','timestamp_last': '-', 'n': '-'}\n\n\n@route('\/query', method='POST')\n@view('query_page')\ndef do_query():\n    number = request.forms.get('number')\n    timestamp_first = '-'\n    timestamp_last = '-'\n    n = '0'\n\n    if ip.is_valid_number(number) and ip.is_ok_with_db(\n            number) and ip.is_valid_user():\n\n        with lagesonrdb as con:\n            cur = con.cursor()\n\n            number = str(number).capitalize()\n            query = 'SELECT TIME FROM NUMBERS WHERE NUMBER=\"%s\" ORDER BY TIME' % number\n            result = list(cur.execute(query))\n            n = len(result)\n            if n > 0:\n                timestamp_first, timestamp_last = result[0][0], result[-1][0]\n            else:\n                timestamp_first = 'NOT FOUND'\n    else:\n        timestamp_first = 'INVALID INPUT'\n\n    return {'result': number, 'timestamp_first': timestamp_first,\n                'timestamp_last': timestamp_last, 'n': n}\n\n\n@route('\/about')\n@view('about')\ndef about():\n    pass\n\n@route('\/impressum')\n@view('impressum')\ndef impressum():\n    pass\n\n# findet templates im gleichen Verzeichnis\nbottle.TEMPLATE_PATH.append(MOD_PATH)\napp = default_app()\napplication = I18NPlugin(app, langs=LANGS, default_locale=DEFAULT_LOCALE,\n                         domain='messages',\n                         locale_dir=os.path.join(MOD_PATH, 'locales'))\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code sets up a web application using the Bottle framework to implement a number entry and query system. It uses SQLite for database management and includes functionality for internationalization. To use the application, run the Python script and navigate to the appropriate URLs in a web browser.\n\n### Input:\n\n\n### Output:\n# coding: utf-8\n\nimport sqlite3\nimport os\nimport time\n\nimport bottle\nfrom bottle import default_app, route, view\nfrom bottle import request\nfrom bottle_utils.i18n import I18NPlugin\n#from bottle_utils.i18n import lazy_gettext as _\n\n#todo: refactor so that there is no error in Py3 local deployment and testing\nimport input_number as ip\nfrom dbhelper import initialize_database\nimport hashlib\n\nMOD_PATH = os.path.dirname(os.path.abspath(__file__))\nDB_PATH = os.path.abspath(os.path.join(MOD_PATH, '..', '..', \"lagesonr.db\"))\n\nif not os.path.exists(DB_PATH):\n    initialize_database(DB_PATH)\n\nlagesonrdb = sqlite3.connect(DB_PATH)\n\n#todo: populate list dynamically based on available\/selected translations\nLANGS = [\n    ('de_DE', 'Deutsch'),\n    ('en_US', 'English'),\n]\n# ('ar_AR', 'Arab'),\nDEFAULT_LOCALE = 'en_US'\n\n@route('\/')\n@view('start_page')\ndef index():\n    \"\"\"1.Seite: Helfer steht am LaGeSo und gibt Nummern ein [_____] \"\"\"\n    return {'entered': []}\n\n@route('\/', method='POST')\n@view('start_page')\ndef do_enter():\n    numbers = request.forms.get('numbers')\n    timestamp = time.asctime()\n    numbers = [num.strip() for num in numbers.split('\\n')]\n    result_num = []\n\n    #todo: refactor fingerprint in extra function for better testing\n    usr_agent = str(request.environ.get('HTTP_USER_AGENT'))\n    usr_lang = str(request.environ.get('HTTP_ACCEPT_LANGUAGE'))\n    usr_ip = str(request.remote_addr)\n\n    usr_fingerprint = usr_agent + usr_lang + usr_ip\n    usr_hash = hashlib.md5(usr_fingerprint.encode(\"utf-8\")).hexdigest()\n\n    with lagesonrdb as con:\n        cur = con.cursor()\n        for num in set(numbers):\n            if ip.is_valid_number(num) and ip.is_ok_with_db(\n                    num) and ip.is_valid_user():\n\n                num = str(num).capitalize()\n                query = 'SELECT NUMBER FROM NUMBERS WHERE NUMBER=\"%s\" AND FINGERPRINT=\"%s\"' % (num, usr_hash)\n                if len(list(cur.execute(query))) == 0:\n\n                    insert = 'INSERT INTO NUMBERS(NUMBER, TIME, PLACE, USER, FINGERPRINT) VALUES (\"%s\", \"%s\", \"-\", ' \\\n                             '\"-\", \"%s\")' % (num, timestamp, usr_hash)\n                    cur.execute(insert)\n                    result_num.append(num)\n                else:\n                    result_num.append(\"ALREADY ENTERED BY - %s - %s - %s: %s\" % (usr_ip, usr_agent, usr_lang, num))\n                    #return {'entered': [\"already before - by you!\"], 'timestamp': timestamp}\n            else:\n                result_num.append(\"INVALID INPUT: %s\" % num)\n\n    return {'entered': result_num, 'timestamp': timestamp}\n\n\n@route('\/query')\n@view('query_page')\ndef query():\n    return {'result': '-', 'timestamp_first': '-','timestamp_last': '-', 'n': '-'}\n\n\n@route('\/query', method='POST')\n@view('query_page')\ndef do_query():\n    number = request.forms.get('number')\n    timestamp_first = '-'\n    timestamp_last = '-'\n    n = '0'\n\n    if ip.is_valid_number(number) and ip.is_ok_with_db(\n            number) and ip.is_valid_user():\n\n        with lagesonrdb as con:\n            cur = con.cursor()\n\n            number = str(number).capitalize()\n            query = 'SELECT TIME FROM NUMBERS WHERE NUMBER=\"%s\" ORDER BY TIME' % number\n            result = list(cur.execute(query))\n            n = len(result)\n            if n > 0:\n                timestamp_first, timestamp_last = result[0][0], result[-1][0]\n            else:\n                timestamp_first = 'NOT FOUND'\n    else:\n        timestamp_first = 'INVALID INPUT'\n\n    return {'result': number, 'timestamp_first': timestamp_first,\n                'timestamp_last': timestamp_last, 'n': n}\n\n\n@route('\/about')\n@view('about')\ndef about():\n    pass\n\n@route('\/impressum')\n@view('impressum')\ndef impressum():\n    pass\n\n# findet templates im gleichen Verzeichnis\nbottle.TEMPLATE_PATH.append(MOD_PATH)\napp = default_app()\napplication = I18NPlugin(app, langs=LANGS, default_locale=DEFAULT_LOCALE,\n                         domain='messages',\n                         locale_dir=os.path.join(MOD_PATH, 'locales'))\n"}
{"instruction":"Create a web crawler in Python to find a specific keyword on webpages.","input":"keyword = \"python\"","output":"import urllib.request\nfrom bs4 import BeautifulSoup\n\n# target url\nurl = 'https:\/\/www.example.com\/'\n\n# create request and obtain html\npage = urllib.request.urlopen(url)\nhtml_doc = page.read()\n\nsoup = BeautifulSoup(html_doc, 'html.parser')\nkeywords = soup.find_all(string = lambda text: keyword in text)\n\n# print all sites containing the given keyword\nfor keyword in keywords:\n print(keyword)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web crawler in Python to find a specific keyword on webpages.\n\n### Input:\nkeyword = \"python\"\n\n### Output:\nimport urllib.request\nfrom bs4 import BeautifulSoup\n\n# target url\nurl = 'https:\/\/www.example.com\/'\n\n# create request and obtain html\npage = urllib.request.urlopen(url)\nhtml_doc = page.read()\n\nsoup = BeautifulSoup(html_doc, 'html.parser')\nkeywords = soup.find_all(string = lambda text: keyword in text)\n\n# print all sites containing the given keyword\nfor keyword in keywords:\n print(keyword)"}
{"instruction":"Suggest a line of code to parse a JSON string.","input":"","output":"pythonObject = json.loads(jsonString)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a line of code to parse a JSON string.\n\n### Input:\n\n\n### Output:\npythonObject = json.loads(jsonString)"}
{"instruction":"Examine a given Python program and modify it to only print out characters which are palindromes.","input":"my_string = \"I like mangoes\"","output":"my_string = \"I like mangoes\"\n\nfor char in my_string:\n\tif char == char[::-1]:\n\t\tprint(char)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExamine a given Python program and modify it to only print out characters which are palindromes.\n\n### Input:\nmy_string = \"I like mangoes\"\n\n### Output:\nmy_string = \"I like mangoes\"\n\nfor char in my_string:\n\tif char == char[::-1]:\n\t\tprint(char)"}
{"instruction":"Create a Python dictionary where the keys are student IDs and the values are the corresponding student names.","input":"id_lst = [123, 456, 789]\nname_lst = [\"John\", \"Emma\", \"David\"]","output":"def create_dict(id_lst, name_lst): \n    dic = {}\n    \n    for i in range(len(id_lst)): \n        dic[id_lst[i]] = name_lst[i]\n    \n    return dic\n\nresult = create_dict(id_lst, name_lst) \nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python dictionary where the keys are student IDs and the values are the corresponding student names.\n\n### Input:\nid_lst = [123, 456, 789]\nname_lst = [\"John\", \"Emma\", \"David\"]\n\n### Output:\ndef create_dict(id_lst, name_lst): \n    dic = {}\n    \n    for i in range(len(id_lst)): \n        dic[id_lst[i]] = name_lst[i]\n    \n    return dic\n\nresult = create_dict(id_lst, name_lst) \nprint(result)"}
{"instruction":"Build a list comprehension in Python to print numbers divisible by 3 and not divisible by 7 in the range of 30 to 50","input":"Range: 30 to 50","output":"divisible_by_3_or_7 = [n for n in range(30,51) if n % 3 == 0 and n % 7 != 0]\nprint(divisible_by_3_or_7) # output: [30, 33, 36, 39, 42, 45, 48]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a list comprehension in Python to print numbers divisible by 3 and not divisible by 7 in the range of 30 to 50\n\n### Input:\nRange: 30 to 50\n\n### Output:\ndivisible_by_3_or_7 = [n for n in range(30,51) if n % 3 == 0 and n % 7 != 0]\nprint(divisible_by_3_or_7) # output: [30, 33, 36, 39, 42, 45, 48]"}
{"instruction":"Edit this Python program to print a concatenated string of two given strings with a space between them?","input":"\"Hello\" and \"World\"","output":"string1 = \"Hello\"\nstring2 = \"World\"\n\n# Concatenate two strings\nconcatenated_string = string1 + \" \" + string2 \n\n# Print the result\nprint(concatenated_string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit this Python program to print a concatenated string of two given strings with a space between them?\n\n### Input:\n\"Hello\" and \"World\"\n\n### Output:\nstring1 = \"Hello\"\nstring2 = \"World\"\n\n# Concatenate two strings\nconcatenated_string = string1 + \" \" + string2 \n\n# Print the result\nprint(concatenated_string)"}
{"instruction":"Given a 2D array of integers, write a Python code snippet to rotate the array by 90 degrees.","input":"arr = [[0, 1, 2], \n       [3, 4, 5],\n       [6, 7, 8]]","output":"def rotate90(arr):\n    N = len(arr[0])\n    rotate_matrix = [[0 for x in range(N)] for y in range(N)]\n\n    for x in range(N):\n        for y in range(N):\n            rotate_matrix[y][N-1-x] = arr[x][y]\n    return rotate_matrix","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a 2D array of integers, write a Python code snippet to rotate the array by 90 degrees.\n\n### Input:\narr = [[0, 1, 2], \n       [3, 4, 5],\n       [6, 7, 8]]\n\n### Output:\ndef rotate90(arr):\n    N = len(arr[0])\n    rotate_matrix = [[0 for x in range(N)] for y in range(N)]\n\n    for x in range(N):\n        for y in range(N):\n            rotate_matrix[y][N-1-x] = arr[x][y]\n    return rotate_matrix"}
{"instruction":"Design a program in Python to change the background color of a web page.","input":"color = '#FF0000'","output":"from selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\n\ndriver = webdriver.Chrome()\ndriver.get(\"http:\/\/example.com\")\nhtml = driver.find_element_by_tag_name('html')\nhtml.send_keys(Keys.CONTROL + Keys.SHIFT + Keys.BACKSPACE)\ndriver.execute_script(\"document.body.style.backgroundColor='\" + color + \"'\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to change the background color of a web page.\n\n### Input:\ncolor = '#FF0000'\n\n### Output:\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\n\ndriver = webdriver.Chrome()\ndriver.get(\"http:\/\/example.com\")\nhtml = driver.find_element_by_tag_name('html')\nhtml.send_keys(Keys.CONTROL + Keys.SHIFT + Keys.BACKSPACE)\ndriver.execute_script(\"document.body.style.backgroundColor='\" + color + \"'\")"}
{"instruction":"Create a data structure in Python that stores customer name, address, and phone number.","input":"","output":"customer_data = {\n    'Name': 'John Smith',\n    'Address': '123 Main Street, Anytown, CA 12345',\n    'Phone': '555-555-5555'\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a data structure in Python that stores customer name, address, and phone number.\n\n### Input:\n\n\n### Output:\ncustomer_data = {\n    'Name': 'John Smith',\n    'Address': '123 Main Street, Anytown, CA 12345',\n    'Phone': '555-555-5555'\n}"}
{"instruction":"Optimize performance of an existing code snippet by making use of Python's list comprehensions.","input":"numbers = [1, 2, 3, 4, 5]\nsquares = []\nfor n in numbers:\n squares.append(n*n)","output":"numbers = [1, 2, 3, 4, 5]\nsquares = [n*n for n in numbers]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize performance of an existing code snippet by making use of Python's list comprehensions.\n\n### Input:\nnumbers = [1, 2, 3, 4, 5]\nsquares = []\nfor n in numbers:\n squares.append(n*n)\n\n### Output:\nnumbers = [1, 2, 3, 4, 5]\nsquares = [n*n for n in numbers]"}
{"instruction":"Construct a Python program to take a list of numbers as input and print out the largest number in the list.","input":"[5, 10, 2, 9, 6]","output":"def largestNumber(list):\n  max = list[0]\n  for num in list:\n    if num > max:\n      max = num\n  return max\n\nlist = [5, 10, 2, 9, 6]\nprint(largestNumber(list)) # Output: 10","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to take a list of numbers as input and print out the largest number in the list.\n\n### Input:\n[5, 10, 2, 9, 6]\n\n### Output:\ndef largestNumber(list):\n  max = list[0]\n  for num in list:\n    if num > max:\n      max = num\n  return max\n\nlist = [5, 10, 2, 9, 6]\nprint(largestNumber(list)) # Output: 10"}
{"instruction":"The code is a Python script that contains functions to format and plot data using Plotly. To use the code, import it into your Python environment and call the functions as needed. The main function is \"post\", which takes in a filename, data, and optional parameters to customize the plot. The \"format_data\" function can be used to convert raw data into a format that can be plotted using the other functions. The \"get_histogram\", \"get_scatter2d\", and \"get_scatter3d\" functions generate different types of plots based on the input data.","input":"","output":"\nimport os\nimport json\nfrom dateutil.parser import parse\n\nimport plotly\nfrom plotly.graph_objs import Histogram, Scatter, Scatter3d, Data, Layout, XAxis, YAxis, ZAxis, Figure\n\n\n__version__ = '0.0.1'\n\n\ndef is_numeric(x):\n    \n    try:\n        float(x)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_date(d):\n    \n    try:\n        parse(d)\n        return True\n    except ValueError, AttributeError:\n        return False\n\n\ndef is_string(x):\n    return is_numeric(x) + is_date(x) == 0\n\n\ndef format_data(data):\n    \n    data = json.loads(''.join(data))\n    \n    keys = data[0].keys()\n    \n    # Check column type\n    sidx = [ idx for idx, key in enumerate(keys) if is_string(data[0][key]) ]\n    \n    values = [ [ d.get(key) for key in keys ] for d in data ]\n    values = zip(*values)\n    \n    if len(sidx) == 1:\n        text = values.pop(sidx[0])\n        keys.pop(sidx[0])\n    else:\n        text = None\n    \n    return {\n        'layout': {\n            'axes': keys\n        },\n        'data': {\n            'values': values,\n            'text': text\n        }\n    }\n\n\ndef get_histogram(data):\n    \n    values = data['values']\n    return Data([\n        Histogram(\n            x=values\n        )\n    ])\n\n\ndef get_scatter2d(data):\n    \n    values = data['values']\n    return Data([\n        Scatter(\n            x=values[0],\n            y=values[1],\n            mode='markers',\n            text=data['text']\n        )\n    ])\n\n\ndef get_scatter3d(data):\n    \n    values = data['values']\n    return Data([\n        Scatter3d(\n            x=values[0],\n            y=values[1],\n            z=values[2]\n        )\n    ])\n\n\ndef post(filename, data, fileopt='new', title=None, world_readable=True):\n    \n    # Get username and api key\n    username = os.environ.get('PLOTLY_USERNAME')\n    api_key = os.environ.get('PLOTLY_API_KEY')\n    \n    plotly.tools.set_credentials_file(username=username, api_key=api_key)\n    \n    axes = data['layout']['axes']\n    \n    nAxes = len(axes)\n    \n    get_data = {\n        1: get_histogram,\n        2: get_scatter2d,\n        3: get_scatter3d\n    }\n    \n    axes_kwargs = ['xaxis', 'yaxis', 'zaxis']\n    axes_obj = [XAxis, YAxis, ZAxis]\n    \n    layout_kwargs = { axes_kwargs[idx]: axes_obj[idx](title=axis) for idx, axis in enumerate(axes) }\n    dataobj = get_data[nAxes](data['data'])\n    layout = Layout(**layout_kwargs)\n    \n    fig = Figure(data=dataobj, layout=layout)\n    \n    r = plotly.plotly.plot(fig, filename=filename)\n    print r\n    ","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe code is a Python script that contains functions to format and plot data using Plotly. To use the code, import it into your Python environment and call the functions as needed. The main function is \"post\", which takes in a filename, data, and optional parameters to customize the plot. The \"format_data\" function can be used to convert raw data into a format that can be plotted using the other functions. The \"get_histogram\", \"get_scatter2d\", and \"get_scatter3d\" functions generate different types of plots based on the input data.\n\n### Input:\n\n\n### Output:\n\nimport os\nimport json\nfrom dateutil.parser import parse\n\nimport plotly\nfrom plotly.graph_objs import Histogram, Scatter, Scatter3d, Data, Layout, XAxis, YAxis, ZAxis, Figure\n\n\n__version__ = '0.0.1'\n\n\ndef is_numeric(x):\n    \n    try:\n        float(x)\n        return True\n    except ValueError:\n        return False\n\n\ndef is_date(d):\n    \n    try:\n        parse(d)\n        return True\n    except ValueError, AttributeError:\n        return False\n\n\ndef is_string(x):\n    return is_numeric(x) + is_date(x) == 0\n\n\ndef format_data(data):\n    \n    data = json.loads(''.join(data))\n    \n    keys = data[0].keys()\n    \n    # Check column type\n    sidx = [ idx for idx, key in enumerate(keys) if is_string(data[0][key]) ]\n    \n    values = [ [ d.get(key) for key in keys ] for d in data ]\n    values = zip(*values)\n    \n    if len(sidx) == 1:\n        text = values.pop(sidx[0])\n        keys.pop(sidx[0])\n    else:\n        text = None\n    \n    return {\n        'layout': {\n            'axes': keys\n        },\n        'data': {\n            'values': values,\n            'text': text\n        }\n    }\n\n\ndef get_histogram(data):\n    \n    values = data['values']\n    return Data([\n        Histogram(\n            x=values\n        )\n    ])\n\n\ndef get_scatter2d(data):\n    \n    values = data['values']\n    return Data([\n        Scatter(\n            x=values[0],\n            y=values[1],\n            mode='markers',\n            text=data['text']\n        )\n    ])\n\n\ndef get_scatter3d(data):\n    \n    values = data['values']\n    return Data([\n        Scatter3d(\n            x=values[0],\n            y=values[1],\n            z=values[2]\n        )\n    ])\n\n\ndef post(filename, data, fileopt='new', title=None, world_readable=True):\n    \n    # Get username and api key\n    username = os.environ.get('PLOTLY_USERNAME')\n    api_key = os.environ.get('PLOTLY_API_KEY')\n    \n    plotly.tools.set_credentials_file(username=username, api_key=api_key)\n    \n    axes = data['layout']['axes']\n    \n    nAxes = len(axes)\n    \n    get_data = {\n        1: get_histogram,\n        2: get_scatter2d,\n        3: get_scatter3d\n    }\n    \n    axes_kwargs = ['xaxis', 'yaxis', 'zaxis']\n    axes_obj = [XAxis, YAxis, ZAxis]\n    \n    layout_kwargs = { axes_kwargs[idx]: axes_obj[idx](title=axis) for idx, axis in enumerate(axes) }\n    dataobj = get_data[nAxes](data['data'])\n    layout = Layout(**layout_kwargs)\n    \n    fig = Figure(data=dataobj, layout=layout)\n    \n    r = plotly.plotly.plot(fig, filename=filename)\n    print r\n    "}
{"instruction":"Develop a game trajectory algorithm in Python for a two-dimensional environment.","input":"","output":"# Define a function for trajectory algorithms\ndef trajectory_algorithm(start_point, end_point):\n    # Set the dampening parameter, which determines how far the ball moves in each step\n    d = 0.1\n    # Find the distance between start and end points\n    dist = (end_point[0] - start_point[0])**2 + (end_point[1] - start_point[1])**2\n    # Define a loop to iterate through\n    while dist > (d ** 2):\n        # Move the ball closer to the end point\n        start_point[0] = start_point[0] + ((end_point[0] - start_point[0]) * d)\n        start_point[1] = start_point[1] + ((end_point[1] - start_point[1]) * d)\n        # Redefine the distance for the next iteration\n        dist = (end_point[0] - start_point[0])**2 + (end_point[1] - start_point[1])**2\n    # Return the final point\n    return start_point","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a game trajectory algorithm in Python for a two-dimensional environment.\n\n### Input:\n\n\n### Output:\n# Define a function for trajectory algorithms\ndef trajectory_algorithm(start_point, end_point):\n    # Set the dampening parameter, which determines how far the ball moves in each step\n    d = 0.1\n    # Find the distance between start and end points\n    dist = (end_point[0] - start_point[0])**2 + (end_point[1] - start_point[1])**2\n    # Define a loop to iterate through\n    while dist > (d ** 2):\n        # Move the ball closer to the end point\n        start_point[0] = start_point[0] + ((end_point[0] - start_point[0]) * d)\n        start_point[1] = start_point[1] + ((end_point[1] - start_point[1]) * d)\n        # Redefine the distance for the next iteration\n        dist = (end_point[0] - start_point[0])**2 + (end_point[1] - start_point[1])**2\n    # Return the final point\n    return start_point"}
{"instruction":"Write a Python program that will create a histogram of a given set of data.","input":"[0, 4, 5, 10, 11, 15]","output":"import matplotlib.pyplot as plt \n\n# Data to plot\ndata = [0, 4, 5, 10, 11, 15]\n\n# Create a histogram \nplt.hist(data, bins = [0,5,10,15,20])\n\n# Label the x and y axis \nplt.xlabel(\"Value\") \nplt.ylabel(\"Number of Occurrences\") \n\n# Show the plot \nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that will create a histogram of a given set of data.\n\n### Input:\n[0, 4, 5, 10, 11, 15]\n\n### Output:\nimport matplotlib.pyplot as plt \n\n# Data to plot\ndata = [0, 4, 5, 10, 11, 15]\n\n# Create a histogram \nplt.hist(data, bins = [0,5,10,15,20])\n\n# Label the x and y axis \nplt.xlabel(\"Value\") \nplt.ylabel(\"Number of Occurrences\") \n\n# Show the plot \nplt.show()"}
{"instruction":"Write a Python program to add two numbers given as input from the user.","input":"Input: 2, 4","output":"num1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\n\nsum = num1 + num2\n\nprint(\"The sum of the two numbers is:\", sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to add two numbers given as input from the user.\n\n### Input:\nInput: 2, 4\n\n### Output:\nnum1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\n\nsum = num1 + num2\n\nprint(\"The sum of the two numbers is:\", sum)"}
{"instruction":"Create a Python program that outputs the sum of all the elements in a given array.","input":"[3, 5, 6]","output":"def sum_of_array(arr):\n    result = 0\n    for x in arr:\n        result += x\n    return result\n\nsum = sum_of_array([3, 5, 6])\nprint(sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that outputs the sum of all the elements in a given array.\n\n### Input:\n[3, 5, 6]\n\n### Output:\ndef sum_of_array(arr):\n    result = 0\n    for x in arr:\n        result += x\n    return result\n\nsum = sum_of_array([3, 5, 6])\nprint(sum)"}
{"instruction":"Generate Python code for printing the average of a list of numbers.","input":"[2, 5, 6, 7]","output":"list = [2, 5, 6, 7]\n\nsum = 0\n\nfor num in list:\n sum += num\n \naverage = sum \/ len(list)\nprint(\"Average:\", average)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code for printing the average of a list of numbers.\n\n### Input:\n[2, 5, 6, 7]\n\n### Output:\nlist = [2, 5, 6, 7]\n\nsum = 0\n\nfor num in list:\n sum += num\n \naverage = sum \/ len(list)\nprint(\"Average:\", average)"}
{"instruction":"Write a Python program to perform a series of transformations on a given list.","input":"[1,2,3,4,5,6,7]\n\nTransformations: Multiply each element by 2, select only odd elements, subtract 3 from each remaining element.","output":"def transformations(arr):\n    result = [x*2 for x in arr if x%2 != 0]\n    result = [x-3 for x in result]\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to perform a series of transformations on a given list.\n\n### Input:\n[1,2,3,4,5,6,7]\n\nTransformations: Multiply each element by 2, select only odd elements, subtract 3 from each remaining element.\n\n### Output:\ndef transformations(arr):\n    result = [x*2 for x in arr if x%2 != 0]\n    result = [x-3 for x in result]\n    return result"}
{"instruction":"Create a function in Python that takes in a string and a character, and returns the number of occurrances of the character in the string.","input":"","output":"def count_characters(string, char):\n    count = 0\n    for c in string:\n        if c == char:\n            count += 1\n    return count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes in a string and a character, and returns the number of occurrances of the character in the string.\n\n### Input:\n\n\n### Output:\ndef count_characters(string, char):\n    count = 0\n    for c in string:\n        if c == char:\n            count += 1\n    return count"}
{"instruction":"Develop a Python program to flatten a 2-D list.","input":"list_2d = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","output":"def flatten_2d_list(list_2d):\n # Initialize an empty list \n flat_list = []\n \n # Loop through the list \n for row in list_2d:\n\t for item in row: \n\t\t # Add the item to the flat list \n\t\t flat_list.append(item) \n\n# Return the flattened list \nreturn flat_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to flatten a 2-D list.\n\n### Input:\nlist_2d = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n### Output:\ndef flatten_2d_list(list_2d):\n # Initialize an empty list \n flat_list = []\n \n # Loop through the list \n for row in list_2d:\n\t for item in row: \n\t\t # Add the item to the flat list \n\t\t flat_list.append(item) \n\n# Return the flattened list \nreturn flat_list"}
{"instruction":"Write a Python program to send an email to a group of people.","input":"","output":"# Imports\nimport smtplib\n\n# Define the email addresses\nrecipients = ['person1@mail.com', 'person2@mail.com', 'person3@mail.com']\n\n# Connect to SMTP server\nwith smtplib.SMTP('smtp.mail.com', 587) as server:\n\t# Start TLS\n\tserver.starttls()\n\n\t# Login\n\tserver.login('your_email_address', 'your_password')\n\n\t# Construct the message\n\tmessage = '''\n\tSubject: Your Subject Here\n\t\n\tMessage body here\n\t'''\n\n\t# Send mail\n\tserver.sendmail('your_email_address', recipients, message)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to send an email to a group of people.\n\n### Input:\n\n\n### Output:\n# Imports\nimport smtplib\n\n# Define the email addresses\nrecipients = ['person1@mail.com', 'person2@mail.com', 'person3@mail.com']\n\n# Connect to SMTP server\nwith smtplib.SMTP('smtp.mail.com', 587) as server:\n\t# Start TLS\n\tserver.starttls()\n\n\t# Login\n\tserver.login('your_email_address', 'your_password')\n\n\t# Construct the message\n\tmessage = '''\n\tSubject: Your Subject Here\n\t\n\tMessage body here\n\t'''\n\n\t# Send mail\n\tserver.sendmail('your_email_address', recipients, message)"}
{"instruction":"Generate a loop in Python which iterates through a list and prints the values.","input":"","output":"for value in list_of_values:\n    print(value)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a loop in Python which iterates through a list and prints the values.\n\n### Input:\n\n\n### Output:\nfor value in list_of_values:\n    print(value)"}
{"instruction":"Create a Python program to split a string in the match of a regular expression and return a list of the split strings.","input":"string = \"102030-abc-5060\"","output":"import re\n\nstring = \"102030-abc-5060\" \npattern = r'-\\w+-' \nresult = re.split(pattern, string)\nprint(result)\n\n# Output -> ['102030', '5060']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to split a string in the match of a regular expression and return a list of the split strings.\n\n### Input:\nstring = \"102030-abc-5060\"\n\n### Output:\nimport re\n\nstring = \"102030-abc-5060\" \npattern = r'-\\w+-' \nresult = re.split(pattern, string)\nprint(result)\n\n# Output -> ['102030', '5060']"}
{"instruction":"Create a Python program to find the total number of elements in a stack.","input":"Stack: [1, 2, 3, 4, 5]","output":"def findNumOfElements(stack): \n    return len(stack)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the total number of elements in a stack.\n\n### Input:\nStack: [1, 2, 3, 4, 5]\n\n### Output:\ndef findNumOfElements(stack): \n    return len(stack)"}
{"instruction":"Write a Python program to sort a given list of numbers in ascending order.","input":"[3, 4, 7, 1, 6, 9, 2]","output":"list = [3, 4, 7, 1, 6, 9, 2] \nlist.sort() \nprint(\"Ascending :\",list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a given list of numbers in ascending order.\n\n### Input:\n[3, 4, 7, 1, 6, 9, 2]\n\n### Output:\nlist = [3, 4, 7, 1, 6, 9, 2] \nlist.sort() \nprint(\"Ascending :\",list)"}
{"instruction":"This code is a basic demo of using odometry data to move a robot along a square trajectory. To run the code, you need to have ROS installed on your system. Once you have ROS installed, you can run the code by executing the nav_square.py file. The robot will move along a square trajectory with a distance of 3.0 meters and an angle of 90 degrees. The linear speed is set to 0.1 meters per second and the angular speed is set to 0.6 radians per second. The robot will stop when it reaches the end of the trajectory.","input":"","output":"#!\/usr\/bin\/env python\n\n\"\"\" nav_square.py - Version 1.1 2013-12-20\n\n    A basic demo of the using odometry data to move the robot\n    along a square trajectory.\n\n    Created for the Pi Robot Project: http:\/\/www.pirobot.org\n    Copyright (c) 2012 Patrick Goebel.  All rights reserved.\n\n    This program is free software; you can redistribute it and\/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.5\n    \n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details at:\n    \n    http:\/\/www.gnu.org\/licenses\/gpl.html\n      \n\"\"\"\n\nimport rospy\nfrom geometry_msgs.msg import Twist, Point, Quaternion\nimport tf\nfrom frobo_nav.transform_utils import quat_to_angle, normalize_angle\nfrom math import degrees, radians, copysign, sqrt, pow, pi\n\nclass NavSquare():\n    def __init__(self):\n        # Give the node a name\n        rospy.init_node('nav_square', anonymous=False)\n        \n        # Set rospy to execute a shutdown function when terminating the script\n        rospy.on_shutdown(self.shutdown)\n\n        # How fast will we check the odometry values?\n        rate = 20\n        \n        # Set the equivalent ROS rate variable\n        r = rospy.Rate(rate)\n        \n        # Set the parameters for the target square\n        goal_distance = rospy.get_param(\"~goal_distance\", 3.0)      # meters\n        goal_angle = rospy.get_param(\"~goal_angle\", radians(90))    # degrees converted to radians\n        linear_speed = rospy.get_param(\"~linear_speed\", 0.1)        # meters per second\n        angular_speed = rospy.get_param(\"~angular_speed\", 0.6)      # radians per second\n        angular_tolerance = rospy.get_param(\"~angular_tolerance\", radians(0)) # degrees to radians\n        \n        # Publisher to control the robot's speed\n        self.cmd_vel = rospy.Publisher('\/cmd_vel', Twist)\n         \n        # The base frame is base_footprint for the TurtleBot but base_link for Pi Robot\n        self.base_frame = rospy.get_param('~base_frame', '\/base_link')\n\n        # The odom frame is usually just \/odom\n        self.odom_frame = rospy.get_param('~odom_frame', '\/odom')\n\n        # Initialize the tf listener\n        self.tf_listener = tf.TransformListener()\n        \n        # Give tf some time to fill its buffer\n        rospy.sleep(2)\n        \n        # Set the odom frame\n        self.odom_frame = '\/odom'\n        \n        # Find out if the robot uses \/base_link or \/base_footprint\n        try:\n            self.tf_listener.waitForTransform(self.odom_frame, '\/base_footprint', rospy.Time(), rospy.Duration(1.0))\n            self.base_frame = '\/base_footprint'\n        except (tf.Exception, tf.ConnectivityException, tf.LookupException):\n            try:\n                self.tf_listener.waitForTransform(self.odom_frame, '\/base_link', rospy.Time(), rospy.Duration(1.0))\n                self.base_frame = '\/base_link'\n            except (tf.Exception, tf.ConnectivityException, tf.LookupException):\n                rospy.loginfo(\"Cannot find transform between \/odom and \/base_link or \/base_footprint\")\n                rospy.signal_shutdown(\"tf Exception\")  \n                \n        # Initialize the position variable as a Point type\n        position = Point()\n\n        # Initialize the movement command\n        move_cmd = Twist()\n            \n        # Set the movement command to forward motion\n        move_cmd.linear.x = linear_speed\n            \n        # Get the starting position values     \n        (position, rotation) = self.get_odom()\n        initPosition = position\n\trospy.loginfo(\"Initial position at \" + str(position) + \" and rotation \" + str(degrees(rotation)) + \" degrees\")\n                        \n        x_start = position.x\n        y_start = position.y\n            \n        # Keep track of the distance traveled\n        distance = 0\n            \n        # Enter the loop to move along a side\n        while distance < goal_distance and not rospy.is_shutdown():\n            # Publish the Twist message and sleep 1 cycle         \n            self.cmd_vel.publish(move_cmd)\n               \n            r.sleep()\n        \n            # Get the current position\n            (position, rotation) = self.get_odom()\n                \n            # Compute the Euclidean distance from the start\n            distance = sqrt(pow((position.x - x_start), 2) + \n                            pow((position.y - y_start), 2))\n                \n        # Stop the robot when we are done\n        self.cmd_vel.publish(Twist())\n\n        #print result\n        (position, rotation) = self.get_odom()\n\trospy.loginfo(\"Final position at \" + str(position) + \" and rotation \" + str(degrees(rotation)) + \" degrees\")\n        rospy.loginfo(\"Difference (position.x - initPosition.x) \" + str(position.x - initPosition.x) + \"m\")\n        \n    def get_odom(self):\n        # Get the current transform between the odom and base frames\n        try:\n            (trans, rot)  = self.tf_listener.lookupTransform(self.odom_frame, self.base_frame, rospy.Time(0))\n        except (tf.Exception, tf.ConnectivityException, tf.LookupException):\n            rospy.loginfo(\"TF Exception\")\n            return\n\n        return (Point(*trans), quat_to_angle(Quaternion(*rot)))\n            \n    def shutdown(self):\n        # Always stop the robot when shutting down the node\n        rospy.loginfo(\"Stopping the robot...\")\n        self.cmd_vel.publish(Twist())\n        rospy.sleep(1)\n\nif __name__ == '__main__':\n    try:\n        NavSquare()\n    except rospy.ROSInterruptException:\n        rospy.loginfo(\"Navigation terminated.\")\n\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a basic demo of using odometry data to move a robot along a square trajectory. To run the code, you need to have ROS installed on your system. Once you have ROS installed, you can run the code by executing the nav_square.py file. The robot will move along a square trajectory with a distance of 3.0 meters and an angle of 90 degrees. The linear speed is set to 0.1 meters per second and the angular speed is set to 0.6 radians per second. The robot will stop when it reaches the end of the trajectory.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n\n\"\"\" nav_square.py - Version 1.1 2013-12-20\n\n    A basic demo of the using odometry data to move the robot\n    along a square trajectory.\n\n    Created for the Pi Robot Project: http:\/\/www.pirobot.org\n    Copyright (c) 2012 Patrick Goebel.  All rights reserved.\n\n    This program is free software; you can redistribute it and\/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.5\n    \n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details at:\n    \n    http:\/\/www.gnu.org\/licenses\/gpl.html\n      \n\"\"\"\n\nimport rospy\nfrom geometry_msgs.msg import Twist, Point, Quaternion\nimport tf\nfrom frobo_nav.transform_utils import quat_to_angle, normalize_angle\nfrom math import degrees, radians, copysign, sqrt, pow, pi\n\nclass NavSquare():\n    def __init__(self):\n        # Give the node a name\n        rospy.init_node('nav_square', anonymous=False)\n        \n        # Set rospy to execute a shutdown function when terminating the script\n        rospy.on_shutdown(self.shutdown)\n\n        # How fast will we check the odometry values?\n        rate = 20\n        \n        # Set the equivalent ROS rate variable\n        r = rospy.Rate(rate)\n        \n        # Set the parameters for the target square\n        goal_distance = rospy.get_param(\"~goal_distance\", 3.0)      # meters\n        goal_angle = rospy.get_param(\"~goal_angle\", radians(90))    # degrees converted to radians\n        linear_speed = rospy.get_param(\"~linear_speed\", 0.1)        # meters per second\n        angular_speed = rospy.get_param(\"~angular_speed\", 0.6)      # radians per second\n        angular_tolerance = rospy.get_param(\"~angular_tolerance\", radians(0)) # degrees to radians\n        \n        # Publisher to control the robot's speed\n        self.cmd_vel = rospy.Publisher('\/cmd_vel', Twist)\n         \n        # The base frame is base_footprint for the TurtleBot but base_link for Pi Robot\n        self.base_frame = rospy.get_param('~base_frame', '\/base_link')\n\n        # The odom frame is usually just \/odom\n        self.odom_frame = rospy.get_param('~odom_frame', '\/odom')\n\n        # Initialize the tf listener\n        self.tf_listener = tf.TransformListener()\n        \n        # Give tf some time to fill its buffer\n        rospy.sleep(2)\n        \n        # Set the odom frame\n        self.odom_frame = '\/odom'\n        \n        # Find out if the robot uses \/base_link or \/base_footprint\n        try:\n            self.tf_listener.waitForTransform(self.odom_frame, '\/base_footprint', rospy.Time(), rospy.Duration(1.0))\n            self.base_frame = '\/base_footprint'\n        except (tf.Exception, tf.ConnectivityException, tf.LookupException):\n            try:\n                self.tf_listener.waitForTransform(self.odom_frame, '\/base_link', rospy.Time(), rospy.Duration(1.0))\n                self.base_frame = '\/base_link'\n            except (tf.Exception, tf.ConnectivityException, tf.LookupException):\n                rospy.loginfo(\"Cannot find transform between \/odom and \/base_link or \/base_footprint\")\n                rospy.signal_shutdown(\"tf Exception\")  \n                \n        # Initialize the position variable as a Point type\n        position = Point()\n\n        # Initialize the movement command\n        move_cmd = Twist()\n            \n        # Set the movement command to forward motion\n        move_cmd.linear.x = linear_speed\n            \n        # Get the starting position values     \n        (position, rotation) = self.get_odom()\n        initPosition = position\n\trospy.loginfo(\"Initial position at \" + str(position) + \" and rotation \" + str(degrees(rotation)) + \" degrees\")\n                        \n        x_start = position.x\n        y_start = position.y\n            \n        # Keep track of the distance traveled\n        distance = 0\n            \n        # Enter the loop to move along a side\n        while distance < goal_distance and not rospy.is_shutdown():\n            # Publish the Twist message and sleep 1 cycle         \n            self.cmd_vel.publish(move_cmd)\n               \n            r.sleep()\n        \n            # Get the current position\n            (position, rotation) = self.get_odom()\n                \n            # Compute the Euclidean distance from the start\n            distance = sqrt(pow((position.x - x_start), 2) + \n                            pow((position.y - y_start), 2))\n                \n        # Stop the robot when we are done\n        self.cmd_vel.publish(Twist())\n\n        #print result\n        (position, rotation) = self.get_odom()\n\trospy.loginfo(\"Final position at \" + str(position) + \" and rotation \" + str(degrees(rotation)) + \" degrees\")\n        rospy.loginfo(\"Difference (position.x - initPosition.x) \" + str(position.x - initPosition.x) + \"m\")\n        \n    def get_odom(self):\n        # Get the current transform between the odom and base frames\n        try:\n            (trans, rot)  = self.tf_listener.lookupTransform(self.odom_frame, self.base_frame, rospy.Time(0))\n        except (tf.Exception, tf.ConnectivityException, tf.LookupException):\n            rospy.loginfo(\"TF Exception\")\n            return\n\n        return (Point(*trans), quat_to_angle(Quaternion(*rot)))\n            \n    def shutdown(self):\n        # Always stop the robot when shutting down the node\n        rospy.loginfo(\"Stopping the robot...\")\n        self.cmd_vel.publish(Twist())\n        rospy.sleep(1)\n\nif __name__ == '__main__':\n    try:\n        NavSquare()\n    except rospy.ROSInterruptException:\n        rospy.loginfo(\"Navigation terminated.\")\n\n"}
{"instruction":"Create a class \"Animal\" in Python with a function \"make_sound\" to print the sound the animal can make.","input":"","output":"class Animal:\n    def __init__(self):\n        pass\n    \n    def make_sound(self):\n        print(\"The animal makes a sound.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class \"Animal\" in Python with a function \"make_sound\" to print the sound the animal can make.\n\n### Input:\n\n\n### Output:\nclass Animal:\n    def __init__(self):\n        pass\n    \n    def make_sound(self):\n        print(\"The animal makes a sound.\")"}
{"instruction":"Create an algorithm in Python for calculating the distance between two cities given their respective latitude and longitude.","input":"Paris: 48.8566, 2.3522\nNew York: 40.7128, 74.0060","output":"from math import sin, cos, sqrt, atan2, radians \n\ndef calculate_distance(lat1, long1, lat2, long2): \n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(lat1)\n    long1 = radians(long1)\n    lat2 = radians(lat2)\n    long2 = radians(long2)\n\n    dlon = long2 - long1\n    dlat = lat2 - lat1\n\n    a = sin(dlat \/ 2)**2 + cos(lat1) * cos(lat2) * sin(dlon \/ 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    distance = R * c\n\n    return distance\n\nparis = [48.8566, 2.3522]\nny = [40.7128, 74.0060]\ndistance = calculate_distance(paris[0], paris[1], ny[0], ny[1])\n\nprint(distance)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python for calculating the distance between two cities given their respective latitude and longitude.\n\n### Input:\nParis: 48.8566, 2.3522\nNew York: 40.7128, 74.0060\n\n### Output:\nfrom math import sin, cos, sqrt, atan2, radians \n\ndef calculate_distance(lat1, long1, lat2, long2): \n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(lat1)\n    long1 = radians(long1)\n    lat2 = radians(lat2)\n    long2 = radians(long2)\n\n    dlon = long2 - long1\n    dlat = lat2 - lat1\n\n    a = sin(dlat \/ 2)**2 + cos(lat1) * cos(lat2) * sin(dlon \/ 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    distance = R * c\n\n    return distance\n\nparis = [48.8566, 2.3522]\nny = [40.7128, 74.0060]\ndistance = calculate_distance(paris[0], paris[1], ny[0], ny[1])\n\nprint(distance)"}
{"instruction":"Create a Python program to add all the items in a list.","input":"Not applicable","output":"# define a list\nmy_list = [1,2,3,4,5]\n\n# define the sum variable\nsum = 0\n\n# loop through all values in list\nfor i in my_list:\n    # add each value to the sum\n    sum += i\n\n# print the result\nprint(\"The sum of all values in my_list is:\", sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to add all the items in a list.\n\n### Input:\nNot applicable\n\n### Output:\n# define a list\nmy_list = [1,2,3,4,5]\n\n# define the sum variable\nsum = 0\n\n# loop through all values in list\nfor i in my_list:\n    # add each value to the sum\n    sum += i\n\n# print the result\nprint(\"The sum of all values in my_list is:\", sum)"}
{"instruction":"Design an algorithm in Python to rearrange the elements in an array such that no two elements appear next to each other whose absolute difference is equal to 1.","input":"[1, 4, 5, 2, 9, 0]","output":"def modifiedArrangement(arr):\n    arr.sort() \n    result = [] \n\n    for i in range(len(arr)) : \n        result.append((arr[i]+1) - 1) \n        result.append(arr[i]) \n\n    return result \n\narr = [1, 4, 5, 2, 9, 0]\n# modified Arrangement \nresult = modifiedArrangement(arr) \n\n# Print the result \nprint(\"Modified arrangement : \" + str(result))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to rearrange the elements in an array such that no two elements appear next to each other whose absolute difference is equal to 1.\n\n### Input:\n[1, 4, 5, 2, 9, 0]\n\n### Output:\ndef modifiedArrangement(arr):\n    arr.sort() \n    result = [] \n\n    for i in range(len(arr)) : \n        result.append((arr[i]+1) - 1) \n        result.append(arr[i]) \n\n    return result \n\narr = [1, 4, 5, 2, 9, 0]\n# modified Arrangement \nresult = modifiedArrangement(arr) \n\n# Print the result \nprint(\"Modified arrangement : \" + str(result))"}
{"instruction":"Generate a code snippet to reverse a string in Python.","input":"","output":"def reverse(s): \n\treturn s[::-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code snippet to reverse a string in Python.\n\n### Input:\n\n\n### Output:\ndef reverse(s): \n\treturn s[::-1]"}
{"instruction":"Write a Python program that can recognize handwritten letters.","input":"","output":"import numpy as np\nfrom tensorflow.keras.callbacks import TensorBoard\n\n# Load the MNIST dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n# Reshape and normalize the data\nx_train = x_train.reshape((x_train.shape[0], 28, 28, 1))\nx_test = x_test.reshape((x_test.shape[0], 28, 28, 1))\nx_train, x_test = x_train \/ 255.0, x_test \/ 255.0\n\n# Build the model\nmodel = tf.keras.Sequential([\n tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n tf.keras.layers.MaxPooling2D(),\n tf.keras.layers.Flatten(),\n tf.keras.layers.Dense(128, activation='relu'),\n tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile and train the model\nmodel.compile(\n optimizer='adam', \n loss='sparse_categorical_crossentropy',\n metrics=['accuracy']\n)\n\nmodel.fit(x_train, y_train, epochs=5, callbacks=[TensorBoard('logs')])\n\n# Evaluate the model\nmodel.evaluate(x_test, y_test)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that can recognize handwritten letters.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom tensorflow.keras.callbacks import TensorBoard\n\n# Load the MNIST dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n# Reshape and normalize the data\nx_train = x_train.reshape((x_train.shape[0], 28, 28, 1))\nx_test = x_test.reshape((x_test.shape[0], 28, 28, 1))\nx_train, x_test = x_train \/ 255.0, x_test \/ 255.0\n\n# Build the model\nmodel = tf.keras.Sequential([\n tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n tf.keras.layers.MaxPooling2D(),\n tf.keras.layers.Flatten(),\n tf.keras.layers.Dense(128, activation='relu'),\n tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile and train the model\nmodel.compile(\n optimizer='adam', \n loss='sparse_categorical_crossentropy',\n metrics=['accuracy']\n)\n\nmodel.fit(x_train, y_train, epochs=5, callbacks=[TensorBoard('logs')])\n\n# Evaluate the model\nmodel.evaluate(x_test, y_test)"}
{"instruction":"Create a web application using Python and Flask which takes an animal name as input and displays a short description about the animal.","input":"Lion","output":"from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('\/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':\n        animal = request.form['animal'];\n        \n        if animal == 'Lion':\n            description = 'The lion is a large mammal of the family Felidae. It is a formidable and famous predator of the African savanna. It has a majestic presence and strength.'\n        else:\n            description = 'No description available.'\n        return render_template(\"index.html\", description=description)\n    \n    return render_template(\"index.html\")\n\nif __name__ == \"__main__\":\n    app.run()\n\n# index.html content\n\n<h1>Animal Description<\/h1>\n\n<form method=\"post\">\n <p>Enter the Animal name: <input type=\"text\" name=\"animal\" \/><\/p>\n    <input type=\"submit\" value=\"Submit\" \/>\n<\/form>\n\n<p>{{ description }}<\/p>","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application using Python and Flask which takes an animal name as input and displays a short description about the animal.\n\n### Input:\nLion\n\n### Output:\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('\/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':\n        animal = request.form['animal'];\n        \n        if animal == 'Lion':\n            description = 'The lion is a large mammal of the family Felidae. It is a formidable and famous predator of the African savanna. It has a majestic presence and strength.'\n        else:\n            description = 'No description available.'\n        return render_template(\"index.html\", description=description)\n    \n    return render_template(\"index.html\")\n\nif __name__ == \"__main__\":\n    app.run()\n\n# index.html content\n\n<h1>Animal Description<\/h1>\n\n<form method=\"post\">\n <p>Enter the Animal name: <input type=\"text\" name=\"animal\" \/><\/p>\n    <input type=\"submit\" value=\"Submit\" \/>\n<\/form>\n\n<p>{{ description }}<\/p>"}
{"instruction":"Suggest an improvement in the following python code so that it runs faster.","input":"import time\ndef execute_slow_function(n):\n    time.sleep(1)\n    return n\n    \nfor i in range(10):\n    execute_slow_function(i)","output":"import time\ndef execute_slow_function(n):\n    time.sleep(1)\n    return n\n    \n# Create a thread pool of size 10\nfrom multiprocessing.pool import ThreadPool\npool = ThreadPool(10)\n\n# Execute the slow function in parallel in the thread pool\nresults = pool.map(execute_slow_function, list(range(10)))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest an improvement in the following python code so that it runs faster.\n\n### Input:\nimport time\ndef execute_slow_function(n):\n    time.sleep(1)\n    return n\n    \nfor i in range(10):\n    execute_slow_function(i)\n\n### Output:\nimport time\ndef execute_slow_function(n):\n    time.sleep(1)\n    return n\n    \n# Create a thread pool of size 10\nfrom multiprocessing.pool import ThreadPool\npool = ThreadPool(10)\n\n# Execute the slow function in parallel in the thread pool\nresults = pool.map(execute_slow_function, list(range(10)))"}
{"instruction":"Create a python code to predict if a given pattern of features of a target user can be classified as a fraud.","input":"features = ['high credit' , 'low age' , 'high spending']","output":"import numpy as np\nfrom sklearn.naive_bayes import GaussianNB\n\n#define the labels\nlabels = {'fraud': 0, 'not fraud': 1}\n\n#defining the training data and the labels\ntrain_data = [[1, 'high credit', 'low age', 'high spending'],\n              [1, 'low credit', 'low age', 'low spending'],\n              [0, 'low credit', 'low age', 'high spending'],\n              [1, 'low credit', 'low age', 'low spending'],\n              [0, 'low credit', 'low age', 'low spending'],\n              [1, 'low credit', 'low age', 'low spending'],\n              [0, 'low credit', 'low age', 'low spending'],\n              ]\ntrain_labels = [0, 1, 0, 1, 0, 1, 0]\n\n#fitting the classifier\nclf = GaussianNB()\nclf.fit(train_data, train_labels)\n\n#prediction\nfeatures = ['high credit' , 'low age' , 'high spending']\nlabel = clf.predict([features])\n\nif label == labels['fraud']:\n    print('Target user is a fraud')\nelse:\n    print('Target user is not a fraud')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python code to predict if a given pattern of features of a target user can be classified as a fraud.\n\n### Input:\nfeatures = ['high credit' , 'low age' , 'high spending']\n\n### Output:\nimport numpy as np\nfrom sklearn.naive_bayes import GaussianNB\n\n#define the labels\nlabels = {'fraud': 0, 'not fraud': 1}\n\n#defining the training data and the labels\ntrain_data = [[1, 'high credit', 'low age', 'high spending'],\n              [1, 'low credit', 'low age', 'low spending'],\n              [0, 'low credit', 'low age', 'high spending'],\n              [1, 'low credit', 'low age', 'low spending'],\n              [0, 'low credit', 'low age', 'low spending'],\n              [1, 'low credit', 'low age', 'low spending'],\n              [0, 'low credit', 'low age', 'low spending'],\n              ]\ntrain_labels = [0, 1, 0, 1, 0, 1, 0]\n\n#fitting the classifier\nclf = GaussianNB()\nclf.fit(train_data, train_labels)\n\n#prediction\nfeatures = ['high credit' , 'low age' , 'high spending']\nlabel = clf.predict([features])\n\nif label == labels['fraud']:\n    print('Target user is a fraud')\nelse:\n    print('Target user is not a fraud')"}
{"instruction":"Write a Python script to parse a JSON string and convert it into an array of strings.","input":"Not applicable","output":"import json\n\ndef parse_json(json_string):\n  json_data = json.loads(json_string)\n\n  result = []\n  for key, value in json_data.items():\n    result.append(f'{key}: {value}')\n\n  return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to parse a JSON string and convert it into an array of strings.\n\n### Input:\nNot applicable\n\n### Output:\nimport json\n\ndef parse_json(json_string):\n  json_data = json.loads(json_string)\n\n  result = []\n  for key, value in json_data.items():\n    result.append(f'{key}: {value}')\n\n  return result"}
{"instruction":"Create a python program that finds the number of elements between two given indices in a given list.","input":"list = [0, 4, 5, 8, 9]\nstart = 2\nend = 4","output":"def count_elements(list, start, end):\n    elements_count = 0\n    start_index = list.index(start)\n    end_index = list.index(end)\n    for i in range(start_index + 1, end_index):\n        elements_count += 1\n    return elements_count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that finds the number of elements between two given indices in a given list.\n\n### Input:\nlist = [0, 4, 5, 8, 9]\nstart = 2\nend = 4\n\n### Output:\ndef count_elements(list, start, end):\n    elements_count = 0\n    start_index = list.index(start)\n    end_index = list.index(end)\n    for i in range(start_index + 1, end_index):\n        elements_count += 1\n    return elements_count"}
{"instruction":"Write a Python program that uses natural language processing to classify the sentiment of a given sentence.","input":"","output":"import nltk\nimport numpy as np\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# Download relevant NLTK packages\nnltk.download('vader_lexicon')\n\n# Initialize Sentiment Analyzer\nsentiment_analyzer = SentimentIntensityAnalyzer()\n\n# Take input from user\nsentence = input(\"Enter a sentence to be analyzed: \")\n\n# Calculate sentiment\nsentiment = sentiment_analyzer.polarity_scores(sentence)\n\n# Output sentiment\nif sentiment['compound'] > 0.2:\n    print(\"Positive sentiment\")\nelif sentiment['compound'] < -0.2:\n    print(\"Negative sentiment\")\nelse:\n    print(\"Neutral sentiment\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that uses natural language processing to classify the sentiment of a given sentence.\n\n### Input:\n\n\n### Output:\nimport nltk\nimport numpy as np\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# Download relevant NLTK packages\nnltk.download('vader_lexicon')\n\n# Initialize Sentiment Analyzer\nsentiment_analyzer = SentimentIntensityAnalyzer()\n\n# Take input from user\nsentence = input(\"Enter a sentence to be analyzed: \")\n\n# Calculate sentiment\nsentiment = sentiment_analyzer.polarity_scores(sentence)\n\n# Output sentiment\nif sentiment['compound'] > 0.2:\n    print(\"Positive sentiment\")\nelif sentiment['compound'] < -0.2:\n    print(\"Negative sentiment\")\nelse:\n    print(\"Neutral sentiment\")"}
{"instruction":"Write a Python program to optimize a set of points in a 3-dimensional plane.","input":"points = [[10, 12, 13], [1, 8, 9], [3, 5, 7]]","output":"import scipy.optimize as opt\n\ndef objective(x):\n return sum([x[i]**2 for i in range(len(x))])\n\ndef constraint1(x):\n return 16 - x[0]**2 - x[1]**2 - x[2]**2\n\ncons = [{'type': 'ineq','fun': constraint1}]\n\nx = [0, 0, 0]\n\nsolution = opt.minimize(objective, x, constraints=cons)\n\nprint(solution)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize a set of points in a 3-dimensional plane.\n\n### Input:\npoints = [[10, 12, 13], [1, 8, 9], [3, 5, 7]]\n\n### Output:\nimport scipy.optimize as opt\n\ndef objective(x):\n return sum([x[i]**2 for i in range(len(x))])\n\ndef constraint1(x):\n return 16 - x[0]**2 - x[1]**2 - x[2]**2\n\ncons = [{'type': 'ineq','fun': constraint1}]\n\nx = [0, 0, 0]\n\nsolution = opt.minimize(objective, x, constraints=cons)\n\nprint(solution)"}
{"instruction":"Construct a Python program that read a csv dataset, that contains rows of keyword, location and value and rank them based on the highest value.","input":"[keyword, location, value]\n[apple, Washington, 400]\n[banana, California, 800]\n[cherry, Texas, 300]","output":"import csv \n\n# Initialize the list of records \ndata = [['apple', 'Washington', 400], \n        ['banana', 'California', 800], \n        ['cherry', 'Texas', 300]]\n\n# Sort the CSV data according to value \ndata.sort(key=lambda x: x[2], reverse=True) \n\n# Print the sorted data \nfor row in data: \n    print(row) \n\n# Output \n['banana', 'California', 800] \n['apple', 'Washington', 400] \n['cherry', 'Texas', 300]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program that read a csv dataset, that contains rows of keyword, location and value and rank them based on the highest value.\n\n### Input:\n[keyword, location, value]\n[apple, Washington, 400]\n[banana, California, 800]\n[cherry, Texas, 300]\n\n### Output:\nimport csv \n\n# Initialize the list of records \ndata = [['apple', 'Washington', 400], \n        ['banana', 'California', 800], \n        ['cherry', 'Texas', 300]]\n\n# Sort the CSV data according to value \ndata.sort(key=lambda x: x[2], reverse=True) \n\n# Print the sorted data \nfor row in data: \n    print(row) \n\n# Output \n['banana', 'California', 800] \n['apple', 'Washington', 400] \n['cherry', 'Texas', 300]"}
{"instruction":"Write a Python function that computes the average of 3 numbers.","input":"1, 2, 3","output":"def average(a, b, c):\n    return (a + b + c) \/ 3.0\n\nprint(average(1,2,3)) # Output: 2.0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that computes the average of 3 numbers.\n\n### Input:\n1, 2, 3\n\n### Output:\ndef average(a, b, c):\n    return (a + b + c) \/ 3.0\n\nprint(average(1,2,3)) # Output: 2.0"}
{"instruction":"Write a Python program to validate a user-provided email address.","input":"email_address = \"john@example.com\"","output":"import re\n\ndef is_valid_email(email_address):\n  # check if the address follows the format\n  regex = '^[\\w]+[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n  if re.search(regex, email_address):\n    # the address is valid\n    return True\n  else:\n    # the address is invalid\n    return False\n\nemail_address = \"john@example.com\"\n\nif is_valid_email(email_address):\n  print(\"The email address is valid\")\nelse:\n  print(\"The email address is invalid\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to validate a user-provided email address.\n\n### Input:\nemail_address = \"john@example.com\"\n\n### Output:\nimport re\n\ndef is_valid_email(email_address):\n  # check if the address follows the format\n  regex = '^[\\w]+[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n  if re.search(regex, email_address):\n    # the address is valid\n    return True\n  else:\n    # the address is invalid\n    return False\n\nemail_address = \"john@example.com\"\n\nif is_valid_email(email_address):\n  print(\"The email address is valid\")\nelse:\n  print(\"The email address is invalid\")"}
{"instruction":"Create a python script to concatenate two lists.","input":"list_1 = [1, 2, 3]\nlist_2 = [4, 5, 6]","output":"def concat_lists(list_1, list_2):\n    return list_1 + list_2\n\nlist_1 = [1, 2, 3]\nlist_2 = [4, 5, 6]\n\nconcatenated_list = concat_lists(list_1, list_2)\nprint(concatenated_list) # [1, 2, 3, 4, 5, 6]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to concatenate two lists.\n\n### Input:\nlist_1 = [1, 2, 3]\nlist_2 = [4, 5, 6]\n\n### Output:\ndef concat_lists(list_1, list_2):\n    return list_1 + list_2\n\nlist_1 = [1, 2, 3]\nlist_2 = [4, 5, 6]\n\nconcatenated_list = concat_lists(list_1, list_2)\nprint(concatenated_list) # [1, 2, 3, 4, 5, 6]"}
{"instruction":"Create a Python class called \"Project\" with various properties and methods for managing a Python project. The class should have methods for adding and removing packages from the Pipfile, creating a Pipfile, and writing data out as TOML. It should also have properties for accessing information about the project, such as the project name, the location of the virtual environment, and the location of the Pipfile. Additionally, the class should have properties for accessing information about the project's dependencies, such as a list of all packages, a list of packages for pip-tools to","input":"","output":"# -*- coding: utf-8 -*-\nimport json\nimport os\nimport re\nimport sys\nimport base64\nimport hashlib\n\nimport contoml\nimport delegator\nimport pipfile\nimport toml\n\nfrom .utils import (\n    mkdir_p, convert_deps_from_pip, pep423_name, recase_file,\n    find_requirements, is_file, is_vcs, python_version, cleanup_toml,\n    is_installable_file, is_valid_url\n)\nfrom .environments import PIPENV_MAX_DEPTH, PIPENV_VENV_IN_PROJECT\nfrom .environments import PIPENV_VIRTUALENV, PIPENV_PIPFILE\n\nif PIPENV_PIPFILE:\n    if not os.path.isfile(PIPENV_PIPFILE):\n        raise RuntimeError('Given PIPENV_PIPFILE is not found!')\n    else:\n        PIPENV_PIPFILE = os.path.abspath(PIPENV_PIPFILE)\n\n\nclass Project(object):\n    \"\"\"docstring for Project\"\"\"\n\n    def __init__(self, chdir=True):\n        super(Project, self).__init__()\n        self._name = None\n        self._virtualenv_location = None\n        self._download_location = None\n        self._proper_names_location = None\n        self._pipfile_location = None\n        self._requirements_location = None\n        self._original_dir = os.path.abspath(os.curdir)\n\n        # Hack to skip this during pipenv run, or -r.\n        if ('run' not in sys.argv) and chdir:\n            try:\n                os.chdir(self.project_directory)\n            except (TypeError, AttributeError):\n                pass\n\n    def path_to(self, p):\n        \"\"\"Returns the absolute path to a given relative path.\"\"\"\n        if os.path.isabs(p):\n            return p\n\n        return os.sep.join([self._original_dir, p])\n\n    def _build_package_list(self, package_section):\n        \"\"\"Returns a list of packages for pip-tools to consume.\"\"\"\n        ps = {}\n        # TODO: Separate the logic for showing packages from the filters for supplying pip-tools\n        for k, v in self.parsed_pipfile.get(package_section, {}).items():\n            # Skip editable VCS deps.\n            if hasattr(v, 'keys'):\n                # When a vcs url is gven without editable it only appears as a key\n                # Eliminate any vcs, path, or url entries which are not editable\n                # Since pip-tools can't do deep resolution on them, even setuptools-installable ones\n                if (is_vcs(v) or is_vcs(k) or (is_installable_file(k) or is_installable_file(v)) or\n                        any((prefix in v and\n                             (os.path.isfile(v[prefix]) or is_valid_url(v[prefix])))\n                            for prefix in ['path', 'file'])):\n                    # If they are editable, do resolve them\n                    if 'editable' not in v:\n                        continue\n                    else:\n                        ps.update({k: v})\n                else:\n                    ps.update({k: v})\n            else:\n                # Since these entries have no attributes we know they are not editable\n                # So we can safely exclude things that need to be editable in order to be resolved\n                # First exclude anything that is a vcs entry either in the key or value\n                if not (any(is_vcs(i) for i in [k, v]) or\n                        # Then exclude any installable files that are not directories\n                        # Because pip-tools can resolve setup.py for example\n                        any(is_installable_file(i) for i in [k, v]) or\n                        # Then exclude any URLs because they need to be editable also\n                        # Things that are excluded can only be 'shallow resolved'\n                        any(is_valid_url(i) for i in [k, v])):\n                    ps.update({k: v})\n        return ps\n\n    @property\n    def name(self):\n        if self._name is None:\n            self._name = self.pipfile_location.split(os.sep)[-2]\n        return self._name\n\n    @property\n    def pipfile_exists(self):\n        return bool(self.pipfile_location)\n\n    @property\n    def required_python_version(self):\n        if self.pipfile_exists:\n            required = self.parsed_pipfile.get('requires', {}).get('python_full_version')\n            if not required:\n                required = self.parsed_pipfile.get('requires', {}).get('python_version')\n            if required != \"*\":\n                return required\n\n    @property\n    def project_directory(self):\n        if self.pipfile_location is not None:\n            return os.path.abspath(os.path.join(self.pipfile_location, os.pardir))\n        else:\n            return None\n\n    @property\n    def requirements_exists(self):\n        return bool(self.requirements_location)\n\n    @property\n    def virtualenv_exists(self):\n        # TODO: Decouple project from existence of Pipfile.\n        if self.pipfile_exists and os.path.exists(self.virtualenv_location):\n            if os.name == 'nt':\n                extra = ['Scripts', 'activate.bat']\n            else:\n                extra = ['bin', 'activate']\n            return os.path.isfile(os.sep.join([self.virtualenv_location] + extra))\n\n        return False\n\n    @property\n    def virtualenv_name(self):\n        # Replace dangerous characters into '_'. The length of the sanitized\n        # project name is limited as 42 because of the limit of linux kernel\n        #\n        # 42 = 127 - len('\/home\/\/.local\/share\/virtualenvs\/\/bin\/python2') - 32 - len('-HASHHASH')\n        #\n        #      127 : BINPRM_BUF_SIZE - 1\n        #       32 : Maximum length of username\n        #\n        # References:\n        #   https:\/\/www.gnu.org\/software\/bash\/manual\/html_node\/Double-Quotes.html\n        #   http:\/\/www.tldp.org\/LDP\/abs\/html\/special-chars.html#FIELDREF\n        #   https:\/\/github.com\/torvalds\/linux\/blob\/2bfe01ef\/include\/uapi\/linux\/binfmts.h#L18\n        sanitized = re.sub(r'[ $`!*@\"\\\\\\r\\n\\t]', '_', self.name)[0:42]\n\n        # Hash the full path of the pipfile\n        hash = hashlib.sha256(self.pipfile_location.encode()).digest()[:6]\n        encoded_hash = base64.urlsafe_b64encode(hash).decode()\n\n        # If the pipfile was located at '\/home\/user\/MY_PROJECT\/Pipfile',\n        # the name of its virtualenv will be 'my-project-wyUfYPqE'\n        return sanitized + '-' + encoded_hash\n\n    @property\n    def virtualenv_location(self):\n\n        # if VIRTUAL_ENV is set, use that.\n        if PIPENV_VIRTUALENV:\n            return PIPENV_VIRTUALENV\n\n        # Use cached version, if available.\n        if self._virtualenv_location:\n            return self._virtualenv_location\n\n        # The user wants the virtualenv in the project.\n        if not PIPENV_VENV_IN_PROJECT:\n            c = delegator.run('pew dir \"{0}\"'.format(self.virtualenv_name))\n            loc = c.out.strip()\n        # Default mode.\n        else:\n            loc = os.sep.join(self.pipfile_location.split(os.sep)[:-1] + ['.venv'])\n\n        self._virtualenv_location = loc\n        return loc\n\n    @property\n    def virtualenv_src_location(self):\n        loc = os.sep.join([self.virtualenv_location, 'src'])\n        mkdir_p(loc)\n        return loc\n\n    @property\n    def download_location(self):\n        if self._download_location is None:\n            loc = os.sep.join([self.virtualenv_location, 'downloads'])\n            self._download_location = loc\n\n        # Create the directory, if it doesn't exist.\n        mkdir_p(self._download_location)\n\n        return self._download_location\n\n    @property\n    def proper_names_location(self):\n        if self._proper_names_location is None:\n            loc = os.sep.join([self.virtualenv_location, 'pipenv-proper-names.txt'])\n            self._proper_names_location = loc\n\n        # Create the database, if it doesn't exist.\n        open(self._proper_names_location, 'a').close()\n\n        return self._proper_names_location\n\n    @property\n    def proper_names(self):\n        with open(self.proper_names_location) as f:\n            return f.read().splitlines()\n\n    def register_proper_name(self, name):\n        \"\"\"Registers a proper name to the database.\"\"\"\n        with open(self.proper_names_location, 'a') as f:\n            f.write('{0}\\n'.format(name))\n\n    @property\n    def pipfile_location(self):\n        if PIPENV_PIPFILE:\n            return PIPENV_PIPFILE\n\n        if self._pipfile_location is None:\n            try:\n                loc = pipfile.Pipfile.find(max_depth=PIPENV_MAX_DEPTH)\n            except RuntimeError:\n                loc = None\n            self._pipfile_location = loc\n\n        return self._pipfile_location\n\n    @property\n    def requirements_location(self):\n        if self._requirements_location is None:\n            try:\n                loc = find_requirements(max_depth=PIPENV_MAX_DEPTH)\n            except RuntimeError:\n                loc = None\n            self._requirements_location = loc\n\n        return self._requirements_location\n\n    @property\n    def parsed_pipfile(self):\n        # Open the pipfile, read it into memory.\n        with open(self.pipfile_location) as f:\n            contents = f.read()\n\n        # If any outline tables are present...\n        if ('[packages.' in contents) or ('[dev-packages.' in contents):\n\n            data = toml.loads(contents)\n\n            # Convert all outline tables to inline tables.\n            for section in ('packages', 'dev-packages'):\n                for package in data.get(section, {}):\n\n                    # Convert things to inline tables \u2014 fancy :)\n                    if hasattr(data[section][package], 'keys'):\n                        _data = data[section][package]\n                        data[section][package] = toml._get_empty_inline_table(dict)\n                        data[section][package].update(_data)\n\n            # We lose comments here, but it's for the best.)\n            try:\n                return contoml.loads(toml.dumps(data, preserve=True))\n            except RuntimeError:\n                return toml.loads(toml.dumps(data, preserve=True))\n\n        else:\n            # Fallback to toml parser, for large files.\n            try:\n                return contoml.loads(contents)\n            except Exception:\n                return toml.loads(contents)\n\n    @property\n    def _pipfile(self):\n        \"\"\"Pipfile divided by PyPI and external dependencies.\"\"\"\n        pfile = self.parsed_pipfile\n        for section in ('packages', 'dev-packages'):\n            p_section = pfile.get(section, {})\n\n            for key in list(p_section.keys()):\n                # Normalize key name to PEP 423.\n                norm_key = pep423_name(key)\n                p_section[norm_key] = p_section.pop(key)\n\n        return pfile\n\n    @property\n    def settings(self):\n        \"\"\"A dictionary of the settings added to the Pipfile.\"\"\"\n        return self.parsed_pipfile.get('pipenv', {})\n\n    def update_settings(self, d):\n        settings = self.settings\n\n        changed = False\n        for new in d:\n            if new not in settings:\n                settings[new] = d[new]\n                changed = True\n\n        if changed:\n            p = self.parsed_pipfile\n            p['pipenv'] = settings\n\n            # Write the changes to disk.\n            self.write_toml(p)\n\n    @property\n    def _lockfile(self):\n        \"\"\"Pipfile.lock divided by PyPI and external dependencies.\"\"\"\n        pfile = pipfile.load(self.pipfile_location)\n        lockfile = json.loads(pfile.lock())\n\n        for section in ('default', 'develop'):\n            lock_section = lockfile.get(section, {})\n\n            for key in list(lock_section.keys()):\n                norm_key = pep423_name(key)\n                lockfile[section][norm_key] = lock_section.pop(key)\n\n        return lockfile\n\n    @property\n    def lockfile_location(self):\n        return '{0}.lock'.format(self.pipfile_location)\n\n    @property\n    def lockfile_exists(self):\n        return os.path.isfile(self.lockfile_location)\n\n    @property\n    def lockfile_content(self):\n        with open(self.lockfile_location) as lock:\n            return json.load(lock)\n\n    @property\n    def vcs_packages(self):\n        \"\"\"Returns a list of VCS packages, for not pip-tools to consume.\"\"\"\n        ps = {}\n        for k, v in self.parsed_pipfile.get('packages', {}).items():\n            if is_vcs(v) or is_vcs(k):\n                ps.update({k: v})\n        return ps\n\n    @property\n    def vcs_dev_packages(self):\n        \"\"\"Returns a list of VCS packages, for not pip-tools to consume.\"\"\"\n        ps = {}\n        for k, v in self.parsed_pipfile.get('dev-packages', {}).items():\n            if is_vcs(v) or is_vcs(k):\n                ps.update({k: v})\n        return ps\n\n    @property\n    def all_packages(self):\n        \"\"\"Returns a list of all packages.\"\"\"\n        p = dict(self.parsed_pipfile.get('dev-packages', {}))\n        p.update(self.parsed_pipfile.get('packages', {}))\n        return p\n\n    @property\n    def packages(self):\n        \"\"\"Returns a list of packages, for pip-tools to consume.\"\"\"\n        return self._build_package_list('packages')\n\n    @property\n    def dev_packages(self):\n        \"\"\"Returns a list of dev-packages, for pip-tools to consume.\"\"\"\n        return self._build_package_list('dev-packages')\n\n    def touch_pipfile(self):\n        \"\"\"Simply touches the Pipfile, for later use.\"\"\"\n        with open('Pipfile', 'a'):\n            os.utime('Pipfile', None)\n\n    @property\n    def pipfile_is_empty(self):\n        if not self.pipfile_exists:\n            return True\n\n        with open(self.pipfile_location, 'r') as f:\n            if not f.read():\n                return True\n\n        return False\n\n    def create_pipfile(self, python=None):\n        \"\"\"Creates the Pipfile, filled with juicy defaults.\"\"\"\n        data = {\n            # Default source.\n            u'source': [\n                {u'url': u'https:\/\/pypi.python.org\/simple', u'verify_ssl': True, 'name': 'pypi'}\n            ],\n\n            # Default packages.\n            u'packages': {},\n            u'dev-packages': {},\n\n        }\n\n        # Default requires.\n        if python:\n            data[u'requires'] = {'python_version': python_version(python)[:len('2.7')]}\n\n        self.write_toml(data, 'Pipfile')\n\n    def write_toml(self, data, path=None):\n        \"\"\"Writes the given data structure out as TOML.\"\"\"\n        if path is None:\n            path = self.pipfile_location\n\n        try:\n            formatted_data = contoml.dumps(data).rstrip()\n        except Exception:\n            for section in ('packages', 'dev-packages'):\n                for package in data[section]:\n\n                    # Convert things to inline tables \u2014 fancy :)\n                    if hasattr(data[section][package], 'keys'):\n                        _data = data[section][package]\n                        data[section][package] = toml._get_empty_inline_table(dict)\n                        data[section][package].update(_data)\n\n            formatted_data = toml.dumps(data).rstrip()\n\n        formatted_data = cleanup_toml(formatted_data)\n        with open(path, 'w') as f:\n            f.write(formatted_data)\n\n    @property\n    def sources(self):\n        if self.lockfile_exists:\n            meta_ = self.lockfile_content['_meta']\n            sources_ = meta_.get('sources')\n            if sources_:\n                return sources_\n        if 'source' in self.parsed_pipfile:\n            return self.parsed_pipfile['source']\n        else:\n            return [{u'url': u'https:\/\/pypi.python.org\/simple', u'verify_ssl': True, 'name': 'pypi'}]\n\n    def get_source(self, name=None, url=None):\n        for source in self.sources:\n            if name:\n                if source.get('name') == name:\n                    return source\n            elif url:\n                if source.get('url') in url:\n                    return source\n\n    def destroy_lockfile(self):\n        \"\"\"Deletes the lockfile.\"\"\"\n        try:\n            return os.remove(self.lockfile_location)\n        except OSError:\n            pass\n\n    def remove_package_from_pipfile(self, package_name, dev=False):\n\n        # Read and append Pipfile.\n        p = self._pipfile\n\n        package_name = pep423_name(package_name)\n\n        key = 'dev-packages' if dev else 'packages'\n\n        if key in p and package_name in p[key]:\n            del p[key][package_name]\n\n        # Write Pipfile.\n        self.write_toml(recase_file(p))\n\n    def add_package_to_pipfile(self, package_name, dev=False):\n\n        # Read and append Pipfile.\n        p = self._pipfile\n\n        # Don't re-capitalize file URLs or VCSs.\n        converted = convert_deps_from_pip(package_name)\n        converted = converted[[k for k in converted.keys()][0]]\n\n        if not (is_file(package_name) or is_vcs(converted) or 'path' in converted):\n            package_name = pep423_name(package_name)\n\n        key = 'dev-packages' if dev else 'packages'\n\n        # Set empty group if it doesn't exist yet.\n        if key not in p:\n            p[key] = {}\n\n        package = convert_deps_from_pip(package_name)\n        package_name = [k for k in package.keys()][0]\n\n        # Add the package to the group.\n        p[key][package_name] = package[package_name]\n\n        # Write Pipfile.\n        self.write_toml(p)\n\n    def add_index_to_pipfile(self, index):\n        \"\"\"Adds a given index to the Pipfile.\"\"\"\n\n        # Read and append Pipfile.\n        p = self._pipfile\n\n        source = {'url': index, 'verify_ssl': True}\n\n        # Add the package to the group.\n        if 'source' not in p:\n            p['source'] = [source]\n\n        else:\n            p['source'].append(source)\n\n        # Write Pipfile.\n        self.write_toml(p)\n\n    def recase_pipfile(self):\n        self.write_toml(recase_file(self._pipfile))\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class called \"Project\" with various properties and methods for managing a Python project. The class should have methods for adding and removing packages from the Pipfile, creating a Pipfile, and writing data out as TOML. It should also have properties for accessing information about the project, such as the project name, the location of the virtual environment, and the location of the Pipfile. Additionally, the class should have properties for accessing information about the project's dependencies, such as a list of all packages, a list of packages for pip-tools to\n\n### Input:\n\n\n### Output:\n# -*- coding: utf-8 -*-\nimport json\nimport os\nimport re\nimport sys\nimport base64\nimport hashlib\n\nimport contoml\nimport delegator\nimport pipfile\nimport toml\n\nfrom .utils import (\n    mkdir_p, convert_deps_from_pip, pep423_name, recase_file,\n    find_requirements, is_file, is_vcs, python_version, cleanup_toml,\n    is_installable_file, is_valid_url\n)\nfrom .environments import PIPENV_MAX_DEPTH, PIPENV_VENV_IN_PROJECT\nfrom .environments import PIPENV_VIRTUALENV, PIPENV_PIPFILE\n\nif PIPENV_PIPFILE:\n    if not os.path.isfile(PIPENV_PIPFILE):\n        raise RuntimeError('Given PIPENV_PIPFILE is not found!')\n    else:\n        PIPENV_PIPFILE = os.path.abspath(PIPENV_PIPFILE)\n\n\nclass Project(object):\n    \"\"\"docstring for Project\"\"\"\n\n    def __init__(self, chdir=True):\n        super(Project, self).__init__()\n        self._name = None\n        self._virtualenv_location = None\n        self._download_location = None\n        self._proper_names_location = None\n        self._pipfile_location = None\n        self._requirements_location = None\n        self._original_dir = os.path.abspath(os.curdir)\n\n        # Hack to skip this during pipenv run, or -r.\n        if ('run' not in sys.argv) and chdir:\n            try:\n                os.chdir(self.project_directory)\n            except (TypeError, AttributeError):\n                pass\n\n    def path_to(self, p):\n        \"\"\"Returns the absolute path to a given relative path.\"\"\"\n        if os.path.isabs(p):\n            return p\n\n        return os.sep.join([self._original_dir, p])\n\n    def _build_package_list(self, package_section):\n        \"\"\"Returns a list of packages for pip-tools to consume.\"\"\"\n        ps = {}\n        # TODO: Separate the logic for showing packages from the filters for supplying pip-tools\n        for k, v in self.parsed_pipfile.get(package_section, {}).items():\n            # Skip editable VCS deps.\n            if hasattr(v, 'keys'):\n                # When a vcs url is gven without editable it only appears as a key\n                # Eliminate any vcs, path, or url entries which are not editable\n                # Since pip-tools can't do deep resolution on them, even setuptools-installable ones\n                if (is_vcs(v) or is_vcs(k) or (is_installable_file(k) or is_installable_file(v)) or\n                        any((prefix in v and\n                             (os.path.isfile(v[prefix]) or is_valid_url(v[prefix])))\n                            for prefix in ['path', 'file'])):\n                    # If they are editable, do resolve them\n                    if 'editable' not in v:\n                        continue\n                    else:\n                        ps.update({k: v})\n                else:\n                    ps.update({k: v})\n            else:\n                # Since these entries have no attributes we know they are not editable\n                # So we can safely exclude things that need to be editable in order to be resolved\n                # First exclude anything that is a vcs entry either in the key or value\n                if not (any(is_vcs(i) for i in [k, v]) or\n                        # Then exclude any installable files that are not directories\n                        # Because pip-tools can resolve setup.py for example\n                        any(is_installable_file(i) for i in [k, v]) or\n                        # Then exclude any URLs because they need to be editable also\n                        # Things that are excluded can only be 'shallow resolved'\n                        any(is_valid_url(i) for i in [k, v])):\n                    ps.update({k: v})\n        return ps\n\n    @property\n    def name(self):\n        if self._name is None:\n            self._name = self.pipfile_location.split(os.sep)[-2]\n        return self._name\n\n    @property\n    def pipfile_exists(self):\n        return bool(self.pipfile_location)\n\n    @property\n    def required_python_version(self):\n        if self.pipfile_exists:\n            required = self.parsed_pipfile.get('requires', {}).get('python_full_version')\n            if not required:\n                required = self.parsed_pipfile.get('requires', {}).get('python_version')\n            if required != \"*\":\n                return required\n\n    @property\n    def project_directory(self):\n        if self.pipfile_location is not None:\n            return os.path.abspath(os.path.join(self.pipfile_location, os.pardir))\n        else:\n            return None\n\n    @property\n    def requirements_exists(self):\n        return bool(self.requirements_location)\n\n    @property\n    def virtualenv_exists(self):\n        # TODO: Decouple project from existence of Pipfile.\n        if self.pipfile_exists and os.path.exists(self.virtualenv_location):\n            if os.name == 'nt':\n                extra = ['Scripts', 'activate.bat']\n            else:\n                extra = ['bin', 'activate']\n            return os.path.isfile(os.sep.join([self.virtualenv_location] + extra))\n\n        return False\n\n    @property\n    def virtualenv_name(self):\n        # Replace dangerous characters into '_'. The length of the sanitized\n        # project name is limited as 42 because of the limit of linux kernel\n        #\n        # 42 = 127 - len('\/home\/\/.local\/share\/virtualenvs\/\/bin\/python2') - 32 - len('-HASHHASH')\n        #\n        #      127 : BINPRM_BUF_SIZE - 1\n        #       32 : Maximum length of username\n        #\n        # References:\n        #   https:\/\/www.gnu.org\/software\/bash\/manual\/html_node\/Double-Quotes.html\n        #   http:\/\/www.tldp.org\/LDP\/abs\/html\/special-chars.html#FIELDREF\n        #   https:\/\/github.com\/torvalds\/linux\/blob\/2bfe01ef\/include\/uapi\/linux\/binfmts.h#L18\n        sanitized = re.sub(r'[ $`!*@\"\\\\\\r\\n\\t]', '_', self.name)[0:42]\n\n        # Hash the full path of the pipfile\n        hash = hashlib.sha256(self.pipfile_location.encode()).digest()[:6]\n        encoded_hash = base64.urlsafe_b64encode(hash).decode()\n\n        # If the pipfile was located at '\/home\/user\/MY_PROJECT\/Pipfile',\n        # the name of its virtualenv will be 'my-project-wyUfYPqE'\n        return sanitized + '-' + encoded_hash\n\n    @property\n    def virtualenv_location(self):\n\n        # if VIRTUAL_ENV is set, use that.\n        if PIPENV_VIRTUALENV:\n            return PIPENV_VIRTUALENV\n\n        # Use cached version, if available.\n        if self._virtualenv_location:\n            return self._virtualenv_location\n\n        # The user wants the virtualenv in the project.\n        if not PIPENV_VENV_IN_PROJECT:\n            c = delegator.run('pew dir \"{0}\"'.format(self.virtualenv_name))\n            loc = c.out.strip()\n        # Default mode.\n        else:\n            loc = os.sep.join(self.pipfile_location.split(os.sep)[:-1] + ['.venv'])\n\n        self._virtualenv_location = loc\n        return loc\n\n    @property\n    def virtualenv_src_location(self):\n        loc = os.sep.join([self.virtualenv_location, 'src'])\n        mkdir_p(loc)\n        return loc\n\n    @property\n    def download_location(self):\n        if self._download_location is None:\n            loc = os.sep.join([self.virtualenv_location, 'downloads'])\n            self._download_location = loc\n\n        # Create the directory, if it doesn't exist.\n        mkdir_p(self._download_location)\n\n        return self._download_location\n\n    @property\n    def proper_names_location(self):\n        if self._proper_names_location is None:\n            loc = os.sep.join([self.virtualenv_location, 'pipenv-proper-names.txt'])\n            self._proper_names_location = loc\n\n        # Create the database, if it doesn't exist.\n        open(self._proper_names_location, 'a').close()\n\n        return self._proper_names_location\n\n    @property\n    def proper_names(self):\n        with open(self.proper_names_location) as f:\n            return f.read().splitlines()\n\n    def register_proper_name(self, name):\n        \"\"\"Registers a proper name to the database.\"\"\"\n        with open(self.proper_names_location, 'a') as f:\n            f.write('{0}\\n'.format(name))\n\n    @property\n    def pipfile_location(self):\n        if PIPENV_PIPFILE:\n            return PIPENV_PIPFILE\n\n        if self._pipfile_location is None:\n            try:\n                loc = pipfile.Pipfile.find(max_depth=PIPENV_MAX_DEPTH)\n            except RuntimeError:\n                loc = None\n            self._pipfile_location = loc\n\n        return self._pipfile_location\n\n    @property\n    def requirements_location(self):\n        if self._requirements_location is None:\n            try:\n                loc = find_requirements(max_depth=PIPENV_MAX_DEPTH)\n            except RuntimeError:\n                loc = None\n            self._requirements_location = loc\n\n        return self._requirements_location\n\n    @property\n    def parsed_pipfile(self):\n        # Open the pipfile, read it into memory.\n        with open(self.pipfile_location) as f:\n            contents = f.read()\n\n        # If any outline tables are present...\n        if ('[packages.' in contents) or ('[dev-packages.' in contents):\n\n            data = toml.loads(contents)\n\n            # Convert all outline tables to inline tables.\n            for section in ('packages', 'dev-packages'):\n                for package in data.get(section, {}):\n\n                    # Convert things to inline tables \u2014 fancy :)\n                    if hasattr(data[section][package], 'keys'):\n                        _data = data[section][package]\n                        data[section][package] = toml._get_empty_inline_table(dict)\n                        data[section][package].update(_data)\n\n            # We lose comments here, but it's for the best.)\n            try:\n                return contoml.loads(toml.dumps(data, preserve=True))\n            except RuntimeError:\n                return toml.loads(toml.dumps(data, preserve=True))\n\n        else:\n            # Fallback to toml parser, for large files.\n            try:\n                return contoml.loads(contents)\n            except Exception:\n                return toml.loads(contents)\n\n    @property\n    def _pipfile(self):\n        \"\"\"Pipfile divided by PyPI and external dependencies.\"\"\"\n        pfile = self.parsed_pipfile\n        for section in ('packages', 'dev-packages'):\n            p_section = pfile.get(section, {})\n\n            for key in list(p_section.keys()):\n                # Normalize key name to PEP 423.\n                norm_key = pep423_name(key)\n                p_section[norm_key] = p_section.pop(key)\n\n        return pfile\n\n    @property\n    def settings(self):\n        \"\"\"A dictionary of the settings added to the Pipfile.\"\"\"\n        return self.parsed_pipfile.get('pipenv', {})\n\n    def update_settings(self, d):\n        settings = self.settings\n\n        changed = False\n        for new in d:\n            if new not in settings:\n                settings[new] = d[new]\n                changed = True\n\n        if changed:\n            p = self.parsed_pipfile\n            p['pipenv'] = settings\n\n            # Write the changes to disk.\n            self.write_toml(p)\n\n    @property\n    def _lockfile(self):\n        \"\"\"Pipfile.lock divided by PyPI and external dependencies.\"\"\"\n        pfile = pipfile.load(self.pipfile_location)\n        lockfile = json.loads(pfile.lock())\n\n        for section in ('default', 'develop'):\n            lock_section = lockfile.get(section, {})\n\n            for key in list(lock_section.keys()):\n                norm_key = pep423_name(key)\n                lockfile[section][norm_key] = lock_section.pop(key)\n\n        return lockfile\n\n    @property\n    def lockfile_location(self):\n        return '{0}.lock'.format(self.pipfile_location)\n\n    @property\n    def lockfile_exists(self):\n        return os.path.isfile(self.lockfile_location)\n\n    @property\n    def lockfile_content(self):\n        with open(self.lockfile_location) as lock:\n            return json.load(lock)\n\n    @property\n    def vcs_packages(self):\n        \"\"\"Returns a list of VCS packages, for not pip-tools to consume.\"\"\"\n        ps = {}\n        for k, v in self.parsed_pipfile.get('packages', {}).items():\n            if is_vcs(v) or is_vcs(k):\n                ps.update({k: v})\n        return ps\n\n    @property\n    def vcs_dev_packages(self):\n        \"\"\"Returns a list of VCS packages, for not pip-tools to consume.\"\"\"\n        ps = {}\n        for k, v in self.parsed_pipfile.get('dev-packages', {}).items():\n            if is_vcs(v) or is_vcs(k):\n                ps.update({k: v})\n        return ps\n\n    @property\n    def all_packages(self):\n        \"\"\"Returns a list of all packages.\"\"\"\n        p = dict(self.parsed_pipfile.get('dev-packages', {}))\n        p.update(self.parsed_pipfile.get('packages', {}))\n        return p\n\n    @property\n    def packages(self):\n        \"\"\"Returns a list of packages, for pip-tools to consume.\"\"\"\n        return self._build_package_list('packages')\n\n    @property\n    def dev_packages(self):\n        \"\"\"Returns a list of dev-packages, for pip-tools to consume.\"\"\"\n        return self._build_package_list('dev-packages')\n\n    def touch_pipfile(self):\n        \"\"\"Simply touches the Pipfile, for later use.\"\"\"\n        with open('Pipfile', 'a'):\n            os.utime('Pipfile', None)\n\n    @property\n    def pipfile_is_empty(self):\n        if not self.pipfile_exists:\n            return True\n\n        with open(self.pipfile_location, 'r') as f:\n            if not f.read():\n                return True\n\n        return False\n\n    def create_pipfile(self, python=None):\n        \"\"\"Creates the Pipfile, filled with juicy defaults.\"\"\"\n        data = {\n            # Default source.\n            u'source': [\n                {u'url': u'https:\/\/pypi.python.org\/simple', u'verify_ssl': True, 'name': 'pypi'}\n            ],\n\n            # Default packages.\n            u'packages': {},\n            u'dev-packages': {},\n\n        }\n\n        # Default requires.\n        if python:\n            data[u'requires'] = {'python_version': python_version(python)[:len('2.7')]}\n\n        self.write_toml(data, 'Pipfile')\n\n    def write_toml(self, data, path=None):\n        \"\"\"Writes the given data structure out as TOML.\"\"\"\n        if path is None:\n            path = self.pipfile_location\n\n        try:\n            formatted_data = contoml.dumps(data).rstrip()\n        except Exception:\n            for section in ('packages', 'dev-packages'):\n                for package in data[section]:\n\n                    # Convert things to inline tables \u2014 fancy :)\n                    if hasattr(data[section][package], 'keys'):\n                        _data = data[section][package]\n                        data[section][package] = toml._get_empty_inline_table(dict)\n                        data[section][package].update(_data)\n\n            formatted_data = toml.dumps(data).rstrip()\n\n        formatted_data = cleanup_toml(formatted_data)\n        with open(path, 'w') as f:\n            f.write(formatted_data)\n\n    @property\n    def sources(self):\n        if self.lockfile_exists:\n            meta_ = self.lockfile_content['_meta']\n            sources_ = meta_.get('sources')\n            if sources_:\n                return sources_\n        if 'source' in self.parsed_pipfile:\n            return self.parsed_pipfile['source']\n        else:\n            return [{u'url': u'https:\/\/pypi.python.org\/simple', u'verify_ssl': True, 'name': 'pypi'}]\n\n    def get_source(self, name=None, url=None):\n        for source in self.sources:\n            if name:\n                if source.get('name') == name:\n                    return source\n            elif url:\n                if source.get('url') in url:\n                    return source\n\n    def destroy_lockfile(self):\n        \"\"\"Deletes the lockfile.\"\"\"\n        try:\n            return os.remove(self.lockfile_location)\n        except OSError:\n            pass\n\n    def remove_package_from_pipfile(self, package_name, dev=False):\n\n        # Read and append Pipfile.\n        p = self._pipfile\n\n        package_name = pep423_name(package_name)\n\n        key = 'dev-packages' if dev else 'packages'\n\n        if key in p and package_name in p[key]:\n            del p[key][package_name]\n\n        # Write Pipfile.\n        self.write_toml(recase_file(p))\n\n    def add_package_to_pipfile(self, package_name, dev=False):\n\n        # Read and append Pipfile.\n        p = self._pipfile\n\n        # Don't re-capitalize file URLs or VCSs.\n        converted = convert_deps_from_pip(package_name)\n        converted = converted[[k for k in converted.keys()][0]]\n\n        if not (is_file(package_name) or is_vcs(converted) or 'path' in converted):\n            package_name = pep423_name(package_name)\n\n        key = 'dev-packages' if dev else 'packages'\n\n        # Set empty group if it doesn't exist yet.\n        if key not in p:\n            p[key] = {}\n\n        package = convert_deps_from_pip(package_name)\n        package_name = [k for k in package.keys()][0]\n\n        # Add the package to the group.\n        p[key][package_name] = package[package_name]\n\n        # Write Pipfile.\n        self.write_toml(p)\n\n    def add_index_to_pipfile(self, index):\n        \"\"\"Adds a given index to the Pipfile.\"\"\"\n\n        # Read and append Pipfile.\n        p = self._pipfile\n\n        source = {'url': index, 'verify_ssl': True}\n\n        # Add the package to the group.\n        if 'source' not in p:\n            p['source'] = [source]\n\n        else:\n            p['source'].append(source)\n\n        # Write Pipfile.\n        self.write_toml(p)\n\n    def recase_pipfile(self):\n        self.write_toml(recase_file(self._pipfile))\n"}
{"instruction":"Parse the following JSON string into a Python dictionary.","input":"{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}","output":"import json\n\ndata = '{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}'\n\nparsed_data = json.loads(data)\nprint(parsed_data) # {'name': 'John', 'age': 30, 'city': 'New York'}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nParse the following JSON string into a Python dictionary.\n\n### Input:\n{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}\n\n### Output:\nimport json\n\ndata = '{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}'\n\nparsed_data = json.loads(data)\nprint(parsed_data) # {'name': 'John', 'age': 30, 'city': 'New York'}"}
{"instruction":"Create an optimization algorithm in Python to calculate the minimum distance between two points.","input":"","output":"def distance(x1, y1, x2, y2):\n return ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n\ndef get_minimum_distance(points):\n min_dist = sys.maxsize\n \n for i in range(len(points)):\n for j in range(i+1,len(points)):\n dist = distance(points[i][0], points[i][1], points[j][0], points[j][1])\n \n if dist < min_dist:\n min_dist = dist\n \n return min_dist","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an optimization algorithm in Python to calculate the minimum distance between two points.\n\n### Input:\n\n\n### Output:\ndef distance(x1, y1, x2, y2):\n return ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n\ndef get_minimum_distance(points):\n min_dist = sys.maxsize\n \n for i in range(len(points)):\n for j in range(i+1,len(points)):\n dist = distance(points[i][0], points[i][1], points[j][0], points[j][1])\n \n if dist < min_dist:\n min_dist = dist\n \n return min_dist"}
{"instruction":"Create a method in Python to format a date from the format dd-mm-yyyy to yyyy-mm-dd.","input":"date = \"10-05-2020\"","output":"def format_date(date):\n    splitted_date = date.split(\"-\")\n    reformatted_date = splitted_date[::-1]\n    return \"-\".join(reformatted_date)\n\nformat_date(\"10-05-2020\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a method in Python to format a date from the format dd-mm-yyyy to yyyy-mm-dd.\n\n### Input:\ndate = \"10-05-2020\"\n\n### Output:\ndef format_date(date):\n    splitted_date = date.split(\"-\")\n    reformatted_date = splitted_date[::-1]\n    return \"-\".join(reformatted_date)\n\nformat_date(\"10-05-2020\")"}
{"instruction":"Generate Python code for finding the minimum of two given numbers.","input":"","output":"def min_num(x, y):\n  if x < y:\n    return x\n  else:\n    return y\n\nprint(min_num(5, 10))\n\n# Output\n5","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code for finding the minimum of two given numbers.\n\n### Input:\n\n\n### Output:\ndef min_num(x, y):\n  if x < y:\n    return x\n  else:\n    return y\n\nprint(min_num(5, 10))\n\n# Output\n5"}
{"instruction":"Create a Python program to compare two strings and print the number of characters that are not common to both strings.","input":"String A: Hello\nString B: World","output":"Number of non-common characters: 7\n\n#Program:\n\ndef compare(string_a, string_b):\n    count=0\n    for i in string_a:\n        if i not in string_b:\n            count+=1\n    for j in string_b:\n        if j not in string_a:\n            count+=1\n    print(f\"Number of non-common characters: {count}\")\n\nstring_a=input(\"String A: \")\nstring_b=input(\"String B: \")\ncompare(string_a,string_b)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to compare two strings and print the number of characters that are not common to both strings.\n\n### Input:\nString A: Hello\nString B: World\n\n### Output:\nNumber of non-common characters: 7\n\n#Program:\n\ndef compare(string_a, string_b):\n    count=0\n    for i in string_a:\n        if i not in string_b:\n            count+=1\n    for j in string_b:\n        if j not in string_a:\n            count+=1\n    print(f\"Number of non-common characters: {count}\")\n\nstring_a=input(\"String A: \")\nstring_b=input(\"String B: \")\ncompare(string_a,string_b)"}
{"instruction":"Create a Python program for finding a given pattern in a given text.","input":"Text = \"This is a sample text.\"\nPattern = \"is\"","output":"def findPattern(text, pattern):\n    i=0\n    count=0\n    while i < len(text):\n        j = 0\n        if text[i] == pattern[j]:\n            k = i\n            while j < len(pattern) and k < len(text) and  text[k] == pattern[j]:\n                j+=1\n                k+=1\n            if j == len(pattern):\n                count+=1\n            i+=1\n        else:\n            i+=1\n    return count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for finding a given pattern in a given text.\n\n### Input:\nText = \"This is a sample text.\"\nPattern = \"is\"\n\n### Output:\ndef findPattern(text, pattern):\n    i=0\n    count=0\n    while i < len(text):\n        j = 0\n        if text[i] == pattern[j]:\n            k = i\n            while j < len(pattern) and k < len(text) and  text[k] == pattern[j]:\n                j+=1\n                k+=1\n            if j == len(pattern):\n                count+=1\n            i+=1\n        else:\n            i+=1\n    return count"}
{"instruction":"Design a function in Python that takes two lists as input and returns the elements in common.","input":"list1 = [2, 3, 4, 5]\nlist2 = [1, 2, 4, 5]","output":"list1 = [2, 3, 4, 5]\nlist2 = [1, 2, 4, 5]\n\ndef common_elements(list1, list2):\n    result = []\n    for item in list1:\n        if item in list2:\n            result.append(item)\n    return result\n\nprint(common_elements(list1, list2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python that takes two lists as input and returns the elements in common.\n\n### Input:\nlist1 = [2, 3, 4, 5]\nlist2 = [1, 2, 4, 5]\n\n### Output:\nlist1 = [2, 3, 4, 5]\nlist2 = [1, 2, 4, 5]\n\ndef common_elements(list1, list2):\n    result = []\n    for item in list1:\n        if item in list2:\n            result.append(item)\n    return result\n\nprint(common_elements(list1, list2))"}
{"instruction":"Sort a dictionary by values in Python.","input":"","output":"dictionary = {'key1':1, 'key2': 3, 'key3': 2}\nsorted_dict = {key: value for key, value in sorted(dictionary.items(), key=lambda item: item[1])}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSort a dictionary by values in Python.\n\n### Input:\n\n\n### Output:\ndictionary = {'key1':1, 'key2': 3, 'key3': 2}\nsorted_dict = {key: value for key, value in sorted(dictionary.items(), key=lambda item: item[1])}"}
{"instruction":"Write a function in Python to print the top n elements of an array.","input":"[2, 3, 4, 5, 1], top_n = 3","output":"def max_n_elements(arr, n):\n    res = []\n    for i in range(n):\n        max_val = max(arr)\n        res.append(max_val)\n        arr.remove(max_val)\n        \n    return res\n    \narr = [2, 3, 4, 5, 1] \ntop_n = 3\nprint(max_n_elements(arr, top_n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to print the top n elements of an array.\n\n### Input:\n[2, 3, 4, 5, 1], top_n = 3\n\n### Output:\ndef max_n_elements(arr, n):\n    res = []\n    for i in range(n):\n        max_val = max(arr)\n        res.append(max_val)\n        arr.remove(max_val)\n        \n    return res\n    \narr = [2, 3, 4, 5, 1] \ntop_n = 3\nprint(max_n_elements(arr, top_n))"}
{"instruction":"Write a Python program to visually summarize the Twitter data.","input":"Twitter data is a stream of tweets with data fields like : tweet author, date of tweet, text, number of likes, number of retweets.","output":"import matplotlib.pyplot as plt\n\n# Process the Twitter data to extract\n# the relevant data fields\n# ...\n\n# Plot the tweet authors\nplt.xlabel('Tweet Authors')\nplt.ylabel('Number of tweets')\nplt.title('Tweet Author Summary')\nplt.bar(authors, num_tweets)\nplt.show()\n\n# Plot the number of likes\nplt.xlabel('Tweets')\nplt.ylabel('Number of Likes')\nplt.title('Number of Likes Summary')\nplt.bar(tweets, num_likes)\nplt.show()\n\n# Plot the number of retweets\nplt.xlabel('Tweets')\nplt.ylabel('Number of Retweets')\nplt.title('Number of Retweets Summary')\nplt.bar(tweets, num_retweets)\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to visually summarize the Twitter data.\n\n### Input:\nTwitter data is a stream of tweets with data fields like : tweet author, date of tweet, text, number of likes, number of retweets.\n\n### Output:\nimport matplotlib.pyplot as plt\n\n# Process the Twitter data to extract\n# the relevant data fields\n# ...\n\n# Plot the tweet authors\nplt.xlabel('Tweet Authors')\nplt.ylabel('Number of tweets')\nplt.title('Tweet Author Summary')\nplt.bar(authors, num_tweets)\nplt.show()\n\n# Plot the number of likes\nplt.xlabel('Tweets')\nplt.ylabel('Number of Likes')\nplt.title('Number of Likes Summary')\nplt.bar(tweets, num_likes)\nplt.show()\n\n# Plot the number of retweets\nplt.xlabel('Tweets')\nplt.ylabel('Number of Retweets')\nplt.title('Number of Retweets Summary')\nplt.bar(tweets, num_retweets)\nplt.show()"}
{"instruction":"Generate an algorithm in Python to return the common elements in two unsorted arrays.","input":"A = [2, 3, 5, 7, 8]\nB = [3, 5, 7, 9, 10]","output":"def commonElements(A, B):\n    commonElements = []\n    for i in A: \n        if i in B and i not in commonElements:\n            commonElements.append(i) \n    return commonElements\n\nA = [2, 3, 5, 7, 8]\nB = [3, 5, 7, 9, 10]\nprint(commonElements(A, B))\n# Output: [3, 5, 7]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an algorithm in Python to return the common elements in two unsorted arrays.\n\n### Input:\nA = [2, 3, 5, 7, 8]\nB = [3, 5, 7, 9, 10]\n\n### Output:\ndef commonElements(A, B):\n    commonElements = []\n    for i in A: \n        if i in B and i not in commonElements:\n            commonElements.append(i) \n    return commonElements\n\nA = [2, 3, 5, 7, 8]\nB = [3, 5, 7, 9, 10]\nprint(commonElements(A, B))\n# Output: [3, 5, 7]"}
{"instruction":"Modify the given Python code to improve its performance.","input":"def find_sum(n):\n    total = 0\n    for i in range(n+1):\n        total += i\n    return total","output":"def find_sum(n):\n    # base case\n    if n == 0:\n        return 0\n    # recursive case\n    else:\n        return n + find_sum(n-1)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the given Python code to improve its performance.\n\n### Input:\ndef find_sum(n):\n    total = 0\n    for i in range(n+1):\n        total += i\n    return total\n\n### Output:\ndef find_sum(n):\n    # base case\n    if n == 0:\n        return 0\n    # recursive case\n    else:\n        return n + find_sum(n-1)"}
{"instruction":"Develop a function to generate a random string using Python.","input":"","output":"import random \nimport string\n\ndef random_string(string_length):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(string_length))\n\nstring_length = 10\nprint(\"Random String of length\", string_length, \"is:\", random_string(string_length))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function to generate a random string using Python.\n\n### Input:\n\n\n### Output:\nimport random \nimport string\n\ndef random_string(string_length):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(string_length))\n\nstring_length = 10\nprint(\"Random String of length\", string_length, \"is:\", random_string(string_length))"}
{"instruction":"Using the input provided, write a Python program to find the longest pattern in the given string.","input":"string = \"abccbaabcabccba\"","output":"def find_longest_pattern(string):\n    \"\"\"Function to find the longest pattern in the given string\"\"\"\n    longest_pattern = \"\"\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            pattern = string[i:j]\n            if pattern == pattern[::-1]:\n                longest_pattern = max(pattern, longest_pattern, key=len)\n    return longest_pattern","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the input provided, write a Python program to find the longest pattern in the given string.\n\n### Input:\nstring = \"abccbaabcabccba\"\n\n### Output:\ndef find_longest_pattern(string):\n    \"\"\"Function to find the longest pattern in the given string\"\"\"\n    longest_pattern = \"\"\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            pattern = string[i:j]\n            if pattern == pattern[::-1]:\n                longest_pattern = max(pattern, longest_pattern, key=len)\n    return longest_pattern"}
{"instruction":"Generate a random number using the built-in function of Python.","input":"","output":"import random\n\nnumber = random.randint(1,100)\nprint(number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random number using the built-in function of Python.\n\n### Input:\n\n\n### Output:\nimport random\n\nnumber = random.randint(1,100)\nprint(number)"}
{"instruction":"Using Python, can you create a function that sorts a list of strings into alphabetical order?","input":"['apple', 'banana', 'pear', 'mango']","output":"def sort_strings(s):\n    return sorted(s)\n\nprint(sort_strings(['apple', 'banana', 'pear', 'mango']))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, can you create a function that sorts a list of strings into alphabetical order?\n\n### Input:\n['apple', 'banana', 'pear', 'mango']\n\n### Output:\ndef sort_strings(s):\n    return sorted(s)\n\nprint(sort_strings(['apple', 'banana', 'pear', 'mango']))"}
{"instruction":"Write a function in Python to extract the domain name from an email address.","input":"test@example.com","output":"def get_domain_name_from_email(email):\n    return email.split('@')[-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to extract the domain name from an email address.\n\n### Input:\ntest@example.com\n\n### Output:\ndef get_domain_name_from_email(email):\n    return email.split('@')[-1]"}
{"instruction":"Create a Python function that takes two webpages and returns True if the pages are similar, and False otherwise.","input":"Not applicable","output":"import requests\nfrom bs4 import BeautifulSoup\n\ndef compare_pages(url1, url2):\n  page1_data = requests.get(url1).text\n  page2_data = requests.get(url2).text\n\n  page1_soup = BeautifulSoup(page1_data, 'html.parser')\n  page2_soup = BeautifulSoup(page2_data, 'html.parser')\n\n  page1_text = page1_soup.get_text()\n  page2_text = page2_soup.get_text()\n\n  # if there are fewer than 3 differences, they are considered similar \n  diffs = 0\n  for i in range(min(len(page1_text), len(page2_text))):\n    if page1_text[i] != page2_text[i]:\n      diffs += 1\n      if diffs > 3:\n        return False\n\n  # if the pages were different length, they are considered different      \n  if len(page1_text) != len(page2_text):\n    return False\n  \n  return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes two webpages and returns True if the pages are similar, and False otherwise.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef compare_pages(url1, url2):\n  page1_data = requests.get(url1).text\n  page2_data = requests.get(url2).text\n\n  page1_soup = BeautifulSoup(page1_data, 'html.parser')\n  page2_soup = BeautifulSoup(page2_data, 'html.parser')\n\n  page1_text = page1_soup.get_text()\n  page2_text = page2_soup.get_text()\n\n  # if there are fewer than 3 differences, they are considered similar \n  diffs = 0\n  for i in range(min(len(page1_text), len(page2_text))):\n    if page1_text[i] != page2_text[i]:\n      diffs += 1\n      if diffs > 3:\n        return False\n\n  # if the pages were different length, they are considered different      \n  if len(page1_text) != len(page2_text):\n    return False\n  \n  return True"}
{"instruction":"Construct a Python script to filter the elements of a given list which are divisible by 3.","input":"[1,2,3,4,5,6,7,8,9]","output":"my_list = [1,2,3,4,5,6,7,8,9]\n\nfiltered_list = list(filter(lambda x: x % 3 == 0, my_list))\nprint(filtered_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python script to filter the elements of a given list which are divisible by 3.\n\n### Input:\n[1,2,3,4,5,6,7,8,9]\n\n### Output:\nmy_list = [1,2,3,4,5,6,7,8,9]\n\nfiltered_list = list(filter(lambda x: x % 3 == 0, my_list))\nprint(filtered_list)"}
{"instruction":"Generate a Python script for displaying the top 10 most used words from any given list of words.","input":"[\"Hello\", \"World\", \"Hello\", \"there\", \"World\", \"Hello\", \"Python\", \"JavaScript\", \"C++\"]","output":"words = [\"Hello\", \"World\", \"Hello\", \"there\", \"World\", \"Hello\", \"Python\", \"JavaScript\", \"C++\"]\n\n# Create a dictionary to store word counts\nword_counts = {}\n\n# Count occurrences of each word\nfor word in words:\n    if word in word_counts:\n        word_counts[word] += 1\n    else:\n        word_counts[word] = 1\n\n# Sort words by count\nword_count_sorted = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n\n# Print top 10 words\ntop_10_words = word_count_sorted[:10]\n\nprint(\"Top 10 words are:\")\nfor word, count in top_10_words:\n    print(f'{word}: {count}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script for displaying the top 10 most used words from any given list of words.\n\n### Input:\n[\"Hello\", \"World\", \"Hello\", \"there\", \"World\", \"Hello\", \"Python\", \"JavaScript\", \"C++\"]\n\n### Output:\nwords = [\"Hello\", \"World\", \"Hello\", \"there\", \"World\", \"Hello\", \"Python\", \"JavaScript\", \"C++\"]\n\n# Create a dictionary to store word counts\nword_counts = {}\n\n# Count occurrences of each word\nfor word in words:\n    if word in word_counts:\n        word_counts[word] += 1\n    else:\n        word_counts[word] = 1\n\n# Sort words by count\nword_count_sorted = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n\n# Print top 10 words\ntop_10_words = word_count_sorted[:10]\n\nprint(\"Top 10 words are:\")\nfor word, count in top_10_words:\n    print(f'{word}: {count}')"}
{"instruction":"Write a function in Python that counts the number of words in the given string.","input":"Example String:\n\"This is a sample string with some words\"","output":"def word_count(str):\n words = str.split()\n return len(words)\n\nprint(word_count(\"This is a sample string with some words\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that counts the number of words in the given string.\n\n### Input:\nExample String:\n\"This is a sample string with some words\"\n\n### Output:\ndef word_count(str):\n words = str.split()\n return len(words)\n\nprint(word_count(\"This is a sample string with some words\"))"}
{"instruction":"Create a python program that outputs a given number of random numbers within a given range","input":"max_num = 100\nnum_of_nums = 10","output":"import random\n\ndef get_n_random_numbers(max_num, num_of_nums):\n    random_numbers = []\n    for _ in range(num_of_nums):\n        random_numbers.append(random.randrange(max_num))\n    return random_numbers","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that outputs a given number of random numbers within a given range\n\n### Input:\nmax_num = 100\nnum_of_nums = 10\n\n### Output:\nimport random\n\ndef get_n_random_numbers(max_num, num_of_nums):\n    random_numbers = []\n    for _ in range(num_of_nums):\n        random_numbers.append(random.randrange(max_num))\n    return random_numbers"}
{"instruction":"Write a Python program that prompts the user for three numbers and prints the mean of those numbers.","input":"Not applicable","output":"def get_mean(a, b, c):\n    return (a + b + c)\/3\n\na = float(input('Enter a number: '))\nb = float(input('Enter a number: '))\nc = float(input('Enter a number: '))\n\nmean = get_mean(a, b, c)\nprint('Mean:', mean)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that prompts the user for three numbers and prints the mean of those numbers.\n\n### Input:\nNot applicable\n\n### Output:\ndef get_mean(a, b, c):\n    return (a + b + c)\/3\n\na = float(input('Enter a number: '))\nb = float(input('Enter a number: '))\nc = float(input('Enter a number: '))\n\nmean = get_mean(a, b, c)\nprint('Mean:', mean)"}
{"instruction":"Generate a Python program that computes the number of posible Binary Search Tree combinations that can be made from a given set of numbers.","input":"numbers=[1,2,3]","output":"def bin_search_tree(numbers): \n    if len(numbers) <= 1: \n        return 1\n  \n    num_of_combinations = 0\n  \n    for i in range(len(numbers)): \n        left_subtree = bin_search_tree(numbers[:i]) \n        right_subtree = bin_search_tree(numbers[i+1:]) \n        num_of_combinations += left_subtree * right_subtree \n  \n    return num_of_combinations","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that computes the number of posible Binary Search Tree combinations that can be made from a given set of numbers.\n\n### Input:\nnumbers=[1,2,3]\n\n### Output:\ndef bin_search_tree(numbers): \n    if len(numbers) <= 1: \n        return 1\n  \n    num_of_combinations = 0\n  \n    for i in range(len(numbers)): \n        left_subtree = bin_search_tree(numbers[:i]) \n        right_subtree = bin_search_tree(numbers[i+1:]) \n        num_of_combinations += left_subtree * right_subtree \n  \n    return num_of_combinations"}
{"instruction":"Design an algorithm in Python that can identify duplicate items in a given array of integers.","input":"[1, 2, 3, 4, 5, 1, 5]","output":"# a function to find duplicate elements\ndef find_duplicate(arr):\n # save the elements in a set\n elements = set()\n \n # loop through the array\n for a in arr:\n # check if the element is already in the set\n if a in elements:\n # if yes, then it is a duplicate\n return a\n \n # if not, then add it to the set\n else:\n elements.add(a)\n \n # if we get here, then there are no duplicates\n return None\n\n# define the array\narr = [1, 2, 3, 4, 5, 1, 5]\n\n# get the duplicate element\nduplicate = find_duplicate(arr)\nprint('Duplicate element:', duplicate)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that can identify duplicate items in a given array of integers.\n\n### Input:\n[1, 2, 3, 4, 5, 1, 5]\n\n### Output:\n# a function to find duplicate elements\ndef find_duplicate(arr):\n # save the elements in a set\n elements = set()\n \n # loop through the array\n for a in arr:\n # check if the element is already in the set\n if a in elements:\n # if yes, then it is a duplicate\n return a\n \n # if not, then add it to the set\n else:\n elements.add(a)\n \n # if we get here, then there are no duplicates\n return None\n\n# define the array\narr = [1, 2, 3, 4, 5, 1, 5]\n\n# get the duplicate element\nduplicate = find_duplicate(arr)\nprint('Duplicate element:', duplicate)"}
{"instruction":"Write Python code to create a JSON object from a given list.","input":"data = [1, 2, 3, 4, 5]","output":"import json\n\ndata = [1, 2, 3, 4, 5]\n\ndata_json = json.dumps(data)\n\nprint(data_json)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to create a JSON object from a given list.\n\n### Input:\ndata = [1, 2, 3, 4, 5]\n\n### Output:\nimport json\n\ndata = [1, 2, 3, 4, 5]\n\ndata_json = json.dumps(data)\n\nprint(data_json)"}
{"instruction":"Create a Python program to generate a 3x3 random pattern of circles and squares.","input":"Not applicable","output":"import numpy as np\nimport random\n\n# Generates a random pattern of circles and squares\ndef generatePattern():\n pattern = np.zeros((3,3))\n for i in range(9):\n  pattern[i\/\/3, i%3] = random.choice([0, 1])\n \n return pattern\n\npattern = generatePattern()\nprint(pattern)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a 3x3 random pattern of circles and squares.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nimport random\n\n# Generates a random pattern of circles and squares\ndef generatePattern():\n pattern = np.zeros((3,3))\n for i in range(9):\n  pattern[i\/\/3, i%3] = random.choice([0, 1])\n \n return pattern\n\npattern = generatePattern()\nprint(pattern)"}
{"instruction":"Create a Python module to read a specific XML schema and return a list of model objects.","input":"","output":"import xml.etree.ElementTree as ET\n\nclass ModelObject:\n    def __init__(self, xml_node):\n        \"\"\"Constructor for ModelObject\n        xml_node should be an ElementTree node of the xml data\n        \"\"\"\n        self.name = xml_node.attrib['name']\n        self.value = xml_node.text\n\ndef read_xml(xml):\n    \"\"\"Reads a given xml and returns a list of ModelObjects\n    \"\"\"\n    root = ET.fromstring(xml)\n    objects = []\n    for node in root.iter('model'):\n        objects.append(ModelObject(node))\n    return objects","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module to read a specific XML schema and return a list of model objects.\n\n### Input:\n\n\n### Output:\nimport xml.etree.ElementTree as ET\n\nclass ModelObject:\n    def __init__(self, xml_node):\n        \"\"\"Constructor for ModelObject\n        xml_node should be an ElementTree node of the xml data\n        \"\"\"\n        self.name = xml_node.attrib['name']\n        self.value = xml_node.text\n\ndef read_xml(xml):\n    \"\"\"Reads a given xml and returns a list of ModelObjects\n    \"\"\"\n    root = ET.fromstring(xml)\n    objects = []\n    for node in root.iter('model'):\n        objects.append(ModelObject(node))\n    return objects"}
{"instruction":"Write code in Python to find the frequency of words in a given string.","input":"String: \"The apple is red and the banana is yellow.\"","output":"str = \"The apple is red and the banana is yellow.\"\nwordfreq = {}\n \nfor rawword in str.lower().split():\n    word = rawword.replace(\".\",\"\")\n    if word not in wordfreq:\n        wordfreq[word] = 0\n    wordfreq[word] += 1\n    \nprint(\"Frequency of the words:\")\nfor key, value in wordfreq.items():\n  print(key, value)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code in Python to find the frequency of words in a given string.\n\n### Input:\nString: \"The apple is red and the banana is yellow.\"\n\n### Output:\nstr = \"The apple is red and the banana is yellow.\"\nwordfreq = {}\n \nfor rawword in str.lower().split():\n    word = rawword.replace(\".\",\"\")\n    if word not in wordfreq:\n        wordfreq[word] = 0\n    wordfreq[word] += 1\n    \nprint(\"Frequency of the words:\")\nfor key, value in wordfreq.items():\n  print(key, value)"}
{"instruction":"Create a basic Python script to connect to a MySQL database and read the records of table \"users\".","input":"Not applicable","output":"import mysql.connector\n\n# Connect to the database\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npasswd=\"yourpassword\",\ndatabase=\"user_db\"\n)\n\n# Get the cursor\nmy_cursor = mydb.cursor()\n\n# Execute the query\nquery = 'SELECT * FROM users'\nmy_cursor.execute(query)\n\n# Get the results\nresult = my_cursor.fetchall()\n\n# Print the results\nfor row in result:\n print(row)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Python script to connect to a MySQL database and read the records of table \"users\".\n\n### Input:\nNot applicable\n\n### Output:\nimport mysql.connector\n\n# Connect to the database\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npasswd=\"yourpassword\",\ndatabase=\"user_db\"\n)\n\n# Get the cursor\nmy_cursor = mydb.cursor()\n\n# Execute the query\nquery = 'SELECT * FROM users'\nmy_cursor.execute(query)\n\n# Get the results\nresult = my_cursor.fetchall()\n\n# Print the results\nfor row in result:\n print(row)"}
{"instruction":"Create a Python script to extract the temperature from a JSON object.","input":"{\n  \"location\": \"Berlin\",\n  \"weather\": {\n    \"temperature\": 17.6\n  }\n}","output":"import json\n\njson_string = '''\n{\n  \"location\": \"Berlin\",\n  \"weather\": {\n    \"temperature\": 17.6\n  }\n}\n'''\n\ndata = json.loads(json_string)\n\ntemperature = data[\"weather\"][\"temperature\"]\nprint(temperature) => 17.6","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to extract the temperature from a JSON object.\n\n### Input:\n{\n  \"location\": \"Berlin\",\n  \"weather\": {\n    \"temperature\": 17.6\n  }\n}\n\n### Output:\nimport json\n\njson_string = '''\n{\n  \"location\": \"Berlin\",\n  \"weather\": {\n    \"temperature\": 17.6\n  }\n}\n'''\n\ndata = json.loads(json_string)\n\ntemperature = data[\"weather\"][\"temperature\"]\nprint(temperature) => 17.6"}
{"instruction":"Generate a python program which prints a formatted list containing the elements from two input lists.","input":"list_1 = [1, 2, 3] \nlist_2 = [4, 5, 6]","output":"def print_list(list_1, list_2): \n    formatted_list = [list_1 + list_2 for i in range(len(list_1))] \n    for x in formatted_list: \n        for y in x: \n            print(y) \n    \nlist_1 = [1, 2, 3] \nlist_2 = [4, 5, 6]\nprint_list(list_1, list_2)\n\n# Output:\n# 1\n# 2\n# 3\n# 4\n# 5\n# 6","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program which prints a formatted list containing the elements from two input lists.\n\n### Input:\nlist_1 = [1, 2, 3] \nlist_2 = [4, 5, 6]\n\n### Output:\ndef print_list(list_1, list_2): \n    formatted_list = [list_1 + list_2 for i in range(len(list_1))] \n    for x in formatted_list: \n        for y in x: \n            print(y) \n    \nlist_1 = [1, 2, 3] \nlist_2 = [4, 5, 6]\nprint_list(list_1, list_2)\n\n# Output:\n# 1\n# 2\n# 3\n# 4\n# 5\n# 6"}
{"instruction":"Please generate a Python script that calculates the mean of a given array of numbers.","input":"[4, 9, 3, 5]","output":"def calculateMean(array):\n    # sum up all elements in the array\n    mean = 0\n    for i in range(len(array)):\n        mean += array[i]\n    # calculate the mean by dividing the sum by number of elements\n    mean \/= len(array)\n    return mean\n\narray = [4, 9, 3, 5]\nmean = calculateMean(array)\nprint(mean)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPlease generate a Python script that calculates the mean of a given array of numbers.\n\n### Input:\n[4, 9, 3, 5]\n\n### Output:\ndef calculateMean(array):\n    # sum up all elements in the array\n    mean = 0\n    for i in range(len(array)):\n        mean += array[i]\n    # calculate the mean by dividing the sum by number of elements\n    mean \/= len(array)\n    return mean\n\narray = [4, 9, 3, 5]\nmean = calculateMean(array)\nprint(mean)"}
{"instruction":"Design a Python program to determine if a number is odd or even.","input":"","output":"def is_even(num):\n if num % 2 == 0:\n return True\n else:\n return False\n\nnumber = int(input(\"Enter a number: \"))\n\nif is_even(number):\n print(\"The number is even\")\nelse:\n print(\"The number is odd\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to determine if a number is odd or even.\n\n### Input:\n\n\n### Output:\ndef is_even(num):\n if num % 2 == 0:\n return True\n else:\n return False\n\nnumber = int(input(\"Enter a number: \"))\n\nif is_even(number):\n print(\"The number is even\")\nelse:\n print(\"The number is odd\")"}
{"instruction":"Create a Python function that sorts the numbers in a given list in ascending order.","input":"[8,3,5,2,9,7]","output":"def sort_list(list):\n    list.sort()\n    return list\n\nif __name__ == \"__main__\":\n    l = [8,3,5,2,9,7]\n    print(sort_list(l))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that sorts the numbers in a given list in ascending order.\n\n### Input:\n[8,3,5,2,9,7]\n\n### Output:\ndef sort_list(list):\n    list.sort()\n    return list\n\nif __name__ == \"__main__\":\n    l = [8,3,5,2,9,7]\n    print(sort_list(l))"}
{"instruction":"Create a Python program to add two numbers.","input":"","output":"def add_numbers(a,b):\n    return a + b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to add two numbers.\n\n### Input:\n\n\n### Output:\ndef add_numbers(a,b):\n    return a + b"}
{"instruction":"Write a Python script to generate a random password with at least 8 characters containing the following characters: lowercase letters, uppercase letters, numbers, and special characters.","input":"Not applicable","output":"import random\nimport string\n\ndef generate_password():\n    pass_characters = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(pass_characters) for i in range(8))\n\nprint(generate_password())\n\n\/\/Output\nsd.V%T8d1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate a random password with at least 8 characters containing the following characters: lowercase letters, uppercase letters, numbers, and special characters.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\nimport string\n\ndef generate_password():\n    pass_characters = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(pass_characters) for i in range(8))\n\nprint(generate_password())\n\n\/\/Output\nsd.V%T8d1"}
{"instruction":"Create a Python program to predict the stock value of a certain company.","input":"","output":"def stock_predictor(company):\n    # Load data \n    data = load_data(company)\n    # Pre-process data\n    data = preprocess(data)\n    # Build the prediction model \n    model = build_model(data)\n    # Make prediction  \n    predicted = model.predict(data)\n    # Return the predictions \n    return predicted","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to predict the stock value of a certain company.\n\n### Input:\n\n\n### Output:\ndef stock_predictor(company):\n    # Load data \n    data = load_data(company)\n    # Pre-process data\n    data = preprocess(data)\n    # Build the prediction model \n    model = build_model(data)\n    # Make prediction  \n    predicted = model.predict(data)\n    # Return the predictions \n    return predicted"}
{"instruction":"Generate code in Python to convert an infix expression into a postfix expression.","input":"","output":"# Function to convert Infix expression to Postfix \ndef infixToPostfix(expression): \n\n# empty list that will store the postfix expression \npostfix = []  \n\n# dictionary containing the precedence value of operators \nprecedence = {'^':3, '*':3, '\/':3, '+':2, '-':2, '(':1} \n\n# Stack to store operators \nstack = [] \n\n# Iterate over the expression for conversion \nfor char in expression: \n\n# If an operand is encountered, add it to the list postfix \nif char not in precedence.keys(): \n  postfix.append(char) \n\n# If left parenthesis is encountered, push it onto the stack \nelif char == '(': \n  stack.append(char) \n\n# If right parenthesis is encountered, pop from the  \n# stack, till the corresponding left parenthesis is not found \n# and append all operators to postfix expression \nelif char == ')': \n  temp = stack.pop() \n  while(temp != '('): \n    postfix.append(temp) \n    temp = stack.pop() \n\n# If an operator is encountered, check which operator  \n# has higher precedence, then pop the higher precedence  \n# operator and add it to the postfix expression, then  \n# push the lower precedence operator onto the stack  \nelse: \n  while(len(stack) != 0 and precedence[char] <= precedence[stack[-1]]): \n    postfix.append(stack.pop()) \n  stack.append(char) \n\n# Pop the remaining operators from the stack and add them  \nwhile len(stack) != 0: \n  postfix.append(stack.pop()) \n\nreturn \"\".join(postfix)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code in Python to convert an infix expression into a postfix expression.\n\n### Input:\n\n\n### Output:\n# Function to convert Infix expression to Postfix \ndef infixToPostfix(expression): \n\n# empty list that will store the postfix expression \npostfix = []  \n\n# dictionary containing the precedence value of operators \nprecedence = {'^':3, '*':3, '\/':3, '+':2, '-':2, '(':1} \n\n# Stack to store operators \nstack = [] \n\n# Iterate over the expression for conversion \nfor char in expression: \n\n# If an operand is encountered, add it to the list postfix \nif char not in precedence.keys(): \n  postfix.append(char) \n\n# If left parenthesis is encountered, push it onto the stack \nelif char == '(': \n  stack.append(char) \n\n# If right parenthesis is encountered, pop from the  \n# stack, till the corresponding left parenthesis is not found \n# and append all operators to postfix expression \nelif char == ')': \n  temp = stack.pop() \n  while(temp != '('): \n    postfix.append(temp) \n    temp = stack.pop() \n\n# If an operator is encountered, check which operator  \n# has higher precedence, then pop the higher precedence  \n# operator and add it to the postfix expression, then  \n# push the lower precedence operator onto the stack  \nelse: \n  while(len(stack) != 0 and precedence[char] <= precedence[stack[-1]]): \n    postfix.append(stack.pop()) \n  stack.append(char) \n\n# Pop the remaining operators from the stack and add them  \nwhile len(stack) != 0: \n  postfix.append(stack.pop()) \n\nreturn \"\".join(postfix)"}
{"instruction":"Create a Python program to encode a given string using the the SHA-256 encryption algorithm.","input":"","output":"import hashlib\ndef encode_string_sha256(string):\n  return hashlib.sha256(string.encode('utf-8')).hexdigest()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to encode a given string using the the SHA-256 encryption algorithm.\n\n### Input:\n\n\n### Output:\nimport hashlib\ndef encode_string_sha256(string):\n  return hashlib.sha256(string.encode('utf-8')).hexdigest()"}
{"instruction":"Write a Python function to enumerate the number of distinct permutations of a given string.","input":"","output":"import math\n\ndef num_of_permutations(string):\n    n = len(string)\n    return math.factorial(n)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to enumerate the number of distinct permutations of a given string.\n\n### Input:\n\n\n### Output:\nimport math\n\ndef num_of_permutations(string):\n    n = len(string)\n    return math.factorial(n)"}
{"instruction":"Create a function in Python that takes an integer route x as input and returns all possible subsequences of length x.","input":"x = 2","output":"def subsequences(x):\n subs = []\n for i in range(1<<x):\n sub = []\n for j in range(x):\n if (i & (1 << j)) > 0:\n sub.append(j)\n subs.append(sub)\n return subs","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes an integer route x as input and returns all possible subsequences of length x.\n\n### Input:\nx = 2\n\n### Output:\ndef subsequences(x):\n subs = []\n for i in range(1<<x):\n sub = []\n for j in range(x):\n if (i & (1 << j)) > 0:\n sub.append(j)\n subs.append(sub)\n return subs"}
{"instruction":"Implement the quick sort algorithm in Python.","input":"","output":"def quick_sort(array):\n    if len(array) == 0 or len(array) == 1:\n        return array\n    \n    pivot = array[0]\n    left = []\n    right = []\n    \n    for i in range(1, len(array)):\n        if array[i] <= pivot:\n            left.append(array[i])\n        else:\n            right.append(array[i])\n    \n    left = quick_sort(left)\n    right = quick_sort(right)\n    \n    return left + [pivot] + right","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement the quick sort algorithm in Python.\n\n### Input:\n\n\n### Output:\ndef quick_sort(array):\n    if len(array) == 0 or len(array) == 1:\n        return array\n    \n    pivot = array[0]\n    left = []\n    right = []\n    \n    for i in range(1, len(array)):\n        if array[i] <= pivot:\n            left.append(array[i])\n        else:\n            right.append(array[i])\n    \n    left = quick_sort(left)\n    right = quick_sort(right)\n    \n    return left + [pivot] + right"}
{"instruction":"Edit the following python code to print all the elements of a list that are divisible by 7.","input":"my_list = [14, 35, 42, 49, 56, 63, 70]","output":"my_list = [14, 35, 42, 49, 56, 63, 70]\n\nfor element in my_list:\n if element % 7 == 0:\n print(element) \n  \n# Output:\n14\n \n42\n \n49\n \n56\n \n63\n \n70","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following python code to print all the elements of a list that are divisible by 7.\n\n### Input:\nmy_list = [14, 35, 42, 49, 56, 63, 70]\n\n### Output:\nmy_list = [14, 35, 42, 49, 56, 63, 70]\n\nfor element in my_list:\n if element % 7 == 0:\n print(element) \n  \n# Output:\n14\n \n42\n \n49\n \n56\n \n63\n \n70"}
{"instruction":"Write a Python function to check if a number between 0 and 1000 is prime or not.","input":"","output":"def is_prime(num):\n    #Make sure the number is greater than or equal to 2 \n    if num < 2:\n        return False \n    # Check whether the number is divisible by any other number \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    # If it is not divisible by any number, it is a prime number\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to check if a number between 0 and 1000 is prime or not.\n\n### Input:\n\n\n### Output:\ndef is_prime(num):\n    #Make sure the number is greater than or equal to 2 \n    if num < 2:\n        return False \n    # Check whether the number is divisible by any other number \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    # If it is not divisible by any number, it is a prime number\n    return True"}
{"instruction":"Create an algorithm in Python that takes an array of strings and removes all duplicates","input":"['Apple', 'Orange', 'Apple', 'Mango', 'Banana', 'Mango']","output":"input_array = ['Apple', 'Orange', 'Apple', 'Mango', 'Banana', 'Mango']\n\nunique_array = []\nfor item in input_array:\n if item not in unique_array:\n unique_array.append(item)\n\nprint(unique_array) #['Apple', 'Orange', 'Mango', 'Banana']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that takes an array of strings and removes all duplicates\n\n### Input:\n['Apple', 'Orange', 'Apple', 'Mango', 'Banana', 'Mango']\n\n### Output:\ninput_array = ['Apple', 'Orange', 'Apple', 'Mango', 'Banana', 'Mango']\n\nunique_array = []\nfor item in input_array:\n if item not in unique_array:\n unique_array.append(item)\n\nprint(unique_array) #['Apple', 'Orange', 'Mango', 'Banana']"}
{"instruction":"Construct an algorithm in Python to sort the elements of an array in decreasing order.","input":"[4, 7, 1, 3, 5, 2]","output":"def sortDecreasing(arr):\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] < arr[j]: \n                arr[i], arr[j] = arr[j], arr[i] \n    return arr\narr = [4, 7, 1, 3, 5, 2]\nprint(sortDecreasing(arr))\n\n# Output: [7, 5, 4, 3, 2, 1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm in Python to sort the elements of an array in decreasing order.\n\n### Input:\n[4, 7, 1, 3, 5, 2]\n\n### Output:\ndef sortDecreasing(arr):\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] < arr[j]: \n                arr[i], arr[j] = arr[j], arr[i] \n    return arr\narr = [4, 7, 1, 3, 5, 2]\nprint(sortDecreasing(arr))\n\n# Output: [7, 5, 4, 3, 2, 1]"}
{"instruction":"Create a program to calculate the Fibonacci number for a given number using Python.","input":"Not applicable","output":"def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n  \n# Driver Program \nprint(Fibonacci(9))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to calculate the Fibonacci number for a given number using Python.\n\n### Input:\nNot applicable\n\n### Output:\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n  \n# Driver Program \nprint(Fibonacci(9))"}
{"instruction":"Create a machine learning model in Python that can categorize voice commands.","input":"['Turn on the light', 'Turn off the fan', 'Activate the AC']","output":"#Import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Prepare a dataset\ndataset = [['Turn on the light', 'Light'], ['Turn off the fan', 'Fan'], ['Activate the AC', 'AC']]\ndataframe = pd.DataFrame(dataset, columns=['Message', 'Category'])\n\n# Split the data into features and labels\nX = dataframe.drop(columns=['Category'])\ny = dataframe['Category']\n\n# Separate training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1)\n\n# Create a model and fit it\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# Test the model\ny_pred = model.predict(X_test)\nprint(y_pred)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python that can categorize voice commands.\n\n### Input:\n['Turn on the light', 'Turn off the fan', 'Activate the AC']\n\n### Output:\n#Import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Prepare a dataset\ndataset = [['Turn on the light', 'Light'], ['Turn off the fan', 'Fan'], ['Activate the AC', 'AC']]\ndataframe = pd.DataFrame(dataset, columns=['Message', 'Category'])\n\n# Split the data into features and labels\nX = dataframe.drop(columns=['Category'])\ny = dataframe['Category']\n\n# Separate training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1)\n\n# Create a model and fit it\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# Test the model\ny_pred = model.predict(X_test)\nprint(y_pred)"}
{"instruction":"Implement a sorting algorithm in Python for an array of 10 numbers.","input":"[4, 2, 9, 6, 1, 7, 10, 5, 8, 3]","output":"def sort(arr):\n #loop over the array and compare every item \n for i in range(len(arr)):\n  minIdx = i\n  # Compare with each element after current item\n  for j in range(i + 1, len(arr)):\n  if arr[j] < arr[minIdx]:\n   minIdx = j\n  # Swap the found minimum element with current minimum \n  arr[i], arr[minIdx] = arr[minIdx], arr[i]\n\n return arr\n\nprint(sort([4, 2, 9, 6, 1, 7, 10, 5, 8, 3]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a sorting algorithm in Python for an array of 10 numbers.\n\n### Input:\n[4, 2, 9, 6, 1, 7, 10, 5, 8, 3]\n\n### Output:\ndef sort(arr):\n #loop over the array and compare every item \n for i in range(len(arr)):\n  minIdx = i\n  # Compare with each element after current item\n  for j in range(i + 1, len(arr)):\n  if arr[j] < arr[minIdx]:\n   minIdx = j\n  # Swap the found minimum element with current minimum \n  arr[i], arr[minIdx] = arr[minIdx], arr[i]\n\n return arr\n\nprint(sort([4, 2, 9, 6, 1, 7, 10, 5, 8, 3]))"}
{"instruction":"Write a Python program to generate a random set of numbers, with each number ranging from 1 to 10","input":"","output":"import random\n\ndef generate_random_numbers():\n  results = []\n  for i in range(10):\n    results.append(random.randint(1, 10))\n\n  return results\n  \nif __name__ == \"__main__\":\n  print(generate_random_numbers())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a random set of numbers, with each number ranging from 1 to 10\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_random_numbers():\n  results = []\n  for i in range(10):\n    results.append(random.randint(1, 10))\n\n  return results\n  \nif __name__ == \"__main__\":\n  print(generate_random_numbers())"}
{"instruction":"Create a python program to calculate the value of 'x' in the equation \"y = 4x + 7\".","input":"y = 17","output":"y = 17\nx = (y - 7) \/ 4\nprint(\"x =\", x)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to calculate the value of 'x' in the equation \"y = 4x + 7\".\n\n### Input:\ny = 17\n\n### Output:\ny = 17\nx = (y - 7) \/ 4\nprint(\"x =\", x)"}
{"instruction":"Generate a bash script to run a given python code.","input":"filename: fib\n\ncontent:\n\ndef fib(n): \n    # F(n) = F(n-1) + F(n-2) \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==0: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==1: \n        return 1\n    else: \n        return fib(n-1)+fib(n-2)","output":"#!\/bin\/bash\nif [[ $1 -lt 0  ]]\n   then echo \"Incorrect input\"\nfi\npython3 fib.py $1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a bash script to run a given python code.\n\n### Input:\nfilename: fib\n\ncontent:\n\ndef fib(n): \n    # F(n) = F(n-1) + F(n-2) \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==0: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==1: \n        return 1\n    else: \n        return fib(n-1)+fib(n-2)\n\n### Output:\n#!\/bin\/bash\nif [[ $1 -lt 0  ]]\n   then echo \"Incorrect input\"\nfi\npython3 fib.py $1"}
{"instruction":"Design a function in Python to remove all occurrences of a given number from a given list.","input":"[1, 7, 3, 1, 4, 7, 9], 7","output":"def remove_num(lst, num):\n  return [n for n in lst if n != num]\n\nprint(remove_num([1, 7, 3, 1, 4, 7, 9], 7))  # [1, 3, 1, 4, 9]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to remove all occurrences of a given number from a given list.\n\n### Input:\n[1, 7, 3, 1, 4, 7, 9], 7\n\n### Output:\ndef remove_num(lst, num):\n  return [n for n in lst if n != num]\n\nprint(remove_num([1, 7, 3, 1, 4, 7, 9], 7))  # [1, 3, 1, 4, 9]"}
{"instruction":"Create a Python Flask application with a REST API. The API should include endpoints for GET and POST requests to retrieve user data from a database and store them in a database respectively.","input":"Not applicable","output":"from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('\/users', methods=['GET', 'POST'])\ndef user_data():\n if request.method == 'GET':\n # Retrieve user data from the database\n return jsonify({'users': []})\n\n if request.method == 'POST':\n # Store user data in the database\n return jsonify({'message': 'success'})\n\nif __name__ == '__main__':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python Flask application with a REST API. The API should include endpoints for GET and POST requests to retrieve user data from a database and store them in a database respectively.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('\/users', methods=['GET', 'POST'])\ndef user_data():\n if request.method == 'GET':\n # Retrieve user data from the database\n return jsonify({'users': []})\n\n if request.method == 'POST':\n # Store user data in the database\n return jsonify({'message': 'success'})\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"instruction":"Implement a python code that yields the factorial of a given number.","input":"","output":"def factorial(n):\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact * i\n    return fact","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a python code that yields the factorial of a given number.\n\n### Input:\n\n\n### Output:\ndef factorial(n):\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact * i\n    return fact"}
{"instruction":"Perform a sentiment analysis on a body of text using Python.","input":"text = \"This is a very positive sentiment!\"","output":"import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ntext = \"This is a very positive sentiment!\"\nsentiment_analyzer = SentimentIntensityAnalyzer()\nscores = sentiment_analyzer.polarity_scores(text)\n\nif scores['compound'] > 0.05:\n print(\"Positive sentiment!\")\nelse:\n print(\"Negative sentiment!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPerform a sentiment analysis on a body of text using Python.\n\n### Input:\ntext = \"This is a very positive sentiment!\"\n\n### Output:\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ntext = \"This is a very positive sentiment!\"\nsentiment_analyzer = SentimentIntensityAnalyzer()\nscores = sentiment_analyzer.polarity_scores(text)\n\nif scores['compound'] > 0.05:\n print(\"Positive sentiment!\")\nelse:\n print(\"Negative sentiment!\")"}
{"instruction":"Create a reinforcement learning environment in Python that teaches an agent to navigate through a simple gridworld.","input":"Not applicable","output":"import numpy as np\n\n# define the environment\nclass Gridworld:\n def __init__(self, size=4):\n self.size = size\n self.reset()\n \n def reset(self):\n # reset the environment\n self.state = np.zeros((self.size, self.size))\n self.done = False\n self.reward = 0\n \n # define states\n self.state[3,3] = 1\n self.current_state = [0,0]\n \n # define actions\n self.action_space = {0: 'up',\n 1: 'down',\n 2: 'left',\n 3: 'right'}\n \n # define the rewards\n self.reward_space = {'win': 1, 'loss': -1, 'tie': 0}\n \n def step(self, action):\n # take an action in the environment\n reward = 0\n done = False\n # calculate next state\n current_state = self.current_state\n if action == 0:\n next_state = [current_state[0] - 1, current_state[1]]\n elif action == 1:\n next_state = [current_state[0] + 1, current_state[1]]\n elif action == 2:\n next_state = [current_state[0], current_state[1] - 1]\n elif action == 3:\n next_state = [current_state[0], current_state[1] + 1]\n else:\n pass\n \n # check for rewards\n if self.state[next_state[0], next_state[1]] == 1:\n reward = self.reward_space['win']\n self.done = True\n elif (next_state[0] < 0 or next_state[0] >= self.size) or (next_state[1] < 0 or next_state[1] >= self.size):\n # reward for out of bounds penalty\n reward = self.reward_space['loss']\n self.done = True\n \n # update state\n self.state[current_state[0], current_state[1]] = 0\n self.state[next_state[0], next_state[1]] = 1\n self.current_state = next_state\n \n # return state, reward, and done\n return self.state, reward, self.done","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a reinforcement learning environment in Python that teaches an agent to navigate through a simple gridworld.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\n\n# define the environment\nclass Gridworld:\n def __init__(self, size=4):\n self.size = size\n self.reset()\n \n def reset(self):\n # reset the environment\n self.state = np.zeros((self.size, self.size))\n self.done = False\n self.reward = 0\n \n # define states\n self.state[3,3] = 1\n self.current_state = [0,0]\n \n # define actions\n self.action_space = {0: 'up',\n 1: 'down',\n 2: 'left',\n 3: 'right'}\n \n # define the rewards\n self.reward_space = {'win': 1, 'loss': -1, 'tie': 0}\n \n def step(self, action):\n # take an action in the environment\n reward = 0\n done = False\n # calculate next state\n current_state = self.current_state\n if action == 0:\n next_state = [current_state[0] - 1, current_state[1]]\n elif action == 1:\n next_state = [current_state[0] + 1, current_state[1]]\n elif action == 2:\n next_state = [current_state[0], current_state[1] - 1]\n elif action == 3:\n next_state = [current_state[0], current_state[1] + 1]\n else:\n pass\n \n # check for rewards\n if self.state[next_state[0], next_state[1]] == 1:\n reward = self.reward_space['win']\n self.done = True\n elif (next_state[0] < 0 or next_state[0] >= self.size) or (next_state[1] < 0 or next_state[1] >= self.size):\n # reward for out of bounds penalty\n reward = self.reward_space['loss']\n self.done = True\n \n # update state\n self.state[current_state[0], current_state[1]] = 0\n self.state[next_state[0], next_state[1]] = 1\n self.current_state = next_state\n \n # return state, reward, and done\n return self.state, reward, self.done"}
{"instruction":"Generate a Python program that searches for a given key in a dictionary.","input":"key: 'name'","output":"my_dict = {\n 'name': 'John',\n 'age': 26,\n 'salary': 5000\n}\n\nfind_key = 'name'\n\nif find_key in my_dict:\n print(my_dict[find_key])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that searches for a given key in a dictionary.\n\n### Input:\nkey: 'name'\n\n### Output:\nmy_dict = {\n 'name': 'John',\n 'age': 26,\n 'salary': 5000\n}\n\nfind_key = 'name'\n\nif find_key in my_dict:\n print(my_dict[find_key])"}
{"instruction":"Design a Python function to evaluate the number of underlying characters in a string.","input":"","output":"def getNumberOfChars(String):\n    total_len = 0\n    for word in string.split():\n        total_len += len(word)\n    return total_len","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python function to evaluate the number of underlying characters in a string.\n\n### Input:\n\n\n### Output:\ndef getNumberOfChars(String):\n    total_len = 0\n    for word in string.split():\n        total_len += len(word)\n    return total_len"}
{"instruction":"Code a program in Python to convert a text into its corresponding binary representation.","input":"Text: Hello World!","output":"def bin_from_text(text):\n    bin_text = \"\"\n    for char in text:\n        bin_text += bin(ord(char)).lstrip(\"0b\") + \" \"\n    return bin_text","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a program in Python to convert a text into its corresponding binary representation.\n\n### Input:\nText: Hello World!\n\n### Output:\ndef bin_from_text(text):\n    bin_text = \"\"\n    for char in text:\n        bin_text += bin(ord(char)).lstrip(\"0b\") + \" \"\n    return bin_text"}
{"instruction":"Compile the following Python code using Python 3.","input":"print(\"Hello, World!\")","output":"python3 hello.py\n# output: Hello, World!","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompile the following Python code using Python 3.\n\n### Input:\nprint(\"Hello, World!\")\n\n### Output:\npython3 hello.py\n# output: Hello, World!"}
{"instruction":"Provide a valid Python class definition that uses the below given values.","input":"Class_name = 'Automobile'\n attributes  = 'speed' , 'color'\n methods = 'set_speed', 'set_color'","output":"class Automobile:\n    def __init__(self, speed, color):\n        self.speed = speed\n        self.color = color\n\n    def set_speed(self, speed):\n        self.speed = speed\n    \n    def set_color(self, color):\n        self.color = color","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProvide a valid Python class definition that uses the below given values.\n\n### Input:\nClass_name = 'Automobile'\n attributes  = 'speed' , 'color'\n methods = 'set_speed', 'set_color'\n\n### Output:\nclass Automobile:\n    def __init__(self, speed, color):\n        self.speed = speed\n        self.color = color\n\n    def set_speed(self, speed):\n        self.speed = speed\n    \n    def set_color(self, color):\n        self.color = color"}
{"instruction":"Write a code to check for a cycle in a linked list.","input":"","output":"# Python program to detect loop in a linked list \n# Node class \nclass Node: \n\t# Constructor to initialize the node object \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\t\nclass LinkedList: \n\t# Function to initialize head \n\tdef __init__(self): \n\t\tself.head = None\n\t\n\t# Function to insert a new node at the beginning \n\tdef push(self, new_data): \n\t\tnew_node = Node(new_data) \n\t\tnew_node.next = self.head \n\t\tself.head = new_node \n\n\t# Utility function to print it the linked LinkedList \n\tdef printList(self): \n\t\ttemp = self.head \n\t\twhile(temp): \n\t\t\tprint temp.data, \n\t\t\ttemp = temp.next\n\n\tdef detect_loop(self): \n\t\tslow_p = self.head \n\t\tfast_p = self.head \n\n\t\twhile(slow_p and fast_p and fast_p.next): \n\t\t\tslow_p = slow_p.next\n\t\t\tfast_p = fast_p.next.next\n\t\t\tif slow_p == fast_p: \n\t\t\t\tprint \"Found Loop\"\n\t\t\t\treturn\n\n# Driver program for testing \nllist = LinkedList() \nllist.push(20) \nllist.push(4) \nllist.push(15) \nllist.push(10) \n\n# Create a loop for testing \nllist.head.next.next.next.next = llist.head \n\nllist.detect_loop()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to check for a cycle in a linked list.\n\n### Input:\n\n\n### Output:\n# Python program to detect loop in a linked list \n# Node class \nclass Node: \n\t# Constructor to initialize the node object \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\t\nclass LinkedList: \n\t# Function to initialize head \n\tdef __init__(self): \n\t\tself.head = None\n\t\n\t# Function to insert a new node at the beginning \n\tdef push(self, new_data): \n\t\tnew_node = Node(new_data) \n\t\tnew_node.next = self.head \n\t\tself.head = new_node \n\n\t# Utility function to print it the linked LinkedList \n\tdef printList(self): \n\t\ttemp = self.head \n\t\twhile(temp): \n\t\t\tprint temp.data, \n\t\t\ttemp = temp.next\n\n\tdef detect_loop(self): \n\t\tslow_p = self.head \n\t\tfast_p = self.head \n\n\t\twhile(slow_p and fast_p and fast_p.next): \n\t\t\tslow_p = slow_p.next\n\t\t\tfast_p = fast_p.next.next\n\t\t\tif slow_p == fast_p: \n\t\t\t\tprint \"Found Loop\"\n\t\t\t\treturn\n\n# Driver program for testing \nllist = LinkedList() \nllist.push(20) \nllist.push(4) \nllist.push(15) \nllist.push(10) \n\n# Create a loop for testing \nllist.head.next.next.next.next = llist.head \n\nllist.detect_loop()"}
{"instruction":"Write a Python program to swap keys and values in a given dictionary.","input":"","output":"def swap_dict_keys_values(d):\n  d_new = dict()\n  for key, value in d.items():\n    d_new.setdefault(value,[]).append(key)\n  return d_new","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to swap keys and values in a given dictionary.\n\n### Input:\n\n\n### Output:\ndef swap_dict_keys_values(d):\n  d_new = dict()\n  for key, value in d.items():\n    d_new.setdefault(value,[]).append(key)\n  return d_new"}
{"instruction":"Write a Python program that takes the following dictionary as an argument and returns the count of each item","input":"{\"apples\": 5, \"oranges\": 6, \"bananas\": 7}","output":"def item_counts(fruits):\n    counts = {}\n    for k, v in fruits.items():\n        counts[k] = v\n    return counts","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes the following dictionary as an argument and returns the count of each item\n\n### Input:\n{\"apples\": 5, \"oranges\": 6, \"bananas\": 7}\n\n### Output:\ndef item_counts(fruits):\n    counts = {}\n    for k, v in fruits.items():\n        counts[k] = v\n    return counts"}
{"instruction":"Given a Python dictionary, find the most common value in the dictionary and print it out.","input":"d = {\u2018python\u2019: 20, \u2018java\u2019: 10, \u2018c++\u2019: 15, \u2018C#\u2019: 15}","output":"from collections import Counter \n\nd = {\u2018python\u2019: 20, \u2018java\u2019: 10, \u2018c++\u2019: 15, \u2018C#\u2019: 15}\n\n#Get most common value\ndata = Counter(d) \nmost_common_value = data.most_common(1)[0][0]  \n\n#Print out most common value\nprint(most_common_value)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a Python dictionary, find the most common value in the dictionary and print it out.\n\n### Input:\nd = {\u2018python\u2019: 20, \u2018java\u2019: 10, \u2018c++\u2019: 15, \u2018C#\u2019: 15}\n\n### Output:\nfrom collections import Counter \n\nd = {\u2018python\u2019: 20, \u2018java\u2019: 10, \u2018c++\u2019: 15, \u2018C#\u2019: 15}\n\n#Get most common value\ndata = Counter(d) \nmost_common_value = data.most_common(1)[0][0]  \n\n#Print out most common value\nprint(most_common_value)"}
{"instruction":"Design a class in Python to store the customer information.","input":"","output":"class Customer:\n def __init__(self, customer_id, customer_name, customer_address):\n self.customer_id= customer_id\n self.customer_name = customer_name\n self.customer_address = customer_address","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python to store the customer information.\n\n### Input:\n\n\n### Output:\nclass Customer:\n def __init__(self, customer_id, customer_name, customer_address):\n self.customer_id= customer_id\n self.customer_name = customer_name\n self.customer_address = customer_address"}
{"instruction":"Create a Python script that fills in the missing data with median values.","input":"[1, None, 4, 5, None, 10]","output":"import numpy as np\n\ndef fillWithMedian(data):\n    data = np.array(data)\n    median_val = np.nanmedian(data)\n    data[np.isnan(data)] = median_val \n    return data\n\ndata = [1, None, 4, 5, None, 10]\nprint(fillWithMedian(data))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that fills in the missing data with median values.\n\n### Input:\n[1, None, 4, 5, None, 10]\n\n### Output:\nimport numpy as np\n\ndef fillWithMedian(data):\n    data = np.array(data)\n    median_val = np.nanmedian(data)\n    data[np.isnan(data)] = median_val \n    return data\n\ndata = [1, None, 4, 5, None, 10]\nprint(fillWithMedian(data))"}
{"instruction":"Create a program in Python that takes a URL as input and prints out all the links (href) that appear in the page.","input":"Not applicable","output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http:\/\/www.example.com'\n\nhtml = requests.get(url).text\nsoup = BeautifulSoup(html, 'html.parser')\n\nfor link in soup.find_all('a'):\n print(link.get('href'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes a URL as input and prints out all the links (href) that appear in the page.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http:\/\/www.example.com'\n\nhtml = requests.get(url).text\nsoup = BeautifulSoup(html, 'html.parser')\n\nfor link in soup.find_all('a'):\n print(link.get('href'))"}
{"instruction":"Create a Python program that takes a positive integer as input and returns the Fibonacci sequence up to the given number.","input":"10","output":"def fibonacci(n):\n  fib = [0, 1]\n  for i in range(2,n):\n    fib.append(fib[i-2] + fib[i-1])\n  return fib[:n]\n\nfibonacciSequence = fibonacci(10)\nprint(fibonacciSequence)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a positive integer as input and returns the Fibonacci sequence up to the given number.\n\n### Input:\n10\n\n### Output:\ndef fibonacci(n):\n  fib = [0, 1]\n  for i in range(2,n):\n    fib.append(fib[i-2] + fib[i-1])\n  return fib[:n]\n\nfibonacciSequence = fibonacci(10)\nprint(fibonacciSequence)"}
{"instruction":"Classify the following sentence, \u201cThe car is a Ford Mustang\u201d, by building a classification model using Python.","input":"","output":"import pandas as pd \nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.svm import SVC\n\n# Read the data\ndata = [[\"The car is a Ford Mustang\", \"Ford Mustang\"]]\ndf = pd.DataFrame(data, columns=['sentence', 'class'])\n\n# Vectorizing the sentence \nvectorizer = TfidfVectorizer() \nX = vectorizer.fit_transform(df['sentence'])\n\n# Training the classifier \nclassifier = SVC()\nclassifier.fit(X, df['class'])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nClassify the following sentence, \u201cThe car is a Ford Mustang\u201d, by building a classification model using Python.\n\n### Input:\n\n\n### Output:\nimport pandas as pd \nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.svm import SVC\n\n# Read the data\ndata = [[\"The car is a Ford Mustang\", \"Ford Mustang\"]]\ndf = pd.DataFrame(data, columns=['sentence', 'class'])\n\n# Vectorizing the sentence \nvectorizer = TfidfVectorizer() \nX = vectorizer.fit_transform(df['sentence'])\n\n# Training the classifier \nclassifier = SVC()\nclassifier.fit(X, df['class'])"}
{"instruction":"Design a chatbot agent in Python.","input":"","output":"class Chatbot:\n    def __init__(self, name):\n        self.name = name\n \n    def greet(self):\n        print(\"Hey there! I'm {}. What's your name?\".format(self.name))\n \n    def handle_input(self, user_input):\n        if user_input == \"Hi\":\n            print(\"Hi there! What can I do for you?\")\n        elif user_input == \"Bye\":\n            print(\"Bye! Have a great day!\")\n        else:\n            print(\"I'm sorry, I don't understand.\")\n \nbot = Chatbot(\"Python Bot\")\nbot.greet()\nbot.handle_input(\"Hi\")\nbot.handle_input(\"Bye\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a chatbot agent in Python.\n\n### Input:\n\n\n### Output:\nclass Chatbot:\n    def __init__(self, name):\n        self.name = name\n \n    def greet(self):\n        print(\"Hey there! I'm {}. What's your name?\".format(self.name))\n \n    def handle_input(self, user_input):\n        if user_input == \"Hi\":\n            print(\"Hi there! What can I do for you?\")\n        elif user_input == \"Bye\":\n            print(\"Bye! Have a great day!\")\n        else:\n            print(\"I'm sorry, I don't understand.\")\n \nbot = Chatbot(\"Python Bot\")\nbot.greet()\nbot.handle_input(\"Hi\")\nbot.handle_input(\"Bye\")"}
{"instruction":"Write a Python program to convert a given time in 12 hour format to 24 hour format.","input":"12:05 PM","output":"def convert_to_24(time):\n    if time[-2:] == \"PM\" and time[:2] != \"12\":\n        return str(int(time[:2])+12)+time[2:-2]\n    elif time[-2:] == \"AM\" and time[:2] == \"12\":\n        return \"00\"+time[2:-2]\n    else:\n        return time[:-2]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a given time in 12 hour format to 24 hour format.\n\n### Input:\n12:05 PM\n\n### Output:\ndef convert_to_24(time):\n    if time[-2:] == \"PM\" and time[:2] != \"12\":\n        return str(int(time[:2])+12)+time[2:-2]\n    elif time[-2:] == \"AM\" and time[:2] == \"12\":\n        return \"00\"+time[2:-2]\n    else:\n        return time[:-2]"}
{"instruction":"Construct an algorithm in python that evaluates whether a number is an Armstrong number (371 is an Armstrong number where 3<sup>3<\/sup> + 7<sup>3<\/sup> + 1<sup>3<\/sup> = 371)","input":"371","output":"def isArmstrong(num): \n  \n    temp = num \n    sum = 0 \n  \n    while temp > 0: \n        digit = temp % 10\n        sum += digit ** 3\n        temp \/\/= 10\n  \n    if num == sum:\n        return True \n    else:\n        return False\n\nif __name__ == \"__main__\":\n    num = 371\n    result = isArmstrong(num)\n    if result == True:\n        print(f\"{num} is an Armstrong number\")\n    else:\n        print(f\"{num} is not an Armstrong number\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm in python that evaluates whether a number is an Armstrong number (371 is an Armstrong number where 3<sup>3<\/sup> + 7<sup>3<\/sup> + 1<sup>3<\/sup> = 371)\n\n### Input:\n371\n\n### Output:\ndef isArmstrong(num): \n  \n    temp = num \n    sum = 0 \n  \n    while temp > 0: \n        digit = temp % 10\n        sum += digit ** 3\n        temp \/\/= 10\n  \n    if num == sum:\n        return True \n    else:\n        return False\n\nif __name__ == \"__main__\":\n    num = 371\n    result = isArmstrong(num)\n    if result == True:\n        print(f\"{num} is an Armstrong number\")\n    else:\n        print(f\"{num} is not an Armstrong number\")"}
{"instruction":"Create a Python program to calculate a loan's monthly payments.","input":"Loan amount: 10000,\nAnnual interest rate: 5.5%,\nLoan period: 5 years","output":"def loan_payment(loan_amt, annual_interest_rate, loan_period):\n  # convert the interest rate to a decimal\n  interest_rate = annual_interest_rate \/ 100\n\n  # calculate the monthly interest rate\n  monthly_interest_rate = interest_rate\/12\n\n  # calculate the total number of payments\n  total_payments = loan_period * 12\n\n  # calculate the monthly payments\n  monthly_payment = loan_amt*(monthly_interest_rate\/(1\\\n          -(1+monthly_interest_rate)**(-total_payments)))\n\n  return monthly_payment\n\n#print the result \nprint(loan_payment(10000, 5.5, 5))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate a loan's monthly payments.\n\n### Input:\nLoan amount: 10000,\nAnnual interest rate: 5.5%,\nLoan period: 5 years\n\n### Output:\ndef loan_payment(loan_amt, annual_interest_rate, loan_period):\n  # convert the interest rate to a decimal\n  interest_rate = annual_interest_rate \/ 100\n\n  # calculate the monthly interest rate\n  monthly_interest_rate = interest_rate\/12\n\n  # calculate the total number of payments\n  total_payments = loan_period * 12\n\n  # calculate the monthly payments\n  monthly_payment = loan_amt*(monthly_interest_rate\/(1\\\n          -(1+monthly_interest_rate)**(-total_payments)))\n\n  return monthly_payment\n\n#print the result \nprint(loan_payment(10000, 5.5, 5))"}
{"instruction":"Create a python function to take a list of numbers as an argument, and return the sum of the odd numbers in the list","input":"[2, 3, 4, 5, 6, 7]","output":"def odd_numbers(numbers):\n    result = 0 \n    for num in numbers: \n        if num % 2 != 0:\n            result += num\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function to take a list of numbers as an argument, and return the sum of the odd numbers in the list\n\n### Input:\n[2, 3, 4, 5, 6, 7]\n\n### Output:\ndef odd_numbers(numbers):\n    result = 0 \n    for num in numbers: \n        if num % 2 != 0:\n            result += num\n    return result"}
{"instruction":"Create a Python function to sort a list of tuples by the second item in the tuple.","input":"my_list = [('a', 3), ('b', 2), ('c', 1)]","output":"def sort_by_second_item(my_list): \n    return sorted(my_list, key = lambda x: x[1])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to sort a list of tuples by the second item in the tuple.\n\n### Input:\nmy_list = [('a', 3), ('b', 2), ('c', 1)]\n\n### Output:\ndef sort_by_second_item(my_list): \n    return sorted(my_list, key = lambda x: x[1])"}
{"instruction":"Construct a Python class with the following atributes and methods.","input":"Attributes: name, ID\nMethods: setName, setID, getName, getID","output":"class MyClass:\n    def __init__(self):\n        self.name = \"\"\n        self.ID = 0\n \n    def setName(self, name):\n        self.name = name\n    \n    def setID(self, ID):\n        self.ID = ID\n \n    def getName(self):\n        return self.name\n \n    def getID(self):\n        return self.ID","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python class with the following atributes and methods.\n\n### Input:\nAttributes: name, ID\nMethods: setName, setID, getName, getID\n\n### Output:\nclass MyClass:\n    def __init__(self):\n        self.name = \"\"\n        self.ID = 0\n \n    def setName(self, name):\n        self.name = name\n    \n    def setID(self, ID):\n        self.ID = ID\n \n    def getName(self):\n        return self.name\n \n    def getID(self):\n        return self.ID"}
{"instruction":"Create a Python script for the following design task.","input":"Design a web page containing a simple form with two input fields and one output field where users can enter data and generate a basic bar chart with their data.","output":"import matplotlib.pyplot as plt\nimport streamlit as st\n\nst.title('Data Visualization App') \nst.header('Create a Bar Chart')\n\n# Get user input\nx_labels = st.text_input('Enter data separated by comma for x-axis:')\ny_values = st.text_input('Enter data separated by comma for y-axis:')\n\n# Convert the data to list\nx_list = x_labels.split(\",\")\ny_list = [int(i) for i in y_values.split(\",\")]\n\n# Draw the chart\nplt.bar(x_list, y_list)\n\n# Render the chart with matplotlib\nst.pyplot()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for the following design task.\n\n### Input:\nDesign a web page containing a simple form with two input fields and one output field where users can enter data and generate a basic bar chart with their data.\n\n### Output:\nimport matplotlib.pyplot as plt\nimport streamlit as st\n\nst.title('Data Visualization App') \nst.header('Create a Bar Chart')\n\n# Get user input\nx_labels = st.text_input('Enter data separated by comma for x-axis:')\ny_values = st.text_input('Enter data separated by comma for y-axis:')\n\n# Convert the data to list\nx_list = x_labels.split(\",\")\ny_list = [int(i) for i in y_values.split(\",\")]\n\n# Draw the chart\nplt.bar(x_list, y_list)\n\n# Render the chart with matplotlib\nst.pyplot()"}
{"instruction":"Write a Python code to create an object to store the details of a student such as name, age, and grade.","input":"","output":"class Student:\n    def __init__(self, name, age, grade):\n        self.name = name\n        self.age = age\n        self.grade = grade\n\n    def get_name(self):\n        return self.name\n\n    def get_age(self):\n        return self.age\n \n    def get_grade(self):\n        return self.grade","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to create an object to store the details of a student such as name, age, and grade.\n\n### Input:\n\n\n### Output:\nclass Student:\n    def __init__(self, name, age, grade):\n        self.name = name\n        self.age = age\n        self.grade = grade\n\n    def get_name(self):\n        return self.name\n\n    def get_age(self):\n        return self.age\n \n    def get_grade(self):\n        return self.grade"}
{"instruction":"Create a Python program that can search through two collections of data (collection 1 and collection 2) and calculate the probability that two items match one another.","input":"","output":"# Import the necessary libraries\nimport json \nfrom collections import OrderedDict \nimport pandas as pd\n\n# Load the data \nwith open('collection1.json') as json_file:\n    collection1 = json.load(json_file)\n\nwith open('collection2.json') as json_file:\n    collection2 = json.load(json_file)\n\n# Create a DataFrame from both collections\ndf1 = pd.DataFrame(collection1)\ndf2 = pd.DataFrame(collection2)\n\n# Calculate the probability of matching items\nmatch_probs = {}\n\nfor item1 in df1.item.unique():\n    for item2 in df2.item.unique():\n        item1_obs = df1.loc[df1['item'] == item1]\n        item2_obs = df2.loc[df2['item'] == item2]\n        match_prob = (len(item1_obs) * len(item2_obs)) \/ (len(df1) * len(df2))\n        match_probs[(item1,item2)] = match_prob\n\n# Print the results\nmatch_probs = OrderedDict(sorted(match_probs.items(), key=lambda x: x[1], reverse=True))\nprint(match_probs)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that can search through two collections of data (collection 1 and collection 2) and calculate the probability that two items match one another.\n\n### Input:\n\n\n### Output:\n# Import the necessary libraries\nimport json \nfrom collections import OrderedDict \nimport pandas as pd\n\n# Load the data \nwith open('collection1.json') as json_file:\n    collection1 = json.load(json_file)\n\nwith open('collection2.json') as json_file:\n    collection2 = json.load(json_file)\n\n# Create a DataFrame from both collections\ndf1 = pd.DataFrame(collection1)\ndf2 = pd.DataFrame(collection2)\n\n# Calculate the probability of matching items\nmatch_probs = {}\n\nfor item1 in df1.item.unique():\n    for item2 in df2.item.unique():\n        item1_obs = df1.loc[df1['item'] == item1]\n        item2_obs = df2.loc[df2['item'] == item2]\n        match_prob = (len(item1_obs) * len(item2_obs)) \/ (len(df1) * len(df2))\n        match_probs[(item1,item2)] = match_prob\n\n# Print the results\nmatch_probs = OrderedDict(sorted(match_probs.items(), key=lambda x: x[1], reverse=True))\nprint(match_probs)"}
{"instruction":"Create a Python class for a hospital patient.","input":"","output":"class Patient:\n    def __init__(self,name, age, medical_history):\n        self.name = name\n        self.age = age\n        self.medical_history = medical_history\n        \n    def get_name(self):\n        return self.name\n        \n    def get_age(self):\n        return self.age\n    \n    def get_history(self):\n        return self.medical_history","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for a hospital patient.\n\n### Input:\n\n\n### Output:\nclass Patient:\n    def __init__(self,name, age, medical_history):\n        self.name = name\n        self.age = age\n        self.medical_history = medical_history\n        \n    def get_name(self):\n        return self.name\n        \n    def get_age(self):\n        return self.age\n    \n    def get_history(self):\n        return self.medical_history"}
{"instruction":"Optimize an existing python program to improve its processing speed.","input":"def my_func(x):\n    for i in range(1000000):\n    x += x + 1\nreturn x","output":"def my_func(x): \n    x += x << 1  # 2x faster than adding 1\n    for i in range(1000000 \/\/ 2):  # divide loop by 2\n        x += x << 2 \n    return x  # no extra operation needed on return value as it is already doubled twice already.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize an existing python program to improve its processing speed.\n\n### Input:\ndef my_func(x):\n    for i in range(1000000):\n    x += x + 1\nreturn x\n\n### Output:\ndef my_func(x): \n    x += x << 1  # 2x faster than adding 1\n    for i in range(1000000 \/\/ 2):  # divide loop by 2\n        x += x << 2 \n    return x  # no extra operation needed on return value as it is already doubled twice already."}
{"instruction":"Create a python program that calculates the maximum of three numbers.","input":"Numbers: 5, 8, 3","output":"def max_three(a, b, c):\n    m = max(a, b)\n    m = max(m, c)\n    return m","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that calculates the maximum of three numbers.\n\n### Input:\nNumbers: 5, 8, 3\n\n### Output:\ndef max_three(a, b, c):\n    m = max(a, b)\n    m = max(m, c)\n    return m"}
{"instruction":"Create a Python program that finds the prime factors of a given number.","input":"","output":"def prime_factors(n):\n    factors = []\n    divisor = 2 \n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n\/divisor\n        else:\n            divisor += 1\n    return factors","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that finds the prime factors of a given number.\n\n### Input:\n\n\n### Output:\ndef prime_factors(n):\n    factors = []\n    divisor = 2 \n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n\/divisor\n        else:\n            divisor += 1\n    return factors"}
{"instruction":"Design a function in Python to search for a specific subset in a given set.","input":"","output":"def containsSubset(s1, s2): \n  for i in s2: \n    if i not in s1: \n      return False\n  return True\n\ns1 = {1, 2, 3, 4, 5}\ns2 = {2, 4}\nprint(containsSubset(s1, s2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to search for a specific subset in a given set.\n\n### Input:\n\n\n### Output:\ndef containsSubset(s1, s2): \n  for i in s2: \n    if i not in s1: \n      return False\n  return True\n\ns1 = {1, 2, 3, 4, 5}\ns2 = {2, 4}\nprint(containsSubset(s1, s2))"}
{"instruction":"Write a Python program to get a list of strings from a given string.","input":"string = \"The quick brown fox jumped over the lazy dog\"","output":"def get_words_from_string(string):\n    \"\"\"This function will return a list of words from the given string.\"\"\"\n    words = string.split()\n    return words\n\nstring = \"The quick brown fox jumped over the lazy dog\"\nwords_list = get_words_from_string(string)\nprint(words_list)\n\n# Output:\n# ['The', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to get a list of strings from a given string.\n\n### Input:\nstring = \"The quick brown fox jumped over the lazy dog\"\n\n### Output:\ndef get_words_from_string(string):\n    \"\"\"This function will return a list of words from the given string.\"\"\"\n    words = string.split()\n    return words\n\nstring = \"The quick brown fox jumped over the lazy dog\"\nwords_list = get_words_from_string(string)\nprint(words_list)\n\n# Output:\n# ['The', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']"}
{"instruction":"Creating a Python dictionary comprehension, generate a new dictionary with keys from the first dictionary and values multiplied by 2.","input":"{'a': 1, 'b': 2, 'c': 3,}","output":"my_dict = {'a': 1, 'b': 2, 'c': 3}\n\nnew_dict = {k:v*2 for k, v in my_dict.items()}\n\nprint(new_dict) # {'a':2, 'b':4, 'c':6}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreating a Python dictionary comprehension, generate a new dictionary with keys from the first dictionary and values multiplied by 2.\n\n### Input:\n{'a': 1, 'b': 2, 'c': 3,}\n\n### Output:\nmy_dict = {'a': 1, 'b': 2, 'c': 3}\n\nnew_dict = {k:v*2 for k, v in my_dict.items()}\n\nprint(new_dict) # {'a':2, 'b':4, 'c':6}"}
{"instruction":"Design an algorithm in Python that takes an array of integers and prints the numbers between 1 and 100 that are not present in the array","input":"","output":"def missing_numbers(arr):\n    arr_set = set(arr)\n    for i in range(1, 101):\n        if i not in arr_set:\n            print(i)\n\nmissing_numbers([4,5,1,9, 8,5])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that takes an array of integers and prints the numbers between 1 and 100 that are not present in the array\n\n### Input:\n\n\n### Output:\ndef missing_numbers(arr):\n    arr_set = set(arr)\n    for i in range(1, 101):\n        if i not in arr_set:\n            print(i)\n\nmissing_numbers([4,5,1,9, 8,5])"}
{"instruction":"Build a text generator in Python that can generate poem based on a given input.","input":"","output":"def generate_poem(input): \n  poem = []\n  for i in range(len(input)):\n      line = ''\n      for j in range(i):\n          line += input[j] + ' '\n      poem.append(line)\n  return poem","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a text generator in Python that can generate poem based on a given input.\n\n### Input:\n\n\n### Output:\ndef generate_poem(input): \n  poem = []\n  for i in range(len(input)):\n      line = ''\n      for j in range(i):\n          line += input[j] + ' '\n      poem.append(line)\n  return poem"}
{"instruction":"Create a Python program to convert a list of characters into a string","input":"Convert this array ['a', 'b', 'c'] into a string","output":"def list_to_str(arr):\n    str = \"\"\n    for i in arr:\n        str += i\n    return str\n\narr = ['a', 'b', 'c']\n  \nresult = list_to_str(arr) \nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to convert a list of characters into a string\n\n### Input:\nConvert this array ['a', 'b', 'c'] into a string\n\n### Output:\ndef list_to_str(arr):\n    str = \"\"\n    for i in arr:\n        str += i\n    return str\n\narr = ['a', 'b', 'c']\n  \nresult = list_to_str(arr) \nprint(result)"}
{"instruction":"Create a Python program that takes an array of numbers and returns the index of the first number that is the duplicate of an earlier encountered number.","input":"[5, 7, 9, 3, 1, 3]","output":"def find_first_duplicate(arr):\n    seen = dict()\n\n    for i, n in enumerate(arr):\n        if n in seen:\n            return i\n        else:\n            seen[n] = True\n\n    return -1\n\narr = [5, 7, 9, 3, 1, 3]\nprint(find_first_duplicate(arr))\n# Output: 4","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes an array of numbers and returns the index of the first number that is the duplicate of an earlier encountered number.\n\n### Input:\n[5, 7, 9, 3, 1, 3]\n\n### Output:\ndef find_first_duplicate(arr):\n    seen = dict()\n\n    for i, n in enumerate(arr):\n        if n in seen:\n            return i\n        else:\n            seen[n] = True\n\n    return -1\n\narr = [5, 7, 9, 3, 1, 3]\nprint(find_first_duplicate(arr))\n# Output: 4"}
{"instruction":"Generate a python class that implements a singly linked list with methods to add and remove elements.","input":"","output":"class Node(object): \n    # Constructor\n    def __init__(self, data): \n        self.data = data\n        self.next = None\n \n \nclass LinkedList(object): \n    # Function to initialize root \n    def __init__(self): \n        self.head = None\n  \n  \n    # Insert a new node at the beginning \n    def push(self, new_data):\n        # 1 & 2: Allocate the Node & Put in the data\n        new_node = Node(new_data) \n  \n        # 3. Make next of new Node as head \n        new_node.next = self.head \n  \n        # 4. Move the head to point to new Node  \n        self.head = new_node \n\n\n    # Remove a node from the beginning \n    def pop(self):\n        # Store head node \n        temp = self.head \n  \n        # If head node itself holds the key to be deleted \n        if (temp is not None): \n            self.head = temp.next\n            temp = None\n        else: \n            print(\"The linked list is empty\")\n        return","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python class that implements a singly linked list with methods to add and remove elements.\n\n### Input:\n\n\n### Output:\nclass Node(object): \n    # Constructor\n    def __init__(self, data): \n        self.data = data\n        self.next = None\n \n \nclass LinkedList(object): \n    # Function to initialize root \n    def __init__(self): \n        self.head = None\n  \n  \n    # Insert a new node at the beginning \n    def push(self, new_data):\n        # 1 & 2: Allocate the Node & Put in the data\n        new_node = Node(new_data) \n  \n        # 3. Make next of new Node as head \n        new_node.next = self.head \n  \n        # 4. Move the head to point to new Node  \n        self.head = new_node \n\n\n    # Remove a node from the beginning \n    def pop(self):\n        # Store head node \n        temp = self.head \n  \n        # If head node itself holds the key to be deleted \n        if (temp is not None): \n            self.head = temp.next\n            temp = None\n        else: \n            print(\"The linked list is empty\")\n        return"}
{"instruction":"Design a basic addition function in Python.","input":"","output":"def add(a, b):\n    return a + b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a basic addition function in Python.\n\n### Input:\n\n\n### Output:\ndef add(a, b):\n    return a + b"}
{"instruction":"Construct a program in Python that finds the nth prime number.","input":"","output":"\"\"\"\nConstruct a program in Python that finds the nth prime number\n\"\"\"\n# A function used to calculate whether a given number is prime\ndef is_prime(n): \n    # Corner cases  \n    if (n <= 1): \n    \treturn False\n    if (n <= 3): \n    \treturn True\n  \n    # This is checked so that we can skip  \n    # middle five numbers in below loop  \n    if (n % 2 == 0 or n % 3 == 0): \n    \treturn False\n  \n    i = 5\n    while(i * i <= n): \n        if (n % i == 0 or n % (i + 2) == 0): \n            return False\n        i = i + 6\n  \n    return True\n\n# Function to find the nth prime number\ndef find_nth_prime_number(n): \n    # Initialize counter to 1 \n    prime_count = 1\n  \n    # Initialize number to 2 \n    num = 2\n  \n    while(prime_count < n): \n    \tnum += 1\n    \tif (is_prime(num)): \n    \t\tprime_count += 1\n    return num\n\nnth_prime_number = find_nth_prime_number(n)\nprint(\"The nth prime number is\",nth_prime_number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program in Python that finds the nth prime number.\n\n### Input:\n\n\n### Output:\n\"\"\"\nConstruct a program in Python that finds the nth prime number\n\"\"\"\n# A function used to calculate whether a given number is prime\ndef is_prime(n): \n    # Corner cases  \n    if (n <= 1): \n    \treturn False\n    if (n <= 3): \n    \treturn True\n  \n    # This is checked so that we can skip  \n    # middle five numbers in below loop  \n    if (n % 2 == 0 or n % 3 == 0): \n    \treturn False\n  \n    i = 5\n    while(i * i <= n): \n        if (n % i == 0 or n % (i + 2) == 0): \n            return False\n        i = i + 6\n  \n    return True\n\n# Function to find the nth prime number\ndef find_nth_prime_number(n): \n    # Initialize counter to 1 \n    prime_count = 1\n  \n    # Initialize number to 2 \n    num = 2\n  \n    while(prime_count < n): \n    \tnum += 1\n    \tif (is_prime(num)): \n    \t\tprime_count += 1\n    return num\n\nnth_prime_number = find_nth_prime_number(n)\nprint(\"The nth prime number is\",nth_prime_number)"}
{"instruction":"Create a python script to generate a random password consisting of a combination of 10 alphabetic characters, 9 digits and the symbols @, # and $.","input":"","output":"import random\nimport string\n\ndef randomPasswordGenerator(length):\n    # Generate a random password consisting of 10 alphabet characters, 9 digits and the symbols @, # and $\n    generated_password = ''.join(random.choice(\n        string.ascii_letters + string.digits + \"@#$\") for i in range(length))\n    return generated_password\n\nlength = 10\nprint(\"Random Password:\", randomPasswordGenerator(length))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to generate a random password consisting of a combination of 10 alphabetic characters, 9 digits and the symbols @, # and $.\n\n### Input:\n\n\n### Output:\nimport random\nimport string\n\ndef randomPasswordGenerator(length):\n    # Generate a random password consisting of 10 alphabet characters, 9 digits and the symbols @, # and $\n    generated_password = ''.join(random.choice(\n        string.ascii_letters + string.digits + \"@#$\") for i in range(length))\n    return generated_password\n\nlength = 10\nprint(\"Random Password:\", randomPasswordGenerator(length))"}
{"instruction":"Design a Python script to output all values in a given list that are factors of a given integer.","input":"list = [1, 2, 3, 4, 5, 6] \ninteger = 6","output":"def factors(list,integer):\n    factors_list = []\n    for num in list:\n        if integer % num == 0:\n            factors_list.append(num)\n    return factors_list\n\nprint(factors([1,2,3,4,5,6], 6))  # [1, 2, 3, 6]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script to output all values in a given list that are factors of a given integer.\n\n### Input:\nlist = [1, 2, 3, 4, 5, 6] \ninteger = 6\n\n### Output:\ndef factors(list,integer):\n    factors_list = []\n    for num in list:\n        if integer % num == 0:\n            factors_list.append(num)\n    return factors_list\n\nprint(factors([1,2,3,4,5,6], 6))  # [1, 2, 3, 6]"}
{"instruction":"Create a Python application for controlling an LED light strip. The application should have functions for changing the color and brightness of the lights.","input":"Not applicable","output":"from gpiozero import LED\n\nlight_strip = LED(17)\n\ndef set_light_color(red, green, blue):\n \"\"\"\n Sets the color of the LED light strip.\n\n Args:\n  red (int): The red channel of the color.\n  green (int): The green channel of the color.\n  blue (int): The blue channel of the color.\n \"\"\"\n light_strip.colors = (red, green, blue)\n\ndef set_light_brightness(brightness):\n \"\"\"\n Sets the brightness of the LED light strip.\n\n Args:\n  brightness (int): The brightness value (0 - 1).\n \"\"\"\n light_strip.brightness = brightness\n\nset_light_color(255, 128, 0)\nset_light_brightness(0.5)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python application for controlling an LED light strip. The application should have functions for changing the color and brightness of the lights.\n\n### Input:\nNot applicable\n\n### Output:\nfrom gpiozero import LED\n\nlight_strip = LED(17)\n\ndef set_light_color(red, green, blue):\n \"\"\"\n Sets the color of the LED light strip.\n\n Args:\n  red (int): The red channel of the color.\n  green (int): The green channel of the color.\n  blue (int): The blue channel of the color.\n \"\"\"\n light_strip.colors = (red, green, blue)\n\ndef set_light_brightness(brightness):\n \"\"\"\n Sets the brightness of the LED light strip.\n\n Args:\n  brightness (int): The brightness value (0 - 1).\n \"\"\"\n light_strip.brightness = brightness\n\nset_light_color(255, 128, 0)\nset_light_brightness(0.5)"}
{"instruction":"Write a Python program to count and print the occurrences of a character in a string.","input":"","output":"def count_char(string, char): \n  \n    count = 0\n    for i in string: \n        if(i == char): \n            count = count + 1\n  \n    return count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to count and print the occurrences of a character in a string.\n\n### Input:\n\n\n### Output:\ndef count_char(string, char): \n  \n    count = 0\n    for i in string: \n        if(i == char): \n            count = count + 1\n  \n    return count"}
{"instruction":"Write a Python program to generate a dictionary of numbers from 1 to 4 (both included) and their squares.","input":"Not applicable","output":"myDict = {}\n\nfor i in range(1,5):\n myDict[i] = i**2\n\nprint(myDict)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a dictionary of numbers from 1 to 4 (both included) and their squares.\n\n### Input:\nNot applicable\n\n### Output:\nmyDict = {}\n\nfor i in range(1,5):\n myDict[i] = i**2\n\nprint(myDict)"}
{"instruction":"Create an optimized tail recursive function to reverse a given list in Python.","input":"[10, 20, 30, 40, 50]","output":"def reverse_list_tail_recursive(arr, reversed_list=None):\n    if reversed_list is None:\n        reversed_list = []\n    if len(arr) == 0:\n        return reversed_list\n    reversed_list.append(arr.pop())\n    return reverse_list_tail_recursive(arr, reversed_list)\n\nif __name__ == \"__main__\":\n    random_list = [10, 20, 30, 40, 50]\n    reversed_list = reverse_list_tail_recursive(random_list)\n    print(reversed_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an optimized tail recursive function to reverse a given list in Python.\n\n### Input:\n[10, 20, 30, 40, 50]\n\n### Output:\ndef reverse_list_tail_recursive(arr, reversed_list=None):\n    if reversed_list is None:\n        reversed_list = []\n    if len(arr) == 0:\n        return reversed_list\n    reversed_list.append(arr.pop())\n    return reverse_list_tail_recursive(arr, reversed_list)\n\nif __name__ == \"__main__\":\n    random_list = [10, 20, 30, 40, 50]\n    reversed_list = reverse_list_tail_recursive(random_list)\n    print(reversed_list)"}
{"instruction":"Design a class in Python to store and manage employee records.","input":"","output":"class Employee:\n    def __init__(self, name, age, salary, designation):\n        self.name = name\n        self.age = age\n        self.salary = salary\n        self.designation = designation\n        \n    # other methods\n    \n    def update_salary(self, salary):\n        self.salary = salary","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python to store and manage employee records.\n\n### Input:\n\n\n### Output:\nclass Employee:\n    def __init__(self, name, age, salary, designation):\n        self.name = name\n        self.age = age\n        self.salary = salary\n        self.designation = designation\n        \n    # other methods\n    \n    def update_salary(self, salary):\n        self.salary = salary"}
{"instruction":"Optimize the runtime of the following Python code to improve its performance.","input":"import random\n\nrandom_numbers = [random.randint(1, 1000) for _ in range(1000)]\n\ndef check_if_exists(n):\n    for i in range(len(random_numbers)):\n        if random_numbers[i] == n:\n            return True \n    return False","output":"import random \n\nrandom_numbers = set(random.randint(1, 1000) for _ in range(1000))\n\ndef check_if_exists(n):\n    return n in random_numbers\n\nif __name__ == \"__main__\":\n    print(check_if_exists(10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the runtime of the following Python code to improve its performance.\n\n### Input:\nimport random\n\nrandom_numbers = [random.randint(1, 1000) for _ in range(1000)]\n\ndef check_if_exists(n):\n    for i in range(len(random_numbers)):\n        if random_numbers[i] == n:\n            return True \n    return False\n\n### Output:\nimport random \n\nrandom_numbers = set(random.randint(1, 1000) for _ in range(1000))\n\ndef check_if_exists(n):\n    return n in random_numbers\n\nif __name__ == \"__main__\":\n    print(check_if_exists(10))"}
{"instruction":"Compose a Python class hierarchy which models the relationship between a student, instructor, and class.","input":"","output":"class Person:\n    def __init__(self, name):\n        self.name = name\n \nclass Student(Person):\n    def __init__(self, name, student_id):\n        super().__init__(name)\n        self.student_id = student_id\n        self.classes = []\n \n    def enroll(self, course):\n        self.classes.append(course)\n \nclass Instructor(Person):\n    def __init__(self, name, instructor_id):\n\t\tsuper().__init__(name)\n\t\tself.instructor_id = instructor_id\n\t\tself.classes = []\n \n\tdef assign(self, course):\n\t\tself.classes.append(course)\n \nclass Course:\n  def __init__(self, name, course_id):\n        self.name = name\n        self.course_id = course_id\n        self.students = []\n        self.instructor = None\n \n    def assign_instructor(self, instructor):\n        self.instructor = instructor\n \n    def add_student(self, student):\n        self.students.append(student)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python class hierarchy which models the relationship between a student, instructor, and class.\n\n### Input:\n\n\n### Output:\nclass Person:\n    def __init__(self, name):\n        self.name = name\n \nclass Student(Person):\n    def __init__(self, name, student_id):\n        super().__init__(name)\n        self.student_id = student_id\n        self.classes = []\n \n    def enroll(self, course):\n        self.classes.append(course)\n \nclass Instructor(Person):\n    def __init__(self, name, instructor_id):\n\t\tsuper().__init__(name)\n\t\tself.instructor_id = instructor_id\n\t\tself.classes = []\n \n\tdef assign(self, course):\n\t\tself.classes.append(course)\n \nclass Course:\n  def __init__(self, name, course_id):\n        self.name = name\n        self.course_id = course_id\n        self.students = []\n        self.instructor = None\n \n    def assign_instructor(self, instructor):\n        self.instructor = instructor\n \n    def add_student(self, student):\n        self.students.append(student)"}
{"instruction":"Create a Python program to find all the factors of a given number.","input":"12","output":"def factors(n):\n  factor_list = []\n  for i in range(1, n+1):\n    if n % i == 0:\n      factor_list.append(i)\n  return factor_list\n\nn = 12\nresult = factors(n)\nprint(\"Factors of %d are %s\" %(n, result))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find all the factors of a given number.\n\n### Input:\n12\n\n### Output:\ndef factors(n):\n  factor_list = []\n  for i in range(1, n+1):\n    if n % i == 0:\n      factor_list.append(i)\n  return factor_list\n\nn = 12\nresult = factors(n)\nprint(\"Factors of %d are %s\" %(n, result))"}
{"instruction":"Generate a command which prints the type of any given variable in Python.","input":"","output":"print(type(variable))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a command which prints the type of any given variable in Python.\n\n### Input:\n\n\n### Output:\nprint(type(variable))"}
{"instruction":"Generate a class in Python with the given properties and methods.","input":"Class Name: Student\nProperties:\nName - String\nAge - Integer\nMethods:\ngetInfo() - Returns a string with student's name and age","output":"class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def getInfo(self):\n        return \"Name: {}, Age: {}\".format(self.name, self.age)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a class in Python with the given properties and methods.\n\n### Input:\nClass Name: Student\nProperties:\nName - String\nAge - Integer\nMethods:\ngetInfo() - Returns a string with student's name and age\n\n### Output:\nclass Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def getInfo(self):\n        return \"Name: {}, Age: {}\".format(self.name, self.age)"}
{"instruction":"Create a Python AI program that will predict the demand of a product from its past sales data.","input":"The past sales data of product X in the form of a Pandas dataframe.","output":"import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# load the data\ndata = pd.read_csv('product_x_data.csv')\n\n# split the data into feature columns (X) and label column (y)\nX = data.drop(columns=['demand'])\ny = data['demand']\n\n# split the data into training and test set\nn_samples = len(X)\ntrain_samples = int(n_samples * 0.8)\nX_train, X_test = X.iloc[:train_samples], X.iloc[train_samples:]\ny_train, y_test = y.iloc[:train_samples], y.iloc[train_samples:]\n\n# fit the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# predict the test set\ny_pred = model.predict(X_test)\n\n# check the accuracy\naccuracy = np.mean(abs(y_test - y_pred))\nprint(\"Accuracy: {}\".format(accuracy))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python AI program that will predict the demand of a product from its past sales data.\n\n### Input:\nThe past sales data of product X in the form of a Pandas dataframe.\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# load the data\ndata = pd.read_csv('product_x_data.csv')\n\n# split the data into feature columns (X) and label column (y)\nX = data.drop(columns=['demand'])\ny = data['demand']\n\n# split the data into training and test set\nn_samples = len(X)\ntrain_samples = int(n_samples * 0.8)\nX_train, X_test = X.iloc[:train_samples], X.iloc[train_samples:]\ny_train, y_test = y.iloc[:train_samples], y.iloc[train_samples:]\n\n# fit the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# predict the test set\ny_pred = model.predict(X_test)\n\n# check the accuracy\naccuracy = np.mean(abs(y_test - y_pred))\nprint(\"Accuracy: {}\".format(accuracy))"}
{"instruction":"Optimize an existing Python web scraper to retrieve data from a website more quickly.","input":"def scrape(url):\n html = requests.get(url).text\n soup = BeautifulSoup(html, 'html.parser')\n page_info = {}\n page_info['text'] = soup.find('div',{'class':'content-text'}).text\n page_info['url'] = url\n return page_info","output":"import requests\nfrom bs4 import BeautifulSoup\nimport lxml\nimport cProfile\n\ndef scrape(url):\n cProfile.runctx('get_data(url)', globals(), locals(), filename='scraper.profile')\n\ndef get_data(url):\n html_string = requests.get(url, timeout=5).text\n parsed_html = BeautifulSoup(html_string, 'lxml')\n page_info = {}\n page_text = parsed_html.find('div',{'class':'content-text'}).text\n page_info['text'] = page_text\n page_info['url'] = url\n return page_info","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize an existing Python web scraper to retrieve data from a website more quickly.\n\n### Input:\ndef scrape(url):\n html = requests.get(url).text\n soup = BeautifulSoup(html, 'html.parser')\n page_info = {}\n page_info['text'] = soup.find('div',{'class':'content-text'}).text\n page_info['url'] = url\n return page_info\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\nimport lxml\nimport cProfile\n\ndef scrape(url):\n cProfile.runctx('get_data(url)', globals(), locals(), filename='scraper.profile')\n\ndef get_data(url):\n html_string = requests.get(url, timeout=5).text\n parsed_html = BeautifulSoup(html_string, 'lxml')\n page_info = {}\n page_text = parsed_html.find('div',{'class':'content-text'}).text\n page_info['text'] = page_text\n page_info['url'] = url\n return page_info"}
{"instruction":"Design a program in Python that takes a string as an input and checks whether all the vowels are present in the string or not.","input":"This is a test","output":"def check_vowels(string):\n    vowels = ['a','e','i','o','u']\n    for vowel in vowels:\n        if vowel not in string:\n            return False\n    return True\n\nprint(check_vowels('This is a test'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python that takes a string as an input and checks whether all the vowels are present in the string or not.\n\n### Input:\nThis is a test\n\n### Output:\ndef check_vowels(string):\n    vowels = ['a','e','i','o','u']\n    for vowel in vowels:\n        if vowel not in string:\n            return False\n    return True\n\nprint(check_vowels('This is a test'))"}
{"instruction":"Can you suggest an algorithm for finding all the permutations of a given string in Python?","input":"","output":"def permutations(string):\n  if len(string) == 1:\n    return [string]\n  \n  result = []\n  for i in range(0, len(string)):\n    subString = string[0:i] + string[i+1: len(string)]\n    subPermutations = permutations(subString)\n    for j in range(0, len(subPermutations)):\n      result.append(string[i] + subPermutations[j])\n  \n  return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you suggest an algorithm for finding all the permutations of a given string in Python?\n\n### Input:\n\n\n### Output:\ndef permutations(string):\n  if len(string) == 1:\n    return [string]\n  \n  result = []\n  for i in range(0, len(string)):\n    subString = string[0:i] + string[i+1: len(string)]\n    subPermutations = permutations(subString)\n    for j in range(0, len(subPermutations)):\n      result.append(string[i] + subPermutations[j])\n  \n  return result"}
{"instruction":"Write a Python program to extract the email address from a given string.","input":"","output":"import re\n\ndef extract_email(string):\n    emails = re.findall(r\"[\\w\\.-]+@[\\w\\.-]+\", string)\n    return emails\n\nstring = \"My email is abc@gmail.com\"\nextract_email(string)  # ['abc@gmail.com']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to extract the email address from a given string.\n\n### Input:\n\n\n### Output:\nimport re\n\ndef extract_email(string):\n    emails = re.findall(r\"[\\w\\.-]+@[\\w\\.-]+\", string)\n    return emails\n\nstring = \"My email is abc@gmail.com\"\nextract_email(string)  # ['abc@gmail.com']"}
{"instruction":"Write a function in Python to check if a given string is a palindrome.","input":"String : \"racecar\"","output":"def is_palindrome(input):\n s = input.lower()\n return s == s[::-1]\n\nprint(is_palindrome(\"racecar\")) # True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to check if a given string is a palindrome.\n\n### Input:\nString : \"racecar\"\n\n### Output:\ndef is_palindrome(input):\n s = input.lower()\n return s == s[::-1]\n\nprint(is_palindrome(\"racecar\")) # True"}
{"instruction":"Convert a given list of integers into a binary search tree in Python.","input":"[2, 6, 1, 4, 3, 5, 7]","output":"class Node:\n def __init__(self, data): \n self.left = None\n self.right = None\n self.data = data \n\ndef insert(root, node):\n if root is None:\n root = node\n else: \n if root.data < node.data: \n if root.right is None: \n root.right = node \n else: \n insert(root.right, node) \n else: \n if root.left is None: \n root.left = node \n else: \n insert(root.left, node)\n\ndef build_tree(input_list): \n root = Node(input_list[0]) \n for i in range(1, len(input_list)): \n insert(root, Node(input_list[i])) \n return root \n\n# Test List \ninput_list = [2, 6, 1, 4, 3, 5, 7]\n\n# Use the above function \nroot = build_tree(input_list) \n\ndef inOrder(root): \n if root is not None: \n inOrder(root.left) \n print(root.data) \n inOrder(root.right) \n\ninOrder(root) \n\n# Output:\n1\n2\n3\n4\n5\n6\n7","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a given list of integers into a binary search tree in Python.\n\n### Input:\n[2, 6, 1, 4, 3, 5, 7]\n\n### Output:\nclass Node:\n def __init__(self, data): \n self.left = None\n self.right = None\n self.data = data \n\ndef insert(root, node):\n if root is None:\n root = node\n else: \n if root.data < node.data: \n if root.right is None: \n root.right = node \n else: \n insert(root.right, node) \n else: \n if root.left is None: \n root.left = node \n else: \n insert(root.left, node)\n\ndef build_tree(input_list): \n root = Node(input_list[0]) \n for i in range(1, len(input_list)): \n insert(root, Node(input_list[i])) \n return root \n\n# Test List \ninput_list = [2, 6, 1, 4, 3, 5, 7]\n\n# Use the above function \nroot = build_tree(input_list) \n\ndef inOrder(root): \n if root is not None: \n inOrder(root.left) \n print(root.data) \n inOrder(root.right) \n\ninOrder(root) \n\n# Output:\n1\n2\n3\n4\n5\n6\n7"}
{"instruction":"Create a class in Python with a single attribute named \"name\".","input":"","output":"class MyClass:\n\n    def __init__(self):\n        self.name = None","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python with a single attribute named \"name\".\n\n### Input:\n\n\n### Output:\nclass MyClass:\n\n    def __init__(self):\n        self.name = None"}
{"instruction":"Generate a code which implements a minimum heap house.","input":"","output":"# Python program to demonstrate Min Heap \nfrom heapq import heappop, heappush \n  \nclass MinHeap: \n   \n    def __init__(self): \n        self.heap = list() \n   \n    # Inserts a new key 'k'  \n    def push(self, k): \n        heappush(self.heap, k)            \n  \n    # Decrease value of key at index 'i' to new_val \n    # It is assumed that new_val is smaller than heap[i] \n    def decreaseKey(self, i, new_val): \n        self.heap[i] = new_val  \n        while(i != 0 and self.heap[int((i - 1) \/ 2)] > self.heap[i]): \n            \/\/Swapping the two keys \n            self.heap[i] = self.heap[int((i - 1) \/ 2)] \n            self.heap[int((i - 1) \/ 2)] = self.heap[i] \n            i = int((i - 1) \/ 2); \n  \n    # Method to remove minium element from min heap \n    def pop(self): \n        if self.heap: \n            # Replace root with last element of the heap\n            self.heap[0] = self.heap[len(self.heap) - 1] \n            # Remove last element\n            self.heap.pop() \n            # Heapify the root element\n            self.minHeapify(0) \n        else: \n            return None\n   \n    # This function mainly calls minHeapify of the root. \n    def minHeapify(self, i): \n        l = 2 * i + 1     \n        r = 2 * i + 2     \n        smallest = i \n        if l < len(self.heap) and self.heap[i] > self.heap[l]: \n            smallest = l \n        if r < len(self.heap) and self.heap[smallest] > self.heap[r]: \n            smallest = r \n        if smallest != i: \n            self.heap[i], self.heap[smallest] = self.heap[smallest], self.heap[i] \n            self.minHeapify(smallest)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code which implements a minimum heap house.\n\n### Input:\n\n\n### Output:\n# Python program to demonstrate Min Heap \nfrom heapq import heappop, heappush \n  \nclass MinHeap: \n   \n    def __init__(self): \n        self.heap = list() \n   \n    # Inserts a new key 'k'  \n    def push(self, k): \n        heappush(self.heap, k)            \n  \n    # Decrease value of key at index 'i' to new_val \n    # It is assumed that new_val is smaller than heap[i] \n    def decreaseKey(self, i, new_val): \n        self.heap[i] = new_val  \n        while(i != 0 and self.heap[int((i - 1) \/ 2)] > self.heap[i]): \n            \/\/Swapping the two keys \n            self.heap[i] = self.heap[int((i - 1) \/ 2)] \n            self.heap[int((i - 1) \/ 2)] = self.heap[i] \n            i = int((i - 1) \/ 2); \n  \n    # Method to remove minium element from min heap \n    def pop(self): \n        if self.heap: \n            # Replace root with last element of the heap\n            self.heap[0] = self.heap[len(self.heap) - 1] \n            # Remove last element\n            self.heap.pop() \n            # Heapify the root element\n            self.minHeapify(0) \n        else: \n            return None\n   \n    # This function mainly calls minHeapify of the root. \n    def minHeapify(self, i): \n        l = 2 * i + 1     \n        r = 2 * i + 2     \n        smallest = i \n        if l < len(self.heap) and self.heap[i] > self.heap[l]: \n            smallest = l \n        if r < len(self.heap) and self.heap[smallest] > self.heap[r]: \n            smallest = r \n        if smallest != i: \n            self.heap[i], self.heap[smallest] = self.heap[smallest], self.heap[i] \n            self.minHeapify(smallest)"}
{"instruction":"Create a Python program to find the most frequent words in the given text and display them in descending order of their frequency.","input":"(example text)\n\nThe cat was playing in the garden. The cat was chasing a butterfly.","output":"# File name: most_frequent_words.py\n\ndef most_frequent_words(text):\n words = text.split()\n word_freq = {}\n \n for word in words:\n if word in word_freq:\n word_freq[word] += 1\n else:\n word_freq[word] = 1\n \n words = sorted(word_freq.items(), key = lambda x: x[1], reverse = True)\n \n return words\n\nresult = most_frequent_words('The cat was playing in the garden. The cat was chasing a butterfly.')\nprint(result)\n# Output: [('The', 2), ('cat', 2), ('was', 2), ('playing', 1), ('in', 1), ('the', 1), ('garden.', 1), ('chasing', 1), ('a', 1), ('butterfly.', 1)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the most frequent words in the given text and display them in descending order of their frequency.\n\n### Input:\n(example text)\n\nThe cat was playing in the garden. The cat was chasing a butterfly.\n\n### Output:\n# File name: most_frequent_words.py\n\ndef most_frequent_words(text):\n words = text.split()\n word_freq = {}\n \n for word in words:\n if word in word_freq:\n word_freq[word] += 1\n else:\n word_freq[word] = 1\n \n words = sorted(word_freq.items(), key = lambda x: x[1], reverse = True)\n \n return words\n\nresult = most_frequent_words('The cat was playing in the garden. The cat was chasing a butterfly.')\nprint(result)\n# Output: [('The', 2), ('cat', 2), ('was', 2), ('playing', 1), ('in', 1), ('the', 1), ('garden.', 1), ('chasing', 1), ('a', 1), ('butterfly.', 1)]"}
{"instruction":"Write a Python generator to generate a range of integer numbers indefinitely.","input":"","output":"def generate_numbers():\n    n = 0\n    while True:\n        yield n \n        n += 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python generator to generate a range of integer numbers indefinitely.\n\n### Input:\n\n\n### Output:\ndef generate_numbers():\n    n = 0\n    while True:\n        yield n \n        n += 1"}
{"instruction":"Design a Python program which can pre-process a given dataset of text for further processing by a machine learning model.","input":"","output":"\"\"\"\nDesign a Python program which can pre-process a given dataset of text for further processing by a machine learning model.\n\"\"\"\n\nimport re\nimport nltk\n\ndef preprocess_text(text):\n     # lower case\n    text = text.lower()\n\n    # remove punctuation\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # tokenize\n    tokens = nltk.tokenize.word_tokenize(text)\n\n    # remove stopwords\n    words = [word for word in tokens if not word in nltk.corpus.stopwords.words('english')]\n    \n    # lemmatize\n    lemmatizer = nltk.stem.WordNetLemmatizer()\n    words = [lemmatizer.lemmatize(word) for word in words]\n\n    return words\n\nif __name__ == '__main__':\n    text = 'hello world! My name is John.'\n    preprocessed = preprocess_text(text)\n    print(preprocessed)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program which can pre-process a given dataset of text for further processing by a machine learning model.\n\n### Input:\n\n\n### Output:\n\"\"\"\nDesign a Python program which can pre-process a given dataset of text for further processing by a machine learning model.\n\"\"\"\n\nimport re\nimport nltk\n\ndef preprocess_text(text):\n     # lower case\n    text = text.lower()\n\n    # remove punctuation\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # tokenize\n    tokens = nltk.tokenize.word_tokenize(text)\n\n    # remove stopwords\n    words = [word for word in tokens if not word in nltk.corpus.stopwords.words('english')]\n    \n    # lemmatize\n    lemmatizer = nltk.stem.WordNetLemmatizer()\n    words = [lemmatizer.lemmatize(word) for word in words]\n\n    return words\n\nif __name__ == '__main__':\n    text = 'hello world! My name is John.'\n    preprocessed = preprocess_text(text)\n    print(preprocessed)"}
{"instruction":"Create a Python program to create a dictionary whose keys are all of the unique characters in a text and the value is the number of times each character appears.","input":"text = \"Hello world!\"","output":"def character_count(text):\n    char_dict = {}\n    for char in text:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict\n\nresult = character_count(text)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to create a dictionary whose keys are all of the unique characters in a text and the value is the number of times each character appears.\n\n### Input:\ntext = \"Hello world!\"\n\n### Output:\ndef character_count(text):\n    char_dict = {}\n    for char in text:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict\n\nresult = character_count(text)\nprint(result)"}
{"instruction":"Write a Python program to compare two dictionaries.","input":"dict1 = {\n    'key1': 'value1',\n    'key2': 'value2',\n    'key3': 'value3',\n}\n\ndict2 = {\n    'key1': 'value1',\n    'key2': 'value4',\n    'key4': 'value5',\n}","output":"def compare_dictionaries(dict1, dict2):\n  result = {} \n  for key in dict1:    \n    if (key in dict2):\n      if (dict1[key] == dict2[key]):\n        result[key] = \"Same Value\"\n      else:\n        result[key] = \"Different Value\"\n    else:\n      result[key] = \"dict2 doesn't contains this keys\"\n\n  for key in dict2:\n    if (key not in dict1):\n      result[key] = \"dict1 doesn't have this key\"\n  \n  return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compare two dictionaries.\n\n### Input:\ndict1 = {\n    'key1': 'value1',\n    'key2': 'value2',\n    'key3': 'value3',\n}\n\ndict2 = {\n    'key1': 'value1',\n    'key2': 'value4',\n    'key4': 'value5',\n}\n\n### Output:\ndef compare_dictionaries(dict1, dict2):\n  result = {} \n  for key in dict1:    \n    if (key in dict2):\n      if (dict1[key] == dict2[key]):\n        result[key] = \"Same Value\"\n      else:\n        result[key] = \"Different Value\"\n    else:\n      result[key] = \"dict2 doesn't contains this keys\"\n\n  for key in dict2:\n    if (key not in dict1):\n      result[key] = \"dict1 doesn't have this key\"\n  \n  return result"}
{"instruction":"Create an automated bot in Python Selenium to fill out a web form with the provided data.","input":"Name: Joseph Smith \nAddress: 123 Main Street\nCity, State Zip : New York, NY 12345\nCountry : United States","output":"from selenium import webdriver\n\n# open web browser\ndriver = webdriver.Chrome()\ndriver.get(\"https:\/\/example.com\/form\")\n\n# fill out form\nname_field = driver.find_element_by_id(\"name\")\nname_field.send_keys(\"Joseph Smith\")\n\naddress_field = driver.find_element_by_id(\"address\")\naddress_field.send_keys(\"123 Main Street\")\n\ncity_field = driver.find_element_by_id(\"city\")\ncity_field.send_keys(\"New York\")\n\nstate_field = driver.find_element_by_id(\"state\")\nstate_field.send_keys(\"NY\")\n\nzip_field = driver.find_element_by_id(\"zip\")\nzip_field.send_keys(\"12345\")\n\ncountry_field = driver.find_element_by_id(\"country\")\ncountry_field.send_keys(\"United States\")\n\n# submit form\nsubmit_button = driver.find_element_by_id(\"submit\")\nsubmit_button.click()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an automated bot in Python Selenium to fill out a web form with the provided data.\n\n### Input:\nName: Joseph Smith \nAddress: 123 Main Street\nCity, State Zip : New York, NY 12345\nCountry : United States\n\n### Output:\nfrom selenium import webdriver\n\n# open web browser\ndriver = webdriver.Chrome()\ndriver.get(\"https:\/\/example.com\/form\")\n\n# fill out form\nname_field = driver.find_element_by_id(\"name\")\nname_field.send_keys(\"Joseph Smith\")\n\naddress_field = driver.find_element_by_id(\"address\")\naddress_field.send_keys(\"123 Main Street\")\n\ncity_field = driver.find_element_by_id(\"city\")\ncity_field.send_keys(\"New York\")\n\nstate_field = driver.find_element_by_id(\"state\")\nstate_field.send_keys(\"NY\")\n\nzip_field = driver.find_element_by_id(\"zip\")\nzip_field.send_keys(\"12345\")\n\ncountry_field = driver.find_element_by_id(\"country\")\ncountry_field.send_keys(\"United States\")\n\n# submit form\nsubmit_button = driver.find_element_by_id(\"submit\")\nsubmit_button.click()"}
{"instruction":"Define a function to compute 3 raised to the power of 5 in Python.","input":"","output":"def power(x, y): \n    if (y == 0): \n        return 1\n    elif (int(y % 2) == 0): \n        return (power(x, int(y \/ 2)) *\n               power(x, int(y \/ 2))) \n    else: \n        return (x * power(x, int(y \/ 2)) *\n               power(x, int(y \/ 2))) \n\n\n# Driver Code \nx = 3; y = 5\nprint(power(x, y))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDefine a function to compute 3 raised to the power of 5 in Python.\n\n### Input:\n\n\n### Output:\ndef power(x, y): \n    if (y == 0): \n        return 1\n    elif (int(y % 2) == 0): \n        return (power(x, int(y \/ 2)) *\n               power(x, int(y \/ 2))) \n    else: \n        return (x * power(x, int(y \/ 2)) *\n               power(x, int(y \/ 2))) \n\n\n# Driver Code \nx = 3; y = 5\nprint(power(x, y))"}
{"instruction":"Generate a list of output values by multiplying the input values from two array in Python.","input":"[1, 2, 3] and [4, 5, 6]","output":"array1 = [1, 2, 3]\narray2 = [4, 5, 6]\n\noutput = [val1 * val2 for val1, val2 in zip(array1, array2)] \nprint(output)\n\n# Output \n[4, 10, 18]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of output values by multiplying the input values from two array in Python.\n\n### Input:\n[1, 2, 3] and [4, 5, 6]\n\n### Output:\narray1 = [1, 2, 3]\narray2 = [4, 5, 6]\n\noutput = [val1 * val2 for val1, val2 in zip(array1, array2)] \nprint(output)\n\n# Output \n[4, 10, 18]"}
{"instruction":"Create a python function to calculate the probability of a given event.","input":"An example event is rolling a dice that has 6 sides and the event is rolling a number 6.","output":"def calculate_probability(event):\n    num_outcomes = 6\n    num_favorable = 1\n    \n    probability = num_favorable\/num_outcomes\n    \n    return probability\n    \n# calculate probability of rolling a 6\nprobability = calculate_probability(\"rolling a 6\")\nprint(probability)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function to calculate the probability of a given event.\n\n### Input:\nAn example event is rolling a dice that has 6 sides and the event is rolling a number 6.\n\n### Output:\ndef calculate_probability(event):\n    num_outcomes = 6\n    num_favorable = 1\n    \n    probability = num_favorable\/num_outcomes\n    \n    return probability\n    \n# calculate probability of rolling a 6\nprobability = calculate_probability(\"rolling a 6\")\nprint(probability)"}
{"instruction":"Calculate the average grade of a student given a list of their grades in Python.","input":"grades = [90, 85, 80, 75, 70]","output":"def calculate_average_grade(grades): \n total = 0\n for grade in grades: \n total += grade \n avg_grade = total \/ len(grades) \n return avg_grade \n\ngrades = [90, 85, 80, 75, 70] \navg_grade = calculate_average_grade(grades) \nprint('Average Grade: ', avg_grade) # Output: Average Grade: 80.0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the average grade of a student given a list of their grades in Python.\n\n### Input:\ngrades = [90, 85, 80, 75, 70]\n\n### Output:\ndef calculate_average_grade(grades): \n total = 0\n for grade in grades: \n total += grade \n avg_grade = total \/ len(grades) \n return avg_grade \n\ngrades = [90, 85, 80, 75, 70] \navg_grade = calculate_average_grade(grades) \nprint('Average Grade: ', avg_grade) # Output: Average Grade: 80.0"}
{"instruction":"Develop an NFC reader protocol in Python to transfer data between two NFC enabled devices.","input":"Not applicable","output":"import nfc\n\ndef on_connect(tag):\n print('Tag connected')\n # Read data\n data = tag.read()\n print(data)\n # Write data\n tag.write('Hello World!')\n\nwith nfc.ContactlessFrontend('usb') as clf:\n clf.connect(rdwr={'on-connect': on_connect})","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an NFC reader protocol in Python to transfer data between two NFC enabled devices.\n\n### Input:\nNot applicable\n\n### Output:\nimport nfc\n\ndef on_connect(tag):\n print('Tag connected')\n # Read data\n data = tag.read()\n print(data)\n # Write data\n tag.write('Hello World!')\n\nwith nfc.ContactlessFrontend('usb') as clf:\n clf.connect(rdwr={'on-connect': on_connect})"}
{"instruction":"You are required to write a Python program to optimize an equation.","input":"x + x + y + y + y","output":"def optimize_equation(equation):\n    variables = []\n    for term in equation.split('+'):\n        var, count = term.strip().split(' ')\n        variables.append((var, int(count)))\n\n    new_equation = \"\"\n    for var, count in variables:\n        new_equation += (var + '^' + str(count)) + ' + '\n    return new_equation[:-3]\n\nequation = 'x + x + y + y + y'\n\nprint(optimize_equation(equation))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are required to write a Python program to optimize an equation.\n\n### Input:\nx + x + y + y + y\n\n### Output:\ndef optimize_equation(equation):\n    variables = []\n    for term in equation.split('+'):\n        var, count = term.strip().split(' ')\n        variables.append((var, int(count)))\n\n    new_equation = \"\"\n    for var, count in variables:\n        new_equation += (var + '^' + str(count)) + ' + '\n    return new_equation[:-3]\n\nequation = 'x + x + y + y + y'\n\nprint(optimize_equation(equation))"}
{"instruction":"Suggest a code snippet to generate a histogram in Python.","input":"","output":"\"\"\"\nSuggest a code snippet to generate a histogram in Python\n\"\"\"\n\n# import the required libraries\nimport matplotlib.pyplot as plt\n\n# set the data to plot\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# generate the histogram\nplt.hist(data, bins=7, color='blue', edgecolor='black')\nplt.title('A Histogram')\nplt.xlabel('Values')\nplt.ylabel('Frequency')\n\n# show the plot\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a code snippet to generate a histogram in Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nSuggest a code snippet to generate a histogram in Python\n\"\"\"\n\n# import the required libraries\nimport matplotlib.pyplot as plt\n\n# set the data to plot\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# generate the histogram\nplt.hist(data, bins=7, color='blue', edgecolor='black')\nplt.title('A Histogram')\nplt.xlabel('Values')\nplt.ylabel('Frequency')\n\n# show the plot\nplt.show()"}
{"instruction":"Write a Python program to sort a list of tuples by increasing order of the second item of each tuple.","input":"","output":"def sort_list(list_of_tuples): \n    list_of_tuples.sort(key = lambda x: x[1]) \n    return list_of_tuples","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a list of tuples by increasing order of the second item of each tuple.\n\n### Input:\n\n\n### Output:\ndef sort_list(list_of_tuples): \n    list_of_tuples.sort(key = lambda x: x[1]) \n    return list_of_tuples"}
{"instruction":"Create a Python program to print the numbers in descending order.","input":"[10, 3, 5, 8, 7]","output":"lst = [10, 3, 5, 8, 7]\n\nlst.sort(reverse=True)\n\nfor n in lst:\n    print(n)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print the numbers in descending order.\n\n### Input:\n[10, 3, 5, 8, 7]\n\n### Output:\nlst = [10, 3, 5, 8, 7]\n\nlst.sort(reverse=True)\n\nfor n in lst:\n    print(n)"}
{"instruction":"Given a list of integers and an integer k, can you write a Python program to find the consecutive integers whose sum is equal to the given integer k?","input":"lst = [1,3,5,7,9]\nk = 10","output":"def find_consecutive_integers(lst, k):\n    # Edge cases\n    if k > sum(lst) or k < 0:\n        return -1\n \n    # Create a window and move it's boundaries\n    l, h, curr_sum = 0, 0, 0\n    while h < len(lst):\n        # Sum of current window\n        curr_sum += lst[h] \n \n        # See if the window sum equals k\n        while curr_sum > k and l <= h:\n            curr_sum -= lst[l]\n            l += 1\n \n        # When window sum is equal to k, print the winow\n        if curr_sum == k:\n            return lst[l:h+1]\n \n        # Move the window one step at a time\n        h += 1\n \n    # If window size reaches last element and no window is \n    # found\n    return -1\n \nlst = [1,3,5,7,9]\nk = 10\nprint(find_consecutive_integers(lst, k)) # Output: [3,5,7]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integers and an integer k, can you write a Python program to find the consecutive integers whose sum is equal to the given integer k?\n\n### Input:\nlst = [1,3,5,7,9]\nk = 10\n\n### Output:\ndef find_consecutive_integers(lst, k):\n    # Edge cases\n    if k > sum(lst) or k < 0:\n        return -1\n \n    # Create a window and move it's boundaries\n    l, h, curr_sum = 0, 0, 0\n    while h < len(lst):\n        # Sum of current window\n        curr_sum += lst[h] \n \n        # See if the window sum equals k\n        while curr_sum > k and l <= h:\n            curr_sum -= lst[l]\n            l += 1\n \n        # When window sum is equal to k, print the winow\n        if curr_sum == k:\n            return lst[l:h+1]\n \n        # Move the window one step at a time\n        h += 1\n \n    # If window size reaches last element and no window is \n    # found\n    return -1\n \nlst = [1,3,5,7,9]\nk = 10\nprint(find_consecutive_integers(lst, k)) # Output: [3,5,7]"}
{"instruction":"Build an interactive chatbot in Python using the Chatterbot library.","input":"Not applicable","output":"from chatterbot import ChatBot\nfrom chatterbot.trainers import ListTrainer\n\nbot = ChatBot('Bot')\nbot.set_trainer(ListTrainer)\n\nconversation = [\n    'Hello',\n    'Hi there!',\n    'What is your name?',\n    'My name is Bot. Nice to meet you!'\n]\n\nbot.train(conversation)\n\nwhile True:\n    request = input('You: ')\n    response = bot.get_response(request)\n    print('Bot: ', response)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild an interactive chatbot in Python using the Chatterbot library.\n\n### Input:\nNot applicable\n\n### Output:\nfrom chatterbot import ChatBot\nfrom chatterbot.trainers import ListTrainer\n\nbot = ChatBot('Bot')\nbot.set_trainer(ListTrainer)\n\nconversation = [\n    'Hello',\n    'Hi there!',\n    'What is your name?',\n    'My name is Bot. Nice to meet you!'\n]\n\nbot.train(conversation)\n\nwhile True:\n    request = input('You: ')\n    response = bot.get_response(request)\n    print('Bot: ', response)"}
{"instruction":"Create a Python program to find all combinations of three numbers that add up to a given sum.","input":"targetSum = 7","output":"def threeNumSum(arr, targetSum):\n    combinations = []\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == targetSum:\n                    combination = [arr[i], arr[j], arr[k]]\n                    combinations.append(combination)\n    \n    return combinations\n\narr = [2, 3, 4, 5, 6]\ntargetSum = 7\nprint(threeNumSum(arr, targetSum))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find all combinations of three numbers that add up to a given sum.\n\n### Input:\ntargetSum = 7\n\n### Output:\ndef threeNumSum(arr, targetSum):\n    combinations = []\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == targetSum:\n                    combination = [arr[i], arr[j], arr[k]]\n                    combinations.append(combination)\n    \n    return combinations\n\narr = [2, 3, 4, 5, 6]\ntargetSum = 7\nprint(threeNumSum(arr, targetSum))"}
{"instruction":"Generate a Python script to download the source code of a given web page.","input":"url = \"https:\/\/www.example.com\"","output":"import urllib.request\n\ndef download_webpage_source(url):\n    '''This function will download the source code of a given web page'''\n\n    response = urllib.request.urlopen(url)\n    data = response.read()\n    text = data.decode('utf-8')\n\n    return text","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to download the source code of a given web page.\n\n### Input:\nurl = \"https:\/\/www.example.com\"\n\n### Output:\nimport urllib.request\n\ndef download_webpage_source(url):\n    '''This function will download the source code of a given web page'''\n\n    response = urllib.request.urlopen(url)\n    data = response.read()\n    text = data.decode('utf-8')\n\n    return text"}
{"instruction":"Generate a valid python program to identify the longest sub-sequence in a given list.","input":"[2, 3, 7, 4, 9, 6]","output":"def longest_seq(nums):\n    longest_seq = []\n    current_seq = [nums[0]]\n    for n in nums[1:]:\n        if n > current_seq[-1]:\n            current_seq.append(n)\n            if len(current_seq) > len(longest_seq):\n                longest_seq = current_seq\n        else:\n            current_seq = [n]\n    return longest_seq\n\nlongest = longest_seq([2, 3, 7, 4, 9, 6])\nprint(longest)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a valid python program to identify the longest sub-sequence in a given list.\n\n### Input:\n[2, 3, 7, 4, 9, 6]\n\n### Output:\ndef longest_seq(nums):\n    longest_seq = []\n    current_seq = [nums[0]]\n    for n in nums[1:]:\n        if n > current_seq[-1]:\n            current_seq.append(n)\n            if len(current_seq) > len(longest_seq):\n                longest_seq = current_seq\n        else:\n            current_seq = [n]\n    return longest_seq\n\nlongest = longest_seq([2, 3, 7, 4, 9, 6])\nprint(longest)"}
{"instruction":"Create a web scraper in Python using the BeautifulSoup library. This scraper should be able to extract information from a web page and store it in a list of dictionaries.","input":"HTML document of a web page\n<html>\n <head>\n  <title>Example Page<\/title>\n <\/head>\n <body>\n  <h1>Welcome to my page!<\/h1>\n  <p>Here is some information about me:<\/p>\n  <ul>\n   <li>Name: John Smith<\/li>\n   <li>Age: 38<\/li>\n  <\/ul>\n <\/body>\n<\/html>","output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http:\/\/example.com\/'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\ndata = []\nfor li in soup.find_all('li'):\n    data.append({\n        'name': li.text.split(\":\")[0],\n        'value': li.text.split(\":\")[1]\n    })\n\nprint(data)\n# Output: [{'name': 'Name', 'value': 'John Smith'}, {'name': 'Age', 'value': '38'}]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python using the BeautifulSoup library. This scraper should be able to extract information from a web page and store it in a list of dictionaries.\n\n### Input:\nHTML document of a web page\n<html>\n <head>\n  <title>Example Page<\/title>\n <\/head>\n <body>\n  <h1>Welcome to my page!<\/h1>\n  <p>Here is some information about me:<\/p>\n  <ul>\n   <li>Name: John Smith<\/li>\n   <li>Age: 38<\/li>\n  <\/ul>\n <\/body>\n<\/html>\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http:\/\/example.com\/'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\ndata = []\nfor li in soup.find_all('li'):\n    data.append({\n        'name': li.text.split(\":\")[0],\n        'value': li.text.split(\":\")[1]\n    })\n\nprint(data)\n# Output: [{'name': 'Name', 'value': 'John Smith'}, {'name': 'Age', 'value': '38'}]"}
{"instruction":"Write a Python program to generate random passwords of six characters long and include lowercase letters, uppercase letters, and numbers.","input":"Not applicable","output":"import string\nimport random\n\ndef generate_password():\n password_characters = string.ascii_letters + string.digits \n password = ''.join(random.choice(password_characters) for i in range(6))\n return password\n\nprint(generate_password())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate random passwords of six characters long and include lowercase letters, uppercase letters, and numbers.\n\n### Input:\nNot applicable\n\n### Output:\nimport string\nimport random\n\ndef generate_password():\n password_characters = string.ascii_letters + string.digits \n password = ''.join(random.choice(password_characters) for i in range(6))\n return password\n\nprint(generate_password())"}
{"instruction":"Create a Python program that, given a person's Birthdate and current date, returns the age of the person.","input":"Birthdate: 6 Dec 1996\nCurrent Date: 18 March 2021","output":"def calculate_age(birthdate, current_date):\n    age = current_date.year - birthdate.year\n    if current_date.month < birthdate.month:\n        age -= 1\n    elif (current_date.month == birthdate.month and\n          current_date.day < birthdate.day):\n        age -= 1\n    return age\n\nimport datetime\nbirthdate = datetime.date(1996, 12, 6)\ncurrent_date = datetime.date(2021, 3, 18)\nage = calculate_age(birthdate, current_date)\nprint(age)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that, given a person's Birthdate and current date, returns the age of the person.\n\n### Input:\nBirthdate: 6 Dec 1996\nCurrent Date: 18 March 2021\n\n### Output:\ndef calculate_age(birthdate, current_date):\n    age = current_date.year - birthdate.year\n    if current_date.month < birthdate.month:\n        age -= 1\n    elif (current_date.month == birthdate.month and\n          current_date.day < birthdate.day):\n        age -= 1\n    return age\n\nimport datetime\nbirthdate = datetime.date(1996, 12, 6)\ncurrent_date = datetime.date(2021, 3, 18)\nage = calculate_age(birthdate, current_date)\nprint(age)"}
{"instruction":"Compose a python program to compare the elements of two strings and return the longest shared substring","input":"str1: 'thequickbrownfox',\nstr2: 'jumpedoverthelazydog'","output":"def longestSharedSubstring(str1, str2): \n  \n    # Variables to store the current substring \n    currentSubstring = \"\" \n    longestSubstring = \"\" \n  \n    # Compare every element of both the strings \n    for i in range(len(str1)): \n        for j in range(len(str2)): \n  \n            # Move forward if the characters match \n            if (str1[i] == str2[j]): \n                currentSubstring += str1[i] \n  \n                # Update max substring if required \n                if (len(currentSubstring) > len(longestSubstring)): \n                    longestSubstring = currentSubstring \n  \n            else: \n                currentSubstring = \"\" \n  \n    return longestSubstring \n\nlongestSubstring = longestSharedSubstring('thequickbrownfox', 'jumpedoverthelazydog')\nprint(longestSubstring)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a python program to compare the elements of two strings and return the longest shared substring\n\n### Input:\nstr1: 'thequickbrownfox',\nstr2: 'jumpedoverthelazydog'\n\n### Output:\ndef longestSharedSubstring(str1, str2): \n  \n    # Variables to store the current substring \n    currentSubstring = \"\" \n    longestSubstring = \"\" \n  \n    # Compare every element of both the strings \n    for i in range(len(str1)): \n        for j in range(len(str2)): \n  \n            # Move forward if the characters match \n            if (str1[i] == str2[j]): \n                currentSubstring += str1[i] \n  \n                # Update max substring if required \n                if (len(currentSubstring) > len(longestSubstring)): \n                    longestSubstring = currentSubstring \n  \n            else: \n                currentSubstring = \"\" \n  \n    return longestSubstring \n\nlongestSubstring = longestSharedSubstring('thequickbrownfox', 'jumpedoverthelazydog')\nprint(longestSubstring)"}
{"instruction":"Develop a python class to create a tree structure from a given list of tuples.","input":"tuples = [('a', 'b'), ('a', 'c'), ('b', 'd'), ('b', 'e')]","output":"class TreeNode: \n  \n    # Constructor to create a new node \n    def __init__(self, data): \n        self.data = data \n        self.children = []\n  \n    def add_child(self, node): \n        self.children.append(node) \n  \n# function to create tree from given tuples \ndef createTree(tuples): \n    nodes = {} \n    for x, y in tuples: \n  \n        # If x is not already a key \n        if x not in nodes: \n            # Create a new TreeNode \n            nodes[x] = TreeNode(x) \n  \n        # If y is not already a key \n        if y not in nodes: \n            # Create a new TreeNode \n            nodes[y] = TreeNode(y) \n  \n        # Append the new TreeNode to the children \n        # of the node X \n        nodes[x].add_child(nodes[y]) \n  \n    # Return the root of the tree \n    return nodes['a']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python class to create a tree structure from a given list of tuples.\n\n### Input:\ntuples = [('a', 'b'), ('a', 'c'), ('b', 'd'), ('b', 'e')]\n\n### Output:\nclass TreeNode: \n  \n    # Constructor to create a new node \n    def __init__(self, data): \n        self.data = data \n        self.children = []\n  \n    def add_child(self, node): \n        self.children.append(node) \n  \n# function to create tree from given tuples \ndef createTree(tuples): \n    nodes = {} \n    for x, y in tuples: \n  \n        # If x is not already a key \n        if x not in nodes: \n            # Create a new TreeNode \n            nodes[x] = TreeNode(x) \n  \n        # If y is not already a key \n        if y not in nodes: \n            # Create a new TreeNode \n            nodes[y] = TreeNode(y) \n  \n        # Append the new TreeNode to the children \n        # of the node X \n        nodes[x].add_child(nodes[y]) \n  \n    # Return the root of the tree \n    return nodes['a']"}
{"instruction":"Write Python code to  find the maximum distance between two elements in a given array","input":"x = [2, 4, 8, 11, 13, 18, 19, 21]","output":"def maxdistance(x): \n    # Initialize max distance \n    max_distance = 0\n    \n    for i in range(0, len(x)):\n        for j in range(i + 1, len(x)):\n            # Find the current distance between two elements\n            d = abs(x[i] - x[j])\n            # Update the maximum distance \n            if max_distance < d: \n                max_distance = d\n                \n    return max_distance","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to  find the maximum distance between two elements in a given array\n\n### Input:\nx = [2, 4, 8, 11, 13, 18, 19, 21]\n\n### Output:\ndef maxdistance(x): \n    # Initialize max distance \n    max_distance = 0\n    \n    for i in range(0, len(x)):\n        for j in range(i + 1, len(x)):\n            # Find the current distance between two elements\n            d = abs(x[i] - x[j])\n            # Update the maximum distance \n            if max_distance < d: \n                max_distance = d\n                \n    return max_distance"}
{"instruction":"Create an application in Python that takes user input for an year and prints the day of the week for January 1st of that year.","input":"Year: 2018","output":"import datetime\n\ndef day_of_week(year): \n date = datetime.datetime(year, 1, 1)\n return date.strftime(\"%A\")\n\nprint(day_of_week(2018)) # Output: Monday","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an application in Python that takes user input for an year and prints the day of the week for January 1st of that year.\n\n### Input:\nYear: 2018\n\n### Output:\nimport datetime\n\ndef day_of_week(year): \n date = datetime.datetime(year, 1, 1)\n return date.strftime(\"%A\")\n\nprint(day_of_week(2018)) # Output: Monday"}
{"instruction":"Implement a 'boggle_checker' function in Python 3 that takes in a 4x4 board and returns a list of all words present on the board.","input":"boggle_board = [\n['a', 'b', 'c', 'd'],\n['x', 'o', 'n', 'e'],\n['q', 'u', 'i', 't'],\n['z', 'y', 'p', 's'],\n]","output":"def boggle_checker(board):\n    current_words = []\n    # loop through all characters on board\n    for row_i, row in enumerate(board):\n        for col_i, col in enumerate(row):\n            # look up in dictionary for all words starting at this character\n            current_words.extend(get_words(board, row_i, col_i))\n\n    # remove duplicates\n    final_words = list(set(current_words))\n\n    return final_words\n\ndef get_words(board, row_i, col_i):\n    words = []\n    # recursive dfs to form all words\n    get_words_rec(board, row_i, col_i, [], words)\n    return words\n\ndef get_words_rec(board, row_i, col_i, current_word, words):\n    # base case when at the edge of board\n    if row_i < 0 or col_i < 0 or row_i > 3 or col_i > 3:\n        return\n\n    current_char = board[row_i][col_i]\n    # check if the current path lies in the dictionary\n    if is_word(\"\".join(current_word + [current_char])):\n        words.append(\"\".join(current_word + [current_char]))\n\n    # explore all surrounding cells\n    board[row_i][col_i] = None\n    get_words_rec(board, row_i - 1, col_i, current_word + [current_char], words)\n    get_words_rec(board, row_i + 1, col_i, current_word + [current_char], words)\n    get_words_rec(board, row_i, col_i - 1, current_word + [current_char], words) \n    get_words_rec(board, row_i, col_i + 1, current_word + [current_char], words)\n    board[row_i][col_i] = current_char\n\ndef is_word(word):\n    # dummy function that checks if a word lies in the dictionary\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a 'boggle_checker' function in Python 3 that takes in a 4x4 board and returns a list of all words present on the board.\n\n### Input:\nboggle_board = [\n['a', 'b', 'c', 'd'],\n['x', 'o', 'n', 'e'],\n['q', 'u', 'i', 't'],\n['z', 'y', 'p', 's'],\n]\n\n### Output:\ndef boggle_checker(board):\n    current_words = []\n    # loop through all characters on board\n    for row_i, row in enumerate(board):\n        for col_i, col in enumerate(row):\n            # look up in dictionary for all words starting at this character\n            current_words.extend(get_words(board, row_i, col_i))\n\n    # remove duplicates\n    final_words = list(set(current_words))\n\n    return final_words\n\ndef get_words(board, row_i, col_i):\n    words = []\n    # recursive dfs to form all words\n    get_words_rec(board, row_i, col_i, [], words)\n    return words\n\ndef get_words_rec(board, row_i, col_i, current_word, words):\n    # base case when at the edge of board\n    if row_i < 0 or col_i < 0 or row_i > 3 or col_i > 3:\n        return\n\n    current_char = board[row_i][col_i]\n    # check if the current path lies in the dictionary\n    if is_word(\"\".join(current_word + [current_char])):\n        words.append(\"\".join(current_word + [current_char]))\n\n    # explore all surrounding cells\n    board[row_i][col_i] = None\n    get_words_rec(board, row_i - 1, col_i, current_word + [current_char], words)\n    get_words_rec(board, row_i + 1, col_i, current_word + [current_char], words)\n    get_words_rec(board, row_i, col_i - 1, current_word + [current_char], words) \n    get_words_rec(board, row_i, col_i + 1, current_word + [current_char], words)\n    board[row_i][col_i] = current_char\n\ndef is_word(word):\n    # dummy function that checks if a word lies in the dictionary\n    return True"}
{"instruction":"Propose a solution to build an AI assistant that can format and justify paragraphs using Python.","input":"Paragraph with improper formatting","output":"# Install library for formatting and justifying paragraphs\npip install justify\n\n# Function for formatting and justifying paragraphs\ndef format_and_justify_paragraphs(paragraph):\n    from justify import Justify\n    formatted_text = Justify(paragraph, width=90).format()\n    return formatted_text\n\n# Example\nparagraph = \"Paragraph with improper formatting\";\nformatted_text = format_and_justify_paragraphs(paragraph)\nprint(formatted_text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPropose a solution to build an AI assistant that can format and justify paragraphs using Python.\n\n### Input:\nParagraph with improper formatting\n\n### Output:\n# Install library for formatting and justifying paragraphs\npip install justify\n\n# Function for formatting and justifying paragraphs\ndef format_and_justify_paragraphs(paragraph):\n    from justify import Justify\n    formatted_text = Justify(paragraph, width=90).format()\n    return formatted_text\n\n# Example\nparagraph = \"Paragraph with improper formatting\";\nformatted_text = format_and_justify_paragraphs(paragraph)\nprint(formatted_text)"}
{"instruction":"Generate a python program to modify all the characters in a string to lowercase","input":"string = \"HELLO WORLD\"","output":"def to_lowercase(string):\n    lowercase_string = \"\"\n    for char in string:\n        lowercase_string += char.lower()\n    return lowercase_string\n\nif __name__ == '__main__':\n    string = \"HELLO WORLD\"\n    print(to_lowercase(string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to modify all the characters in a string to lowercase\n\n### Input:\nstring = \"HELLO WORLD\"\n\n### Output:\ndef to_lowercase(string):\n    lowercase_string = \"\"\n    for char in string:\n        lowercase_string += char.lower()\n    return lowercase_string\n\nif __name__ == '__main__':\n    string = \"HELLO WORLD\"\n    print(to_lowercase(string))"}
{"instruction":"Create a web-application which monitors the stock market using Python. The application should display the current stock prices and chart prices for the past 7 days.","input":"Not applicable","output":"import flask\nfrom flask import Flask, request\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\n# Creating a Flask app\napp = Flask(__name__)\n\n# List of stocks\nstock_list = [\"MSFT\", \"GOOGL\", \"AAPL\", \"AMZN\", \"INTC\"]\n\n# API call to get data\n@app.route(\"\/stockdata\", methods=['GET'])\ndef stock_data():\n stock_name = request.args.get(\"stock\")\n if stock_name in stock_list:\n\turl = \"https:\/\/www.alphavantage.co\/query?function=TIME_SERIES_DAILY&symbol=\" + stock_name + \"&apikey=<your_api_key>\"\n\tdf = pd.read_json(url)\n\tdf = df.iloc[1]\n\t# Plots a graph of data\n\tdates = df.index\n\tprices = df.values\n\t# Create figure\n\tfig, ax = plt.subplots()\n\t# Format date x-axis\n\tax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\n\t# Plot data\n\tax.plot(dates, prices)\n\tpng = \"static\/graph.png\"  # Save image to static\/ folder\n\tplt.savefig(png, bbox_inches='tight')\n\t# Return data\n\tdata = {\"date\": dates.tolist(),\n\t\t\t\"price\": prices.tolist(),\n\t\t\t\"graph\": png}\n\treturn flask.jsonify(data)\n\n# Main section\nif __name__ == \"__main__\":\n\tapp.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web-application which monitors the stock market using Python. The application should display the current stock prices and chart prices for the past 7 days.\n\n### Input:\nNot applicable\n\n### Output:\nimport flask\nfrom flask import Flask, request\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\n# Creating a Flask app\napp = Flask(__name__)\n\n# List of stocks\nstock_list = [\"MSFT\", \"GOOGL\", \"AAPL\", \"AMZN\", \"INTC\"]\n\n# API call to get data\n@app.route(\"\/stockdata\", methods=['GET'])\ndef stock_data():\n stock_name = request.args.get(\"stock\")\n if stock_name in stock_list:\n\turl = \"https:\/\/www.alphavantage.co\/query?function=TIME_SERIES_DAILY&symbol=\" + stock_name + \"&apikey=<your_api_key>\"\n\tdf = pd.read_json(url)\n\tdf = df.iloc[1]\n\t# Plots a graph of data\n\tdates = df.index\n\tprices = df.values\n\t# Create figure\n\tfig, ax = plt.subplots()\n\t# Format date x-axis\n\tax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\n\t# Plot data\n\tax.plot(dates, prices)\n\tpng = \"static\/graph.png\"  # Save image to static\/ folder\n\tplt.savefig(png, bbox_inches='tight')\n\t# Return data\n\tdata = {\"date\": dates.tolist(),\n\t\t\t\"price\": prices.tolist(),\n\t\t\t\"graph\": png}\n\treturn flask.jsonify(data)\n\n# Main section\nif __name__ == \"__main__\":\n\tapp.run()"}
{"instruction":"Create a function in Python to migrate data from a SQL database to a NoSQL database.","input":"","output":"def migrate_data(src_db, dest_db):\n    \"\"\"\n    This function will migrate data from a SQL database \n    to a NoSQL database\n    \"\"\"\n    # Connect to the source SQL database\n    connection = src_db.connect()\n\n    # Iterate through each table in the source database\n    for table_name in src_db.get_table_names():\n        # Retrieve the table data\n        table_data = src_db.execute(\"SELECT * From \" + table_name)\n\n        # Insert the data into the destination NoSQL database\n        dest_db.write(table_name, table_data)\n\n    # Close the connection\n    connection.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to migrate data from a SQL database to a NoSQL database.\n\n### Input:\n\n\n### Output:\ndef migrate_data(src_db, dest_db):\n    \"\"\"\n    This function will migrate data from a SQL database \n    to a NoSQL database\n    \"\"\"\n    # Connect to the source SQL database\n    connection = src_db.connect()\n\n    # Iterate through each table in the source database\n    for table_name in src_db.get_table_names():\n        # Retrieve the table data\n        table_data = src_db.execute(\"SELECT * From \" + table_name)\n\n        # Insert the data into the destination NoSQL database\n        dest_db.write(table_name, table_data)\n\n    # Close the connection\n    connection.close()"}
{"instruction":"Generate a Python program which multiplies all the numbers between two given numbers.","input":"start: 2\nend: 10","output":"def multiply_between(start, end):\n    result = 1\n    for i in range(start, end + 1):\n        result *= i\n    return result\n\nprint(multiply_between(2, 10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program which multiplies all the numbers between two given numbers.\n\n### Input:\nstart: 2\nend: 10\n\n### Output:\ndef multiply_between(start, end):\n    result = 1\n    for i in range(start, end + 1):\n        result *= i\n    return result\n\nprint(multiply_between(2, 10))"}
{"instruction":"Create a class in Python to extend object class","input":"","output":"class MyClass(object):\n    pass","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to extend object class\n\n### Input:\n\n\n### Output:\nclass MyClass(object):\n    pass"}
{"instruction":"Write a Python program to compute the sum of items in a given list and multiply it by a given number.","input":"{'list': [1, 3, 5, 7], 'num': 3}","output":"#initialize variables\nlist = [1, 3, 5, 7]\nnum = 3\n\n# compute sum\nsum = 0\nfor i in list:\n    sum = sum + i\n\n# compute product\nresult = sum * num\n\n# Print result\nprint(\"Result: \", result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compute the sum of items in a given list and multiply it by a given number.\n\n### Input:\n{'list': [1, 3, 5, 7], 'num': 3}\n\n### Output:\n#initialize variables\nlist = [1, 3, 5, 7]\nnum = 3\n\n# compute sum\nsum = 0\nfor i in list:\n    sum = sum + i\n\n# compute product\nresult = sum * num\n\n# Print result\nprint(\"Result: \", result)"}
{"instruction":"Design a function in Python to generate a Fibonacci sequence.","input":"","output":"def Fibonacci(n): \n\tif n<0: \n\t\tprint(\"Incorrect input\") \n\t# First Fibonacci number is 0 \n\telif n==1: \n\t\treturn 0\n\t# Second Fibonacci number is 1 \n\telif n==2: \n\t\treturn 1\n\telse: \n\t\treturn Fibonacci(n-1)+Fibonacci(n-2) \n\n# Driver Program \n\nprint(Fibonacci(9))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to generate a Fibonacci sequence.\n\n### Input:\n\n\n### Output:\ndef Fibonacci(n): \n\tif n<0: \n\t\tprint(\"Incorrect input\") \n\t# First Fibonacci number is 0 \n\telif n==1: \n\t\treturn 0\n\t# Second Fibonacci number is 1 \n\telif n==2: \n\t\treturn 1\n\telse: \n\t\treturn Fibonacci(n-1)+Fibonacci(n-2) \n\n# Driver Program \n\nprint(Fibonacci(9))"}
{"instruction":"Write a Python program to remove all duplicate elements in a given list.","input":"given_list = [1, 2, 3, 4, 3, 2, 1]","output":"def remove_duplicates(given_list):\n    output = []\n    for num in given_list:\n        if num not in output:\n            output.append(num)\n    return output","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to remove all duplicate elements in a given list.\n\n### Input:\ngiven_list = [1, 2, 3, 4, 3, 2, 1]\n\n### Output:\ndef remove_duplicates(given_list):\n    output = []\n    for num in given_list:\n        if num not in output:\n            output.append(num)\n    return output"}
{"instruction":"Create a Python program that given an array of strings, returns an array with all the strings that have a length of more than 10 characters.","input":"[ \"example\", \"string\", \"webapp\", \"happiness\", \"testcase\", \"application\" ]","output":"def getLongStrings(arr):\n return [s for s in arr if len(s) > 10]\n \nlong_strings = getLongStrings([\"example\", \"string\", \"webapp\", \"happiness\", \"testcase\", \"application\"]) \nprint(long_strings)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that given an array of strings, returns an array with all the strings that have a length of more than 10 characters.\n\n### Input:\n[ \"example\", \"string\", \"webapp\", \"happiness\", \"testcase\", \"application\" ]\n\n### Output:\ndef getLongStrings(arr):\n return [s for s in arr if len(s) > 10]\n \nlong_strings = getLongStrings([\"example\", \"string\", \"webapp\", \"happiness\", \"testcase\", \"application\"]) \nprint(long_strings)"}
{"instruction":"Generate a Python program that counts the number of words and the average word length in a given sentence.","input":"","output":"def count_words(sentence):\n  words = sentence.split()\n  num_words = len(words)\n  total_len = 0\n  for word in words:\n    total_len += len(word)\n  avg_word_len = total_len \/ num_words\n  return (num_words, avg_word_len)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that counts the number of words and the average word length in a given sentence.\n\n### Input:\n\n\n### Output:\ndef count_words(sentence):\n  words = sentence.split()\n  num_words = len(words)\n  total_len = 0\n  for word in words:\n    total_len += len(word)\n  avg_word_len = total_len \/ num_words\n  return (num_words, avg_word_len)"}
{"instruction":"Can you generate the Fibonacci sequence up to 20 using Python?","input":"","output":"# Fibonacci Sequence up to 20\na, b = 0, 1\nwhile a < 20:\n    print(a)\n    a, b = b, a+b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you generate the Fibonacci sequence up to 20 using Python?\n\n### Input:\n\n\n### Output:\n# Fibonacci Sequence up to 20\na, b = 0, 1\nwhile a < 20:\n    print(a)\n    a, b = b, a+b"}
{"instruction":"Write an algorithm in Python to generate a random non-repeating integer array of size N","input":"10","output":"import random \n\ndef random_array(N): \n \n    result = [] \n  \n    for i in range(N): \n  \n        # Stores the number in result after checking for its presence. \n        data = random.randint(1, 100) \n  \n        if data not in result: \n            result.append(data) \n          \n    return result \n\n# Driver Code \nN = 10\nres = random_array(N) \nprint(res)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to generate a random non-repeating integer array of size N\n\n### Input:\n10\n\n### Output:\nimport random \n\ndef random_array(N): \n \n    result = [] \n  \n    for i in range(N): \n  \n        # Stores the number in result after checking for its presence. \n        data = random.randint(1, 100) \n  \n        if data not in result: \n            result.append(data) \n          \n    return result \n\n# Driver Code \nN = 10\nres = random_array(N) \nprint(res)"}
{"instruction":"Create a Python program that will generate random passwords consisting of any combination of uppercase, lowercase letters, and numbers.","input":"Not applicable","output":"import random\n\ndef generate_password(length):\n    password = \"\"\n    for i in range(length):\n        x = random.randint(1,3)\n        if x == 1:\n            password += chr(random.randint(48,57))\n        elif x == 2:\n            password += chr(random.randint(65,90))\n        else:\n            password += chr(random.randint(97,122))\n    return password","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that will generate random passwords consisting of any combination of uppercase, lowercase letters, and numbers.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\ndef generate_password(length):\n    password = \"\"\n    for i in range(length):\n        x = random.randint(1,3)\n        if x == 1:\n            password += chr(random.randint(48,57))\n        elif x == 2:\n            password += chr(random.randint(65,90))\n        else:\n            password += chr(random.randint(97,122))\n    return password"}
{"instruction":"Write a code in Python to print all numbers between 2000 and 3200, which are divisible by 7 and multiple of 5.","input":"","output":"def divisible_numbers():\n  for num in range(2000, 3201):\n    if (num % 7 == 0) and (num % 5 == 0):\n      print(num, end=\", \")\n\nif __name__ == '__main__':\n  divisible_numbers()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python to print all numbers between 2000 and 3200, which are divisible by 7 and multiple of 5.\n\n### Input:\n\n\n### Output:\ndef divisible_numbers():\n  for num in range(2000, 3201):\n    if (num % 7 == 0) and (num % 5 == 0):\n      print(num, end=\", \")\n\nif __name__ == '__main__':\n  divisible_numbers()"}
{"instruction":"Given the following code snippet, create a function in Python that takes two strings and returns true if one string is a substring of the other.","input":"s1 = 'Hello World'\ns2 = 'World'","output":"def is_substring(s1, s2):\n # check for empty strings \n if s1 == '' or s2 == '':\n return False\n \n # check if s2 is a substring of s1\n if s1.find(s2) > -1:\n return True\n \n return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven the following code snippet, create a function in Python that takes two strings and returns true if one string is a substring of the other.\n\n### Input:\ns1 = 'Hello World'\ns2 = 'World'\n\n### Output:\ndef is_substring(s1, s2):\n # check for empty strings \n if s1 == '' or s2 == '':\n return False\n \n # check if s2 is a substring of s1\n if s1.find(s2) > -1:\n return True\n \n return False"}
{"instruction":"Create a program header to go at the beginning of every python program you complete.","input":"","output":"\"\"\"\nAuthors: <Your Name>\nFilename: <file name>.py\nDescription: <A brief description of the program>\n\"\"\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program header to go at the beginning of every python program you complete.\n\n### Input:\n\n\n### Output:\n\"\"\"\nAuthors: <Your Name>\nFilename: <file name>.py\nDescription: <A brief description of the program>\n\"\"\""}
{"instruction":"Generate a machine learning model in Python to predict the likelihood of a loan default.","input":"Data table with features such as credit score, loan amount, loan term and repayment history","output":"import pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\n# Read data\nloan_data = pd.read_csv(\u2018loan_data.csv\u2019)\n\n# Extract features\nfeatures = loan_data.drop(['default'], axis=1)\n\n# Extract labels\nlabels = loan_data['default']\n\n# Split main data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42)\n\n# Create logistic regression model\nmodel = LogisticRegression()\n\n# Train model\nmodel.fit(X_train, y_train)\n\n# Evaluate model\nscore = model.score(X_test, y_test)\nprint('Model score:', score)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a machine learning model in Python to predict the likelihood of a loan default.\n\n### Input:\nData table with features such as credit score, loan amount, loan term and repayment history\n\n### Output:\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\n# Read data\nloan_data = pd.read_csv(\u2018loan_data.csv\u2019)\n\n# Extract features\nfeatures = loan_data.drop(['default'], axis=1)\n\n# Extract labels\nlabels = loan_data['default']\n\n# Split main data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42)\n\n# Create logistic regression model\nmodel = LogisticRegression()\n\n# Train model\nmodel.fit(X_train, y_train)\n\n# Evaluate model\nscore = model.score(X_test, y_test)\nprint('Model score:', score)"}
{"instruction":"Create a program in Python that takes a string as input and returns a new string with the words of the input string reversed, but with the same order of characters in each word.","input":"Not applicable","output":"def revString(s):\n    # Split the string into words\n    words = s.split(' ')\n    new_words = []\n    # Reverse each word, but keep the order of the characters\n    for word in words:\n        new_word = \"\"\n        for i in range(len(word)):\n            new_word += word[len(word) - i - 1]\n        new_words.append(new_word)\n    # Join the reversed words\n    new_string = ' '.join(new_words)\n    return new_string\n\nprint(revString(\"Hello World\"))  # prints \"olleH dlroW\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes a string as input and returns a new string with the words of the input string reversed, but with the same order of characters in each word.\n\n### Input:\nNot applicable\n\n### Output:\ndef revString(s):\n    # Split the string into words\n    words = s.split(' ')\n    new_words = []\n    # Reverse each word, but keep the order of the characters\n    for word in words:\n        new_word = \"\"\n        for i in range(len(word)):\n            new_word += word[len(word) - i - 1]\n        new_words.append(new_word)\n    # Join the reversed words\n    new_string = ' '.join(new_words)\n    return new_string\n\nprint(revString(\"Hello World\"))  # prints \"olleH dlroW\""}
{"instruction":"Rewrite the following code in Python.","input":"let x = 5;\nlet y = 10;\nlet z = x + y;","output":"x = 5\ny = 10\nz = x + y","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code in Python.\n\n### Input:\nlet x = 5;\nlet y = 10;\nlet z = x + y;\n\n### Output:\nx = 5\ny = 10\nz = x + y"}
{"instruction":"Design a Python algorithm to find the longest increasing subarray.","input":"arr = [1, 3, -2, 5, 8, -3, 4, 6]","output":"def longest_increasing_subarray(arr): \n\tsize = len(arr) \n\tmax_len = 1\n\t\n\tfor index in range(size): \n\t\tmax_len_ending_here = 1\n\t\tj = index + 1\n\t\t\n\t\twhile j < size: \n\t\t\tif arr[j] > arr[j - 1]: \n\t\t\t\tmax_len_ending_here += 1\n\t\t\tj += 1\n\t\t\t\n\t\tif max_len_ending_here > max_len: \n\t\t\tmax_len = max_len_ending_here \n\n\treturn max_len\n\narr = [1, 3, -2, 5, 8, -3, 4, 6] \nresult = longest_increasing_subarray(arr)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python algorithm to find the longest increasing subarray.\n\n### Input:\narr = [1, 3, -2, 5, 8, -3, 4, 6]\n\n### Output:\ndef longest_increasing_subarray(arr): \n\tsize = len(arr) \n\tmax_len = 1\n\t\n\tfor index in range(size): \n\t\tmax_len_ending_here = 1\n\t\tj = index + 1\n\t\t\n\t\twhile j < size: \n\t\t\tif arr[j] > arr[j - 1]: \n\t\t\t\tmax_len_ending_here += 1\n\t\t\tj += 1\n\t\t\t\n\t\tif max_len_ending_here > max_len: \n\t\t\tmax_len = max_len_ending_here \n\n\treturn max_len\n\narr = [1, 3, -2, 5, 8, -3, 4, 6] \nresult = longest_increasing_subarray(arr)\nprint(result)"}
{"instruction":"Construct a Python program to read in a sequence of numbers, find the largest number and its position in the sequence.","input":"[3, 2, 5, 1, 9]","output":"sequence = [3, 2, 5, 1, 9]\n\n# finding the largest number\nmax_num = max(sequence)\n\n# finding the index of the largest number in the sequence\nindex = sequence.index(max_num)\n\nprint(\"The largest number in the sequence is:\", max_num)\nprint(\"The position of the largest number in the sequence is:\", index)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to read in a sequence of numbers, find the largest number and its position in the sequence.\n\n### Input:\n[3, 2, 5, 1, 9]\n\n### Output:\nsequence = [3, 2, 5, 1, 9]\n\n# finding the largest number\nmax_num = max(sequence)\n\n# finding the index of the largest number in the sequence\nindex = sequence.index(max_num)\n\nprint(\"The largest number in the sequence is:\", max_num)\nprint(\"The position of the largest number in the sequence is:\", index)"}
{"instruction":"Develop a Python program that takes a long sentence (i.e. around 200 words) and formats it into a series of shorter sentences (under 50 words each).","input":"The W3C HTML 4.01 specification defines the language used to create web pages, including elements such as <head>, <body>, <div> and <span>, as well as the structure of the web document as it appears in a web browser.","output":"import re\n\nsentence = \"The W3C HTML 4.01 specification defines the language used to create web pages, including elements such as <head>, <body>, <div> and <span>, as well as the structure of the web document as it appears in a web browser.\"\n\n# Split sentence into individual words\nwords = re.findall(r'\\w+', sentence)\n\n# Initialize empty output list\noutput = []\n\n# Split words into groups of 50 words\nwhile len(words) > 0:\n group = words[:50]\n output.append(' '.join(group))\n words = words[50:]\n\n# Print output\nfor line in output:\n print(line)\n\n# Output\n# The W3C HTML 4.01 specification defines the language used to create web pages,\n# including elements such as <head>, <body>, <div> and <span>,\n# as well as the structure of the web document as it appears in a web browser.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that takes a long sentence (i.e. around 200 words) and formats it into a series of shorter sentences (under 50 words each).\n\n### Input:\nThe W3C HTML 4.01 specification defines the language used to create web pages, including elements such as <head>, <body>, <div> and <span>, as well as the structure of the web document as it appears in a web browser.\n\n### Output:\nimport re\n\nsentence = \"The W3C HTML 4.01 specification defines the language used to create web pages, including elements such as <head>, <body>, <div> and <span>, as well as the structure of the web document as it appears in a web browser.\"\n\n# Split sentence into individual words\nwords = re.findall(r'\\w+', sentence)\n\n# Initialize empty output list\noutput = []\n\n# Split words into groups of 50 words\nwhile len(words) > 0:\n group = words[:50]\n output.append(' '.join(group))\n words = words[50:]\n\n# Print output\nfor line in output:\n print(line)\n\n# Output\n# The W3C HTML 4.01 specification defines the language used to create web pages,\n# including elements such as <head>, <body>, <div> and <span>,\n# as well as the structure of the web document as it appears in a web browser."}
{"instruction":"Write a script in Python for converting binary to decimal.","input":"\"1010\"","output":"input_binary = \"1010\"\ndecimal = int(input_binary, 2)\nprint(decimal)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script in Python for converting binary to decimal.\n\n### Input:\n\"1010\"\n\n### Output:\ninput_binary = \"1010\"\ndecimal = int(input_binary, 2)\nprint(decimal)"}
{"instruction":"Create a Python program to perform the Levenshtein Distance calculation.","input":"Not applicable","output":"def levenshteinDistance(str1, str2):\n # base case \n # if one of the strings is empty\n # then the Levenshtein distance will be equal\n # to the length of the other string\n if str1 == \"\":\n return len(str2)\n if str2 == \"\":\n return len(str1)\n \n # initialize the variables\n m = len(str1)\n n = len(str2)\n cost = 0\n \n # find the cost\n if str1[m-1] == str2[n-1]:\n cost = 0\n else:\n cost = 1\n \n # return the minimum of three possible operations\n return min(\n levenshteinDistance(str1[:-1], str2)+1, # delete\n levenshteinDistance(str1, str2[:-1])+1, # insert\n levenshteinDistance(str1[:-1], str2[:-1]) + cost # replace\n )\n \nstr1 = \"kitten\"\nstr2 = \"sitting\"\n \nprint(levenshteinDistance(str1, str2)) # 3","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to perform the Levenshtein Distance calculation.\n\n### Input:\nNot applicable\n\n### Output:\ndef levenshteinDistance(str1, str2):\n # base case \n # if one of the strings is empty\n # then the Levenshtein distance will be equal\n # to the length of the other string\n if str1 == \"\":\n return len(str2)\n if str2 == \"\":\n return len(str1)\n \n # initialize the variables\n m = len(str1)\n n = len(str2)\n cost = 0\n \n # find the cost\n if str1[m-1] == str2[n-1]:\n cost = 0\n else:\n cost = 1\n \n # return the minimum of three possible operations\n return min(\n levenshteinDistance(str1[:-1], str2)+1, # delete\n levenshteinDistance(str1, str2[:-1])+1, # insert\n levenshteinDistance(str1[:-1], str2[:-1]) + cost # replace\n )\n \nstr1 = \"kitten\"\nstr2 = \"sitting\"\n \nprint(levenshteinDistance(str1, str2)) # 3"}
{"instruction":"Create a Python program to randomly shuffle an array of integers.","input":"","output":"def shuffle(arr):\n    \"\"\"Randomly shuffles an array of integers\"\"\"\n    # Using Fisher-Yates shuffle algorithm\n    for i in range(len(arr) - 1, 0, -1):\n        # Generate random index\n        j = random.randint(0, i)\n        # Swap elements\n        arr[i], arr[j] = arr[j], arr[i] \n    return arr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to randomly shuffle an array of integers.\n\n### Input:\n\n\n### Output:\ndef shuffle(arr):\n    \"\"\"Randomly shuffles an array of integers\"\"\"\n    # Using Fisher-Yates shuffle algorithm\n    for i in range(len(arr) - 1, 0, -1):\n        # Generate random index\n        j = random.randint(0, i)\n        # Swap elements\n        arr[i], arr[j] = arr[j], arr[i] \n    return arr"}
{"instruction":"Suggest a Python generator for all possible combinations of r elements in a list.","input":"","output":"def combination_generator(lst, r):\n    # Initialize empty list\n    combinations = []\n    \n    # Create a loop to pick every element\n    for i in range(len(lst)):\n        \n        # Create a loop to create permutations \n        # of the picked elements\n        for j in combinations:\n            s = j[:]\n            s.append(lst[i])\n            if len(s) == r:\n                combinations.append(s)\n            elif len(s) < r:\n                combinations.append(s)\n                for k in range(i+1, len(lst)):\n                    s = s[:]\n                    s.append(lst[k])\n                    if len(s) == r:\n                        combinations.append(s)\n    return combinations","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a Python generator for all possible combinations of r elements in a list.\n\n### Input:\n\n\n### Output:\ndef combination_generator(lst, r):\n    # Initialize empty list\n    combinations = []\n    \n    # Create a loop to pick every element\n    for i in range(len(lst)):\n        \n        # Create a loop to create permutations \n        # of the picked elements\n        for j in combinations:\n            s = j[:]\n            s.append(lst[i])\n            if len(s) == r:\n                combinations.append(s)\n            elif len(s) < r:\n                combinations.append(s)\n                for k in range(i+1, len(lst)):\n                    s = s[:]\n                    s.append(lst[k])\n                    if len(s) == r:\n                        combinations.append(s)\n    return combinations"}
{"instruction":"Write an algorithm in Python to search for a particular item in a sorted list.","input":"A sorted list lst = [1, 3, 6, 7, 11, 15]","output":"def binary_search(lst, x):\n # initializing low and high index values\n lowIdx = 0\n highIdx = len(lst)-1\n \n # loop until low index is not greater than high index \n while lowIdx <= highIdx: \n # calculate mid index \n midIdx = (lowIdx + highIdx)\/\/2\n\n# compare midIdx value with x \n if lst[midIdx] == x: \n return midIdx \n \n # if x is less than midIdx value \n elif lst[midIdx] > x: \n highIdx = midIdx - 1\n \n # if x is greater than midIdx value \n else: \n lowIdx = midIdx + 1\n\n# if x is not present then return -1\nreturn -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to search for a particular item in a sorted list.\n\n### Input:\nA sorted list lst = [1, 3, 6, 7, 11, 15]\n\n### Output:\ndef binary_search(lst, x):\n # initializing low and high index values\n lowIdx = 0\n highIdx = len(lst)-1\n \n # loop until low index is not greater than high index \n while lowIdx <= highIdx: \n # calculate mid index \n midIdx = (lowIdx + highIdx)\/\/2\n\n# compare midIdx value with x \n if lst[midIdx] == x: \n return midIdx \n \n # if x is less than midIdx value \n elif lst[midIdx] > x: \n highIdx = midIdx - 1\n \n # if x is greater than midIdx value \n else: \n lowIdx = midIdx + 1\n\n# if x is not present then return -1\nreturn -1"}
{"instruction":"Design a python program to implement a Greedy algorithm","input":"A set of jobs: {A: (3, 10), B: (4, 15), C: (2, 5)}","output":"def greedy(jobs):\n    jobs.sort(key=lambda x: x[1]\/x[0], reverse=True)\n    result = []\n    time = 0\n    for j in jobs:\n        time += j[0]\n        result.append((j[0], j[1], time))\n        \n    return result\n\njobs = [(3, 10), (4, 15), (2, 5)]\nprint(greedy(jobs))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program to implement a Greedy algorithm\n\n### Input:\nA set of jobs: {A: (3, 10), B: (4, 15), C: (2, 5)}\n\n### Output:\ndef greedy(jobs):\n    jobs.sort(key=lambda x: x[1]\/x[0], reverse=True)\n    result = []\n    time = 0\n    for j in jobs:\n        time += j[0]\n        result.append((j[0], j[1], time))\n        \n    return result\n\njobs = [(3, 10), (4, 15), (2, 5)]\nprint(greedy(jobs))"}
{"instruction":"Create a Python program to maximize the value of an expression. The expression consists of 3 integers and should be maximized by adding, subtracting, multiplying and\/or dividing the integers.","input":"[10, 5, 3]","output":"def maxValue(nums):\n maxValue = -1\n operators = ['+', '-', '*', '\/']\n\n for i in range(4):\n if operators[i] == '+':\n maxValue = max(maxValue, nums[0] + nums[1] + nums[2])\n elif operators[i] == '-':\n maxValue = max(maxValue, nums[0] - nums[1] - nums[2])\n elif operators[i] == '*':\n maxValue = max(maxValue, nums[0] * nums[1] * nums[2])\n else:\n maxValue = max(maxValue, nums[0] \/ nums[1] \/ nums[2])\n \n return maxValue\n \nprint(maxValue([10, 5, 3]))\n#Output: 15.0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to maximize the value of an expression. The expression consists of 3 integers and should be maximized by adding, subtracting, multiplying and\/or dividing the integers.\n\n### Input:\n[10, 5, 3]\n\n### Output:\ndef maxValue(nums):\n maxValue = -1\n operators = ['+', '-', '*', '\/']\n\n for i in range(4):\n if operators[i] == '+':\n maxValue = max(maxValue, nums[0] + nums[1] + nums[2])\n elif operators[i] == '-':\n maxValue = max(maxValue, nums[0] - nums[1] - nums[2])\n elif operators[i] == '*':\n maxValue = max(maxValue, nums[0] * nums[1] * nums[2])\n else:\n maxValue = max(maxValue, nums[0] \/ nums[1] \/ nums[2])\n \n return maxValue\n \nprint(maxValue([10, 5, 3]))\n#Output: 15.0"}
{"instruction":"Create a Python class named 'Circle' that include two methods, init() and area().","input":"","output":"class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * (self.radius**2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class named 'Circle' that include two methods, init() and area().\n\n### Input:\n\n\n### Output:\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * (self.radius**2)"}
{"instruction":"Create a class in Python to model a circle.","input":"","output":"class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def area(self):\n        return 3.14 * self.radius**2\n    \n    def circumference(self):\n        return 2 * 3.14 * self.radius","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to model a circle.\n\n### Input:\n\n\n### Output:\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def area(self):\n        return 3.14 * self.radius**2\n    \n    def circumference(self):\n        return 2 * 3.14 * self.radius"}
{"instruction":"Optimise the Python program to reduce the time complexity for finding the maximum element in an array.","input":"[5, 10, 15, 20]","output":"def findMax(arr):\n    max = arr[0]\n    curr_max = arr[0]\n    for i in arr[1:]:\n        curr_max = max = max if max > i else i \n    return curr_max\n\nprint(findMax([5, 10, 15, 20]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimise the Python program to reduce the time complexity for finding the maximum element in an array.\n\n### Input:\n[5, 10, 15, 20]\n\n### Output:\ndef findMax(arr):\n    max = arr[0]\n    curr_max = arr[0]\n    for i in arr[1:]:\n        curr_max = max = max if max > i else i \n    return curr_max\n\nprint(findMax([5, 10, 15, 20]))"}
{"instruction":"Write a Python program to parse an HTML document and extract text content from the document.","input":"<div>\n\t<p>This is some text.<\/p>\n\t<p>This is another text.<\/p>\n\t<div>\n\t\t<span>Some more text.<\/span>\n\t<\/div>\n<\/div>","output":"from bs4 import BeautifulSoup\n\nhtml_doc = \"\"\"\n<div>\n\t<p>This is some text.<\/p>\n\t<p>This is another text.<\/p>\n\t<div>\n\t\t<span>Some more text.<\/span>\n\t<\/div>\n<\/div>\n\"\"\"\n\nsoup = BeautifulSoup(html_doc)\n\ntext = soup.get_text()\n\n# Output\n# This is some text.\n# This is another text.\n# Some more text.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to parse an HTML document and extract text content from the document.\n\n### Input:\n<div>\n\t<p>This is some text.<\/p>\n\t<p>This is another text.<\/p>\n\t<div>\n\t\t<span>Some more text.<\/span>\n\t<\/div>\n<\/div>\n\n### Output:\nfrom bs4 import BeautifulSoup\n\nhtml_doc = \"\"\"\n<div>\n\t<p>This is some text.<\/p>\n\t<p>This is another text.<\/p>\n\t<div>\n\t\t<span>Some more text.<\/span>\n\t<\/div>\n<\/div>\n\"\"\"\n\nsoup = BeautifulSoup(html_doc)\n\ntext = soup.get_text()\n\n# Output\n# This is some text.\n# This is another text.\n# Some more text."}
{"instruction":"Optimize the given Python code to improve the runtime.","input":"def sum_list(nums):\n sum_total = 0\n for n in nums:\n  sum_total += n \n return sum_total\n\nnums = [1, 2, 3, 4, 5]","output":"def sum_list(nums):\n return sum(nums)\n\nnums = [1, 2, 3, 4, 5]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the given Python code to improve the runtime.\n\n### Input:\ndef sum_list(nums):\n sum_total = 0\n for n in nums:\n  sum_total += n \n return sum_total\n\nnums = [1, 2, 3, 4, 5]\n\n### Output:\ndef sum_list(nums):\n return sum(nums)\n\nnums = [1, 2, 3, 4, 5]"}
{"instruction":"Write a function in Python to print out an array backwards.","input":"","output":"def print_reverse_array(arr):\n for i in range(len(arr)-1, -1, -1): \n  print(arr[i])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to print out an array backwards.\n\n### Input:\n\n\n### Output:\ndef print_reverse_array(arr):\n for i in range(len(arr)-1, -1, -1): \n  print(arr[i])"}
{"instruction":"Write a Python program to generate a dictionary that holds the count of each character present in a given string.","input":"\"Programming\"","output":"def char_count(str): \n result = {}\n for char in str: \n  if char in result:\n  result[char] += 1\n  else:\n  result[char] = 1\n return result\n\nresult = char_count(\"Programming\")\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a dictionary that holds the count of each character present in a given string.\n\n### Input:\n\"Programming\"\n\n### Output:\ndef char_count(str): \n result = {}\n for char in str: \n  if char in result:\n  result[char] += 1\n  else:\n  result[char] = 1\n return result\n\nresult = char_count(\"Programming\")\nprint(result)"}
{"instruction":"Write a Python program to retrieve the titles and scores of the top 10 movies rated by users from the IMDB database.","input":"Not applicable","output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"http:\/\/www.imdb.com\/search\/title?count=10&sort=user_rating,desc\"\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ntitle_list = soup.find_all('div', {'class': 'lister-item-content'})\nfor title in title_list:\n    # get title\n    movie_title = title.h3.a.get_text()\n    # get score\n    score = title.find('span', {'class': 'value'}).get_text()\n    print(movie_title + ': ' + score)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to retrieve the titles and scores of the top 10 movies rated by users from the IMDB database.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = \"http:\/\/www.imdb.com\/search\/title?count=10&sort=user_rating,desc\"\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ntitle_list = soup.find_all('div', {'class': 'lister-item-content'})\nfor title in title_list:\n    # get title\n    movie_title = title.h3.a.get_text()\n    # get score\n    score = title.find('span', {'class': 'value'}).get_text()\n    print(movie_title + ': ' + score)"}
{"instruction":"Using Google Vision API, create a Python program to detect objects and classify them into specific categories.","input":"Picture file of a park","output":"import io\nimport os\n\n# Imports the Google Cloud client library\nfrom google.cloud import vision\n\n# Instantiates a client\nclient = vision.ImageAnnotatorClient()\n\n# The name of the image file to annotate\nfile_name = 'park.jpg'\n\n# Loads the image\nwith io.open(file_name, 'rb') as image_file:\n content = image_file.read()\n\nimage = vision.types.Image(content=content)\n\n# Performs label detection on the image file\nresponse = client.label_detection(image=image)\nlabels = response.label_annotations\n\nprint('Labels:')\nfor label in labels:\n print(label.description)\n\n# Performs object detection\nresponse = client.object_localization(image=image)\nobjects = response.localized_object_annotations\n\nprint('Objects:')\nfor object_ in objects:\n print(object_.name)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Google Vision API, create a Python program to detect objects and classify them into specific categories.\n\n### Input:\nPicture file of a park\n\n### Output:\nimport io\nimport os\n\n# Imports the Google Cloud client library\nfrom google.cloud import vision\n\n# Instantiates a client\nclient = vision.ImageAnnotatorClient()\n\n# The name of the image file to annotate\nfile_name = 'park.jpg'\n\n# Loads the image\nwith io.open(file_name, 'rb') as image_file:\n content = image_file.read()\n\nimage = vision.types.Image(content=content)\n\n# Performs label detection on the image file\nresponse = client.label_detection(image=image)\nlabels = response.label_annotations\n\nprint('Labels:')\nfor label in labels:\n print(label.description)\n\n# Performs object detection\nresponse = client.object_localization(image=image)\nobjects = response.localized_object_annotations\n\nprint('Objects:')\nfor object_ in objects:\n print(object_.name)"}
{"instruction":"Create a Python script to remove all punctuation from a string.","input":"String: A text containing punctuation marks.","output":"import string\n\n# Define the input string\ninp_str = \"A text containing punctuation marks.\"\n\n# Remove all punctuation\nout_str = inp_str.translate(str.maketrans('', '', string.punctuation))\n\nprint(out_str) # Output: A text containing punctuation marks","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to remove all punctuation from a string.\n\n### Input:\nString: A text containing punctuation marks.\n\n### Output:\nimport string\n\n# Define the input string\ninp_str = \"A text containing punctuation marks.\"\n\n# Remove all punctuation\nout_str = inp_str.translate(str.maketrans('', '', string.punctuation))\n\nprint(out_str) # Output: A text containing punctuation marks"}
{"instruction":"Create a Python program to generate a bar chart of a given data set.","input":"data_points = [50, 45, 55]","output":"import matplotlib.pyplot as plt\n\nplt.bar(range(len(data_points)), data_points)\nplt.title('Bar Chart')\nplt.xlabel('index') \nplt.ylabel('value')\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a bar chart of a given data set.\n\n### Input:\ndata_points = [50, 45, 55]\n\n### Output:\nimport matplotlib.pyplot as plt\n\nplt.bar(range(len(data_points)), data_points)\nplt.title('Bar Chart')\nplt.xlabel('index') \nplt.ylabel('value')\nplt.show()"}
{"instruction":"Debug the given Python code.","input":"def calculate_sum(a, b):\n   sum = a + b \n   return \n\nc = calculate_sum(2, 3)\nprint(\"The sum is\", c)","output":"def calculate_sum(a, b):\n   sum = a + b \n   return sum \n\nc = calculate_sum(2, 3)\nprint(\"The sum is\", c)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDebug the given Python code.\n\n### Input:\ndef calculate_sum(a, b):\n   sum = a + b \n   return \n\nc = calculate_sum(2, 3)\nprint(\"The sum is\", c)\n\n### Output:\ndef calculate_sum(a, b):\n   sum = a + b \n   return sum \n\nc = calculate_sum(2, 3)\nprint(\"The sum is\", c)"}
{"instruction":"Design an algorithm in Python for sorting a given array of numbers in descending order.","input":"An array of integers [3, 5, 7, 2, 4, 1]","output":"def bubble_sort(arr):\n length = len(arr)\n \n for i in range(length - 1, 0, -1):\n for j in range(0, i):\n if arr[j] < arr[j + 1]:\n arr[j], arr[j + 1] = arr[j + 1], arr[j]\n \n return arr\n \na = [3, 5, 7, 2, 4, 1]\nprint(bubble_sort(a)) # [7, 5, 4, 3, 2, 1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python for sorting a given array of numbers in descending order.\n\n### Input:\nAn array of integers [3, 5, 7, 2, 4, 1]\n\n### Output:\ndef bubble_sort(arr):\n length = len(arr)\n \n for i in range(length - 1, 0, -1):\n for j in range(0, i):\n if arr[j] < arr[j + 1]:\n arr[j], arr[j + 1] = arr[j + 1], arr[j]\n \n return arr\n \na = [3, 5, 7, 2, 4, 1]\nprint(bubble_sort(a)) # [7, 5, 4, 3, 2, 1]"}
{"instruction":"Create a class in Python that will take two parameters (a, b) and return a * b.","input":"","output":"class Multiplier:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n    def calculate(self):\n        return self.a * self.b\n\nmultiplier = Multiplier(8, 11)\nprint(multiplier.calculate())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that will take two parameters (a, b) and return a * b.\n\n### Input:\n\n\n### Output:\nclass Multiplier:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n    def calculate(self):\n        return self.a * self.b\n\nmultiplier = Multiplier(8, 11)\nprint(multiplier.calculate())"}
{"instruction":"Write a Python program to count the number of characters in a string.","input":"String = \"Hello World\"","output":"String = \"Hello World\"\n\ndef count_characters(str):\n  return len(str)\n\nprint(\"Number of characters in the string:\", count_characters(String))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to count the number of characters in a string.\n\n### Input:\nString = \"Hello World\"\n\n### Output:\nString = \"Hello World\"\n\ndef count_characters(str):\n  return len(str)\n\nprint(\"Number of characters in the string:\", count_characters(String))"}
{"instruction":"Design a program in Python to traverse a matrix.","input":"[[1, 2, 3], [4, 5, 6], [7, 8, 9]]","output":"inputMatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n#traversing the matrix\nfor row in inputMatrix:\n    for column in row:\n        print(column, end=\" \")\n    print()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to traverse a matrix.\n\n### Input:\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n### Output:\ninputMatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n#traversing the matrix\nfor row in inputMatrix:\n    for column in row:\n        print(column, end=\" \")\n    print()"}
{"instruction":"Given an array of strings, you need to write a Python program to move the elements that contain a certain letter to the end of the array.","input":"strings = [\"abcd\", \"efgh\", \"ijkl\", \"mnop\", \"qrst\"]\nletter = \"m\"","output":"def move_letter(strings, letter):\n new_list = []\n for s in strings:\n  if letter not in s:\n   new_list.append(s)\n  else:\n   new_list.append(s)\n return new_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of strings, you need to write a Python program to move the elements that contain a certain letter to the end of the array.\n\n### Input:\nstrings = [\"abcd\", \"efgh\", \"ijkl\", \"mnop\", \"qrst\"]\nletter = \"m\"\n\n### Output:\ndef move_letter(strings, letter):\n new_list = []\n for s in strings:\n  if letter not in s:\n   new_list.append(s)\n  else:\n   new_list.append(s)\n return new_list"}
{"instruction":"Design a Python class that models a simple arithmetic calculator.","input":"","output":"class Calculator:\n    def __init__(self):\n        pass\n    \n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n    \n    def multiply(self, a, b):\n        return a * b\n    \n    def divide(self, a, b):\n        if b == 0:\n            raise ValueError(\"Cannot divide by zero.\")\n        else:\n            return a\/b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class that models a simple arithmetic calculator.\n\n### Input:\n\n\n### Output:\nclass Calculator:\n    def __init__(self):\n        pass\n    \n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n    \n    def multiply(self, a, b):\n        return a * b\n    \n    def divide(self, a, b):\n        if b == 0:\n            raise ValueError(\"Cannot divide by zero.\")\n        else:\n            return a\/b"}
{"instruction":"Create a class in Python that models a charging station.","input":"","output":"class ChargingStation:\n    def __init__(self, id, description, max_charge):\n        self.id = id\n        self.description = description\n        self.max_charge = max_charge\n\n    def check_status(self):\n        if self.max_charge > 0:\n            return \"Charging station is available\"\n        else:\n            return \"Charging station is not available\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that models a charging station.\n\n### Input:\n\n\n### Output:\nclass ChargingStation:\n    def __init__(self, id, description, max_charge):\n        self.id = id\n        self.description = description\n        self.max_charge = max_charge\n\n    def check_status(self):\n        if self.max_charge > 0:\n            return \"Charging station is available\"\n        else:\n            return \"Charging station is not available\""}
{"instruction":"Create a function to replace substring 'old' with 'new' in the given string.","input":"Python is very old","output":"def replace_substring(string, old, new):\n  new_string = \"\"\n  l = len(old)\n  for i in range(len(string)-l+1):\n    if string[i:i+l] == old:\n      new_string += new\n    else:\n      new_string += string[i]\n  return new_string\n\nprint(replace_substring('Python is very old', 'old', 'new'))\n\n# Output: Python is very new","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to replace substring 'old' with 'new' in the given string.\n\n### Input:\nPython is very old\n\n### Output:\ndef replace_substring(string, old, new):\n  new_string = \"\"\n  l = len(old)\n  for i in range(len(string)-l+1):\n    if string[i:i+l] == old:\n      new_string += new\n    else:\n      new_string += string[i]\n  return new_string\n\nprint(replace_substring('Python is very old', 'old', 'new'))\n\n# Output: Python is very new"}
{"instruction":"Implement a Heap Sort algorithm in Python.","input":"[9, 8, 7, 6, 5, 4, 3, 2, 1]","output":"def heapify(arr, n, i): \n\tlargest = i # Initialize largest as root \n\tl = 2 * i + 1\t # left = 2*i + 1 \n\tr = 2 * i + 2\t # right = 2*i + 2 \n\n\t# See if left child of root exists and is \n\t# greater than root \n\tif l < n and arr[i] < arr[l]: \n\t\tlargest = l \n\n\t# See if right child of root exists and is \n\t# greater than root \n\tif r < n and arr[largest] < arr[r]: \n\t\tlargest = r \n\n\t# Change root, if needed \n\tif largest != i: \n\t\tarr[i],arr[largest] = arr[largest],arr[i] # swap \n\n\t\t# Heapify the root. \n\t\theapify(arr, n, largest) \n\ndef heapSort(arr): \n\tn = len(arr) \n\n\t# Build a maxheap. \n\tfor i in range(n, -1, -1): \n\t\theapify(arr, n, i) \n\n\t# One by one extract elements \n\tfor i in range(n-1, 0, -1): \n\t\tarr[i], arr[0] = arr[0], arr[i] # swap \n\t\theapify(arr, i, 0) \n\n# Driver code to test above \narr = [9, 8, 7, 6, 5, 4, 3, 2, 1] \nheapSort(arr) \nn = len(arr) \nprint (\"Sorted array is\") \nfor i in range(n): \n\tprint (\"%d\" %arr[i]),","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Heap Sort algorithm in Python.\n\n### Input:\n[9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n### Output:\ndef heapify(arr, n, i): \n\tlargest = i # Initialize largest as root \n\tl = 2 * i + 1\t # left = 2*i + 1 \n\tr = 2 * i + 2\t # right = 2*i + 2 \n\n\t# See if left child of root exists and is \n\t# greater than root \n\tif l < n and arr[i] < arr[l]: \n\t\tlargest = l \n\n\t# See if right child of root exists and is \n\t# greater than root \n\tif r < n and arr[largest] < arr[r]: \n\t\tlargest = r \n\n\t# Change root, if needed \n\tif largest != i: \n\t\tarr[i],arr[largest] = arr[largest],arr[i] # swap \n\n\t\t# Heapify the root. \n\t\theapify(arr, n, largest) \n\ndef heapSort(arr): \n\tn = len(arr) \n\n\t# Build a maxheap. \n\tfor i in range(n, -1, -1): \n\t\theapify(arr, n, i) \n\n\t# One by one extract elements \n\tfor i in range(n-1, 0, -1): \n\t\tarr[i], arr[0] = arr[0], arr[i] # swap \n\t\theapify(arr, i, 0) \n\n# Driver code to test above \narr = [9, 8, 7, 6, 5, 4, 3, 2, 1] \nheapSort(arr) \nn = len(arr) \nprint (\"Sorted array is\") \nfor i in range(n): \n\tprint (\"%d\" %arr[i]),"}
{"instruction":"Generate a python program to search a list of tuples for given string and return the value associated with the string.","input":"my_list = [(\"apple\", \"fruit\"), (\"carrot\", \"vegetable\"), (\"orange\", \"fruit\")]\nsearch_string = \"orange\"","output":"my_list = [(\"apple\", \"fruit\"), (\"carrot\", \"vegetable\"), (\"orange\", \"fruit\")]\nsearch_string = \"orange\"\n\n# Iterate through the list of tuples\nfor (name,item) in my_list:\n    if name == search_string:\n        print(\"The value associated with the string is: \", item)\n        break","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to search a list of tuples for given string and return the value associated with the string.\n\n### Input:\nmy_list = [(\"apple\", \"fruit\"), (\"carrot\", \"vegetable\"), (\"orange\", \"fruit\")]\nsearch_string = \"orange\"\n\n### Output:\nmy_list = [(\"apple\", \"fruit\"), (\"carrot\", \"vegetable\"), (\"orange\", \"fruit\")]\nsearch_string = \"orange\"\n\n# Iterate through the list of tuples\nfor (name,item) in my_list:\n    if name == search_string:\n        print(\"The value associated with the string is: \", item)\n        break"}
{"instruction":"Compile a given python code that uses a specific library or package into an executable.","input":"","output":"import py_compile\npy_compile.compile(\"<python_code_file>\", cfile=\"<executable_name>\", doraise=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompile a given python code that uses a specific library or package into an executable.\n\n### Input:\n\n\n### Output:\nimport py_compile\npy_compile.compile(\"<python_code_file>\", cfile=\"<executable_name>\", doraise=True)"}
{"instruction":"Create a Python function to format a string with the proper case and punctuation","input":"string=\"hello, world\"","output":"def format_string(string):\n    \"\"\"Function to format a string with the proper case and punctuation\"\"\"\n    return string.lower().capitalize() + \".\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to format a string with the proper case and punctuation\n\n### Input:\nstring=\"hello, world\"\n\n### Output:\ndef format_string(string):\n    \"\"\"Function to format a string with the proper case and punctuation\"\"\"\n    return string.lower().capitalize() + \".\""}
{"instruction":"Design an artificial neural network that recognizes handwritten digits using Keras and Python.","input":"Not applicable","output":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\n\n# Load the MNIST data set\nfrom keras.datasets import mnist\n(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n\n# Rescale images to value between 0 and 1\ntrain_images = train_images \/ 255\ntest_images = test_images \/ 255\n\n# dtype is based on data type of input images\ntrain_images = train_images.astype('float32')\ntest_images = test_images.astype('float32')\n\n# Reshape the data\ntrain_images = train_images.reshape(60000, 28, 28, 1)\ntest_images = test_images.reshape(10000, 28, 28, 1)\n\n# Label encoding\ntrain_labels = keras.utils.to_categorical(train_labels, 10)\ntest_labels = keras.utils.to_categorical(test_labels, 10)\n\n# Model Architecture Design\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                  activation='relu',\n                  input_shape=(28, 28, 1)))\nmodel.add(MaxPooling2D())\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\n\n# Add a softmax layer with 10 output units:\nmodel.add(Dense(10, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(train_images, train_labels, epochs=5)\n\n# Test the model\nmodel.evaluate(test_images, test_labels)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an artificial neural network that recognizes handwritten digits using Keras and Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\n\n# Load the MNIST data set\nfrom keras.datasets import mnist\n(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n\n# Rescale images to value between 0 and 1\ntrain_images = train_images \/ 255\ntest_images = test_images \/ 255\n\n# dtype is based on data type of input images\ntrain_images = train_images.astype('float32')\ntest_images = test_images.astype('float32')\n\n# Reshape the data\ntrain_images = train_images.reshape(60000, 28, 28, 1)\ntest_images = test_images.reshape(10000, 28, 28, 1)\n\n# Label encoding\ntrain_labels = keras.utils.to_categorical(train_labels, 10)\ntest_labels = keras.utils.to_categorical(test_labels, 10)\n\n# Model Architecture Design\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                  activation='relu',\n                  input_shape=(28, 28, 1)))\nmodel.add(MaxPooling2D())\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\n\n# Add a softmax layer with 10 output units:\nmodel.add(Dense(10, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(train_images, train_labels, epochs=5)\n\n# Test the model\nmodel.evaluate(test_images, test_labels)"}
{"instruction":"In Python, parse a JSON string and return the value associated with a particular key","input":"JSON String: { \"key1\": \"value1\", \"key2\": \"value2\" }\nKey: \"key2\"","output":"import json\n\n# Create a json object from the string\njson_obj = json.loads('{\"key1\": \"value1\", \"key2\": \"value2\"}')\n\n#get the value for a particular key\nvalue = json_obj[\"key2\"]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, parse a JSON string and return the value associated with a particular key\n\n### Input:\nJSON String: { \"key1\": \"value1\", \"key2\": \"value2\" }\nKey: \"key2\"\n\n### Output:\nimport json\n\n# Create a json object from the string\njson_obj = json.loads('{\"key1\": \"value1\", \"key2\": \"value2\"}')\n\n#get the value for a particular key\nvalue = json_obj[\"key2\"]"}
{"instruction":"Program a Python script that has a given list of integers as input and returns the sum of the list elements.","input":"my_list = [3, 2, 5, 4, 9]","output":"def sum_list(my_list):\n\ttotal = 0\n\tfor i in my_list:\n\t\ttotal += i\n\treturn total","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProgram a Python script that has a given list of integers as input and returns the sum of the list elements.\n\n### Input:\nmy_list = [3, 2, 5, 4, 9]\n\n### Output:\ndef sum_list(my_list):\n\ttotal = 0\n\tfor i in my_list:\n\t\ttotal += i\n\treturn total"}
{"instruction":"Create a python program to build a dictionary with city names as its keys and location\/population information as its values.","input":"Key: Dallas \nValue: Texas, USA, Population: 1.3 million","output":"def build_city_info_dictionary(city, location, population):\n    city_info_dict = dict()\n    city_info_dict[city] = (location, population)\n    return city_info_dict\n\ncity = 'Dallas'\nlocation = 'Texas, USA'\npopulation = '1.3 million'\n\ncity_info_dict = build_city_info_dictionary(city, location, population)\nprint(city_info_dict)  # {'Dallas': ('Texas, USA', '1.3 million')}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to build a dictionary with city names as its keys and location\/population information as its values.\n\n### Input:\nKey: Dallas \nValue: Texas, USA, Population: 1.3 million\n\n### Output:\ndef build_city_info_dictionary(city, location, population):\n    city_info_dict = dict()\n    city_info_dict[city] = (location, population)\n    return city_info_dict\n\ncity = 'Dallas'\nlocation = 'Texas, USA'\npopulation = '1.3 million'\n\ncity_info_dict = build_city_info_dictionary(city, location, population)\nprint(city_info_dict)  # {'Dallas': ('Texas, USA', '1.3 million')}"}
{"instruction":"Design a python class that stores the total distance travelled, average speed and the number of stops made.","input":"","output":"class Trip:\n    def __init__(self, distance=0, speed=0, stops=0):\n        self.distance = distance\n        self.speed = speed\n        self.stops = stops\n\n    def get_distance(self):\n        return self.distance\n\n    def get_speed(self):\n        return self.speed\n\n    def get_stops(self):\n        return self.stops \n\n    def set_distance(self, distance):\n        self.distance = distance\n\n    def set_speed(self, speed):\n        self.speed = speed\n\n    def set_stops(self, stops):\n        self.stops = stops","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python class that stores the total distance travelled, average speed and the number of stops made.\n\n### Input:\n\n\n### Output:\nclass Trip:\n    def __init__(self, distance=0, speed=0, stops=0):\n        self.distance = distance\n        self.speed = speed\n        self.stops = stops\n\n    def get_distance(self):\n        return self.distance\n\n    def get_speed(self):\n        return self.speed\n\n    def get_stops(self):\n        return self.stops \n\n    def set_distance(self, distance):\n        self.distance = distance\n\n    def set_speed(self, speed):\n        self.speed = speed\n\n    def set_stops(self, stops):\n        self.stops = stops"}
{"instruction":"Create a spell checker in Python for the given text.","input":"Text: Ths is a languige exersice","output":"\"\"\"\nCreate a Spell Checker\n\"\"\"\n\nimport enchant\n\ndef check_spelling(text):\n    # Create a spell checker\n    spell_checker = enchant.Dict(\"en_US\")\n\n    # Split the text into words\n    words = text.split()\n\n    # Check the spelling of each word\n    for i, word in enumerate(words):\n        if not spell_checker.check(word):\n            # Word is misspelled, suggest a correction\n            words[i] = spell_checker.suggest(word)[0]\n    \n    # Join the words back together\n    corrected_text = ' '.join(words)\n\n    return corrected_text\n\nif __name__ == '__main__':\n    text = 'Ths is a languige exersice'\n    corrected_text = check_spelling(text)\n    print(corrected_text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a spell checker in Python for the given text.\n\n### Input:\nText: Ths is a languige exersice\n\n### Output:\n\"\"\"\nCreate a Spell Checker\n\"\"\"\n\nimport enchant\n\ndef check_spelling(text):\n    # Create a spell checker\n    spell_checker = enchant.Dict(\"en_US\")\n\n    # Split the text into words\n    words = text.split()\n\n    # Check the spelling of each word\n    for i, word in enumerate(words):\n        if not spell_checker.check(word):\n            # Word is misspelled, suggest a correction\n            words[i] = spell_checker.suggest(word)[0]\n    \n    # Join the words back together\n    corrected_text = ' '.join(words)\n\n    return corrected_text\n\nif __name__ == '__main__':\n    text = 'Ths is a languige exersice'\n    corrected_text = check_spelling(text)\n    print(corrected_text)"}
{"instruction":"Generate an automated scheduling system in Python.","input":"Schedule Data\n[{\n task: 'meeting', \n date: '01-04-2020',\n time: '9.00am', \n duration: '1 hour' \n},\n{\n task: 'presentation', \n date: '03-04-2020', \n time: '10.00am',\n duration: '2.30 hours'\n}]","output":"import datetime\n\n# define the data structure for schedule\nclass Schedule: \n def __init__(self, task, date, time, duration):\n        self.task = task\n        self.date = date\n        self.time = time\n        self.duration = duration\n\n# define a function to check for conflicts\ndef check_conflicts(schedule_list):\n     start_times = []\n     end_times = []\n     for schedule in schedule_list:\n        # convert the date and time strings to datetime objects\n        start_time = datetime.datetime.strptime(f'{schedule.date} {schedule.time}', '%d-%m-%Y %H.%M%p')\n        end_time = start_time + datetime.timedelta(minutes=schedule.duration)\n        # append the start and end times to lists \n        start_times.append(start_time)\n        end_times.append(end_time)\n\n     # loop over the start list\n     for i in range(len(start_times)):\n        # if the current start time is between another start or end time, there is a conflict\n        if start_times[i] > min(start_times) and start_times[i] < max(end_times):\n            return False\n     # otherwise, there isn't a conflict\n     return True \n\n# Create a sample agenda\nschedule_list = [\n Schedule('Meeting', '01-04-2020', '9.00am', 60),\n Schedule('Presentation', '03-04-2020', '10.00am', 150) \n]\n\n# print the result\nprint(check_conflicts(schedule_list))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an automated scheduling system in Python.\n\n### Input:\nSchedule Data\n[{\n task: 'meeting', \n date: '01-04-2020',\n time: '9.00am', \n duration: '1 hour' \n},\n{\n task: 'presentation', \n date: '03-04-2020', \n time: '10.00am',\n duration: '2.30 hours'\n}]\n\n### Output:\nimport datetime\n\n# define the data structure for schedule\nclass Schedule: \n def __init__(self, task, date, time, duration):\n        self.task = task\n        self.date = date\n        self.time = time\n        self.duration = duration\n\n# define a function to check for conflicts\ndef check_conflicts(schedule_list):\n     start_times = []\n     end_times = []\n     for schedule in schedule_list:\n        # convert the date and time strings to datetime objects\n        start_time = datetime.datetime.strptime(f'{schedule.date} {schedule.time}', '%d-%m-%Y %H.%M%p')\n        end_time = start_time + datetime.timedelta(minutes=schedule.duration)\n        # append the start and end times to lists \n        start_times.append(start_time)\n        end_times.append(end_time)\n\n     # loop over the start list\n     for i in range(len(start_times)):\n        # if the current start time is between another start or end time, there is a conflict\n        if start_times[i] > min(start_times) and start_times[i] < max(end_times):\n            return False\n     # otherwise, there isn't a conflict\n     return True \n\n# Create a sample agenda\nschedule_list = [\n Schedule('Meeting', '01-04-2020', '9.00am', 60),\n Schedule('Presentation', '03-04-2020', '10.00am', 150) \n]\n\n# print the result\nprint(check_conflicts(schedule_list))"}
