{"instruction":"Categorize the following code snippets into their respective languages:","input":"def childName(name):\n    print('The child will be called', name)","output":"Python","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCategorize the following code snippets into their respective languages:\n\n### Input:\ndef childName(name):\n    print('The child will be called', name)\n\n### Output:\nPython"}
{"instruction":"Construct an algorithm in Python to compute the sum of a array of numbers.","input":"[3,5,1,2]","output":"def compute_sum(arr):\n    \n    # Initialize sum\n    sum = 0\n    \n    # Compute sum\n    for num in arr:\n        sum += num\n    \n    # Return the sum\n    return sum\n\n# Testing\narr = [3,5,1,2]\n\nprint(compute_sum(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm in Python to compute the sum of a array of numbers.\n\n### Input:\n[3,5,1,2]\n\n### Output:\ndef compute_sum(arr):\n    \n    # Initialize sum\n    sum = 0\n    \n    # Compute sum\n    for num in arr:\n        sum += num\n    \n    # Return the sum\n    return sum\n\n# Testing\narr = [3,5,1,2]\n\nprint(compute_sum(arr))"}
{"instruction":"Write an optimization function for finding the minimum of a two-dimensional scalar field in Python.","input":"a scalar field represented as a 2D array (e.g. [[2, 1], [4, 3]] where value at position [i][j] is 2i + j)","output":"def findMin(scalarField):\n minVal = float('inf')\n minInd = (-1, -1)\n for i in range(len(scalarField)):\n for j in range(len(scalarField[i])):\n val = scalarField[i][j]\n if val < minVal:\n minVal = val\n minInd = (i, j)\n return minInd","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an optimization function for finding the minimum of a two-dimensional scalar field in Python.\n\n### Input:\na scalar field represented as a 2D array (e.g. [[2, 1], [4, 3]] where value at position [i][j] is 2i + j)\n\n### Output:\ndef findMin(scalarField):\n minVal = float('inf')\n minInd = (-1, -1)\n for i in range(len(scalarField)):\n for j in range(len(scalarField[i])):\n val = scalarField[i][j]\n if val < minVal:\n minVal = val\n minInd = (i, j)\n return minInd"}
{"instruction":"Create a web server using Python's Flask framework to render a page containing a form asking for user information.","input":"Not applicable","output":"from flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('\/', methods=['GET'])\ndef main_page():\n    return render_template('userinfoForm.html')\n\n@app.route('\/user-info', methods=['POST'])\ndef get_user_info():\n    # get user info from form\n    name = request.form.get('name')\n    email = request.form.get('email')\n    address = request.form.get('address')\n    occupation = request.form.get('occupation')\n    return render_template('success.html', name=name, email=email, address=address, occupation=occupation)\n\nif __name__ == '__main__':\n    app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web server using Python's Flask framework to render a page containing a form asking for user information.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('\/', methods=['GET'])\ndef main_page():\n    return render_template('userinfoForm.html')\n\n@app.route('\/user-info', methods=['POST'])\ndef get_user_info():\n    # get user info from form\n    name = request.form.get('name')\n    email = request.form.get('email')\n    address = request.form.get('address')\n    occupation = request.form.get('occupation')\n    return render_template('success.html', name=name, email=email, address=address, occupation=occupation)\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"instruction":"Generate a Python function to return the index of a given item in a list.","input":"lst = [1, 2, 3, 4];","output":"def findIndex(lst, item):\n for i, v in enumerate(lst):\n if v == item:\n return i\n return -1\n\nfindIndex(lst, 4) \/\/ 3","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to return the index of a given item in a list.\n\n### Input:\nlst = [1, 2, 3, 4];\n\n### Output:\ndef findIndex(lst, item):\n for i, v in enumerate(lst):\n if v == item:\n return i\n return -1\n\nfindIndex(lst, 4) \/\/ 3"}
{"instruction":"Classify the following Python code as a function or a class.","input":"import math\n\nclass Circle:\n   def __init__(self, radius):\n      self.radius = radius\n\n   def area(self):\n      return math.pi * self.radius**2","output":"Class","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nClassify the following Python code as a function or a class.\n\n### Input:\nimport math\n\nclass Circle:\n   def __init__(self, radius):\n      self.radius = radius\n\n   def area(self):\n      return math.pi * self.radius**2\n\n### Output:\nClass"}
{"instruction":"Given two strings s1 and s2, write a Python program to find the longest commmon subsequence (LCS).","input":"s1 = abcfbc\ns2 = abfcab","output":"def lcs(s1, s2):\n m = len(s1)\n n = len(s2)\n L = [[0] * (n+1) for _ in range(m+1)]\n \n for i in range(m+1):\n for j in range(n+1):\n if i == 0 or j == 0:\n L[i][j] = 0\n elif s1[i-1] == s2[j-1]:\n L[i][j] = L[i-1][j-1] + 1\n else:\n L[i][j] = max(L[i-1][j], L[i][j-1])\n \n index = L[m][n] \n lcs = [\"\"] * (index + 1)\n lcs[index] = \"\"\n \n i = m\n j = n\n while i > 0 and j > 0:\n if s1[i-1] == s2[j-1]:\n lcs[index-1] = s1[i-1]\n i -= 1\n j -= 1\n index -= 1\n \n elif L[i-1][j] > L[i][j-1]:\n i -= 1\n \n else:\n j -= 1\n \n return \"\".join(lcs)\n \n print(lcs(s1, s2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two strings s1 and s2, write a Python program to find the longest commmon subsequence (LCS).\n\n### Input:\ns1 = abcfbc\ns2 = abfcab\n\n### Output:\ndef lcs(s1, s2):\n m = len(s1)\n n = len(s2)\n L = [[0] * (n+1) for _ in range(m+1)]\n \n for i in range(m+1):\n for j in range(n+1):\n if i == 0 or j == 0:\n L[i][j] = 0\n elif s1[i-1] == s2[j-1]:\n L[i][j] = L[i-1][j-1] + 1\n else:\n L[i][j] = max(L[i-1][j], L[i][j-1])\n \n index = L[m][n] \n lcs = [\"\"] * (index + 1)\n lcs[index] = \"\"\n \n i = m\n j = n\n while i > 0 and j > 0:\n if s1[i-1] == s2[j-1]:\n lcs[index-1] = s1[i-1]\n i -= 1\n j -= 1\n index -= 1\n \n elif L[i-1][j] > L[i][j-1]:\n i -= 1\n \n else:\n j -= 1\n \n return \"\".join(lcs)\n \n print(lcs(s1, s2))"}
{"instruction":"Write a Python code to print a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys.","input":"","output":"my_dict ={}\nfor num in range(1, 16):\n    my_dict[num] = num*num\n\nprint(my_dict)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to print a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys.\n\n### Input:\n\n\n### Output:\nmy_dict ={}\nfor num in range(1, 16):\n    my_dict[num] = num*num\n\nprint(my_dict)"}
{"instruction":"Generate a visual ASCII art in Python.","input":"A drawing of a star","output":"\"\"\"\nGenerate a visual ASCII art in Python\n\"\"\"\n\ndef generate_ascii(drawing): \n    height = len(drawing) + 2\n    width = len(drawing[0]) + 2\n\n    def get_ascii_cell(cell):\n        # Define the character in the ASCII art\n        if cell == '*':\n            return '*'\n        if cell == ' ':\n            return ' '\n        if cell == '.':\n            return '.'\n\n    # Render the picture as ASCII\n    result = ''\n    for row in range(height):\n        for col in range(width):\n            if row == 0 or row == height - 1 or col == 0 or col == width - 1:\n                result += '*'\n            else:\n                result += get_ascii_cell(drawing[row-1][col-1])\n        result += '\\n'\n    return result\n\nif __name__ == '__main__':\n    drawing = [['*', ' ', '*'],\n               [' ', '*', ' '],\n               ['*', ' ', '*']]\n    print(generate_ascii(drawing))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a visual ASCII art in Python.\n\n### Input:\nA drawing of a star\n\n### Output:\n\"\"\"\nGenerate a visual ASCII art in Python\n\"\"\"\n\ndef generate_ascii(drawing): \n    height = len(drawing) + 2\n    width = len(drawing[0]) + 2\n\n    def get_ascii_cell(cell):\n        # Define the character in the ASCII art\n        if cell == '*':\n            return '*'\n        if cell == ' ':\n            return ' '\n        if cell == '.':\n            return '.'\n\n    # Render the picture as ASCII\n    result = ''\n    for row in range(height):\n        for col in range(width):\n            if row == 0 or row == height - 1 or col == 0 or col == width - 1:\n                result += '*'\n            else:\n                result += get_ascii_cell(drawing[row-1][col-1])\n        result += '\\n'\n    return result\n\nif __name__ == '__main__':\n    drawing = [['*', ' ', '*'],\n               [' ', '*', ' '],\n               ['*', ' ', '*']]\n    print(generate_ascii(drawing))"}
{"instruction":"Write a machine learning algorithm in Python to find the nearest neighbors of a given point.","input":"point = [3, 4]","output":"from sklearn.neighbors import NearestNeighbors\n\ndef nearest_neighbors(point):\n    neighbors = NearestNeighbors(n_neighbors=1).fit(point) \n    return neighbors.kneighbors([point], return_distance=False)[0]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a machine learning algorithm in Python to find the nearest neighbors of a given point.\n\n### Input:\npoint = [3, 4]\n\n### Output:\nfrom sklearn.neighbors import NearestNeighbors\n\ndef nearest_neighbors(point):\n    neighbors = NearestNeighbors(n_neighbors=1).fit(point) \n    return neighbors.kneighbors([point], return_distance=False)[0]"}
{"instruction":"Design an algorithm in Python to order a list with and without O(nlogn) time complexity.","input":"[3, 5, 2, 1, 4]","output":"#O(n^2)\ndef order_without_nlogn(arr): \n\tn = len(arr)\n\n\t# Traverse through all array elements \n\tfor i in range(n): \n\t\n\t\t# Last i elements are already in place \n\t\tfor j in range(0, n-i-1): \n\t\t\n\t\t\t# traverse the array from 0 to n-i-1 \n\t\t\t# Swap if the element found is greater \n\t\t\t# than the next element\n\t\t\tif arr[j] > arr[j+1] : \n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j] \n\n# Driver code to test above \narr = [3, 5, 2, 1, 4]\norder_without_nlogn(arr) \n\n# O(nlogn)\ndef order_with_nlogn(arr): \n\tarr.sort() \n\n# Driver code to test above \narr = [3, 5, 2, 1, 4]\norder_with_nlogn(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to order a list with and without O(nlogn) time complexity.\n\n### Input:\n[3, 5, 2, 1, 4]\n\n### Output:\n#O(n^2)\ndef order_without_nlogn(arr): \n\tn = len(arr)\n\n\t# Traverse through all array elements \n\tfor i in range(n): \n\t\n\t\t# Last i elements are already in place \n\t\tfor j in range(0, n-i-1): \n\t\t\n\t\t\t# traverse the array from 0 to n-i-1 \n\t\t\t# Swap if the element found is greater \n\t\t\t# than the next element\n\t\t\tif arr[j] > arr[j+1] : \n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j] \n\n# Driver code to test above \narr = [3, 5, 2, 1, 4]\norder_without_nlogn(arr) \n\n# O(nlogn)\ndef order_with_nlogn(arr): \n\tarr.sort() \n\n# Driver code to test above \narr = [3, 5, 2, 1, 4]\norder_with_nlogn(arr)"}
{"instruction":"Develop a Python script that receives two lists and returns a new list that contains a unique combination of all elements in the two lists.","input":"list1 = [1, 2, 3], list2 = [2, 3, 4]","output":"def combine_lists(list1, list2):\n result = list1 + list2\n return list(set(result))\n\nlist1 = [1, 2, 3]\nlist2 = [2, 3, 4]\n\nprint(combine_lists(list1, list2)) # [1, 2, 3, 4]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script that receives two lists and returns a new list that contains a unique combination of all elements in the two lists.\n\n### Input:\nlist1 = [1, 2, 3], list2 = [2, 3, 4]\n\n### Output:\ndef combine_lists(list1, list2):\n result = list1 + list2\n return list(set(result))\n\nlist1 = [1, 2, 3]\nlist2 = [2, 3, 4]\n\nprint(combine_lists(list1, list2)) # [1, 2, 3, 4]"}
{"instruction":"Generate a Python script that takes an integer and calculates the factorial of that integer.","input":"","output":"def factorial(n): \n    if (n == 0): \n        return 1\n    return n * factorial(n - 1)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script that takes an integer and calculates the factorial of that integer.\n\n### Input:\n\n\n### Output:\ndef factorial(n): \n    if (n == 0): \n        return 1\n    return n * factorial(n - 1)"}
{"instruction":"Generate a Python program for reversing a string.","input":"string = \"Hello World\"","output":"string = \"Hello World\"\n\n# get length of the string\nlength = len(string)\n\n# create an empty string\nreverse = \"\"\n\n# loop backword through the string\nfor i in range(length-1, -1, -1):\n # add current character to empty string\n reverse = reverse + string[i]\n\n# print out the result\nprint(reverse)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program for reversing a string.\n\n### Input:\nstring = \"Hello World\"\n\n### Output:\nstring = \"Hello World\"\n\n# get length of the string\nlength = len(string)\n\n# create an empty string\nreverse = \"\"\n\n# loop backword through the string\nfor i in range(length-1, -1, -1):\n # add current character to empty string\n reverse = reverse + string[i]\n\n# print out the result\nprint(reverse)"}
{"instruction":"Write a queue data structure from scratch using Python.","input":"","output":"class Queue:\n    def __init__(self):\n        self.items = []\n    \n    def isEmpty(self):\n        return self.items == []\n    \n    def enqueue(self, item):\n        self.items.insert(0,item)\n    \n    def dequeue(self):\n        return self.items.pop()\n    \n    def size(self):\n        return len(self.items)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a queue data structure from scratch using Python.\n\n### Input:\n\n\n### Output:\nclass Queue:\n    def __init__(self):\n        self.items = []\n    \n    def isEmpty(self):\n        return self.items == []\n    \n    def enqueue(self, item):\n        self.items.insert(0,item)\n    \n    def dequeue(self):\n        return self.items.pop()\n    \n    def size(self):\n        return len(self.items)"}
{"instruction":"Given two numbers, find the greatest common divisor using Euclidean algorithm.","input":"Number1: 54\nNumber2: 24","output":"# Python code to find GCD of two numbers  \n# using Euclidean algorithm \n\n# Function to return gcd of a and b \ndef gcd(a,b): \n  \n    # Everything divides 0  \n    if (a == 0 or b == 0): \n        return 0; \n  \n    # base case \n    if (a == b): \n        return a \n  \n    # a is greater \n    if (a > b): \n        return gcd(a-b, b) \n      \n    return gcd(a, b-a) \n  \na = 54\nb = 24\n\n# printing the gcd\nprint('GCD of %d and %d is ' %(a, b), gcd(a,b))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two numbers, find the greatest common divisor using Euclidean algorithm.\n\n### Input:\nNumber1: 54\nNumber2: 24\n\n### Output:\n# Python code to find GCD of two numbers  \n# using Euclidean algorithm \n\n# Function to return gcd of a and b \ndef gcd(a,b): \n  \n    # Everything divides 0  \n    if (a == 0 or b == 0): \n        return 0; \n  \n    # base case \n    if (a == b): \n        return a \n  \n    # a is greater \n    if (a > b): \n        return gcd(a-b, b) \n      \n    return gcd(a, b-a) \n  \na = 54\nb = 24\n\n# printing the gcd\nprint('GCD of %d and %d is ' %(a, b), gcd(a,b))"}
{"instruction":"Construct a Python function to remove all instances of an element from a given list of integers.","input":"[2,2,3,4,5], 2","output":"def remove_element(nums, x):\n   return [y for y in nums if y != x]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python function to remove all instances of an element from a given list of integers.\n\n### Input:\n[2,2,3,4,5], 2\n\n### Output:\ndef remove_element(nums, x):\n   return [y for y in nums if y != x]"}
{"instruction":"Generate a Python program that recursively prints a string of characters in reverse.","input":"","output":"def reverse_string(s):\n    if len(s) == 0:\n        return\n    else:\n        print(s[-1], end=\"\")\n        reverse_string(s[:-1])\n \n# Driver program\nstring = \"Hello World!\"\nreverse_string(string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that recursively prints a string of characters in reverse.\n\n### Input:\n\n\n### Output:\ndef reverse_string(s):\n    if len(s) == 0:\n        return\n    else:\n        print(s[-1], end=\"\")\n        reverse_string(s[:-1])\n \n# Driver program\nstring = \"Hello World!\"\nreverse_string(string)"}
{"instruction":"Write a Python script to filter a list of text strings by removing all strings that contain a certain substring.","input":"word_list = ['hello', 'apple', 'this', 'is', 'a', 'word']\nkeyword = 'a'","output":"filtered_list = [x for x in word_list if keyword not in x]\n# filtered_list = ['hello', 'this', 'word']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to filter a list of text strings by removing all strings that contain a certain substring.\n\n### Input:\nword_list = ['hello', 'apple', 'this', 'is', 'a', 'word']\nkeyword = 'a'\n\n### Output:\nfiltered_list = [x for x in word_list if keyword not in x]\n# filtered_list = ['hello', 'this', 'word']"}
{"instruction":"Create a class in Python to represent a circle containing methods to calculate the area and circumference.","input":"-","output":"class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * self.radius * self.radius\n\n    def circumference(self):\n        return 2 * 3.14 * self.radius","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to represent a circle containing methods to calculate the area and circumference.\n\n### Input:\n-\n\n### Output:\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * self.radius * self.radius\n\n    def circumference(self):\n        return 2 * 3.14 * self.radius"}
{"instruction":"Create a function in Python to animate a Gif.","input":"","output":"from PIL import Image\nfrom images2gif import writeGif\n\ndef animateGif(images, filename, duration=0.1):\n    frames = []\n\n    for image in images:\n        frames.append(Image.open(image))\n\n    writeGif(filename, frames, duration=duration)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to animate a Gif.\n\n### Input:\n\n\n### Output:\nfrom PIL import Image\nfrom images2gif import writeGif\n\ndef animateGif(images, filename, duration=0.1):\n    frames = []\n\n    for image in images:\n        frames.append(Image.open(image))\n\n    writeGif(filename, frames, duration=duration)"}
{"instruction":"Write a Python script that takes a list of integers and returns a list of all unique combinations (of length 2) of integers that sum up to a given total.","input":"listOfIntegers = [1, 2, 3, 4, 5]\nsumTotal = 7","output":"def findCombinations(listOfIntegers, sumTotal):\n combinations = []\n\n for i in range(len(listOfIntegers)):\n  for j in range(i+1, len(listOfIntegers)):\n   if listOfIntegers[i] + listOfIntegers[j] == sumTotal:\n    combinations.append([listOfIntegers[i], listOfIntegers[j]])\n\n return combinations\n\nlistOfIntegers = [1, 2, 3, 4, 5]\nsumTotal = 7\n\nprint(findCombinations(listOfIntegers, sumTotal))\n# Output: [[6, 1], [5, 2], [4, 3]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that takes a list of integers and returns a list of all unique combinations (of length 2) of integers that sum up to a given total.\n\n### Input:\nlistOfIntegers = [1, 2, 3, 4, 5]\nsumTotal = 7\n\n### Output:\ndef findCombinations(listOfIntegers, sumTotal):\n combinations = []\n\n for i in range(len(listOfIntegers)):\n  for j in range(i+1, len(listOfIntegers)):\n   if listOfIntegers[i] + listOfIntegers[j] == sumTotal:\n    combinations.append([listOfIntegers[i], listOfIntegers[j]])\n\n return combinations\n\nlistOfIntegers = [1, 2, 3, 4, 5]\nsumTotal = 7\n\nprint(findCombinations(listOfIntegers, sumTotal))\n# Output: [[6, 1], [5, 2], [4, 3]]"}
{"instruction":"Write a Python script to automate the mouse or keyboard.","input":"","output":"import pyautogui\n \n# Move mouse to (100, 200)\npyautogui.moveTo(100, 200)\n \n# Drag mouse from (100, 200) to (300, 400)\npyautogui.dragTo(300, 400, button='left')\n \n# Click at position (300, 400)\npyautogui.click(x=300, y=400, clicks=2, button='left')\n \n# Type the word \"Hello World\" \npyautogui.typewrite(\"Hello World\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to automate the mouse or keyboard.\n\n### Input:\n\n\n### Output:\nimport pyautogui\n \n# Move mouse to (100, 200)\npyautogui.moveTo(100, 200)\n \n# Drag mouse from (100, 200) to (300, 400)\npyautogui.dragTo(300, 400, button='left')\n \n# Click at position (300, 400)\npyautogui.click(x=300, y=400, clicks=2, button='left')\n \n# Type the word \"Hello World\" \npyautogui.typewrite(\"Hello World\")"}
{"instruction":"Create a python function which takes a list as an argument and returns the largest number in the list.","input":"numbers = [20, 9, 5, 10]","output":"def largest_number(numbers):\n    largest = numbers[0]\n    for num in numbers:\n        if num > largest:\n            largest = num\n    return largest\n\nlargest = largest_number(numbers)\nprint('The largest number in the list is: ', largest)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function which takes a list as an argument and returns the largest number in the list.\n\n### Input:\nnumbers = [20, 9, 5, 10]\n\n### Output:\ndef largest_number(numbers):\n    largest = numbers[0]\n    for num in numbers:\n        if num > largest:\n            largest = num\n    return largest\n\nlargest = largest_number(numbers)\nprint('The largest number in the list is: ', largest)"}
{"instruction":"Make a class that processes payments using Python.","input":"","output":"class PaymentProcessor:\n    def __init__(self):\n        self.transactions = []\n\n    def process_payment(self, amount, account_no, currency):\n        self.transactions.append({\n            'amount': amount,\n            'account_no': account_no,\n            'currency': currency\n        })\n    \n    def get_transaction_count(self):\n        return len(self.transactions)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a class that processes payments using Python.\n\n### Input:\n\n\n### Output:\nclass PaymentProcessor:\n    def __init__(self):\n        self.transactions = []\n\n    def process_payment(self, amount, account_no, currency):\n        self.transactions.append({\n            'amount': amount,\n            'account_no': account_no,\n            'currency': currency\n        })\n    \n    def get_transaction_count(self):\n        return len(self.transactions)"}
{"instruction":"Generate a Python program to classify emails as either spam or not given a list of words","input":"emails = [\"how are you?\", \"buy now!\", \"save 50%\"]","output":"def classify_emails(emails):\n    result = []\n    for email in emails:\n        words = email.split(\" \")\n        is_spam = False\n        for word in words:\n            if word in ['buy', 'now', 'save']:\n                is_spam = True\n                break\n        result.append(is_spam)\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to classify emails as either spam or not given a list of words\n\n### Input:\nemails = [\"how are you?\", \"buy now!\", \"save 50%\"]\n\n### Output:\ndef classify_emails(emails):\n    result = []\n    for email in emails:\n        words = email.split(\" \")\n        is_spam = False\n        for word in words:\n            if word in ['buy', 'now', 'save']:\n                is_spam = True\n                break\n        result.append(is_spam)\n    return result"}
{"instruction":"Generate a Python program to test the equality of two given strings","input":"St1= \"Python\"\nSt2= \"Programming\"","output":"if st1 == st2:\n    print(\"Strings are equal.\")\nelse:\n    print(\"Strings are not equal.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to test the equality of two given strings\n\n### Input:\nSt1= \"Python\"\nSt2= \"Programming\"\n\n### Output:\nif st1 == st2:\n    print(\"Strings are equal.\")\nelse:\n    print(\"Strings are not equal.\")"}
{"instruction":"Create a loop in Python to print the following sentence 5 times.","input":"\"I love coding!\"","output":"for i in range(5):\n    print(\"I love coding!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a loop in Python to print the following sentence 5 times.\n\n### Input:\n\"I love coding!\"\n\n### Output:\nfor i in range(5):\n    print(\"I love coding!\")"}
{"instruction":"Generate a Python program to reverse the order of every letter in a sentence.","input":"Not applicable","output":"def reverseLetterOrder(string):\n reversed = ''\n\n for char in string:\n  reversed = char + reversed\n\n return reversed\n\nprint(reverseLetterOrder('The quick brown fox jumps over the lazy dog')) # returns \"god yzal eht revo spmuj xof nworb kciuq ehT\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to reverse the order of every letter in a sentence.\n\n### Input:\nNot applicable\n\n### Output:\ndef reverseLetterOrder(string):\n reversed = ''\n\n for char in string:\n  reversed = char + reversed\n\n return reversed\n\nprint(reverseLetterOrder('The quick brown fox jumps over the lazy dog')) # returns \"god yzal eht revo spmuj xof nworb kciuq ehT\""}
{"instruction":"Modify the Python function so that it prints \"Success!\" if the input parameter is greater than 10, or prints \"Failed!\" if it is less than or equal to 10.","input":"7","output":"def check_num(num):\n    if num > 10:\n        print(\"Success!\")\n    else:\n        print(\"Failed!\")\n\ncheck_num(7)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the Python function so that it prints \"Success!\" if the input parameter is greater than 10, or prints \"Failed!\" if it is less than or equal to 10.\n\n### Input:\n7\n\n### Output:\ndef check_num(num):\n    if num > 10:\n        print(\"Success!\")\n    else:\n        print(\"Failed!\")\n\ncheck_num(7)"}
{"instruction":"Create a program in Python that takes an integer and prints out the Fibonacci sequence up to the given integer.","input":"17","output":"def fibonacci(num):\n    if num<=0: \n        print(\"Incorrect input\") \n    elif num==1: \n        return 0\n    elif num==2: \n        return 1\n    else: \n        return fibonacci(num-1)+fibonacci(num-2) \n\nfor x in range(1, num+1): \n    print(fibonacci(x))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes an integer and prints out the Fibonacci sequence up to the given integer.\n\n### Input:\n17\n\n### Output:\ndef fibonacci(num):\n    if num<=0: \n        print(\"Incorrect input\") \n    elif num==1: \n        return 0\n    elif num==2: \n        return 1\n    else: \n        return fibonacci(num-1)+fibonacci(num-2) \n\nfor x in range(1, num+1): \n    print(fibonacci(x))"}
{"instruction":"Create a function in Python to print all the prime numbers in an array.","input":"array = [2, 4, 6, 7, 11, 15]","output":"def print_primes(arr):\n    for i in arr:\n        if i > 1:\n            for j in range(2,i):\n                if (i % j) == 0:\n                    break\n            else:\n                print(i)\n\nprint_primes(array)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to print all the prime numbers in an array.\n\n### Input:\narray = [2, 4, 6, 7, 11, 15]\n\n### Output:\ndef print_primes(arr):\n    for i in arr:\n        if i > 1:\n            for j in range(2,i):\n                if (i % j) == 0:\n                    break\n            else:\n                print(i)\n\nprint_primes(array)"}
{"instruction":"Write a python program to find the maximum value in the given list of numbers.","input":"[-2, 6, 8, -10]","output":"def find_max(nums):\n    max_val = nums[0]\n    for num in nums[1:]:\n        if num > max_val:\n            max_val = num\n    return max_val","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to find the maximum value in the given list of numbers.\n\n### Input:\n[-2, 6, 8, -10]\n\n### Output:\ndef find_max(nums):\n    max_val = nums[0]\n    for num in nums[1:]:\n        if num > max_val:\n            max_val = num\n    return max_val"}
{"instruction":"Create a method in Python which takes a string and an integer as arguments and returns an integer representing the number of times that character appears.","input":"s = \"hello world\", c = 'l'","output":"def findCount(s, c):\n    count = 0\n    for char in s:\n        if char == c:\n            count += 1\n    return count \n\nprint(findCount(s, c))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a method in Python which takes a string and an integer as arguments and returns an integer representing the number of times that character appears.\n\n### Input:\ns = \"hello world\", c = 'l'\n\n### Output:\ndef findCount(s, c):\n    count = 0\n    for char in s:\n        if char == c:\n            count += 1\n    return count \n\nprint(findCount(s, c))"}
{"instruction":"Implement bubble sort in Python code.","input":"","output":"def bubbleSort(arr): \n\n# Traverse through all array elements \nfor i in range(len(arr)): \n\n# Last i elements are already in place \nfor j in range(0, len(arr)-i-1): \n\n# traverse the array from 0 to n-i-1 \n# Swap if the element found is greater \n# than the next element \nif arr[j] > arr[j+1] : \narr[j], arr[j+1] = arr[j+1], arr[j] \n\n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \nbubbleSort(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement bubble sort in Python code.\n\n### Input:\n\n\n### Output:\ndef bubbleSort(arr): \n\n# Traverse through all array elements \nfor i in range(len(arr)): \n\n# Last i elements are already in place \nfor j in range(0, len(arr)-i-1): \n\n# traverse the array from 0 to n-i-1 \n# Swap if the element found is greater \n# than the next element \nif arr[j] > arr[j+1] : \narr[j], arr[j+1] = arr[j+1], arr[j] \n\n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \nbubbleSort(arr)"}
{"instruction":"Develop a Python program to generate the Fibonacci sequence of a given number of terms.","input":"terms = 10","output":"def Fibonacci(terms): \n  Fibonacci_num = [0, 1] \n  a = 0\n  b = 1\n  for i in range(2,terms): \n    c = a + b\n    Fibonacci_num.append(c)\n    a = b\n    b = c\n  return Fibonacci_num \n  \nnterms = 10\nprint(\"Fibonacci sequence:\")\nprint(Fibonacci(nterms))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to generate the Fibonacci sequence of a given number of terms.\n\n### Input:\nterms = 10\n\n### Output:\ndef Fibonacci(terms): \n  Fibonacci_num = [0, 1] \n  a = 0\n  b = 1\n  for i in range(2,terms): \n    c = a + b\n    Fibonacci_num.append(c)\n    a = b\n    b = c\n  return Fibonacci_num \n  \nnterms = 10\nprint(\"Fibonacci sequence:\")\nprint(Fibonacci(nterms))"}
{"instruction":"Write a Python program to parse a web page and extract text from its HTML tags.","input":"<html>\n<head>\n <title>Example Web Page<\/title>\n<\/head>\n<body>\n <h1>This is an example web page<\/h1>\n <p>Welcome to our web page!<\/p>\n<\/body>\n<\/html>","output":"from bs4 import BeautifulSoup\ndef parse_web_html(html):\n soup = BeautifulSoup(html, 'html.parser')\n text = soup.get_text()\n return text","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to parse a web page and extract text from its HTML tags.\n\n### Input:\n<html>\n<head>\n <title>Example Web Page<\/title>\n<\/head>\n<body>\n <h1>This is an example web page<\/h1>\n <p>Welcome to our web page!<\/p>\n<\/body>\n<\/html>\n\n### Output:\nfrom bs4 import BeautifulSoup\ndef parse_web_html(html):\n soup = BeautifulSoup(html, 'html.parser')\n text = soup.get_text()\n return text"}
{"instruction":"Write a Python function to compare two given strings and return a score indicating their similarity.","input":"","output":"def compare_strings(s1, s2):\n m = len(s1)\n n = len(s2)\n \n # Create a table to store results of subproblems\n dp = [[0 for x in range(n + 1)] for x in range(m + 1)]\n \n # Fill d[][] in bottom up manner\n for i in range(m + 1):\n  for j in range(n + 1):\n   if i == 0 or j == 0:\n    dp[i][j] = 0\n   elif s1[i - 1] == s2[j - 1]:\n    dp[i][j] = 1 + dp[i - 1][j - 1]\n   else:\n    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n \n # LCS will be last entry in the lookup table\n return dp[m][n]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to compare two given strings and return a score indicating their similarity.\n\n### Input:\n\n\n### Output:\ndef compare_strings(s1, s2):\n m = len(s1)\n n = len(s2)\n \n # Create a table to store results of subproblems\n dp = [[0 for x in range(n + 1)] for x in range(m + 1)]\n \n # Fill d[][] in bottom up manner\n for i in range(m + 1):\n  for j in range(n + 1):\n   if i == 0 or j == 0:\n    dp[i][j] = 0\n   elif s1[i - 1] == s2[j - 1]:\n    dp[i][j] = 1 + dp[i - 1][j - 1]\n   else:\n    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n \n # LCS will be last entry in the lookup table\n return dp[m][n]"}
{"instruction":"Write a Python program that creates a dictionary with a list as a key","input":"","output":"def make_dict_from_list(list_key): \n    dictionary = {}\n    for element in list_key:\n        dictionary[element] = []\n    return dictionary","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that creates a dictionary with a list as a key\n\n### Input:\n\n\n### Output:\ndef make_dict_from_list(list_key): \n    dictionary = {}\n    for element in list_key:\n        dictionary[element] = []\n    return dictionary"}
{"instruction":"Create a Python program to search a string and print the index of all instances of a specific character.","input":"string = \"abcdefghi\"\ncharacter = \"d\"","output":"def search_character(string, character):\n indices = []\n for i in range(len(string)):\n  if string[i] == character:\n   indices.append(i)\n return indices\n\nprint(search_character(string, character)) # [3]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to search a string and print the index of all instances of a specific character.\n\n### Input:\nstring = \"abcdefghi\"\ncharacter = \"d\"\n\n### Output:\ndef search_character(string, character):\n indices = []\n for i in range(len(string)):\n  if string[i] == character:\n   indices.append(i)\n return indices\n\nprint(search_character(string, character)) # [3]"}
{"instruction":"Create an algorithm in Python to calculate the Fibonacci sequence up to n terms.","input":"","output":"def f_Fibonacci(n): \n  a = 0\n  b = 1\n  if n < 0: \n    print(\"Incorrect input\") \n  elif n == 0: \n    return a \n  elif n == 1: \n    return b \n  else: \n    for i in range(2,n): \n      c = a + b \n      a = b \n      b = c \n    return b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to calculate the Fibonacci sequence up to n terms.\n\n### Input:\n\n\n### Output:\ndef f_Fibonacci(n): \n  a = 0\n  b = 1\n  if n < 0: \n    print(\"Incorrect input\") \n  elif n == 0: \n    return a \n  elif n == 1: \n    return b \n  else: \n    for i in range(2,n): \n      c = a + b \n      a = b \n      b = c \n    return b"}
{"instruction":"Modify the following Python code to calculate the average of values in the given dictionary, for specific key.","input":"grades_dict = {\n 'student1':[1, 2, 3],\n 'student2':[4, 5, 6],\n 'student3':[7, 8, 9],\n}\nvalues_key = 'student3'","output":"grades_dict = {\n 'student1':[1, 2, 3],\n 'student2':[4, 5, 6],\n 'student3':[7, 8, 9],\n}\nvalues_key = 'student3'\n\ndef calculate_avg_from_dict(dict, key):\n    total_sum = 0\n    values = dict[key]\n    for value in values:\n        total_sum += value\n    return total_sum\/len(values)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following Python code to calculate the average of values in the given dictionary, for specific key.\n\n### Input:\ngrades_dict = {\n 'student1':[1, 2, 3],\n 'student2':[4, 5, 6],\n 'student3':[7, 8, 9],\n}\nvalues_key = 'student3'\n\n### Output:\ngrades_dict = {\n 'student1':[1, 2, 3],\n 'student2':[4, 5, 6],\n 'student3':[7, 8, 9],\n}\nvalues_key = 'student3'\n\ndef calculate_avg_from_dict(dict, key):\n    total_sum = 0\n    values = dict[key]\n    for value in values:\n        total_sum += value\n    return total_sum\/len(values)"}
{"instruction":"Utilizing Python, design a data structure for storing and sorting books according to their ISBN numbers.","input":"","output":"class BookSet:\n    def __init__(self):\n        \n        self.books = []\n    \n    def add_book(self, book):\n        self.books.append(book)\n    \n    def sort_by_isbn(self):\n        self.books.sort(key=lambda x: x.isbn)\n\nclass Book:\n    def __init__(self, isbn, title, author):\n        self.isbn = isbn\n        self.title = title\n        self.author = author\n\n# Instantiate the BookSet\nbs = BookSet()\n\n# Add books\nbs.add_book(Book(1234567890, \"Harry Potter\", \"J.K. Rowling\"))\nbs.add_book(Book(11223344, \"Book title\", \"Author name\"))\n\n# Sort by ISBN numbers\nbs.sort_by_isbn()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUtilizing Python, design a data structure for storing and sorting books according to their ISBN numbers.\n\n### Input:\n\n\n### Output:\nclass BookSet:\n    def __init__(self):\n        \n        self.books = []\n    \n    def add_book(self, book):\n        self.books.append(book)\n    \n    def sort_by_isbn(self):\n        self.books.sort(key=lambda x: x.isbn)\n\nclass Book:\n    def __init__(self, isbn, title, author):\n        self.isbn = isbn\n        self.title = title\n        self.author = author\n\n# Instantiate the BookSet\nbs = BookSet()\n\n# Add books\nbs.add_book(Book(1234567890, \"Harry Potter\", \"J.K. Rowling\"))\nbs.add_book(Book(11223344, \"Book title\", \"Author name\"))\n\n# Sort by ISBN numbers\nbs.sort_by_isbn()"}
{"instruction":"Write a Python program to calculate the sum of the elements in a given matrix. Assume the matrix is a list of lists.","input":"matrix = [[1,2], [3,4], [5,6]]","output":"def matrix_sum(matrix):\nsum = 0\nfor row in matrix:\n for elem in row:\n  sum += elem\nreturn sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the sum of the elements in a given matrix. Assume the matrix is a list of lists.\n\n### Input:\nmatrix = [[1,2], [3,4], [5,6]]\n\n### Output:\ndef matrix_sum(matrix):\nsum = 0\nfor row in matrix:\n for elem in row:\n  sum += elem\nreturn sum"}
{"instruction":"Write a Python program to classify the given dataset using k-means clustering.","input":"x_points = {2, 4, 5, 10, 12, 13, 15, 16,18, 20}\ny_points = {3, 8, 10, 13, 15, 16, 18, 22, 25, 30}","output":"from sklearn.cluster import KMeans\n\ndef cluster_data(x_points, y_points):\n X = list(zip(x_points, y_points))\n clustering_model = KMeans(n_clusters=3)\n clustering_model.fit(X)\n labels = clustering_model.labels_\n return labels","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify the given dataset using k-means clustering.\n\n### Input:\nx_points = {2, 4, 5, 10, 12, 13, 15, 16,18, 20}\ny_points = {3, 8, 10, 13, 15, 16, 18, 22, 25, 30}\n\n### Output:\nfrom sklearn.cluster import KMeans\n\ndef cluster_data(x_points, y_points):\n X = list(zip(x_points, y_points))\n clustering_model = KMeans(n_clusters=3)\n clustering_model.fit(X)\n labels = clustering_model.labels_\n return labels"}
{"instruction":"Design a program in Python to convert a given number into the equivalent number in the Roman Numeral system.","input":"29","output":"def dec_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num \/\/ val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n\n\nroman_num = dec_to_roman(29)\nprint(roman_num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to convert a given number into the equivalent number in the Roman Numeral system.\n\n### Input:\n29\n\n### Output:\ndef dec_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num \/\/ val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n\n\nroman_num = dec_to_roman(29)\nprint(roman_num)"}
{"instruction":"Compose a Python program for finding the maximum number from a given list of numbers.","input":"list = [10, 11, 25, 80, 50]","output":"def max_number(list):\n    max_num = 0\n    for i in list:\n        if i > max_num:\n            max_num = i\n    return max_num\n\nmax_num = max_number(list)\nprint(\"The maximum number is:\", max_num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python program for finding the maximum number from a given list of numbers.\n\n### Input:\nlist = [10, 11, 25, 80, 50]\n\n### Output:\ndef max_number(list):\n    max_num = 0\n    for i in list:\n        if i > max_num:\n            max_num = i\n    return max_num\n\nmax_num = max_number(list)\nprint(\"The maximum number is:\", max_num)"}
{"instruction":"Omit any incomplete code from a given Python program by supplying correct expressions and indentation.","input":"if \n  a<20:\n  b = c \n   c = b","output":"if a < 20:\n    b = c\n    c = b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOmit any incomplete code from a given Python program by supplying correct expressions and indentation.\n\n### Input:\nif \n  a<20:\n  b = c \n   c = b\n\n### Output:\nif a < 20:\n    b = c\n    c = b"}
{"instruction":"Develop a program in Python to sort a list of integer numbers.","input":"[1, 7, 5, 9, 3]","output":"def sort_list(list):\n sorted_list = sorted(list)\n return sorted_list \n\nlist = [1, 7, 5, 9 , 3]\nprint(sort_list(list)) # will print [1, 3, 5, 7, 9]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python to sort a list of integer numbers.\n\n### Input:\n[1, 7, 5, 9, 3]\n\n### Output:\ndef sort_list(list):\n sorted_list = sorted(list)\n return sorted_list \n\nlist = [1, 7, 5, 9 , 3]\nprint(sort_list(list)) # will print [1, 3, 5, 7, 9]"}
{"instruction":"Translate the following Python code to JavaScript:\n\ndef sum(a, b):","input":"Not applicable","output":"function sum(a, b) {\n return a + b;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTranslate the following Python code to JavaScript:\n\ndef sum(a, b):\n\n### Input:\nNot applicable\n\n### Output:\nfunction sum(a, b) {\n return a + b;\n}"}
{"instruction":"Create a class structure to represent a student in Python.","input":"","output":"class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def getName(self):\n        return self.name\n    \n    def setName(self, name):\n        self.name = name\n    \n    def getAge(self):\n        return self.age\n    \n    def setAge(self, age):\n        self.age = age","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class structure to represent a student in Python.\n\n### Input:\n\n\n### Output:\nclass Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def getName(self):\n        return self.name\n    \n    def setName(self, name):\n        self.name = name\n    \n    def getAge(self):\n        return self.age\n    \n    def setAge(self, age):\n        self.age = age"}
{"instruction":"Write a Python program that takes a string and counts the number of occurrences of each letter, and then prints the results.","input":"\"Hello World!\"","output":"str = \"Hello World!\"\nchars = list(str)\n\n# initialize counts as empty dictionary\nchar_counts = {}\n\nfor char in chars:\n    if char in char_counts:\n        char_counts[char] += 1\n    else:\n        char_counts[char] = 1\n\n# printing result\nfor char, count in char_counts.items():\n    print(\"{} : {}\".format(char, count))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a string and counts the number of occurrences of each letter, and then prints the results.\n\n### Input:\n\"Hello World!\"\n\n### Output:\nstr = \"Hello World!\"\nchars = list(str)\n\n# initialize counts as empty dictionary\nchar_counts = {}\n\nfor char in chars:\n    if char in char_counts:\n        char_counts[char] += 1\n    else:\n        char_counts[char] = 1\n\n# printing result\nfor char, count in char_counts.items():\n    print(\"{} : {}\".format(char, count))"}
{"instruction":"Create a function in Python that builds an object with the following properties.","input":"","output":"def build_object():\n    obj = {\n        \"firstName\": \"John\",\n        \"lastName\": \"Smith\",\n        \"age\": 40,\n        \"address\": {\n            \"street\": \"123 Main Street\",\n            \"city\": \"San Francisco\",\n            \"state\": \"CA\",\n            \"zipCode\": \"94105\"\n        }\n    }\n    return obj\n \nobj = build_object()\nprint(obj)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that builds an object with the following properties.\n\n### Input:\n\n\n### Output:\ndef build_object():\n    obj = {\n        \"firstName\": \"John\",\n        \"lastName\": \"Smith\",\n        \"age\": 40,\n        \"address\": {\n            \"street\": \"123 Main Street\",\n            \"city\": \"San Francisco\",\n            \"state\": \"CA\",\n            \"zipCode\": \"94105\"\n        }\n    }\n    return obj\n \nobj = build_object()\nprint(obj)"}
{"instruction":"Generate a Python script using Scikit-Learn for performing k-means clustering on a given dataset.","input":"Dataset: The dataset consists of three features x1, x2 and x3.","output":"import numpy as np\nfrom sklearn.cluster import KMeans\n\ndata = np.array([[x1, x2, x3]]) #replace x1, x2 and x3 with the features in the dataset\n\nkmeans = KMeans(n_clusters=3).fit(data)\nclusters = kmeans.predict(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script using Scikit-Learn for performing k-means clustering on a given dataset.\n\n### Input:\nDataset: The dataset consists of three features x1, x2 and x3.\n\n### Output:\nimport numpy as np\nfrom sklearn.cluster import KMeans\n\ndata = np.array([[x1, x2, x3]]) #replace x1, x2 and x3 with the features in the dataset\n\nkmeans = KMeans(n_clusters=3).fit(data)\nclusters = kmeans.predict(data)"}
{"instruction":"Generate a python program to sort a list according to its second element","input":"","output":"def sort_list(lst):\n  lst.sort(key = lambda x: x[1])\n  return lst","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to sort a list according to its second element\n\n### Input:\n\n\n### Output:\ndef sort_list(lst):\n  lst.sort(key = lambda x: x[1])\n  return lst"}
{"instruction":"Creat a Python program to find the sum of the digits of an arbitrary number.","input":"345","output":"def sum_of_digits(num):\n    total = 0\n    while num > 0:\n        total += num % 10\n        num = num \/\/ 10\n    return total\n\ntotal = sum_of_digits(345)\nprint(f'Sum of the digits of the number is {total}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreat a Python program to find the sum of the digits of an arbitrary number.\n\n### Input:\n345\n\n### Output:\ndef sum_of_digits(num):\n    total = 0\n    while num > 0:\n        total += num % 10\n        num = num \/\/ 10\n    return total\n\ntotal = sum_of_digits(345)\nprint(f'Sum of the digits of the number is {total}')"}
{"instruction":"Write a python program to extract all the words from a given sentence and store them into a dictionary. Calculate the frequency of each word, and store them in the same dictionary keyed with the words.","input":"I love to code","output":"words_dict = {}\nsentence = \"I love to code\"\nwords = sentence.split()\n\nfor word in words:\n if word in words_dict:\n words_dict[word] += 1\n else:\n words_dict[word] = 1\n\nprint(words_dict)\n\n# Output:\n# {'I': 1, 'love': 1, 'to': 1, 'code': 1}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to extract all the words from a given sentence and store them into a dictionary. Calculate the frequency of each word, and store them in the same dictionary keyed with the words.\n\n### Input:\nI love to code\n\n### Output:\nwords_dict = {}\nsentence = \"I love to code\"\nwords = sentence.split()\n\nfor word in words:\n if word in words_dict:\n words_dict[word] += 1\n else:\n words_dict[word] = 1\n\nprint(words_dict)\n\n# Output:\n# {'I': 1, 'love': 1, 'to': 1, 'code': 1}"}
{"instruction":"Analyze the following code and explain how it works.","input":"def generate_random_string(n):\n\u00a0\u00a0\u00a0\u00a0# String of alphabets, numbers, and special characters\n\u00a0\u00a0\u00a0\u00a0alphabets = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$&*\"\n\n\u00a0\u00a0\u00a0\u00a0# Initialize a string\n\u00a0\u00a0\u00a0\u00a0res = \"\"\n\n\u00a0\u00a0\u00a0\u00a0# Generate random string\n\u00a0\u00a0\u00a0\u00a0for i in range(n):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res += alphabets[random.randint(0,len(alphabets)-1)]\n\u00a0\u00a0\u00a0\u00a0return res","output":"This function accepts a parameter n which denotes the length of the random string to generate. It creates a string containing all the alphabets, numbers, and special characters. It initializes a result string to store the random string generated and then uses the Python random() method to generate a random index in the range of the length of the alphabets string. It then assigns the character at the random index to the result string and then loops until it generates a string of the given length. Finally, it returns the randomly generated string.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAnalyze the following code and explain how it works.\n\n### Input:\ndef generate_random_string(n):\n\u00a0\u00a0\u00a0\u00a0# String of alphabets, numbers, and special characters\n\u00a0\u00a0\u00a0\u00a0alphabets = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$&*\"\n\n\u00a0\u00a0\u00a0\u00a0# Initialize a string\n\u00a0\u00a0\u00a0\u00a0res = \"\"\n\n\u00a0\u00a0\u00a0\u00a0# Generate random string\n\u00a0\u00a0\u00a0\u00a0for i in range(n):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res += alphabets[random.randint(0,len(alphabets)-1)]\n\u00a0\u00a0\u00a0\u00a0return res\n\n### Output:\nThis function accepts a parameter n which denotes the length of the random string to generate. It creates a string containing all the alphabets, numbers, and special characters. It initializes a result string to store the random string generated and then uses the Python random() method to generate a random index in the range of the length of the alphabets string. It then assigns the character at the random index to the result string and then loops until it generates a string of the given length. Finally, it returns the randomly generated string."}
{"instruction":"Come up with a function in Python that predicts the future value of stocks given some parameters.","input":"parameters:  market condition, news, historical data","output":"def predict_stock_value(parameters):\n    \"\"\"\n    Predicts the future value of stocks based on given parameters.\n    \n    Parameters: \n        - Market condition (trends, developments, etc.) \n        - News (industry-specific news, news sources) \n        - Historical data (stock prices, stock returns)\n\n    Returns:\n        A float value representing predicted stock price.\n    \"\"\"\n    # Code to generate predicted stock value goes here\n    ...\n    return predicted_stock_value","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a function in Python that predicts the future value of stocks given some parameters.\n\n### Input:\nparameters:  market condition, news, historical data\n\n### Output:\ndef predict_stock_value(parameters):\n    \"\"\"\n    Predicts the future value of stocks based on given parameters.\n    \n    Parameters: \n        - Market condition (trends, developments, etc.) \n        - News (industry-specific news, news sources) \n        - Historical data (stock prices, stock returns)\n\n    Returns:\n        A float value representing predicted stock price.\n    \"\"\"\n    # Code to generate predicted stock value goes here\n    ...\n    return predicted_stock_value"}
{"instruction":"Create a Python program to convert a list of values from Celsius to Fahrenheit.","input":"[0, 10, 20]","output":"\"\"\"\nCreate a Python program to convert a list of values from Celsius to Fahrenheit\n\"\"\"\ndef celsiusToFahrenheit(celsius_list):\n    fahrenheit_list = []\n    for celsius in celsius_list:\n        fahrenheit = celsius * 9\/5 + 32\n        fahrenheit_list.append(fahrenheit)\n    return fahrenheit_list\n\nif __name__ == '__main__':\n    celsius_list = [0, 10, 20]\n    fahrenheit_list = celsiusToFahrenheit(celsius_list)\n    print(fahrenheit_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to convert a list of values from Celsius to Fahrenheit.\n\n### Input:\n[0, 10, 20]\n\n### Output:\n\"\"\"\nCreate a Python program to convert a list of values from Celsius to Fahrenheit\n\"\"\"\ndef celsiusToFahrenheit(celsius_list):\n    fahrenheit_list = []\n    for celsius in celsius_list:\n        fahrenheit = celsius * 9\/5 + 32\n        fahrenheit_list.append(fahrenheit)\n    return fahrenheit_list\n\nif __name__ == '__main__':\n    celsius_list = [0, 10, 20]\n    fahrenheit_list = celsiusToFahrenheit(celsius_list)\n    print(fahrenheit_list)"}
{"instruction":"Develop an AI-driven chatbot in Python that can answer basic questions about a sporting event.","input":"The sporting event is \"UEFA Euro 2020\".","output":"class Chatbot:\n def __init__(self):\n self.event = \"UEFA Euro 2020\"\n\n def respond(self, message):\n if 'when' in message:\n return 'UEFA Euro 2020 is scheduled to take place from 11th June 2021 to 11th July 2021.'\n elif 'where' in message:\n return 'UEFA Euro 2020 will be hosted in 11 cities across 12 countries.'\n elif 'teams' in message:\n return 'There will be 24 teams competing in UEFA Euro 20","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI-driven chatbot in Python that can answer basic questions about a sporting event.\n\n### Input:\nThe sporting event is \"UEFA Euro 2020\".\n\n### Output:\nclass Chatbot:\n def __init__(self):\n self.event = \"UEFA Euro 2020\"\n\n def respond(self, message):\n if 'when' in message:\n return 'UEFA Euro 2020 is scheduled to take place from 11th June 2021 to 11th July 2021.'\n elif 'where' in message:\n return 'UEFA Euro 2020 will be hosted in 11 cities across 12 countries.'\n elif 'teams' in message:\n return 'There will be 24 teams competing in UEFA Euro 20"}
{"instruction":"Create a function in Python that takes an integer argument and returns True if the argument is an even number and False if it is an odd number.","input":"","output":"def even_odd(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes an integer argument and returns True if the argument is an even number and False if it is an odd number.\n\n### Input:\n\n\n### Output:\ndef even_odd(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"}
{"instruction":"Generate a Python program to implement the following feature: Search a phrase in a given string.","input":"Search the phrase \"to be or not to be\" in the string \"Whether 'tis nobler in the mind to suffer\".","output":"def search(phrase, string):\n  if phrase in string:\n     return True \n  else:\n     return False \n\nresult = search(\"to be or not to be\", \"Whether 'tis nobler in the mind to suffer\")\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to implement the following feature: Search a phrase in a given string.\n\n### Input:\nSearch the phrase \"to be or not to be\" in the string \"Whether 'tis nobler in the mind to suffer\".\n\n### Output:\ndef search(phrase, string):\n  if phrase in string:\n     return True \n  else:\n     return False \n\nresult = search(\"to be or not to be\", \"Whether 'tis nobler in the mind to suffer\")\nprint(result)"}
{"instruction":"Construct a Python program to calculate the age in years of a person given their birthdate.","input":"06\/11\/1996","output":"import datetime\n\ndef calculate_age(birthdate):\n\n    today = datetime.date.today()\n    current_year = today.year\n\n    age = current_year - birthdate.year\n\n    if ((birthdate.month, birthdate.day) > (today.month, today.day)):\n        age -= 1\n    \n    return age\n\nbirthdate = datetime.date(1996, 6, 11)\nage = calculate_age(birthdate)\nprint(age) # 24","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to calculate the age in years of a person given their birthdate.\n\n### Input:\n06\/11\/1996\n\n### Output:\nimport datetime\n\ndef calculate_age(birthdate):\n\n    today = datetime.date.today()\n    current_year = today.year\n\n    age = current_year - birthdate.year\n\n    if ((birthdate.month, birthdate.day) > (today.month, today.day)):\n        age -= 1\n    \n    return age\n\nbirthdate = datetime.date(1996, 6, 11)\nage = calculate_age(birthdate)\nprint(age) # 24"}
{"instruction":"Convert the following equation into a Python program: y = x^2 - 3x + 2","input":"","output":"def equation(x):\n    return (x**2 - 3*x + 2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following equation into a Python program: y = x^2 - 3x + 2\n\n### Input:\n\n\n### Output:\ndef equation(x):\n    return (x**2 - 3*x + 2)"}
{"instruction":"Create a program in Python to find the maximum value in a given sequence.","input":"[3, 4, 6, 2, 8, 9, 5]","output":"def findMaxValue(arr):\n    max_val = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n\n    return max_val\n\narr = [3, 4, 6, 2, 8, 9, 5]\nmaxValue = findMaxValue(arr)\nprint('Max value in given array is: {}'.format(maxValue))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to find the maximum value in a given sequence.\n\n### Input:\n[3, 4, 6, 2, 8, 9, 5]\n\n### Output:\ndef findMaxValue(arr):\n    max_val = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n\n    return max_val\n\narr = [3, 4, 6, 2, 8, 9, 5]\nmaxValue = findMaxValue(arr)\nprint('Max value in given array is: {}'.format(maxValue))"}
{"instruction":"Edit the following Python code such that it will print an array containing the seven days of the week.","input":"days = [\"Monday\", \"Thuesday\", \"Wednesday\", \"Thrusday\", \"Friday\"]\n\nfor day in days:\n    print(day)","output":"days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n\nfor day in days:\n    print(day)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code such that it will print an array containing the seven days of the week.\n\n### Input:\ndays = [\"Monday\", \"Thuesday\", \"Wednesday\", \"Thrusday\", \"Friday\"]\n\nfor day in days:\n    print(day)\n\n### Output:\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n\nfor day in days:\n    print(day)"}
{"instruction":"Optimize a given Python program by reducing the running time.","input":"def sum_of_numbers(n):\n   s = 0\n   for i in range(1,n+1):\n       s = s + i\n   return s","output":"def sum_of_numbers(n):\n    return int(n * (n + 1) \/ 2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a given Python program by reducing the running time.\n\n### Input:\ndef sum_of_numbers(n):\n   s = 0\n   for i in range(1,n+1):\n       s = s + i\n   return s\n\n### Output:\ndef sum_of_numbers(n):\n    return int(n * (n + 1) \/ 2)"}
{"instruction":"Generate a python program to delete duplicate elements from the given array.","input":"Input: [1, 2, 3, 4, 4, 5, 6, 7, 8, 8]","output":"def delete_duplicates(array):\n    seen = set()\n    non_duplicates = []\n    for val in array:\n        if val not in seen:\n            non_duplicates.append(val)\n            seen.add(val)\n    return non_duplicates","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to delete duplicate elements from the given array.\n\n### Input:\nInput: [1, 2, 3, 4, 4, 5, 6, 7, 8, 8]\n\n### Output:\ndef delete_duplicates(array):\n    seen = set()\n    non_duplicates = []\n    for val in array:\n        if val not in seen:\n            non_duplicates.append(val)\n            seen.add(val)\n    return non_duplicates"}
{"instruction":"Create a Python program that takes in a list of numbers and finds the closest number to a given number.","input":"[2, 4, 7, 8], 5","output":"def find_closest(nums, target):\n closest_num = float('inf')\n for num in nums:\n  if abs(target - num) < abs(target - closest_num):\n   closest_num = num\n return closest_num\n\nnums = [2, 4, 7, 8]\ntarget = 5\n\nprint(find_closest(nums, target))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes in a list of numbers and finds the closest number to a given number.\n\n### Input:\n[2, 4, 7, 8], 5\n\n### Output:\ndef find_closest(nums, target):\n closest_num = float('inf')\n for num in nums:\n  if abs(target - num) < abs(target - closest_num):\n   closest_num = num\n return closest_num\n\nnums = [2, 4, 7, 8]\ntarget = 5\n\nprint(find_closest(nums, target))"}
{"instruction":"Create a Python script to parse a list of IP addresses into readable fields.","input":"IPs = [\"123.235.123.245\", \"54.72.56.14\", \"182.193.146.172\"]","output":"import re\n\nIPs = [\"123.235.123.245\", \"54.72.56.14\", \"182.193.146.172\"]\nfor ip in IPs:\n ip_parts = ip.split('.')\n octet1 = ip_parts[0]\n octet2 = ip_parts[1]\n octet3 = ip_parts[2]\n octet4 = ip_parts[3]\n\n print(f'The first octet is {octet1}, the second is {octet2}, the third is {octet3}, and the fourth is {octet4}.')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to parse a list of IP addresses into readable fields.\n\n### Input:\nIPs = [\"123.235.123.245\", \"54.72.56.14\", \"182.193.146.172\"]\n\n### Output:\nimport re\n\nIPs = [\"123.235.123.245\", \"54.72.56.14\", \"182.193.146.172\"]\nfor ip in IPs:\n ip_parts = ip.split('.')\n octet1 = ip_parts[0]\n octet2 = ip_parts[1]\n octet3 = ip_parts[2]\n octet4 = ip_parts[3]\n\n print(f'The first octet is {octet1}, the second is {octet2}, the third is {octet3}, and the fourth is {octet4}.')"}
{"instruction":"Given the input, create a Python program which prints out all the words inside the input in alphabetical order.","input":"I like cats and playing the piano","output":"def print_words_in_order(string):\n    \"\"\"Print out all the words in the input in alphabetical order\"\"\"\n    words = string.split()\n    words.sort()\n    for word in words:\n        print(word)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven the input, create a Python program which prints out all the words inside the input in alphabetical order.\n\n### Input:\nI like cats and playing the piano\n\n### Output:\ndef print_words_in_order(string):\n    \"\"\"Print out all the words in the input in alphabetical order\"\"\"\n    words = string.split()\n    words.sort()\n    for word in words:\n        print(word)"}
{"instruction":"Design a web API in Python, which returns the average of a list of numbers.","input":"","output":"from flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route(\"\/average\", methods=[\"POST\"])\ndef get_average():\n    list_of_numbers = request.get_json()\n    average = sum(list_of_numbers) \/ len(list_of_numbers)\n\n    return jsonify(average)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a web API in Python, which returns the average of a list of numbers.\n\n### Input:\n\n\n### Output:\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route(\"\/average\", methods=[\"POST\"])\ndef get_average():\n    list_of_numbers = request.get_json()\n    average = sum(list_of_numbers) \/ len(list_of_numbers)\n\n    return jsonify(average)"}
{"instruction":"Write a Python program to query all 10,000 rows in the provided SQL table.","input":"Table \"Example\" with 10,000 rows","output":"import sqlite3\n\n# connect to SQL database\ndb = sqlite3.connect('example.db')\n\n# create cursor\ncur = db.cursor()\n\n# execute query\ncur.execute('SELECT * FROM \"example\"')\n\n# fetch all rows\nrows = cur.fetchall()\n\n# display all rows\nfor row in rows:\n    print row","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to query all 10,000 rows in the provided SQL table.\n\n### Input:\nTable \"Example\" with 10,000 rows\n\n### Output:\nimport sqlite3\n\n# connect to SQL database\ndb = sqlite3.connect('example.db')\n\n# create cursor\ncur = db.cursor()\n\n# execute query\ncur.execute('SELECT * FROM \"example\"')\n\n# fetch all rows\nrows = cur.fetchall()\n\n# display all rows\nfor row in rows:\n    print row"}
{"instruction":"Generate a Python function to optimize a given function using a Gradient Descent algorithm.","input":"","output":"def optimize_function(f, learning_rate, iterations):\n weights = np.random.rand(f.shape[0])\n for _ in range(iterations):\n grads = estimate_gradient(f, weights)\n weights -= learning_rate * grads\n return weights","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to optimize a given function using a Gradient Descent algorithm.\n\n### Input:\n\n\n### Output:\ndef optimize_function(f, learning_rate, iterations):\n weights = np.random.rand(f.shape[0])\n for _ in range(iterations):\n grads = estimate_gradient(f, weights)\n weights -= learning_rate * grads\n return weights"}
{"instruction":"Create an algorithm for solving the knapsack problem in Python.","input":"A set of items with weights {5, 7, 3, 9} and values {10, 5, 8, 9}. The capacity of the knapsack is 16.","output":"def knapsack(items, capacity):\n n = len(items)\n dp = [[0 for _ in range(capacity+1)] for _ in range(n+1)]\n\n for i in range(1, n+1):\n  for j in range(capacity+1):\n   if items[i-1][1] <= j:\n    dp[i][j] = max(items[i-1][0] + dp[i-1][j-items[i-1][1]], dp[i-1][j])\n   else:\n    dp[i][j] = dp[i-1][j]\n   \n return dp[n][capacity]\n\n# Sample run\n# The items are (10, 5), (5, 7), (8, 3), (9, 9)\n# The capacity of the knapsack is 16\nitems = [(10, 5), (5, 7), (8, 3), (9, 9)]\ncapacity = 16\nprint(knapsack(items, capacity)) # Outputs: 21","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm for solving the knapsack problem in Python.\n\n### Input:\nA set of items with weights {5, 7, 3, 9} and values {10, 5, 8, 9}. The capacity of the knapsack is 16.\n\n### Output:\ndef knapsack(items, capacity):\n n = len(items)\n dp = [[0 for _ in range(capacity+1)] for _ in range(n+1)]\n\n for i in range(1, n+1):\n  for j in range(capacity+1):\n   if items[i-1][1] <= j:\n    dp[i][j] = max(items[i-1][0] + dp[i-1][j-items[i-1][1]], dp[i-1][j])\n   else:\n    dp[i][j] = dp[i-1][j]\n   \n return dp[n][capacity]\n\n# Sample run\n# The items are (10, 5), (5, 7), (8, 3), (9, 9)\n# The capacity of the knapsack is 16\nitems = [(10, 5), (5, 7), (8, 3), (9, 9)]\ncapacity = 16\nprint(knapsack(items, capacity)) # Outputs: 21"}
{"instruction":"Create a Python program to validate user input. The program should take a string and only return \"valid\" if the string contains only the characters a-z, 0-9, and _ .","input":"text_string = \"valid_string123\"","output":"text_string = input()\n\nvalid_characters = \"abcdefghijklmnopqrstuvwxyz0123456789_\"\n\nis_valid = True\n\nfor c in text_string:\n if c not in valid_characters:\n is_valid = False\n\nif is_valid:\n print \"Valid\"\nelse:\n print \"Invalid\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to validate user input. The program should take a string and only return \"valid\" if the string contains only the characters a-z, 0-9, and _ .\n\n### Input:\ntext_string = \"valid_string123\"\n\n### Output:\ntext_string = input()\n\nvalid_characters = \"abcdefghijklmnopqrstuvwxyz0123456789_\"\n\nis_valid = True\n\nfor c in text_string:\n if c not in valid_characters:\n is_valid = False\n\nif is_valid:\n print \"Valid\"\nelse:\n print \"Invalid\""}
{"instruction":"Create a Python program that implements a bubble sort algorithm.","input":"A given list of numbers, for example, [4,7,2,9,1].","output":"def bubble_sort(list):\n for x in range(len(list)-1, 0, -1):\n  for y in range(x):\n   if list[y] > list[y+1]:\n    list[y], list[y+1] = list[y+1], list[y]\n \n return list\n\nlist = [4,7,2,9,1]\nprint(bubble_sort(list))\n##\n12. Instruction: Generate a Rust program to calculate the mean of relevant values in a list. \n12. Input:\nA given list of integers, for example, [2,4,6,8,10].\n12. Output:\nfn main() {\n let nums = vec![2, 4, 6, 8, 10]; \/\/ given list\n    \n let mut sum = 0;\n for num in &nums {\n  sum += num;\n }\n let mean = sum \/ nums.len() as f32;\n \n println!(\"The mean of the list is {}\", mean);\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that implements a bubble sort algorithm.\n\n### Input:\nA given list of numbers, for example, [4,7,2,9,1].\n\n### Output:\ndef bubble_sort(list):\n for x in range(len(list)-1, 0, -1):\n  for y in range(x):\n   if list[y] > list[y+1]:\n    list[y], list[y+1] = list[y+1], list[y]\n \n return list\n\nlist = [4,7,2,9,1]\nprint(bubble_sort(list))\n##\n12. Instruction: Generate a Rust program to calculate the mean of relevant values in a list. \n12. Input:\nA given list of integers, for example, [2,4,6,8,10].\n12. Output:\nfn main() {\n let nums = vec![2, 4, 6, 8, 10]; \/\/ given list\n    \n let mut sum = 0;\n for num in &nums {\n  sum += num;\n }\n let mean = sum \/ nums.len() as f32;\n \n println!(\"The mean of the list is {}\", mean);\n}"}
{"instruction":"Generate a code to create an array in python of size n.","input":"n = 5","output":"array = [None] * n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to create an array in python of size n.\n\n### Input:\nn = 5\n\n### Output:\narray = [None] * n"}
{"instruction":"Generate code for a Python class called Basket, which should inherit from a List class and have the following methods: add_item(), remove_item(), and get_total().","input":"Not applicable","output":"class Basket(list):\n \n def __init__(self):\n  super().__init__()\n \n def add_item(self, item):\n  self.append(item)\n \n def remove_item(self, item):\n  self.remove(item)\n \n def get_total(self):\n  total = 0\n  for item in self:\n   total += item.price\n  return total","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code for a Python class called Basket, which should inherit from a List class and have the following methods: add_item(), remove_item(), and get_total().\n\n### Input:\nNot applicable\n\n### Output:\nclass Basket(list):\n \n def __init__(self):\n  super().__init__()\n \n def add_item(self, item):\n  self.append(item)\n \n def remove_item(self, item):\n  self.remove(item)\n \n def get_total(self):\n  total = 0\n  for item in self:\n   total += item.price\n  return total"}
{"instruction":"Create a function in Python that returns the sequential median value from an array of integers.","input":"arr = [1, 3, 5, 6, 9, 11]","output":"def find_median(arr):\n    n = len(arr) \n    arr.sort() \n  \n    if n % 2 != 0: \n        return arr[n\/\/2] \n  \n    return (arr[(n-1)\/\/2] + arr[n\/\/2]) \/ 2.0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that returns the sequential median value from an array of integers.\n\n### Input:\narr = [1, 3, 5, 6, 9, 11]\n\n### Output:\ndef find_median(arr):\n    n = len(arr) \n    arr.sort() \n  \n    if n % 2 != 0: \n        return arr[n\/\/2] \n  \n    return (arr[(n-1)\/\/2] + arr[n\/\/2]) \/ 2.0"}
{"instruction":"Enhance the output of a Python program that prints the Fibonacci sequence in a reverse order. Only include numbers that are divisible by 3.","input":"Not applicable","output":"def Fibonacci(n): \n a = 0\n b = 1\n if n < 0: \n  print(\"Incorrect input\") \n elif n == 0: \n  return a \n elif n == 1: \n  return b \n else: \n  for i in range(2,n+1): \n   c = a + b \n   a = b \n   b = c \n return b \n\n# Driver Program \nnterms = 20\n\n# check if the number of terms is valid \nif nterms <= 0: \n print(\"Please enter a positive integer\") \nelse: \n print(\"Fibonacci sequence:\") \n for i in range(nterms, 0, -1):\n  if Fibonacci(i) % 3 == 0:\n   print(Fibonacci(i))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEnhance the output of a Python program that prints the Fibonacci sequence in a reverse order. Only include numbers that are divisible by 3.\n\n### Input:\nNot applicable\n\n### Output:\ndef Fibonacci(n): \n a = 0\n b = 1\n if n < 0: \n  print(\"Incorrect input\") \n elif n == 0: \n  return a \n elif n == 1: \n  return b \n else: \n  for i in range(2,n+1): \n   c = a + b \n   a = b \n   b = c \n return b \n\n# Driver Program \nnterms = 20\n\n# check if the number of terms is valid \nif nterms <= 0: \n print(\"Please enter a positive integer\") \nelse: \n print(\"Fibonacci sequence:\") \n for i in range(nterms, 0, -1):\n  if Fibonacci(i) % 3 == 0:\n   print(Fibonacci(i))"}
{"instruction":"Design a classification model in Python that can predict the probability of a customer churning.","input":"data = [[1, 20, 0], [1, 24, 0], [0, 30, 1], [1, 35, 0], [1, 32, 0]]","output":"import numpy as np\nfrom sklearn.linear_model import LogisticRegression \n\nX = np.array([[1, 20, 0], [1, 24, 0], [0, 30, 1], [1, 35, 0], [1, 32, 0]])\ny = np.array([0, 0, 1, 0, 0])\n\nmodel = LogisticRegression()\nmodel.fit(X, y)\n\nprediction = model.predict_proba([[1, 33, 0]])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a classification model in Python that can predict the probability of a customer churning.\n\n### Input:\ndata = [[1, 20, 0], [1, 24, 0], [0, 30, 1], [1, 35, 0], [1, 32, 0]]\n\n### Output:\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression \n\nX = np.array([[1, 20, 0], [1, 24, 0], [0, 30, 1], [1, 35, 0], [1, 32, 0]])\ny = np.array([0, 0, 1, 0, 0])\n\nmodel = LogisticRegression()\nmodel.fit(X, y)\n\nprediction = model.predict_proba([[1, 33, 0]])"}
{"instruction":"Using the input provided, make a program to sort a given array in ascending order in Python.","input":"arr = [9, 4, 7, 2, 3]","output":"def insertionSort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key \n\narr = [9, 4, 7, 2, 3]\ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the input provided, make a program to sort a given array in ascending order in Python.\n\n### Input:\narr = [9, 4, 7, 2, 3]\n\n### Output:\ndef insertionSort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key \n\narr = [9, 4, 7, 2, 3]\ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),"}
{"instruction":"Given a JSON object, write a Python program to list out all the keys present in the object","input":"json_object = {\"Stud1\": {\"Roll No\": 1, \"Class\": 10}, \"Stud2\": {\"Roll No\": 2, \"Class\": 11}}","output":"keys = [\"Stud1\", \"Roll No\", \"Class\", \"Stud2\"]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a JSON object, write a Python program to list out all the keys present in the object\n\n### Input:\njson_object = {\"Stud1\": {\"Roll No\": 1, \"Class\": 10}, \"Stud2\": {\"Roll No\": 2, \"Class\": 11}}\n\n### Output:\nkeys = [\"Stud1\", \"Roll No\", \"Class\", \"Stud2\"]"}
{"instruction":"Create a to-do list for programming tasks for the next week.","input":"","output":"1. Complete pending assignments. \n2. Review algorithms. \n3. Update the portfolio website. \n4. Attend a programming workshop. \n5. Start working on a Machine Learning project. \n6. Read some articles on JavaScript. \n7. Create a web application using Node.js. \n8. Practice solving programming puzzles. \n9. Write a program for sorting an array. \n10. Research on different AI technologies. \n11. Write a blog post on recent web development trends. \n12. Participate in hackathons. \n13. Build a basic chatbot using Python. \n14. Try to implement a Genetic Algorithm. \n15. Learn a new programming language. \n16. Make an interactive website using HTML, CSS and JavaScript. \n17. Update skills by working on an open source project. \n18. Create a machine learning model to classify images. \n19. Work on an Android application.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a to-do list for programming tasks for the next week.\n\n### Input:\n\n\n### Output:\n1. Complete pending assignments. \n2. Review algorithms. \n3. Update the portfolio website. \n4. Attend a programming workshop. \n5. Start working on a Machine Learning project. \n6. Read some articles on JavaScript. \n7. Create a web application using Node.js. \n8. Practice solving programming puzzles. \n9. Write a program for sorting an array. \n10. Research on different AI technologies. \n11. Write a blog post on recent web development trends. \n12. Participate in hackathons. \n13. Build a basic chatbot using Python. \n14. Try to implement a Genetic Algorithm. \n15. Learn a new programming language. \n16. Make an interactive website using HTML, CSS and JavaScript. \n17. Update skills by working on an open source project. \n18. Create a machine learning model to classify images. \n19. Work on an Android application."}
{"instruction":"Implement a Python program to calculate the average of every two numbers in a given array.","input":"[1, 3, 5, 7, 9]","output":"def average_every_two_numbers(arr):\n    result = []\n    for i in range(0, len(arr), 2):\n        if i+1 < len(arr):\n            result.append( (arr[i] + arr[i+1])\/2.0)\n        else:\n            result.append(arr[i])\n    return result\n\nprint(average_every_two_numbers([1, 3, 5, 7, 9]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python program to calculate the average of every two numbers in a given array.\n\n### Input:\n[1, 3, 5, 7, 9]\n\n### Output:\ndef average_every_two_numbers(arr):\n    result = []\n    for i in range(0, len(arr), 2):\n        if i+1 < len(arr):\n            result.append( (arr[i] + arr[i+1])\/2.0)\n        else:\n            result.append(arr[i])\n    return result\n\nprint(average_every_two_numbers([1, 3, 5, 7, 9]))"}
{"instruction":"Develop a functional web spider in Python that can crawl the web and collect articles from a given topic related to technology.","input":"Not applicable","output":"import requests\nfrom bs4 import BeautifulSoup\n\ndef web_spider(max_pages):\n page = 1\n while page <= max_pages:\n # Make request to target page\n source_code = requests.get('http:\/\/example.com\/tech\/page' + str(page))\n plain_text = source_code.text\n soup = BeautifulSoup(plain_text, 'html.parser')\n # Get data from html page\n for link in soup.find_all('a', {'class': 'articles-list-item__title'}):\n href = link.get('href')\n title = link.string\n # print the link, title, page number\n print(href)\n print(title)\n # increment the page number\n page += 1\n\n# Main function\nif __name__ == '__main__':\n web_spider(2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a functional web spider in Python that can crawl the web and collect articles from a given topic related to technology.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef web_spider(max_pages):\n page = 1\n while page <= max_pages:\n # Make request to target page\n source_code = requests.get('http:\/\/example.com\/tech\/page' + str(page))\n plain_text = source_code.text\n soup = BeautifulSoup(plain_text, 'html.parser')\n # Get data from html page\n for link in soup.find_all('a', {'class': 'articles-list-item__title'}):\n href = link.get('href')\n title = link.string\n # print the link, title, page number\n print(href)\n print(title)\n # increment the page number\n page += 1\n\n# Main function\nif __name__ == '__main__':\n web_spider(2)"}
{"instruction":"Identify any errors in the following Python code.","input":"numbers = [1, 2, 3, 4]\n\nfor num in numbers\n    print(num)","output":"The code is incorrect because it is missing the colon at the end of the loop statement. \nIt should be 'for num in numbers:' instead of 'for num in numbers'.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIdentify any errors in the following Python code.\n\n### Input:\nnumbers = [1, 2, 3, 4]\n\nfor num in numbers\n    print(num)\n\n### Output:\nThe code is incorrect because it is missing the colon at the end of the loop statement. \nIt should be 'for num in numbers:' instead of 'for num in numbers'."}
{"instruction":"Write a Python program to calculate the total number of days between two given dates.","input":"First date: 20 Dec 2020 \nSecond date: 10 Jan 2021","output":"from datetime import date \n\ndef daysDifference(date1, date2): \n    return (date2-date1).days \n\ndate1 = date(2020, 12, 20) \ndate2 = date(2021, 1, 10) \nprint(daysDifference(date1, date2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the total number of days between two given dates.\n\n### Input:\nFirst date: 20 Dec 2020 \nSecond date: 10 Jan 2021\n\n### Output:\nfrom datetime import date \n\ndef daysDifference(date1, date2): \n    return (date2-date1).days \n\ndate1 = date(2020, 12, 20) \ndate2 = date(2021, 1, 10) \nprint(daysDifference(date1, date2))"}
{"instruction":"Design an algorithm in Python to find the number of occurrences of a given string in another string.","input":"haystack = \"Hello World\"\nneedle = \"l\"","output":"def count_occurrences(haystack, needle):\n    count = 0\n    for char in haystack:\n        if char == needle:\n            count += 1\n    return count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to find the number of occurrences of a given string in another string.\n\n### Input:\nhaystack = \"Hello World\"\nneedle = \"l\"\n\n### Output:\ndef count_occurrences(haystack, needle):\n    count = 0\n    for char in haystack:\n        if char == needle:\n            count += 1\n    return count"}
{"instruction":"Develop a Python code to convert the given binary string to its corresponding integer value.","input":"'100100'","output":"def binary_to_int(binary):\n    result = 0\n    for i in range(len(binary)): \n        digit = binary[i] \n        if digit == '1':\n            result = result + pow(2, len(binary)-i-1)  \n    return result\n\nbinary_to_int('100100') # returns 36","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python code to convert the given binary string to its corresponding integer value.\n\n### Input:\n'100100'\n\n### Output:\ndef binary_to_int(binary):\n    result = 0\n    for i in range(len(binary)): \n        digit = binary[i] \n        if digit == '1':\n            result = result + pow(2, len(binary)-i-1)  \n    return result\n\nbinary_to_int('100100') # returns 36"}
{"instruction":"Write a Python program to remove all duplicates from a given list.","input":"[2, 3, 4, 5, 2, 3, 6]","output":"def remove_duplicates(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to remove all duplicates from a given list.\n\n### Input:\n[2, 3, 4, 5, 2, 3, 6]\n\n### Output:\ndef remove_duplicates(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result"}
{"instruction":"Write a Python program that takes in a string and returns the reverse of it.","input":"","output":"def reverse_string(string):\n    return string[::-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes in a string and returns the reverse of it.\n\n### Input:\n\n\n### Output:\ndef reverse_string(string):\n    return string[::-1]"}
{"instruction":"Develop a Python script to add a given list of numbers.","input":"[4, 8, 15, 20]","output":"def sum_list(list_of_nums):\n    total = 0\n    for number in list_of_nums:\n        total += number\n    return total\n\nresult = sum_list([4, 8, 15, 20])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to add a given list of numbers.\n\n### Input:\n[4, 8, 15, 20]\n\n### Output:\ndef sum_list(list_of_nums):\n    total = 0\n    for number in list_of_nums:\n        total += number\n    return total\n\nresult = sum_list([4, 8, 15, 20])\nprint(result)"}
{"instruction":"Generate a Python program that takes a number as input and prints the first n prime numbers.","input":"Not applicable","output":"def is_prime(num):\n    # Return True if given number is prime; false otherwise\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef generate_prime_numbers(n):\n    prime_list = []\n    number = 2\n\n    while len(prime_list) < n:\n        if is_prime(number):\n            prime_list.append(number)\n        number += 1\n    \n    return prime_list\n\nn = 8\nprint(generate_prime_numbers(n))\n\n# Output: [2, 3, 5, 7, 11, 13, 17, 19]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that takes a number as input and prints the first n prime numbers.\n\n### Input:\nNot applicable\n\n### Output:\ndef is_prime(num):\n    # Return True if given number is prime; false otherwise\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef generate_prime_numbers(n):\n    prime_list = []\n    number = 2\n\n    while len(prime_list) < n:\n        if is_prime(number):\n            prime_list.append(number)\n        number += 1\n    \n    return prime_list\n\nn = 8\nprint(generate_prime_numbers(n))\n\n# Output: [2, 3, 5, 7, 11, 13, 17, 19]"}
{"instruction":"Create a python program for creating a dictionaries of char count in a given string.","input":"string = \"Hello World\"","output":"def get_char_count(s):\n    \"\"\"\n    This function returns a dictionary of character count in a given string.\n    :param s: string\n    :return: dictionary\n    \"\"\"\n    char_count = dict()\n    for char in s:\n        if char not in char_count.keys():\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    return char_count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program for creating a dictionaries of char count in a given string.\n\n### Input:\nstring = \"Hello World\"\n\n### Output:\ndef get_char_count(s):\n    \"\"\"\n    This function returns a dictionary of character count in a given string.\n    :param s: string\n    :return: dictionary\n    \"\"\"\n    char_count = dict()\n    for char in s:\n        if char not in char_count.keys():\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    return char_count"}
{"instruction":"Create a script in any language that will accept two variables and will swap their values.","input":"","output":"# Python\ndef swap(a, b):\n    temp = a\n    a = b\n    b = temp\n    return (a, b)\n\n# JavaScript\nfunction swap(a, b) {\n    let temp = a;\n    a = b;\n    b = temp;\n    return [a, b];\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a script in any language that will accept two variables and will swap their values.\n\n### Input:\n\n\n### Output:\n# Python\ndef swap(a, b):\n    temp = a\n    a = b\n    b = temp\n    return (a, b)\n\n# JavaScript\nfunction swap(a, b) {\n    let temp = a;\n    a = b;\n    b = temp;\n    return [a, b];\n}"}
{"instruction":"Create a code in Python that determines the most common words in a given string?","input":"\"Hello world. This is a sentence.\"","output":"\"\"\"\nAlgorithm to determine the most common words in a given string\n\"\"\"\n\ndef most_common_words(string):\n    # split the string on whitespace\n    words = string.split()\n\n    # create a dictionary to store the count of each word \n    word_count = {}\n\n    # for each word, add it to the dictionary or increment the count \n    for word in words:\n        if word not in word_count:\n            word_count[word] = 1\n        else:\n            word_count[word] += 1\n\n    # convert the dictionary into a list of tuples (word, count)\n    count_list = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n\n    return count_list[0][0]\n\nif __name__ == '__main__':\n    string = 'Hello world. This is a sentence.'\n    print('The most common word is:', most_common_words(string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code in Python that determines the most common words in a given string?\n\n### Input:\n\"Hello world. This is a sentence.\"\n\n### Output:\n\"\"\"\nAlgorithm to determine the most common words in a given string\n\"\"\"\n\ndef most_common_words(string):\n    # split the string on whitespace\n    words = string.split()\n\n    # create a dictionary to store the count of each word \n    word_count = {}\n\n    # for each word, add it to the dictionary or increment the count \n    for word in words:\n        if word not in word_count:\n            word_count[word] = 1\n        else:\n            word_count[word] += 1\n\n    # convert the dictionary into a list of tuples (word, count)\n    count_list = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n\n    return count_list[0][0]\n\nif __name__ == '__main__':\n    string = 'Hello world. This is a sentence.'\n    print('The most common word is:', most_common_words(string))"}
{"instruction":"Create a Python function for predicting the label for a given set of features.","input":"[10, 20, 30]","output":"def predict_label(features):\n    # write your code here\n    label = None\n    \n    if features[0] > 10 and features[1] > 20:\n        label = \"A\"\n    elif features[0] > 10 and features[1] < 20:\n        label = \"B\"\n    else:\n        label = \"C\"\n        \n    return label\n\nfeatures = [10, 20, 30]\nlabel = predict_label(features)\nprint(label)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function for predicting the label for a given set of features.\n\n### Input:\n[10, 20, 30]\n\n### Output:\ndef predict_label(features):\n    # write your code here\n    label = None\n    \n    if features[0] > 10 and features[1] > 20:\n        label = \"A\"\n    elif features[0] > 10 and features[1] < 20:\n        label = \"B\"\n    else:\n        label = \"C\"\n        \n    return label\n\nfeatures = [10, 20, 30]\nlabel = predict_label(features)\nprint(label)"}
{"instruction":"Create a Python program to identify the type of triangles given three sides.","input":"","output":"def triangle_type(a, b, c):\n if a > 0 and b > 0 and c > 0:\n if a == b == c and a != 0:\n return 'Equilateral'\n \n if a == b or b == c or a == c and a != 0:\n return 'Isosceles'\n \n if a != b and b != c and a != c and a + b > c and b + c > a and a + c > b:\n return 'Scalene'\n else:\n return 'Invalid'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to identify the type of triangles given three sides.\n\n### Input:\n\n\n### Output:\ndef triangle_type(a, b, c):\n if a > 0 and b > 0 and c > 0:\n if a == b == c and a != 0:\n return 'Equilateral'\n \n if a == b or b == c or a == c and a != 0:\n return 'Isosceles'\n \n if a != b and b != c and a != c and a + b > c and b + c > a and a + c > b:\n return 'Scalene'\n else:\n return 'Invalid'"}
{"instruction":"Create a Python program to calculate the average of five numbers entered by a user.","input":"","output":"nums = []\nfor i in range(5):\n    nums.append(int(input(\"Please enter number: \")))\n\n#Calculate average\naverage = sum(nums) \/ len(nums)\n\n#Print average\nprint(\"The average is \", average)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the average of five numbers entered by a user.\n\n### Input:\n\n\n### Output:\nnums = []\nfor i in range(5):\n    nums.append(int(input(\"Please enter number: \")))\n\n#Calculate average\naverage = sum(nums) \/ len(nums)\n\n#Print average\nprint(\"The average is \", average)"}
{"instruction":"Using a while loop, create a Python program that prints the Fibonacci sequence from 0 to 100.","input":"","output":"a, b = 0, 1\nwhile b <= 100:\n    print(b)\n    a, b = b, a+b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing a while loop, create a Python program that prints the Fibonacci sequence from 0 to 100.\n\n### Input:\n\n\n### Output:\na, b = 0, 1\nwhile b <= 100:\n    print(b)\n    a, b = b, a+b"}
{"instruction":"Create a web scraper in Python for scraping articles from a specific website. The web scraper should save the extracted text, title, and date.","input":"Not applicable","output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/example.com\/articles.html'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# get the title\ntitle = soup.find(\"h1\", class_=\"article-title\")\ntitle_text = title.text.strip()\n\n# get the date\ndate = soup.find(\"div\", class_=\"article-date\")\ndate_text = date.text\n\n# get the article text\ntext = soup.find(\"div\", class_=\"article-text\")\ntext_text = text.text.strip()\n \n # save the information in the file\nwith open('article.txt', 'w') as file:\n file.write(title_text+'\\n')\n file.write(date_text+'\\n')\n file.write(text_text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python for scraping articles from a specific website. The web scraper should save the extracted text, title, and date.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/example.com\/articles.html'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# get the title\ntitle = soup.find(\"h1\", class_=\"article-title\")\ntitle_text = title.text.strip()\n\n# get the date\ndate = soup.find(\"div\", class_=\"article-date\")\ndate_text = date.text\n\n# get the article text\ntext = soup.find(\"div\", class_=\"article-text\")\ntext_text = text.text.strip()\n \n # save the information in the file\nwith open('article.txt', 'w') as file:\n file.write(title_text+'\\n')\n file.write(date_text+'\\n')\n file.write(text_text)"}
{"instruction":"Create a Python program to find all the common elements between two given lists in a single line of code.","input":"List1 = [1, 2, 3, 4, 5] \nList2 = [5, 6, 7, 8, 9]","output":"common_list = [element for element in List1 if element in List2]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find all the common elements between two given lists in a single line of code.\n\n### Input:\nList1 = [1, 2, 3, 4, 5] \nList2 = [5, 6, 7, 8, 9]\n\n### Output:\ncommon_list = [element for element in List1 if element in List2]"}
{"instruction":"What is a Python list?","input":"","output":"A Python list is an ordered collection of objects, stored in memory and indexed by number that can contain items of different types such as numbers, strings, and other lists.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat is a Python list?\n\n### Input:\n\n\n### Output:\nA Python list is an ordered collection of objects, stored in memory and indexed by number that can contain items of different types such as numbers, strings, and other lists."}
{"instruction":"Convert the JavaScript code snippet to Python.","input":"```\nfunction sum(a, b) {\n  return a + b;\n}\n```","output":"def sum(a, b):\n    return a + b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the JavaScript code snippet to Python.\n\n### Input:\n```\nfunction sum(a, b) {\n  return a + b;\n}\n```\n\n### Output:\ndef sum(a, b):\n    return a + b"}
{"instruction":"Come up with a Python object-oriented program to represent a circle.","input":"","output":"class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def get_area(self):\n        return 3.14 * self.radius * self.radius","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a Python object-oriented program to represent a circle.\n\n### Input:\n\n\n### Output:\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def get_area(self):\n        return 3.14 * self.radius * self.radius"}
{"instruction":"Create a function in Python to generate random passwords of length n.","input":"","output":"import string\nimport random\n\ndef generate_password(length):\n    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits\n    generated_password = ''.join(random.choice(chars) for i in range(length))\n\n    return generated_password","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to generate random passwords of length n.\n\n### Input:\n\n\n### Output:\nimport string\nimport random\n\ndef generate_password(length):\n    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits\n    generated_password = ''.join(random.choice(chars) for i in range(length))\n\n    return generated_password"}
{"instruction":"Suggest a python program that implements a stack data structure.","input":"","output":"class Stack(object):\n\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n    \n    def is_empty(self):\n        return len(self.items) == 0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a python program that implements a stack data structure.\n\n### Input:\n\n\n### Output:\nclass Stack(object):\n\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n    \n    def is_empty(self):\n        return len(self.items) == 0"}
{"instruction":"The given code is a Python script that defines a class called \"ManyJetsHiggsVarFiller\" which adds new variables to a ROOT tree. To use this class, you need to import it from the \"tree.gardening\" module and create an instance of it. Then, you can call the \"process\" method of the instance, passing the input and output ROOT files as arguments. The new variables that will be added to the output tree are: \"m4j\", \"m3j\", \"mW1jj\", \"mW2jj\", \"pt4j\", \"pt3j\", \"eta4j\", \"eta3j\", \"phi4j\", \"phi3j\", \"dphill4j\", \"dphill3j\", \"best1\", and \"best2\".","input":"","output":"from tree.gardening import TreeCloner\n\n\nimport optparse\nimport sys\nimport ROOT\nimport numpy\nimport re\nimport os.path\nimport math\nfrom math import *\nfrom array import array;\n\n\n#\n#\n#   \\  |                               |        |        |   | _)\n#  |\\\/ |   _` |  __ \\   |   |          |   _ \\  __|      |   |  |   _` |   _` |   __|\n#  |   |  (   |  |   |  |   |      \\   |   __\/  |        ___ |  |  (   |  (   | \\__ \\\n# _|  _| \\__,_| _|  _| \\__, |     \\___\/  \\___| \\__|     _|  _| _| \\__, | \\__, | ____\/\n#                      ____\/                                      |___\/  |___\/ \n#\n#\n\n\n\n#\n# Examples:\n#\n#  cd \/HWWAnalysis\/ShapeAnalysis\n# source test\/env.sh\n#\n# gardener.py  manyJetHiggsVar  \/data2\/amassiro\/VBF\/Data\/All21Aug2012_temp_1\/latino_2000_ggToH1000toWWTo2LAndTau2Nu.root    \/data2\/amassiro\/VBF\/Data\/All21Aug2012_temp_2\/latino_2000_ggToH1000toWWTo2LAndTau2Nu_TESTISITWORKING.root\n#\n#\n\n\nclass ManyJetsHiggsVarFiller(TreeCloner):\n\n    \n    def __init__(self):\n        pass\n\n    def help(self):\n        return '''Add new many jets system - Higgs variables'''\n\n\n    def addOptions(self,parser):\n        #description = self.help()\n        #group = optparse.OptionGroup(parser,self.label, description)\n        #group.add_option('-b', '--branch',   dest='branch', help='Name of something that is not used ... ', default='boh')\n        #parser.add_option_group(group)\n        #return group\n        pass\n\n\n    def checkOptions(self,opts):\n        pass\n\n    @staticmethod\n    def _deltamassw( jets ):\n        mW = 80.385\n        return math.fabs( mW - (jets[0] + jets[1]).M() )\n        \n\n    def process(self,**kwargs):\n        tree  = kwargs['tree']\n        input = kwargs['input']\n        output = kwargs['output']\n\n        self.connect(tree,input)\n        newbranches = ['m4j', 'm3j', 'mW1jj', 'mW2jj', 'pt4j', 'pt3j', 'eta4j', 'eta3j', 'phi4j', 'phi3j', 'dphill4j',  'dphill3j', 'best1', 'best2']\n        self.clone(output,newbranches)\n\n\n\n        m4j           = numpy.ones(1, dtype=numpy.float32)\n        m3j           = numpy.ones(1, dtype=numpy.float32)\n        mW1jj         = numpy.ones(1, dtype=numpy.float32)\n        mW2jj         = numpy.ones(1, dtype=numpy.float32)\n        pt4j          = numpy.ones(1, dtype=numpy.float32)\n        pt3j          = numpy.ones(1, dtype=numpy.float32)\n        eta4j         = numpy.ones(1, dtype=numpy.float32)\n        eta3j         = numpy.ones(1, dtype=numpy.float32)\n        phi4j         = numpy.ones(1, dtype=numpy.float32)\n        phi3j         = numpy.ones(1, dtype=numpy.float32)\n        dphill4j      = numpy.ones(1, dtype=numpy.float32)\n        dphill3j      = numpy.ones(1, dtype=numpy.float32)\n\n        best1         = numpy.ones(1, dtype=numpy.float32)\n        best2         = numpy.ones(1, dtype=numpy.float32)\n\n        self.otree.Branch('m4j'             ,  m4j           ,  'm4j\/F'        )\n        self.otree.Branch('m3j'             ,  m3j           ,  'm3j\/F'        )\n        self.otree.Branch('mW1jj'           ,  mW1jj         ,  'mW1jj\/F'      )\n        self.otree.Branch('mW2jj'           ,  mW2jj         ,  'mW2jj\/F'      )\n        self.otree.Branch('pt4j'            ,  pt4j          ,  'pt4j\/F'       )\n        self.otree.Branch('pt3j'            ,  pt3j          ,  'pt3j\/F'       )\n        self.otree.Branch('eta4j'           ,  eta4j         ,  'eta4j\/F'      )\n        self.otree.Branch('eta3j'           ,  eta3j         ,  'eta3j\/F'      )\n        self.otree.Branch('phi4j'           ,  phi4j         ,  'phi4j\/F'      )\n        self.otree.Branch('phi3j'           ,  phi3j         ,  'phi3j\/F'      )\n        self.otree.Branch('dphill4j'        ,  dphill4j      ,  'dphill4j\/F'   )\n        self.otree.Branch('dphill3j'        ,  dphill3j      ,  'dphill3j\/F'   )\n\n        self.otree.Branch('best1'           ,  best1         ,  'best1\/F'   )\n        self.otree.Branch('best2'           ,  best2         ,  'best2\/F'   )\n\n        nentries = self.itree.GetEntries()\n        print 'Total number of entries: ',nentries \n\n        # avoid dots to go faster\n        itree     = self.itree\n        otree     = self.otree\n\n        print '- Starting eventloop'\n        step = 5000\n        for i in xrange(nentries):\n            itree.GetEntry(i)\n\n            ## print event count\n            if i > 0 and i%step == 0.:\n                print i,'events processed.'\n\n            jetpt1 = itree.jetpt1\n            jetphi1 = itree.jetphi1\n            jeteta1 = itree.jeteta1\n\n            jetpt2 = itree.jetpt2\n            jetphi2 = itree.jetphi2\n            jeteta2 = itree.jeteta2\n\n            jetpt3 = itree.jetpt3\n            jetphi3 = itree.jetphi3\n            jeteta3 = itree.jeteta3\n\n            jetpt4 = itree.jetpt4\n            jetphi4 = itree.jetphi4\n            jeteta4 = itree.jeteta4\n\n            jet1 = ROOT.TLorentzVector()\n            jet1.SetPtEtaPhiM(itree.jetpt1, itree.jeteta1, itree.jetphi1, 0)\n            jet2 = ROOT.TLorentzVector()\n            jet2.SetPtEtaPhiM(itree.jetpt2, itree.jeteta2, itree.jetphi2, 0)\n            jet3 = ROOT.TLorentzVector()\n            jet3.SetPtEtaPhiM(itree.jetpt3, itree.jeteta3, itree.jetphi3, 0)\n            jet4 = ROOT.TLorentzVector()\n            jet4.SetPtEtaPhiM(itree.jetpt4, itree.jeteta4, itree.jetphi4, 0)\n\n            jets = [jet1,jet2,jet3,jet4]\n\n            jetSum4 = jet1 + jet2 + jet3 + jet4\n\n            jetSum3 = jet1 + jet2 + jet3\n\n            l1 = ROOT.TLorentzVector()\n            l1.SetPtEtaPhiE(itree.pt1, itree.eta1, itree.phi1, itree.pt1\/sin(2*atan(exp(-itree.eta1))))\n\n            l2 = ROOT.TLorentzVector()\n            l2.SetPtEtaPhiE(itree.pt2, itree.eta2, itree.phi2, itree.pt2\/sin(2*atan(exp(-itree.eta2))))\n\n            ll = ROOT.TLorentzVector()\n            ll = l1+l2;\n\n\n            mW1jj[0]    = -999\n            mW2jj[0]    = -999\n            m4j[0]      = -999\n            m3j[0]      = -999\n            pt4j[0]     = -999\n            pt3j[0]     = -999\n            eta4j[0]    = -999\n            eta3j[0]    = -999\n            phi4j[0]    = -999\n            phi3j[0]    = -999\n            dphill4j[0] = -999\n            dphill3j[0] = -999\n\n            best1[0]    = -999\n            best2[0]    = -999\n\n            if (jetpt4 > 0) :\n                m4j[0]      = jetSum4.M()\n                pt4j[0]     = jetSum4.Pt()\n                eta4j[0]    = jetSum4.Eta()\n                phi4j[0]    = jetSum4.Phi()\n                dphill4j[0] = jetSum4.DeltaPhi(ll)\n\n                # list of all possible couples\n                sjets = sorted([ (jets[i],jets[j]) for i in xrange(4) for j in xrange(4) if i<j], key=self._deltamassw)\n\n#                 for jA,jB in sjets:\n#                     print (jA+jB).M(),'->', self._deltamassw( (jA,jB) )\n\n                # choose best pair: the pair with one of the two W-candidates nearest to MW \n                best = sjets[0]\n                # the companion is made of the other 2 jets\n                other = tuple( [j for j in jets if j not in best] )\n\n                W1 = best[0] + best[1]\n                W2 = other[0]+other[1]\n\n                best1[0] = jets.index(best[0])\n                best2[0] = jets.index(best[1])\n\n                if W1.Pt() > W2.Pt() :\n                    mW1jj[0] = W1.M()\n                    mW2jj[0] = W2.M()\n                else :\n                    mW1jj[0] = W2.M()\n                    mW2jj[0] = W1.M()\n\n\n            if (jetpt3 > 0) :\n                m3j[0]      = jetSum3.M()\n                pt3j[0]     = jetSum3.Pt()\n                eta3j[0]    = jetSum3.Eta()\n                phi3j[0]    = jetSum3.Phi()\n                dphill3j[0] = jetSum3.DeltaPhi(ll)\n\n\n            otree.Fill()\n\n        self.disconnect()\n        print '- Eventloop completed'\n\n\n\n\n\n\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python script that defines a class called \"ManyJetsHiggsVarFiller\" which adds new variables to a ROOT tree. To use this class, you need to import it from the \"tree.gardening\" module and create an instance of it. Then, you can call the \"process\" method of the instance, passing the input and output ROOT files as arguments. The new variables that will be added to the output tree are: \"m4j\", \"m3j\", \"mW1jj\", \"mW2jj\", \"pt4j\", \"pt3j\", \"eta4j\", \"eta3j\", \"phi4j\", \"phi3j\", \"dphill4j\", \"dphill3j\", \"best1\", and \"best2\".\n\n### Input:\n\n\n### Output:\nfrom tree.gardening import TreeCloner\n\n\nimport optparse\nimport sys\nimport ROOT\nimport numpy\nimport re\nimport os.path\nimport math\nfrom math import *\nfrom array import array;\n\n\n#\n#\n#   \\  |                               |        |        |   | _)\n#  |\\\/ |   _` |  __ \\   |   |          |   _ \\  __|      |   |  |   _` |   _` |   __|\n#  |   |  (   |  |   |  |   |      \\   |   __\/  |        ___ |  |  (   |  (   | \\__ \\\n# _|  _| \\__,_| _|  _| \\__, |     \\___\/  \\___| \\__|     _|  _| _| \\__, | \\__, | ____\/\n#                      ____\/                                      |___\/  |___\/ \n#\n#\n\n\n\n#\n# Examples:\n#\n#  cd \/HWWAnalysis\/ShapeAnalysis\n# source test\/env.sh\n#\n# gardener.py  manyJetHiggsVar  \/data2\/amassiro\/VBF\/Data\/All21Aug2012_temp_1\/latino_2000_ggToH1000toWWTo2LAndTau2Nu.root    \/data2\/amassiro\/VBF\/Data\/All21Aug2012_temp_2\/latino_2000_ggToH1000toWWTo2LAndTau2Nu_TESTISITWORKING.root\n#\n#\n\n\nclass ManyJetsHiggsVarFiller(TreeCloner):\n\n    \n    def __init__(self):\n        pass\n\n    def help(self):\n        return '''Add new many jets system - Higgs variables'''\n\n\n    def addOptions(self,parser):\n        #description = self.help()\n        #group = optparse.OptionGroup(parser,self.label, description)\n        #group.add_option('-b', '--branch',   dest='branch', help='Name of something that is not used ... ', default='boh')\n        #parser.add_option_group(group)\n        #return group\n        pass\n\n\n    def checkOptions(self,opts):\n        pass\n\n    @staticmethod\n    def _deltamassw( jets ):\n        mW = 80.385\n        return math.fabs( mW - (jets[0] + jets[1]).M() )\n        \n\n    def process(self,**kwargs):\n        tree  = kwargs['tree']\n        input = kwargs['input']\n        output = kwargs['output']\n\n        self.connect(tree,input)\n        newbranches = ['m4j', 'm3j', 'mW1jj', 'mW2jj', 'pt4j', 'pt3j', 'eta4j', 'eta3j', 'phi4j', 'phi3j', 'dphill4j',  'dphill3j', 'best1', 'best2']\n        self.clone(output,newbranches)\n\n\n\n        m4j           = numpy.ones(1, dtype=numpy.float32)\n        m3j           = numpy.ones(1, dtype=numpy.float32)\n        mW1jj         = numpy.ones(1, dtype=numpy.float32)\n        mW2jj         = numpy.ones(1, dtype=numpy.float32)\n        pt4j          = numpy.ones(1, dtype=numpy.float32)\n        pt3j          = numpy.ones(1, dtype=numpy.float32)\n        eta4j         = numpy.ones(1, dtype=numpy.float32)\n        eta3j         = numpy.ones(1, dtype=numpy.float32)\n        phi4j         = numpy.ones(1, dtype=numpy.float32)\n        phi3j         = numpy.ones(1, dtype=numpy.float32)\n        dphill4j      = numpy.ones(1, dtype=numpy.float32)\n        dphill3j      = numpy.ones(1, dtype=numpy.float32)\n\n        best1         = numpy.ones(1, dtype=numpy.float32)\n        best2         = numpy.ones(1, dtype=numpy.float32)\n\n        self.otree.Branch('m4j'             ,  m4j           ,  'm4j\/F'        )\n        self.otree.Branch('m3j'             ,  m3j           ,  'm3j\/F'        )\n        self.otree.Branch('mW1jj'           ,  mW1jj         ,  'mW1jj\/F'      )\n        self.otree.Branch('mW2jj'           ,  mW2jj         ,  'mW2jj\/F'      )\n        self.otree.Branch('pt4j'            ,  pt4j          ,  'pt4j\/F'       )\n        self.otree.Branch('pt3j'            ,  pt3j          ,  'pt3j\/F'       )\n        self.otree.Branch('eta4j'           ,  eta4j         ,  'eta4j\/F'      )\n        self.otree.Branch('eta3j'           ,  eta3j         ,  'eta3j\/F'      )\n        self.otree.Branch('phi4j'           ,  phi4j         ,  'phi4j\/F'      )\n        self.otree.Branch('phi3j'           ,  phi3j         ,  'phi3j\/F'      )\n        self.otree.Branch('dphill4j'        ,  dphill4j      ,  'dphill4j\/F'   )\n        self.otree.Branch('dphill3j'        ,  dphill3j      ,  'dphill3j\/F'   )\n\n        self.otree.Branch('best1'           ,  best1         ,  'best1\/F'   )\n        self.otree.Branch('best2'           ,  best2         ,  'best2\/F'   )\n\n        nentries = self.itree.GetEntries()\n        print 'Total number of entries: ',nentries \n\n        # avoid dots to go faster\n        itree     = self.itree\n        otree     = self.otree\n\n        print '- Starting eventloop'\n        step = 5000\n        for i in xrange(nentries):\n            itree.GetEntry(i)\n\n            ## print event count\n            if i > 0 and i%step == 0.:\n                print i,'events processed.'\n\n            jetpt1 = itree.jetpt1\n            jetphi1 = itree.jetphi1\n            jeteta1 = itree.jeteta1\n\n            jetpt2 = itree.jetpt2\n            jetphi2 = itree.jetphi2\n            jeteta2 = itree.jeteta2\n\n            jetpt3 = itree.jetpt3\n            jetphi3 = itree.jetphi3\n            jeteta3 = itree.jeteta3\n\n            jetpt4 = itree.jetpt4\n            jetphi4 = itree.jetphi4\n            jeteta4 = itree.jeteta4\n\n            jet1 = ROOT.TLorentzVector()\n            jet1.SetPtEtaPhiM(itree.jetpt1, itree.jeteta1, itree.jetphi1, 0)\n            jet2 = ROOT.TLorentzVector()\n            jet2.SetPtEtaPhiM(itree.jetpt2, itree.jeteta2, itree.jetphi2, 0)\n            jet3 = ROOT.TLorentzVector()\n            jet3.SetPtEtaPhiM(itree.jetpt3, itree.jeteta3, itree.jetphi3, 0)\n            jet4 = ROOT.TLorentzVector()\n            jet4.SetPtEtaPhiM(itree.jetpt4, itree.jeteta4, itree.jetphi4, 0)\n\n            jets = [jet1,jet2,jet3,jet4]\n\n            jetSum4 = jet1 + jet2 + jet3 + jet4\n\n            jetSum3 = jet1 + jet2 + jet3\n\n            l1 = ROOT.TLorentzVector()\n            l1.SetPtEtaPhiE(itree.pt1, itree.eta1, itree.phi1, itree.pt1\/sin(2*atan(exp(-itree.eta1))))\n\n            l2 = ROOT.TLorentzVector()\n            l2.SetPtEtaPhiE(itree.pt2, itree.eta2, itree.phi2, itree.pt2\/sin(2*atan(exp(-itree.eta2))))\n\n            ll = ROOT.TLorentzVector()\n            ll = l1+l2;\n\n\n            mW1jj[0]    = -999\n            mW2jj[0]    = -999\n            m4j[0]      = -999\n            m3j[0]      = -999\n            pt4j[0]     = -999\n            pt3j[0]     = -999\n            eta4j[0]    = -999\n            eta3j[0]    = -999\n            phi4j[0]    = -999\n            phi3j[0]    = -999\n            dphill4j[0] = -999\n            dphill3j[0] = -999\n\n            best1[0]    = -999\n            best2[0]    = -999\n\n            if (jetpt4 > 0) :\n                m4j[0]      = jetSum4.M()\n                pt4j[0]     = jetSum4.Pt()\n                eta4j[0]    = jetSum4.Eta()\n                phi4j[0]    = jetSum4.Phi()\n                dphill4j[0] = jetSum4.DeltaPhi(ll)\n\n                # list of all possible couples\n                sjets = sorted([ (jets[i],jets[j]) for i in xrange(4) for j in xrange(4) if i<j], key=self._deltamassw)\n\n#                 for jA,jB in sjets:\n#                     print (jA+jB).M(),'->', self._deltamassw( (jA,jB) )\n\n                # choose best pair: the pair with one of the two W-candidates nearest to MW \n                best = sjets[0]\n                # the companion is made of the other 2 jets\n                other = tuple( [j for j in jets if j not in best] )\n\n                W1 = best[0] + best[1]\n                W2 = other[0]+other[1]\n\n                best1[0] = jets.index(best[0])\n                best2[0] = jets.index(best[1])\n\n                if W1.Pt() > W2.Pt() :\n                    mW1jj[0] = W1.M()\n                    mW2jj[0] = W2.M()\n                else :\n                    mW1jj[0] = W2.M()\n                    mW2jj[0] = W1.M()\n\n\n            if (jetpt3 > 0) :\n                m3j[0]      = jetSum3.M()\n                pt3j[0]     = jetSum3.Pt()\n                eta3j[0]    = jetSum3.Eta()\n                phi3j[0]    = jetSum3.Phi()\n                dphill3j[0] = jetSum3.DeltaPhi(ll)\n\n\n            otree.Fill()\n\n        self.disconnect()\n        print '- Eventloop completed'\n\n\n\n\n\n\n"}
{"instruction":"Create a headless Chrome program in Python that fetches a website and returns the HTML code.","input":"","output":"from selenium import webdriver\n\nurl = \"https:\/\/www.example.com\"\n\nchrome_options = webdriver.ChromeOptions()\nchrome_options.add_argument('--headless')\n\ndriver = webdriver.Chrome(options=chrome_options)\ndriver.get(url)\nhtmlCode = driver.page_source\nprint(htmlCode)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a headless Chrome program in Python that fetches a website and returns the HTML code.\n\n### Input:\n\n\n### Output:\nfrom selenium import webdriver\n\nurl = \"https:\/\/www.example.com\"\n\nchrome_options = webdriver.ChromeOptions()\nchrome_options.add_argument('--headless')\n\ndriver = webdriver.Chrome(options=chrome_options)\ndriver.get(url)\nhtmlCode = driver.page_source\nprint(htmlCode)"}
{"instruction":"Write a Python program to join two given lists with a specific separator.","input":"list_1 = [\"Hello\", \"World\"]\nlist_2 = [\"Python\", \"Programming\"]\nseparator = \",\"","output":"list_1 = [\"Hello\", \"World\"]\nlist_2 = [\"Python\", \"Programming\"]\nseparator = \",\"\n\nresult = separator.join(list_1 + list_2)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to join two given lists with a specific separator.\n\n### Input:\nlist_1 = [\"Hello\", \"World\"]\nlist_2 = [\"Python\", \"Programming\"]\nseparator = \",\"\n\n### Output:\nlist_1 = [\"Hello\", \"World\"]\nlist_2 = [\"Python\", \"Programming\"]\nseparator = \",\"\n\nresult = separator.join(list_1 + list_2)\nprint(result)"}
{"instruction":"Output the sum of numbers in a list in Python.","input":"[1, 2, 3, 4, 5]","output":"def list_sum(inpList):\n    sum = 0\n    for num in inpList:\n        sum += num\n    return sum\n\nprint(list_sum([1, 2, 3, 4, 5]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOutput the sum of numbers in a list in Python.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef list_sum(inpList):\n    sum = 0\n    for num in inpList:\n        sum += num\n    return sum\n\nprint(list_sum([1, 2, 3, 4, 5]))"}
{"instruction":"Write a Python program to implement K-Means clustering. The program should take two mandatory arguments, k and data, where k is the number of clusters and data is a 2D array containing the data points.","input":"k = 3\ndata = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]","output":"import numpy as np\nfrom sklearn.cluster import KMeans\n\ndef kmeans(k, data):\n    kmeans = KMeans(k)\n    kmeans.fit(data)\n    return kmeans.labels_\n\nk = 3\ndata = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\ncluster_labels = kmeans(k, data)\nprint(cluster_labels)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to implement K-Means clustering. The program should take two mandatory arguments, k and data, where k is the number of clusters and data is a 2D array containing the data points.\n\n### Input:\nk = 3\ndata = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n\n### Output:\nimport numpy as np\nfrom sklearn.cluster import KMeans\n\ndef kmeans(k, data):\n    kmeans = KMeans(k)\n    kmeans.fit(data)\n    return kmeans.labels_\n\nk = 3\ndata = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\ncluster_labels = kmeans(k, data)\nprint(cluster_labels)"}
{"instruction":"Rewrite a Python code snippet to take advantage of vectorization.","input":"# Compute list of squared values\nmy_list = [1,2,3,4,5]\nout_list = []\n\nfor element in my_list:\n    out_list.append(pow(element,2))","output":"# Compute list of squared values using vectorization\nmy_list = [1,2,3,4,5]\n\nout_list = [pow(element,2) for element in my_list]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite a Python code snippet to take advantage of vectorization.\n\n### Input:\n# Compute list of squared values\nmy_list = [1,2,3,4,5]\nout_list = []\n\nfor element in my_list:\n    out_list.append(pow(element,2))\n\n### Output:\n# Compute list of squared values using vectorization\nmy_list = [1,2,3,4,5]\n\nout_list = [pow(element,2) for element in my_list]"}
{"instruction":"Compare two arrays of Python objects and return True if all objects in arrayA are also in arrayB.","input":"arrayA = ['a', 'b', 'c', 'd']\narrayB = ['c', 'b', 'a', 'd', 'e']","output":"def compare_arrays(arrA, arrB):\n    for i in arrA:\n        if i not in arrB:\n            return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompare two arrays of Python objects and return True if all objects in arrayA are also in arrayB.\n\n### Input:\narrayA = ['a', 'b', 'c', 'd']\narrayB = ['c', 'b', 'a', 'd', 'e']\n\n### Output:\ndef compare_arrays(arrA, arrB):\n    for i in arrA:\n        if i not in arrB:\n            return False\n    return True"}
{"instruction":"Generate code for a simple calculator app in Python.","input":"","output":"import sys\n \n# Simple python calculator\n \n# Function to add two numbers\ndef add(num1, num2):\n    return num1 + num2\n \n# Function to subtract two numbers\ndef subtract(num1, num2):\n    return num1 - num2\n \n# Function to multiply two numbers\ndef multiply(num1, num2):\n    return num1 * num2\n\n# Function to divide two numbers\ndef divide(num1, num2):\n    return num1 \/ num2\n\n# Get user input\nwhile True:\n    num1 = float(input(\"Enter first number: \"))\n    num2 = float(input(\"Enter second number: \"))\n    task = input(\"What do you want to do (add\/subtract\/multiply\/divide): \")\n \n# Perform task\n    if task == \"add\":\n        output = add(num1, num2)\n    elif task == \"subtract\":\n        output = subtract(num1, num2)\n    elif task == \"multiply\":\n        output = multiply(num1, num2)\n    elif task == \"divide\":\n        output = divide(num1, num2)\n    else:\n        output = \"Invalid input\"\n \n# Print output\n    print(f\"Result: {output}\")\n    command = input(\"Do you wish to continue? (y\/n): \")\n    if command == \"y\":\n        continue\n    else:\n        sys.exit()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code for a simple calculator app in Python.\n\n### Input:\n\n\n### Output:\nimport sys\n \n# Simple python calculator\n \n# Function to add two numbers\ndef add(num1, num2):\n    return num1 + num2\n \n# Function to subtract two numbers\ndef subtract(num1, num2):\n    return num1 - num2\n \n# Function to multiply two numbers\ndef multiply(num1, num2):\n    return num1 * num2\n\n# Function to divide two numbers\ndef divide(num1, num2):\n    return num1 \/ num2\n\n# Get user input\nwhile True:\n    num1 = float(input(\"Enter first number: \"))\n    num2 = float(input(\"Enter second number: \"))\n    task = input(\"What do you want to do (add\/subtract\/multiply\/divide): \")\n \n# Perform task\n    if task == \"add\":\n        output = add(num1, num2)\n    elif task == \"subtract\":\n        output = subtract(num1, num2)\n    elif task == \"multiply\":\n        output = multiply(num1, num2)\n    elif task == \"divide\":\n        output = divide(num1, num2)\n    else:\n        output = \"Invalid input\"\n \n# Print output\n    print(f\"Result: {output}\")\n    command = input(\"Do you wish to continue? (y\/n): \")\n    if command == \"y\":\n        continue\n    else:\n        sys.exit()"}
{"instruction":"Create a web API in Python Flask that returns the factorial of the provided number.","input":"5","output":"from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('\/factorial', methods=['POST'])\ndef factorial():\n num = request.json['num']\n result = 1\n for i in range(2, num + 1):\n  result *= i\n return { 'factorial': result }\n\nif __name__ == '__main__':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web API in Python Flask that returns the factorial of the provided number.\n\n### Input:\n5\n\n### Output:\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('\/factorial', methods=['POST'])\ndef factorial():\n num = request.json['num']\n result = 1\n for i in range(2, num + 1):\n  result *= i\n return { 'factorial': result }\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"instruction":"Optimize the following Python code for adding two numbers","input":"a = 3\nb = 4\nc = a + b","output":"def addTwoNum(a, b):\n return a + b\n\nc = addTwoNum(3, 4)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python code for adding two numbers\n\n### Input:\na = 3\nb = 4\nc = a + b\n\n### Output:\ndef addTwoNum(a, b):\n return a + b\n\nc = addTwoNum(3, 4)"}
{"instruction":"Create a function in Python to remove all the occurences of a given letter in a string.","input":"letter = 'a', \nstring = 'Abra Cadabra'","output":"def remove_occurences(letter, string):\n\treturn string.replace(letter, '')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to remove all the occurences of a given letter in a string.\n\n### Input:\nletter = 'a', \nstring = 'Abra Cadabra'\n\n### Output:\ndef remove_occurences(letter, string):\n\treturn string.replace(letter, '')"}
{"instruction":"Implement a program in Python to separate odd and even numbers in separate arrays.","input":"","output":"def separate_odd_even(arr):\n    odd = []\n    even = []\n    for num in arr:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return odd, even","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a program in Python to separate odd and even numbers in separate arrays.\n\n### Input:\n\n\n### Output:\ndef separate_odd_even(arr):\n    odd = []\n    even = []\n    for num in arr:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return odd, even"}
{"instruction":"This code builds VoltDB kits for Linux and Mac OSX. To build the kits, run the script with the following arguments: the commit, tag, or branch for the VoltDB repository, the commit, tag, or branch for the Pro repository, and the commit, tag, or branch for the RabbitMQ repository. Optionally, use the `--nomac` flag to skip building the Mac OSX kit and the `--nocommunity` flag to skip building the community kit. The script will create a release directory and copy the necessary files to it, including the trial license, SHA256 checksum, and Maven jars. Finally, the script will create a candidate symlink and backup the release directory.","input":"","output":"#!\/usr\/bin\/env python\n\nimport argparse, datetime, getpass, os, sys, shutil, traceback\nfrom fabric.api import run, cd, local, get, settings, lcd, put\nfrom fabric_ssh_config import getSSHInfoForHost\nfrom fabric.context_managers import shell_env\nfrom fabric.utils import abort\n\n#Login as user test, but build in a directory by real username\nusername = 'test'\nbuilddir = \"\/tmp\/\" + getpass.getuser() + \"Kits\/buildtemp\"\nversion = \"UNKNOWN\"\nnativelibdir = \"\/nativelibs\/obj\"  #  ~test\/libs\/... usually\ndefaultlicensedays = 70 #default trial license length\n\n\n################################################\n# CHECKOUT CODE INTO A TEMP DIR\n################################################\n\ndef checkoutCode(voltdbGit, proGit, rbmqExportGit, gitloc):\n    global buildir\n    # clean out the existing dir\n    run(\"rm -rf \" + builddir)\n    # make the build dir again\n    run(\"mkdir -p \" + builddir)\n    # change to it\n    with cd(builddir):\n        # do the checkouts, collect checkout errors on both community &\n        # pro repos so user gets status on both checkouts\n        message = \"\"\n        run(\"git clone -q %s\/voltdb.git\" % gitloc)\n        result = run(\"cd voltdb; git checkout %s\" % voltdbGit, warn_only=True)\n        if result.failed:\n            message = \"VoltDB checkout failed. Missing branch %s.\" % rbmqExportGit\n\n        run(\"git clone -q %s\/pro.git\" % gitloc)\n        result = run(\"cd pro; git checkout %s\" % proGit, warn_only=True)\n        if result.failed:\n            message += \"\\nPro checkout failed. Missing branch %s.\" % rbmqExportGit\n\n        #rabbitmq isn't mirrored internally, so don't use gitloc\n        run(\"git clone -q git@github.com:VoltDB\/export-rabbitmq.git\")\n        result = run(\"cd export-rabbitmq; git checkout %s\" % rbmqExportGit, warn_only=True)\n        # Probably ok to use master for export-rabbitmq.\n        if result.failed:\n            print \"\\nExport-rabbitmg branch %s checkout failed. Defaulting to master.\" % rbmqExportGit\n\n        if len(message) > 0:\n            abort(message)\n\n        return run(\"cat voltdb\/version.txt\").strip()\n\n################################################\n# MAKE A RELEASE DIR\n################################################\n\ndef makeReleaseDir(releaseDir):\n    # handle the case where a release dir exists for this version\n    if os.path.exists(releaseDir):\n        shutil.rmtree(releaseDir)\n    # create a release dir\n    os.makedirs(releaseDir)\n    print \"Created dir: \" + releaseDir\n\n\n################################################\n# BUILD THE COMMUNITY VERSION\n################################################\n\ndef buildCommunity():\n    if build_mac:\n        packageMacLib=\"true\"\n    else:\n        packageMacLib=\"false\"\n    with cd(builddir + \"\/voltdb\"):\n        run(\"pwd\")\n        run(\"git status\")\n        run(\"git describe --dirty\")\n        run(\"ant -Djmemcheck=NO_MEMCHECK -Dkitbuild=%s %s clean default dist\" % (packageMacLib,  build_args))\n\n################################################\n# BUILD THE ENTERPRISE VERSION\n################################################\n\ndef buildEnterprise():\n    if build_mac:\n        packageMacLib=\"true\"\n    else:\n        packageMacLib=\"false\"\n    with cd(builddir + \"\/pro\"):\n        run(\"pwd\")\n        run(\"git status\")\n        run(\"git describe --dirty\")\n        run(\"VOLTCORE=..\/voltdb ant -f mmt.xml -Djmemcheck=NO_MEMCHECK -Dallowreplication=true -DallowDrActiveActive=true -Dlicensedays=%d -Dkitbuild=%s %s clean dist.pro\" % (defaultlicensedays, packageMacLib, build_args))\n\n################################################\n# BUILD THE PRO VERSION\n################################################\n\n#\ndef packagePro(version):\n    print \"Making license\"\n    makeTrialLicense(days=defaultlicensedays, dr_and_xdcr=False, nodes=3)\n    print \"Repacking pro kit\"\n    with cd(builddir + \"\/pro\/obj\/pro\"):\n        run(\"mkdir pro_kit_staging\")\n    with cd(builddir + \"\/pro\/obj\/pro\/pro_kit_staging\"):\n        run(\"tar xf ..\/voltdb-ent-%s.tar.gz\" % version)\n        run(\"mv voltdb-ent-%s voltdb-pro-%s\" % (version, version))\n        run(\"cp %s\/pro\/trial_*.xml voltdb-pro-%s\/voltdb\/license.xml\" % (builddir, version))\n        run(\"tar cvfz ..\/voltdb-pro-%s.tar.gz voltdb-pro-%s\" % (version, version))\n\n################################################\n# BUILD THE RABBITMQ EXPORT CONNECTOR\n################################################\n#Build rabbit MQ Exporter\ndef buildRabbitMQExport(version, dist_type):\n    # Paths to the final kit for unpacking\/repacking with rmq export\n    paths = {\n        'community': builddir + \"\/voltdb\/obj\/release\",\n        'ent' : builddir + \"\/pro\/obj\/pro\/\"\n        }\n    # Untar\n    with cd(paths[dist_type]):\n        run (\"pwd\")\n        run (\"mkdir -p restage\")\n        run (\"tar xf voltdb-%s-%s.tar.gz -C restage\" % (dist_type, version))\n        run (\"rm -f voltdb-%s-%s.tar.gz\" % (dist_type, version))\n\n    # Build RabbitMQ export jar and put it into the untarred kit\n    with cd(builddir + \"\/export-rabbitmq\"):\n        run(\"pwd\")\n        run(\"git status\")\n        run(\"git describe --dirty\", warn_only=True)\n        run(\"VOLTDIST=%s\/restage\/voltdb-%s-%s ant\" % (paths[dist_type], dist_type, version))\n\n    # Retar\n    with cd(paths[dist_type]):\n        run(\"pwd\")\n        run(\"tar -C restage -czf voltdb-%s-%s.tar.gz voltdb-%s-%s\" % (dist_type, version, dist_type, version))\n        run (\"rm -Rf restage\")\n\n################################################\n# MAKE AN ENTERPRISE TRIAL LICENSE\n################################################\n\n# Must be called after buildEnterprise has been done\ndef makeTrialLicense(days=30, dr_and_xdcr=\"true\", nodes=12):\n    with cd(builddir + \"\/pro\/tools\"):\n        run(\".\/make_trial_licenses.pl -t %d -H %d -W %s\" % (days, nodes, dr_and_xdcr ))\n\n################################################\n# MAKE A SHA256 checksum\n################################################\n\ndef makeSHA256SUM(version, type):\n    with cd(builddir + \"\/pro\/obj\/pro\"):\n        kitname=\"voltdb-\" +  type + \"-\" + version\n        run(\"sha256sum -b %s.tar.gz > %s.SHA256SUM\" % (kitname, kitname))\n\n################################################\n# MAKE AN JAR FILES NEEDED TO PUSH TO MAVEN\n################################################\n\ndef makeMavenJars():\n    with cd(builddir + \"\/voltdb\"):\n        run(\"VOLTCORE=..\/voltdb ant -f build-client.xml maven-jars\")\n\n################################################\n# COPY FILES\n################################################\n\ndef copyFilesToReleaseDir(releaseDir, version, type=None):\n    print \"Copying files to releaseDir\"\n    if type:\n        typeString=\"-\" + type\n    else:\n        typeString=\"\"\n    get(\"%s\/pro\/obj\/pro\/voltdb%s-%s.tar.gz\" % (builddir, typeString, version),\n        \"%s\/voltdb%s-%s.tar.gz\" % (releaseDir, typeString, version))\n    get(\"%s\/pro\/obj\/pro\/voltdb%s-%s.SHA256SUM\" % (builddir, typeString, version),\n        \"%s\/voltdb%s-%s.SHA256SUM\" % (releaseDir, typeString, version))\n\ndef copyCommunityFilesToReleaseDir(releaseDir, version, operatingsys):\n    get(\"%s\/voltdb\/obj\/release\/voltdb-community-%s.tar.gz\" % (builddir, version),\n        \"%s\/voltdb-community-%s.tar.gz\" % (releaseDir, version))\n\n    # add stripped symbols\n    if operatingsys == \"LINUX\":\n        os.makedirs(releaseDir + \"\/other\")\n        get(\"%s\/voltdb\/obj\/release\/voltdb-%s.sym\" % (builddir, version),\n            \"%s\/other\/%s-voltdb-voltkv-%s.sym\" % (releaseDir, operatingsys, version))\n\ndef copyTrialLicenseToReleaseDir(releaseDir):\n    get(\"%s\/pro\/trial_*.xml\" % (builddir),\n        \"%s\/license.xml\" % (releaseDir))\n\ndef copyMavenJarsToReleaseDir(releaseDir, version):\n    #The .jars and upload file must be in a directory called voltdb - it is the projectname\n    mavenProjectDir = releaseDir + \"\/mavenjars\/voltdb\"\n    if not os.path.exists(mavenProjectDir):\n        os.makedirs(mavenProjectDir)\n\n    #Get the voltdbclient-n.n.jar from the recently built community build\n    get(\"%s\/voltdb\/obj\/release\/dist-client-java\/voltdb\/voltdbclient-%s.jar\" % (builddir, version),\n        \"%s\/voltdbclient-%s.jar\" % (mavenProjectDir, version))\n    #Get the upload.gradle file\n    get(\"%s\/voltdb\/tools\/kit_tools\/upload.gradle\" % (builddir),\n        \"%s\/upload.gradle\" % (mavenProjectDir))\n    #Get the src and javadoc .jar files\n    get(\"%s\/voltdb\/obj\/release\/voltdbclient-%s-javadoc.jar\" % (builddir, version),\n        \"%s\/voltdbclient-%s-javadoc.jar\" % (mavenProjectDir, version))\n    get(\"%s\/voltdb\/obj\/release\/voltdbclient-%s-sources.jar\" % (builddir, version),\n        \"%s\/voltdbclient-%s-sources.jar\" % (mavenProjectDir, version))\n\n################################################\n# CREATE CANDIDATE SYMLINKS\n################################################\n\ndef createCandidateSysmlink(releaseDir):\n    candidateDir =  os.getenv('HOME') + \"\/releases\/candidate\";\n    local(\"rm -rf \" + candidateDir)\n    local(\"ln -s %s %s\" % (releaseDir, candidateDir))\n\n################################################\n# BACKUP RELEASE DIR\n################################################\n\ndef backupReleaseDir(releaseDir,archiveDir,version):\n    if not os.path.exists(archiveDir):\n        os.makedirs(archiveDir)\n    # make a backup with the timstamp of the  build\n    timestamp = datetime.datetime.now().strftime(\"%y%m%d-%H%M%S\")\n    local(\"tar -czf %s\/%s-%s.tgz %s\" \\\n          % (archiveDir, version, timestamp, releaseDir))\n\n################################################\n# REMOVE NATIVE LIBS FROM SHARED DIRECTORY\n################################################\n\ndef rmNativeLibs():\n    # local(\"ls -l ~\" + username + nativelibdir)\n    local(\"rm -rf ~\" + username + nativelibdir)\n\n\n\n################################################\n# GET THE GIT TAGS OR SHAS TO BUILD FROM\n################################################\n\nparser = argparse.ArgumentParser(description = \"Create a full kit. With no args, will do build of master\")\nparser.add_argument('voltdb_sha', nargs=\"?\", default=\"master\", help=\"voltdb repository commit, tag or branch\" )\nparser.add_argument('pro_sha', nargs=\"?\", default=\"master\", help=\"pro repository commit, tag or branch\" )\nparser.add_argument('rabbitmq_sha', nargs=\"?\", default=\"master\", help=\"rabbitmq repository commit, tag or branch\" )\nparser.add_argument('-g','--gitloc', default=\"git@github.com:VoltDB\", help=\"Repository location. For example: \/home\/github-mirror\")\nparser.add_argument('--nomac', action='store_true', help=\"Don't build Mac OSX\")\nparser.add_argument('--nocommunity', action='store_true', help=\"Don't build community\")\nargs = parser.parse_args()\n\nproTreeish = args.pro_sha\nvoltdbTreeish = args.voltdb_sha\nrbmqExportTreeish = args.rabbitmq_sha\n\nprint args\n\nbuild_community = not args.nocommunity\nbuild_mac = not args.nomac\n\n#If anything is missing we're going to dump this in oneoffs dir.\nbuild_all = build_community and build_mac\nif voltdbTreeish != proTreeish or not build_all:\n    oneOff = True\nelse:\n    oneOff  = False\n\nrmNativeLibs()\n\ntry:\n    build_args = os.environ['VOLTDB_BUILD_ARGS']\nexcept:\n    build_args=\"\"\n\nprint \"Building with pro: %s and voltdb: %s\" % (proTreeish, voltdbTreeish)\n\nbuild_errors=False\n\nversionCentos = \"unknown\"\nversionMac = \"unknown\"\nreleaseDir = \"unknown\"\n\n# get ssh config [key_filename, hostname]\nCentosSSHInfo = getSSHInfoForHost(\"volt15a\")\nMacSSHInfo = getSSHInfoForHost(\"voltmini\")\nUbuntuSSHInfo = getSSHInfoForHost(\"volt12d\")\n\n# build community kit on the mini so that .so can be picked up for unified kit\nif build_mac or build_community:\n    try:\n        with settings(user=username,host_string=MacSSHInfo[1],disable_known_hosts=True,key_filename=MacSSHInfo[0]):\n            versionMac = checkoutCode(voltdbTreeish, proTreeish, rbmqExportTreeish, args.gitloc)\n            buildCommunity()\n    except Exception as e:\n        print traceback.format_exc()\n        print \"Could not build MAC kit. Exception: \" + str(e) + \", Type: \" + str(type(e))\n        build_errors=True\n\n# build kits on 15f\ntry:\n    with settings(user=username,host_string=CentosSSHInfo[1],disable_known_hosts=True,key_filename=CentosSSHInfo[0]):\n        versionCentos = checkoutCode(voltdbTreeish, proTreeish, rbmqExportTreeish, args.gitloc)\n        if build_mac:\n            assert versionCentos == versionMac\n\n        if oneOff:\n            releaseDir = \"%s\/releases\/one-offs\/%s-%s-%s\" % \\\n                (os.getenv('HOME'), versionCentos, voltdbTreeish, proTreeish)\n        else:\n            releaseDir = os.getenv('HOME') + \"\/releases\/\" + voltdbTreeish\n        makeReleaseDir(releaseDir)\n        print \"VERSION: \" + versionCentos\n        if build_community:\n            buildCommunity()\n            buildRabbitMQExport(versionCentos, \"community\")\n            copyCommunityFilesToReleaseDir(releaseDir, versionCentos, \"LINUX\")\n        buildEnterprise()\n        buildRabbitMQExport(versionCentos, \"ent\")\n        makeSHA256SUM(versionCentos,\"ent\")\n        copyFilesToReleaseDir(releaseDir, versionCentos, \"ent\")\n        packagePro(versionCentos)\n        makeSHA256SUM(versionCentos,\"pro\")\n        copyFilesToReleaseDir(releaseDir, versionCentos, \"pro\")\n        makeTrialLicense()\n        copyTrialLicenseToReleaseDir(releaseDir)\n        makeMavenJars()\n        copyMavenJarsToReleaseDir(releaseDir, versionCentos)\n\nexcept Exception as e:\n    print traceback.format_exc()\n    print \"Could not build LINUX kit. Exception: \" + str(e) + \", Type: \" + str(type(e))\n    build_errors=True\n\nrmNativeLibs()      # cleanup imported native libs so not picked up unexpectedly by other builds\n\nexit (build_errors)\n#archiveDir = os.path.join(os.getenv('HOME'), \"releases\", \"archive\", voltdbTreeish, versionCentos)\n#backupReleaseDir(releaseDir, archiveDir, versionCentos)\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code builds VoltDB kits for Linux and Mac OSX. To build the kits, run the script with the following arguments: the commit, tag, or branch for the VoltDB repository, the commit, tag, or branch for the Pro repository, and the commit, tag, or branch for the RabbitMQ repository. Optionally, use the `--nomac` flag to skip building the Mac OSX kit and the `--nocommunity` flag to skip building the community kit. The script will create a release directory and copy the necessary files to it, including the trial license, SHA256 checksum, and Maven jars. Finally, the script will create a candidate symlink and backup the release directory.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n\nimport argparse, datetime, getpass, os, sys, shutil, traceback\nfrom fabric.api import run, cd, local, get, settings, lcd, put\nfrom fabric_ssh_config import getSSHInfoForHost\nfrom fabric.context_managers import shell_env\nfrom fabric.utils import abort\n\n#Login as user test, but build in a directory by real username\nusername = 'test'\nbuilddir = \"\/tmp\/\" + getpass.getuser() + \"Kits\/buildtemp\"\nversion = \"UNKNOWN\"\nnativelibdir = \"\/nativelibs\/obj\"  #  ~test\/libs\/... usually\ndefaultlicensedays = 70 #default trial license length\n\n\n################################################\n# CHECKOUT CODE INTO A TEMP DIR\n################################################\n\ndef checkoutCode(voltdbGit, proGit, rbmqExportGit, gitloc):\n    global buildir\n    # clean out the existing dir\n    run(\"rm -rf \" + builddir)\n    # make the build dir again\n    run(\"mkdir -p \" + builddir)\n    # change to it\n    with cd(builddir):\n        # do the checkouts, collect checkout errors on both community &\n        # pro repos so user gets status on both checkouts\n        message = \"\"\n        run(\"git clone -q %s\/voltdb.git\" % gitloc)\n        result = run(\"cd voltdb; git checkout %s\" % voltdbGit, warn_only=True)\n        if result.failed:\n            message = \"VoltDB checkout failed. Missing branch %s.\" % rbmqExportGit\n\n        run(\"git clone -q %s\/pro.git\" % gitloc)\n        result = run(\"cd pro; git checkout %s\" % proGit, warn_only=True)\n        if result.failed:\n            message += \"\\nPro checkout failed. Missing branch %s.\" % rbmqExportGit\n\n        #rabbitmq isn't mirrored internally, so don't use gitloc\n        run(\"git clone -q git@github.com:VoltDB\/export-rabbitmq.git\")\n        result = run(\"cd export-rabbitmq; git checkout %s\" % rbmqExportGit, warn_only=True)\n        # Probably ok to use master for export-rabbitmq.\n        if result.failed:\n            print \"\\nExport-rabbitmg branch %s checkout failed. Defaulting to master.\" % rbmqExportGit\n\n        if len(message) > 0:\n            abort(message)\n\n        return run(\"cat voltdb\/version.txt\").strip()\n\n################################################\n# MAKE A RELEASE DIR\n################################################\n\ndef makeReleaseDir(releaseDir):\n    # handle the case where a release dir exists for this version\n    if os.path.exists(releaseDir):\n        shutil.rmtree(releaseDir)\n    # create a release dir\n    os.makedirs(releaseDir)\n    print \"Created dir: \" + releaseDir\n\n\n################################################\n# BUILD THE COMMUNITY VERSION\n################################################\n\ndef buildCommunity():\n    if build_mac:\n        packageMacLib=\"true\"\n    else:\n        packageMacLib=\"false\"\n    with cd(builddir + \"\/voltdb\"):\n        run(\"pwd\")\n        run(\"git status\")\n        run(\"git describe --dirty\")\n        run(\"ant -Djmemcheck=NO_MEMCHECK -Dkitbuild=%s %s clean default dist\" % (packageMacLib,  build_args))\n\n################################################\n# BUILD THE ENTERPRISE VERSION\n################################################\n\ndef buildEnterprise():\n    if build_mac:\n        packageMacLib=\"true\"\n    else:\n        packageMacLib=\"false\"\n    with cd(builddir + \"\/pro\"):\n        run(\"pwd\")\n        run(\"git status\")\n        run(\"git describe --dirty\")\n        run(\"VOLTCORE=..\/voltdb ant -f mmt.xml -Djmemcheck=NO_MEMCHECK -Dallowreplication=true -DallowDrActiveActive=true -Dlicensedays=%d -Dkitbuild=%s %s clean dist.pro\" % (defaultlicensedays, packageMacLib, build_args))\n\n################################################\n# BUILD THE PRO VERSION\n################################################\n\n#\ndef packagePro(version):\n    print \"Making license\"\n    makeTrialLicense(days=defaultlicensedays, dr_and_xdcr=False, nodes=3)\n    print \"Repacking pro kit\"\n    with cd(builddir + \"\/pro\/obj\/pro\"):\n        run(\"mkdir pro_kit_staging\")\n    with cd(builddir + \"\/pro\/obj\/pro\/pro_kit_staging\"):\n        run(\"tar xf ..\/voltdb-ent-%s.tar.gz\" % version)\n        run(\"mv voltdb-ent-%s voltdb-pro-%s\" % (version, version))\n        run(\"cp %s\/pro\/trial_*.xml voltdb-pro-%s\/voltdb\/license.xml\" % (builddir, version))\n        run(\"tar cvfz ..\/voltdb-pro-%s.tar.gz voltdb-pro-%s\" % (version, version))\n\n################################################\n# BUILD THE RABBITMQ EXPORT CONNECTOR\n################################################\n#Build rabbit MQ Exporter\ndef buildRabbitMQExport(version, dist_type):\n    # Paths to the final kit for unpacking\/repacking with rmq export\n    paths = {\n        'community': builddir + \"\/voltdb\/obj\/release\",\n        'ent' : builddir + \"\/pro\/obj\/pro\/\"\n        }\n    # Untar\n    with cd(paths[dist_type]):\n        run (\"pwd\")\n        run (\"mkdir -p restage\")\n        run (\"tar xf voltdb-%s-%s.tar.gz -C restage\" % (dist_type, version))\n        run (\"rm -f voltdb-%s-%s.tar.gz\" % (dist_type, version))\n\n    # Build RabbitMQ export jar and put it into the untarred kit\n    with cd(builddir + \"\/export-rabbitmq\"):\n        run(\"pwd\")\n        run(\"git status\")\n        run(\"git describe --dirty\", warn_only=True)\n        run(\"VOLTDIST=%s\/restage\/voltdb-%s-%s ant\" % (paths[dist_type], dist_type, version))\n\n    # Retar\n    with cd(paths[dist_type]):\n        run(\"pwd\")\n        run(\"tar -C restage -czf voltdb-%s-%s.tar.gz voltdb-%s-%s\" % (dist_type, version, dist_type, version))\n        run (\"rm -Rf restage\")\n\n################################################\n# MAKE AN ENTERPRISE TRIAL LICENSE\n################################################\n\n# Must be called after buildEnterprise has been done\ndef makeTrialLicense(days=30, dr_and_xdcr=\"true\", nodes=12):\n    with cd(builddir + \"\/pro\/tools\"):\n        run(\".\/make_trial_licenses.pl -t %d -H %d -W %s\" % (days, nodes, dr_and_xdcr ))\n\n################################################\n# MAKE A SHA256 checksum\n################################################\n\ndef makeSHA256SUM(version, type):\n    with cd(builddir + \"\/pro\/obj\/pro\"):\n        kitname=\"voltdb-\" +  type + \"-\" + version\n        run(\"sha256sum -b %s.tar.gz > %s.SHA256SUM\" % (kitname, kitname))\n\n################################################\n# MAKE AN JAR FILES NEEDED TO PUSH TO MAVEN\n################################################\n\ndef makeMavenJars():\n    with cd(builddir + \"\/voltdb\"):\n        run(\"VOLTCORE=..\/voltdb ant -f build-client.xml maven-jars\")\n\n################################################\n# COPY FILES\n################################################\n\ndef copyFilesToReleaseDir(releaseDir, version, type=None):\n    print \"Copying files to releaseDir\"\n    if type:\n        typeString=\"-\" + type\n    else:\n        typeString=\"\"\n    get(\"%s\/pro\/obj\/pro\/voltdb%s-%s.tar.gz\" % (builddir, typeString, version),\n        \"%s\/voltdb%s-%s.tar.gz\" % (releaseDir, typeString, version))\n    get(\"%s\/pro\/obj\/pro\/voltdb%s-%s.SHA256SUM\" % (builddir, typeString, version),\n        \"%s\/voltdb%s-%s.SHA256SUM\" % (releaseDir, typeString, version))\n\ndef copyCommunityFilesToReleaseDir(releaseDir, version, operatingsys):\n    get(\"%s\/voltdb\/obj\/release\/voltdb-community-%s.tar.gz\" % (builddir, version),\n        \"%s\/voltdb-community-%s.tar.gz\" % (releaseDir, version))\n\n    # add stripped symbols\n    if operatingsys == \"LINUX\":\n        os.makedirs(releaseDir + \"\/other\")\n        get(\"%s\/voltdb\/obj\/release\/voltdb-%s.sym\" % (builddir, version),\n            \"%s\/other\/%s-voltdb-voltkv-%s.sym\" % (releaseDir, operatingsys, version))\n\ndef copyTrialLicenseToReleaseDir(releaseDir):\n    get(\"%s\/pro\/trial_*.xml\" % (builddir),\n        \"%s\/license.xml\" % (releaseDir))\n\ndef copyMavenJarsToReleaseDir(releaseDir, version):\n    #The .jars and upload file must be in a directory called voltdb - it is the projectname\n    mavenProjectDir = releaseDir + \"\/mavenjars\/voltdb\"\n    if not os.path.exists(mavenProjectDir):\n        os.makedirs(mavenProjectDir)\n\n    #Get the voltdbclient-n.n.jar from the recently built community build\n    get(\"%s\/voltdb\/obj\/release\/dist-client-java\/voltdb\/voltdbclient-%s.jar\" % (builddir, version),\n        \"%s\/voltdbclient-%s.jar\" % (mavenProjectDir, version))\n    #Get the upload.gradle file\n    get(\"%s\/voltdb\/tools\/kit_tools\/upload.gradle\" % (builddir),\n        \"%s\/upload.gradle\" % (mavenProjectDir))\n    #Get the src and javadoc .jar files\n    get(\"%s\/voltdb\/obj\/release\/voltdbclient-%s-javadoc.jar\" % (builddir, version),\n        \"%s\/voltdbclient-%s-javadoc.jar\" % (mavenProjectDir, version))\n    get(\"%s\/voltdb\/obj\/release\/voltdbclient-%s-sources.jar\" % (builddir, version),\n        \"%s\/voltdbclient-%s-sources.jar\" % (mavenProjectDir, version))\n\n################################################\n# CREATE CANDIDATE SYMLINKS\n################################################\n\ndef createCandidateSysmlink(releaseDir):\n    candidateDir =  os.getenv('HOME') + \"\/releases\/candidate\";\n    local(\"rm -rf \" + candidateDir)\n    local(\"ln -s %s %s\" % (releaseDir, candidateDir))\n\n################################################\n# BACKUP RELEASE DIR\n################################################\n\ndef backupReleaseDir(releaseDir,archiveDir,version):\n    if not os.path.exists(archiveDir):\n        os.makedirs(archiveDir)\n    # make a backup with the timstamp of the  build\n    timestamp = datetime.datetime.now().strftime(\"%y%m%d-%H%M%S\")\n    local(\"tar -czf %s\/%s-%s.tgz %s\" \\\n          % (archiveDir, version, timestamp, releaseDir))\n\n################################################\n# REMOVE NATIVE LIBS FROM SHARED DIRECTORY\n################################################\n\ndef rmNativeLibs():\n    # local(\"ls -l ~\" + username + nativelibdir)\n    local(\"rm -rf ~\" + username + nativelibdir)\n\n\n\n################################################\n# GET THE GIT TAGS OR SHAS TO BUILD FROM\n################################################\n\nparser = argparse.ArgumentParser(description = \"Create a full kit. With no args, will do build of master\")\nparser.add_argument('voltdb_sha', nargs=\"?\", default=\"master\", help=\"voltdb repository commit, tag or branch\" )\nparser.add_argument('pro_sha', nargs=\"?\", default=\"master\", help=\"pro repository commit, tag or branch\" )\nparser.add_argument('rabbitmq_sha', nargs=\"?\", default=\"master\", help=\"rabbitmq repository commit, tag or branch\" )\nparser.add_argument('-g','--gitloc', default=\"git@github.com:VoltDB\", help=\"Repository location. For example: \/home\/github-mirror\")\nparser.add_argument('--nomac', action='store_true', help=\"Don't build Mac OSX\")\nparser.add_argument('--nocommunity', action='store_true', help=\"Don't build community\")\nargs = parser.parse_args()\n\nproTreeish = args.pro_sha\nvoltdbTreeish = args.voltdb_sha\nrbmqExportTreeish = args.rabbitmq_sha\n\nprint args\n\nbuild_community = not args.nocommunity\nbuild_mac = not args.nomac\n\n#If anything is missing we're going to dump this in oneoffs dir.\nbuild_all = build_community and build_mac\nif voltdbTreeish != proTreeish or not build_all:\n    oneOff = True\nelse:\n    oneOff  = False\n\nrmNativeLibs()\n\ntry:\n    build_args = os.environ['VOLTDB_BUILD_ARGS']\nexcept:\n    build_args=\"\"\n\nprint \"Building with pro: %s and voltdb: %s\" % (proTreeish, voltdbTreeish)\n\nbuild_errors=False\n\nversionCentos = \"unknown\"\nversionMac = \"unknown\"\nreleaseDir = \"unknown\"\n\n# get ssh config [key_filename, hostname]\nCentosSSHInfo = getSSHInfoForHost(\"volt15a\")\nMacSSHInfo = getSSHInfoForHost(\"voltmini\")\nUbuntuSSHInfo = getSSHInfoForHost(\"volt12d\")\n\n# build community kit on the mini so that .so can be picked up for unified kit\nif build_mac or build_community:\n    try:\n        with settings(user=username,host_string=MacSSHInfo[1],disable_known_hosts=True,key_filename=MacSSHInfo[0]):\n            versionMac = checkoutCode(voltdbTreeish, proTreeish, rbmqExportTreeish, args.gitloc)\n            buildCommunity()\n    except Exception as e:\n        print traceback.format_exc()\n        print \"Could not build MAC kit. Exception: \" + str(e) + \", Type: \" + str(type(e))\n        build_errors=True\n\n# build kits on 15f\ntry:\n    with settings(user=username,host_string=CentosSSHInfo[1],disable_known_hosts=True,key_filename=CentosSSHInfo[0]):\n        versionCentos = checkoutCode(voltdbTreeish, proTreeish, rbmqExportTreeish, args.gitloc)\n        if build_mac:\n            assert versionCentos == versionMac\n\n        if oneOff:\n            releaseDir = \"%s\/releases\/one-offs\/%s-%s-%s\" % \\\n                (os.getenv('HOME'), versionCentos, voltdbTreeish, proTreeish)\n        else:\n            releaseDir = os.getenv('HOME') + \"\/releases\/\" + voltdbTreeish\n        makeReleaseDir(releaseDir)\n        print \"VERSION: \" + versionCentos\n        if build_community:\n            buildCommunity()\n            buildRabbitMQExport(versionCentos, \"community\")\n            copyCommunityFilesToReleaseDir(releaseDir, versionCentos, \"LINUX\")\n        buildEnterprise()\n        buildRabbitMQExport(versionCentos, \"ent\")\n        makeSHA256SUM(versionCentos,\"ent\")\n        copyFilesToReleaseDir(releaseDir, versionCentos, \"ent\")\n        packagePro(versionCentos)\n        makeSHA256SUM(versionCentos,\"pro\")\n        copyFilesToReleaseDir(releaseDir, versionCentos, \"pro\")\n        makeTrialLicense()\n        copyTrialLicenseToReleaseDir(releaseDir)\n        makeMavenJars()\n        copyMavenJarsToReleaseDir(releaseDir, versionCentos)\n\nexcept Exception as e:\n    print traceback.format_exc()\n    print \"Could not build LINUX kit. Exception: \" + str(e) + \", Type: \" + str(type(e))\n    build_errors=True\n\nrmNativeLibs()      # cleanup imported native libs so not picked up unexpectedly by other builds\n\nexit (build_errors)\n#archiveDir = os.path.join(os.getenv('HOME'), \"releases\", \"archive\", voltdbTreeish, versionCentos)\n#backupReleaseDir(releaseDir, archiveDir, versionCentos)\n"}
{"instruction":"Write a Python program to generate a random name from a set of given names.","input":"['John', 'Andy', 'Alex', 'Paul', 'Pippa']","output":"import random\n\nnames = [\"John\", \"Andy\", \"Alex\", \"Paul\", \"Pippa\"]\n\ndef getRandomName(names):\n    randomIndex = random.randint(0, len(names)-1) \n    return names[randomIndex]\n\nif __name__ == '__main__':\n    print(getRandomName(names))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a random name from a set of given names.\n\n### Input:\n['John', 'Andy', 'Alex', 'Paul', 'Pippa']\n\n### Output:\nimport random\n\nnames = [\"John\", \"Andy\", \"Alex\", \"Paul\", \"Pippa\"]\n\ndef getRandomName(names):\n    randomIndex = random.randint(0, len(names)-1) \n    return names[randomIndex]\n\nif __name__ == '__main__':\n    print(getRandomName(names))"}
{"instruction":"Write a Python program that takes two numbers, a and b, and prints the sum of those numbers, (a + b).","input":"","output":"def add_numbers(a, b):\n  print(a + b)\n\nadd_numbers(3, 2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes two numbers, a and b, and prints the sum of those numbers, (a + b).\n\n### Input:\n\n\n### Output:\ndef add_numbers(a, b):\n  print(a + b)\n\nadd_numbers(3, 2)"}
{"instruction":"Create a payment processing API in Python that takes in a customer's credit card information and validates it using a third-party payment processor like Stripe.","input":"Not applicable","output":"import stripe\n\nstripe.api_key = 'sk_test_YOUR_KEY'\n\ndef process_payment(card_info):\n    # validate the credit card information\n    if not stripe.Token.create(\n        card={\n            'number': card_info['number'],\n            'exp_month': card_info['exp_month'],\n            'exp_year': card_info['exp_year'],\n            'cvc': card_info['cvc'],\n        },\n    ):\n        return False\n\n    # create and process the charge:\n    stripe.Charge.create(\n        amount=card_info['amount'],\n        currency='usd',\n        source=card_info['token'],\n        description='Example charge',\n    )\n\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a payment processing API in Python that takes in a customer's credit card information and validates it using a third-party payment processor like Stripe.\n\n### Input:\nNot applicable\n\n### Output:\nimport stripe\n\nstripe.api_key = 'sk_test_YOUR_KEY'\n\ndef process_payment(card_info):\n    # validate the credit card information\n    if not stripe.Token.create(\n        card={\n            'number': card_info['number'],\n            'exp_month': card_info['exp_month'],\n            'exp_year': card_info['exp_year'],\n            'cvc': card_info['cvc'],\n        },\n    ):\n        return False\n\n    # create and process the charge:\n    stripe.Charge.create(\n        amount=card_info['amount'],\n        currency='usd',\n        source=card_info['token'],\n        description='Example charge',\n    )\n\n    return True"}
{"instruction":"Create a for-loop in Python to print out all the characters in the string \u201cHello World!\u201d","input":"Not applicable","output":"myString = \"Hello World!\"\nfor x in myString:\n  print(x)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a for-loop in Python to print out all the characters in the string \u201cHello World!\u201d\n\n### Input:\nNot applicable\n\n### Output:\nmyString = \"Hello World!\"\nfor x in myString:\n  print(x)"}
{"instruction":"Set up a Python program to read in .csv data and generate a table.","input":"[Name, Age, City] \n[John, 20, New York], \n[George, 18, London], \n[Ringo, 25, Tokyo]","output":"import pandas as pd \n  \n# Initialize the data \ndata = [['John', 20, 'New York'], \n        ['George', 18, 'London'], \n        ['Ringo', 25, 'Tokyo']] \n  \n# Create the dataframe \ndf = pd.DataFrame(data, columns = ['Name', 'Age', 'City']) \n  \n# Print the dataframe \nprint (df)\n\n\n   Name  Age      City\n0  John   20  New York\n1  George   18    London\n2  Ringo   25     Tokyo","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSet up a Python program to read in .csv data and generate a table.\n\n### Input:\n[Name, Age, City] \n[John, 20, New York], \n[George, 18, London], \n[Ringo, 25, Tokyo]\n\n### Output:\nimport pandas as pd \n  \n# Initialize the data \ndata = [['John', 20, 'New York'], \n        ['George', 18, 'London'], \n        ['Ringo', 25, 'Tokyo']] \n  \n# Create the dataframe \ndf = pd.DataFrame(data, columns = ['Name', 'Age', 'City']) \n  \n# Print the dataframe \nprint (df)\n\n\n   Name  Age      City\n0  John   20  New York\n1  George   18    London\n2  Ringo   25     Tokyo"}
{"instruction":"Create a Python function that reorders an integer array using the Bubble Sort algorithm.","input":"arr = [2, 3, 1, 5, 9]","output":"def bubble_sort(arr):\n\t# Traverse through all array elements \n\tfor i in range(len(arr)):\n\t\t# Last i elements are already in place \n\t\tfor j in range(0, len(arr)-i-1):\n\t\t\t# traverse the array from 0 to n-i-1 \n\t\t\t# Swap if the element found is greater \n\t\t\t# than the next element \n\t\t\tif arr[j] > arr[j+1] :\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\n# Driver code to test above \narr = [2, 3, 1, 5, 9]\n\nbubble_sort(arr) \n\n# Prints the sorted array \nprint (\"Sorted array list is:\" ,arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that reorders an integer array using the Bubble Sort algorithm.\n\n### Input:\narr = [2, 3, 1, 5, 9]\n\n### Output:\ndef bubble_sort(arr):\n\t# Traverse through all array elements \n\tfor i in range(len(arr)):\n\t\t# Last i elements are already in place \n\t\tfor j in range(0, len(arr)-i-1):\n\t\t\t# traverse the array from 0 to n-i-1 \n\t\t\t# Swap if the element found is greater \n\t\t\t# than the next element \n\t\t\tif arr[j] > arr[j+1] :\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\n# Driver code to test above \narr = [2, 3, 1, 5, 9]\n\nbubble_sort(arr) \n\n# Prints the sorted array \nprint (\"Sorted array list is:\" ,arr)"}
{"instruction":"Develop a bot in Python to simulate a conversation between two people.","input":"","output":"# Importing the necessary libraries\nimport random\n\n# Defining the responses for the bot\nquestions = [\"What is your favorite movie?\", \"What is your favorite color?\"]\nresponses = [\"My favorite movie is 'The Godfather'. I love the classic vibe of the movie.\", \n             \"My favorite color is blue. It's soothing and calming to me.\"]\n\n# Function to respond to the questions\ndef respond(user_input):\n    if user_input in questions:\n        return random.choice(responses)\n    else:\n        return \"I'm sorry, I don't understand.\"\n\n# Driver code\nprint(\"Bot: Hi! What can I help you with?\")\nuser_input = input(\"User: \")\n\nwhile user_input != \"bye\":\n    print(\"Bot: \" + respond(user_input))\n    user_input = input(\"User: \")\n\nprint(\"Bot: Bye! It was nice talking to you!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a bot in Python to simulate a conversation between two people.\n\n### Input:\n\n\n### Output:\n# Importing the necessary libraries\nimport random\n\n# Defining the responses for the bot\nquestions = [\"What is your favorite movie?\", \"What is your favorite color?\"]\nresponses = [\"My favorite movie is 'The Godfather'. I love the classic vibe of the movie.\", \n             \"My favorite color is blue. It's soothing and calming to me.\"]\n\n# Function to respond to the questions\ndef respond(user_input):\n    if user_input in questions:\n        return random.choice(responses)\n    else:\n        return \"I'm sorry, I don't understand.\"\n\n# Driver code\nprint(\"Bot: Hi! What can I help you with?\")\nuser_input = input(\"User: \")\n\nwhile user_input != \"bye\":\n    print(\"Bot: \" + respond(user_input))\n    user_input = input(\"User: \")\n\nprint(\"Bot: Bye! It was nice talking to you!\")"}
{"instruction":"Implement a function to run a series of unit tests in Python.","input":"Not applicable","output":"def run_tests(tests):\n    \"\"\"Takes in a list of tests and runs each one in turn,\n     printing out the results.\n    \"\"\"\n\n    # Keep track of which tests have passed or failed.\n    passed = 0\n    failed = 0\n\n    # Run each test.\n    for test in tests:\n        print(\"Running test: \" + test.name)\n\n        try:\n            test.run()\n            print(\"Test passed!\")\n            passed += 1\n        except AssertionError as e:\n            print(\"Test failed:\")\n            print(\"\\t\" + str(e))\n            failed += 1\n\n    # Print out a summary of the results.\n    print(\"\\nTest Summary:\")\n    print(str(passed) + \" tests passed\")\n    print(str(failed) + \" tests failed\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function to run a series of unit tests in Python.\n\n### Input:\nNot applicable\n\n### Output:\ndef run_tests(tests):\n    \"\"\"Takes in a list of tests and runs each one in turn,\n     printing out the results.\n    \"\"\"\n\n    # Keep track of which tests have passed or failed.\n    passed = 0\n    failed = 0\n\n    # Run each test.\n    for test in tests:\n        print(\"Running test: \" + test.name)\n\n        try:\n            test.run()\n            print(\"Test passed!\")\n            passed += 1\n        except AssertionError as e:\n            print(\"Test failed:\")\n            print(\"\\t\" + str(e))\n            failed += 1\n\n    # Print out a summary of the results.\n    print(\"\\nTest Summary:\")\n    print(str(passed) + \" tests passed\")\n    print(str(failed) + \" tests failed\")"}
{"instruction":"Create a Python program to generate unique coupon codes with a given length and character set.","input":"length = 8\ncharacters = '0123456789ABCDEF'","output":"import random\n\ndef generate_coupon(length, characters):\n coupon_code = ''\n for i in range(length):\n  coupon_code += random.choice(characters)\n return coupon_code\n\ncoupon_code = generate_coupon(8, '0123456789ABCDEF')\nprint(coupon_code)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate unique coupon codes with a given length and character set.\n\n### Input:\nlength = 8\ncharacters = '0123456789ABCDEF'\n\n### Output:\nimport random\n\ndef generate_coupon(length, characters):\n coupon_code = ''\n for i in range(length):\n  coupon_code += random.choice(characters)\n return coupon_code\n\ncoupon_code = generate_coupon(8, '0123456789ABCDEF')\nprint(coupon_code)"}
{"instruction":"Complete the Python function below to return all the permutations of a given string, sorted lexicographically.","input":"def permutations(s):\n    # TODO: return all permutations sorted lexicographically","output":"def permutations(s):\n    # base case\n    if len(s) == 1:\n        return [s]\n    \n    # recursive case\n    permutations = []\n    for i, letter in enumerate(s):\n        # Get all the permutations of the substring without the current letter.\n        sub_permutations = permutations(s[:i] + s[i+1:])\n        for sub_permutation in sub_permutations:\n            permutations.append(letter + sub_permutation)\n    \n    # Sort the permutations.\n    permutations.sort()\n    \n    return permutations","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nComplete the Python function below to return all the permutations of a given string, sorted lexicographically.\n\n### Input:\ndef permutations(s):\n    # TODO: return all permutations sorted lexicographically\n\n### Output:\ndef permutations(s):\n    # base case\n    if len(s) == 1:\n        return [s]\n    \n    # recursive case\n    permutations = []\n    for i, letter in enumerate(s):\n        # Get all the permutations of the substring without the current letter.\n        sub_permutations = permutations(s[:i] + s[i+1:])\n        for sub_permutation in sub_permutations:\n            permutations.append(letter + sub_permutation)\n    \n    # Sort the permutations.\n    permutations.sort()\n    \n    return permutations"}
{"instruction":"Write a code to detect if a given text contains the word \"python\".","input":"This post is about programming in python.","output":"def contains_python(text):\n    return \"python\" in text","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to detect if a given text contains the word \"python\".\n\n### Input:\nThis post is about programming in python.\n\n### Output:\ndef contains_python(text):\n    return \"python\" in text"}
{"instruction":"Create a Python script that takes in a string of text and returns the number of characters that contain a vowel.","input":"","output":"def count_vowels(text):\n    counter = 0\n    for char in text:\n        if char in \"aeiouAEIOU\":\n            counter += 1\n    return counter","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes in a string of text and returns the number of characters that contain a vowel.\n\n### Input:\n\n\n### Output:\ndef count_vowels(text):\n    counter = 0\n    for char in text:\n        if char in \"aeiouAEIOU\":\n            counter += 1\n    return counter"}
{"instruction":"Write a Python script that normalizes given input strings.","input":"\"Hello,  world    !  How are you?\"","output":"import re\ns = \"Hello,  world    !  How are you?\"\ns = re.sub(' +', ' ', s)\nprint(s)\n\n# Output\n# 'Hello, world! How are you?'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that normalizes given input strings.\n\n### Input:\n\"Hello,  world    !  How are you?\"\n\n### Output:\nimport re\ns = \"Hello,  world    !  How are you?\"\ns = re.sub(' +', ' ', s)\nprint(s)\n\n# Output\n# 'Hello, world! How are you?'"}
{"instruction":"Construct a function that will find the value of a given key in a Python dictionary.","input":"dictionary = {'key1':1, 'key2':2, 'key3':3}\nkey = 'key2'","output":"def find_value(dictionary, key):\n    value = dictionary.get(key)\n    return value\n\ndictionary = {'key1':1, 'key2':2, 'key3':3}\nkey = 'key2'\nvalue = find_value(dictionary, key)\nprint(value) # Output is 2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function that will find the value of a given key in a Python dictionary.\n\n### Input:\ndictionary = {'key1':1, 'key2':2, 'key3':3}\nkey = 'key2'\n\n### Output:\ndef find_value(dictionary, key):\n    value = dictionary.get(key)\n    return value\n\ndictionary = {'key1':1, 'key2':2, 'key3':3}\nkey = 'key2'\nvalue = find_value(dictionary, key)\nprint(value) # Output is 2"}
{"instruction":"Write a Python program to encrypt a given sentence using Ceaser Cipher.","input":"sentence = \"Sentry is the best\"","output":"# Ceasar Cipher\ndef encrypt(text,s):\n result = \"\"\n # transverse the plain text\n for i in range(len(text)):\n char = text[i]\n # Encrypt uppercase characters\n if (char.isupper()):\n result += chr((ord(char) + s-65) % 26 + 65)\n # Encrypt lowercase characters\n else:\n result += chr((ord(char) + s - 97) % 26 + 97)\n return result\n\n# Check the above function\ntext = \"Sentry is the best\"\ns = 4\n\nprint(\"Plain Text : \" + text)\nprint(\"Shift pattern : \" + str(s))\nprint(\"Cipher: \" + encrypt(text,s))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to encrypt a given sentence using Ceaser Cipher.\n\n### Input:\nsentence = \"Sentry is the best\"\n\n### Output:\n# Ceasar Cipher\ndef encrypt(text,s):\n result = \"\"\n # transverse the plain text\n for i in range(len(text)):\n char = text[i]\n # Encrypt uppercase characters\n if (char.isupper()):\n result += chr((ord(char) + s-65) % 26 + 65)\n # Encrypt lowercase characters\n else:\n result += chr((ord(char) + s - 97) % 26 + 97)\n return result\n\n# Check the above function\ntext = \"Sentry is the best\"\ns = 4\n\nprint(\"Plain Text : \" + text)\nprint(\"Shift pattern : \" + str(s))\nprint(\"Cipher: \" + encrypt(text,s))"}
{"instruction":"Generate a Python program to perform a linear search of an array.","input":"","output":"def linear_search(arr, x): \n    for i in range(len(arr)): \n        if arr[i] == x: \n            return i \n    return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to perform a linear search of an array.\n\n### Input:\n\n\n### Output:\ndef linear_search(arr, x): \n    for i in range(len(arr)): \n        if arr[i] == x: \n            return i \n    return -1"}
{"instruction":"Write a function in Python for finding the maximum subarray sum of an array.","input":"arr = [4,2,1,4,5,-7,2,4]","output":"def max_subarray_sum(arr):\n\tmax_so_far = 0\n\tmax_ending_here = 0\t\n\t\n\tfor i in range(0, len(arr)): \n\t\tmax_ending_here = max_ending_here + arr[i] \n\t\tif max_ending_here < 0: \n\t\t\tmax_ending_here = 0\t \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\t\t\n\treturn max_so_far \n\nresult = max_subarray_sum(arr)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python for finding the maximum subarray sum of an array.\n\n### Input:\narr = [4,2,1,4,5,-7,2,4]\n\n### Output:\ndef max_subarray_sum(arr):\n\tmax_so_far = 0\n\tmax_ending_here = 0\t\n\t\n\tfor i in range(0, len(arr)): \n\t\tmax_ending_here = max_ending_here + arr[i] \n\t\tif max_ending_here < 0: \n\t\t\tmax_ending_here = 0\t \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\t\t\n\treturn max_so_far \n\nresult = max_subarray_sum(arr)\nprint(result)"}
{"instruction":"Create a text generator in Python that takes in a seed phrase and generates a sentence of 20 words.","input":"Seed phrase: The quick brown","output":"import random\nfrom textgenrnn import textgenrnn\n\ntextgen = textgenrnn()\n\nseed_phrase = 'The quick brown '\nseed_words = seed_phrase.split() # split seed phrase into list\n\n# Generate text consisting of 20 words\ngenerated_text = textgen.generate(20, return_as_list=True, temperature=0.5, prefix=seed_words)[0].strip()\n\n# Print the generated text\nprint(generated_text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a text generator in Python that takes in a seed phrase and generates a sentence of 20 words.\n\n### Input:\nSeed phrase: The quick brown\n\n### Output:\nimport random\nfrom textgenrnn import textgenrnn\n\ntextgen = textgenrnn()\n\nseed_phrase = 'The quick brown '\nseed_words = seed_phrase.split() # split seed phrase into list\n\n# Generate text consisting of 20 words\ngenerated_text = textgen.generate(20, return_as_list=True, temperature=0.5, prefix=seed_words)[0].strip()\n\n# Print the generated text\nprint(generated_text)"}
{"instruction":"Create a Python program that uses a given list of words to construct a poem.","input":"\"Sleep\", \"Dream\", \"Reality\", \"Beauty\", \"Life\"","output":"def create_poem(words):\n    poem = \"\"\n    for word in words:\n        poem += word + \"\\n\"\n\n    poem += \"\\nSleep, dream and beauty\\nReality shatters in life\\nWhere dreams forevermore dwell\"\n    return poem\n\nprint(create_poem([\"Sleep\", \"Dream\", \"Reality\", \"Beauty\", \"Life\"]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses a given list of words to construct a poem.\n\n### Input:\n\"Sleep\", \"Dream\", \"Reality\", \"Beauty\", \"Life\"\n\n### Output:\ndef create_poem(words):\n    poem = \"\"\n    for word in words:\n        poem += word + \"\\n\"\n\n    poem += \"\\nSleep, dream and beauty\\nReality shatters in life\\nWhere dreams forevermore dwell\"\n    return poem\n\nprint(create_poem([\"Sleep\", \"Dream\", \"Reality\", \"Beauty\", \"Life\"]))"}
{"instruction":"Create a Python program to check if a given number is a power of 2.","input":"","output":"def is_power_of_two(num):\n    if num == 0:\n        return False\n    while num % 2 == 0:\n        num \/= 2\n    return num == 1\n\nprint(is_power_of_two(32))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to check if a given number is a power of 2.\n\n### Input:\n\n\n### Output:\ndef is_power_of_two(num):\n    if num == 0:\n        return False\n    while num % 2 == 0:\n        num \/= 2\n    return num == 1\n\nprint(is_power_of_two(32))"}
{"instruction":"Write Python code to classify input sentences into positive and negative sentiment using Naive Bayes classifier.","input":"","output":"import numpy as np\nfrom sklearn.naive_bayes import BernoulliNB\n\ndef predict_sentiment(clf, features):\n    # Predict the sentiment from features using the Naive Bayes classifier\n    return clf.predict(features)\n\ndef train_naive_bayes(features, labels):\n    \"\"\"\n    Train a Naive Bayes classifier on a set of features and labels\n    \n    :param features: The array of features\n    :param labels: The corresponding labels\n    :return: A trained Naive Bayes classifier\n    \"\"\"\n    \n    # Create a Bernoulli Naive Bayes classifier\n    clf = BernoulliNB()\n    # Train the classifier\n    clf.fit(features, labels)\n    \n    return clf\n\ndef extract_features_from_sentences(sentences):\n    \"\"\"\n    Extract features from sentences\n    \n    :param sentences: An array of sentences\n    :return: Array of feature vectors for each sentence\n    \"\"\"\n    # Get the length of each sentence\n    len_features = [len(sentence.split()) for sentence in sentences]\n    # Return the feature vector containing the lengths of each sentence\n    return np.array([len_features])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to classify input sentences into positive and negative sentiment using Naive Bayes classifier.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom sklearn.naive_bayes import BernoulliNB\n\ndef predict_sentiment(clf, features):\n    # Predict the sentiment from features using the Naive Bayes classifier\n    return clf.predict(features)\n\ndef train_naive_bayes(features, labels):\n    \"\"\"\n    Train a Naive Bayes classifier on a set of features and labels\n    \n    :param features: The array of features\n    :param labels: The corresponding labels\n    :return: A trained Naive Bayes classifier\n    \"\"\"\n    \n    # Create a Bernoulli Naive Bayes classifier\n    clf = BernoulliNB()\n    # Train the classifier\n    clf.fit(features, labels)\n    \n    return clf\n\ndef extract_features_from_sentences(sentences):\n    \"\"\"\n    Extract features from sentences\n    \n    :param sentences: An array of sentences\n    :return: Array of feature vectors for each sentence\n    \"\"\"\n    # Get the length of each sentence\n    len_features = [len(sentence.split()) for sentence in sentences]\n    # Return the feature vector containing the lengths of each sentence\n    return np.array([len_features])"}
{"instruction":"Formulate a Python code for calculating the Levenshtein distance for two strings.","input":"","output":"def calculateLevenshteinDistance(str1, str2): \n    n = len(str1)\n    m = len(str2)\n  \n    # Create a matrix to store results \n    dp = [[0 for x in range(m + 1)] for x in range(n + 1)] \n\n    # Initialize the first row and column with the difference of lengths\n    for i in range(n + 1): \n        for j in range(m + 1): \n    \n            if i == 0: \n                dp[i][j] = j\n            elif j == 0: \n                dp[i][j] = i\n  \n    # Iterate through the matrix and replace the \n    # cells with the required edit distance\n    for i in range(1, n + 1): \n        for j in range(1, m + 1): \n            if str1[i-1] == str2[j-1]: \n                dp[i][j] = dp[i-1][j-1]\n            else: \n                dp[i][j] = 1 + min(dp[i][j-1],        # Insert \n                                   dp[i-1][j],        # Remove \n                                   dp[i-1][j-1])    # Replace \n  \n    return dp[n][m]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFormulate a Python code for calculating the Levenshtein distance for two strings.\n\n### Input:\n\n\n### Output:\ndef calculateLevenshteinDistance(str1, str2): \n    n = len(str1)\n    m = len(str2)\n  \n    # Create a matrix to store results \n    dp = [[0 for x in range(m + 1)] for x in range(n + 1)] \n\n    # Initialize the first row and column with the difference of lengths\n    for i in range(n + 1): \n        for j in range(m + 1): \n    \n            if i == 0: \n                dp[i][j] = j\n            elif j == 0: \n                dp[i][j] = i\n  \n    # Iterate through the matrix and replace the \n    # cells with the required edit distance\n    for i in range(1, n + 1): \n        for j in range(1, m + 1): \n            if str1[i-1] == str2[j-1]: \n                dp[i][j] = dp[i-1][j-1]\n            else: \n                dp[i][j] = 1 + min(dp[i][j-1],        # Insert \n                                   dp[i-1][j],        # Remove \n                                   dp[i-1][j-1])    # Replace \n  \n    return dp[n][m]"}
{"instruction":"Suggest a way to display a calendar for the current month in python.","input":"","output":"import calendar\n\ndate = calendar.month( 2020, 8 )\nprint(date)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a way to display a calendar for the current month in python.\n\n### Input:\n\n\n### Output:\nimport calendar\n\ndate = calendar.month( 2020, 8 )\nprint(date)"}
{"instruction":"Create a class in Python to manage the expiry dates of products.","input":"","output":"class ProductExpiry:\n    def __init__(self, product_id, expiry_date):\n        self.product_id = product_id\n        self.expiry_date = expiry_date\n\n    def is_expired(self):\n        \"\"\"Returns True if the product has passed its expiry date, False otherwise\"\"\"\n        return datetime.now() > self.expiry_date\n    \n    def get_time_left(self):\n        \"\"\"Returns the number of days left before the product expires\"\"\"\n        time_left = (self.expiry_date - datetime.now())\n        days_left = time_left.days\n        return days_left","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to manage the expiry dates of products.\n\n### Input:\n\n\n### Output:\nclass ProductExpiry:\n    def __init__(self, product_id, expiry_date):\n        self.product_id = product_id\n        self.expiry_date = expiry_date\n\n    def is_expired(self):\n        \"\"\"Returns True if the product has passed its expiry date, False otherwise\"\"\"\n        return datetime.now() > self.expiry_date\n    \n    def get_time_left(self):\n        \"\"\"Returns the number of days left before the product expires\"\"\"\n        time_left = (self.expiry_date - datetime.now())\n        days_left = time_left.days\n        return days_left"}
{"instruction":"Create a python module that finds the minimum and maximum values of a given list.","input":"","output":"def min_max(list):\n    min_val = max_val = list[0]\n    for value in list[1:]:\n        if value < min_val:\n            min_val = value\n        elif value > max_val:\n            max_val = value\n    return (min_val, max_val)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python module that finds the minimum and maximum values of a given list.\n\n### Input:\n\n\n### Output:\ndef min_max(list):\n    min_val = max_val = list[0]\n    for value in list[1:]:\n        if value < min_val:\n            min_val = value\n        elif value > max_val:\n            max_val = value\n    return (min_val, max_val)"}
{"instruction":"Write a function to find the maximum value in a normal list in Python","input":"","output":"def max_value_index(array):\n    current_index = 0\n    max_value = array[0]\n    for i in range(1, len(array)):\n        if array[i] > max_value:\n            max_value = array[i]\n            current_index = i\n    return current_index","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to find the maximum value in a normal list in Python\n\n### Input:\n\n\n### Output:\ndef max_value_index(array):\n    current_index = 0\n    max_value = array[0]\n    for i in range(1, len(array)):\n        if array[i] > max_value:\n            max_value = array[i]\n            current_index = i\n    return current_index"}
{"instruction":"Develop a function in Python that takes in a list and sorts the elements alphabetically.","input":"my_list = [\"word\", \"translate\", \"language\", \"computer\"]","output":"def sort_list(my_list):\n  my_list.sort()\n  return my_list \n\nprint(sort_list(my_list))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python that takes in a list and sorts the elements alphabetically.\n\n### Input:\nmy_list = [\"word\", \"translate\", \"language\", \"computer\"]\n\n### Output:\ndef sort_list(my_list):\n  my_list.sort()\n  return my_list \n\nprint(sort_list(my_list))"}
{"instruction":"Write a Python program to insert a given string at the beginning of all items in a list.","input":"mylist=[\"one\",\"two\",\"three\"]","output":"# Insert the given string at the beginning of all list items \nnew_list = [\"prefix_\" + item for item in mylist]\n\n# Print the new list \nprint(new_list) # Output: [\"prefix_one\", \"prefix_two\", \"prefix_three\"]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to insert a given string at the beginning of all items in a list.\n\n### Input:\nmylist=[\"one\",\"two\",\"three\"]\n\n### Output:\n# Insert the given string at the beginning of all list items \nnew_list = [\"prefix_\" + item for item in mylist]\n\n# Print the new list \nprint(new_list) # Output: [\"prefix_one\", \"prefix_two\", \"prefix_three\"]"}
{"instruction":"Create a Python program to read in a list of words and output each word with its corresponding number of vowels.","input":"","output":"def num_vowels(words):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    word_dict = {}\n    \n    for word in words:\n        word_vowels = 0\n        \n        for letter in word:\n            if letter.lower() in vowels:\n                word_vowels += 1\n                \n        word_dict[word] = word_vowels\n    \n    return word_dict\n\nwords_list = input(\"Enter a list of words: \").split()\nprint(num_vowels(words_list))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to read in a list of words and output each word with its corresponding number of vowels.\n\n### Input:\n\n\n### Output:\ndef num_vowels(words):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    word_dict = {}\n    \n    for word in words:\n        word_vowels = 0\n        \n        for letter in word:\n            if letter.lower() in vowels:\n                word_vowels += 1\n                \n        word_dict[word] = word_vowels\n    \n    return word_dict\n\nwords_list = input(\"Enter a list of words: \").split()\nprint(num_vowels(words_list))"}
{"instruction":"This code is a Python script that can be used to build, lint, and compile a JavaScript library called GraphicsJS. To use this script, run it with the appropriate command line argument. The available commands are:\n\n- without params: Prepares the environment, then lints and builds everything.\n- contrib: Prepares the build environment.\n- deps: Builds the .\/src\/deps.js file, which is needed to run the library in uncompiled mode.\n- compile: Builds the library minified js to .\/out\/ directory.\n- plain: Builds the library as one file pretty-printed js to .\/out\/ directory.\n- lint: Lints library sources.\n- autofix: Tries to fix lint errors in library sources.\n\nTo use this script, run it with one of the above commands as a command line argument.","input":"","output":"#!\/usr\/bin\/env python\n# coding=utf-8\n\nimport os\nimport sys\nimport subprocess\nimport urllib\nimport zipfile\nimport platform\nimport shlex\nimport time\nimport json\nimport datetime\n\n# =======================================================================================================================\n#           Project paths\n# =======================================================================================================================\n# COMPILER_VERSION = '20161024'\nCOMPILER_VERSION = '20180204'\nPROJECT_PATH = os.path.abspath(os.path.dirname(__file__))\nCONTRIB_PATH = os.path.join(PROJECT_PATH, 'contrib')\nCOMPILER_PATH = os.path.join(CONTRIB_PATH, 'compiler', 'closure-compiler-v%s.jar' % COMPILER_VERSION)\nSRC_PATH = os.path.join(PROJECT_PATH, 'src')\nOUT_PATH = os.path.join(PROJECT_PATH, 'out')\nCLOSURE_LIBRARY_PATH = os.path.join(CONTRIB_PATH, 'closure-library')\nCLOSURE_SOURCE_PATH = os.path.join(CLOSURE_LIBRARY_PATH, 'closure', 'goog')\nCLOSURE_LINTER_WRAPPER_PATH = os.path.join(CONTRIB_PATH, 'closure-linter-wrapper')\nCLOSURE_BIN_PATH = os.path.join(CLOSURE_LIBRARY_PATH, 'closure', 'bin')\nDEPS_WRITER_PATH = os.path.join(CLOSURE_BIN_PATH, 'build', 'depswriter.py')\n\nPYTHON = 'python'\n\n\n# =======================================================================================================================\n#                            Synchronize contributions.\n# =======================================================================================================================\ndef __has_closure_library():\n    return os.path.exists(CLOSURE_LIBRARY_PATH)\n\n\ndef __has_closure_compiler():\n    return os.path.exists(COMPILER_PATH)\n\n\ndef __has_closure_linter_wrapper():\n    return os.path.exists(CLOSURE_LINTER_WRAPPER_PATH)\n\n\ndef __has_closure_linter():\n    has_lint = True\n    try:\n        subprocess.Popen(['gjslint'], shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    except StandardError:\n        has_lint = False\n\n    return has_lint\n\n\ndef __ensure_dir_exists(path):\n    if not os.path.exists(path):\n        os.mkdir(path)\n\n\ndef __need_sync_contrib():\n    return not __has_closure_library() \\\n           or not __has_closure_compiler() \\\n           or not __has_closure_linter_wrapper() \\\n           or not __has_closure_linter()\n\n\ndef __sync_contrib():\n    t = time.time()\n    __ensure_dir_exists(CONTRIB_PATH)\n\n    subprocess.call(['git', 'submodule', 'init'])\n    subprocess.call(['git', 'submodule', 'update'])\n\n    # Download closure compiler\n    if not os.path.exists(COMPILER_PATH):\n        print 'Downloading Google Closure Compiler v.' + COMPILER_VERSION\n        try:\n            __download_and_unzip_from_http(\n                \"http:\/\/dl.google.com\/closure-compiler\/compiler-%s.zip\" % COMPILER_VERSION,\n                'compiler'\n            )\n        except StandardError as e:\n            print e\n            print 'Failed'\n            return False\n\n    # Install closure linter\n    if not __has_closure_linter():\n        if not __install_closure_linter():\n            return False\n\n    print 'Environment ready. Time spent: {:.3f}s\\n'.format(time.time() - t)\n    return True\n\n\ndef __download_and_unzip_from_http(from_url, dir_name):\n    z_obj_path = os.path.join(CONTRIB_PATH, dir_name + '.zip')\n\n    # download zip archive from url\n    if not os.path.exists(z_obj_path):\n        urllib.urlretrieve(\n            from_url,\n            z_obj_path\n        )\n\n    # extract zip archive\n    target_path = os.path.join(CONTRIB_PATH, dir_name)\n    __ensure_dir_exists(target_path)\n    z_obj = zipfile.ZipFile(z_obj_path)\n    z_obj.extractall(path=target_path)\n    z_obj.close()\n\n    # remove archive file\n    os.remove(z_obj_path)\n    return True\n\n\ndef __install_closure_linter():\n    print 'Installing Google Closure Linter v.2.3.9'\n    commands = [] if platform.system() == 'Windows' else ['sudo']\n    commands.append('easy_install')\n    commands.append('https:\/\/closure-linter.googlecode.com\/files\/closure_linter-2.3.9.tar.gz')\n    try:\n        subprocess.call(commands)\n    except StandardError:\n        print 'Failed: you should install easy_install module for python first'\n        return False\n    print 'Success'\n    return True\n\n\ndef sync_required(func):\n    def wrapper():\n        if __need_sync_contrib():\n            __sync_contrib()\n        return func()\n\n    return wrapper\n\n\n# =======================================================================================================================\n#           Build project\n# =======================================================================================================================\ndef __get_version():\n    f = open(os.path.join(PROJECT_PATH, 'package.json'));\n    package_json = json.loads(f.read());\n    f.close()\n    return package_json['version']\n\n\ndef __get_file_overview():\n    return \"\/**\\n * GraphicsJS is a lightweight JavaScript graphics library with an intuitive API, based on SVG\/VML technology.\\n * Version: %s (%s)\\n * License: BSD 3-clause\\n * Copyright: AnyChart.com %s. All rights reserved.\\n *\/\\n\" % (__get_version(), datetime.datetime.now().strftime(\"%Y-%m-%d\"), str(datetime.datetime.now().year))\n\n\ndef __getNotOptimizedCompilerArgs():\n    compilerArgs = [\n        '--compilation_level WHITESPACE_ONLY',\n        '--formatting PRETTY_PRINT'\n    ]\n    return compilerArgs\n\n\ndef __getOptimizedCompilerArgs():\n    compilerArgs = [\n        '--charset UTF-8',\n        '--compilation_level ADVANCED_OPTIMIZATIONS',\n\n        '--process_closure_primitives',\n\n        '--language_in ECMASCRIPT3',\n        '--language_out ECMASCRIPT3',\n\n        '--hide_warnings_for \"contrib\/closure-library\"',\n        '--assume_function_wrapper',\n        '--use_types_for_optimization true',\n\n        '--output_wrapper \"' + __get_file_overview() + '(function(){%output%})();\"',\n        '--env BROWSER',\n\n        '--extra_annotation_name \"includeDoc\"',\n        '--extra_annotation_name \"illustration\"',\n        '--extra_annotation_name \"illustrationDesc\"',\n        '--extra_annotation_name \"ignoreDoc\"',\n        '--extra_annotation_name \"propertyDoc\"',\n        '--extra_annotation_name \"shortDescription\"',\n\n        '--warning_level VERBOSE',\n\n        '--jscomp_warning accessControls',\n        '--jscomp_warning ambiguousFunctionDecl',\n        '--jscomp_warning checkDebuggerStatement',\n        '--jscomp_warning checkEventfulObjectDisposal',\n        '--jscomp_warning checkRegExp',\n        '--jscomp_warning checkTypes',\n        '--jscomp_warning checkVars',\n        '--jscomp_warning closureDepMethodUsageChecks',\n        '--jscomp_warning conformanceViolations',\n        '--jscomp_warning const',\n        '--jscomp_warning constantProperty',\n        '--jscomp_warning deprecated',\n        '--jscomp_warning deprecatedAnnotations',\n        '--jscomp_warning duplicate',\n        '--jscomp_warning duplicateMessage',\n        '--jscomp_warning es3',\n        '--jscomp_warning es5Strict',\n        '--jscomp_warning externsValidation',\n        '--jscomp_off extraRequire',\n        '--jscomp_warning fileoverviewTags',\n        '--jscomp_warning functionParams',\n        '--jscomp_warning globalThis',\n        '--jscomp_warning internetExplorerChecks',\n        '--jscomp_warning invalidCasts',\n        '--jscomp_warning misplacedTypeAnnotation',\n        '--jscomp_warning missingGetCssName',\n        '--jscomp_off missingOverride',\n        '--jscomp_warning missingPolyfill',\n        '--jscomp_warning missingProperties',\n        '--jscomp_warning missingProvide',\n        '--jscomp_warning missingRequire',\n        '--jscomp_warning missingReturn',\n        '--jscomp_warning msgDescriptions',\n        '--jscomp_off newCheckTypes',\n        '--jscomp_off newCheckTypesExtraChecks',\n        '--jscomp_off nonStandardJsDocs',\n        '--jscomp_off reportUnknownTypes',\n        '--jscomp_warning suspiciousCode',\n        '--jscomp_warning strictModuleDepCheck',\n        '--jscomp_warning typeInvalidation',\n        '--jscomp_warning undefinedNames',\n        '--jscomp_warning undefinedVars',\n        '--jscomp_warning unknownDefines',\n        '--jscomp_off unusedLocalVariables',\n        '--jscomp_off unusedPrivateMembers',\n        '--jscomp_warning uselessCode',\n        '--jscomp_off useOfGoogBase',\n        '--jscomp_warning underscore',\n        '--jscomp_warning visibility',\n        '--jscomp_warning lintChecks',\n    ]\n    return compilerArgs\n\n\ndef __getDefaultCompilerArgs(outputFile):\n    result = [\n        'java -jar',\n        COMPILER_PATH,\n        '--js=\"%s\"' % os.path.join(SRC_PATH, '**.js'),\n        '--js=\"%s\"' % os.path.join(CLOSURE_SOURCE_PATH, '**.js'),\n        '--define \"goog.DEBUG=false\"',\n        '--js_output_file ' + outputFile,\n        '--dependency_mode=STRICT',\n        '--entry_point acgraphentry',\n        '--hide_warnings_for=\"goog\"'\n    ]\n    return result\n\n\n@sync_required\ndef __compileBinary():\n    __ensure_dir_exists(OUT_PATH)\n\n    t = time.time()\n    outputFileName = os.path.join(OUT_PATH, 'graphics.min.js')\n    print 'Building optimized Graphics library js to ' + outputFileName\n    commands = __getDefaultCompilerArgs(outputFileName) + \\\n               __getOptimizedCompilerArgs()\n    success = (__call_compiler(commands) == 0)\n    res = 'Success' if success else 'Failed'\n    print res + \". Time spent: {:.3f}s\\n\".format(time.time() - t)\n\n    return success\n\n\n@sync_required\ndef __compilePlain():\n    __ensure_dir_exists(OUT_PATH)\n\n    t = time.time()\n    outputFileName = os.path.join(OUT_PATH, 'graphics.js')\n    print 'Building plain Graphics library js to ' + outputFileName\n    commands = __getDefaultCompilerArgs(outputFileName) + \\\n               __getNotOptimizedCompilerArgs()\n    success = (__call_compiler(commands) == 0)\n    res = 'Success' if success else 'Failed'\n    print res + \". Time spent: {:.3f}s\\n\".format(time.time() - t)\n\n    return success\n\n\ndef __call_compiler(commands):\n    commands = \" \".join(commands).replace('\\\\', '\\\\\\\\')\n    commands = shlex.split(commands)\n    # print commands\n    p = subprocess.Popen(commands, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    (output, err) = p.communicate()\n    retcode = p.poll()\n    if len(output) > 0:\n        print output\n    return retcode\n\n\n# =======================================================================================================================\n#           Build deps\n# =======================================================================================================================\n@sync_required\ndef __buildDepsFromCommandLine():\n    t = time.time()\n    output_file = os.path.join(SRC_PATH, 'deps.js')\n    success = (__callDepsWriter(SRC_PATH, output_file, 'whole project') == 0)\n    res = 'Success' if success else 'Failed'\n    print res + \". Time spent: {:.3f}s\\n\".format(time.time() - t)\n    return success\n\n\ndef __callDepsWriter(root, output_file, bundle_name):\n    print 'Writing deps file to ' + output_file\n    return subprocess.call([\n        PYTHON,\n        DEPS_WRITER_PATH,\n        '--root_with_prefix=' + root + ' ' + os.path.relpath(root, CLOSURE_SOURCE_PATH),\n        '--output_file=' + output_file\n    ])\n\n\n# =======================================================================================================================\n#                            Linter.\n# =======================================================================================================================\n@sync_required\ndef __lintFromCommandLine():\n    t = time.time()\n    success = (__callLinter(SRC_PATH) == 0)\n    res = 'Success' if success else 'Failed'\n    print res + \". Time spent: {:.3f}s\\n\".format(time.time() - t)\n    return success\n\n\ndef __callLinter(root):\n    print 'Linting ' + root + ' directory'\n    return subprocess.call([\n        PYTHON,\n        os.path.join(CLOSURE_LINTER_WRAPPER_PATH, 'gjslint.py'),\n        '--flagfile',\n        'gjslint.cfg',\n        '-r',\n        root\n    ])\n\n\n# =======================================================================================================================\n#                            JSDoc auto fix.\n# =======================================================================================================================\n@sync_required\ndef __autofixFromCommandLine():\n    t = time.time()\n    success = (__callAutoFix(SRC_PATH) == 0)\n    res = 'Success' if success else 'Failed'\n    print res + \". Time spent: {:.3f}s\\n\".format(time.time() - t)\n    return res\n\n\ndef __callAutoFix(root):\n    print 'Trying to fix ' + root + ' directory'\n    return subprocess.call([\n        PYTHON,\n        os.path.join(CLOSURE_LINTER_WRAPPER_PATH, 'fixjsstyle.py'),\n        '--flagfile',\n        'gjslint.cfg',\n        '-r',\n        root\n    ])\n\n\n# =======================================================================================================================\n#                            Help\n# =======================================================================================================================\ndef __printHelp():\n    print \"Build script commands:\\n\" \\\n          \"\\n\" \\\n          \"without params   Prepares the environment, than lints and builds everything.\\n\" \\\n          \"\\n\" \\\n          \"contrib          Prepares buildin environment.\\n\" \\\n          \"\\n\" \\\n          \"deps             Build .\/src\/deps.js file, needed to run the library in uncompiled mode.\\n\" \\\n          \"\\n\" \\\n          \"compile          Builds the library minified js to .\/out\/ directory.\\n\" \\\n          \"\\n\" \\\n          \"plain            Builds the library as one file pretty-printed js to .\/out\/ directory.\\n\" \\\n          \"\\n\" \\\n          \"lint             Lints library sources.\\n\" \\\n          \"\\n\" \\\n          \"autofix          Tries to fix lint errors in library sources.\\n\"\n\n\n# =======================================================================================================================\n#                            Main\n# =======================================================================================================================\ndef __execMainScript():\n    print ''\n    args = sys.argv\n    if len(args) == 1:\n        success = __sync_contrib() and \\\n                  __lintFromCommandLine() and \\\n                  __buildDepsFromCommandLine() and \\\n                  __compilePlain() and \\\n                  __compileBinary()\n    elif args[1] == 'contrib':\n        success = __sync_contrib()\n    elif args[1] == 'compile':\n        success = __compileBinary()\n    elif args[1] == 'plain':\n        success = __compilePlain()\n    elif args[1] == 'deps':\n        success = __buildDepsFromCommandLine()\n    elif args[1] == 'lint':\n        success = __lintFromCommandLine()\n    elif args[1] == 'autofix':\n        success = __autofixFromCommandLine()\n    else:\n        __printHelp()\n        success = True\n    return success\n\n\nif __name__ == '__main__':\n    try:\n        success = __execMainScript()\n    except StandardError as e:\n        print e\n        success = False\n    sys.exit(0 if success else 1)\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a Python script that can be used to build, lint, and compile a JavaScript library called GraphicsJS. To use this script, run it with the appropriate command line argument. The available commands are:\n\n- without params: Prepares the environment, then lints and builds everything.\n- contrib: Prepares the build environment.\n- deps: Builds the .\/src\/deps.js file, which is needed to run the library in uncompiled mode.\n- compile: Builds the library minified js to .\/out\/ directory.\n- plain: Builds the library as one file pretty-printed js to .\/out\/ directory.\n- lint: Lints library sources.\n- autofix: Tries to fix lint errors in library sources.\n\nTo use this script, run it with one of the above commands as a command line argument.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n# coding=utf-8\n\nimport os\nimport sys\nimport subprocess\nimport urllib\nimport zipfile\nimport platform\nimport shlex\nimport time\nimport json\nimport datetime\n\n# =======================================================================================================================\n#           Project paths\n# =======================================================================================================================\n# COMPILER_VERSION = '20161024'\nCOMPILER_VERSION = '20180204'\nPROJECT_PATH = os.path.abspath(os.path.dirname(__file__))\nCONTRIB_PATH = os.path.join(PROJECT_PATH, 'contrib')\nCOMPILER_PATH = os.path.join(CONTRIB_PATH, 'compiler', 'closure-compiler-v%s.jar' % COMPILER_VERSION)\nSRC_PATH = os.path.join(PROJECT_PATH, 'src')\nOUT_PATH = os.path.join(PROJECT_PATH, 'out')\nCLOSURE_LIBRARY_PATH = os.path.join(CONTRIB_PATH, 'closure-library')\nCLOSURE_SOURCE_PATH = os.path.join(CLOSURE_LIBRARY_PATH, 'closure', 'goog')\nCLOSURE_LINTER_WRAPPER_PATH = os.path.join(CONTRIB_PATH, 'closure-linter-wrapper')\nCLOSURE_BIN_PATH = os.path.join(CLOSURE_LIBRARY_PATH, 'closure', 'bin')\nDEPS_WRITER_PATH = os.path.join(CLOSURE_BIN_PATH, 'build', 'depswriter.py')\n\nPYTHON = 'python'\n\n\n# =======================================================================================================================\n#                            Synchronize contributions.\n# =======================================================================================================================\ndef __has_closure_library():\n    return os.path.exists(CLOSURE_LIBRARY_PATH)\n\n\ndef __has_closure_compiler():\n    return os.path.exists(COMPILER_PATH)\n\n\ndef __has_closure_linter_wrapper():\n    return os.path.exists(CLOSURE_LINTER_WRAPPER_PATH)\n\n\ndef __has_closure_linter():\n    has_lint = True\n    try:\n        subprocess.Popen(['gjslint'], shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    except StandardError:\n        has_lint = False\n\n    return has_lint\n\n\ndef __ensure_dir_exists(path):\n    if not os.path.exists(path):\n        os.mkdir(path)\n\n\ndef __need_sync_contrib():\n    return not __has_closure_library() \\\n           or not __has_closure_compiler() \\\n           or not __has_closure_linter_wrapper() \\\n           or not __has_closure_linter()\n\n\ndef __sync_contrib():\n    t = time.time()\n    __ensure_dir_exists(CONTRIB_PATH)\n\n    subprocess.call(['git', 'submodule', 'init'])\n    subprocess.call(['git', 'submodule', 'update'])\n\n    # Download closure compiler\n    if not os.path.exists(COMPILER_PATH):\n        print 'Downloading Google Closure Compiler v.' + COMPILER_VERSION\n        try:\n            __download_and_unzip_from_http(\n                \"http:\/\/dl.google.com\/closure-compiler\/compiler-%s.zip\" % COMPILER_VERSION,\n                'compiler'\n            )\n        except StandardError as e:\n            print e\n            print 'Failed'\n            return False\n\n    # Install closure linter\n    if not __has_closure_linter():\n        if not __install_closure_linter():\n            return False\n\n    print 'Environment ready. Time spent: {:.3f}s\\n'.format(time.time() - t)\n    return True\n\n\ndef __download_and_unzip_from_http(from_url, dir_name):\n    z_obj_path = os.path.join(CONTRIB_PATH, dir_name + '.zip')\n\n    # download zip archive from url\n    if not os.path.exists(z_obj_path):\n        urllib.urlretrieve(\n            from_url,\n            z_obj_path\n        )\n\n    # extract zip archive\n    target_path = os.path.join(CONTRIB_PATH, dir_name)\n    __ensure_dir_exists(target_path)\n    z_obj = zipfile.ZipFile(z_obj_path)\n    z_obj.extractall(path=target_path)\n    z_obj.close()\n\n    # remove archive file\n    os.remove(z_obj_path)\n    return True\n\n\ndef __install_closure_linter():\n    print 'Installing Google Closure Linter v.2.3.9'\n    commands = [] if platform.system() == 'Windows' else ['sudo']\n    commands.append('easy_install')\n    commands.append('https:\/\/closure-linter.googlecode.com\/files\/closure_linter-2.3.9.tar.gz')\n    try:\n        subprocess.call(commands)\n    except StandardError:\n        print 'Failed: you should install easy_install module for python first'\n        return False\n    print 'Success'\n    return True\n\n\ndef sync_required(func):\n    def wrapper():\n        if __need_sync_contrib():\n            __sync_contrib()\n        return func()\n\n    return wrapper\n\n\n# =======================================================================================================================\n#           Build project\n# =======================================================================================================================\ndef __get_version():\n    f = open(os.path.join(PROJECT_PATH, 'package.json'));\n    package_json = json.loads(f.read());\n    f.close()\n    return package_json['version']\n\n\ndef __get_file_overview():\n    return \"\/**\\n * GraphicsJS is a lightweight JavaScript graphics library with an intuitive API, based on SVG\/VML technology.\\n * Version: %s (%s)\\n * License: BSD 3-clause\\n * Copyright: AnyChart.com %s. All rights reserved.\\n *\/\\n\" % (__get_version(), datetime.datetime.now().strftime(\"%Y-%m-%d\"), str(datetime.datetime.now().year))\n\n\ndef __getNotOptimizedCompilerArgs():\n    compilerArgs = [\n        '--compilation_level WHITESPACE_ONLY',\n        '--formatting PRETTY_PRINT'\n    ]\n    return compilerArgs\n\n\ndef __getOptimizedCompilerArgs():\n    compilerArgs = [\n        '--charset UTF-8',\n        '--compilation_level ADVANCED_OPTIMIZATIONS',\n\n        '--process_closure_primitives',\n\n        '--language_in ECMASCRIPT3',\n        '--language_out ECMASCRIPT3',\n\n        '--hide_warnings_for \"contrib\/closure-library\"',\n        '--assume_function_wrapper',\n        '--use_types_for_optimization true',\n\n        '--output_wrapper \"' + __get_file_overview() + '(function(){%output%})();\"',\n        '--env BROWSER',\n\n        '--extra_annotation_name \"includeDoc\"',\n        '--extra_annotation_name \"illustration\"',\n        '--extra_annotation_name \"illustrationDesc\"',\n        '--extra_annotation_name \"ignoreDoc\"',\n        '--extra_annotation_name \"propertyDoc\"',\n        '--extra_annotation_name \"shortDescription\"',\n\n        '--warning_level VERBOSE',\n\n        '--jscomp_warning accessControls',\n        '--jscomp_warning ambiguousFunctionDecl',\n        '--jscomp_warning checkDebuggerStatement',\n        '--jscomp_warning checkEventfulObjectDisposal',\n        '--jscomp_warning checkRegExp',\n        '--jscomp_warning checkTypes',\n        '--jscomp_warning checkVars',\n        '--jscomp_warning closureDepMethodUsageChecks',\n        '--jscomp_warning conformanceViolations',\n        '--jscomp_warning const',\n        '--jscomp_warning constantProperty',\n        '--jscomp_warning deprecated',\n        '--jscomp_warning deprecatedAnnotations',\n        '--jscomp_warning duplicate',\n        '--jscomp_warning duplicateMessage',\n        '--jscomp_warning es3',\n        '--jscomp_warning es5Strict',\n        '--jscomp_warning externsValidation',\n        '--jscomp_off extraRequire',\n        '--jscomp_warning fileoverviewTags',\n        '--jscomp_warning functionParams',\n        '--jscomp_warning globalThis',\n        '--jscomp_warning internetExplorerChecks',\n        '--jscomp_warning invalidCasts',\n        '--jscomp_warning misplacedTypeAnnotation',\n        '--jscomp_warning missingGetCssName',\n        '--jscomp_off missingOverride',\n        '--jscomp_warning missingPolyfill',\n        '--jscomp_warning missingProperties',\n        '--jscomp_warning missingProvide',\n        '--jscomp_warning missingRequire',\n        '--jscomp_warning missingReturn',\n        '--jscomp_warning msgDescriptions',\n        '--jscomp_off newCheckTypes',\n        '--jscomp_off newCheckTypesExtraChecks',\n        '--jscomp_off nonStandardJsDocs',\n        '--jscomp_off reportUnknownTypes',\n        '--jscomp_warning suspiciousCode',\n        '--jscomp_warning strictModuleDepCheck',\n        '--jscomp_warning typeInvalidation',\n        '--jscomp_warning undefinedNames',\n        '--jscomp_warning undefinedVars',\n        '--jscomp_warning unknownDefines',\n        '--jscomp_off unusedLocalVariables',\n        '--jscomp_off unusedPrivateMembers',\n        '--jscomp_warning uselessCode',\n        '--jscomp_off useOfGoogBase',\n        '--jscomp_warning underscore',\n        '--jscomp_warning visibility',\n        '--jscomp_warning lintChecks',\n    ]\n    return compilerArgs\n\n\ndef __getDefaultCompilerArgs(outputFile):\n    result = [\n        'java -jar',\n        COMPILER_PATH,\n        '--js=\"%s\"' % os.path.join(SRC_PATH, '**.js'),\n        '--js=\"%s\"' % os.path.join(CLOSURE_SOURCE_PATH, '**.js'),\n        '--define \"goog.DEBUG=false\"',\n        '--js_output_file ' + outputFile,\n        '--dependency_mode=STRICT',\n        '--entry_point acgraphentry',\n        '--hide_warnings_for=\"goog\"'\n    ]\n    return result\n\n\n@sync_required\ndef __compileBinary():\n    __ensure_dir_exists(OUT_PATH)\n\n    t = time.time()\n    outputFileName = os.path.join(OUT_PATH, 'graphics.min.js')\n    print 'Building optimized Graphics library js to ' + outputFileName\n    commands = __getDefaultCompilerArgs(outputFileName) + \\\n               __getOptimizedCompilerArgs()\n    success = (__call_compiler(commands) == 0)\n    res = 'Success' if success else 'Failed'\n    print res + \". Time spent: {:.3f}s\\n\".format(time.time() - t)\n\n    return success\n\n\n@sync_required\ndef __compilePlain():\n    __ensure_dir_exists(OUT_PATH)\n\n    t = time.time()\n    outputFileName = os.path.join(OUT_PATH, 'graphics.js')\n    print 'Building plain Graphics library js to ' + outputFileName\n    commands = __getDefaultCompilerArgs(outputFileName) + \\\n               __getNotOptimizedCompilerArgs()\n    success = (__call_compiler(commands) == 0)\n    res = 'Success' if success else 'Failed'\n    print res + \". Time spent: {:.3f}s\\n\".format(time.time() - t)\n\n    return success\n\n\ndef __call_compiler(commands):\n    commands = \" \".join(commands).replace('\\\\', '\\\\\\\\')\n    commands = shlex.split(commands)\n    # print commands\n    p = subprocess.Popen(commands, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    (output, err) = p.communicate()\n    retcode = p.poll()\n    if len(output) > 0:\n        print output\n    return retcode\n\n\n# =======================================================================================================================\n#           Build deps\n# =======================================================================================================================\n@sync_required\ndef __buildDepsFromCommandLine():\n    t = time.time()\n    output_file = os.path.join(SRC_PATH, 'deps.js')\n    success = (__callDepsWriter(SRC_PATH, output_file, 'whole project') == 0)\n    res = 'Success' if success else 'Failed'\n    print res + \". Time spent: {:.3f}s\\n\".format(time.time() - t)\n    return success\n\n\ndef __callDepsWriter(root, output_file, bundle_name):\n    print 'Writing deps file to ' + output_file\n    return subprocess.call([\n        PYTHON,\n        DEPS_WRITER_PATH,\n        '--root_with_prefix=' + root + ' ' + os.path.relpath(root, CLOSURE_SOURCE_PATH),\n        '--output_file=' + output_file\n    ])\n\n\n# =======================================================================================================================\n#                            Linter.\n# =======================================================================================================================\n@sync_required\ndef __lintFromCommandLine():\n    t = time.time()\n    success = (__callLinter(SRC_PATH) == 0)\n    res = 'Success' if success else 'Failed'\n    print res + \". Time spent: {:.3f}s\\n\".format(time.time() - t)\n    return success\n\n\ndef __callLinter(root):\n    print 'Linting ' + root + ' directory'\n    return subprocess.call([\n        PYTHON,\n        os.path.join(CLOSURE_LINTER_WRAPPER_PATH, 'gjslint.py'),\n        '--flagfile',\n        'gjslint.cfg',\n        '-r',\n        root\n    ])\n\n\n# =======================================================================================================================\n#                            JSDoc auto fix.\n# =======================================================================================================================\n@sync_required\ndef __autofixFromCommandLine():\n    t = time.time()\n    success = (__callAutoFix(SRC_PATH) == 0)\n    res = 'Success' if success else 'Failed'\n    print res + \". Time spent: {:.3f}s\\n\".format(time.time() - t)\n    return res\n\n\ndef __callAutoFix(root):\n    print 'Trying to fix ' + root + ' directory'\n    return subprocess.call([\n        PYTHON,\n        os.path.join(CLOSURE_LINTER_WRAPPER_PATH, 'fixjsstyle.py'),\n        '--flagfile',\n        'gjslint.cfg',\n        '-r',\n        root\n    ])\n\n\n# =======================================================================================================================\n#                            Help\n# =======================================================================================================================\ndef __printHelp():\n    print \"Build script commands:\\n\" \\\n          \"\\n\" \\\n          \"without params   Prepares the environment, than lints and builds everything.\\n\" \\\n          \"\\n\" \\\n          \"contrib          Prepares buildin environment.\\n\" \\\n          \"\\n\" \\\n          \"deps             Build .\/src\/deps.js file, needed to run the library in uncompiled mode.\\n\" \\\n          \"\\n\" \\\n          \"compile          Builds the library minified js to .\/out\/ directory.\\n\" \\\n          \"\\n\" \\\n          \"plain            Builds the library as one file pretty-printed js to .\/out\/ directory.\\n\" \\\n          \"\\n\" \\\n          \"lint             Lints library sources.\\n\" \\\n          \"\\n\" \\\n          \"autofix          Tries to fix lint errors in library sources.\\n\"\n\n\n# =======================================================================================================================\n#                            Main\n# =======================================================================================================================\ndef __execMainScript():\n    print ''\n    args = sys.argv\n    if len(args) == 1:\n        success = __sync_contrib() and \\\n                  __lintFromCommandLine() and \\\n                  __buildDepsFromCommandLine() and \\\n                  __compilePlain() and \\\n                  __compileBinary()\n    elif args[1] == 'contrib':\n        success = __sync_contrib()\n    elif args[1] == 'compile':\n        success = __compileBinary()\n    elif args[1] == 'plain':\n        success = __compilePlain()\n    elif args[1] == 'deps':\n        success = __buildDepsFromCommandLine()\n    elif args[1] == 'lint':\n        success = __lintFromCommandLine()\n    elif args[1] == 'autofix':\n        success = __autofixFromCommandLine()\n    else:\n        __printHelp()\n        success = True\n    return success\n\n\nif __name__ == '__main__':\n    try:\n        success = __execMainScript()\n    except StandardError as e:\n        print e\n        success = False\n    sys.exit(0 if success else 1)\n"}
{"instruction":"Code a function in Python to find the Fibonacci number at a given index.","input":"index = 5","output":"def fibonacci_at_index(index): \n    if index < 0: \n        return -1\n    if index == 0 or index == 1: \n        return index \n    return fibonacci_at_index(index - 1) + fibonacci_at_index(index - 2) \n\nprint(fibonacci_at_index(index)) # 5","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a function in Python to find the Fibonacci number at a given index.\n\n### Input:\nindex = 5\n\n### Output:\ndef fibonacci_at_index(index): \n    if index < 0: \n        return -1\n    if index == 0 or index == 1: \n        return index \n    return fibonacci_at_index(index - 1) + fibonacci_at_index(index - 2) \n\nprint(fibonacci_at_index(index)) # 5"}
{"instruction":"Write a function for a Python web application that handles authentication. The function should verify user credentials and generate an access token.","input":"Not applicable","output":"import uuid\nfrom datetime import datetime, timedelta\n\ndef authenticate(username, password):\n  # Validate user credentials\n  # Generate an access token\n  access_token = uuid.uuid4().hex\n  expires = datetime.utcnow() + timedelta(minutes=60)\n  return access_token, expires\n\n# Usage\naccess_token, expires = authenticate('username', 'password')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function for a Python web application that handles authentication. The function should verify user credentials and generate an access token.\n\n### Input:\nNot applicable\n\n### Output:\nimport uuid\nfrom datetime import datetime, timedelta\n\ndef authenticate(username, password):\n  # Validate user credentials\n  # Generate an access token\n  access_token = uuid.uuid4().hex\n  expires = datetime.utcnow() + timedelta(minutes=60)\n  return access_token, expires\n\n# Usage\naccess_token, expires = authenticate('username', 'password')"}
{"instruction":"Write a Python program to replace all the white spaces in a given string with the '*' character.","input":"str = \u201cThis is a sample string\u201d","output":"str = 'This is a sample string'\n\nnew_str = str.replace(' ', '*')\n\nprint(new_str) \/\/ This*is*a*sample*string","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to replace all the white spaces in a given string with the '*' character.\n\n### Input:\nstr = \u201cThis is a sample string\u201d\n\n### Output:\nstr = 'This is a sample string'\n\nnew_str = str.replace(' ', '*')\n\nprint(new_str) \/\/ This*is*a*sample*string"}
{"instruction":"Create a basic program in Python that takes in two numbers and calculates the product.","input":"int a = 5;\nint b = 10;","output":"def product(a, b):\n \treturn a * b\n \nprint(product(5, 10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic program in Python that takes in two numbers and calculates the product.\n\n### Input:\nint a = 5;\nint b = 10;\n\n### Output:\ndef product(a, b):\n \treturn a * b\n \nprint(product(5, 10))"}
{"instruction":"Write a Python program to compute the readability score of a given text.","input":"text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"","output":"def compute_readability(text):\n    \"\"\"Compute the readability score of a given text\"\"\"\n    words = 0\n    sentences = 0\n    syllables = 0\n    for word in text.split():\n        words += 1\n        syllables += count_syllables(word)\n\n    for sentence in text.split(\".\"):\n        sentences += 1\n\n    score = 206.835 - (1.015 * (words \/ sentences)) - (84.6 * (syllables \/ words))\n    return score\n\ndef count_syllables(word):\n    \"\"\"Count the number of syllables in a given word\"\"\"\n    vowels = \"aeiouAEIOU\"\n    syllables = 0\n    for letter in word:\n        if letter in vowels:\n            syllables += 1\n    if len(word) >= 3 and word[-3:] == \"ely\" or word[-2:] == \"es\":\n        syllables -= 1\n    return syllables","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compute the readability score of a given text.\n\n### Input:\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n\n### Output:\ndef compute_readability(text):\n    \"\"\"Compute the readability score of a given text\"\"\"\n    words = 0\n    sentences = 0\n    syllables = 0\n    for word in text.split():\n        words += 1\n        syllables += count_syllables(word)\n\n    for sentence in text.split(\".\"):\n        sentences += 1\n\n    score = 206.835 - (1.015 * (words \/ sentences)) - (84.6 * (syllables \/ words))\n    return score\n\ndef count_syllables(word):\n    \"\"\"Count the number of syllables in a given word\"\"\"\n    vowels = \"aeiouAEIOU\"\n    syllables = 0\n    for letter in word:\n        if letter in vowels:\n            syllables += 1\n    if len(word) >= 3 and word[-3:] == \"ely\" or word[-2:] == \"es\":\n        syllables -= 1\n    return syllables"}
{"instruction":"Write a python function to parse a list of strings and extract the date that appears at the end of the strings?","input":"list_of_strings = [\"April 11th, 2019\", \"July 2nd, 2018\", \"October 16th, 2012\"]","output":"def parse_list_of_strings(list_of_strings):\n    date_list = []\n    for string in list_of_strings:\n        date_to_add = datetime.strptime(string, '%B %dth, %Y')\n        date_list.append(date_to_add)\n    return date_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python function to parse a list of strings and extract the date that appears at the end of the strings?\n\n### Input:\nlist_of_strings = [\"April 11th, 2019\", \"July 2nd, 2018\", \"October 16th, 2012\"]\n\n### Output:\ndef parse_list_of_strings(list_of_strings):\n    date_list = []\n    for string in list_of_strings:\n        date_to_add = datetime.strptime(string, '%B %dth, %Y')\n        date_list.append(date_to_add)\n    return date_list"}
{"instruction":"Develop an algorithm to check if a string S is a palindrome in Python.","input":"String S = \"racecar\"","output":"def is_palindrome(s):\n    # Convert strings to lowercase\n    s = s.lower()\n \n    # Iterate through middle of string with indices \n    for i in range(len(s) \/\/ 2):\n        if s[i] != s[len(s) - i - 1]:\n            return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm to check if a string S is a palindrome in Python.\n\n### Input:\nString S = \"racecar\"\n\n### Output:\ndef is_palindrome(s):\n    # Convert strings to lowercase\n    s = s.lower()\n \n    # Iterate through middle of string with indices \n    for i in range(len(s) \/\/ 2):\n        if s[i] != s[len(s) - i - 1]:\n            return False\n    return True"}
{"instruction":"Write a Python script to parse a given string and construct a dictionary from its content.","input":"\"bio: John Smith, age: 32\"","output":"def parse_string(s):\n    info = s.split(\", \")\n\n    result = {}\n    for item in info:\n        k, v = item.split(\": \")\n        result[k] = v\n\n    return result\n\nresult = parse_string(\"bio: John Smith, age: 32\")\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to parse a given string and construct a dictionary from its content.\n\n### Input:\n\"bio: John Smith, age: 32\"\n\n### Output:\ndef parse_string(s):\n    info = s.split(\", \")\n\n    result = {}\n    for item in info:\n        k, v = item.split(\": \")\n        result[k] = v\n\n    return result\n\nresult = parse_string(\"bio: John Smith, age: 32\")\nprint(result)"}
{"instruction":"Create a Python script to scrape a given web page and store the data in a dictionary.","input":"The URL: https:\/\/en.wikipedia.org\/wiki\/Python_(programming_language)","output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = args[0]\nresponse = requests.get(url)\ndata = {}\n\nif response.status_code == 200:\n html = response.text\n soup = BeautifulSoup(html, 'html.parser')\n for heading in soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']):\n data[heading.text] = heading.next_sibling.next_sibling.text\n\nprint(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to scrape a given web page and store the data in a dictionary.\n\n### Input:\nThe URL: https:\/\/en.wikipedia.org\/wiki\/Python_(programming_language)\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = args[0]\nresponse = requests.get(url)\ndata = {}\n\nif response.status_code == 200:\n html = response.text\n soup = BeautifulSoup(html, 'html.parser')\n for heading in soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']):\n data[heading.text] = heading.next_sibling.next_sibling.text\n\nprint(data)"}
{"instruction":"Suggest a completion for the following Python code so that it prints the characters in a string in reverse order.","input":"my_str = \"Hello World\"\n\nfor i in","output":"my_str = \"Hello World\"\n\nfor i in range(len(my_str)-1, -1, -1):\n    print(my_str[i], end=\"\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a completion for the following Python code so that it prints the characters in a string in reverse order.\n\n### Input:\nmy_str = \"Hello World\"\n\nfor i in\n\n### Output:\nmy_str = \"Hello World\"\n\nfor i in range(len(my_str)-1, -1, -1):\n    print(my_str[i], end=\"\")"}
{"instruction":"Design a program in Python which generates a random mathematical equation with two numbers.","input":"","output":"import random\n\ndef generateRandomEquation():\n    num1 = random.randint(0,9)\n    num2 = random.randint(0,9)\n    op = random.choice(['+','-','*','\/'])\n    equation = str(num1) + op + str(num2)\n    return equation\n\nprint(generateRandomEquation())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python which generates a random mathematical equation with two numbers.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generateRandomEquation():\n    num1 = random.randint(0,9)\n    num2 = random.randint(0,9)\n    op = random.choice(['+','-','*','\/'])\n    equation = str(num1) + op + str(num2)\n    return equation\n\nprint(generateRandomEquation())"}
{"instruction":"Generate a predict function in Python to predict the net price of a car given its features such as price, make, model, age, etc.","input":"The following data, \nPrice: 15000\nMake: Ford\nModel: Focus\nAge: 5\nDistance: 20,000","output":"import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nfeatures = [[15000, 'Ford', 'Focus', 5, 20000]]\n\nmodel = LinearRegression()\n\n# Train the model with the given data\nmodel.fit(features, [14500])\n\n# Define the predict function\ndef predict(price, make, model, age, distance):\n    inputs = [[price, make, model, age, distance]]\n    return model.predict(inputs)[0]\n    \nnet_price = predict(15000, 'Ford', 'Focus', 5, 20000)\nprint(net_price)   #14500","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a predict function in Python to predict the net price of a car given its features such as price, make, model, age, etc.\n\n### Input:\nThe following data, \nPrice: 15000\nMake: Ford\nModel: Focus\nAge: 5\nDistance: 20,000\n\n### Output:\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nfeatures = [[15000, 'Ford', 'Focus', 5, 20000]]\n\nmodel = LinearRegression()\n\n# Train the model with the given data\nmodel.fit(features, [14500])\n\n# Define the predict function\ndef predict(price, make, model, age, distance):\n    inputs = [[price, make, model, age, distance]]\n    return model.predict(inputs)[0]\n    \nnet_price = predict(15000, 'Ford', 'Focus', 5, 20000)\nprint(net_price)   #14500"}
{"instruction":"Design a Python program to search for a specific word in a given sentence","input":"","output":"def search_word(sentence, word):\n    words = sentence.split(\" \")\n\n    if word in words:\n        return True\n    else:\n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to search for a specific word in a given sentence\n\n### Input:\n\n\n### Output:\ndef search_word(sentence, word):\n    words = sentence.split(\" \")\n\n    if word in words:\n        return True\n    else:\n        return False"}
{"instruction":"Create a Python program to generate strings of random alphabets.","input":"Not applicable","output":"import random\n\ndef generator(length):\n    alphabets = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    return ''.join(random.choice(alphabets) for i in range(length))\n\nprint(generator(10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate strings of random alphabets.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\ndef generator(length):\n    alphabets = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    return ''.join(random.choice(alphabets) for i in range(length))\n\nprint(generator(10))"}
{"instruction":"Edit a Python program to modify a numpy array into a pandas Dataframe.","input":"Numpy Array","output":"import numpy as np\nimport pandas as pd\n\n# Load the data\ndata = np.load('data.npy')\n\n# Create the pandas DataFrame\ndf = pd.DataFrame(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit a Python program to modify a numpy array into a pandas Dataframe.\n\n### Input:\nNumpy Array\n\n### Output:\nimport numpy as np\nimport pandas as pd\n\n# Load the data\ndata = np.load('data.npy')\n\n# Create the pandas DataFrame\ndf = pd.DataFrame(data)"}
{"instruction":"Develop Python code to reverse an array.","input":"arr = [1, 2, 3, 4, 5]","output":"def reverse_array(arr): \n    start = 0\n    end = len(arr) - 1\n      \n    while start < end: \n        arr[start], arr[end] = arr[end], arr[start] \n        start += 1\n        end -= 1\n    return arr \n  \n# Driver code \narr = [1, 2, 3, 4, 5] \nprint(reverse_array(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop Python code to reverse an array.\n\n### Input:\narr = [1, 2, 3, 4, 5]\n\n### Output:\ndef reverse_array(arr): \n    start = 0\n    end = len(arr) - 1\n      \n    while start < end: \n        arr[start], arr[end] = arr[end], arr[start] \n        start += 1\n        end -= 1\n    return arr \n  \n# Driver code \narr = [1, 2, 3, 4, 5] \nprint(reverse_array(arr))"}
{"instruction":"Create a python program to filter a list of numbers to include only the prime numbers","input":"[2, 3, 7, 11, 12, 15]","output":"def isPrime(n): \n    for i in range(2,n): \n        if n % i == 0: \n            return False\n    return True\n\nnumbers = [2, 3, 7, 11, 12, 15] \nprimes = filter(isPrime, numbers)\nprint('Prime numbers are:') \nprint(list(primes))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to filter a list of numbers to include only the prime numbers\n\n### Input:\n[2, 3, 7, 11, 12, 15]\n\n### Output:\ndef isPrime(n): \n    for i in range(2,n): \n        if n % i == 0: \n            return False\n    return True\n\nnumbers = [2, 3, 7, 11, 12, 15] \nprimes = filter(isPrime, numbers)\nprint('Prime numbers are:') \nprint(list(primes))"}
{"instruction":"Design a data structure in Python that can store employee information.","input":"","output":"class Employee:\n  \"\"\"This class stores the information of an employee\"\"\"\n\n  def __init__(self, name, id, salary, department):\n    self.name = name\n    self.id = id\n    self.salary = salary\n    self.department = department","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a data structure in Python that can store employee information.\n\n### Input:\n\n\n### Output:\nclass Employee:\n  \"\"\"This class stores the information of an employee\"\"\"\n\n  def __init__(self, name, id, salary, department):\n    self.name = name\n    self.id = id\n    self.salary = salary\n    self.department = department"}
{"instruction":"Write a python program to classify a Web page into one of three categories: Business\/Industry, Arts\/Entertainment, or Education.","input":"","output":"def webpage_classification(url):\n    '''\n    This function takes a URL as input and returns one of three categories: Business\/Industry, Arts\/Entertainment, or Education.\n    '''\n    # get the content of the webpage \n    response = requests.get(url)\n    content = BeautifulSoup(response.content, 'html.parser')\n\n    # define some keywords lists \n    business_words = ['business', 'industry', 'markets', 'investment']\n    entertainment_words = ['entertainment', 'music', 'art', 'movies']\n    education_words = ['university', 'school', 'college', 'education']\n\n    # loop through the keywords in each category and check if any of them are present in the content \n    for word in business_words: \n        if word in content:\n            return 'Business\/Industry'\n\n    for word in entertainment_words: \n        if word in content:\n            return 'Arts\/Entertainment'\n    \n    for word in education_words: \n        if word in content:\n            return 'Education'\n\n    # if none of the words matched, return None \n    return None","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to classify a Web page into one of three categories: Business\/Industry, Arts\/Entertainment, or Education.\n\n### Input:\n\n\n### Output:\ndef webpage_classification(url):\n    '''\n    This function takes a URL as input and returns one of three categories: Business\/Industry, Arts\/Entertainment, or Education.\n    '''\n    # get the content of the webpage \n    response = requests.get(url)\n    content = BeautifulSoup(response.content, 'html.parser')\n\n    # define some keywords lists \n    business_words = ['business', 'industry', 'markets', 'investment']\n    entertainment_words = ['entertainment', 'music', 'art', 'movies']\n    education_words = ['university', 'school', 'college', 'education']\n\n    # loop through the keywords in each category and check if any of them are present in the content \n    for word in business_words: \n        if word in content:\n            return 'Business\/Industry'\n\n    for word in entertainment_words: \n        if word in content:\n            return 'Arts\/Entertainment'\n    \n    for word in education_words: \n        if word in content:\n            return 'Education'\n\n    # if none of the words matched, return None \n    return None"}
{"instruction":"Write a Python program to generate and print a random list of size n.","input":"8","output":"import random\n\ndef generate_random_list(n):\n    random_list = []\n    for i in range(n):\n        random_list.append(random.randint(0, 100))\n    return random_list\n\nn = 8\nrandom_list = generate_random_list(n)\nprint(random_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate and print a random list of size n.\n\n### Input:\n8\n\n### Output:\nimport random\n\ndef generate_random_list(n):\n    random_list = []\n    for i in range(n):\n        random_list.append(random.randint(0, 100))\n    return random_list\n\nn = 8\nrandom_list = generate_random_list(n)\nprint(random_list)"}
{"instruction":"Generate an artificial neural network in python that calculates the output for the given input matrix.","input":"Input matrix:\n[[3, -0.5, 2],\n [-0.5, 0.7, 1.2],\n [0.2, -0.3, 0.8]]","output":"# import the necessary libraries \nimport numpy as np \nimport tensorflow as tf \n\n# define the input matrix\ninput_matrix = np.array([[3, -0.5, 2],\n [-0.5, 0.7, 1.2],\n [0.2, -0.3, 0.8]])\n\n# create a 3x3 weight matrix\nweights = tf.Variable(tf.truncated_normal(shape=[3, 3], mean=0, stddev=0.1, dtype=tf.float32))\n# define the biases\nbiases = tf.Variable(tf.constant(0.1, shape=[3]))\n\n# define the output\nout = tf.matmul(input_matrix, weights) + biases\n\n# initialize the weights and biases\ninit = tf.initialize_all_variables()\n\n# define the sesssion\nsess = tf.Session()\n# run the session\nsess.run(init)\n\n# print the result\nprint(sess.run(out))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an artificial neural network in python that calculates the output for the given input matrix.\n\n### Input:\nInput matrix:\n[[3, -0.5, 2],\n [-0.5, 0.7, 1.2],\n [0.2, -0.3, 0.8]]\n\n### Output:\n# import the necessary libraries \nimport numpy as np \nimport tensorflow as tf \n\n# define the input matrix\ninput_matrix = np.array([[3, -0.5, 2],\n [-0.5, 0.7, 1.2],\n [0.2, -0.3, 0.8]])\n\n# create a 3x3 weight matrix\nweights = tf.Variable(tf.truncated_normal(shape=[3, 3], mean=0, stddev=0.1, dtype=tf.float32))\n# define the biases\nbiases = tf.Variable(tf.constant(0.1, shape=[3]))\n\n# define the output\nout = tf.matmul(input_matrix, weights) + biases\n\n# initialize the weights and biases\ninit = tf.initialize_all_variables()\n\n# define the sesssion\nsess = tf.Session()\n# run the session\nsess.run(init)\n\n# print the result\nprint(sess.run(out))"}
{"instruction":"Identify the programming language in the given code snippet.","input":"def f(x):\n return x + 2","output":"Python","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIdentify the programming language in the given code snippet.\n\n### Input:\ndef f(x):\n return x + 2\n\n### Output:\nPython"}
{"instruction":"Develop a Python program to scrape the top 10 most visited websites and their respective Alexa ranking.","input":"Not applicable","output":"from bs4 import BeautifulSoup\nimport requests\nimport re\n\n\ndef getTopSites():\n url = 'https:\/\/www.alexa.com\/topsites'\n response = requests.get(url)\n soup = BeautifulSoup(response.text, 'html.parser')\n \n table = soup.find('table')\n \n table_rows = table.find_all('tr')\n \n top_websites = []\n \n for row in table_rows:\n \n cols = row.find_all('td')\n \n if cols != []:\n website_name = cols[1].text\n website_rank = re.sub('[^0-9]', '', cols[0].text) \n \n top_websites.append({\n 'name': website_name,\n 'alexa_rank': website_rank\n })\n \n return top_websites\n \n \nif __name__ == '__main__':\n print(getTopSites())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to scrape the top 10 most visited websites and their respective Alexa ranking.\n\n### Input:\nNot applicable\n\n### Output:\nfrom bs4 import BeautifulSoup\nimport requests\nimport re\n\n\ndef getTopSites():\n url = 'https:\/\/www.alexa.com\/topsites'\n response = requests.get(url)\n soup = BeautifulSoup(response.text, 'html.parser')\n \n table = soup.find('table')\n \n table_rows = table.find_all('tr')\n \n top_websites = []\n \n for row in table_rows:\n \n cols = row.find_all('td')\n \n if cols != []:\n website_name = cols[1].text\n website_rank = re.sub('[^0-9]', '', cols[0].text) \n \n top_websites.append({\n 'name': website_name,\n 'alexa_rank': website_rank\n })\n \n return top_websites\n \n \nif __name__ == '__main__':\n print(getTopSites())"}
{"instruction":"Write a Python program to parse an HTML table and extract its contents.","input":"<table>\n <tr>\n  <td>Name<\/td>\n  <td>Email<\/td>\n <\/tr>\n <tr>\n  <td>John Doe<\/td>\n  <td>john@example.com<\/td>\n <\/tr>\n<\/table>","output":"import requests\nfrom bs4 import BeautifulSoup\n\n# Fetch HTML page\nresponse = requests.get('http:\/\/example.com\/table.html')\n\n# Create BeautifulSoup object\nsoup = BeautifulSoup(response.content, 'html.parser')\n\n# Extract table\ntable = soup.find('table')\n\n# Extract columns\ncolumns = [col.text for col in table.find_all('td')]\n\n# Extract rows\nrows = [row.find_all('td') for row in table.find_all('tr')]\n\n# Iterate over each row and store data in a dict\ndata = []\nfor row in rows:\n     data.append([col.text for col in row])\n\n# Print the data\nprint(data)\n# [['Name', 'Email'], ['John Doe', 'john@example.com']]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to parse an HTML table and extract its contents.\n\n### Input:\n<table>\n <tr>\n  <td>Name<\/td>\n  <td>Email<\/td>\n <\/tr>\n <tr>\n  <td>John Doe<\/td>\n  <td>john@example.com<\/td>\n <\/tr>\n<\/table>\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Fetch HTML page\nresponse = requests.get('http:\/\/example.com\/table.html')\n\n# Create BeautifulSoup object\nsoup = BeautifulSoup(response.content, 'html.parser')\n\n# Extract table\ntable = soup.find('table')\n\n# Extract columns\ncolumns = [col.text for col in table.find_all('td')]\n\n# Extract rows\nrows = [row.find_all('td') for row in table.find_all('tr')]\n\n# Iterate over each row and store data in a dict\ndata = []\nfor row in rows:\n     data.append([col.text for col in row])\n\n# Print the data\nprint(data)\n# [['Name', 'Email'], ['John Doe', 'john@example.com']]"}
{"instruction":"Create a Python function to check if two strings are anagrams of each other or not. An anagram is a String that contains the same characters as another String but in a different order","input":"","output":"def is_anagram(str1, str2):\n    list_str1 = list(str1)\n    list_str1.sort()\n    list_str2 = list(str2)\n    list_str2.sort()\n\n    return (list_str1 == list_str2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to check if two strings are anagrams of each other or not. An anagram is a String that contains the same characters as another String but in a different order\n\n### Input:\n\n\n### Output:\ndef is_anagram(str1, str2):\n    list_str1 = list(str1)\n    list_str1.sort()\n    list_str2 = list(str2)\n    list_str2.sort()\n\n    return (list_str1 == list_str2)"}
{"instruction":"Design an algorithm in Python for solving the Travelling Salesman Problem with a cost matrix.","input":"Cost matrix = [[0, 4, 6, 8], [3, 0, 2, 7], [1, 6, 0, 5], [4, 3, 9, 0]]","output":"import numpy as np\n\ndef solveTSP(cost_matrix):\n n = len(cost_matrix[0])\n # matrix for storing intermediate results\n C = [[0 for i in range(n)] for j in range(1<<n)]\n # Administering initial values in matrix\n for i in range(n):\n  C[1<<i][i] = cost_matrix[i][0]\n\n # Dp to fill the remaining entries\n for mask in range(1, 1<<n):\n  for k in range(n):\n   if (mask & (1<<k)) != 0:\n    min_val = np.inf\n    for m in range(n):\n     if (mask & (1<<m)) != 0 and m != k:\n      min_val = min(min_val, C[mask ^ (1<<k)][m] + cost_matrix[m][k])\n    C[mask][k] = min_val\n\n # find the minimum cost tour         \n min_val = np.inf\n for k in range(n):\n  min_val = min(min_val, C[(1<<n) - 1][k] + cost_matrix[k][0])\n return min_val","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python for solving the Travelling Salesman Problem with a cost matrix.\n\n### Input:\nCost matrix = [[0, 4, 6, 8], [3, 0, 2, 7], [1, 6, 0, 5], [4, 3, 9, 0]]\n\n### Output:\nimport numpy as np\n\ndef solveTSP(cost_matrix):\n n = len(cost_matrix[0])\n # matrix for storing intermediate results\n C = [[0 for i in range(n)] for j in range(1<<n)]\n # Administering initial values in matrix\n for i in range(n):\n  C[1<<i][i] = cost_matrix[i][0]\n\n # Dp to fill the remaining entries\n for mask in range(1, 1<<n):\n  for k in range(n):\n   if (mask & (1<<k)) != 0:\n    min_val = np.inf\n    for m in range(n):\n     if (mask & (1<<m)) != 0 and m != k:\n      min_val = min(min_val, C[mask ^ (1<<k)][m] + cost_matrix[m][k])\n    C[mask][k] = min_val\n\n # find the minimum cost tour         \n min_val = np.inf\n for k in range(n):\n  min_val = min(min_val, C[(1<<n) - 1][k] + cost_matrix[k][0])\n return min_val"}
{"instruction":"Write a Python program to illustrate an Object Oriented programming concept.","input":"","output":"# Example illustrating Object Oriented programming\n\nclass Employee:\n    def __init__(self, first_name, last_name, salary):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.salary = salary\n\n    def get_full_name(self):\n        return self.first_name + \" \" + self.last_name\n\nif __name__ == \"__main__\":\n    emp1 = Employee(\"John\", \"Doe\", 10000)\n    print(\"Full name:\", emp1.get_full_name())\n    print(\"Salary:\", emp1.salary)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to illustrate an Object Oriented programming concept.\n\n### Input:\n\n\n### Output:\n# Example illustrating Object Oriented programming\n\nclass Employee:\n    def __init__(self, first_name, last_name, salary):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.salary = salary\n\n    def get_full_name(self):\n        return self.first_name + \" \" + self.last_name\n\nif __name__ == \"__main__\":\n    emp1 = Employee(\"John\", \"Doe\", 10000)\n    print(\"Full name:\", emp1.get_full_name())\n    print(\"Salary:\", emp1.salary)"}
{"instruction":"Design a program in Python to generate a random password.","input":"","output":"import random, string\n\ndef genRandomPassword():\n    length = 8\n    random_password= ''.join([random.choice(string.ascii_letters + string.digits + string.punctuation) for n in range(length)])\n    return random_password\n\npassword = genRandomPassword()\nprint(password)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to generate a random password.\n\n### Input:\n\n\n### Output:\nimport random, string\n\ndef genRandomPassword():\n    length = 8\n    random_password= ''.join([random.choice(string.ascii_letters + string.digits + string.punctuation) for n in range(length)])\n    return random_password\n\npassword = genRandomPassword()\nprint(password)"}
{"instruction":"Create a web application that displays a list of all available program languages and their features.","input":"Not applicable","output":"<html>\n <head>\n <title>Programming Languages<\/title>\n <\/head>\n <body>\n <h1>Programming Languages<\/h1>\n <ul>\n <li><b>JavaScript<\/b> \u2013 Object-oriented, event-driven, and functional programming language<\/li>\n <li><b>Python<\/b> \u2013 Object-oriented, interpreted, high-level programming language<\/li>\n <li><b>C<\/b> \u2013 High-level, structured, multiparadigm, compiled programming language<\/li>\n <li><b>C++<\/b> \u2013 Object-oriented, compiled, generic programming language<\/li>\n <li><b>Java<\/b> \u2013 Object-oriented, portable, compiled programming language<\/li>\n <\/ul>\n <\/body>\n<\/html>","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application that displays a list of all available program languages and their features.\n\n### Input:\nNot applicable\n\n### Output:\n<html>\n <head>\n <title>Programming Languages<\/title>\n <\/head>\n <body>\n <h1>Programming Languages<\/h1>\n <ul>\n <li><b>JavaScript<\/b> \u2013 Object-oriented, event-driven, and functional programming language<\/li>\n <li><b>Python<\/b> \u2013 Object-oriented, interpreted, high-level programming language<\/li>\n <li><b>C<\/b> \u2013 High-level, structured, multiparadigm, compiled programming language<\/li>\n <li><b>C++<\/b> \u2013 Object-oriented, compiled, generic programming language<\/li>\n <li><b>Java<\/b> \u2013 Object-oriented, portable, compiled programming language<\/li>\n <\/ul>\n <\/body>\n<\/html>"}
{"instruction":"Convert the following function written in Python to Java.","input":"def add_two_numbers(a, b):\n    return a + b","output":"public int add_two_numbers(int a, int b){\n    return a + b;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following function written in Python to Java.\n\n### Input:\ndef add_two_numbers(a, b):\n    return a + b\n\n### Output:\npublic int add_two_numbers(int a, int b){\n    return a + b;\n}"}
{"instruction":"Write an algorithm to sort an array of integers in Python.","input":"[2,1,3,4,6,5]","output":"def bubble_sort(nums):\n    size = len(nums)\n    for i in range(size):\n        for j in range(size-1):\n            if nums[j] > nums[j+1]:\n                temp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = temp\n    return nums\n\nprint(bubble_sort([2,1,3,4,6,5]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to sort an array of integers in Python.\n\n### Input:\n[2,1,3,4,6,5]\n\n### Output:\ndef bubble_sort(nums):\n    size = len(nums)\n    for i in range(size):\n        for j in range(size-1):\n            if nums[j] > nums[j+1]:\n                temp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = temp\n    return nums\n\nprint(bubble_sort([2,1,3,4,6,5]))"}
{"instruction":"Write a Python function to calculate the difference between two given dates.","input":"","output":"def date_diff(date1, date2):\n    date1_stamp = time.mktime(datetime.strptime(date1, \"%d\/%m\/%Y\").timetuple())\n    date2_stamp = time.mktime(datetime.strptime(date2, \"%d\/%m\/%Y\").timetuple())\n    difference = abs(date1_stamp - date2_stamp)\n    return int(difference\/(24*60*60))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to calculate the difference between two given dates.\n\n### Input:\n\n\n### Output:\ndef date_diff(date1, date2):\n    date1_stamp = time.mktime(datetime.strptime(date1, \"%d\/%m\/%Y\").timetuple())\n    date2_stamp = time.mktime(datetime.strptime(date2, \"%d\/%m\/%Y\").timetuple())\n    difference = abs(date1_stamp - date2_stamp)\n    return int(difference\/(24*60*60))"}
{"instruction":"Create an object-oriented Python program for creating a vending machine. The program should have classes for creating items, updating items, and calculating item prices.","input":"Not applicable","output":"class Item():\n    def __init__(self, name, price, quantity):\n        self.name = name\n        self.price = price\n        self.quantity = quantity\n\n    def update_item(self, quantity):\n        self.quantity += quantity\n        \n    def get_item_price(self):\n        return self.price * self.quantity\n\nclass VendingMachine():\n    def __init__(self, items):\n        self.items = items\n\n    def calculate_total_price(self, items):\n        total_price = 0\n        for item in items:\n            total_price += item.get_item_price()\n        return total_price\n\n# Create your items\ncoke = Item('Coke', 1.00, 1)\nchips = Item('Chips', 0.75, 1)\n\n# Create your Vending machine \nvending_machine = VendingMachine([coke, chips])\n\n# Calculate total price\nprice = vending_machine.calculate_total_price([coke, chips])\n\nprint(price) \n\nOutput:\n1.75","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an object-oriented Python program for creating a vending machine. The program should have classes for creating items, updating items, and calculating item prices.\n\n### Input:\nNot applicable\n\n### Output:\nclass Item():\n    def __init__(self, name, price, quantity):\n        self.name = name\n        self.price = price\n        self.quantity = quantity\n\n    def update_item(self, quantity):\n        self.quantity += quantity\n        \n    def get_item_price(self):\n        return self.price * self.quantity\n\nclass VendingMachine():\n    def __init__(self, items):\n        self.items = items\n\n    def calculate_total_price(self, items):\n        total_price = 0\n        for item in items:\n            total_price += item.get_item_price()\n        return total_price\n\n# Create your items\ncoke = Item('Coke', 1.00, 1)\nchips = Item('Chips', 0.75, 1)\n\n# Create your Vending machine \nvending_machine = VendingMachine([coke, chips])\n\n# Calculate total price\nprice = vending_machine.calculate_total_price([coke, chips])\n\nprint(price) \n\nOutput:\n1.75"}
{"instruction":"Write a Python program that inputs two numbers and prints out their GCD (greatest common divisor).","input":"Two numbers: 90, 28","output":"a = 90\nb = 28\n\nwhile(b > 0):\n  temp = b \n  b = a % b\n  a = temp \n\nprint (\"The GCD is\",a)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that inputs two numbers and prints out their GCD (greatest common divisor).\n\n### Input:\nTwo numbers: 90, 28\n\n### Output:\na = 90\nb = 28\n\nwhile(b > 0):\n  temp = b \n  b = a % b\n  a = temp \n\nprint (\"The GCD is\",a)"}
{"instruction":"Generate a Python program which use to generate an array of length N with random numbers based on the given seed.","input":"N = 10\nSeed = 42","output":"import random\n\ndef generate_array_with_random_numbers(n, seed):\n random.seed(seed)\n return [random.randint(0, 100) for _ in range(n)]\n\nn = 10\nseed = 42\narray = generate_array_with_random_numbers(n, seed)\n\nprint(array)\n# [19, 25, 44, 36, 33, 20, 72, 15, 85, 37]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program which use to generate an array of length N with random numbers based on the given seed.\n\n### Input:\nN = 10\nSeed = 42\n\n### Output:\nimport random\n\ndef generate_array_with_random_numbers(n, seed):\n random.seed(seed)\n return [random.randint(0, 100) for _ in range(n)]\n\nn = 10\nseed = 42\narray = generate_array_with_random_numbers(n, seed)\n\nprint(array)\n# [19, 25, 44, 36, 33, 20, 72, 15, 85, 37]"}
{"instruction":"Design an algorithm and write a Python program to find the union and intersection of two given sets of numbers.","input":"Set A = { 1, 2, 3, 4, 5, 6 }\nSet B = { 1, 4, 5, 7, 8 }","output":"def union(A, B):\n same = []\n union = A + B\n for i in A:\n  if i in B:\n   same.append(i)\n union = list(set(union) - set(same))\n return union\n \ndef intersect(A, B):\n same = []\n for i in A:\n  if i in B:\n   same.append(i)\n intersection = same\n return intersection\n\nSetA = { 1, 2, 3, 4, 5, 6 }\nSetB = { 1, 4, 5, 7, 8 }\nprint(\"Union:\", union(SetA,SetB))\nprint(\"Intersection:\", intersect(SetA,SetB))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm and write a Python program to find the union and intersection of two given sets of numbers.\n\n### Input:\nSet A = { 1, 2, 3, 4, 5, 6 }\nSet B = { 1, 4, 5, 7, 8 }\n\n### Output:\ndef union(A, B):\n same = []\n union = A + B\n for i in A:\n  if i in B:\n   same.append(i)\n union = list(set(union) - set(same))\n return union\n \ndef intersect(A, B):\n same = []\n for i in A:\n  if i in B:\n   same.append(i)\n intersection = same\n return intersection\n\nSetA = { 1, 2, 3, 4, 5, 6 }\nSetB = { 1, 4, 5, 7, 8 }\nprint(\"Union:\", union(SetA,SetB))\nprint(\"Intersection:\", intersect(SetA,SetB))"}
{"instruction":"Create a Python program to search in a sorted array","input":"Search for the number 11 in the sorted array [1, 3, 5, 8, 11, 14, 17].","output":"def binary_search(arr, num):\n    # define start and end point\n    start = 0 \n    end = len(arr)-1\n\n    while start <= end:\n        mid = (start + end)\/\/2\n\n        # check if num is present at mid \n        if arr[mid] == num: \n            return mid \n\n        # If num is greater, ignore left half \n        elif arr[mid] < num: \n            start = mid + 1\n\n        # If num is smaller, ignore right half \n        else: \n            end = mid - 1\n  \n    # If we reach here, then the element was not present \n    return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to search in a sorted array\n\n### Input:\nSearch for the number 11 in the sorted array [1, 3, 5, 8, 11, 14, 17].\n\n### Output:\ndef binary_search(arr, num):\n    # define start and end point\n    start = 0 \n    end = len(arr)-1\n\n    while start <= end:\n        mid = (start + end)\/\/2\n\n        # check if num is present at mid \n        if arr[mid] == num: \n            return mid \n\n        # If num is greater, ignore left half \n        elif arr[mid] < num: \n            start = mid + 1\n\n        # If num is smaller, ignore right half \n        else: \n            end = mid - 1\n  \n    # If we reach here, then the element was not present \n    return -1"}
{"instruction":"Create a _JSON serializer_ for a given Python data structure.","input":"data = {\n 'name': 'Alice',\n 'age': 22,\n 'hobbies': ['coding', 'guitar']\n}","output":"import json\n\ndata = {\n 'name': 'Alice',\n 'age': 22,\n 'hobbies': ['coding', 'guitar']\n}\n\njson_data = json.dumps(data)\n\nprint(json_data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a _JSON serializer_ for a given Python data structure.\n\n### Input:\ndata = {\n 'name': 'Alice',\n 'age': 22,\n 'hobbies': ['coding', 'guitar']\n}\n\n### Output:\nimport json\n\ndata = {\n 'name': 'Alice',\n 'age': 22,\n 'hobbies': ['coding', 'guitar']\n}\n\njson_data = json.dumps(data)\n\nprint(json_data)"}
{"instruction":"Given a list of integers, write a program that prints out two numbers which when summed, produces the second highest number in the list.","input":"[3, 15, 6, 5, 2, 8, 7]","output":"# Python code\n\n# input list\nnumbers = [3, 15, 6, 5, 2, 8, 7]\n\n# set maximum number to -infinity\nmax_num = float(\"-inf\")\n\n# set second highest number to -infinity\nsecond_highest = float(\"-inf\")\n\n# loop through list of numbers\nfor num in numbers:\n  # check if num is greater than current maximum number\n  if num > max_num:\n    # set second highest to current maximum number\n    second_highest = max_num\n    # set current maximum number to num\n    max_num = num\n  # check if num is greater than second highest number, but smaller than current maximum number \n  elif num > second_highest:\n    # set second highest number to num\n    second_highest = num\n  \n# print the output\nprint(f'The two numbers are {max_num} and {second_highest}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integers, write a program that prints out two numbers which when summed, produces the second highest number in the list.\n\n### Input:\n[3, 15, 6, 5, 2, 8, 7]\n\n### Output:\n# Python code\n\n# input list\nnumbers = [3, 15, 6, 5, 2, 8, 7]\n\n# set maximum number to -infinity\nmax_num = float(\"-inf\")\n\n# set second highest number to -infinity\nsecond_highest = float(\"-inf\")\n\n# loop through list of numbers\nfor num in numbers:\n  # check if num is greater than current maximum number\n  if num > max_num:\n    # set second highest to current maximum number\n    second_highest = max_num\n    # set current maximum number to num\n    max_num = num\n  # check if num is greater than second highest number, but smaller than current maximum number \n  elif num > second_highest:\n    # set second highest number to num\n    second_highest = num\n  \n# print the output\nprint(f'The two numbers are {max_num} and {second_highest}')"}
{"instruction":"Create a Python script to generate a random password with at least one uppercase, one lowercase and one number.","input":"","output":"import string\nimport random\n\ndef generate_password():\n    letters = string.ascii_letters + string.digits\n    password = list(random.choice(letters) for i in range(8))\n    while not any(l.isupper() for l in password) or not any(l.islower() for l in password) or not any(l.isdigit() for l in password):\n        password = list(random.choice(letters) for i in range(8))\n    return ''.join(password)\n\npassword = generate_password() \nprint(\"Random password is:\", password)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate a random password with at least one uppercase, one lowercase and one number.\n\n### Input:\n\n\n### Output:\nimport string\nimport random\n\ndef generate_password():\n    letters = string.ascii_letters + string.digits\n    password = list(random.choice(letters) for i in range(8))\n    while not any(l.isupper() for l in password) or not any(l.islower() for l in password) or not any(l.isdigit() for l in password):\n        password = list(random.choice(letters) for i in range(8))\n    return ''.join(password)\n\npassword = generate_password() \nprint(\"Random password is:\", password)"}
{"instruction":"Write a function in Python to traverse an object and return a 2D list with all its children.","input":"","output":"def traverse_object(obj):\n    output = []\n    for key, value in obj.items():\n        if isinstance(value, dict):\n            output.append([key, traverse_object(value)])\n        elif isinstance(value, list):\n            output.append([key, traverse_list(value)])\n        else:\n            output.append([key, value])\n    return output\n\ndef traverse_list(lst):\n    output = []\n    for item in lst:\n        if isinstance(item, dict):\n            output.append(traverse_object(item))\n        elif isinstance(item, list):\n            output.append(traverse_list(item))\n        else:\n            output.append(item)\n    return output","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to traverse an object and return a 2D list with all its children.\n\n### Input:\n\n\n### Output:\ndef traverse_object(obj):\n    output = []\n    for key, value in obj.items():\n        if isinstance(value, dict):\n            output.append([key, traverse_object(value)])\n        elif isinstance(value, list):\n            output.append([key, traverse_list(value)])\n        else:\n            output.append([key, value])\n    return output\n\ndef traverse_list(lst):\n    output = []\n    for item in lst:\n        if isinstance(item, dict):\n            output.append(traverse_object(item))\n        elif isinstance(item, list):\n            output.append(traverse_list(item))\n        else:\n            output.append(item)\n    return output"}
{"instruction":"Write a Python program to vertically center an aligned text by inserting padding spaces above and bottom of the text.","input":"'Hello World!'","output":"space = \" \" * 10\nlines = inp.split('\\n')\npadded = '\\n'.join(space + line + space for line in lines)\nprint(padded)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to vertically center an aligned text by inserting padding spaces above and bottom of the text.\n\n### Input:\n'Hello World!'\n\n### Output:\nspace = \" \" * 10\nlines = inp.split('\\n')\npadded = '\\n'.join(space + line + space for line in lines)\nprint(padded)"}
{"instruction":"Implement a spell checker in Python.","input":"","output":"import re\nimport collections\n\ndef words(text): \n    return re.findall('[a-z]+', text.lower()) \n\ndef train(features):\n    model = collections.defaultdict(lambda: 1)\n    for f in features:\n        model[f] += 1\n    return model\n\nNWORDS = train(words(open('big.txt').read()))\n\ndef edits1(word):\n    s = [(word[:i], word[i:]) for i in range(len(word) + 1)]\n    deletes    = [a + b[1:] for a, b in s if b]\n    transposes = [a + b[1] + b[0] + b[2:] for a, b in s if len(b)>1]\n    replaces   = [a + c + b[1:] for a, b in s for c in alphabet if b]\n    inserts    = [a + c + b     for a, b in s for c in alphabet]\n    return set(deletes + transposes + replaces + inserts)\n\ndef known_edits2(word):\n    return set(e2 for e1 in edits1(word) for e2 in edits1(e1) if e2 in NWORDS)\n\ndef known(words): \n    return set(w for w in words if w in NWORDS)\n\ndef correct(word):\n    candidates = known([word]) or known(edits1(word)) or known_edits2(word) or [word]\n    return max(candidates, key=NWORDS.get)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a spell checker in Python.\n\n### Input:\n\n\n### Output:\nimport re\nimport collections\n\ndef words(text): \n    return re.findall('[a-z]+', text.lower()) \n\ndef train(features):\n    model = collections.defaultdict(lambda: 1)\n    for f in features:\n        model[f] += 1\n    return model\n\nNWORDS = train(words(open('big.txt').read()))\n\ndef edits1(word):\n    s = [(word[:i], word[i:]) for i in range(len(word) + 1)]\n    deletes    = [a + b[1:] for a, b in s if b]\n    transposes = [a + b[1] + b[0] + b[2:] for a, b in s if len(b)>1]\n    replaces   = [a + c + b[1:] for a, b in s for c in alphabet if b]\n    inserts    = [a + c + b     for a, b in s for c in alphabet]\n    return set(deletes + transposes + replaces + inserts)\n\ndef known_edits2(word):\n    return set(e2 for e1 in edits1(word) for e2 in edits1(e1) if e2 in NWORDS)\n\ndef known(words): \n    return set(w for w in words if w in NWORDS)\n\ndef correct(word):\n    candidates = known([word]) or known(edits1(word)) or known_edits2(word) or [word]\n    return max(candidates, key=NWORDS.get)"}
{"instruction":"Generate a python program to remove duplicate elements in a given list.","input":"","output":"def remove_duplicates(arr): \n    new_arr = [] \n    \n    for i in arr: \n        if i not in new_arr: \n            new_arr.append(i) \n            \n    return new_arr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to remove duplicate elements in a given list.\n\n### Input:\n\n\n### Output:\ndef remove_duplicates(arr): \n    new_arr = [] \n    \n    for i in arr: \n        if i not in new_arr: \n            new_arr.append(i) \n            \n    return new_arr"}
{"instruction":"Write a function to perform an HTTP request using Python.","input":"","output":"import requests\n\ndef http_request(url):\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.text\n    else:\n        return None\n\nhttp_result = http_request('https:\/\/www.example.com\/')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to perform an HTTP request using Python.\n\n### Input:\n\n\n### Output:\nimport requests\n\ndef http_request(url):\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.text\n    else:\n        return None\n\nhttp_result = http_request('https:\/\/www.example.com\/')"}
{"instruction":"Create a program in Python to sort a given list of words alphabetically","input":"words=[\u201cComputer\u201d, \u201cScience\u201d, \u201cEngineering\u201d, \u201cTechnology\u201d]","output":"def sort_words(words):\n    words.sort()\n    return words\n\nwords = [\"Computer\", \"Science\", \"Engineering\", \"Technology\"]\nsorted_words = sort_words(words)\nprint(sorted_words) # Output: ['Computer', 'Engineering', 'Science', 'Technology']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to sort a given list of words alphabetically\n\n### Input:\nwords=[\u201cComputer\u201d, \u201cScience\u201d, \u201cEngineering\u201d, \u201cTechnology\u201d]\n\n### Output:\ndef sort_words(words):\n    words.sort()\n    return words\n\nwords = [\"Computer\", \"Science\", \"Engineering\", \"Technology\"]\nsorted_words = sort_words(words)\nprint(sorted_words) # Output: ['Computer', 'Engineering', 'Science', 'Technology']"}
{"instruction":"Write a function in Python that takes an integer and returns an array of digits of the number except the last two digits.","input":"8765","output":"def remove_last_two_digits(num):\n    num = str(num)\n    return [int(x) for x in num[:-2]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes an integer and returns an array of digits of the number except the last two digits.\n\n### Input:\n8765\n\n### Output:\ndef remove_last_two_digits(num):\n    num = str(num)\n    return [int(x) for x in num[:-2]]"}
{"instruction":"Create a sqlite3 database in Python for managing personal contacts. The database should have a table for storing contact information such as names, phone number, and email address.","input":"Not applicable","output":"import sqlite3\n\nconn = sqlite3.connect('contacts.db')\nc = conn.cursor()\n\nc.execute(\"\"\"CREATE TABLE contacts (\n            first_name text,\n            last_name text,\n            phone_number text,\n            email text\n            )\"\"\")\n\nc.execute(\"INSERT INTO contacts VALUES ('John', 'Doe', '1234567890', 'doe@example.com')\")\n\nconn.commit()\nconn.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sqlite3 database in Python for managing personal contacts. The database should have a table for storing contact information such as names, phone number, and email address.\n\n### Input:\nNot applicable\n\n### Output:\nimport sqlite3\n\nconn = sqlite3.connect('contacts.db')\nc = conn.cursor()\n\nc.execute(\"\"\"CREATE TABLE contacts (\n            first_name text,\n            last_name text,\n            phone_number text,\n            email text\n            )\"\"\")\n\nc.execute(\"INSERT INTO contacts VALUES ('John', 'Doe', '1234567890', 'doe@example.com')\")\n\nconn.commit()\nconn.close()"}
{"instruction":"Can you write a code snippet to flatten a 2D array in Python?","input":"[[1, 2, 3], [4, 5, 6], [7, 8, 9]]","output":"def flatten_2d_array(arr):\n    flattened_arr = []\n    for row in arr:\n        for item in row:\n            flattened_arr.append(item)\n    return flattened_arr\n\narr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nflattened_arr = flatten_2d_array(arr)\nprint(flattened_arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you write a code snippet to flatten a 2D array in Python?\n\n### Input:\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n### Output:\ndef flatten_2d_array(arr):\n    flattened_arr = []\n    for row in arr:\n        for item in row:\n            flattened_arr.append(item)\n    return flattened_arr\n\narr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nflattened_arr = flatten_2d_array(arr)\nprint(flattened_arr)"}
{"instruction":"Given a list, write a Python function to separate the odd numbers from the even numbers.","input":"numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]","output":"def separate_odd_even(numbers):\n    odd_numbers = []\n    even_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n        else:\n            odd_numbers.append(num)\n    \n    return odd_numbers, even_numbers","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list, write a Python function to separate the odd numbers from the even numbers.\n\n### Input:\nnumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n### Output:\ndef separate_odd_even(numbers):\n    odd_numbers = []\n    even_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n        else:\n            odd_numbers.append(num)\n    \n    return odd_numbers, even_numbers"}
{"instruction":"Create a basic chatbot in Python that can answer basic questions.","input":"Not applicable","output":"#import statements\nimport nltk\nimport string\nimport random\n\n#Define basic greetings\ngreetings = ['hi', 'hey', 'hello', 'hi there']\n\n#Define basic farewells\nfarewells = ['bye', 'goodbye', 'see you later']\n\n#Define a minimum threshold for match recognition\nmin_threshold = 0.6\n\n#Define corpus\ncorpus = {\n    'Hi': ['Hello', 'Hey'],\n    'What is your name?': ['My name is Simbot', 'I am Simbot'],\n    'How are you?': ['I am good', 'I am doing great']\n}\n\n#Define a function to tokenize a given sentence\ndef tokenize_sentence(sentence):\n    return nltk.word_tokenize(sentence.lower().translate(str.maketrans('', '', string.punctuation))) \n\n#Define a function to calculate match score between tokenized sentence and corpus\ndef calculate_match_score(tokenized_text, corpus_key):\n    normalized_match_score = 0\n    for token in tokenized_text:\n        if token in corpus_key:\n            normalized_match_score += 1\/len(tokenized_text)\n    return normalized_match_score\n\n#Define a function to find closest matched sentence from corpus\ndef find_closest_matched_sentence(sentence):\n    tokenized_sentence = tokenize_sentence(sentence)\n    match_score = 0\n    corpus_key = ''\n    corpus_response = ''\n    \n    for key in corpus.keys():\n        value = corpus[key]\n        tokenized_key = tokenize_sentence(key)\n        score = calculate_match_score(tokenized_sentence, tokenized_key)\n        if score > match_score and score >= min_threshold:\n            match_score = score\n            corpus_key = key\n            corpus_response = random.choice(value)\n    return corpus_response\n\n#Define a function to generate response\ndef generate_response(user_input):\n    user_input = user_input.lower()\n    if user_input in greetings:\n        return 'Hi, how can I help you today?'\n    elif user_input in farewells:\n        return 'Goodbye, have a nice day!'\n    else:\n        return find_closest_matched_sentence(user_input)\n\n#Get user input\nuser_input = input('Enter your message: ')\n\n#Generate response\nresponse = generate_response(user_input)\n\n#Print response\nprint(response)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic chatbot in Python that can answer basic questions.\n\n### Input:\nNot applicable\n\n### Output:\n#import statements\nimport nltk\nimport string\nimport random\n\n#Define basic greetings\ngreetings = ['hi', 'hey', 'hello', 'hi there']\n\n#Define basic farewells\nfarewells = ['bye', 'goodbye', 'see you later']\n\n#Define a minimum threshold for match recognition\nmin_threshold = 0.6\n\n#Define corpus\ncorpus = {\n    'Hi': ['Hello', 'Hey'],\n    'What is your name?': ['My name is Simbot', 'I am Simbot'],\n    'How are you?': ['I am good', 'I am doing great']\n}\n\n#Define a function to tokenize a given sentence\ndef tokenize_sentence(sentence):\n    return nltk.word_tokenize(sentence.lower().translate(str.maketrans('', '', string.punctuation))) \n\n#Define a function to calculate match score between tokenized sentence and corpus\ndef calculate_match_score(tokenized_text, corpus_key):\n    normalized_match_score = 0\n    for token in tokenized_text:\n        if token in corpus_key:\n            normalized_match_score += 1\/len(tokenized_text)\n    return normalized_match_score\n\n#Define a function to find closest matched sentence from corpus\ndef find_closest_matched_sentence(sentence):\n    tokenized_sentence = tokenize_sentence(sentence)\n    match_score = 0\n    corpus_key = ''\n    corpus_response = ''\n    \n    for key in corpus.keys():\n        value = corpus[key]\n        tokenized_key = tokenize_sentence(key)\n        score = calculate_match_score(tokenized_sentence, tokenized_key)\n        if score > match_score and score >= min_threshold:\n            match_score = score\n            corpus_key = key\n            corpus_response = random.choice(value)\n    return corpus_response\n\n#Define a function to generate response\ndef generate_response(user_input):\n    user_input = user_input.lower()\n    if user_input in greetings:\n        return 'Hi, how can I help you today?'\n    elif user_input in farewells:\n        return 'Goodbye, have a nice day!'\n    else:\n        return find_closest_matched_sentence(user_input)\n\n#Get user input\nuser_input = input('Enter your message: ')\n\n#Generate response\nresponse = generate_response(user_input)\n\n#Print response\nprint(response)"}
{"instruction":"Write a function to shallow copy a python dictionary object.","input":"","output":"def shallow_copy_dict(original_dict):\n    copies_dict = {}\n    for key, value in original_dict.items():\n        copies_dict[key] = value\n    return copies_dict","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to shallow copy a python dictionary object.\n\n### Input:\n\n\n### Output:\ndef shallow_copy_dict(original_dict):\n    copies_dict = {}\n    for key, value in original_dict.items():\n        copies_dict[key] = value\n    return copies_dict"}
{"instruction":"Generate a Python function for calculating the information gain of a given feature in a dataset.","input":"","output":"def information_gain(data, feature):\n    \"\"\"\n    Calculates the information gain of the given feature in a dataset.\n    \n    Args:\n        data (list of dicts): The dataset.\n        feature (str): The feature for which to calculate the information gain.\n        \n    Returns: \n        float: The information gain of the given feature.\n    \"\"\"\n       \n    # Calculate the entropy of the dataset\n    data_entropy = __calc_entropy(data)\n    \n    # Calculate the weighted average of the entropy of each bin\n    weighted_avg_entropy = __calc_weighted_avg_entropy(data, feature)\n    \n    # Calculate the information gain\n    info_gain = data_entropy - weighted_avg_entropy\n    \n    return info_gain","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function for calculating the information gain of a given feature in a dataset.\n\n### Input:\n\n\n### Output:\ndef information_gain(data, feature):\n    \"\"\"\n    Calculates the information gain of the given feature in a dataset.\n    \n    Args:\n        data (list of dicts): The dataset.\n        feature (str): The feature for which to calculate the information gain.\n        \n    Returns: \n        float: The information gain of the given feature.\n    \"\"\"\n       \n    # Calculate the entropy of the dataset\n    data_entropy = __calc_entropy(data)\n    \n    # Calculate the weighted average of the entropy of each bin\n    weighted_avg_entropy = __calc_weighted_avg_entropy(data, feature)\n    \n    # Calculate the information gain\n    info_gain = data_entropy - weighted_avg_entropy\n    \n    return info_gain"}
{"instruction":"Build a Markdown document generator in Python that takes input from the user and generates a Markdown document.","input":"","output":"#!\/usr\/bin\/env python\n\n# Imports\nimport sys\n\n# Constants\nMARKDOWN_EXTENSION = \".md\"\n\n# Helper Fuctions\ndef convert_to_markdown(text):\n    \"\"\"\n    Converts plain text to markdown format\n    \"\"\"\n    return text\n\ndef write_to_file(filename, text):\n    \"\"\"\n    Writes text to a file\n    \"\"\"\n    with open(filename + MARKDOWN_EXTENSION, \"w\") as f:\n        f.write(text + \"\\n\")\n\n# Main Function\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Read input from user\n    text = input(\"Please enter the text you would like to convert to Markdown: \")\n    filename = input(\"Please enter a file name: \")\n\n    # Convert text to markdown\n    markdown = convert_to_markdown(text)\n        \n    # Write to file\n    write_to_file(filename, markdown)\n\n# Main Execution\nif __name__ == \"__main__\":\n    main()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Markdown document generator in Python that takes input from the user and generates a Markdown document.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n\n# Imports\nimport sys\n\n# Constants\nMARKDOWN_EXTENSION = \".md\"\n\n# Helper Fuctions\ndef convert_to_markdown(text):\n    \"\"\"\n    Converts plain text to markdown format\n    \"\"\"\n    return text\n\ndef write_to_file(filename, text):\n    \"\"\"\n    Writes text to a file\n    \"\"\"\n    with open(filename + MARKDOWN_EXTENSION, \"w\") as f:\n        f.write(text + \"\\n\")\n\n# Main Function\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Read input from user\n    text = input(\"Please enter the text you would like to convert to Markdown: \")\n    filename = input(\"Please enter a file name: \")\n\n    # Convert text to markdown\n    markdown = convert_to_markdown(text)\n        \n    # Write to file\n    write_to_file(filename, markdown)\n\n# Main Execution\nif __name__ == \"__main__\":\n    main()"}
{"instruction":"Write a Python function that takes a dictionary as input and returns a list of values sorted in ascending order.","input":"mydict = {'x':4, 'y':2, 'z':1}","output":"def sort_dict_values(d):\n    # create a list of values from the dictionary\n    values = list(d.values())\n    # sort the list \n    values.sort()\n    return values\n\nresult = sort_dict_values(mydict)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes a dictionary as input and returns a list of values sorted in ascending order.\n\n### Input:\nmydict = {'x':4, 'y':2, 'z':1}\n\n### Output:\ndef sort_dict_values(d):\n    # create a list of values from the dictionary\n    values = list(d.values())\n    # sort the list \n    values.sort()\n    return values\n\nresult = sort_dict_values(mydict)\nprint(result)"}
{"instruction":"Write a script in Python to compete in a Kaggle competition.","input":"Not applicable","output":"# Load the necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# Read in the data\ntrain_data = pd.read_csv(\"data.csv\")\n\n# Split the data into X (predictors) and y (response)\nX = train_data.drop('response', axis=1)\ny = train_data['response']\n\n# Split into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n\n# Define the model and fit it\nmodel = ...\nmodel.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Score the prediction\nscore = accuracy_score(y_test, y_pred)\n\n# Submit the prediction to Kaggle\n# ...","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script in Python to compete in a Kaggle competition.\n\n### Input:\nNot applicable\n\n### Output:\n# Load the necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# Read in the data\ntrain_data = pd.read_csv(\"data.csv\")\n\n# Split the data into X (predictors) and y (response)\nX = train_data.drop('response', axis=1)\ny = train_data['response']\n\n# Split into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n\n# Define the model and fit it\nmodel = ...\nmodel.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Score the prediction\nscore = accuracy_score(y_test, y_pred)\n\n# Submit the prediction to Kaggle\n# ..."}
{"instruction":"Generate a program in Python that accepts a string as input and removes all vowels from it.","input":"\"Hello World\"","output":"def removeVowels(str):\n    vowels = ('a', 'e', 'i', 'o', 'u') \n    res = \"\"\n    for char in str:\n        if char.lower() not in vowels:\n            res += char\n    return res\n\nprint(removeVowels(\"Hello World\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python that accepts a string as input and removes all vowels from it.\n\n### Input:\n\"Hello World\"\n\n### Output:\ndef removeVowels(str):\n    vowels = ('a', 'e', 'i', 'o', 'u') \n    res = \"\"\n    for char in str:\n        if char.lower() not in vowels:\n            res += char\n    return res\n\nprint(removeVowels(\"Hello World\"))"}
{"instruction":"Classify an input sentence with a given set of labels in Python.","input":"The car is blue","output":"def classify_sentence(sentence):\n    labels = [\u2018color\u2019, \u2018object\u2019]\n    features = sentence.split(' ')\n    feature_dict = {}\n    for f in features:\n        if f == 'blue':\n            feature_dict['color'] = 'blue'\n        elif f == 'car':\n            feature_dict['object'] = 'car'\n    return feature_dict\n\nsentence = 'The car is blue'\nlabels = [\u2018color\u2019, \u2018object\u2019]\nprint(classify_sentence(sentence, labels))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nClassify an input sentence with a given set of labels in Python.\n\n### Input:\nThe car is blue\n\n### Output:\ndef classify_sentence(sentence):\n    labels = [\u2018color\u2019, \u2018object\u2019]\n    features = sentence.split(' ')\n    feature_dict = {}\n    for f in features:\n        if f == 'blue':\n            feature_dict['color'] = 'blue'\n        elif f == 'car':\n            feature_dict['object'] = 'car'\n    return feature_dict\n\nsentence = 'The car is blue'\nlabels = [\u2018color\u2019, \u2018object\u2019]\nprint(classify_sentence(sentence, labels))"}
{"instruction":"Create a mathematical expression solver function in Python.","input":"\"2 + 2\"","output":"def expression_solver(expression):\n    '''This function solves a given mathematical expression'''\n\n    return eval(expression)\n\nexpression = \"2 + 2\"\n\nresult = expression_solver(expression)\n\nprint(result) # 4","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a mathematical expression solver function in Python.\n\n### Input:\n\"2 + 2\"\n\n### Output:\ndef expression_solver(expression):\n    '''This function solves a given mathematical expression'''\n\n    return eval(expression)\n\nexpression = \"2 + 2\"\n\nresult = expression_solver(expression)\n\nprint(result) # 4"}
{"instruction":"In Python, write a program to find the average of all the even numbers in a given list.","input":"list = [1, 7, 8, 10, 12, 17]","output":"def average_even(list):\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return sum(even_list)\/len(even_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, write a program to find the average of all the even numbers in a given list.\n\n### Input:\nlist = [1, 7, 8, 10, 12, 17]\n\n### Output:\ndef average_even(list):\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return sum(even_list)\/len(even_list)"}
{"instruction":"Write a Python program to generate HTML code which produces a table with 10 rows and 4 columns and applies a gradient background to the table cells.","input":"Not applicable","output":"# Python code \n\n# start HTML tag\nhtml = '<html>\\n'\n\n# start table\nhtml += '<table style=\"background: linear-gradient(90deg, #feedba, #fffd, #abdefa, #247ba0);\">\\n'\n\n# loop for 10 rows\nfor i in range(10):\n  # start table row\n html += ' <tr>\\n'\n\n # loop for 4 columns\n for j in range(4):\n  # add table cell with index\n  html += f'   <td>{i+1},{j+1}<\/td>\\n'\n  \n  # end table row\n html += ' <\/tr>\\n'\n\n# end table\nhtml += '<\/table>\\n'\n# end HTML tag\nhtml += '<\/html>'\n\n# print output\nprint(html)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate HTML code which produces a table with 10 rows and 4 columns and applies a gradient background to the table cells.\n\n### Input:\nNot applicable\n\n### Output:\n# Python code \n\n# start HTML tag\nhtml = '<html>\\n'\n\n# start table\nhtml += '<table style=\"background: linear-gradient(90deg, #feedba, #fffd, #abdefa, #247ba0);\">\\n'\n\n# loop for 10 rows\nfor i in range(10):\n  # start table row\n html += ' <tr>\\n'\n\n # loop for 4 columns\n for j in range(4):\n  # add table cell with index\n  html += f'   <td>{i+1},{j+1}<\/td>\\n'\n  \n  # end table row\n html += ' <\/tr>\\n'\n\n# end table\nhtml += '<\/table>\\n'\n# end HTML tag\nhtml += '<\/html>'\n\n# print output\nprint(html)"}
{"instruction":"Create a python code to format a given string as an email","input":"\"John Doe jdoe@example.com\"","output":"\"\"\"\nThis code formats a given string to an email address\n\"\"\"\n\ndef format_string(s):\n    s = s.split(\" \")\n    name = s[0] + \" \" + s[1]\n    email = s[2]\n    return name + \" <\" + email + \">\"\n\nif __name__ == '__main__':\n    string = \"John Doe jdoe@example.com\"\n    print(format_string(string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python code to format a given string as an email\n\n### Input:\n\"John Doe jdoe@example.com\"\n\n### Output:\n\"\"\"\nThis code formats a given string to an email address\n\"\"\"\n\ndef format_string(s):\n    s = s.split(\" \")\n    name = s[0] + \" \" + s[1]\n    email = s[2]\n    return name + \" <\" + email + \">\"\n\nif __name__ == '__main__':\n    string = \"John Doe jdoe@example.com\"\n    print(format_string(string))"}
{"instruction":"Create an AI algorithm in Python to play the game of tic-tac-toe with limited depth.","input":"","output":"import random\n\ndef get_available_positions(Board):\n    available_positions = []\n    for i in range(3):\n        for j in range(3):\n            if Board[i][j] == ' ':\n                available_positions.append((i, j))\n    return available_positions\n\ndef is_game_over(Board, depth):\n    if depth == 0:\n        return True\n\n    for i in range(3):\n        if (Board[i][0] == Board[i][1] == Board[i][2] and Board[i][0] != ' '):\n            return True\n        elif (Board[0][i] == Board[1][i] == Board[2][i] and Board[0][i] != ' '):\n            return True\n    if (Board[0][0] == Board[1][1] == Board[2][2] and Board[0][0] != ' ') or (Board[2][0] == Board[1][1] == Board[0][2] and Board[2][0] != ' '):\n        return True\n\n    available_positions = get_available_positions(Board)\n    if len(available_positions) == 0:\n        return True\n\n    return False\n\ndef get_next_move(Board, player, depth):\n    best_position = None\n    best_score = float('-inf')\n    if player == 'X':\n        player2 = 'O'\n    else:\n        player2 = 'X'\n\n    available_positions = get_available_positions(Board)\n\n    for position in available_positions:\n        Board[position[0]][position[1]] = player\n        score = minimax(Board, player2, depth-1)\n        Board[position[0]][position[1]] = ' '\n        if score > best_score:\n            best_score = score\n            best_position = position\n    return best_position\n\ndef minimax(Board, player, depth):\n    if is_game_over(Board, depth):\n        if player == 'X':\n            return -1\n        elif player == 'O':\n            return 1\n        else:\n            return 0\n\n    best_score = float('-inf')\n    if player == 'X':\n        player2 = 'O'\n    else:\n        player2 = 'X'\n    available_positions = get_available_positions(Board)\n    for position in available_positions:\n        Board[position[0]][position[1]] = player\n        score = minimax(Board, player2, depth-1)\n        Board[position[0]][position[1]] = ' '\n        best_score = max(score, best_score)\n    return best_score\n\nboard = [[' ', ' ', ' '],\n [' ', ' ', ' '],\n [' ', ' ', ' ']]\nplayer = 'X'\ndepth = 5\n\nnext_move = get_next_move(board, player, depth)\nprint(next_move)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI algorithm in Python to play the game of tic-tac-toe with limited depth.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef get_available_positions(Board):\n    available_positions = []\n    for i in range(3):\n        for j in range(3):\n            if Board[i][j] == ' ':\n                available_positions.append((i, j))\n    return available_positions\n\ndef is_game_over(Board, depth):\n    if depth == 0:\n        return True\n\n    for i in range(3):\n        if (Board[i][0] == Board[i][1] == Board[i][2] and Board[i][0] != ' '):\n            return True\n        elif (Board[0][i] == Board[1][i] == Board[2][i] and Board[0][i] != ' '):\n            return True\n    if (Board[0][0] == Board[1][1] == Board[2][2] and Board[0][0] != ' ') or (Board[2][0] == Board[1][1] == Board[0][2] and Board[2][0] != ' '):\n        return True\n\n    available_positions = get_available_positions(Board)\n    if len(available_positions) == 0:\n        return True\n\n    return False\n\ndef get_next_move(Board, player, depth):\n    best_position = None\n    best_score = float('-inf')\n    if player == 'X':\n        player2 = 'O'\n    else:\n        player2 = 'X'\n\n    available_positions = get_available_positions(Board)\n\n    for position in available_positions:\n        Board[position[0]][position[1]] = player\n        score = minimax(Board, player2, depth-1)\n        Board[position[0]][position[1]] = ' '\n        if score > best_score:\n            best_score = score\n            best_position = position\n    return best_position\n\ndef minimax(Board, player, depth):\n    if is_game_over(Board, depth):\n        if player == 'X':\n            return -1\n        elif player == 'O':\n            return 1\n        else:\n            return 0\n\n    best_score = float('-inf')\n    if player == 'X':\n        player2 = 'O'\n    else:\n        player2 = 'X'\n    available_positions = get_available_positions(Board)\n    for position in available_positions:\n        Board[position[0]][position[1]] = player\n        score = minimax(Board, player2, depth-1)\n        Board[position[0]][position[1]] = ' '\n        best_score = max(score, best_score)\n    return best_score\n\nboard = [[' ', ' ', ' '],\n [' ', ' ', ' '],\n [' ', ' ', ' ']]\nplayer = 'X'\ndepth = 5\n\nnext_move = get_next_move(board, player, depth)\nprint(next_move)"}
{"instruction":"Write a Python program that merges two sorted lists into one.","input":"list_1 = [1, 3, 5, 7, 9]\nlist_2 = [2, 4, 6, 8, 10]","output":"list_1 = [1, 3, 5, 7, 9]\nlist_2 = [2, 4, 6, 8, 10]\n\ndef merge_lists(list_1, list_2):\n '''Merges two sorted lists into one'''\n\n merged_list = []\n\n while list_1 and list_2:\n if list_1[0] < list_2[0]:\n merged_list.append(list_1.pop(0))\n else:\n merged_list.append(list_2.pop(0))\n\n merged_list.extend(list_1 + list_2)\n\n return merged_list\n\nmerged_list = merge_lists(list_1, list_2)\n\nprint(merged_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that merges two sorted lists into one.\n\n### Input:\nlist_1 = [1, 3, 5, 7, 9]\nlist_2 = [2, 4, 6, 8, 10]\n\n### Output:\nlist_1 = [1, 3, 5, 7, 9]\nlist_2 = [2, 4, 6, 8, 10]\n\ndef merge_lists(list_1, list_2):\n '''Merges two sorted lists into one'''\n\n merged_list = []\n\n while list_1 and list_2:\n if list_1[0] < list_2[0]:\n merged_list.append(list_1.pop(0))\n else:\n merged_list.append(list_2.pop(0))\n\n merged_list.extend(list_1 + list_2)\n\n return merged_list\n\nmerged_list = merge_lists(list_1, list_2)\n\nprint(merged_list)"}
{"instruction":"Create a Python program to split a given string into two parts according to a given character.","input":"Str = \"apple-banana-orange\"\nChar = \"-\"","output":"def split_string(s, char):\n    new_list = s.split(char)\n    return new_list\n\nresult = split_string(\"apple-banana-orange\", \"-\")\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to split a given string into two parts according to a given character.\n\n### Input:\nStr = \"apple-banana-orange\"\nChar = \"-\"\n\n### Output:\ndef split_string(s, char):\n    new_list = s.split(char)\n    return new_list\n\nresult = split_string(\"apple-banana-orange\", \"-\")\nprint(result)"}
{"instruction":"Implement a function for making web requests in Python.","input":"","output":"import requests\n\ndef make_web_request(url):\n    '''This function makes an HTTP request to the given URL and returns the response.'''\n    response = requests.get(url)\n    return response.text","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function for making web requests in Python.\n\n### Input:\n\n\n### Output:\nimport requests\n\ndef make_web_request(url):\n    '''This function makes an HTTP request to the given URL and returns the response.'''\n    response = requests.get(url)\n    return response.text"}
{"instruction":"Compose a Python function that sorts a list using insertion sort.","input":"[4, 1, 3, 6, 2, 5]","output":"def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        current_value = arr[i]\n        j = i - 1\n        while j >= 0 and arr[j] > current_value:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = current_value\n    return arr\n\narr = [4, 1, 3, 6, 2, 5]\nprint(insertion_sort(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python function that sorts a list using insertion sort.\n\n### Input:\n[4, 1, 3, 6, 2, 5]\n\n### Output:\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        current_value = arr[i]\n        j = i - 1\n        while j >= 0 and arr[j] > current_value:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = current_value\n    return arr\n\narr = [4, 1, 3, 6, 2, 5]\nprint(insertion_sort(arr))"}
{"instruction":"Generate a random number between a specified range using Python.","input":"","output":"import random \ndef random_num(start, end): \n    num = random.randint(start, end) \n    return num","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random number between a specified range using Python.\n\n### Input:\n\n\n### Output:\nimport random \ndef random_num(start, end): \n    num = random.randint(start, end) \n    return num"}
{"instruction":"Write a Python program to edit a given string and remove all occurances of \"the\".","input":"string = \"the quick brown fox jumped over the lazy dog\"","output":"def remove_the(string):\n  edited_string = string.replace(\"the\", \"\")\n  return edited_string\n\nresult = remove_the(\"the quick brown fox jumped over the lazy dog\")\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to edit a given string and remove all occurances of \"the\".\n\n### Input:\nstring = \"the quick brown fox jumped over the lazy dog\"\n\n### Output:\ndef remove_the(string):\n  edited_string = string.replace(\"the\", \"\")\n  return edited_string\n\nresult = remove_the(\"the quick brown fox jumped over the lazy dog\")\nprint(result)"}
{"instruction":"Implement a fibonacci sequence in Python.","input":"","output":"def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a fibonacci sequence in Python.\n\n### Input:\n\n\n### Output:\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b"}
{"instruction":"Design a REST API in Python that allows users to get and post data on a table.","input":"Not applicable","output":"from flask import Flask\nfrom flask_restful import Resource, Api\n \napp = Flask(__name__)\napi = Api(app)\n \nclass TableData(Resource):\n def get(self):\n  # Get data from table\n  return {'data': 'formatted data'}\n  \n def post(self):\n # Post data to table\n return {'message': 'Data posted successfully'}\n \napi.add_resource(TableData, '\/table')\n\nif __name__ == '__main__':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a REST API in Python that allows users to get and post data on a table.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask\nfrom flask_restful import Resource, Api\n \napp = Flask(__name__)\napi = Api(app)\n \nclass TableData(Resource):\n def get(self):\n  # Get data from table\n  return {'data': 'formatted data'}\n  \n def post(self):\n # Post data to table\n return {'message': 'Data posted successfully'}\n \napi.add_resource(TableData, '\/table')\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"instruction":"Write a recursive Python function to generate a Fibonacci sequence given a lower and upper limit.","input":"","output":"def generate_fibonacci_sequence(low, up):\n    \"\"\"\n    Generate a Fibonacci sequence\n    \n    Args:\n        low (int): lower limit\n        up (int): upper limit\n\n    Returns:\n        list: list with Fibonacci sequence\n    \"\"\"\n    if low == up: \n        return [low] \n    else: \n        fib_list = generate_fibonacci_sequence(low, up - 1) \n        fib_list.append(fib_list[-1] + fib_list[-2]) \n    return fib_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a recursive Python function to generate a Fibonacci sequence given a lower and upper limit.\n\n### Input:\n\n\n### Output:\ndef generate_fibonacci_sequence(low, up):\n    \"\"\"\n    Generate a Fibonacci sequence\n    \n    Args:\n        low (int): lower limit\n        up (int): upper limit\n\n    Returns:\n        list: list with Fibonacci sequence\n    \"\"\"\n    if low == up: \n        return [low] \n    else: \n        fib_list = generate_fibonacci_sequence(low, up - 1) \n        fib_list.append(fib_list[-1] + fib_list[-2]) \n    return fib_list"}
{"instruction":"Modify this Python code to add an exception for invalid input.","input":"def calculate(a, b):\n    if b > 0:\n        c = a \/ b\n        return c","output":"def calculate(a, b):\n    if b == 0:\n        raise ZeroDivisionError\n    elif b > 0:\n        c = a \/ b\n        return c\n    else:\n        raise ValueError","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify this Python code to add an exception for invalid input.\n\n### Input:\ndef calculate(a, b):\n    if b > 0:\n        c = a \/ b\n        return c\n\n### Output:\ndef calculate(a, b):\n    if b == 0:\n        raise ZeroDivisionError\n    elif b > 0:\n        c = a \/ b\n        return c\n    else:\n        raise ValueError"}
{"instruction":"Write a Python function to calculate the sum of all numbers in a list.","input":"[1, 2, 3, 4, 5, 6, 7, 8, 9]","output":"def sum_nums(nums):\n  sum = 0\n  for num in nums:\n    sum += num\n  return sum\n\nsum_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) # returns 45","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to calculate the sum of all numbers in a list.\n\n### Input:\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n### Output:\ndef sum_nums(nums):\n  sum = 0\n  for num in nums:\n    sum += num\n  return sum\n\nsum_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) # returns 45"}
{"instruction":"Build a machine learning model to diagnose coronary heart disease using Python.","input":"","output":"import pandas as pd \nimport numpy as np \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.ensemble import RandomForestClassifier \nfrom sklearn.metrics import accuracy_score \n  \n#Load the data\ndataset = pd.read_csv('<file_name>.csv')\nX = dataset.iloc[:, 0:10].values \ny = dataset.iloc[:, 10:].values \n  \n#Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y,random_state = 0,test_size = 0.25) \n  \n#Train and test the model \nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0) \nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test) \n  \n#Evaluate the model \nprint(\"Accuracy:\", accuracy_score(y_test, y_pred))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a machine learning model to diagnose coronary heart disease using Python.\n\n### Input:\n\n\n### Output:\nimport pandas as pd \nimport numpy as np \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.ensemble import RandomForestClassifier \nfrom sklearn.metrics import accuracy_score \n  \n#Load the data\ndataset = pd.read_csv('<file_name>.csv')\nX = dataset.iloc[:, 0:10].values \ny = dataset.iloc[:, 10:].values \n  \n#Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y,random_state = 0,test_size = 0.25) \n  \n#Train and test the model \nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0) \nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test) \n  \n#Evaluate the model \nprint(\"Accuracy:\", accuracy_score(y_test, y_pred))"}
{"instruction":"Create a Python program to calculate the mean, median, and mode from a list of numbers.","input":"[1, 2, 3, 4, 5]","output":"# calculate the mean\ndef mean(nums):\n    return sum(nums) \/ len(nums)\n \n# calculate the median\ndef median(nums):\n    nums.sort()\n    if len(nums) % 2 == 0:\n        return (nums[len(nums)\/\/2-1] + nums[len(nums)\/\/2]) \/ 2\n    else:\n        return nums[len(nums)\/\/2]\n\n# calculate the mode\ndef mode(nums):\n    nums.sort()\n    max_count = 1\n    mode = nums[0]\n    current_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]: \n            current_count += 1\n            if current_count > max_count:\n                max_count = current_count \n                mode = nums[i]\n        else:\n            current_count = 1\n\n    return mode\n\n# test read \nnums = [1, 2, 3, 4, 5]\nprint(\"Mean = \", mean(nums))\nprint(\"Median = \", median(nums))\nprint(\"Mode = \", mode(nums))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the mean, median, and mode from a list of numbers.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\n# calculate the mean\ndef mean(nums):\n    return sum(nums) \/ len(nums)\n \n# calculate the median\ndef median(nums):\n    nums.sort()\n    if len(nums) % 2 == 0:\n        return (nums[len(nums)\/\/2-1] + nums[len(nums)\/\/2]) \/ 2\n    else:\n        return nums[len(nums)\/\/2]\n\n# calculate the mode\ndef mode(nums):\n    nums.sort()\n    max_count = 1\n    mode = nums[0]\n    current_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]: \n            current_count += 1\n            if current_count > max_count:\n                max_count = current_count \n                mode = nums[i]\n        else:\n            current_count = 1\n\n    return mode\n\n# test read \nnums = [1, 2, 3, 4, 5]\nprint(\"Mean = \", mean(nums))\nprint(\"Median = \", median(nums))\nprint(\"Mode = \", mode(nums))"}
{"instruction":"Create a Python program to check if a given string consists of only numeric digits.","input":"\"123456\"","output":"# Python program to check if a given string consists of only numeric digits \n\n# making a string with only digits \n# and assigning it to a variable \ntest_string = \"123456\"\n  \n# printing original string  \nprint(\"Original String: \" + test_string) \n  \n# using if condition to \n# Check if all values are numbers \nif test_string.isdigit(): \n    print(\"String contains only numbers\") \nelse : \n    print(\"String not contains only numbers\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to check if a given string consists of only numeric digits.\n\n### Input:\n\"123456\"\n\n### Output:\n# Python program to check if a given string consists of only numeric digits \n\n# making a string with only digits \n# and assigning it to a variable \ntest_string = \"123456\"\n  \n# printing original string  \nprint(\"Original String: \" + test_string) \n  \n# using if condition to \n# Check if all values are numbers \nif test_string.isdigit(): \n    print(\"String contains only numbers\") \nelse : \n    print(\"String not contains only numbers\")"}
{"instruction":"Create a class in Python that implements the iterator protocol and produces the sequence of the Fibonacci numbers when iterated.","input":"","output":"class Fibonacci:\n def __init__(self, n):\n  self.n = n\n  self.a = 0\n  self.b = 1\n \n def __iter__(self): \n  return self\n \n def __next__(self): \n  if self.a <= self.n:\n   temp = self.a\n   self.a, self.b = self.b, self.a + self.b \n   return temp \n  else:\n  raise StopIteration","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that implements the iterator protocol and produces the sequence of the Fibonacci numbers when iterated.\n\n### Input:\n\n\n### Output:\nclass Fibonacci:\n def __init__(self, n):\n  self.n = n\n  self.a = 0\n  self.b = 1\n \n def __iter__(self): \n  return self\n \n def __next__(self): \n  if self.a <= self.n:\n   temp = self.a\n   self.a, self.b = self.b, self.a + self.b \n   return temp \n  else:\n  raise StopIteration"}
{"instruction":"Create a class in Python that takes two arguments a 'name' and 'age' and returns a greeting.","input":"-","output":"class Greeting:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_greeting(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old.\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that takes two arguments a 'name' and 'age' and returns a greeting.\n\n### Input:\n-\n\n### Output:\nclass Greeting:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_greeting(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old.\""}
{"instruction":"Create an AI assistant in Python to detect whether a sentence is a question or not.","input":"Is this a question?","output":"import nltk\n\nsentence = \"Is this a question?\"\nwords = nltk.word_tokenize(sentence)\n\n# Check if the sentence ends with a question mark\nif words[-1] == '?':\n print(\"This is a question.\")\nelse:\n print(\"This is not a question.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI assistant in Python to detect whether a sentence is a question or not.\n\n### Input:\nIs this a question?\n\n### Output:\nimport nltk\n\nsentence = \"Is this a question?\"\nwords = nltk.word_tokenize(sentence)\n\n# Check if the sentence ends with a question mark\nif words[-1] == '?':\n print(\"This is a question.\")\nelse:\n print(\"This is not a question.\")"}
{"instruction":"Write a function in Python to query the database and return the row value.","input":"Table Name: People\nColumns: Name, Age, Gender","output":"def query_database(table_name, columns):\n    conn = sqlite3.connect('test.db') \n    cur = conn.cursor() \n\n    cur.execute(f\"SELECT {columns} FROM {table_name}\") \n\n    rows = cur.fetchall()\n\n    conn.close()\n    return rows","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to query the database and return the row value.\n\n### Input:\nTable Name: People\nColumns: Name, Age, Gender\n\n### Output:\ndef query_database(table_name, columns):\n    conn = sqlite3.connect('test.db') \n    cur = conn.cursor() \n\n    cur.execute(f\"SELECT {columns} FROM {table_name}\") \n\n    rows = cur.fetchall()\n\n    conn.close()\n    return rows"}
{"instruction":"Generate a Python program that takes in two lists and returns the intersection of the two.","input":"list1=[1,2,3]\nlist2=[2,3,4]","output":"def get_intersection(list1, list2):\n    intersection = []\n    for element in list1:\n        if element in list2:\n            intersection.append(element)\n    return intersection","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that takes in two lists and returns the intersection of the two.\n\n### Input:\nlist1=[1,2,3]\nlist2=[2,3,4]\n\n### Output:\ndef get_intersection(list1, list2):\n    intersection = []\n    for element in list1:\n        if element in list2:\n            intersection.append(element)\n    return intersection"}
{"instruction":"Develop an algorithm in Python, that prints out the Fibonacci sequence up to the number N.","input":"","output":"def Fibonacci(n): \n    a, b = 0, 1\n    while a < n: \n        print(a, end = ' ') \n        a, b = b, a + b\n    print() \n  \nn = 10\nFibonacci(n) \n\nOutput: 0 1 1 2 3 5 8","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python, that prints out the Fibonacci sequence up to the number N.\n\n### Input:\n\n\n### Output:\ndef Fibonacci(n): \n    a, b = 0, 1\n    while a < n: \n        print(a, end = ' ') \n        a, b = b, a + b\n    print() \n  \nn = 10\nFibonacci(n) \n\nOutput: 0 1 1 2 3 5 8"}
{"instruction":"Given a list of strings, write a python program to count the frequencies of each of the strings and return a list of tuples containing the string and its frequency.","input":"strings = ['apple', 'banana', 'apple', 'orange']","output":"def count_frequencies(strings):\n    frequencies = {}\n    for string in strings:\n        if string in frequencies:\n            frequencies[string] += 1\n        else:\n            frequencies[string] = 1\n    return [(string, frequency) for string, frequency in frequencies.items()]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of strings, write a python program to count the frequencies of each of the strings and return a list of tuples containing the string and its frequency.\n\n### Input:\nstrings = ['apple', 'banana', 'apple', 'orange']\n\n### Output:\ndef count_frequencies(strings):\n    frequencies = {}\n    for string in strings:\n        if string in frequencies:\n            frequencies[string] += 1\n        else:\n            frequencies[string] = 1\n    return [(string, frequency) for string, frequency in frequencies.items()]"}
{"instruction":"Design a Python program to solve the following problem: Given two strings of equal length, print the number of differences.","input":"str1 = \"abcd\", str2 = \"abcx\"","output":"def diff_characters(str1, str2):\n diff_count = 0\n\n for i in range(len(str1)):\n     if str1[i] != str2[i]:\n         diff_count += 1\n\n return diff_count\n\nstr1 = \"abcd\"\nstr2 = \"abcx\"\n\nprint(diff_characters(str1, str2))\n\n# Output: 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to solve the following problem: Given two strings of equal length, print the number of differences.\n\n### Input:\nstr1 = \"abcd\", str2 = \"abcx\"\n\n### Output:\ndef diff_characters(str1, str2):\n diff_count = 0\n\n for i in range(len(str1)):\n     if str1[i] != str2[i]:\n         diff_count += 1\n\n return diff_count\n\nstr1 = \"abcd\"\nstr2 = \"abcx\"\n\nprint(diff_characters(str1, str2))\n\n# Output: 1"}
{"instruction":"Develop a Python program that computes the sum of integers from 1 to n.","input":"","output":"def find_sum(n):\n  if n == 0:\n    return 0\n  return n + find_sum(n-1)\n\nn = int(input(\"Enter a number:\"))\n\nprint(\"The sum of integers from 1 to\", n,  \"is\",  find_sum(n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that computes the sum of integers from 1 to n.\n\n### Input:\n\n\n### Output:\ndef find_sum(n):\n  if n == 0:\n    return 0\n  return n + find_sum(n-1)\n\nn = int(input(\"Enter a number:\"))\n\nprint(\"The sum of integers from 1 to\", n,  \"is\",  find_sum(n))"}
{"instruction":"Contruct a python program that sorts an array of strings using BubbleSort algorithm.","input":"[\"Hello\", \"World\", \"Boo\", \"Yay\"]","output":"def bubbleSort(arr): \n    n = len(arr) \n  \n    for i in range(n):      \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n    return arr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nContruct a python program that sorts an array of strings using BubbleSort algorithm.\n\n### Input:\n[\"Hello\", \"World\", \"Boo\", \"Yay\"]\n\n### Output:\ndef bubbleSort(arr): \n    n = len(arr) \n  \n    for i in range(n):      \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n    return arr"}
{"instruction":"Write a web socket server in Python that publishes new events with an associated user id.","input":"Example data for the events: \n[\n {\n \"userId\": \"897jn43\",\n \"data\": {\n \"eventName\": \"tweet\",\n \"twId\": \"4235345\"\n }\n },\n {\n \"userId\": \"822nk63\",\n \"data\": {\n \"eventName\": \"view\",\n \"viewId\": \"6791\"\n }\n }\n]","output":"import asyncio\nimport websockets\n\nevents = []\n\nasync def handle_message(websocket):\n while True:\n data = await websocket.recv()\n events.append(data)\n\nasync def consumer_handler(websocket, path):\n await handle_message(websocket)\n\nstart_server = websockets.serve(consumer_handler, \"localhost\", 8765)\n\nasyncio.get_event_loop().run_until_complete(start_server)\nasyncio.get_event_loop().run_forever()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a web socket server in Python that publishes new events with an associated user id.\n\n### Input:\nExample data for the events: \n[\n {\n \"userId\": \"897jn43\",\n \"data\": {\n \"eventName\": \"tweet\",\n \"twId\": \"4235345\"\n }\n },\n {\n \"userId\": \"822nk63\",\n \"data\": {\n \"eventName\": \"view\",\n \"viewId\": \"6791\"\n }\n }\n]\n\n### Output:\nimport asyncio\nimport websockets\n\nevents = []\n\nasync def handle_message(websocket):\n while True:\n data = await websocket.recv()\n events.append(data)\n\nasync def consumer_handler(websocket, path):\n await handle_message(websocket)\n\nstart_server = websockets.serve(consumer_handler, \"localhost\", 8765)\n\nasyncio.get_event_loop().run_until_complete(start_server)\nasyncio.get_event_loop().run_forever()"}
{"instruction":"Create a Python script which calculate the sum of all even numbers from 0 to 100.","input":"","output":"def calculateSumOfEvenNumbers(number):\n  sum = 0\n  for i in range(number+1):\n    if i % 2 == 0:\n      sum += i\n  return sum\n\nsum = calculateSumOfEvenNumbers(100)\nprint(sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script which calculate the sum of all even numbers from 0 to 100.\n\n### Input:\n\n\n### Output:\ndef calculateSumOfEvenNumbers(number):\n  sum = 0\n  for i in range(number+1):\n    if i % 2 == 0:\n      sum += i\n  return sum\n\nsum = calculateSumOfEvenNumbers(100)\nprint(sum)"}
{"instruction":"Generate a Python function that checks if a given number is an Armstrong number.","input":"","output":"def is_armstrong_number(num):   \n    n = len(str(num)) \n    # initialize sum  \n    temp = num  \n    sum_of_digits = 0\n  \n    # find sum of nth power of individual digits  \n    while temp > 0:  \n        digit = temp % 10  \n        sum_of_digits += digit ** n  \n        temp \/\/= 10  \n  \n    # if num is equal to sum_of_digits then the number is an Armstrong number  \n    if num == sum_of_digits:  \n        return True \n  \n    else: \n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that checks if a given number is an Armstrong number.\n\n### Input:\n\n\n### Output:\ndef is_armstrong_number(num):   \n    n = len(str(num)) \n    # initialize sum  \n    temp = num  \n    sum_of_digits = 0\n  \n    # find sum of nth power of individual digits  \n    while temp > 0:  \n        digit = temp % 10  \n        sum_of_digits += digit ** n  \n        temp \/\/= 10  \n  \n    # if num is equal to sum_of_digits then the number is an Armstrong number  \n    if num == sum_of_digits:  \n        return True \n  \n    else: \n        return False"}
{"instruction":"Create a python program to scrape a website and extract information about cities.","input":"The website contains a list of cities in a table with the following columns: City, Country, Population, Area","output":"import requests\nimport lxml.html as lh\n\n# Link of the website to get cities\nurl = 'http:\/\/example.com\/cities'\n\n# Create list of cities\ncities = []\n\n# Get web page\nresponse = requests.get(url)\n\n# Parse the web page to get the table\ndoc = lh.fromstring(response.content)\ntr_elements = doc.xpath('\/\/tr')\n\n# Loop through each row of the table\nfor tr in tr_elements[1:]:\n # Get the data from each column\n td = tr.xpath('td\/text()')\n name = td[0].strip()\n country = td[1].strip()\n population = td[2].strip()\n area = td[3].strip()\n\n # Add a city to the list\n cities.append((name,country,population,area))\n\n# Print the list of cities\nprint(cities)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to scrape a website and extract information about cities.\n\n### Input:\nThe website contains a list of cities in a table with the following columns: City, Country, Population, Area\n\n### Output:\nimport requests\nimport lxml.html as lh\n\n# Link of the website to get cities\nurl = 'http:\/\/example.com\/cities'\n\n# Create list of cities\ncities = []\n\n# Get web page\nresponse = requests.get(url)\n\n# Parse the web page to get the table\ndoc = lh.fromstring(response.content)\ntr_elements = doc.xpath('\/\/tr')\n\n# Loop through each row of the table\nfor tr in tr_elements[1:]:\n # Get the data from each column\n td = tr.xpath('td\/text()')\n name = td[0].strip()\n country = td[1].strip()\n population = td[2].strip()\n area = td[3].strip()\n\n # Add a city to the list\n cities.append((name,country,population,area))\n\n# Print the list of cities\nprint(cities)"}
{"instruction":"Modify the given Python code to optimize efficiency.","input":"def calculate_sum(nums):\n    total = 0\n    for n in nums:\n        total += n\n    return total","output":"def calculate_sum(nums):\n    return sum(nums)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the given Python code to optimize efficiency.\n\n### Input:\ndef calculate_sum(nums):\n    total = 0\n    for n in nums:\n        total += n\n    return total\n\n### Output:\ndef calculate_sum(nums):\n    return sum(nums)"}
{"instruction":"Test the following Python code and identify a bug","input":"not_a_number = 'A123'\nnumber = int(not_a_number)","output":"This code will result in a `ValueError` because `int()` cannot convert the string 'A123' into an integer. To fix this, you can use `try\/except` statements to catch the error and handle it appropriately.\n\ntry: \n number = int(not_a_number)\nexcept ValueError as e:\n print(f'Error converting {not_a_number} to an integer: {e}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTest the following Python code and identify a bug\n\n### Input:\nnot_a_number = 'A123'\nnumber = int(not_a_number)\n\n### Output:\nThis code will result in a `ValueError` because `int()` cannot convert the string 'A123' into an integer. To fix this, you can use `try\/except` statements to catch the error and handle it appropriately.\n\ntry: \n number = int(not_a_number)\nexcept ValueError as e:\n print(f'Error converting {not_a_number} to an integer: {e}')"}
{"instruction":"Suggest a completion for the following python code to randomly select an element from a given list.","input":"import random\n\ndef random_element(lst):","output":"import random\n\ndef random_element(lst):\n return random.choice(lst)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a completion for the following python code to randomly select an element from a given list.\n\n### Input:\nimport random\n\ndef random_element(lst):\n\n### Output:\nimport random\n\ndef random_element(lst):\n return random.choice(lst)"}
{"instruction":"Refactor a code snippet that creates a list of numbers from 1 to 10 in Python to use a list comprehension.","input":"Not applicable","output":"numbers = [x for x in range(1, 11)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRefactor a code snippet that creates a list of numbers from 1 to 10 in Python to use a list comprehension.\n\n### Input:\nNot applicable\n\n### Output:\nnumbers = [x for x in range(1, 11)]"}
{"instruction":"Write a Python program to print out the next day's date given today's date","input":"","output":"import datetime\n \ndef get_next_day_date():\n  today_date = datetime.datetime.now().date()\n  next_day_date = today_date + datetime.timedelta(days=1)\n  return next_day_date","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print out the next day's date given today's date\n\n### Input:\n\n\n### Output:\nimport datetime\n \ndef get_next_day_date():\n  today_date = datetime.datetime.now().date()\n  next_day_date = today_date + datetime.timedelta(days=1)\n  return next_day_date"}
{"instruction":"Generate different configurations for a web application using Python.","input":"Not applicable","output":"config = {\n 'templates': {\n 'index': 'templates\/index.html',\n 'about': 'templates\/about.html',\n 'contact': 'templates\/contact.html'\n },\n 'static': {\n 'css': 'static\/css\/main.css',\n 'js': 'static\/js\/main.js'\n },\n 'credentials': {\n 'db_host': 'localhost',\n 'db_port': 3306,\n 'db_user': 'root',\n 'db_pass': '123456'\n }\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate different configurations for a web application using Python.\n\n### Input:\nNot applicable\n\n### Output:\nconfig = {\n 'templates': {\n 'index': 'templates\/index.html',\n 'about': 'templates\/about.html',\n 'contact': 'templates\/contact.html'\n },\n 'static': {\n 'css': 'static\/css\/main.css',\n 'js': 'static\/js\/main.js'\n },\n 'credentials': {\n 'db_host': 'localhost',\n 'db_port': 3306,\n 'db_user': 'root',\n 'db_pass': '123456'\n }\n}"}
{"instruction":"Compare tasmin, tas, tasmax in a timeseries of GeoTiff files. The code includes functions to rasterize, sort files, and calculate the mean of the full domain. The code is set up to compare downscaled climate data to old climate data for the historical period. The output is a plot of the mean temperature or precipitation for the specified time period. The output is saved as a PNG file.","input":"","output":"# # # # # compare tasmin, tas, tasmax in a timeseries of GeoTiff files # # # # \n\ndef transform_from_latlon( lat, lon ):\n\t''' simple way to make an affine transform from lats and lons coords '''\n\tfrom affine import Affine\n\tlat = np.asarray( lat )\n\tlon = np.asarray(lon)\n\ttrans = Affine.translation(lon[0], lat[0])\n\tscale = Affine.scale(lon[1] - lon[0], lat[1] - lat[0])\n\treturn trans * scale\ndef rasterize( shapes, coords, latitude='latitude', longitude='longitude', fill=None, **kwargs ):\n\t'''\n\tRasterize a list of (geometry, fill_value) tuples onto the given\n\txarray coordinates. This only works for 1d latitude and longitude\n\tarrays.\n\t'''\n\tfrom rasterio import features\n\tif fill == None:\n\t\tfill = np.nan\n\ttransform = transform_from_latlon( coords[ latitude ], coords[ longitude ] )\n\tout_shape = ( len( coords[ latitude ] ), len( coords[ longitude ] ) )\n\traster = features.rasterize(shapes, out_shape=out_shape,\n\t\t\t\t\t\t\t\tfill=fill, transform=transform,\n\t\t\t\t\t\t\t\tdtype=float, **kwargs)\n\tspatial_coords = {latitude: coords[latitude], longitude: coords[longitude]}\n\treturn xr.DataArray(raster, coords=spatial_coords, dims=(latitude, longitude))\n\ndef sort_files( files, split_on='_', elem_month=-2, elem_year=-1 ):\n\t'''\n\tsort a list of files properly using the month and year parsed\n\tfrom the filename.  This is useful with SNAP data since the standard\n\tis to name files like '<prefix>_MM_YYYY.tif'.  If sorted using base\n\tPythons sort\/sorted functions, things will be sorted by the first char\n\tof the month, which makes thing go 1, 11, ... which sucks for timeseries\n\tthis sorts it properly following SNAP standards as the default settings.\n\n\tARGUMENTS:\n\t----------\n\tfiles = [list] list of `str` pathnames to be sorted by month and year. usually from glob.glob.\n\tsplit_on = [str] `str` character to split the filename on.  default:'_', SNAP standard.\n\telem_month = [int] slice element from resultant split filename list.  Follows Python slicing syntax.\n\t\tdefault:-2. For SNAP standard.\n\telem_year = [int] slice element from resultant split filename list.  Follows Python slicing syntax.\n\t\tdefault:-1. For SNAP standard.\n\n\tRETURNS:\n\t--------\n\tsorted `list` by month and year ascending. \n\n\t'''\n\timport pandas as pd\n\tmonths = [ int(os.path.basename( fn ).split('.')[0].split( split_on )[elem_month]) for fn in files ]\n\tyears = [ int(os.path.basename( fn ).split('.')[0].split( split_on )[elem_year]) for fn in files ]\n\tdf = pd.DataFrame( {'fn':files, 'month':months, 'year':years} )\n\tdf_sorted = df.sort_values( ['year', 'month' ] )\n\treturn df_sorted.fn.tolist()\ndef only_years( files, begin=1901, end=2100, split_on='_', elem_year=-1 ):\n\t'''\n\treturn new list of filenames where they are truncated to begin:end\n\n\tARGUMENTS:\n\t----------\n\tfiles = [list] list of `str` pathnames to be sorted by month and year. usually from glob.glob.\n\tbegin = [int] four digit integer year of the begin time default:1901\n\tend = [int] four digit integer year of the end time default:2100\n\tsplit_on = [str] `str` character to split the filename on.  default:'_', SNAP standard.\n\telem_year = [int] slice element from resultant split filename list.  Follows Python slicing syntax.\n\t\tdefault:-1. For SNAP standard.\n\n\tRETURNS:\n\t--------\n\tsliced `list` to begin and end year.\n\t'''\n\timport pandas as pd\n\tyears = [ int(os.path.basename( fn ).split('.')[0].split( split_on )[elem_year]) for fn in files ]\n\tdf = pd.DataFrame( { 'fn':files, 'year':years } )\n\tdf_slice = df[ (df.year >= begin ) & (df.year <= end ) ]\n\treturn df_slice.fn.tolist()\ndef masked_mean( fn, bounds=None ):\n\t''' get mean of the full domain since the data are already clipped \n\tmostly used for processing lots of files in parallel.'''\n\timport numpy as np\n\timport rasterio\n\t\t\n\twith rasterio.open( fn ) as rst:\n\t\tif bounds:\n\t\t\twindow = rst.window( *bounds )\n\t\telse:\n\t\t\twindow = rst.window( *rst.bounds )\n\t\tmask = (rst.read_masks( 1 ) == 0)\n\t\tarr = np.ma.masked_array( rst.read( 1, window=window ), mask=mask )\n\treturn np.mean( arr )\n\nif __name__ == '__main__':\n\timport os, glob\n\timport geopandas as gpd\n\timport numpy as np\n\timport xarray as xr\n\timport matplotlib\n\tmatplotlib.use( 'agg' )\n\tfrom matplotlib import pyplot as plt\n\tfrom pathos.mp_map import mp_map\n\timport pandas as pd\n\timport geopandas as gpd\n\t\n\t# args \/ set working dir\n\tbase_dir = '\/workspace\/Shared\/Tech_Projects\/EPSCoR_Southcentral\/project_data'\n\tos.chdir( base_dir )\n\t# scenarios = ['rcp60', 'rcp85']\n\tscenarios = ['historical']\n\tshp_fn = '\/workspace\/Shared\/Tech_Projects\/EPSCoR_Southcentral\/project_data\/SCTC_studyarea\/Kenai_StudyArea.shp'\n\tshp = gpd.read_file( shp_fn )\n\tbounds = shp.bounds\n\n\t# models = ['5ModelAvg','CRU_TS323','GFDL-CM3','GISS-E2-R','IPSL-CM5A-LR','MRI-CGCM3','NCAR-CCSM4']\n\t# models = ['GFDL-CM3','GISS-E2-R','IPSL-CM5A-LR','MRI-CGCM3','NCAR-CCSM4']\n\tmodels = ['ts323']\n\tvariables_list = [['pr']]# ['tasmax', 'tas', 'tasmin']]#,\n\t# models = ['CRU_TS323']\n\t# begin_end_groups = [[2016,2016],[2010,2020],[2095, 2100]]\n\tbegin_end_groups = [[1916, 1916],[1950, 1960],[1995, 2000]]\n\n\tfor scenario in scenarios:\n\t\tfor variables in variables_list:\n\t\t\tfor m in models:\n\t\t\t\tfor begin, end in begin_end_groups: # not fully wired-up yet\n\t\t\t\t\tif m == 'ts323':\n\t\t\t\t\t\told_dir = '\/Data\/Base_Data\/Climate\/AK_CAN_2km\/historical\/CRU\/CRU_TS32'\n\t\t\t\t\t\t# begin = 1950\n\t\t\t\t\t\t# end = 1965\n\n\t\t\t\t\telse:\n\t\t\t\t\t\tif scenario == 'historical':\n\t\t\t\t\t\t\told_dir = '\/Data\/Base_Data\/Climate\/AK_CAN_2km\/historical\/AR5_CMIP5_models'\n\t\t\t\t\t\t\t# begin = 1950\n\t\t\t\t\t\t\t# end = 1965\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\told_dir = '\/Data\/Base_Data\/Climate\/AK_CAN_2km\/projected\/AR5_CMIP5_models'\n\t\t\t\t\t\t\t# begin = 2095\n\t\t\t\t\t\t\t# end = 2100\n\n\t\t\t\t\tfigsize = (16,9)\n\t\t\t\t\tout = {}\n\t\t\t\t\tfor v in variables:\n\t\t\t\t\t\tpath = os.path.join( base_dir,'downscaled', m, scenario, v )\n\t\t\t\t\t\tprint( path )\n\t\t\t\t\t\tfiles = glob.glob( os.path.join( path, '*.tif' ) )\n\t\t\t\t\t\tfiles = sort_files( only_years( files, begin=begin, end=end, split_on='_', elem_year=-1 ) )\n\t\t\t\t\t\tout[ v ] = mp_map( masked_mean, files, nproc=4 )\n\t\t\t\t\t\tif v == 'tas' or v == 'pr':\n\t\t\t\t\t\t\tif m == 'ts323':\n\t\t\t\t\t\t\t\tpath = os.path.join( old_dir, v )\n\t\t\t\t\t\t\t\tprint( path )\n\t\t\t\t\t\t\telse:\t\n\t\t\t\t\t\t\t\tpath = os.path.join( old_dir, scenario, m, v )\n\n\t\t\t\t\t\t\tfiles = glob.glob( os.path.join( path, '*.tif' ) )\n\t\t\t\t\t\t\tfiles = sort_files( only_years( files, begin=begin, end=end, split_on='_', elem_year=-1 ) )\n\t\t\t\t\t\t\tout[ v+'_old' ] = mp_map( masked_mean, files, nproc=4 )\n\n\t\t\t\t\t\t\t# nofix\n\t\t\t\t\t\t\tpath = os.path.join( base_dir,'downscaled_pr_nofix', m, scenario, v )\n\t\t\t\t\t\t\tprint( path )\n\t\t\t\t\t\t\tfiles = glob.glob( os.path.join( path, '*.tif' ) )\n\t\t\t\t\t\t\tfiles = sort_files( only_years( files, begin=begin, end=end, split_on='_', elem_year=-1 ) )\n\t\t\t\t\t\t\tout[ v+'_nofix' ] = mp_map( masked_mean, files, nproc=4 )\n\t\t\t\t\t\t\t\n\t\t\t\t\tplot_df = pd.DataFrame( out )\n\t\t\t\t\tplot_df.index = pd.date_range( start=str(begin), end=str(end+1), freq='M' )\n\t\t\t\t\t\n\t\t\t\t\t# sort the columns for output plotting cleanliness:\n\t\t\t\t\tif 'tas' in variables:\n\t\t\t\t\t\tcol_list = ['tasmax', 'tas_old', 'tas', 'tasmin']\n\t\t\t\t\telif 'pr' in variables:\n\t\t\t\t\t\tcol_list = ['pr', 'pr_old', 'pr_nofix']\n\t\t\t\t\t\n\t\t\t\t\tplot_df = plot_df[ col_list ] # get em in the order for plotting\n\n\t\t\t\t\tif v == 'pr':\n\t\t\t\t\t\tplot_df = plot_df.round()[['pr','pr_old']]\n\n\t\t\t\t\t# now plot the dataframe\n\t\t\t\t\tif begin == end:\n\t\t\t\t\t\ttitle = 'EPSCoR SC AOI Temp Metrics {} {} {}'.format( m, scenario, begin )\n\t\t\t\t\telse:\n\t\t\t\t\t\ttitle = 'EPSCoR SC AOI Temp Metrics {} {} {} - {}'.format( m, scenario, begin, end )\n\n\t\t\t\t\tif 'tas' in variables:\n\t\t\t\t\t\tcolors = ['red', 'black', 'blue', 'red' ]\n\t\t\t\t\telse:\n\t\t\t\t\t\tcolors = [ 'blue', 'black', 'darkred' ]\n\n\t\t\t\t\tax = plot_df.plot( kind='line', title=title, figsize=figsize, color=colors )\n\n\t\t\t\t\toutput_dir = os.path.join( base_dir, 'compare_downscaling_versions_PR_no_fix' )\n\t\t\t\t\tif not os.path.exists( output_dir ):\n\t\t\t\t\t\tos.makedirs( output_dir )\n\n\t\t\t\t\t# now plot the dataframe\n\t\t\t\t\tout_metric_fn = 'temps'\n\t\t\t\t\tif 'pr' in variables:\n\t\t\t\t\t\tout_metric_fn = 'prec'\n\n\t\t\t\t\tif begin == end:\n\t\t\t\t\t\toutput_filename = os.path.join( output_dir,'mean_{}_epscor_sc_{}_{}_{}.png'.format( out_metric_fn, m, scenario, begin ) )\n\t\t\t\t\telse:\n\t\t\t\t\t\toutput_filename = os.path.join( output_dir,'mean_{}_epscor_sc_{}_{}_{}_{}.png'.format( out_metric_fn, m, scenario, begin, end ) )\n\t\t\t\t\tplt.savefig( output_filename, dpi=400 )\n\t\t\t\t\tplt.close()\n\n\n\n\n\n# # # PRISM TEST VERSION DIFFERENCES # # # # # # #\n# import rasterio\n# import numpy as np\n# import os, glob, itertools\n\n# base_path = '\/workspace\/Shared\/Tech_Projects\/EPSCoR_Southcentral\/project_data\/prism\/raw_prism'\n# variables = [ 'tmax', 'tmin' ]\n\n# for variable in variables:\n# \tak_olds = sorted( glob.glob( os.path.join( base_path, 'prism_raw_older', 'ak', variable, '*.asc' ) ) )\n# \tak_news = sorted( glob.glob( os.path.join( base_path, 'prism_raw_2016', 'ak', variable, '*.asc' ) ) )\n\n# \tolds = np.array([ rasterio.open( i ).read( 1 ) for i in ak_olds if '_14' not in i ])\n# \tnews = np.array([ rasterio.open( i ).read( 1 ) *.10 for i in ak_news if '_14' not in i ])\n\n# \tout = olds - news\n# \tout[ (olds == -9999.0) | (news == -9999.0) ] = 0\n\n# \tuniques = np.unique( out )\n# \tuniques[ uniques > 0.01 ]\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompare tasmin, tas, tasmax in a timeseries of GeoTiff files. The code includes functions to rasterize, sort files, and calculate the mean of the full domain. The code is set up to compare downscaled climate data to old climate data for the historical period. The output is a plot of the mean temperature or precipitation for the specified time period. The output is saved as a PNG file.\n\n### Input:\n\n\n### Output:\n# # # # # compare tasmin, tas, tasmax in a timeseries of GeoTiff files # # # # \n\ndef transform_from_latlon( lat, lon ):\n\t''' simple way to make an affine transform from lats and lons coords '''\n\tfrom affine import Affine\n\tlat = np.asarray( lat )\n\tlon = np.asarray(lon)\n\ttrans = Affine.translation(lon[0], lat[0])\n\tscale = Affine.scale(lon[1] - lon[0], lat[1] - lat[0])\n\treturn trans * scale\ndef rasterize( shapes, coords, latitude='latitude', longitude='longitude', fill=None, **kwargs ):\n\t'''\n\tRasterize a list of (geometry, fill_value) tuples onto the given\n\txarray coordinates. This only works for 1d latitude and longitude\n\tarrays.\n\t'''\n\tfrom rasterio import features\n\tif fill == None:\n\t\tfill = np.nan\n\ttransform = transform_from_latlon( coords[ latitude ], coords[ longitude ] )\n\tout_shape = ( len( coords[ latitude ] ), len( coords[ longitude ] ) )\n\traster = features.rasterize(shapes, out_shape=out_shape,\n\t\t\t\t\t\t\t\tfill=fill, transform=transform,\n\t\t\t\t\t\t\t\tdtype=float, **kwargs)\n\tspatial_coords = {latitude: coords[latitude], longitude: coords[longitude]}\n\treturn xr.DataArray(raster, coords=spatial_coords, dims=(latitude, longitude))\n\ndef sort_files( files, split_on='_', elem_month=-2, elem_year=-1 ):\n\t'''\n\tsort a list of files properly using the month and year parsed\n\tfrom the filename.  This is useful with SNAP data since the standard\n\tis to name files like '<prefix>_MM_YYYY.tif'.  If sorted using base\n\tPythons sort\/sorted functions, things will be sorted by the first char\n\tof the month, which makes thing go 1, 11, ... which sucks for timeseries\n\tthis sorts it properly following SNAP standards as the default settings.\n\n\tARGUMENTS:\n\t----------\n\tfiles = [list] list of `str` pathnames to be sorted by month and year. usually from glob.glob.\n\tsplit_on = [str] `str` character to split the filename on.  default:'_', SNAP standard.\n\telem_month = [int] slice element from resultant split filename list.  Follows Python slicing syntax.\n\t\tdefault:-2. For SNAP standard.\n\telem_year = [int] slice element from resultant split filename list.  Follows Python slicing syntax.\n\t\tdefault:-1. For SNAP standard.\n\n\tRETURNS:\n\t--------\n\tsorted `list` by month and year ascending. \n\n\t'''\n\timport pandas as pd\n\tmonths = [ int(os.path.basename( fn ).split('.')[0].split( split_on )[elem_month]) for fn in files ]\n\tyears = [ int(os.path.basename( fn ).split('.')[0].split( split_on )[elem_year]) for fn in files ]\n\tdf = pd.DataFrame( {'fn':files, 'month':months, 'year':years} )\n\tdf_sorted = df.sort_values( ['year', 'month' ] )\n\treturn df_sorted.fn.tolist()\ndef only_years( files, begin=1901, end=2100, split_on='_', elem_year=-1 ):\n\t'''\n\treturn new list of filenames where they are truncated to begin:end\n\n\tARGUMENTS:\n\t----------\n\tfiles = [list] list of `str` pathnames to be sorted by month and year. usually from glob.glob.\n\tbegin = [int] four digit integer year of the begin time default:1901\n\tend = [int] four digit integer year of the end time default:2100\n\tsplit_on = [str] `str` character to split the filename on.  default:'_', SNAP standard.\n\telem_year = [int] slice element from resultant split filename list.  Follows Python slicing syntax.\n\t\tdefault:-1. For SNAP standard.\n\n\tRETURNS:\n\t--------\n\tsliced `list` to begin and end year.\n\t'''\n\timport pandas as pd\n\tyears = [ int(os.path.basename( fn ).split('.')[0].split( split_on )[elem_year]) for fn in files ]\n\tdf = pd.DataFrame( { 'fn':files, 'year':years } )\n\tdf_slice = df[ (df.year >= begin ) & (df.year <= end ) ]\n\treturn df_slice.fn.tolist()\ndef masked_mean( fn, bounds=None ):\n\t''' get mean of the full domain since the data are already clipped \n\tmostly used for processing lots of files in parallel.'''\n\timport numpy as np\n\timport rasterio\n\t\t\n\twith rasterio.open( fn ) as rst:\n\t\tif bounds:\n\t\t\twindow = rst.window( *bounds )\n\t\telse:\n\t\t\twindow = rst.window( *rst.bounds )\n\t\tmask = (rst.read_masks( 1 ) == 0)\n\t\tarr = np.ma.masked_array( rst.read( 1, window=window ), mask=mask )\n\treturn np.mean( arr )\n\nif __name__ == '__main__':\n\timport os, glob\n\timport geopandas as gpd\n\timport numpy as np\n\timport xarray as xr\n\timport matplotlib\n\tmatplotlib.use( 'agg' )\n\tfrom matplotlib import pyplot as plt\n\tfrom pathos.mp_map import mp_map\n\timport pandas as pd\n\timport geopandas as gpd\n\t\n\t# args \/ set working dir\n\tbase_dir = '\/workspace\/Shared\/Tech_Projects\/EPSCoR_Southcentral\/project_data'\n\tos.chdir( base_dir )\n\t# scenarios = ['rcp60', 'rcp85']\n\tscenarios = ['historical']\n\tshp_fn = '\/workspace\/Shared\/Tech_Projects\/EPSCoR_Southcentral\/project_data\/SCTC_studyarea\/Kenai_StudyArea.shp'\n\tshp = gpd.read_file( shp_fn )\n\tbounds = shp.bounds\n\n\t# models = ['5ModelAvg','CRU_TS323','GFDL-CM3','GISS-E2-R','IPSL-CM5A-LR','MRI-CGCM3','NCAR-CCSM4']\n\t# models = ['GFDL-CM3','GISS-E2-R','IPSL-CM5A-LR','MRI-CGCM3','NCAR-CCSM4']\n\tmodels = ['ts323']\n\tvariables_list = [['pr']]# ['tasmax', 'tas', 'tasmin']]#,\n\t# models = ['CRU_TS323']\n\t# begin_end_groups = [[2016,2016],[2010,2020],[2095, 2100]]\n\tbegin_end_groups = [[1916, 1916],[1950, 1960],[1995, 2000]]\n\n\tfor scenario in scenarios:\n\t\tfor variables in variables_list:\n\t\t\tfor m in models:\n\t\t\t\tfor begin, end in begin_end_groups: # not fully wired-up yet\n\t\t\t\t\tif m == 'ts323':\n\t\t\t\t\t\told_dir = '\/Data\/Base_Data\/Climate\/AK_CAN_2km\/historical\/CRU\/CRU_TS32'\n\t\t\t\t\t\t# begin = 1950\n\t\t\t\t\t\t# end = 1965\n\n\t\t\t\t\telse:\n\t\t\t\t\t\tif scenario == 'historical':\n\t\t\t\t\t\t\told_dir = '\/Data\/Base_Data\/Climate\/AK_CAN_2km\/historical\/AR5_CMIP5_models'\n\t\t\t\t\t\t\t# begin = 1950\n\t\t\t\t\t\t\t# end = 1965\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\told_dir = '\/Data\/Base_Data\/Climate\/AK_CAN_2km\/projected\/AR5_CMIP5_models'\n\t\t\t\t\t\t\t# begin = 2095\n\t\t\t\t\t\t\t# end = 2100\n\n\t\t\t\t\tfigsize = (16,9)\n\t\t\t\t\tout = {}\n\t\t\t\t\tfor v in variables:\n\t\t\t\t\t\tpath = os.path.join( base_dir,'downscaled', m, scenario, v )\n\t\t\t\t\t\tprint( path )\n\t\t\t\t\t\tfiles = glob.glob( os.path.join( path, '*.tif' ) )\n\t\t\t\t\t\tfiles = sort_files( only_years( files, begin=begin, end=end, split_on='_', elem_year=-1 ) )\n\t\t\t\t\t\tout[ v ] = mp_map( masked_mean, files, nproc=4 )\n\t\t\t\t\t\tif v == 'tas' or v == 'pr':\n\t\t\t\t\t\t\tif m == 'ts323':\n\t\t\t\t\t\t\t\tpath = os.path.join( old_dir, v )\n\t\t\t\t\t\t\t\tprint( path )\n\t\t\t\t\t\t\telse:\t\n\t\t\t\t\t\t\t\tpath = os.path.join( old_dir, scenario, m, v )\n\n\t\t\t\t\t\t\tfiles = glob.glob( os.path.join( path, '*.tif' ) )\n\t\t\t\t\t\t\tfiles = sort_files( only_years( files, begin=begin, end=end, split_on='_', elem_year=-1 ) )\n\t\t\t\t\t\t\tout[ v+'_old' ] = mp_map( masked_mean, files, nproc=4 )\n\n\t\t\t\t\t\t\t# nofix\n\t\t\t\t\t\t\tpath = os.path.join( base_dir,'downscaled_pr_nofix', m, scenario, v )\n\t\t\t\t\t\t\tprint( path )\n\t\t\t\t\t\t\tfiles = glob.glob( os.path.join( path, '*.tif' ) )\n\t\t\t\t\t\t\tfiles = sort_files( only_years( files, begin=begin, end=end, split_on='_', elem_year=-1 ) )\n\t\t\t\t\t\t\tout[ v+'_nofix' ] = mp_map( masked_mean, files, nproc=4 )\n\t\t\t\t\t\t\t\n\t\t\t\t\tplot_df = pd.DataFrame( out )\n\t\t\t\t\tplot_df.index = pd.date_range( start=str(begin), end=str(end+1), freq='M' )\n\t\t\t\t\t\n\t\t\t\t\t# sort the columns for output plotting cleanliness:\n\t\t\t\t\tif 'tas' in variables:\n\t\t\t\t\t\tcol_list = ['tasmax', 'tas_old', 'tas', 'tasmin']\n\t\t\t\t\telif 'pr' in variables:\n\t\t\t\t\t\tcol_list = ['pr', 'pr_old', 'pr_nofix']\n\t\t\t\t\t\n\t\t\t\t\tplot_df = plot_df[ col_list ] # get em in the order for plotting\n\n\t\t\t\t\tif v == 'pr':\n\t\t\t\t\t\tplot_df = plot_df.round()[['pr','pr_old']]\n\n\t\t\t\t\t# now plot the dataframe\n\t\t\t\t\tif begin == end:\n\t\t\t\t\t\ttitle = 'EPSCoR SC AOI Temp Metrics {} {} {}'.format( m, scenario, begin )\n\t\t\t\t\telse:\n\t\t\t\t\t\ttitle = 'EPSCoR SC AOI Temp Metrics {} {} {} - {}'.format( m, scenario, begin, end )\n\n\t\t\t\t\tif 'tas' in variables:\n\t\t\t\t\t\tcolors = ['red', 'black', 'blue', 'red' ]\n\t\t\t\t\telse:\n\t\t\t\t\t\tcolors = [ 'blue', 'black', 'darkred' ]\n\n\t\t\t\t\tax = plot_df.plot( kind='line', title=title, figsize=figsize, color=colors )\n\n\t\t\t\t\toutput_dir = os.path.join( base_dir, 'compare_downscaling_versions_PR_no_fix' )\n\t\t\t\t\tif not os.path.exists( output_dir ):\n\t\t\t\t\t\tos.makedirs( output_dir )\n\n\t\t\t\t\t# now plot the dataframe\n\t\t\t\t\tout_metric_fn = 'temps'\n\t\t\t\t\tif 'pr' in variables:\n\t\t\t\t\t\tout_metric_fn = 'prec'\n\n\t\t\t\t\tif begin == end:\n\t\t\t\t\t\toutput_filename = os.path.join( output_dir,'mean_{}_epscor_sc_{}_{}_{}.png'.format( out_metric_fn, m, scenario, begin ) )\n\t\t\t\t\telse:\n\t\t\t\t\t\toutput_filename = os.path.join( output_dir,'mean_{}_epscor_sc_{}_{}_{}_{}.png'.format( out_metric_fn, m, scenario, begin, end ) )\n\t\t\t\t\tplt.savefig( output_filename, dpi=400 )\n\t\t\t\t\tplt.close()\n\n\n\n\n\n# # # PRISM TEST VERSION DIFFERENCES # # # # # # #\n# import rasterio\n# import numpy as np\n# import os, glob, itertools\n\n# base_path = '\/workspace\/Shared\/Tech_Projects\/EPSCoR_Southcentral\/project_data\/prism\/raw_prism'\n# variables = [ 'tmax', 'tmin' ]\n\n# for variable in variables:\n# \tak_olds = sorted( glob.glob( os.path.join( base_path, 'prism_raw_older', 'ak', variable, '*.asc' ) ) )\n# \tak_news = sorted( glob.glob( os.path.join( base_path, 'prism_raw_2016', 'ak', variable, '*.asc' ) ) )\n\n# \tolds = np.array([ rasterio.open( i ).read( 1 ) for i in ak_olds if '_14' not in i ])\n# \tnews = np.array([ rasterio.open( i ).read( 1 ) *.10 for i in ak_news if '_14' not in i ])\n\n# \tout = olds - news\n# \tout[ (olds == -9999.0) | (news == -9999.0) ] = 0\n\n# \tuniques = np.unique( out )\n# \tuniques[ uniques > 0.01 ]\n"}
{"instruction":"Construct a for loop in Python to print the characters in a string.","input":"\"Hello World\"","output":"for char in \"Hello World\":\n    print(char)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a for loop in Python to print the characters in a string.\n\n### Input:\n\"Hello World\"\n\n### Output:\nfor char in \"Hello World\":\n    print(char)"}
{"instruction":"Create a Python module that stores information about books (title, author and year). It should allow you to add, delete and search for books.","input":"Not applicable","output":"class Book:\n def __init__(self, title, author, year):\n self.title = title\n self.author = author\n self.year = year\n\n def __str__(self):\n return f'{self.title} by {self.author} ({self.year})'\n\nclass BookDB:\n def __init__(self):\n self.books = []\n\n def add_book(self, book):\n self.books.append(book)\n\n def delete_book(self, title):\n self.books = [book for book in self.books if book.title != title]\n\n def search_book(self, title):\n for book in self.books:\n if book.title == title:\n return book\n\n return None","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module that stores information about books (title, author and year). It should allow you to add, delete and search for books.\n\n### Input:\nNot applicable\n\n### Output:\nclass Book:\n def __init__(self, title, author, year):\n self.title = title\n self.author = author\n self.year = year\n\n def __str__(self):\n return f'{self.title} by {self.author} ({self.year})'\n\nclass BookDB:\n def __init__(self):\n self.books = []\n\n def add_book(self, book):\n self.books.append(book)\n\n def delete_book(self, title):\n self.books = [book for book in self.books if book.title != title]\n\n def search_book(self, title):\n for book in self.books:\n if book.title == title:\n return book\n\n return None"}
{"instruction":"Can you suggest a Python class to store and validate data?","input":"","output":"class DataStorage:\n    def __init__(self, data):\n        self.data = data\n        self._validate_data()\n    \n    def _validate_data(self):\n        \"\"\"Validates the data stored in the DataStorage object.\"\"\"\n        for key, value in self.data.items():\n            if not isinstance(value, str):\n                raise TypeError('All data must be strings')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you suggest a Python class to store and validate data?\n\n### Input:\n\n\n### Output:\nclass DataStorage:\n    def __init__(self, data):\n        self.data = data\n        self._validate_data()\n    \n    def _validate_data(self):\n        \"\"\"Validates the data stored in the DataStorage object.\"\"\"\n        for key, value in self.data.items():\n            if not isinstance(value, str):\n                raise TypeError('All data must be strings')"}
{"instruction":"Please provide a python code snippet that counts the number of words in a given sentence.","input":"my_string = \"This is a sentence with five words.\"","output":"my_string = \"This is a sentence with five words.\"\nwords = my_string.split(\" \")\nprint(len(words))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPlease provide a python code snippet that counts the number of words in a given sentence.\n\n### Input:\nmy_string = \"This is a sentence with five words.\"\n\n### Output:\nmy_string = \"This is a sentence with five words.\"\nwords = my_string.split(\" \")\nprint(len(words))"}
{"instruction":"Design a solution using python to find the sum of all even numbers between x and y","input":"x=2, y=8","output":"def even_sum(x, y): \n    \n    result=0 \n    for i in range(x,y+1): \n        if i%2 == 0: \n            result += i\n            \n    return result \n  \nx=2\ny=8\nsum = even_sum(x,y) \nprint(sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a solution using python to find the sum of all even numbers between x and y\n\n### Input:\nx=2, y=8\n\n### Output:\ndef even_sum(x, y): \n    \n    result=0 \n    for i in range(x,y+1): \n        if i%2 == 0: \n            result += i\n            \n    return result \n  \nx=2\ny=8\nsum = even_sum(x,y) \nprint(sum)"}
{"instruction":"Write a Python program to detect duplicate values in a list.","input":"my_list = [1, 3, 5, 6, 3, 4, 7, 5]","output":"seen = set()\nduplicates = []\nfor item in my_list:\n if item in seen:\n duplicates.append(item)\n else:\n seen.add(item)\n\nprint(duplicates)\n# Output: [3, 5]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to detect duplicate values in a list.\n\n### Input:\nmy_list = [1, 3, 5, 6, 3, 4, 7, 5]\n\n### Output:\nseen = set()\nduplicates = []\nfor item in my_list:\n if item in seen:\n duplicates.append(item)\n else:\n seen.add(item)\n\nprint(duplicates)\n# Output: [3, 5]"}
{"instruction":"Construct a Python code to combine the elements of two given list and return a sorted union list.","input":"input_list_1: [4, 10, 2]\ninput_list_2: [10, 2, 15]","output":"def union_list(list1, list2): \n    list3 = list1 + list2 \n    list3.sort() \n    return list3 \n    \nunion_list(input_list_1, input_list_2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python code to combine the elements of two given list and return a sorted union list.\n\n### Input:\ninput_list_1: [4, 10, 2]\ninput_list_2: [10, 2, 15]\n\n### Output:\ndef union_list(list1, list2): \n    list3 = list1 + list2 \n    list3.sort() \n    return list3 \n    \nunion_list(input_list_1, input_list_2)"}
{"instruction":"Given three numbers, write a Python program that prints the largest among them.","input":"","output":"def max_of_three(x, y, z):\n    max_num = x\n    if y > max_num:\n        max_num = y\n    if z > max_num:\n        max_num = z\n    return max_num","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven three numbers, write a Python program that prints the largest among them.\n\n### Input:\n\n\n### Output:\ndef max_of_three(x, y, z):\n    max_num = x\n    if y > max_num:\n        max_num = y\n    if z > max_num:\n        max_num = z\n    return max_num"}
{"instruction":"Write a Python program to print Hello World ten times.","input":"Not applicable","output":"for i in range(10):\n  print(\"Hello World\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print Hello World ten times.\n\n### Input:\nNot applicable\n\n### Output:\nfor i in range(10):\n  print(\"Hello World\")"}
{"instruction":"Design an inverted index in Python for searching a collection of documents.","input":"Not applicable","output":"import os\nimport collections\n\ndef create_inverted_index(documents):\n    inverted_index = collections.defaultdict(list)\n\n    for doc_id, document in enumerate(documents):\n        # Go through each word in the document\n        for word in document.split():\n            # Add the doc_id to the entry in the inverted_index\n            # for this word\n            inverted_index[word].append(doc_id)\n\n    return inverted_index\n\nif __name__ == \"__main__\":\n    documents = [\n    \"It was the best of times, it was the worst of times\",\n    \"It was the age of wisdom, it was the age of foolishness\",\n    \"It was the epoch of belief, it was the epoch of incredulity\" \n    ]\n\n    inverted_index = create_inverted_index(documents)\n    print(inverted_index)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an inverted index in Python for searching a collection of documents.\n\n### Input:\nNot applicable\n\n### Output:\nimport os\nimport collections\n\ndef create_inverted_index(documents):\n    inverted_index = collections.defaultdict(list)\n\n    for doc_id, document in enumerate(documents):\n        # Go through each word in the document\n        for word in document.split():\n            # Add the doc_id to the entry in the inverted_index\n            # for this word\n            inverted_index[word].append(doc_id)\n\n    return inverted_index\n\nif __name__ == \"__main__\":\n    documents = [\n    \"It was the best of times, it was the worst of times\",\n    \"It was the age of wisdom, it was the age of foolishness\",\n    \"It was the epoch of belief, it was the epoch of incredulity\" \n    ]\n\n    inverted_index = create_inverted_index(documents)\n    print(inverted_index)"}
{"instruction":"Create a function in Python that takes in a list of words and returns the most common pair of consecutive words as a tuple.","input":"words = ['content', 'creation', 'digital', 'content', 'management', 'system']","output":"def most_common_pair(words):\n count = {}\n\n # Iterate through the words\n for i in range(len(words) - 1):\n # Create a key by concatenating the two words\n key = words[i] + ' ' + words[i + 1]\n # Increment the count for the key\n if key in count:\n count[key] += 1\n else:\n count[key] = 1\n # Find the word with the highest count\n max_count = 0\n max_pair = None\n for word, c in count.items():\n if c > max_count:\n max_count = c\n max_pair = word\n\n # Return the word with the highest count\n return max_pair\n\nresult = most_common_pair(words)\nprint(result) # Output: \"content creation\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes in a list of words and returns the most common pair of consecutive words as a tuple.\n\n### Input:\nwords = ['content', 'creation', 'digital', 'content', 'management', 'system']\n\n### Output:\ndef most_common_pair(words):\n count = {}\n\n # Iterate through the words\n for i in range(len(words) - 1):\n # Create a key by concatenating the two words\n key = words[i] + ' ' + words[i + 1]\n # Increment the count for the key\n if key in count:\n count[key] += 1\n else:\n count[key] = 1\n # Find the word with the highest count\n max_count = 0\n max_pair = None\n for word, c in count.items():\n if c > max_count:\n max_count = c\n max_pair = word\n\n # Return the word with the highest count\n return max_pair\n\nresult = most_common_pair(words)\nprint(result) # Output: \"content creation\""}
{"instruction":"Generate a Python program that prints out the highest prime factor for each integer between 1 and 10.","input":"Not applicable","output":"def prime_factor(n):\n i = 2\n while i * i <= n:\n if n % i:\n i += 1\n else:\n n \/\/= i\n return n\n\nfor num in range(1, 11):\n factor = prime_factor(num)\n print(f\"The highest prime factor of {num} is {factor}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that prints out the highest prime factor for each integer between 1 and 10.\n\n### Input:\nNot applicable\n\n### Output:\ndef prime_factor(n):\n i = 2\n while i * i <= n:\n if n % i:\n i += 1\n else:\n n \/\/= i\n return n\n\nfor num in range(1, 11):\n factor = prime_factor(num)\n print(f\"The highest prime factor of {num} is {factor}\")"}
{"instruction":"Create a Python program to print out the sum of all even numbers between the given range, inclusive.","input":"start = 2\nend = 10","output":"def sum_even_numbers(start, end):\n result = 0\n for n in range(start, end+1):\n if n % 2 == 0:\n result += n\n return result\n\nprint(sum_even_numbers(2, 10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print out the sum of all even numbers between the given range, inclusive.\n\n### Input:\nstart = 2\nend = 10\n\n### Output:\ndef sum_even_numbers(start, end):\n result = 0\n for n in range(start, end+1):\n if n % 2 == 0:\n result += n\n return result\n\nprint(sum_even_numbers(2, 10))"}
{"instruction":"Can you create an algorithm in Python to calculate the sharpe ratio?","input":"A daily return of a stock:\n2.3%, 3.3%, 8.5%, -2.3%, -1.1%, 5.3%, 3.2%, 4.2%, -3.1%, 2.1%","output":"import numpy as np\n\n# Inputting daily returns\nret = np.array([0.023, 0.033, 0.085, -0.023, -0.011, 0.053, 0.032, 0.042, -0.031, 0.021])\n\n# Calculate the average returns\navg_returns = np.mean(ret)\n\n# Survey the volatility of the portfolio\nstd_returns = np.std(ret)\n\n# Calculate the Sharpe Ratio\nSharpe_Ratio = avg_returns \/ std_returns\n\nprint('The Sharpe ratio is ', Sharpe_Ratio)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you create an algorithm in Python to calculate the sharpe ratio?\n\n### Input:\nA daily return of a stock:\n2.3%, 3.3%, 8.5%, -2.3%, -1.1%, 5.3%, 3.2%, 4.2%, -3.1%, 2.1%\n\n### Output:\nimport numpy as np\n\n# Inputting daily returns\nret = np.array([0.023, 0.033, 0.085, -0.023, -0.011, 0.053, 0.032, 0.042, -0.031, 0.021])\n\n# Calculate the average returns\navg_returns = np.mean(ret)\n\n# Survey the volatility of the portfolio\nstd_returns = np.std(ret)\n\n# Calculate the Sharpe Ratio\nSharpe_Ratio = avg_returns \/ std_returns\n\nprint('The Sharpe ratio is ', Sharpe_Ratio)"}
{"instruction":"Create a Python program to check if a string ends with a given substring.","input":"s = 'Hello World', substring = 'ld'","output":"def endswith(s, substring): \n    return s.endswith(substring) \n\n\ns = 'Hello World'\nsubstring = 'ld'\nprint(endswith(s, substring)) # prints True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to check if a string ends with a given substring.\n\n### Input:\ns = 'Hello World', substring = 'ld'\n\n### Output:\ndef endswith(s, substring): \n    return s.endswith(substring) \n\n\ns = 'Hello World'\nsubstring = 'ld'\nprint(endswith(s, substring)) # prints True"}
{"instruction":"Create a function in Python to calculate the number of hours a worker worked in a week given the number of hours worked in a day.","input":"Number of hours worked per day: 7","output":"def hours_worked_week(hours_per_day):\n    hours_worked_week = hours_per_day * 7\n    return hours_worked_week","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to calculate the number of hours a worker worked in a week given the number of hours worked in a day.\n\n### Input:\nNumber of hours worked per day: 7\n\n### Output:\ndef hours_worked_week(hours_per_day):\n    hours_worked_week = hours_per_day * 7\n    return hours_worked_week"}
{"instruction":"Create a Python program to output the Fibonacci sequence until the value is greater than 2000.","input":"","output":"def fibonacciUntil2000(): \n  f1 = 0\n  f2 = 1\n  print(f1)\n  print(f2)\n  while (f1 + f2) <= 2000: \n    f3 = f1 + f2\n    f1 = f2 \n    f2 = f3\n    print(f3)\n\nfibonacciUntil2000()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to output the Fibonacci sequence until the value is greater than 2000.\n\n### Input:\n\n\n### Output:\ndef fibonacciUntil2000(): \n  f1 = 0\n  f2 = 1\n  print(f1)\n  print(f2)\n  while (f1 + f2) <= 2000: \n    f3 = f1 + f2\n    f1 = f2 \n    f2 = f3\n    print(f3)\n\nfibonacciUntil2000()"}
{"instruction":"Write an algorithm in Python to find the maximum and minimum of two given numbers.","input":"a = 10, b = 12","output":"def max_and_min(a,b):\n    \"\"\"Function to find the maximum and minimum of two given numbers.\"\"\"\n    max = a if a > b else b\n    min = a if a < b else b\n    return max, min\n\n#Example:\nprint(\"Maximum is: \",max_and_min(a,b)[0])\nprint(\"Minimum is: \",max_and_min(a,b)[1])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to find the maximum and minimum of two given numbers.\n\n### Input:\na = 10, b = 12\n\n### Output:\ndef max_and_min(a,b):\n    \"\"\"Function to find the maximum and minimum of two given numbers.\"\"\"\n    max = a if a > b else b\n    min = a if a < b else b\n    return max, min\n\n#Example:\nprint(\"Maximum is: \",max_and_min(a,b)[0])\nprint(\"Minimum is: \",max_and_min(a,b)[1])"}
{"instruction":"Write a Python program to remove unnecessary punctuation marks from a string.","input":"","output":"#Function to remove all punctuations from a string\ndef remove_punctuations(text): \n    for punctuation in '!\"#$%&\\'()*+,-.\/:;<=>?@[\\\\]^_`{|}~':\n        text = text.replace(punctuation, '')\n    return text\n \n#input string\nstr = \"It's a pleasure to meet you!!!\"\n \n#calling the function\nresult = remove_punctuations(str)\n \n#printing the result\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to remove unnecessary punctuation marks from a string.\n\n### Input:\n\n\n### Output:\n#Function to remove all punctuations from a string\ndef remove_punctuations(text): \n    for punctuation in '!\"#$%&\\'()*+,-.\/:;<=>?@[\\\\]^_`{|}~':\n        text = text.replace(punctuation, '')\n    return text\n \n#input string\nstr = \"It's a pleasure to meet you!!!\"\n \n#calling the function\nresult = remove_punctuations(str)\n \n#printing the result\nprint(result)"}
{"instruction":"Write a Socket program in Python to listen for messages on port 8080 and echo the received message.","input":"Not applicable","output":"import socket\n\nHOST = 'localhost'\nPORT = 8080\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind((HOST, PORT))\ns.listen()\n\nconn, addr = s.accept()\nwith conn:\n print('Connected by', addr)\n while True:\n data = conn.recv(1024)\n if not data:\n break\n print('Received:', data.decode('utf-8'))\n conn.send(data)\n\ns.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Socket program in Python to listen for messages on port 8080 and echo the received message.\n\n### Input:\nNot applicable\n\n### Output:\nimport socket\n\nHOST = 'localhost'\nPORT = 8080\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind((HOST, PORT))\ns.listen()\n\nconn, addr = s.accept()\nwith conn:\n print('Connected by', addr)\n while True:\n data = conn.recv(1024)\n if not data:\n break\n print('Received:', data.decode('utf-8'))\n conn.send(data)\n\ns.close()"}
{"instruction":"Write a python script to generate a dictionary containing numbers from 1 to n as keys and their square as values.","input":"","output":"def generate_dict(n):\n    d = {}\n    for i in range(1, n+1):\n        d[i] = i*i\n    return d","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to generate a dictionary containing numbers from 1 to n as keys and their square as values.\n\n### Input:\n\n\n### Output:\ndef generate_dict(n):\n    d = {}\n    for i in range(1, n+1):\n        d[i] = i*i\n    return d"}
{"instruction":"Generate a Python script for replacing a substring in a given string.","input":"String = \"Hello World\"\nSubstring = \"Hello\"\nReplacement Substring = \"Goodbye\"","output":"new_str = str.replace(\"Hello\",\"Goodbye\")\nprint(new_str)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script for replacing a substring in a given string.\n\n### Input:\nString = \"Hello World\"\nSubstring = \"Hello\"\nReplacement Substring = \"Goodbye\"\n\n### Output:\nnew_str = str.replace(\"Hello\",\"Goodbye\")\nprint(new_str)"}
{"instruction":"Generate a Python class for a basic To-Do list app.\nThe class should have four methods \u2013  print, add, edit and delete.","input":"Not applicable","output":"class ToDoList:\n def __init__(self):\n  self.tasks = []\n \n def print(self):\n  for i in range(len(self.tasks)):\n   print(f'{i+1}. {self.tasks[i]}')\n \n def add(self, task):\n  self.tasks.append(task)\n \n def edit(self, index, new_task):\n  self.tasks[index] = new_task\n \n def delete(self, index):\n  del self.tasks[index]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class for a basic To-Do list app.\nThe class should have four methods \u2013  print, add, edit and delete.\n\n### Input:\nNot applicable\n\n### Output:\nclass ToDoList:\n def __init__(self):\n  self.tasks = []\n \n def print(self):\n  for i in range(len(self.tasks)):\n   print(f'{i+1}. {self.tasks[i]}')\n \n def add(self, task):\n  self.tasks.append(task)\n \n def edit(self, index, new_task):\n  self.tasks[index] = new_task\n \n def delete(self, index):\n  del self.tasks[index]"}
{"instruction":"Create a function that implements a linear search algorithm in Python.","input":"x = 20\narr = [10, 8, 6, 4 2, 20]","output":"def linearSearch(arr, x): \n    for i in range(len(arr)): \n        if arr[i] == x: \n            return i \n    return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that implements a linear search algorithm in Python.\n\n### Input:\nx = 20\narr = [10, 8, 6, 4 2, 20]\n\n### Output:\ndef linearSearch(arr, x): \n    for i in range(len(arr)): \n        if arr[i] == x: \n            return i \n    return -1"}
{"instruction":"Create a python program that determines whether or not a number if prime","input":"","output":"def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that determines whether or not a number if prime\n\n### Input:\n\n\n### Output:\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"}
{"instruction":"Implement a function f() in Python that takes an argument n and prints the multiplication table of n","input":"","output":"def f(n):\n    for i in range(1, 11):\n        print(\"{} * {} = {}\".format(n, i, n*i))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function f() in Python that takes an argument n and prints the multiplication table of n\n\n### Input:\n\n\n### Output:\ndef f(n):\n    for i in range(1, 11):\n        print(\"{} * {} = {}\".format(n, i, n*i))"}
{"instruction":"Explain the purpose of using dictionaries in Python.","input":"","output":"Dictionaries are used in Python to store data in the form of key-value pairs, where each key is associated with a specific value. Dictionaries can be used for a variety of tasks including representing complex data, creating lookup tables, and organizing information. The key-value pairs in a dictionary are mutable, meaning they can be changed at any point in the program. Finally, dictionaries are very efficient in terms of memory space and can be used to store large amounts of data in a relatively small amount of space.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain the purpose of using dictionaries in Python.\n\n### Input:\n\n\n### Output:\nDictionaries are used in Python to store data in the form of key-value pairs, where each key is associated with a specific value. Dictionaries can be used for a variety of tasks including representing complex data, creating lookup tables, and organizing information. The key-value pairs in a dictionary are mutable, meaning they can be changed at any point in the program. Finally, dictionaries are very efficient in terms of memory space and can be used to store large amounts of data in a relatively small amount of space."}
{"instruction":"Create a REST API endpoint in Python that takes a text input and returns a list of the most frequent words.","input":"Not applicable","output":"import re\nfrom collections import Counter\n\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('\/api\/frequent_words', methods=['POST'])\ndef frequent_words():\n    text = request.json['text']\n    words = re.findall(r'\\w+', text.lower())\n    count = Counter(words).most_common(10)\n    return jsonify(count)\n\nif __name__ == '__main__':\n    app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API endpoint in Python that takes a text input and returns a list of the most frequent words.\n\n### Input:\nNot applicable\n\n### Output:\nimport re\nfrom collections import Counter\n\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('\/api\/frequent_words', methods=['POST'])\ndef frequent_words():\n    text = request.json['text']\n    words = re.findall(r'\\w+', text.lower())\n    count = Counter(words).most_common(10)\n    return jsonify(count)\n\nif __name__ == '__main__':\n    app.run()"}
{"instruction":"Using an AI library in Python (e.g. Scikit-learn), implement a neural network for a classification problem.","input":"Not applicable","output":"import numpy as np\nfrom sklearn.neural_network import MLPClassifier\n\nX = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\ny = np.array([0, 1, 1, 0])\n\nclf = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(5, 2), random_state=1)\nclf.fit(X, y)\n\npredictions = clf.predict(X)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing an AI library in Python (e.g. Scikit-learn), implement a neural network for a classification problem.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nfrom sklearn.neural_network import MLPClassifier\n\nX = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\ny = np.array([0, 1, 1, 0])\n\nclf = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(5, 2), random_state=1)\nclf.fit(X, y)\n\npredictions = clf.predict(X)"}
{"instruction":"Train a machine learning classifier in Python using the folowing dataset.","input":"https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/flags\/flag.data","output":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Load the dataset\ndata = pd.read_csv('flag.data', sep=',', header=None)\n\n# Split the dataset into training and test sets\nX = data.iloc[:, 0:8]\ny = data.iloc[:, 8]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n\n# Train a decision tree classifier\nclassifier = DecisionTreeClassifier()\nclassifier.fit(X_train, y_train)\n\n# Test and evaluate the trained classifier\nscore = classifier.score(X_test, y_test)\nprint('Accuracy: {:.2f}'.format(score))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTrain a machine learning classifier in Python using the folowing dataset.\n\n### Input:\nhttps:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/flags\/flag.data\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Load the dataset\ndata = pd.read_csv('flag.data', sep=',', header=None)\n\n# Split the dataset into training and test sets\nX = data.iloc[:, 0:8]\ny = data.iloc[:, 8]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n\n# Train a decision tree classifier\nclassifier = DecisionTreeClassifier()\nclassifier.fit(X_train, y_train)\n\n# Test and evaluate the trained classifier\nscore = classifier.score(X_test, y_test)\nprint('Accuracy: {:.2f}'.format(score))"}
{"instruction":"Generate a random integer within a range of 1 to 10 using Python.","input":"","output":"import random\nrandom_number = random.randint(1, 10)\nprint(random_number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random integer within a range of 1 to 10 using Python.\n\n### Input:\n\n\n### Output:\nimport random\nrandom_number = random.randint(1, 10)\nprint(random_number)"}
{"instruction":"Create a dictionary in Python to store information about the different elements in the Periodic Table.","input":"","output":"elements_dict = {}\n\nelements_dict[\"Hydrogen\"] = {\n    \"symbol\": \"H\", \n    \"atomic_number\": 1, \n    \"atomic_mass\": 1.008, \n    \"group\": 1, \n    \"period\": 1\n    }\n\nelements_dict[\"Helium\"] = {\n    \"symbol\": \"He\", \n    \"atomic_number\": 2, \n    \"atomic_mass\": 4.003, \n    \"group\": 18, \n    \"period\": 1\n    }\n\n#Repeat for other elements.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a dictionary in Python to store information about the different elements in the Periodic Table.\n\n### Input:\n\n\n### Output:\nelements_dict = {}\n\nelements_dict[\"Hydrogen\"] = {\n    \"symbol\": \"H\", \n    \"atomic_number\": 1, \n    \"atomic_mass\": 1.008, \n    \"group\": 1, \n    \"period\": 1\n    }\n\nelements_dict[\"Helium\"] = {\n    \"symbol\": \"He\", \n    \"atomic_number\": 2, \n    \"atomic_mass\": 4.003, \n    \"group\": 18, \n    \"period\": 1\n    }\n\n#Repeat for other elements."}
{"instruction":"Using the given input, sort a list containing both numerical and strings data types in Python.","input":"[1, 'c', 3, 'a', 2, 'b']","output":"# define list \nlst = [1, 'c', 3, 'a', 2, 'b']\n\n# sort list\nsorted_lst = sorted(lst, key=lambda x:str(x))\n\n# print sorted list\nprint(sorted_lst)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the given input, sort a list containing both numerical and strings data types in Python.\n\n### Input:\n[1, 'c', 3, 'a', 2, 'b']\n\n### Output:\n# define list \nlst = [1, 'c', 3, 'a', 2, 'b']\n\n# sort list\nsorted_lst = sorted(lst, key=lambda x:str(x))\n\n# print sorted list\nprint(sorted_lst)"}
{"instruction":"Create a python script to print a word 100 times.","input":"","output":"for i in range(100):\n    print(\"Word\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to print a word 100 times.\n\n### Input:\n\n\n### Output:\nfor i in range(100):\n    print(\"Word\")"}
{"instruction":"Create a web service in Python that accesses and stores weather data from a given API.","input":"Not applicable","output":"import requests\nimport json\n\nAPI_KEY = 'myapikey'\n\ndef get_weather(location):\n url = 'http:\/\/api.openweathermap.org\/data\/2.5\/weather?q={}&APPID={}'.format(location, API_KEY)\n response = requests.get(url)\n data = json.loads(response.text)\n return data\n\ndef store_weather(location, data):\n # store the weather data in a database\n pass\n\n# main application\nif __name__ == '__main__':\n location = 'London'\n data = get_weather(location)\n store_weather(location, data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web service in Python that accesses and stores weather data from a given API.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nimport json\n\nAPI_KEY = 'myapikey'\n\ndef get_weather(location):\n url = 'http:\/\/api.openweathermap.org\/data\/2.5\/weather?q={}&APPID={}'.format(location, API_KEY)\n response = requests.get(url)\n data = json.loads(response.text)\n return data\n\ndef store_weather(location, data):\n # store the weather data in a database\n pass\n\n# main application\nif __name__ == '__main__':\n location = 'London'\n data = get_weather(location)\n store_weather(location, data)"}
{"instruction":"Create a web scraper using Python that collects the title and content from the homepage of a given website.","input":"https:\/\/www.example.com as the target website.","output":"import requests\nimport bs4\n\nurl = 'https:\/\/www.example.com'\nr = requests.get(url)\nhtml = bs4.BeautifulSoup(r.text,\"html.parser\")\n\n# Find title\ntitle = html.find('title')\nprint(title.text)\n\n# Find content\ncontent = html.find('div', {'class': 'content'})\nprint(content.text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper using Python that collects the title and content from the homepage of a given website.\n\n### Input:\nhttps:\/\/www.example.com as the target website.\n\n### Output:\nimport requests\nimport bs4\n\nurl = 'https:\/\/www.example.com'\nr = requests.get(url)\nhtml = bs4.BeautifulSoup(r.text,\"html.parser\")\n\n# Find title\ntitle = html.find('title')\nprint(title.text)\n\n# Find content\ncontent = html.find('div', {'class': 'content'})\nprint(content.text)"}
{"instruction":"Write a function in Python to swap two variables.","input":"","output":"def swap(a, b):\n    # Store a in temp\n    temp = a\n\n    # Copy b to a\n    a = b\n\n    # Copy temp to b\n    b = temp","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to swap two variables.\n\n### Input:\n\n\n### Output:\ndef swap(a, b):\n    # Store a in temp\n    temp = a\n\n    # Copy b to a\n    a = b\n\n    # Copy temp to b\n    b = temp"}
{"instruction":"Create a Python script that calculates the edit distance between two strings.","input":"s1 = 'cat'\ns2 = 'cot'","output":"# function to calculate edit distance\ndef edit_distance(s1, s2):\n  if len(s1) == 0:\n  return len(s2)\n  if len(s2) == 0:\n  return len(s1)\n  if s1[-1] == s2[-1]:\n  cost = 0\n  else:\n  cost = 1\n\n  res = min([edit_distance(s1[:-1], s2)+1,\n            edit_distance(s1, s2[:-1])+1,\n            edit_distance(s1[:-1], s2[:-1]) + cost])\n  return res\n\n# example\ns1 = 'cat'\ns2 = 'cot'\nprint(edit_distance(s1, s2))  # output: 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that calculates the edit distance between two strings.\n\n### Input:\ns1 = 'cat'\ns2 = 'cot'\n\n### Output:\n# function to calculate edit distance\ndef edit_distance(s1, s2):\n  if len(s1) == 0:\n  return len(s2)\n  if len(s2) == 0:\n  return len(s1)\n  if s1[-1] == s2[-1]:\n  cost = 0\n  else:\n  cost = 1\n\n  res = min([edit_distance(s1[:-1], s2)+1,\n            edit_distance(s1, s2[:-1])+1,\n            edit_distance(s1[:-1], s2[:-1]) + cost])\n  return res\n\n# example\ns1 = 'cat'\ns2 = 'cot'\nprint(edit_distance(s1, s2))  # output: 1"}
{"instruction":"Write a Python program to create a join of two given strings being separated by a given separator.","input":"First string: Apples \nSecond string: Oranges \nSeparator: and","output":"a = \"Apples\"\nb = \"Oranges\"\n\n#joining the strings, using the separator\njoinedString = a +\" \"+ \"and\" +\" \"+ b\n\n# print the joined string\nprint(joinedString)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a join of two given strings being separated by a given separator.\n\n### Input:\nFirst string: Apples \nSecond string: Oranges \nSeparator: and\n\n### Output:\na = \"Apples\"\nb = \"Oranges\"\n\n#joining the strings, using the separator\njoinedString = a +\" \"+ \"and\" +\" \"+ b\n\n# print the joined string\nprint(joinedString)"}
{"instruction":"Compose a Python program to change all `a` characters to `A` in a string.","input":"","output":"def change_a_to_A(s):\n  return s.replace('a','A')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python program to change all `a` characters to `A` in a string.\n\n### Input:\n\n\n### Output:\ndef change_a_to_A(s):\n  return s.replace('a','A')"}
{"instruction":"Generate a Python code to find the sum of natural numbers up to n.","input":"n = 10","output":"def findSum(n): \n    sum = 0\n    for num in range(0, n+1):\n        sum += num \n    return sum\n\nn = 10\nsum_of_natural_num = findSum(n)\nprint(sum_of_natural_num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code to find the sum of natural numbers up to n.\n\n### Input:\nn = 10\n\n### Output:\ndef findSum(n): \n    sum = 0\n    for num in range(0, n+1):\n        sum += num \n    return sum\n\nn = 10\nsum_of_natural_num = findSum(n)\nprint(sum_of_natural_num)"}
{"instruction":"Build a simple robot control program using Python. The program should have a list of commands (for example, go forward, turn left, turn right, etc.) and use an input from a mouse to move the robot according to the command that was selected.","input":"Command list: go forward, turn left, turn right, stop, look up","output":"import pyautogui\n \n# The list of commands\nCOMMANDS = {\n 'go forward': pyautogui.moveRel(0, 10),\n 'turn left': pyautogui.moveRel(-10, 0),\n 'turn right': pyautogui.moveRel(10, 0),\n 'stop': pyautogui.press('esc'),\n 'look up': pyautogui.moveRel(0, -10)\n}\n \nwhile True:\n command = input('Please enter a command: ')\n if command in COMMANDS:\n COMMANDS[command]\n else:\n print('Invalid command.')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a simple robot control program using Python. The program should have a list of commands (for example, go forward, turn left, turn right, etc.) and use an input from a mouse to move the robot according to the command that was selected.\n\n### Input:\nCommand list: go forward, turn left, turn right, stop, look up\n\n### Output:\nimport pyautogui\n \n# The list of commands\nCOMMANDS = {\n 'go forward': pyautogui.moveRel(0, 10),\n 'turn left': pyautogui.moveRel(-10, 0),\n 'turn right': pyautogui.moveRel(10, 0),\n 'stop': pyautogui.press('esc'),\n 'look up': pyautogui.moveRel(0, -10)\n}\n \nwhile True:\n command = input('Please enter a command: ')\n if command in COMMANDS:\n COMMANDS[command]\n else:\n print('Invalid command.')"}
{"instruction":"Create a python class that generates random numbers between a given range (inclusive).","input":"","output":"import random\n\nclass RandomNumberGenerator:\n    def __init__(self, min_value, max_value):\n        self.min_value = min_value\n        self.max_value = max_value\n\n    def generate_random_number(self):\n        return random.randint(self.min_value, self.max_value)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python class that generates random numbers between a given range (inclusive).\n\n### Input:\n\n\n### Output:\nimport random\n\nclass RandomNumberGenerator:\n    def __init__(self, min_value, max_value):\n        self.min_value = min_value\n        self.max_value = max_value\n\n    def generate_random_number(self):\n        return random.randint(self.min_value, self.max_value)"}
{"instruction":"Design a Python class that accepts student scores and calculates the mean, variance and other descriptive statistics.","input":"","output":"class Statistics:\n    def __init__(self):\n        self.scores = []\n\n    def add_score(self, score):\n        self.scores.append(score)\n\n    def mean(self):\n        return sum(self.scores) \/ len(self.scores)\n\n    def variance(self):\n        mean = self.mean() \n        return sum((x - mean) ** 2 for x in self.scores) \/ len(self.scores)\n\n    def median(self):\n        self.scores.sort()\n        mid = len(self.scores) \/\/ 2\n        if len(self.scores) % 2 == 0:\n            median = (self.scores[mid - 1] + self.scores[mid]) \/ 2\n        else:\n            median = self.scores[mid]\n        return median\n\n    def mode(self):\n        mode = []\n        nums = {} \n        for num in self.scores: \n            if num in nums: \n                nums[num] += 1\n            else: \n                nums[num] = 1\n  \n        max_freq = max(nums.values()) \n  \n        for num in nums: \n            if nums[num] == max_freq: \n                mode.append(num) \n\n        return mode","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class that accepts student scores and calculates the mean, variance and other descriptive statistics.\n\n### Input:\n\n\n### Output:\nclass Statistics:\n    def __init__(self):\n        self.scores = []\n\n    def add_score(self, score):\n        self.scores.append(score)\n\n    def mean(self):\n        return sum(self.scores) \/ len(self.scores)\n\n    def variance(self):\n        mean = self.mean() \n        return sum((x - mean) ** 2 for x in self.scores) \/ len(self.scores)\n\n    def median(self):\n        self.scores.sort()\n        mid = len(self.scores) \/\/ 2\n        if len(self.scores) % 2 == 0:\n            median = (self.scores[mid - 1] + self.scores[mid]) \/ 2\n        else:\n            median = self.scores[mid]\n        return median\n\n    def mode(self):\n        mode = []\n        nums = {} \n        for num in self.scores: \n            if num in nums: \n                nums[num] += 1\n            else: \n                nums[num] = 1\n  \n        max_freq = max(nums.values()) \n  \n        for num in nums: \n            if nums[num] == max_freq: \n                mode.append(num) \n\n        return mode"}
{"instruction":"Design a Python code snippet that deletes all duplicates in a given list of numbers.","input":"","output":"def deleteDuplicates(list): \n    final_list = [] \n    for num in list: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python code snippet that deletes all duplicates in a given list of numbers.\n\n### Input:\n\n\n### Output:\ndef deleteDuplicates(list): \n    final_list = [] \n    for num in list: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list"}
{"instruction":"Design a function in Python to calculate the average of given numbers.","input":"","output":"def calculate_average(numbers):\n    total = 0\n    for number in numbers:\n        total = total + number\n    return total \/ len(numbers)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to calculate the average of given numbers.\n\n### Input:\n\n\n### Output:\ndef calculate_average(numbers):\n    total = 0\n    for number in numbers:\n        total = total + number\n    return total \/ len(numbers)"}
{"instruction":"Create a Python program to determine whether input text is a palindrome.","input":"\"Madam, I'm Adam\"","output":"def is_palindrome(text):\n # preprocess the text to remove whitespace, punctuation, etc\n text = ''.join(ch for ch in text.lower() if ch.isalpha())\n # reverse the text\n rev_text = text[::-1]\n # compare the reversed text to the original text\n return rev_text == text\n\ninput_text = \"Madam, I'm Adam\"\n\nif is_palindrome(input_text):\n print(\"The text '{}' is a palindrome\".format(input_text))\nelse:\n print(\"The text '{}' is not a palindrome\".format(input_text))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to determine whether input text is a palindrome.\n\n### Input:\n\"Madam, I'm Adam\"\n\n### Output:\ndef is_palindrome(text):\n # preprocess the text to remove whitespace, punctuation, etc\n text = ''.join(ch for ch in text.lower() if ch.isalpha())\n # reverse the text\n rev_text = text[::-1]\n # compare the reversed text to the original text\n return rev_text == text\n\ninput_text = \"Madam, I'm Adam\"\n\nif is_palindrome(input_text):\n print(\"The text '{}' is a palindrome\".format(input_text))\nelse:\n print(\"The text '{}' is not a palindrome\".format(input_text))"}
{"instruction":"This code provides a module for changing alphabet letter cases. To use it, you need to define the input and output file paths, and optionally set a switch for processing all vowels or consonants. You can also specify a list of characters to process. To run the code, call the function `process_files(args)` with the parsed arguments.","input":"","output":"#\n# A module capable of changing alphabet letter cases.\n#\n# It uses very generic Python functionality to ensure\n# backward compatibility.\n#\n#\n# The programme processes a set of characters by default\n# If no character is entered for processing, the programme\n# simply exists. This can be turned off by setting 'a' to 1\n# (for all vowels) or 2 (for all consonants).\n# \n#\n#\n\nimport os;\nimport sys;\nimport re;\nimport string;\nfrom re import sub;\n\n\n#\n#! Get parsed arguments\n#\ndef get_parsed_args():\n        \n    # Pre-allocate\n    parser = \"\";\n    args = \"\";\n    if sys.version_info < (2,7):\n        from optparse import OptionParser\n        parser = OptionParser();\n        parser.add_option(\"-i\", \"--input_path\", type=str, help=\"Input file path with extension\");\n        parser.add_option(\"-o\", \"--output_path\", type=str, help=\"Output file path with extension\");\n        parser.add_option(\"-a\", \"--all_chars\", type=int, help=\"Switch a type of characters (all vowels or cons.), disable=0, vowel=1, cons=2\", default=0);\n        parser.add_option(\"-c\", \"--c\", type=str, help=\"Characters to process (comma-separated list, no whitespace)\", default=\"\");\n\n    else:\n        from argparse import ArgumentParser\n        parser = ArgumentParser();\n        parser.add_argument(\"-i\", \"--input_path\", type=str, help=\"Input file path with extension\");\n        parser.add_argument(\"-o\", \"--output_path\", type=str, help=\"Output file path with extension\");\n        parser.add_argument(\"-a\", \"--all_chars\", type=int, help=\"Switch a type of characters (all vowels or cons.), disable=0, vowel=1, cons=2\", default=0);\n        parser.add_argument(\"-c\", \"--c\", type=str, help=\"Characters to process (comma-separated list, no whitespace)\", default=\"\");\n    \n    args = parser.parse_args();\n    args = vars(args);\n\n    ##print(option)\n    ##print(args)\n    ##print(type(option))\n    ##print(option.c)\n    ##print(option.all_chars)\n    ##print(option.input_path)\n    ##print(option.output_path)\n\n    # Safety assertions\n    assert (args['all_chars'] >= 0 and args['all_chars'] <= 2), \\\n           \"Invalid value! programme exiting!\\n type python switchLetterCase.py -h for information on arguments\"\n\n    # If nothing to process, programme will exit\n    if (args['all_chars'] == 0) and \\\n       ((args['c'] == \"\") or \\\n        (args['c'] == \" \") or \\\n        args['all_chars'] is None or \\\n        all([x is ',' for x in args['c']])):\n        \n        print(\".....Nothing to process, programme exiting.\\n\\n\");\n        sys.exit(0);\n\n    return args;\n\n\n#\n#! Main processor function\n#\n\ndef process_files(args):\n\n    \n    try:\n        # Get handlers\n        f1 = open(args['input_path'], 'r')\n        f2 = open(args['output_path'], 'w');\n\n        # Initial setup\n        line_to_write = \"\"       \n        if (args['all_chars'] == 0):    # process characters in the list\n\n            gg = \"\".join(args['c'])\n\n            for line in f1:\n                g = [y.upper() if y in gg else y.lower() if y.upper() in gg else y for y in line];\n                line_to_write = \"\".join(g);\n                f2.write(line_to_write);\n\n        elif (args['all_chars'] == 1):    # process vowels only\n\n            vowels = sub('[^aeiou]+','',string.ascii_lowercase)\n\n            for line in f1:\n                g = [y.upper() if y in vowels else y.lower() if y.upper() in vowels else y for y in line];\n                line_to_write = \"\".join(g);\n                f2.write(line_to_write);       \n\n        elif (args['all_chars'] == 0):    # process consonants in the list\n\n            consonants = sub('[aeiou]+','',string.ascii_lowercase)\n\n            for line in f1:\n                g = [y.upper() if y in gg else y.lower() if y.upper() in gg else y for y in line];\n                line_to_write = \"\".join(g);\n                f2.write(line_to_write);\n\n        # Print some INFO    \n        print(\"All characters toggled! Terminating programme......\\n\\n\");\n\n        f1.close();\n        f2.close();\n          \n    except (Exception, BaseException, IOError, ValueError, WindowsError) as e:        \n        print(e);\n\n    finally:\n        del f1, f2\n\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code provides a module for changing alphabet letter cases. To use it, you need to define the input and output file paths, and optionally set a switch for processing all vowels or consonants. You can also specify a list of characters to process. To run the code, call the function `process_files(args)` with the parsed arguments.\n\n### Input:\n\n\n### Output:\n#\n# A module capable of changing alphabet letter cases.\n#\n# It uses very generic Python functionality to ensure\n# backward compatibility.\n#\n#\n# The programme processes a set of characters by default\n# If no character is entered for processing, the programme\n# simply exists. This can be turned off by setting 'a' to 1\n# (for all vowels) or 2 (for all consonants).\n# \n#\n#\n\nimport os;\nimport sys;\nimport re;\nimport string;\nfrom re import sub;\n\n\n#\n#! Get parsed arguments\n#\ndef get_parsed_args():\n        \n    # Pre-allocate\n    parser = \"\";\n    args = \"\";\n    if sys.version_info < (2,7):\n        from optparse import OptionParser\n        parser = OptionParser();\n        parser.add_option(\"-i\", \"--input_path\", type=str, help=\"Input file path with extension\");\n        parser.add_option(\"-o\", \"--output_path\", type=str, help=\"Output file path with extension\");\n        parser.add_option(\"-a\", \"--all_chars\", type=int, help=\"Switch a type of characters (all vowels or cons.), disable=0, vowel=1, cons=2\", default=0);\n        parser.add_option(\"-c\", \"--c\", type=str, help=\"Characters to process (comma-separated list, no whitespace)\", default=\"\");\n\n    else:\n        from argparse import ArgumentParser\n        parser = ArgumentParser();\n        parser.add_argument(\"-i\", \"--input_path\", type=str, help=\"Input file path with extension\");\n        parser.add_argument(\"-o\", \"--output_path\", type=str, help=\"Output file path with extension\");\n        parser.add_argument(\"-a\", \"--all_chars\", type=int, help=\"Switch a type of characters (all vowels or cons.), disable=0, vowel=1, cons=2\", default=0);\n        parser.add_argument(\"-c\", \"--c\", type=str, help=\"Characters to process (comma-separated list, no whitespace)\", default=\"\");\n    \n    args = parser.parse_args();\n    args = vars(args);\n\n    ##print(option)\n    ##print(args)\n    ##print(type(option))\n    ##print(option.c)\n    ##print(option.all_chars)\n    ##print(option.input_path)\n    ##print(option.output_path)\n\n    # Safety assertions\n    assert (args['all_chars'] >= 0 and args['all_chars'] <= 2), \\\n           \"Invalid value! programme exiting!\\n type python switchLetterCase.py -h for information on arguments\"\n\n    # If nothing to process, programme will exit\n    if (args['all_chars'] == 0) and \\\n       ((args['c'] == \"\") or \\\n        (args['c'] == \" \") or \\\n        args['all_chars'] is None or \\\n        all([x is ',' for x in args['c']])):\n        \n        print(\".....Nothing to process, programme exiting.\\n\\n\");\n        sys.exit(0);\n\n    return args;\n\n\n#\n#! Main processor function\n#\n\ndef process_files(args):\n\n    \n    try:\n        # Get handlers\n        f1 = open(args['input_path'], 'r')\n        f2 = open(args['output_path'], 'w');\n\n        # Initial setup\n        line_to_write = \"\"       \n        if (args['all_chars'] == 0):    # process characters in the list\n\n            gg = \"\".join(args['c'])\n\n            for line in f1:\n                g = [y.upper() if y in gg else y.lower() if y.upper() in gg else y for y in line];\n                line_to_write = \"\".join(g);\n                f2.write(line_to_write);\n\n        elif (args['all_chars'] == 1):    # process vowels only\n\n            vowels = sub('[^aeiou]+','',string.ascii_lowercase)\n\n            for line in f1:\n                g = [y.upper() if y in vowels else y.lower() if y.upper() in vowels else y for y in line];\n                line_to_write = \"\".join(g);\n                f2.write(line_to_write);       \n\n        elif (args['all_chars'] == 0):    # process consonants in the list\n\n            consonants = sub('[aeiou]+','',string.ascii_lowercase)\n\n            for line in f1:\n                g = [y.upper() if y in gg else y.lower() if y.upper() in gg else y for y in line];\n                line_to_write = \"\".join(g);\n                f2.write(line_to_write);\n\n        # Print some INFO    \n        print(\"All characters toggled! Terminating programme......\\n\\n\");\n\n        f1.close();\n        f2.close();\n          \n    except (Exception, BaseException, IOError, ValueError, WindowsError) as e:        \n        print(e);\n\n    finally:\n        del f1, f2\n\n"}
{"instruction":"Write a Python program to classify the set of strings into two categories based on their length.","input":"strings = ['short', 'longer_string', 'medium_length', 'very_long_string']","output":"def classify_strings(strings):\n    # initialize lists for each classification\n    short = []\n    long = []\n    # classify each string\n    for s in strings:\n        if len(s) <= 6:\n            short.append(s)\n        else:\n            long.append(s)\n    # return classified lists\n    return [short, long]\n\nif __name__ == '__main__':\n    strings = ['short', 'longer_string', 'medium_length', 'very_long_string']\n    print(classify_strings(strings))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify the set of strings into two categories based on their length.\n\n### Input:\nstrings = ['short', 'longer_string', 'medium_length', 'very_long_string']\n\n### Output:\ndef classify_strings(strings):\n    # initialize lists for each classification\n    short = []\n    long = []\n    # classify each string\n    for s in strings:\n        if len(s) <= 6:\n            short.append(s)\n        else:\n            long.append(s)\n    # return classified lists\n    return [short, long]\n\nif __name__ == '__main__':\n    strings = ['short', 'longer_string', 'medium_length', 'very_long_string']\n    print(classify_strings(strings))"}
{"instruction":"Develop an algorithm in Python to arrange an array in a non-descending order.","input":"Array = [5, 8, 10, 15, 2]","output":"def selection_sort(arr):\n    # traverse through all array elements\n    for i in range(len(arr)):\n        # find the minimum element in the remaining unsorted array\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n        # swap the found minimum element\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\narr = [5, 8, 10, 15, 2] \nselection_sort(arr)\nprint(\"Sorted array: \", arr)\n\nOutput: Sorted array:  [2, 5, 8, 10, 15]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to arrange an array in a non-descending order.\n\n### Input:\nArray = [5, 8, 10, 15, 2]\n\n### Output:\ndef selection_sort(arr):\n    # traverse through all array elements\n    for i in range(len(arr)):\n        # find the minimum element in the remaining unsorted array\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n        # swap the found minimum element\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\narr = [5, 8, 10, 15, 2] \nselection_sort(arr)\nprint(\"Sorted array: \", arr)\n\nOutput: Sorted array:  [2, 5, 8, 10, 15]"}
{"instruction":"Using the input provided, build a Python dictionary with the number as the key and its square as the value.","input":"numbers = [2, 3, 4]","output":"square_dict = {number:number**2 for number in numbers}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the input provided, build a Python dictionary with the number as the key and its square as the value.\n\n### Input:\nnumbers = [2, 3, 4]\n\n### Output:\nsquare_dict = {number:number**2 for number in numbers}"}
{"instruction":"Create a graphical decision tree in Python that classifies iris flower data.","input":"iris dataset as a csv file","output":"import pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import export_graphviz\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# Read the csv file and parse the data\ndf = pd.read_csv('iris.csv')\nx = df.drop('species', axis=1).values\ny = df['species'].values\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)\n\n# Train the Decision Tree\nmodel = DecisionTreeClassifier(criterion='entropy', max_depth=3)\nmodel.fit(X_train, y_train)\n\n# Make predictions and evaluate the accuracy\ny_pred = model.predict(X_test)\nscore = accuracy_score(y_test, y_pred)\n\n# Visualize the decision tree\nexport_graphviz(model, \nout_file='iris_tree.dot',\nfeature_names=['sepal length', 'sepal width', 'petal length', 'petal width'],\nclass_names=['setosa', 'versicolor', 'virginica'],\nfilled=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a graphical decision tree in Python that classifies iris flower data.\n\n### Input:\niris dataset as a csv file\n\n### Output:\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import export_graphviz\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# Read the csv file and parse the data\ndf = pd.read_csv('iris.csv')\nx = df.drop('species', axis=1).values\ny = df['species'].values\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)\n\n# Train the Decision Tree\nmodel = DecisionTreeClassifier(criterion='entropy', max_depth=3)\nmodel.fit(X_train, y_train)\n\n# Make predictions and evaluate the accuracy\ny_pred = model.predict(X_test)\nscore = accuracy_score(y_test, y_pred)\n\n# Visualize the decision tree\nexport_graphviz(model, \nout_file='iris_tree.dot',\nfeature_names=['sepal length', 'sepal width', 'petal length', 'petal width'],\nclass_names=['setosa', 'versicolor', 'virginica'],\nfilled=True)"}
{"instruction":"Create a python program to remove all the values in a list that are greater than a given value.","input":"list = [10, 15, 20, 25, 30], remove values greater than 15","output":"# Defining a function to remove all the values in a list that are greater than a given value\ndef remove_greater(list, n):\n\u00a0\u00a0return [val for val in list if val <= n]\n\n# Testing the remove_greater() function\nlist = [10, 15, 20, 25, 30]\nprint(remove_greater(list, 15)) # [10, 15]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to remove all the values in a list that are greater than a given value.\n\n### Input:\nlist = [10, 15, 20, 25, 30], remove values greater than 15\n\n### Output:\n# Defining a function to remove all the values in a list that are greater than a given value\ndef remove_greater(list, n):\n\u00a0\u00a0return [val for val in list if val <= n]\n\n# Testing the remove_greater() function\nlist = [10, 15, 20, 25, 30]\nprint(remove_greater(list, 15)) # [10, 15]"}
{"instruction":"Create a Python class named Person with private variables for first name, last name, age, and gender. The class should also have a method called \"say_hello\" that prints the person's name.","input":"Not applicable","output":"class Person:\n def __init__(self, first_name, last_name, age, gender):\n self.__first_name = first_name\n self.__last_name = last_name\n self.__age = age\n self.__gender = gender\n\n def say_hello(self):\n print(\"Hello, my name is %s %s.\" % (self.__first_name, self.__last_name))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class named Person with private variables for first name, last name, age, and gender. The class should also have a method called \"say_hello\" that prints the person's name.\n\n### Input:\nNot applicable\n\n### Output:\nclass Person:\n def __init__(self, first_name, last_name, age, gender):\n self.__first_name = first_name\n self.__last_name = last_name\n self.__age = age\n self.__gender = gender\n\n def say_hello(self):\n print(\"Hello, my name is %s %s.\" % (self.__first_name, self.__last_name))"}
{"instruction":"Write a class in Python that validates a given password and prints the result.","input":"password = \"12345\"","output":"\"\"\"\nWrite a class in Python to validate a given password\n\"\"\"\n\nclass PasswordValidator:\n    def __init__(self, password):\n        self.password = password\n\n    def validate(self):\n        is_valid = True\n        # Add code to check length, special characters, etc.\n        if len(self.password) < 8:\n            is_valid = False\n\n        return is_valid\n\npwd = PasswordValidator(\"12345\")\n\nif pwd.validate():\n    print(\"The password is valid\")\nelse:\n    print(\"The password is invalid\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a class in Python that validates a given password and prints the result.\n\n### Input:\npassword = \"12345\"\n\n### Output:\n\"\"\"\nWrite a class in Python to validate a given password\n\"\"\"\n\nclass PasswordValidator:\n    def __init__(self, password):\n        self.password = password\n\n    def validate(self):\n        is_valid = True\n        # Add code to check length, special characters, etc.\n        if len(self.password) < 8:\n            is_valid = False\n\n        return is_valid\n\npwd = PasswordValidator(\"12345\")\n\nif pwd.validate():\n    print(\"The password is valid\")\nelse:\n    print(\"The password is invalid\")"}
{"instruction":"How can we create a function to check if a given string is a palindrome in Python?","input":"No input","output":"def is_palindrome(s): \n    s = s.lower() \n    return s == s[::-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow can we create a function to check if a given string is a palindrome in Python?\n\n### Input:\nNo input\n\n### Output:\ndef is_palindrome(s): \n    s = s.lower() \n    return s == s[::-1]"}
{"instruction":"This code is a scraper for querying NeuroMorpho.Org from Python. To use it, call the functions `cell_types()`, `species()`, or `regions()` to get a list of all cell types, species, or regions, respectively. To get the matching cell names for a given type, use `cell_names()`. To get the metadata for a given cell name, use `metadata()`. To get the morphology for a given cell name, use `morphology()`. An optional `format` keyword argument allows selecting between the original and the standardized versions. To download a morphology file, use `download()`.","input":"","output":"\"\"\"\nScraper for querying NeuroMorpho.Org from Python.\n\nFor more on NeuroMorpho.Org, see:\n\n    Ascoli GA, Donohue DE, Halavi M. (2007) NeuroMorpho.Org: a central\n    resource for neuronal morphologies.J Neurosci., 27(35):9247-51\n\nRun this file as a stand-alone script for a demo. The demo queries NeuroMorpho.Org\nin general, and provides extra information about the cell mb100318-a which is\nassociated with the publication:\n\n    Bagnall, M. W., Hull, C., Bushong, E. A., Ellisman, M. H., & Scanziani, M. (2011).\n    Multiple clusters of release sites formed by individual thalamic afferents onto\n    cortical interneurons ensure reliable transmission. Neuron, 71(1), 180-194.\n\nAs a web-scraper, this module may break if the website structure changes, but it\nwas known to work as of April 2, 2016.\n\nTo get a list of all cell types, species, or regions, call cell_types(), species(),\nor regions(), respectively.\n\nGiven a type from one of these lists, get the matching cell names via cell_names.\ne.g. cell_names('blowfly')\n\nTo get the metadata for a given cell name, use metadata.\ne.g. metadata('mb100318-a')\n\nTo get the morphology for a given cell name, use morphology.\ne.g. morphology('mb100318-a')\n\nAn optional format keyword argument allows selecting between the original and the\nstandardized versions.\n\"\"\"\nimport urllib2\nimport re\nimport json\nimport base64\n\n_cache = {}\n\ndef _read_neuromorpho_table(bywhat):\n    \"\"\"Helper function, reads data from NeuroMorpho.Org, stores in cache.\"\"\"\n    html = urllib2.urlopen('http:\/\/neuromorpho.org\/by%s.jsp' % bywhat).read()\n    result = [m.strip() for m in re.findall(\"maketable\\('(.*?)'\\)\", html)]\n    _cache[bywhat] = set(result)\n    return result\n\ndef cell_types():\n    \"\"\"Return a list of all cell types.\"\"\"\n    return _read_neuromorpho_table('cell')\n\ndef species():\n    \"\"\"Return a list of all species.\"\"\"\n    return _read_neuromorpho_table('species')\n\ndef regions():\n    \"\"\"Return a list of all the brain regions.\"\"\"\n    return _read_neuromorpho_table('region')\n\ndef cell_names(category):\n    \"\"\"Return a list of all the names of cells of a given cell type, species, or region.\n\n    Examples:\n\n        cell_names('Aspiny')\n        cell_names('blowfly')\n        cell_names('amygdala')\n    \"\"\"\n    # figure out if category is a cell type, species, or region\n    # check the cached sets first\n    for bywhat, items in _cache.iteritems():\n        if category in items:\n            return _get_data_for_by(bywhat, category)\n    # no luck: try all three options\n    for bywhat in ['cell', 'region', 'species']:\n        result = _get_data_for_by(bywhat, category)\n        if result:\n            return result\n    return []\n\ndef _get_data_for_by(bywhat, category):\n    \"\"\"Helper function for cell_names.\"\"\"\n    query_code = bywhat if bywhat != 'cell' else 'class'\n\n    html = urllib2.urlopen('http:\/\/neuromorpho.org\/getdataforby%s.jsp?%s=%s' % (bywhat, query_code, category.replace(' ', '%20'))).read()\n    return [m for m in re.findall(\"neuron_name=(.*?)'\", html)]\n\ndef metadata(neuron_name):\n    \"\"\"Return a dict of the metadata for the specified neuron.\n\n    Example:\n\n        metadata('mb100318-a')\n    \"\"\"\n    html = urllib2.urlopen('http:\/\/neuromorpho.org\/neuron_info.jsp?neuron_name=%s' % neuron_name).read()\n    # remove non-breaking spaces\n    html = html.replace('&nbsp;', ' ')\n\n    # remove units\n    html = html.replace('&#956;m<sup>2<\/sup>', ' ')\n    html = html.replace('&#956;m', ' ')\n    html = html.replace('&deg;', ' ')\n    html = html.replace('<b>x<\/b>', ' ')\n    html = html.replace('<sup>3<\/sup>', '')\n    html2 = html.replace('\\n', '')\n    keys = [i[1][:-3].strip() for i in re.findall('<td align=\"right\" width=\"50%\"(.*?)>(.*?)<\/td>', html2)]\n    values = [i[1].strip() for i in re.findall('<td align=\"left\"(.*?)>(.*?)<\/td>', html2)[2:]]\n\n    return dict(zip(keys, values))\n\ndef morphology(neuron_name, format='swc'):\n    \"\"\"Return the morphology associated with a given name.\n\n    Format options:\n\n        swc -- always \"stanadardized\" file format (default)\n        original -- original\n\n    Example:\n\n        morphology('mb100318-a', format='swc')\n        morphology('mb100318-a', format='original')\n    \"\"\"\n    url_paths_from_format = {'swc': 'CNG%20Version', 'original': 'Source-Version'}\n    assert(format in url_paths_from_format)\n    # locate the path to the downloads\n    html = urllib2.urlopen('http:\/\/neuromorpho.org\/neuron_info.jsp?neuron_name=%s' % neuron_name).read()\n    if format == 'swc':\n        url = re.findall(\"<a href=dableFiles\/(.*?)>Morphology File \\(Standardized\", html)[0]\n    else:\n        url = re.findall(\"<a href=dableFiles\/(.*?)>Morphology File \\(Original\", html)[0]\n    return urllib2.urlopen('http:\/\/NeuroMorpho.org\/dableFiles\/%s' % url).read()\n\ndef download(neuron_name, filename=None):\n    format = 'swc'\n    if filename is not None and len(filename.split('.'))==0:\n        filename = base64.urlsafe_b64encode(filename+'.'+format)\n    if filename is None:\n        filename = base64.urlsafe_b64encode(neuron_name+'.'+format)\n    with open(filename, 'w') as f:\n        f.write(morphology(neuron_name, format=format))\n\nif __name__ == '__main__':\n    print 'Demo of reading data from NeuroMorpho.Org'\n    print\n\n    for string, fn in zip(['cell types', 'brain regions', 'species'], [cell_types, regions, species]):\n        print 'All %s:' % string\n        print ', '.join(fn())\n        print\n    for category in ['amygdala', 'blowfly', 'Aspiny']:\n        print 'All %s:' % category\n        print ', '.join(cell_names(category))\n        print\n    print 'Metadata for mb100318-a:'\n    print json.dumps(metadata('mb100318-a'), indent=4)\n    print\n    print 'Morphology (standardized) for mb100318-a (first 10 lines):'\n    print '\\n'.join(morphology('mb100318-a', format='standardized').split('\\n')[:10])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a scraper for querying NeuroMorpho.Org from Python. To use it, call the functions `cell_types()`, `species()`, or `regions()` to get a list of all cell types, species, or regions, respectively. To get the matching cell names for a given type, use `cell_names()`. To get the metadata for a given cell name, use `metadata()`. To get the morphology for a given cell name, use `morphology()`. An optional `format` keyword argument allows selecting between the original and the standardized versions. To download a morphology file, use `download()`.\n\n### Input:\n\n\n### Output:\n\"\"\"\nScraper for querying NeuroMorpho.Org from Python.\n\nFor more on NeuroMorpho.Org, see:\n\n    Ascoli GA, Donohue DE, Halavi M. (2007) NeuroMorpho.Org: a central\n    resource for neuronal morphologies.J Neurosci., 27(35):9247-51\n\nRun this file as a stand-alone script for a demo. The demo queries NeuroMorpho.Org\nin general, and provides extra information about the cell mb100318-a which is\nassociated with the publication:\n\n    Bagnall, M. W., Hull, C., Bushong, E. A., Ellisman, M. H., & Scanziani, M. (2011).\n    Multiple clusters of release sites formed by individual thalamic afferents onto\n    cortical interneurons ensure reliable transmission. Neuron, 71(1), 180-194.\n\nAs a web-scraper, this module may break if the website structure changes, but it\nwas known to work as of April 2, 2016.\n\nTo get a list of all cell types, species, or regions, call cell_types(), species(),\nor regions(), respectively.\n\nGiven a type from one of these lists, get the matching cell names via cell_names.\ne.g. cell_names('blowfly')\n\nTo get the metadata for a given cell name, use metadata.\ne.g. metadata('mb100318-a')\n\nTo get the morphology for a given cell name, use morphology.\ne.g. morphology('mb100318-a')\n\nAn optional format keyword argument allows selecting between the original and the\nstandardized versions.\n\"\"\"\nimport urllib2\nimport re\nimport json\nimport base64\n\n_cache = {}\n\ndef _read_neuromorpho_table(bywhat):\n    \"\"\"Helper function, reads data from NeuroMorpho.Org, stores in cache.\"\"\"\n    html = urllib2.urlopen('http:\/\/neuromorpho.org\/by%s.jsp' % bywhat).read()\n    result = [m.strip() for m in re.findall(\"maketable\\('(.*?)'\\)\", html)]\n    _cache[bywhat] = set(result)\n    return result\n\ndef cell_types():\n    \"\"\"Return a list of all cell types.\"\"\"\n    return _read_neuromorpho_table('cell')\n\ndef species():\n    \"\"\"Return a list of all species.\"\"\"\n    return _read_neuromorpho_table('species')\n\ndef regions():\n    \"\"\"Return a list of all the brain regions.\"\"\"\n    return _read_neuromorpho_table('region')\n\ndef cell_names(category):\n    \"\"\"Return a list of all the names of cells of a given cell type, species, or region.\n\n    Examples:\n\n        cell_names('Aspiny')\n        cell_names('blowfly')\n        cell_names('amygdala')\n    \"\"\"\n    # figure out if category is a cell type, species, or region\n    # check the cached sets first\n    for bywhat, items in _cache.iteritems():\n        if category in items:\n            return _get_data_for_by(bywhat, category)\n    # no luck: try all three options\n    for bywhat in ['cell', 'region', 'species']:\n        result = _get_data_for_by(bywhat, category)\n        if result:\n            return result\n    return []\n\ndef _get_data_for_by(bywhat, category):\n    \"\"\"Helper function for cell_names.\"\"\"\n    query_code = bywhat if bywhat != 'cell' else 'class'\n\n    html = urllib2.urlopen('http:\/\/neuromorpho.org\/getdataforby%s.jsp?%s=%s' % (bywhat, query_code, category.replace(' ', '%20'))).read()\n    return [m for m in re.findall(\"neuron_name=(.*?)'\", html)]\n\ndef metadata(neuron_name):\n    \"\"\"Return a dict of the metadata for the specified neuron.\n\n    Example:\n\n        metadata('mb100318-a')\n    \"\"\"\n    html = urllib2.urlopen('http:\/\/neuromorpho.org\/neuron_info.jsp?neuron_name=%s' % neuron_name).read()\n    # remove non-breaking spaces\n    html = html.replace('&nbsp;', ' ')\n\n    # remove units\n    html = html.replace('&#956;m<sup>2<\/sup>', ' ')\n    html = html.replace('&#956;m', ' ')\n    html = html.replace('&deg;', ' ')\n    html = html.replace('<b>x<\/b>', ' ')\n    html = html.replace('<sup>3<\/sup>', '')\n    html2 = html.replace('\\n', '')\n    keys = [i[1][:-3].strip() for i in re.findall('<td align=\"right\" width=\"50%\"(.*?)>(.*?)<\/td>', html2)]\n    values = [i[1].strip() for i in re.findall('<td align=\"left\"(.*?)>(.*?)<\/td>', html2)[2:]]\n\n    return dict(zip(keys, values))\n\ndef morphology(neuron_name, format='swc'):\n    \"\"\"Return the morphology associated with a given name.\n\n    Format options:\n\n        swc -- always \"stanadardized\" file format (default)\n        original -- original\n\n    Example:\n\n        morphology('mb100318-a', format='swc')\n        morphology('mb100318-a', format='original')\n    \"\"\"\n    url_paths_from_format = {'swc': 'CNG%20Version', 'original': 'Source-Version'}\n    assert(format in url_paths_from_format)\n    # locate the path to the downloads\n    html = urllib2.urlopen('http:\/\/neuromorpho.org\/neuron_info.jsp?neuron_name=%s' % neuron_name).read()\n    if format == 'swc':\n        url = re.findall(\"<a href=dableFiles\/(.*?)>Morphology File \\(Standardized\", html)[0]\n    else:\n        url = re.findall(\"<a href=dableFiles\/(.*?)>Morphology File \\(Original\", html)[0]\n    return urllib2.urlopen('http:\/\/NeuroMorpho.org\/dableFiles\/%s' % url).read()\n\ndef download(neuron_name, filename=None):\n    format = 'swc'\n    if filename is not None and len(filename.split('.'))==0:\n        filename = base64.urlsafe_b64encode(filename+'.'+format)\n    if filename is None:\n        filename = base64.urlsafe_b64encode(neuron_name+'.'+format)\n    with open(filename, 'w') as f:\n        f.write(morphology(neuron_name, format=format))\n\nif __name__ == '__main__':\n    print 'Demo of reading data from NeuroMorpho.Org'\n    print\n\n    for string, fn in zip(['cell types', 'brain regions', 'species'], [cell_types, regions, species]):\n        print 'All %s:' % string\n        print ', '.join(fn())\n        print\n    for category in ['amygdala', 'blowfly', 'Aspiny']:\n        print 'All %s:' % category\n        print ', '.join(cell_names(category))\n        print\n    print 'Metadata for mb100318-a:'\n    print json.dumps(metadata('mb100318-a'), indent=4)\n    print\n    print 'Morphology (standardized) for mb100318-a (first 10 lines):'\n    print '\\n'.join(morphology('mb100318-a', format='standardized').split('\\n')[:10])"}
{"instruction":"Design an algorithm to solve the Towers of Hanoi puzzle with n-disks using Python.","input":"","output":"def move_towers(n, source, target, middle):\n  if n == 1:\n    print('move disk from {} to {}'.format(source, target))\n  else:\n    move_towers(n - 1, source, middle, target)\n    move_towers(1, source, target, middle)\n    move_towers(n - 1, middle, target, source)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm to solve the Towers of Hanoi puzzle with n-disks using Python.\n\n### Input:\n\n\n### Output:\ndef move_towers(n, source, target, middle):\n  if n == 1:\n    print('move disk from {} to {}'.format(source, target))\n  else:\n    move_towers(n - 1, source, middle, target)\n    move_towers(1, source, target, middle)\n    move_towers(n - 1, middle, target, source)"}
{"instruction":"Create a web application in Python with Flask that has a homepage and a page that displays the current time.","input":"Not applicable","output":"from datetime import datetime\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('\/')\ndef index():\n return 'Homepage'\n\n@app.route('\/time')\ndef time():\n time = datetime.now().strftime('%H:%M:%S')\n return f'The current time is {time}.'\n\nif __name__ == '__main__':\n app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application in Python with Flask that has a homepage and a page that displays the current time.\n\n### Input:\nNot applicable\n\n### Output:\nfrom datetime import datetime\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('\/')\ndef index():\n return 'Homepage'\n\n@app.route('\/time')\ndef time():\n time = datetime.now().strftime('%H:%M:%S')\n return f'The current time is {time}.'\n\nif __name__ == '__main__':\n app.run()"}
{"instruction":"Write a web API in Python that has a single endpoint and provides the current time when it's called","input":"Not applicable","output":"import datetime\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('\/time')\ndef get_current_time():\n    now = datetime.datetime.now()\n    current_time = {\n        'datetime': now.strftime(\"%m-%d-%Y %H:%M:%S\"), \n        'h': now.hour,\n        'm': now.minute,\n        's': now.second\n    }\n    return jsonify(current_time)\n\nif __name__ == '__main__':\n    app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a web API in Python that has a single endpoint and provides the current time when it's called\n\n### Input:\nNot applicable\n\n### Output:\nimport datetime\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('\/time')\ndef get_current_time():\n    now = datetime.datetime.now()\n    current_time = {\n        'datetime': now.strftime(\"%m-%d-%Y %H:%M:%S\"), \n        'h': now.hour,\n        'm': now.minute,\n        's': now.second\n    }\n    return jsonify(current_time)\n\nif __name__ == '__main__':\n    app.run()"}
{"instruction":"Create an algorithm in Python to print the numbers from 1 to n in increasing order, except for any numbers which are divisible by 3 should be printed as \"Fizz\".","input":"`n = 20`","output":"def fizz(n):\n    for i in range(1, n+1):\n        if i % 3 == 0:\n            print(\"Fizz\")\n        else:\n            print(i)\n\n#example\nfizz(20) # prints 1, 2, Fizz, 4, 5, Fizz, 7, 8, Fizz, 10, 11, Fizz, 13, 14, Fizz, 16, 17, Fizz, 19, 20","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to print the numbers from 1 to n in increasing order, except for any numbers which are divisible by 3 should be printed as \"Fizz\".\n\n### Input:\n`n = 20`\n\n### Output:\ndef fizz(n):\n    for i in range(1, n+1):\n        if i % 3 == 0:\n            print(\"Fizz\")\n        else:\n            print(i)\n\n#example\nfizz(20) # prints 1, 2, Fizz, 4, 5, Fizz, 7, 8, Fizz, 10, 11, Fizz, 13, 14, Fizz, 16, 17, Fizz, 19, 20"}
{"instruction":"Write a Python script to sort a given list in descending order.","input":"[5, 3, 2, 1, 4]","output":"def sort_desc(lst): \n    return sorted(lst, reverse=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to sort a given list in descending order.\n\n### Input:\n[5, 3, 2, 1, 4]\n\n### Output:\ndef sort_desc(lst): \n    return sorted(lst, reverse=True)"}
{"instruction":"Modify the Python code below to create a function for finding the sum of a list of numbers.","input":"list=[1,2,3,4,5]","output":"def sum_list(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total\n    \nmy_list = [1,2,3,4,5]\n\nprint(sum_list(my_list))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the Python code below to create a function for finding the sum of a list of numbers.\n\n### Input:\nlist=[1,2,3,4,5]\n\n### Output:\ndef sum_list(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total\n    \nmy_list = [1,2,3,4,5]\n\nprint(sum_list(my_list))"}
{"instruction":"Generate a Python script to create a dictionary containing the names of each president of the United States and the number of terms he\/she served.","input":"","output":"presidents = {\n \"George Washington\": 1, \n \"John Adams\": 1, \n \"Thomas Jefferson\": 2,\n \"James Madison\": 2, \n \"James Monroe\": 2, \n \"John Quincy Adams\": 1, \n \"Andrew Jackson\": 2, \n \"Martin Van Buren\": 1, \n \"William Henry Harrison\": 1, \n \"John Tyler\": 1, \n \"James K. Polk\": 1,\n \"Zachary Taylor\": 1, \n \"Millard Fillmore\": 1, \n \"Franklin Pierce\": 1, \n \"James Buchanan\": 1, \n \"Abraham Lincoln\": 2, \n \"Andrew Johnson\": 1, \n \"Ulysses S. Grant\": 2, \n \"Rutherford B. Hayes\": 1, \n \"James A. Garfield\": 1, \n \"Chester A. Arthur\": 1, \n \"Grover Cleveland\": 2, \n \"Benjamin Harrison\": 1, \n \"William McKinley\": 2,\n \"Theodore Roosevelt\": 2,\n \"William Howard Taft\": 1, \n \"Woodrow Wilson\": 2, \n \"Warren G. Harding\": 1, \n \"Calvin Coolidge\": 2,\n \"Herbert Hoover\": 1, \n \"Franklin D. Roosevelt\": 4, \n \"Harry S. Truman\": 2, \n \"Dwight D. Eisenhower\": 2, \n \"John F. Kennedy\": 1, \n \"Lyndon B. Johnson\": 1, \n \"Richard Nixon\": 2, \n \"Gerald Ford\": 1, \n \"Jimmy Carter\": 1, \n \"Ronald Reagan\": 2, \n \"George H. W. Bush\": 1, \n \"Bill Clinton\": 2, \n \"George W. Bush\": 2, \n \"Barack Obama\": 2, \n \"Donald Trump\": 1\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to create a dictionary containing the names of each president of the United States and the number of terms he\/she served.\n\n### Input:\n\n\n### Output:\npresidents = {\n \"George Washington\": 1, \n \"John Adams\": 1, \n \"Thomas Jefferson\": 2,\n \"James Madison\": 2, \n \"James Monroe\": 2, \n \"John Quincy Adams\": 1, \n \"Andrew Jackson\": 2, \n \"Martin Van Buren\": 1, \n \"William Henry Harrison\": 1, \n \"John Tyler\": 1, \n \"James K. Polk\": 1,\n \"Zachary Taylor\": 1, \n \"Millard Fillmore\": 1, \n \"Franklin Pierce\": 1, \n \"James Buchanan\": 1, \n \"Abraham Lincoln\": 2, \n \"Andrew Johnson\": 1, \n \"Ulysses S. Grant\": 2, \n \"Rutherford B. Hayes\": 1, \n \"James A. Garfield\": 1, \n \"Chester A. Arthur\": 1, \n \"Grover Cleveland\": 2, \n \"Benjamin Harrison\": 1, \n \"William McKinley\": 2,\n \"Theodore Roosevelt\": 2,\n \"William Howard Taft\": 1, \n \"Woodrow Wilson\": 2, \n \"Warren G. Harding\": 1, \n \"Calvin Coolidge\": 2,\n \"Herbert Hoover\": 1, \n \"Franklin D. Roosevelt\": 4, \n \"Harry S. Truman\": 2, \n \"Dwight D. Eisenhower\": 2, \n \"John F. Kennedy\": 1, \n \"Lyndon B. Johnson\": 1, \n \"Richard Nixon\": 2, \n \"Gerald Ford\": 1, \n \"Jimmy Carter\": 1, \n \"Ronald Reagan\": 2, \n \"George H. W. Bush\": 1, \n \"Bill Clinton\": 2, \n \"George W. Bush\": 2, \n \"Barack Obama\": 2, \n \"Donald Trump\": 1\n}"}
{"instruction":"Train a machine learning model in Python to predict the COVID-19 fatalities in a given region.","input":"","output":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Split data into features and targets\nX = data.drop(['Fatalities'], axis=1).values\ny = data['Fatalities'].values\n\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, \n                                                    random_state=42)\n\n# Normalize data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Train machine learning model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Predict fatalities in given region\npredictions = model.predict(X_test)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTrain a machine learning model in Python to predict the COVID-19 fatalities in a given region.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Split data into features and targets\nX = data.drop(['Fatalities'], axis=1).values\ny = data['Fatalities'].values\n\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, \n                                                    random_state=42)\n\n# Normalize data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Train machine learning model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Predict fatalities in given region\npredictions = model.predict(X_test)"}
{"instruction":"Provide an example of how to generate a key-value Python dictionary from a list.","input":"","output":"my_list = [1, 2, 3, 4]\nmy_dict = {list_val:list_val**2 for list_val in my_list}\nprint(my_dict)\n# {1: 1, 2: 4, 3: 9, 4: 16}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProvide an example of how to generate a key-value Python dictionary from a list.\n\n### Input:\n\n\n### Output:\nmy_list = [1, 2, 3, 4]\nmy_dict = {list_val:list_val**2 for list_val in my_list}\nprint(my_dict)\n# {1: 1, 2: 4, 3: 9, 4: 16}"}
{"instruction":"Design an efficient data-structure using Python for","input":"storing a list of strings that can be efficiently searched.","output":"class StringList:\n    def __init__(self): \n        self.storage = []\n \n    def add(self, item): \n        self.storage.append(item)\n \n    def search(self, query): \n        if query in self.storage:\n            return True \n        else: \n            return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an efficient data-structure using Python for\n\n### Input:\nstoring a list of strings that can be efficiently searched.\n\n### Output:\nclass StringList:\n    def __init__(self): \n        self.storage = []\n \n    def add(self, item): \n        self.storage.append(item)\n \n    def search(self, query): \n        if query in self.storage:\n            return True \n        else: \n            return False"}
{"instruction":"Design an algorithm in Python that accepts a list of integers as an input and returns true if the list contains duplicates.","input":"arr = [1, 4, 9, 6, 2, 5, 9, 7]","output":"def is_duplicate(arr):\n    return len(arr) != len(set(arr))\n\nis_duplicate(arr) # returns True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that accepts a list of integers as an input and returns true if the list contains duplicates.\n\n### Input:\narr = [1, 4, 9, 6, 2, 5, 9, 7]\n\n### Output:\ndef is_duplicate(arr):\n    return len(arr) != len(set(arr))\n\nis_duplicate(arr) # returns True"}
{"instruction":"Design a Python Class for a Student and provide a constructor for creating objects of that class.","input":"","output":"class Student:\n    def __init__(self, firstName, lastName, age):\n        self.firstName = firstName\n        self.lastName = lastName\n        self.age = age","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python Class for a Student and provide a constructor for creating objects of that class.\n\n### Input:\n\n\n### Output:\nclass Student:\n    def __init__(self, firstName, lastName, age):\n        self.firstName = firstName\n        self.lastName = lastName\n        self.age = age"}
{"instruction":"Come up with a solution to parse an HTML document using Python.","input":"","output":"Using the BeautifulSoup library in Python, we can parse an HTML document. First, we need to import the BeautifulSoup module:\n\nfrom bs4 import BeautifulSoup\n\nThen, we can create a BeautifulSoup object with the contents of the HTML document:\n\nsoup = BeautifulSoup(html, 'html.parser')\n\nWe can then use various methods provided by the library to parse the document, such as find(), findAll(), select() etc. For example, soup.find('div') will return the first <div> element in the document.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a solution to parse an HTML document using Python.\n\n### Input:\n\n\n### Output:\nUsing the BeautifulSoup library in Python, we can parse an HTML document. First, we need to import the BeautifulSoup module:\n\nfrom bs4 import BeautifulSoup\n\nThen, we can create a BeautifulSoup object with the contents of the HTML document:\n\nsoup = BeautifulSoup(html, 'html.parser')\n\nWe can then use various methods provided by the library to parse the document, such as find(), findAll(), select() etc. For example, soup.find('div') will return the first <div> element in the document."}
{"instruction":"Create a Python program to generate a Shamir's Secret Sharing Scheme implementation with a minimum of 8 shares.","input":"Not applicable","output":"import sys\nimport secrets\nfrom typing import List\n\ndef split_secret(secret: bytes, nb_shares: int, min_required: int) -> List[int]:\n  # Generate random prime\n  r = secrets.randbelow(sys.maxsize)\n  while not is_prime(r):\n    r = secrets.randbelow(sys.maxsize)\n\n  # Generate random coefficients\n  coefficients = [secret] + [ secrets.randbelow(r) for i in range(min_required-1) ]\n\n  # Compute the shares\n  shares = []\n  for i in range(1, nb_shares + 1):\n    val = coefficients[0]\n    for e, c in enumerate(coefficients[1:]):\n        val += c * pow(i, e+1, r)\n    shares.append(val)\n\n  return shares\n\ndef is_prime(x):\n    return pow(2, x-1, x) == 1\n\n# Split secret\nsecret = b'ABCDEFGH'\nshares = split_secret(secret, 8, 5)\n\nprint(shares)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a Shamir's Secret Sharing Scheme implementation with a minimum of 8 shares.\n\n### Input:\nNot applicable\n\n### Output:\nimport sys\nimport secrets\nfrom typing import List\n\ndef split_secret(secret: bytes, nb_shares: int, min_required: int) -> List[int]:\n  # Generate random prime\n  r = secrets.randbelow(sys.maxsize)\n  while not is_prime(r):\n    r = secrets.randbelow(sys.maxsize)\n\n  # Generate random coefficients\n  coefficients = [secret] + [ secrets.randbelow(r) for i in range(min_required-1) ]\n\n  # Compute the shares\n  shares = []\n  for i in range(1, nb_shares + 1):\n    val = coefficients[0]\n    for e, c in enumerate(coefficients[1:]):\n        val += c * pow(i, e+1, r)\n    shares.append(val)\n\n  return shares\n\ndef is_prime(x):\n    return pow(2, x-1, x) == 1\n\n# Split secret\nsecret = b'ABCDEFGH'\nshares = split_secret(secret, 8, 5)\n\nprint(shares)"}
{"instruction":"Construct an algorithm for predicting the sentiment of a text using Python.","input":"","output":"import nltk \nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef predict_sentiment(text):\n    #Download required NLTK data\n    nltk.download('vader_lexicon')\n    #Create sentiment analyzer object \n    sent_analyzer = SentimentIntensityAnalyzer()\n    #Predict sentiment \n    return sent_analyzer.polarity_scores(text)['compound']\n\n# Predict sentiment of a given text\ntext = \"This is an amazing movie!\"\nsentiment = predict_sentiment(text)\nif sentiment >= 0.5: \n   print('Positive') \nelif sentiment == 0.0: \n   print('Neutral')\nelse: \n   print('Negative')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm for predicting the sentiment of a text using Python.\n\n### Input:\n\n\n### Output:\nimport nltk \nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef predict_sentiment(text):\n    #Download required NLTK data\n    nltk.download('vader_lexicon')\n    #Create sentiment analyzer object \n    sent_analyzer = SentimentIntensityAnalyzer()\n    #Predict sentiment \n    return sent_analyzer.polarity_scores(text)['compound']\n\n# Predict sentiment of a given text\ntext = \"This is an amazing movie!\"\nsentiment = predict_sentiment(text)\nif sentiment >= 0.5: \n   print('Positive') \nelif sentiment == 0.0: \n   print('Neutral')\nelse: \n   print('Negative')"}
{"instruction":"Construct an implementation of a linked list in Python","input":"","output":"class Node: \n  \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data # Assign data \n        self.next = None # Initialize next as null \n\n# Linked List class contains a Node object \nclass LinkedList: \n\n    # Function to initialize head \n    def __init__(self): \n        self.head = None","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an implementation of a linked list in Python\n\n### Input:\n\n\n### Output:\nclass Node: \n  \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data # Assign data \n        self.next = None # Initialize next as null \n\n# Linked List class contains a Node object \nclass LinkedList: \n\n    # Function to initialize head \n    def __init__(self): \n        self.head = None"}
{"instruction":"Create a function in Python to optimize the hyperparameters of a support vector machine model for a given data set.","input":"","output":"import numpy as np\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\n\ndef optimize_svm(X, y):\n    \"\"\"Optimizes the hyperparameters of a Support Vector Machine model\n    using GridSearchCV.\n    \n    Parameters\n    ----------\n    X : numpy array\n        The feature dataset\n    y : numpy array\n        The target values\n        \n    Returns\n    -------\n    best_estimator : sklearn.svm.SVC\n        A fitted SVM Estimator instance\n    \"\"\"\n    tuned_parameters = [{'kernel': ['rbf'], 'gamma': [1e-3, 1e-4],\n                     'C': [1, 10, 100, 1000]},\n                    {'kernel': ['linear'], 'C': [1, 10, 100, 1000]}]\n    clf = GridSearchCV(SVC(), tuned_parameters, cv=5)\n    clf.fit(X, y)\n    best_estimator = clf.best_estimator_\n\n    return best_estimator","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to optimize the hyperparameters of a support vector machine model for a given data set.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\n\ndef optimize_svm(X, y):\n    \"\"\"Optimizes the hyperparameters of a Support Vector Machine model\n    using GridSearchCV.\n    \n    Parameters\n    ----------\n    X : numpy array\n        The feature dataset\n    y : numpy array\n        The target values\n        \n    Returns\n    -------\n    best_estimator : sklearn.svm.SVC\n        A fitted SVM Estimator instance\n    \"\"\"\n    tuned_parameters = [{'kernel': ['rbf'], 'gamma': [1e-3, 1e-4],\n                     'C': [1, 10, 100, 1000]},\n                    {'kernel': ['linear'], 'C': [1, 10, 100, 1000]}]\n    clf = GridSearchCV(SVC(), tuned_parameters, cv=5)\n    clf.fit(X, y)\n    best_estimator = clf.best_estimator_\n\n    return best_estimator"}
{"instruction":"Create a HTML page which displays your favorite programming language.","input":"","output":"<!DOCTYPE html>\n<html>\n    <head>\n        <title>My Favorite Programming Language<\/title>\n    <\/head>\n    <body>\n        <h1>My favorite programming language is Python!<\/h1>\n    <\/body>\n<\/html>","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a HTML page which displays your favorite programming language.\n\n### Input:\n\n\n### Output:\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>My Favorite Programming Language<\/title>\n    <\/head>\n    <body>\n        <h1>My favorite programming language is Python!<\/h1>\n    <\/body>\n<\/html>"}
{"instruction":"Create a list of all prime numbers from 1 to 1000 using Python.","input":"","output":"# Create an empty list \nprime_list = []\n\n# loop 1 to 1000\nfor num in range(2,1001):\n    prime = True\n    for i in range(2,num):\n        if (num % i == 0):\n           prime = False\n    if prime:\n       prime_list.append(num)\n\nprint(\"Prime numbers from 1 to 1000 are:\")\nprint(prime_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a list of all prime numbers from 1 to 1000 using Python.\n\n### Input:\n\n\n### Output:\n# Create an empty list \nprime_list = []\n\n# loop 1 to 1000\nfor num in range(2,1001):\n    prime = True\n    for i in range(2,num):\n        if (num % i == 0):\n           prime = False\n    if prime:\n       prime_list.append(num)\n\nprint(\"Prime numbers from 1 to 1000 are:\")\nprint(prime_list)"}
{"instruction":"Create a python script that takes in a number and tells whether it is odd or even.","input":"number:9","output":"def evenOdd(number): \n    if (number % 2 == 0): \n        print(\"Even\") \n    else: \n        print(\"Odd\") \n\nevenOdd(number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script that takes in a number and tells whether it is odd or even.\n\n### Input:\nnumber:9\n\n### Output:\ndef evenOdd(number): \n    if (number % 2 == 0): \n        print(\"Even\") \n    else: \n        print(\"Odd\") \n\nevenOdd(number)"}
{"instruction":"Create a python program to print the total number of vowels in a given string","input":"string = \"This is a sample string \"","output":"def count_vowels(string):\n    count = 0\n    for character in string:\n        if character in 'aeiouAEIOU':\n            count += 1\n    return count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to print the total number of vowels in a given string\n\n### Input:\nstring = \"This is a sample string \"\n\n### Output:\ndef count_vowels(string):\n    count = 0\n    for character in string:\n        if character in 'aeiouAEIOU':\n            count += 1\n    return count"}
{"instruction":"Extend a Python program to calculate the area of any regular polygon.","input":"3 sides","output":"def calculate_area(n):\n    \"\"\"\n    Calculates the area of an n-sided regular polygon\n    \"\"\"\n    # Calculate the area of the n-sided regular polygon\n    side_length = 1\n    area = (n * side_length**2) \/ (4 * math.tan(math.pi \/ n))\n    return round(area, 2)\n\n# Get the number of sides as an input\nn = int(input(\"Enter the number of sides\"))\n\n# Calculate the area and print it\narea = calculate_area(n)\nprint(\"The area of the regular polygon is\", area)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExtend a Python program to calculate the area of any regular polygon.\n\n### Input:\n3 sides\n\n### Output:\ndef calculate_area(n):\n    \"\"\"\n    Calculates the area of an n-sided regular polygon\n    \"\"\"\n    # Calculate the area of the n-sided regular polygon\n    side_length = 1\n    area = (n * side_length**2) \/ (4 * math.tan(math.pi \/ n))\n    return round(area, 2)\n\n# Get the number of sides as an input\nn = int(input(\"Enter the number of sides\"))\n\n# Calculate the area and print it\narea = calculate_area(n)\nprint(\"The area of the regular polygon is\", area)"}
{"instruction":"Create a class in Python that represents an employee object with three attributes - employee ID, name and salary.","input":"Not applicable","output":"class Employee:\n def __init__(self, employee_id, name, salary):\n self.employee_id = employee_id\n self.name = name\n self.salary = salary\n\n def __repr__(self):\n return 'Employee({}, {}, {})'.format(self.employee_id, self.name, self.salary)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that represents an employee object with three attributes - employee ID, name and salary.\n\n### Input:\nNot applicable\n\n### Output:\nclass Employee:\n def __init__(self, employee_id, name, salary):\n self.employee_id = employee_id\n self.name = name\n self.salary = salary\n\n def __repr__(self):\n return 'Employee({}, {}, {})'.format(self.employee_id, self.name, self.salary)"}
{"instruction":"Create a python script to create an NxN matrix with the values in the range 0 to NxN-1","input":"","output":"def generate_matrix(N):\n    matrix = [] \n    for i in range(N): \n        row = [] \n        for j in range(N): \n            row.append(i * N + j) \n        matrix.append(row) \n    return matrix","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to create an NxN matrix with the values in the range 0 to NxN-1\n\n### Input:\n\n\n### Output:\ndef generate_matrix(N):\n    matrix = [] \n    for i in range(N): \n        row = [] \n        for j in range(N): \n            row.append(i * N + j) \n        matrix.append(row) \n    return matrix"}
{"instruction":"Develop a Python generator to generate all prime numbers in range of 0 - 100.","input":"","output":"def generate_prime_numbers(n):\n    for num in range(2, n):\n        prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                prime = False\n                break\n        if prime:\n            yield num\n\nfor prime_number in generate_prime_numbers(100):\n    print(prime_number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python generator to generate all prime numbers in range of 0 - 100.\n\n### Input:\n\n\n### Output:\ndef generate_prime_numbers(n):\n    for num in range(2, n):\n        prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                prime = False\n                break\n        if prime:\n            yield num\n\nfor prime_number in generate_prime_numbers(100):\n    print(prime_number)"}
{"instruction":"Write a Python program to determine if a given point (x,y) is inside or outside a given circle.","input":"point = (2,2), center=(0, 0), radius=5","output":"def isInsideCircle(point, center, radius):\n    x = point[0] - center[0]\n    y = point[1] - center[1]\n    distance = (x**2 + y**2)**0.5\n    if distance <= radius:\n        return True\n    return False\n\npoint = (2,2)\ncenter = (0, 0)\nradius = 5\nisInsideCircle = isInsideCircle(point, center, radius)\n\nif isInsideCircle:\n    print(\"Point is inside the circle.\")\nelse:\n    print(\"Point is outside the circle.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to determine if a given point (x,y) is inside or outside a given circle.\n\n### Input:\npoint = (2,2), center=(0, 0), radius=5\n\n### Output:\ndef isInsideCircle(point, center, radius):\n    x = point[0] - center[0]\n    y = point[1] - center[1]\n    distance = (x**2 + y**2)**0.5\n    if distance <= radius:\n        return True\n    return False\n\npoint = (2,2)\ncenter = (0, 0)\nradius = 5\nisInsideCircle = isInsideCircle(point, center, radius)\n\nif isInsideCircle:\n    print(\"Point is inside the circle.\")\nelse:\n    print(\"Point is outside the circle.\")"}
{"instruction":"Write a Python code to determine if the user has enough money in the account for a given transaction.","input":"balance = 200\namount = 50","output":"def enough_balance(balance, amount):\n    if amount > balance:\n        return False\n    return True\n\nif __name__ == '__main__':\n    print(enough_balance(balance, amount))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to determine if the user has enough money in the account for a given transaction.\n\n### Input:\nbalance = 200\namount = 50\n\n### Output:\ndef enough_balance(balance, amount):\n    if amount > balance:\n        return False\n    return True\n\nif __name__ == '__main__':\n    print(enough_balance(balance, amount))"}
{"instruction":"Create a Python class for a Social Networking user that has properties such as name, age, interests.","input":"","output":"class SocialNetworkUser:\n    def __init__(self, name, age, interests):\n        self.name = name\n        self.age = age\n        self.interests = interests\n        \n    def get_name(self):\n        return self.name\n    \n    def set_name(self, name):\n        self.name = name\n        \n    def get_age(self):\n        return self.age\n    \n    def set_age(self, age):\n        self.age = age\n        \n    def get_interests(self):\n        return self.interests\n    \n    def set_interests(self, interests):\n        self.interests = interests","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for a Social Networking user that has properties such as name, age, interests.\n\n### Input:\n\n\n### Output:\nclass SocialNetworkUser:\n    def __init__(self, name, age, interests):\n        self.name = name\n        self.age = age\n        self.interests = interests\n        \n    def get_name(self):\n        return self.name\n    \n    def set_name(self, name):\n        self.name = name\n        \n    def get_age(self):\n        return self.age\n    \n    def set_age(self, age):\n        self.age = age\n        \n    def get_interests(self):\n        return self.interests\n    \n    def set_interests(self, interests):\n        self.interests = interests"}
{"instruction":"Write an algorithm in Python that inputs a large dataset and clusters it into several groups using k-Means Clustering.","input":"Not applicable","output":"import pandas as pd\nfrom sklearn.cluster import KMeans\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Train the model\nmodel = KMeans(n_clusters=6).fit(data)\n\n# Predict the clusters\nclusters = model.predict(data)\n\n# Visualize the clusters\nplt.scatter(data[:,0], data[:,1], c=clusters)\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python that inputs a large dataset and clusters it into several groups using k-Means Clustering.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nfrom sklearn.cluster import KMeans\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Train the model\nmodel = KMeans(n_clusters=6).fit(data)\n\n# Predict the clusters\nclusters = model.predict(data)\n\n# Visualize the clusters\nplt.scatter(data[:,0], data[:,1], c=clusters)\nplt.show()"}
{"instruction":"Optimize a Python script to find the maximum value of a series of numbers.","input":"lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","output":"def find_max(lst):\n max_value = None\n for number in lst:\n if max_value is None or number > max_value:\n max_value = number\n return max_value\n\n# Main\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nmax_value = find_max(lst)\nprint('The maximum value of the list is {}'.format(max_value))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Python script to find the maximum value of a series of numbers.\n\n### Input:\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n### Output:\ndef find_max(lst):\n max_value = None\n for number in lst:\n if max_value is None or number > max_value:\n max_value = number\n return max_value\n\n# Main\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nmax_value = find_max(lst)\nprint('The maximum value of the list is {}'.format(max_value))"}
{"instruction":"Draft a Python program to calculate the total amount of a given item in a shopping cart.","input":"[{'name': 'apple', 'price': 0.99, 'quantity': 3}, \n{'name': 'banana', 'price': 1.25, 'quantity': 4},\n{'name': 'pear', 'price': 0.50, 'quantity': 1}]","output":"def calculate_total(shopping_cart):\n total = 0\n for item in shopping_cart:\n  total += item['price'] * item['quantity']\n return total\n\nshopping_cart = [{'name': 'apple', 'price': 0.99, 'quantity': 3}, \n{'name': 'banana', 'price': 1.25, 'quantity': 4},\n{'name': 'pear', 'price': 0.50, 'quantity': 1}]\n\ntotal = calculate_total(shopping_cart)\nprint(total)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDraft a Python program to calculate the total amount of a given item in a shopping cart.\n\n### Input:\n[{'name': 'apple', 'price': 0.99, 'quantity': 3}, \n{'name': 'banana', 'price': 1.25, 'quantity': 4},\n{'name': 'pear', 'price': 0.50, 'quantity': 1}]\n\n### Output:\ndef calculate_total(shopping_cart):\n total = 0\n for item in shopping_cart:\n  total += item['price'] * item['quantity']\n return total\n\nshopping_cart = [{'name': 'apple', 'price': 0.99, 'quantity': 3}, \n{'name': 'banana', 'price': 1.25, 'quantity': 4},\n{'name': 'pear', 'price': 0.50, 'quantity': 1}]\n\ntotal = calculate_total(shopping_cart)\nprint(total)"}
{"instruction":"Create a Python function that takes a list of strings as input and returns a dictionary of words with their frequency counts.","input":"words = [\"apple\", \"orange\", \"apple\", \"orange\", \"pear\"]","output":"def word_count(words):\n    counter = {}\n    for word in words:\n        if word not in counter:\n            counter[word] = 0\n        counter[word] += 1\n    return counter\n    \nwords = [\"apple\", \"orange\", \"apple\", \"orange\", \"pear\"]\nword_count(words)\n\"\"\"\n{'apple': 2, 'orange': 2, 'pear': 1}\n\"\"\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes a list of strings as input and returns a dictionary of words with their frequency counts.\n\n### Input:\nwords = [\"apple\", \"orange\", \"apple\", \"orange\", \"pear\"]\n\n### Output:\ndef word_count(words):\n    counter = {}\n    for word in words:\n        if word not in counter:\n            counter[word] = 0\n        counter[word] += 1\n    return counter\n    \nwords = [\"apple\", \"orange\", \"apple\", \"orange\", \"pear\"]\nword_count(words)\n\"\"\"\n{'apple': 2, 'orange': 2, 'pear': 1}\n\"\"\""}
{"instruction":"Generate a function in Python to clear the screen.","input":"","output":"import os\ndef clear_screen():\n    os.system(\"cls\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python to clear the screen.\n\n### Input:\n\n\n### Output:\nimport os\ndef clear_screen():\n    os.system(\"cls\")"}
{"instruction":"Write a Python program to read a list of numbers and return the sum of elements in the list.","input":"[1,2,3,4,5]","output":"def sum_list(nums):\n    if not nums: \n        return 0\n    return nums[0] + sum_list(nums[1:])\n\nsum_list([1,2,3,4,5]) # 15","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to read a list of numbers and return the sum of elements in the list.\n\n### Input:\n[1,2,3,4,5]\n\n### Output:\ndef sum_list(nums):\n    if not nums: \n        return 0\n    return nums[0] + sum_list(nums[1:])\n\nsum_list([1,2,3,4,5]) # 15"}
{"instruction":"Generate keywords from the text \"How to build a machine learning model in Python\".","input":"How to build a machine learning model in Python","output":"\"keywords\": [\"machine learning model\", \"build machine learning model\", \"Python\", \"machine learning\", \"machine learning Python\", \"model building machine learning\", \"build model Python\"]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate keywords from the text \"How to build a machine learning model in Python\".\n\n### Input:\nHow to build a machine learning model in Python\n\n### Output:\n\"keywords\": [\"machine learning model\", \"build machine learning model\", \"Python\", \"machine learning\", \"machine learning Python\", \"model building machine learning\", \"build model Python\"]"}
{"instruction":"Write a function in Python that will take in a string and return the most commonly occurring character.","input":"Sample string: \"abrakadabra\"","output":"def max_char(s):\n    chars = {}\n    for c in s:\n        chars[c] = chars.get(c, 0) + 1\n    max_val = -1\n    max_char = None\n    for c, v in chars.items():\n        if v > max_val:\n            max_val = v\n            max_char = c\n    return max_char\n\nprint(max_char('abrakadabra'))\n\n# Output: a (occurs 5 times)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that will take in a string and return the most commonly occurring character.\n\n### Input:\nSample string: \"abrakadabra\"\n\n### Output:\ndef max_char(s):\n    chars = {}\n    for c in s:\n        chars[c] = chars.get(c, 0) + 1\n    max_val = -1\n    max_char = None\n    for c, v in chars.items():\n        if v > max_val:\n            max_val = v\n            max_char = c\n    return max_char\n\nprint(max_char('abrakadabra'))\n\n# Output: a (occurs 5 times)"}
{"instruction":"In Python print out the first 10 numbers of the Fibonacci sequence.","input":"","output":"a, b = 0, 1\nfor i in range(10):\n  print(a)\n  a, b = b, a + b\n\n# Output:\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python print out the first 10 numbers of the Fibonacci sequence.\n\n### Input:\n\n\n### Output:\na, b = 0, 1\nfor i in range(10):\n  print(a)\n  a, b = b, a + b\n\n# Output:\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34"}
{"instruction":"Create a Python script that connects to a MySQL database and executes an SQL query to output the most expensive products from the database.","input":"Database table structure:\n\nid (int)\nname (varchar)\nprice (float)","output":"import pymysql\n\n# Connect to MySQL database\nconn = pymysql.connect(\n    host='host',\n    user='user',\n    password='password',\n    db='dbname'\n    )\n\n# Create cursor\ncur = conn.cursor()\n\n# Execute query\nquery = 'SELECT name, price FROM products ORDER BY price DESC'\ncur.execute(query)\n\n# Fetch the most expensive products\nmost_expensive_products = cur.fetchall()\n\n# Print results\nfor product in most_expensive_products:\n    print(f'Product: {product[0]}, Price: {product[1]}')\n\n# Close connection\ncur.close()\nconn.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that connects to a MySQL database and executes an SQL query to output the most expensive products from the database.\n\n### Input:\nDatabase table structure:\n\nid (int)\nname (varchar)\nprice (float)\n\n### Output:\nimport pymysql\n\n# Connect to MySQL database\nconn = pymysql.connect(\n    host='host',\n    user='user',\n    password='password',\n    db='dbname'\n    )\n\n# Create cursor\ncur = conn.cursor()\n\n# Execute query\nquery = 'SELECT name, price FROM products ORDER BY price DESC'\ncur.execute(query)\n\n# Fetch the most expensive products\nmost_expensive_products = cur.fetchall()\n\n# Print results\nfor product in most_expensive_products:\n    print(f'Product: {product[0]}, Price: {product[1]}')\n\n# Close connection\ncur.close()\nconn.close()"}
{"instruction":"Create a program in Python which takes in a user's name and prints out a customized greeting message.","input":"","output":"def greeting(name):\n    '''This program will take in a user's name and prints out a customized greeting message.'''\n    print('Hello, %s! Welcome!' % (name))\n\nname = input('What is your name? ')\ngreeting(name)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python which takes in a user's name and prints out a customized greeting message.\n\n### Input:\n\n\n### Output:\ndef greeting(name):\n    '''This program will take in a user's name and prints out a customized greeting message.'''\n    print('Hello, %s! Welcome!' % (name))\n\nname = input('What is your name? ')\ngreeting(name)"}
{"instruction":"You are given a data set. Compute the mean of the data set using Python.","input":"[1, 2, 5, 10, 20, 50]","output":"def compute_mean(data):\n    total = 0\n    for num in data:\n        total += num\n    return total\/len(data)\n\ndata = [1, 2, 5, 10, 20, 50]\n\nresult = compute_mean(data)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are given a data set. Compute the mean of the data set using Python.\n\n### Input:\n[1, 2, 5, 10, 20, 50]\n\n### Output:\ndef compute_mean(data):\n    total = 0\n    for num in data:\n        total += num\n    return total\/len(data)\n\ndata = [1, 2, 5, 10, 20, 50]\n\nresult = compute_mean(data)\nprint(result)"}
{"instruction":"Create a web service to automatically summarize text using the TextRank algorithm.","input":"Not Applicable","output":"# Importing the necessary libraries\nimport nltk\nimport summarizer\n\n# Function to automatically summarize text using the TextRank algorithm\ndef summarize_text(text):\n  # Tokenizing the text\n  sentences = nltk.sent_tokenize(text)\n  # Generating the summary\n  summary = summarizer.summarize(sentences, ratio=0.2)\n  # Returning the summary\n  return summary\n  \n# Testing the summarize_text function   \ntext = \"Python is an interpreted, high-level, general-purpose programming language. Created by Guido van Rossum and first released in 1991, Python is today used by millions of people all over the world. Python was designed to be highly readable and accessible. Its syntax makes it easy to learn and use.\"\n\nsummary = summarize_text(text)\nprint(summary)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web service to automatically summarize text using the TextRank algorithm.\n\n### Input:\nNot Applicable\n\n### Output:\n# Importing the necessary libraries\nimport nltk\nimport summarizer\n\n# Function to automatically summarize text using the TextRank algorithm\ndef summarize_text(text):\n  # Tokenizing the text\n  sentences = nltk.sent_tokenize(text)\n  # Generating the summary\n  summary = summarizer.summarize(sentences, ratio=0.2)\n  # Returning the summary\n  return summary\n  \n# Testing the summarize_text function   \ntext = \"Python is an interpreted, high-level, general-purpose programming language. Created by Guido van Rossum and first released in 1991, Python is today used by millions of people all over the world. Python was designed to be highly readable and accessible. Its syntax makes it easy to learn and use.\"\n\nsummary = summarize_text(text)\nprint(summary)"}
{"instruction":"Construct a Python program to add two matrices.","input":"[[1,4,7], [2,5,8], [3,6,9]]","output":"def add_matrix(m1, m2):\n    result = [[0] * len(m1[0]) for i in range(len(m1))]\n    \n    for i in range(len(m1)):\n        for j in range(len(m1[0])):\n            result[i][j] = m1[i][j] + m2[i][j]\n            \n    return result\n\nresult = add_matrix([[1,4,7], [2,5,8], [3,6,9]], [[9,1,2], [5,3,4], [1,8,7]])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to add two matrices.\n\n### Input:\n[[1,4,7], [2,5,8], [3,6,9]]\n\n### Output:\ndef add_matrix(m1, m2):\n    result = [[0] * len(m1[0]) for i in range(len(m1))]\n    \n    for i in range(len(m1)):\n        for j in range(len(m1[0])):\n            result[i][j] = m1[i][j] + m2[i][j]\n            \n    return result\n\nresult = add_matrix([[1,4,7], [2,5,8], [3,6,9]], [[9,1,2], [5,3,4], [1,8,7]])\nprint(result)"}
{"instruction":"Design an algorithm in Python to check if an integer is even or odd.","input":"n = 5","output":"def check_number(n):\n    if n%2==0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\ncheck_number(5) \n# Output: Odd","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to check if an integer is even or odd.\n\n### Input:\nn = 5\n\n### Output:\ndef check_number(n):\n    if n%2==0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\ncheck_number(5) \n# Output: Odd"}
{"instruction":"Write a Python function to recognize a date (in \u201cDD\/MM\/YYYY\u201d format) in a string","input":"The deadline is 23\/05\/2020","output":"def recognize_date(s):\n    '''This function recognizes a date (in DD\/MM\/YYYY format) in a string.'''\n    # Regex for DD\/MM\/YYYY format\n    format_regex = re.compile(r'\\d{2}\/\\d{2}\/\\d{4}') \n    match = format_regex.search(s)\n    if match:\n        date = match.group()\n        return date\n    else:\n        return None","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to recognize a date (in \u201cDD\/MM\/YYYY\u201d format) in a string\n\n### Input:\nThe deadline is 23\/05\/2020\n\n### Output:\ndef recognize_date(s):\n    '''This function recognizes a date (in DD\/MM\/YYYY format) in a string.'''\n    # Regex for DD\/MM\/YYYY format\n    format_regex = re.compile(r'\\d{2}\/\\d{2}\/\\d{4}') \n    match = format_regex.search(s)\n    if match:\n        date = match.group()\n        return date\n    else:\n        return None"}
{"instruction":"Create a program that takes a numerical array and returns a reversed array in Python.","input":"[1,2,3,4,5]","output":"def reverse_array(array):\n    reversed_array = array[::-1]\n    return reversed_array\n\nreversed_array = reverse_array([1,2,3,4,5])\nprint(reversed_array)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that takes a numerical array and returns a reversed array in Python.\n\n### Input:\n[1,2,3,4,5]\n\n### Output:\ndef reverse_array(array):\n    reversed_array = array[::-1]\n    return reversed_array\n\nreversed_array = reverse_array([1,2,3,4,5])\nprint(reversed_array)"}
{"instruction":"Create a Python program to print all the unique words in a book. The program should take the name of the book as an input and then extract the words from the text and print only the unique words.","input":"Sample book text:\n\nThe sky was the color of a brilliant blue. The sun shone down on the ground as happy birds chirped in the trees.","output":"import string\n\ndef get_unique_words(book_text):\n words = book_text.split()\n\n # remove punctuations\n words = [word.strip(string.punctuation) for word in words]\n\n # remove empty strings\n words = [word for word in words if word != '']\n \n # get unique words \n unique_words = set(words)\n\n # print unique words\n for word in unique_words:\n print(word)\n\nbook_text = 'The sky was the color of a brilliant blue. The sun shone down on the ground as happy birds chirped in the trees.'\n\nget_unique_words(book_text)\n\n# Output\nThe\nshone\ntrees\nbirds\nground\nof\ncolor\nblue\nas\nwas\nbrilliant\nsun\nhappy\nchirped\nin\nsky","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print all the unique words in a book. The program should take the name of the book as an input and then extract the words from the text and print only the unique words.\n\n### Input:\nSample book text:\n\nThe sky was the color of a brilliant blue. The sun shone down on the ground as happy birds chirped in the trees.\n\n### Output:\nimport string\n\ndef get_unique_words(book_text):\n words = book_text.split()\n\n # remove punctuations\n words = [word.strip(string.punctuation) for word in words]\n\n # remove empty strings\n words = [word for word in words if word != '']\n \n # get unique words \n unique_words = set(words)\n\n # print unique words\n for word in unique_words:\n print(word)\n\nbook_text = 'The sky was the color of a brilliant blue. The sun shone down on the ground as happy birds chirped in the trees.'\n\nget_unique_words(book_text)\n\n# Output\nThe\nshone\ntrees\nbirds\nground\nof\ncolor\nblue\nas\nwas\nbrilliant\nsun\nhappy\nchirped\nin\nsky"}
{"instruction":"Generate a Python code to take user input and store it in a list.","input":"Not applicable","output":"user_input = []\n\nwhile True:\n user_in = input(\"Please enter your input: \")\n user_input.append(user_in)\n \n print(user_input)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code to take user input and store it in a list.\n\n### Input:\nNot applicable\n\n### Output:\nuser_input = []\n\nwhile True:\n user_in = input(\"Please enter your input: \")\n user_input.append(user_in)\n \n print(user_input)"}
{"instruction":"Implement a storage API in Python that supports the CRUD methods.","input":"","output":"class StorageAPI:\n    def __init__(self):\n        self._data = {}\n    \n    def create(self, key, data):\n        \"\"\"Creates a new entry in the storage API\"\"\"\n        self._data[key] = data\n    \n    def read(self, key):\n        \"\"\"Reads a entry from the storage API\"\"\"\n        return self._data.get(key, None)\n    \n    def update(self, key, data):\n        \"\"\"Updates a entry in the storage API\"\"\"\n        self._data[key] = data\n    \n    def delete(self, key):\n        \"\"\"Deletes a entry from the storage API\"\"\"\n        del self._data[key]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a storage API in Python that supports the CRUD methods.\n\n### Input:\n\n\n### Output:\nclass StorageAPI:\n    def __init__(self):\n        self._data = {}\n    \n    def create(self, key, data):\n        \"\"\"Creates a new entry in the storage API\"\"\"\n        self._data[key] = data\n    \n    def read(self, key):\n        \"\"\"Reads a entry from the storage API\"\"\"\n        return self._data.get(key, None)\n    \n    def update(self, key, data):\n        \"\"\"Updates a entry in the storage API\"\"\"\n        self._data[key] = data\n    \n    def delete(self, key):\n        \"\"\"Deletes a entry from the storage API\"\"\"\n        del self._data[key]"}
{"instruction":"Using Python, construct a program to calculates the average of three numbers (input provided).","input":"4, 9, 10","output":"num1 = 4\nnum2 = 9\nnum3 = 10\n\ntotal = num1 + num2 + num3\naverage = total \/ 3\nprint(\"Average =\", average)  # Output: Average = 7.66","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, construct a program to calculates the average of three numbers (input provided).\n\n### Input:\n4, 9, 10\n\n### Output:\nnum1 = 4\nnum2 = 9\nnum3 = 10\n\ntotal = num1 + num2 + num3\naverage = total \/ 3\nprint(\"Average =\", average)  # Output: Average = 7.66"}
{"instruction":"Write a Python function to get the n-th number in the Fibonacci sequence.","input":"","output":"def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to get the n-th number in the Fibonacci sequence.\n\n### Input:\n\n\n### Output:\ndef fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b"}
{"instruction":"Write a Python program that takes two given strings and checks if the first is a substring of the second one.","input":"string_1 = 'cat'\nstring_2 = 'the cats meow'","output":"def is_substring(string_1, string_2):\n    \n    if string_1 in string_2:\n        return True\n    else:\n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes two given strings and checks if the first is a substring of the second one.\n\n### Input:\nstring_1 = 'cat'\nstring_2 = 'the cats meow'\n\n### Output:\ndef is_substring(string_1, string_2):\n    \n    if string_1 in string_2:\n        return True\n    else:\n        return False"}
{"instruction":"Implement a web scraping script in Python to extract information from webpages.","input":"Not applicable","output":"import requests\nfrom bs4 import BeautifulSoup\n \nurl = 'http:\/\/example.com'\npage = requests.get(url)\nsoup = BeautifulSoup(page.text, 'html.parser')\n \n# Extract the data from the html\ndata = soup.find_all('div')\n \n# Do something with the extracted data\nfor d in data:\n  print(d)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a web scraping script in Python to extract information from webpages.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n \nurl = 'http:\/\/example.com'\npage = requests.get(url)\nsoup = BeautifulSoup(page.text, 'html.parser')\n \n# Extract the data from the html\ndata = soup.find_all('div')\n \n# Do something with the extracted data\nfor d in data:\n  print(d)"}
{"instruction":"Implement a neural network in Python which takes two inputs and produces a single output.","input":"Sample input to the neural network:\nInput 1: [1, 0, 0]\nInput 2: [1, 0, 0]","output":"import numpy as np\nimport matplotlib.pyplot as plt\n\n# Training dataset\nx = np.array([\n[1, 0, 0],\n[1, 0, 1],\n[1, 1, 0],\n[1, 1, 1]])\n\ny = np.array([[0],[1],[1],[0]])\n\n# Initialize the weights and bias\nW1 = np.random.rand(3, 4)\nW2 = np.random.rand(4, 1)\nb1 = np.random.rand(4,)\nb2 = np.random.rand(1,)\n\n# Define the sigmoid activation function\ndef sigmoid(x):\n return 1\/(1 + np.exp(-x))\n\n# Define the derivative of the sigmoid function\ndef derivative_sigmoid(x):\n return sigmoid(x)*(1-sigmoid(x))\n\n# Feedforward\nh1 = x.dot(W1) + b1\n# Hidden layer activation\na1 = sigmoid(h1)\n# Assesment of second layer\nh2 = a1.dot(W2) + b2\n# Final activation\noutput = sigmoid(h2)\n\n# Calculate the error \nerror = y - output\n\n# Backpropagation\nd_output = error * derivative_sigmoid(output)\nerror_hidden_layer = d_output.dot(W2.T)\nd_hidden_layer = error_hidden_layer * derivative_sigmoid(a1)\n\n# Update weights and bias\nW2 += a1.T.dot(d_output)\nb2 += np.sum(d_output, axis = 0, keepdims=True)\nW1 += x.T.dot(d_hidden_layer)\nb1 += np.sum(d_hidden_layer, axis = 0, keepdims=True)\n\n# Printed output from our neural network\nprint (output)\n\n# Sample input to the neural network\nInput 1: [1, 0, 0]\nInput 2: [1, 0, 0]\n\n# Printed output\n[[0.06108959]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a neural network in Python which takes two inputs and produces a single output.\n\n### Input:\nSample input to the neural network:\nInput 1: [1, 0, 0]\nInput 2: [1, 0, 0]\n\n### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Training dataset\nx = np.array([\n[1, 0, 0],\n[1, 0, 1],\n[1, 1, 0],\n[1, 1, 1]])\n\ny = np.array([[0],[1],[1],[0]])\n\n# Initialize the weights and bias\nW1 = np.random.rand(3, 4)\nW2 = np.random.rand(4, 1)\nb1 = np.random.rand(4,)\nb2 = np.random.rand(1,)\n\n# Define the sigmoid activation function\ndef sigmoid(x):\n return 1\/(1 + np.exp(-x))\n\n# Define the derivative of the sigmoid function\ndef derivative_sigmoid(x):\n return sigmoid(x)*(1-sigmoid(x))\n\n# Feedforward\nh1 = x.dot(W1) + b1\n# Hidden layer activation\na1 = sigmoid(h1)\n# Assesment of second layer\nh2 = a1.dot(W2) + b2\n# Final activation\noutput = sigmoid(h2)\n\n# Calculate the error \nerror = y - output\n\n# Backpropagation\nd_output = error * derivative_sigmoid(output)\nerror_hidden_layer = d_output.dot(W2.T)\nd_hidden_layer = error_hidden_layer * derivative_sigmoid(a1)\n\n# Update weights and bias\nW2 += a1.T.dot(d_output)\nb2 += np.sum(d_output, axis = 0, keepdims=True)\nW1 += x.T.dot(d_hidden_layer)\nb1 += np.sum(d_hidden_layer, axis = 0, keepdims=True)\n\n# Printed output from our neural network\nprint (output)\n\n# Sample input to the neural network\nInput 1: [1, 0, 0]\nInput 2: [1, 0, 0]\n\n# Printed output\n[[0.06108959]]"}
{"instruction":"How would you construct a loop in Python to iterate over a list?","input":"","output":"In Python, you can use a \"for\" loop to iterate over a list. For example:\n \nmy_list = [1, 2, 3, 4, 5]\nfor x in my_list:\n    print(x)\n\nThis will print each of the elements in the list on a new line.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you construct a loop in Python to iterate over a list?\n\n### Input:\n\n\n### Output:\nIn Python, you can use a \"for\" loop to iterate over a list. For example:\n \nmy_list = [1, 2, 3, 4, 5]\nfor x in my_list:\n    print(x)\n\nThis will print each of the elements in the list on a new line."}
{"instruction":"Take this Python Code and optimize it.","input":"def count_items(items):\n    item_counter = {}\n    for item in items:\n        if item not in item_counter:\n            item_counter[item] = 1\n        else:\n            item_counter[item] += 1        \n    return item_counter","output":"def count_items(items):\n    item_counter = {}\n    for item in items:\n        item_counter[item] = item_counter.get(item, 0) + 1\n    return item_counter","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTake this Python Code and optimize it.\n\n### Input:\ndef count_items(items):\n    item_counter = {}\n    for item in items:\n        if item not in item_counter:\n            item_counter[item] = 1\n        else:\n            item_counter[item] += 1        \n    return item_counter\n\n### Output:\ndef count_items(items):\n    item_counter = {}\n    for item in items:\n        item_counter[item] = item_counter.get(item, 0) + 1\n    return item_counter"}
{"instruction":"Take the following Python code and refactor it using list comprehensions.","input":"arr = [1, 2, 3, 4, 5, 6] \nnew_arr = [] \n\nfor i in arr: \n    if i % 2 == 0: \n        new_arr.append(i**2)","output":"arr = [1, 2, 3, 4, 5, 6] \nnew_arr = [i**2 for i in arr if i % 2 == 0]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTake the following Python code and refactor it using list comprehensions.\n\n### Input:\narr = [1, 2, 3, 4, 5, 6] \nnew_arr = [] \n\nfor i in arr: \n    if i % 2 == 0: \n        new_arr.append(i**2)\n\n### Output:\narr = [1, 2, 3, 4, 5, 6] \nnew_arr = [i**2 for i in arr if i % 2 == 0]"}
{"instruction":"Define a function in Python that takes three numbers as input and return the largest number","input":"","output":"def largestNumber(x, y, z):\n    if x > y and x > z:\n        return x\n    elif y > x and y > z:\n        return y\n    else:\n        return z","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDefine a function in Python that takes three numbers as input and return the largest number\n\n### Input:\n\n\n### Output:\ndef largestNumber(x, y, z):\n    if x > y and x > z:\n        return x\n    elif y > x and y > z:\n        return y\n    else:\n        return z"}
{"instruction":"Find the frequency of elements in a given list in Python.","input":"List: [1, 1, 2, 3, 3, 3, 4, 4, 5]","output":"from collections import Counter\n\ngiven_list = [1, 1, 2, 3, 3, 3, 4, 4, 5]\n\nmy_dict = Counter(given_list)\n\nprint(my_dict) # output: Counter({3: 3, 4: 2, 1: 2, 2: 1, 5: 1})","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the frequency of elements in a given list in Python.\n\n### Input:\nList: [1, 1, 2, 3, 3, 3, 4, 4, 5]\n\n### Output:\nfrom collections import Counter\n\ngiven_list = [1, 1, 2, 3, 3, 3, 4, 4, 5]\n\nmy_dict = Counter(given_list)\n\nprint(my_dict) # output: Counter({3: 3, 4: 2, 1: 2, 2: 1, 5: 1})"}
{"instruction":"Create a python script to parse a given XML document.","input":"","output":"import xml.etree.ElementTree as ET\n\ndef parse_xml_document(filename):\n    tree = ET.parse(filename) \n    root = tree.getroot() \n\n    # loop through the items in XML \n    for child in root: \n        print(child.attrib)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to parse a given XML document.\n\n### Input:\n\n\n### Output:\nimport xml.etree.ElementTree as ET\n\ndef parse_xml_document(filename):\n    tree = ET.parse(filename) \n    root = tree.getroot() \n\n    # loop through the items in XML \n    for child in root: \n        print(child.attrib)"}
{"instruction":"Create a python program to calculate the sum of two numbers and show the result in the console.","input":"12, 7","output":"# Calculate the sum of two numbers\nnum1 = 12\nnum2 = 7\nsum = num1 + num2\n\n# Print the result\nprint('The sum of two numbers is ', sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to calculate the sum of two numbers and show the result in the console.\n\n### Input:\n12, 7\n\n### Output:\n# Calculate the sum of two numbers\nnum1 = 12\nnum2 = 7\nsum = num1 + num2\n\n# Print the result\nprint('The sum of two numbers is ', sum)"}
{"instruction":"Construct a Python dictionary to store information about a user.","input":"name: John Smith\nage: 32\nlocation: USA","output":"user_info = {\n    'name': 'John Smith',\n    'age': 32,\n    'location': 'USA'\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python dictionary to store information about a user.\n\n### Input:\nname: John Smith\nage: 32\nlocation: USA\n\n### Output:\nuser_info = {\n    'name': 'John Smith',\n    'age': 32,\n    'location': 'USA'\n}"}
{"instruction":"Write a Python function to check if a given number is an Armstrong number or not. An Armstrong number is a number whose sum of cubes of its digits is equal to the number itself.","input":"","output":"def is_armstrong(n):\n num_list = list(map(int, str(n)))\n _sum = 0\n for num in num_list:\n _sum += num ** 3\n return n == _sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to check if a given number is an Armstrong number or not. An Armstrong number is a number whose sum of cubes of its digits is equal to the number itself.\n\n### Input:\n\n\n### Output:\ndef is_armstrong(n):\n num_list = list(map(int, str(n)))\n _sum = 0\n for num in num_list:\n _sum += num ** 3\n return n == _sum"}
{"instruction":"Create a Python function to parse an XML document and extract all the <tag> elements.","input":"An XML file","output":"import xml.etree.ElementTree as ET\n\ndef extract_tags(xml):\n    root = ET.fromstring(xml)\n    tags = root.findall('tag')\n\n    # Create list to store tag elements\n    tag_list = []\n    for tag in tags:\n        tag_list.append(tag.text)\n\n    # Return list of tags\n    return tag_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to parse an XML document and extract all the <tag> elements.\n\n### Input:\nAn XML file\n\n### Output:\nimport xml.etree.ElementTree as ET\n\ndef extract_tags(xml):\n    root = ET.fromstring(xml)\n    tags = root.findall('tag')\n\n    # Create list to store tag elements\n    tag_list = []\n    for tag in tags:\n        tag_list.append(tag.text)\n\n    # Return list of tags\n    return tag_list"}
{"instruction":"Create a data preprocessing pipeline in Python using the Scikit-Learn library.","input":"The dataset contains data about the health of a group of patients with 9 attributes: age, gender, height, weight, heart rate, blood pressure, cholesterol, glycemic index, and BMI.","output":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\n# Load the dataset\ndata = pd.read_csv('dataset.csv')\n\n# Separate the features and target\nX = data.drop(['target'], axis=1)\ny = data['target']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)\n\n# Standardizing the data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a data preprocessing pipeline in Python using the Scikit-Learn library.\n\n### Input:\nThe dataset contains data about the health of a group of patients with 9 attributes: age, gender, height, weight, heart rate, blood pressure, cholesterol, glycemic index, and BMI.\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\n# Load the dataset\ndata = pd.read_csv('dataset.csv')\n\n# Separate the features and target\nX = data.drop(['target'], axis=1)\ny = data['target']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)\n\n# Standardizing the data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)"}
{"instruction":"Generate a valid Python program for sorting a given array.","input":"[3, 7, 5, 1, 9, 8, 2]","output":"def selectionSort(arr):\n    for i in range(len(arr)): \n        \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_index = i \n        for j in range(i+1, len(arr)): \n            if arr[min_index] > arr[j]: \n                min_index = j \n                \n        # Swap the found minimum element with the first element         \n        arr[i], arr[min_index] = arr[min_index], arr[i] \n\n# test\narr = [3, 7, 5, 1, 9, 8, 2] \nselectionSort(arr) \nprint (\"Sorted array:\") \nfor i in range(len(arr)): \n    print(arr[i]),","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a valid Python program for sorting a given array.\n\n### Input:\n[3, 7, 5, 1, 9, 8, 2]\n\n### Output:\ndef selectionSort(arr):\n    for i in range(len(arr)): \n        \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_index = i \n        for j in range(i+1, len(arr)): \n            if arr[min_index] > arr[j]: \n                min_index = j \n                \n        # Swap the found minimum element with the first element         \n        arr[i], arr[min_index] = arr[min_index], arr[i] \n\n# test\narr = [3, 7, 5, 1, 9, 8, 2] \nselectionSort(arr) \nprint (\"Sorted array:\") \nfor i in range(len(arr)): \n    print(arr[i]),"}
{"instruction":"Create a Packet class that generates a binary packet from provided init_packet_fields. The class should include a method called generate_packet that returns a string representing the init_packet (in binary). The class should also include a dictionary called init_packet_fields that contains the packet fields. The class should use little endian format with standard sizes for python. The class should include an enum called PacketField that contains the packet field values. The class should include constants for unsigned short, unsigned int, unsigned char, and char array. The class should include a private method called __generate_struct_format_string that generates a struct format string based on keys that are present in init_packet_fields. The class should handle fields that require length and fields that require a specific format.","input":"","output":"# Copyright (c) 2015, Nordic Semiconductor\r\n# All rights reserved.\r\n#\r\n# Redistribution and use in source and binary forms, with or without\r\n# modification, are permitted provided that the following conditions are met:\r\n#\r\n# * Redistributions of source code must retain the above copyright notice, this\r\n#   list of conditions and the following disclaimer.\r\n#\r\n# * Redistributions in binary form must reproduce the above copyright notice,\r\n#   this list of conditions and the following disclaimer in the documentation\r\n#   and\/or other materials provided with the distribution.\r\n#\r\n# * Neither the name of Nordic Semiconductor ASA nor the names of its\r\n#   contributors may be used to endorse or promote products derived from\r\n#   this software without specific prior written permission.\r\n#\r\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\r\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\nfrom enum import Enum\r\nimport struct\r\n\r\n\r\nINIT_PACKET_USES_CRC16 = 0\r\nINIT_PACKET_USES_HASH = 1\r\nINIT_PACKET_EXT_USES_ECDS = 2 \r\n\r\n\r\nclass PacketField(Enum):\r\n    PACKET_VERSION = 1\r\n    COMPRESSION_TYPE = 2\r\n    DEVICE_TYPE = 3\r\n    DEVICE_REVISION = 4\r\n    APP_VERSION = 5\r\n    REQUIRED_SOFTDEVICES_ARRAY = 6\r\n    OPT_DATA = 7\r\n    NORDIC_PROPRIETARY_OPT_DATA_EXT_PACKET_ID = 8\r\n    NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_LENGTH = 9\r\n    NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_HASH = 10\r\n    NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_CRC16 = 11\r\n    NORDIC_PROPRIETARY_OPT_DATA_INIT_PACKET_ECDS = 12\r\n\r\n\r\nclass Packet(object):\r\n    \"\"\"\r\n    Class that implements the INIT packet format.\r\n    http:\/\/developer.nordicsemi.com\/nRF51_SDK\/doc\/7.1.0\/s110\/html\/a00065.html\r\n    \"\"\"\r\n\r\n    UNSIGNED_SHORT = \"H\"\r\n    UNSIGNED_INT = \"I\"\r\n    UNSIGNED_CHAR = \"B\"\r\n    CHAR_ARRAY = \"s\"\r\n\r\n    def __init__(self, init_packet_fields):\r\n        \"\"\"\r\n\r\n            :param init_packet_fields: Dictionary with packet fields\r\n        \"\"\"\r\n        self.init_packet_fields = init_packet_fields\r\n\r\n    def generate_packet(self):\r\n        \"\"\"\r\n        Generates a binary packet from provided init_packet_fields provided in constructor.\r\n        This version includes the extended data\r\n\r\n        :return str: Returns a string representing the init_packet (in binary)\r\n\r\n        \"\"\"\r\n        # Create struct format string based on keys that are\r\n        # present in self.init_packet_fields\r\n        format_string = self.__generate_struct_format_string()\r\n        args = []\r\n\r\n        for key in sorted(self.init_packet_fields.keys(), key=lambda x: x.value):\r\n            # Add length to fields that required that\r\n            if key in [PacketField.REQUIRED_SOFTDEVICES_ARRAY,\r\n                       PacketField.OPT_DATA]:\r\n                args.append(len(self.init_packet_fields[key]))\r\n                args.extend(self.init_packet_fields[key])\r\n            elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_EXT_PACKET_ID]:\r\n                args.append(self.init_packet_fields[key]) # Extended packet id format\r\n            elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_LENGTH]:\r\n                args.append(self.init_packet_fields[key]) # Length of firmware image\r\n            elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_CRC16]:\r\n                args.append(self.init_packet_fields[key])  # CRC-16\r\n            elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_HASH]:\r\n                args.append(self.init_packet_fields[key])  # SHA-256 hash of firmware image\r\n            elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_INIT_PACKET_ECDS]:\r\n                args.append(self.init_packet_fields[key])  # ECDS of base init packet using Curve P-256 amd SHA-256\r\n            else:\r\n                args.append(self.init_packet_fields[key])\r\n\r\n        return struct.pack(format_string, *args)\r\n\r\n    def __generate_struct_format_string(self):\r\n        format_string = \"<\"  # Use little endian format with standard sizes for python,\r\n        # see https:\/\/docs.python.org\/2\/library\/struct.html\r\n\r\n        for key in sorted(self.init_packet_fields.keys(), key=lambda x: x.value):\r\n            if key in [PacketField.PACKET_VERSION,\r\n                       PacketField.COMPRESSION_TYPE,\r\n                       PacketField.DEVICE_TYPE,\r\n                       PacketField.DEVICE_REVISION,\r\n                       ]:\r\n                format_string += Packet.UNSIGNED_SHORT\r\n\r\n            elif key in [PacketField.APP_VERSION]:\r\n                format_string += Packet.UNSIGNED_INT\r\n            elif key in [PacketField.REQUIRED_SOFTDEVICES_ARRAY]:\r\n                array_elements = self.init_packet_fields[key]\r\n                format_string += Packet.UNSIGNED_SHORT  # Add length field to format packet\r\n\r\n                for _ in range(len(array_elements)):\r\n                    format_string += Packet.UNSIGNED_SHORT\r\n            elif key in [PacketField.OPT_DATA]:\r\n                format_string += Packet.UNSIGNED_SHORT  # Add length field to optional data\r\n                format_string += \"{0}{1}\".format(len(self.init_packet_fields[key]), Packet.CHAR_ARRAY)\r\n            elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_EXT_PACKET_ID]:\r\n                format_string += Packet.UNSIGNED_INT # Add the extended packet id field\r\n            elif key == PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_LENGTH:\r\n                format_string += Packet.UNSIGNED_INT # Add the firmware length field\r\n            elif key == PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_HASH:\r\n                format_string += \"32{0}\".format(Packet.CHAR_ARRAY)  # SHA-256 requires 32 bytes\r\n            elif key == PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_CRC16:\r\n                format_string += Packet.UNSIGNED_SHORT\r\n            elif key == PacketField.NORDIC_PROPRIETARY_OPT_DATA_INIT_PACKET_ECDS:\r\n                format_string += \"64{0}\".format(Packet.CHAR_ARRAY)  # ECDS based on P-256 using SHA-256 requires 64 bytes\r\n\r\n        return format_string","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Packet class that generates a binary packet from provided init_packet_fields. The class should include a method called generate_packet that returns a string representing the init_packet (in binary). The class should also include a dictionary called init_packet_fields that contains the packet fields. The class should use little endian format with standard sizes for python. The class should include an enum called PacketField that contains the packet field values. The class should include constants for unsigned short, unsigned int, unsigned char, and char array. The class should include a private method called __generate_struct_format_string that generates a struct format string based on keys that are present in init_packet_fields. The class should handle fields that require length and fields that require a specific format.\n\n### Input:\n\n\n### Output:\n# Copyright (c) 2015, Nordic Semiconductor\r\n# All rights reserved.\r\n#\r\n# Redistribution and use in source and binary forms, with or without\r\n# modification, are permitted provided that the following conditions are met:\r\n#\r\n# * Redistributions of source code must retain the above copyright notice, this\r\n#   list of conditions and the following disclaimer.\r\n#\r\n# * Redistributions in binary form must reproduce the above copyright notice,\r\n#   this list of conditions and the following disclaimer in the documentation\r\n#   and\/or other materials provided with the distribution.\r\n#\r\n# * Neither the name of Nordic Semiconductor ASA nor the names of its\r\n#   contributors may be used to endorse or promote products derived from\r\n#   this software without specific prior written permission.\r\n#\r\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\r\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\nfrom enum import Enum\r\nimport struct\r\n\r\n\r\nINIT_PACKET_USES_CRC16 = 0\r\nINIT_PACKET_USES_HASH = 1\r\nINIT_PACKET_EXT_USES_ECDS = 2 \r\n\r\n\r\nclass PacketField(Enum):\r\n    PACKET_VERSION = 1\r\n    COMPRESSION_TYPE = 2\r\n    DEVICE_TYPE = 3\r\n    DEVICE_REVISION = 4\r\n    APP_VERSION = 5\r\n    REQUIRED_SOFTDEVICES_ARRAY = 6\r\n    OPT_DATA = 7\r\n    NORDIC_PROPRIETARY_OPT_DATA_EXT_PACKET_ID = 8\r\n    NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_LENGTH = 9\r\n    NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_HASH = 10\r\n    NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_CRC16 = 11\r\n    NORDIC_PROPRIETARY_OPT_DATA_INIT_PACKET_ECDS = 12\r\n\r\n\r\nclass Packet(object):\r\n    \"\"\"\r\n    Class that implements the INIT packet format.\r\n    http:\/\/developer.nordicsemi.com\/nRF51_SDK\/doc\/7.1.0\/s110\/html\/a00065.html\r\n    \"\"\"\r\n\r\n    UNSIGNED_SHORT = \"H\"\r\n    UNSIGNED_INT = \"I\"\r\n    UNSIGNED_CHAR = \"B\"\r\n    CHAR_ARRAY = \"s\"\r\n\r\n    def __init__(self, init_packet_fields):\r\n        \"\"\"\r\n\r\n            :param init_packet_fields: Dictionary with packet fields\r\n        \"\"\"\r\n        self.init_packet_fields = init_packet_fields\r\n\r\n    def generate_packet(self):\r\n        \"\"\"\r\n        Generates a binary packet from provided init_packet_fields provided in constructor.\r\n        This version includes the extended data\r\n\r\n        :return str: Returns a string representing the init_packet (in binary)\r\n\r\n        \"\"\"\r\n        # Create struct format string based on keys that are\r\n        # present in self.init_packet_fields\r\n        format_string = self.__generate_struct_format_string()\r\n        args = []\r\n\r\n        for key in sorted(self.init_packet_fields.keys(), key=lambda x: x.value):\r\n            # Add length to fields that required that\r\n            if key in [PacketField.REQUIRED_SOFTDEVICES_ARRAY,\r\n                       PacketField.OPT_DATA]:\r\n                args.append(len(self.init_packet_fields[key]))\r\n                args.extend(self.init_packet_fields[key])\r\n            elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_EXT_PACKET_ID]:\r\n                args.append(self.init_packet_fields[key]) # Extended packet id format\r\n            elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_LENGTH]:\r\n                args.append(self.init_packet_fields[key]) # Length of firmware image\r\n            elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_CRC16]:\r\n                args.append(self.init_packet_fields[key])  # CRC-16\r\n            elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_HASH]:\r\n                args.append(self.init_packet_fields[key])  # SHA-256 hash of firmware image\r\n            elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_INIT_PACKET_ECDS]:\r\n                args.append(self.init_packet_fields[key])  # ECDS of base init packet using Curve P-256 amd SHA-256\r\n            else:\r\n                args.append(self.init_packet_fields[key])\r\n\r\n        return struct.pack(format_string, *args)\r\n\r\n    def __generate_struct_format_string(self):\r\n        format_string = \"<\"  # Use little endian format with standard sizes for python,\r\n        # see https:\/\/docs.python.org\/2\/library\/struct.html\r\n\r\n        for key in sorted(self.init_packet_fields.keys(), key=lambda x: x.value):\r\n            if key in [PacketField.PACKET_VERSION,\r\n                       PacketField.COMPRESSION_TYPE,\r\n                       PacketField.DEVICE_TYPE,\r\n                       PacketField.DEVICE_REVISION,\r\n                       ]:\r\n                format_string += Packet.UNSIGNED_SHORT\r\n\r\n            elif key in [PacketField.APP_VERSION]:\r\n                format_string += Packet.UNSIGNED_INT\r\n            elif key in [PacketField.REQUIRED_SOFTDEVICES_ARRAY]:\r\n                array_elements = self.init_packet_fields[key]\r\n                format_string += Packet.UNSIGNED_SHORT  # Add length field to format packet\r\n\r\n                for _ in range(len(array_elements)):\r\n                    format_string += Packet.UNSIGNED_SHORT\r\n            elif key in [PacketField.OPT_DATA]:\r\n                format_string += Packet.UNSIGNED_SHORT  # Add length field to optional data\r\n                format_string += \"{0}{1}\".format(len(self.init_packet_fields[key]), Packet.CHAR_ARRAY)\r\n            elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_EXT_PACKET_ID]:\r\n                format_string += Packet.UNSIGNED_INT # Add the extended packet id field\r\n            elif key == PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_LENGTH:\r\n                format_string += Packet.UNSIGNED_INT # Add the firmware length field\r\n            elif key == PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_HASH:\r\n                format_string += \"32{0}\".format(Packet.CHAR_ARRAY)  # SHA-256 requires 32 bytes\r\n            elif key == PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_CRC16:\r\n                format_string += Packet.UNSIGNED_SHORT\r\n            elif key == PacketField.NORDIC_PROPRIETARY_OPT_DATA_INIT_PACKET_ECDS:\r\n                format_string += \"64{0}\".format(Packet.CHAR_ARRAY)  # ECDS based on P-256 using SHA-256 requires 64 bytes\r\n\r\n        return format_string"}
{"instruction":"Create a Python program for identifying the longest common string in two text documents.","input":"Document 1: \"This is a test document for identifying the longest common string.\"\n\nDocument 2: \"This is another document for searching for the longest common string.\"","output":"def longest_common_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ndocument1 = \"This is a test document for identifying the longest common string.\"\ndocument2 = \"This is another document for searching for the longest common string.\"\n\nprint(longest_common_substring(document1, document2))\n\n# Output: \"longest common string\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for identifying the longest common string in two text documents.\n\n### Input:\nDocument 1: \"This is a test document for identifying the longest common string.\"\n\nDocument 2: \"This is another document for searching for the longest common string.\"\n\n### Output:\ndef longest_common_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ndocument1 = \"This is a test document for identifying the longest common string.\"\ndocument2 = \"This is another document for searching for the longest common string.\"\n\nprint(longest_common_substring(document1, document2))\n\n# Output: \"longest common string\""}
{"instruction":"Write a Python function to classify a given string based on the following conditions:\nA) If the length of the string is less than 3, \u201cShort\u201d\nB) If the string only contains alphabets, \u201cAlphabet\u201d\nC) If the string only contains numbers, \u201cNumeral\u201d","input":"string = \"ab1\"","output":"def classify_string(string):\n    if len(string) < 3:\n        return \"Short\" \n    elif string.isalpha():\n        return \"Alphabet\" \n    elif string.isnumeric():\n        return \"Numeral\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to classify a given string based on the following conditions:\nA) If the length of the string is less than 3, \u201cShort\u201d\nB) If the string only contains alphabets, \u201cAlphabet\u201d\nC) If the string only contains numbers, \u201cNumeral\u201d\n\n### Input:\nstring = \"ab1\"\n\n### Output:\ndef classify_string(string):\n    if len(string) < 3:\n        return \"Short\" \n    elif string.isalpha():\n        return \"Alphabet\" \n    elif string.isnumeric():\n        return \"Numeral\""}
{"instruction":"Write a Python program that finds the sum of squares of all numbers between 1 and 10","input":"","output":"def sum_of_squares(start, end):\n    \"\"\" This function calculates the sum of squared\n    numbers from start to end\n    \n    Input:\n        start: starting number\n        end: ending number\n    \n    Output:\n        total: total sum of squares\n    \"\"\"\n    \n    total = 0\n    for num in range(start, end + 1):\n        total += num ** 2\n    return total\n\ntotal_sum = sum_of_squares(1, 10)\nprint(total_sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that finds the sum of squares of all numbers between 1 and 10\n\n### Input:\n\n\n### Output:\ndef sum_of_squares(start, end):\n    \"\"\" This function calculates the sum of squared\n    numbers from start to end\n    \n    Input:\n        start: starting number\n        end: ending number\n    \n    Output:\n        total: total sum of squares\n    \"\"\"\n    \n    total = 0\n    for num in range(start, end + 1):\n        total += num ** 2\n    return total\n\ntotal_sum = sum_of_squares(1, 10)\nprint(total_sum)"}
{"instruction":"Write a Python program for a chatbot that allows customers to book an appointment with a doctor.","input":"Not applicable","output":"import random\n\ndef bot_responses(input_message):\n\n# Responses when the user is asking to book an appointment\n    if input_message.lower() == 'I want to book an appointment':\n        return 'OK, please provide the following details: date, time, name, and the doctor you would like to visit.'\n\n# Responses when the user is providing the required details\n    elif 'date' in input_message.lower() and 'time' in input_message.lower() and 'name' in input_message.lower() and 'doctor' in input_message.lower():\n        return 'Your appointment has been booked. Please arrive 15 minutes before your appointment time.'\n\n# Random response to other messages\n    else:\n        responses = ['I\\'m sorry, I don\\'t understand.','Can you please rephrase that?','What do you mean?']\n        return random.choice(responses)\n\n\nwhile 1:\n    input_message = input('You: ')\n    bot_output_message = bot_responses(input_message)\n    print('Bot:', bot_output_message)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program for a chatbot that allows customers to book an appointment with a doctor.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\ndef bot_responses(input_message):\n\n# Responses when the user is asking to book an appointment\n    if input_message.lower() == 'I want to book an appointment':\n        return 'OK, please provide the following details: date, time, name, and the doctor you would like to visit.'\n\n# Responses when the user is providing the required details\n    elif 'date' in input_message.lower() and 'time' in input_message.lower() and 'name' in input_message.lower() and 'doctor' in input_message.lower():\n        return 'Your appointment has been booked. Please arrive 15 minutes before your appointment time.'\n\n# Random response to other messages\n    else:\n        responses = ['I\\'m sorry, I don\\'t understand.','Can you please rephrase that?','What do you mean?']\n        return random.choice(responses)\n\n\nwhile 1:\n    input_message = input('You: ')\n    bot_output_message = bot_responses(input_message)\n    print('Bot:', bot_output_message)"}
{"instruction":"Generate Python code for a linear regression model. The model should take two numerical inputs, x and y, and be able to predict the numerical output that best fits the given data.","input":"x: [1, 2, 3]\ny: [3, 6, 9]","output":"import numpy as np\n\nx = np.array([1, 2, 3])\ny = np.array([3, 6, 9])\n\n# Create the design matrix\nX = np.vstack([np.ones(len(x)), x]).T\n\n# Calculate the weights\nw = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)\n\n# Predicted output\ny_pred = X.dot(w)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code for a linear regression model. The model should take two numerical inputs, x and y, and be able to predict the numerical output that best fits the given data.\n\n### Input:\nx: [1, 2, 3]\ny: [3, 6, 9]\n\n### Output:\nimport numpy as np\n\nx = np.array([1, 2, 3])\ny = np.array([3, 6, 9])\n\n# Create the design matrix\nX = np.vstack([np.ones(len(x)), x]).T\n\n# Calculate the weights\nw = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)\n\n# Predicted output\ny_pred = X.dot(w)"}
{"instruction":"Write a Python program to edit a list given some criteria.","input":"list = [5, 6, 2, 8, 11]\ncriteria = lambda x: x % 2 == 0","output":"def edit_list(list, criteria):\n    return [x for x in list if criteria(x) == True]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to edit a list given some criteria.\n\n### Input:\nlist = [5, 6, 2, 8, 11]\ncriteria = lambda x: x % 2 == 0\n\n### Output:\ndef edit_list(list, criteria):\n    return [x for x in list if criteria(x) == True]"}
{"instruction":"Develop a Python program to find all possible words from a set of characters","input":"The set of characters is 'abcd'","output":"def findWords(string):\n    results = []\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            results.append(string[i:j])\n    return results\n\nstring = \"abcd\"\nprint(findWords(string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to find all possible words from a set of characters\n\n### Input:\nThe set of characters is 'abcd'\n\n### Output:\ndef findWords(string):\n    results = []\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            results.append(string[i:j])\n    return results\n\nstring = \"abcd\"\nprint(findWords(string))"}
{"instruction":"write a python code to filter 'mylist' and remove odd numbers","input":"mylist = [2, 3, 5, 7, 11, 13, 17, 19]","output":"mylist = [x for x in mylist if x % 2 == 0]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nwrite a python code to filter 'mylist' and remove odd numbers\n\n### Input:\nmylist = [2, 3, 5, 7, 11, 13, 17, 19]\n\n### Output:\nmylist = [x for x in mylist if x % 2 == 0]"}
{"instruction":"Create a Python script to perform sentiment analysis on a dataset of movie reviews.","input":"The dataset contains 1000 reviews with comments on movie1.","output":"import nltk\nnltk.download('vader_lexicon')\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nfrom sklearn.metrics import accuracy_score\n\n#load dataset into list\nwith open('movie_reviews.txt') as f:\nreviews = [line.strip() for line in f]\n\n#initialize our sentiment analyser\nanalyzer = SentimentIntensityAnalyzer()\n\n#analyze each review sentiment\nsentiments = []\nfor review in reviews:\n    score = analyzer.polarity_scores(review)\n    sentiments.append(score)\n\n#compare sentiment to true labels and store accuracy\ntrue_labels = [0, 1, 0, 1, 1, 0, 0, 0, 0, 1] #label for each review\npredicted_labels = [sentiment['compound'] for sentiment in sentiments]\npredicted_labels = [0 if score<0 else 1 for score in predicted_labels]\naccuracy = accuracy_score(true_labels, predicted_labels)\n\nprint(\"Accuracy: {}\".format(accuracy))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to perform sentiment analysis on a dataset of movie reviews.\n\n### Input:\nThe dataset contains 1000 reviews with comments on movie1.\n\n### Output:\nimport nltk\nnltk.download('vader_lexicon')\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nfrom sklearn.metrics import accuracy_score\n\n#load dataset into list\nwith open('movie_reviews.txt') as f:\nreviews = [line.strip() for line in f]\n\n#initialize our sentiment analyser\nanalyzer = SentimentIntensityAnalyzer()\n\n#analyze each review sentiment\nsentiments = []\nfor review in reviews:\n    score = analyzer.polarity_scores(review)\n    sentiments.append(score)\n\n#compare sentiment to true labels and store accuracy\ntrue_labels = [0, 1, 0, 1, 1, 0, 0, 0, 0, 1] #label for each review\npredicted_labels = [sentiment['compound'] for sentiment in sentiments]\npredicted_labels = [0 if score<0 else 1 for score in predicted_labels]\naccuracy = accuracy_score(true_labels, predicted_labels)\n\nprint(\"Accuracy: {}\".format(accuracy))"}
{"instruction":"Implement Object-Oriented Programming in this blog post.","input":"Blog post content:\n\nThis post is about the basics of Python programming. You'll learn about data types, loops, and functions","output":"# Object-Oriented Programming Implementation\n\nclass Python:\n    # Basic data types\n    INTEGER = \"integer\"\n    FLOAT = \"float\"\n    STRING = \"string\"\n    BOOLEAN = \"boolean\" \n\n    def __init__(self):\n        self.__data_types = [self.INTEGER, self.FLOAT, self.STRING, self.BOOLEAN]\n\n    # Function to get the data types\n    def get_data_types(self):\n        return self.__data_types\n\n    # Loops\n\n    # Function to loop through a list\n    def loop_list(self, collection):\n        for item in collection:\n            print(item)\n\n    # Function to loop through a range\n    def loop_range(self, start, end):\n        for i in range(start,end):\n            print(i)\n    \n    # Functions\n\n    # Function to calculate the sum\n    def sum_nums(self, num1, num2):\n        return num1+num2\n\n    # Function to calculate the product\n    def multiply_nums(self, num1, num2):\n        return num1*num2\n\n# Main code\npython = Python()\ndata_types = python.get_data_types()\n\nprint(\"Data Types: \", data_types)\n\nnumbers = [1,2,3,4]\npython.loop_list(numbers)\n\npython.loop_range(1, 10)\n\nprint(\"Sum: \", python.sum_nums(4,5))\nprint(\"Product: \", python.multiply_nums(4,5))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement Object-Oriented Programming in this blog post.\n\n### Input:\nBlog post content:\n\nThis post is about the basics of Python programming. You'll learn about data types, loops, and functions\n\n### Output:\n# Object-Oriented Programming Implementation\n\nclass Python:\n    # Basic data types\n    INTEGER = \"integer\"\n    FLOAT = \"float\"\n    STRING = \"string\"\n    BOOLEAN = \"boolean\" \n\n    def __init__(self):\n        self.__data_types = [self.INTEGER, self.FLOAT, self.STRING, self.BOOLEAN]\n\n    # Function to get the data types\n    def get_data_types(self):\n        return self.__data_types\n\n    # Loops\n\n    # Function to loop through a list\n    def loop_list(self, collection):\n        for item in collection:\n            print(item)\n\n    # Function to loop through a range\n    def loop_range(self, start, end):\n        for i in range(start,end):\n            print(i)\n    \n    # Functions\n\n    # Function to calculate the sum\n    def sum_nums(self, num1, num2):\n        return num1+num2\n\n    # Function to calculate the product\n    def multiply_nums(self, num1, num2):\n        return num1*num2\n\n# Main code\npython = Python()\ndata_types = python.get_data_types()\n\nprint(\"Data Types: \", data_types)\n\nnumbers = [1,2,3,4]\npython.loop_list(numbers)\n\npython.loop_range(1, 10)\n\nprint(\"Sum: \", python.sum_nums(4,5))\nprint(\"Product: \", python.multiply_nums(4,5))"}
{"instruction":"Write a Python program to automatically scrape product prices from WalMart.com","input":"Not applicable","output":"from bs4 import BeautifulSoup\nimport requests\n\nURL = 'https:\/\/www.walmart.com\/browse\/electronics'\npage = requests.get(URL)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Get all elements of class 'price-group'\nprice_group = soup.find_all('span', attrs={'class': 'price-group'})\n\n# Iterate over all elements and extract prices\nfor pg in price_group:\n    price = pg.find('span', attrs={'class': 'price-characteristic'}).text\n    # Convert to float\n    price = float(price)\n    print(\"Price: {}\".format(price))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to automatically scrape product prices from WalMart.com\n\n### Input:\nNot applicable\n\n### Output:\nfrom bs4 import BeautifulSoup\nimport requests\n\nURL = 'https:\/\/www.walmart.com\/browse\/electronics'\npage = requests.get(URL)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Get all elements of class 'price-group'\nprice_group = soup.find_all('span', attrs={'class': 'price-group'})\n\n# Iterate over all elements and extract prices\nfor pg in price_group:\n    price = pg.find('span', attrs={'class': 'price-characteristic'}).text\n    # Convert to float\n    price = float(price)\n    print(\"Price: {}\".format(price))"}
{"instruction":"Create code in Python to check the right-hand side of a list and remove any elements which are divisible by 3.","input":"arr = [12, 15, 3, 8, 10, 24]","output":"arr = [12, 15, 8, 10]\narr[:] = [x for x in arr if x % 3 != 0]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate code in Python to check the right-hand side of a list and remove any elements which are divisible by 3.\n\n### Input:\narr = [12, 15, 3, 8, 10, 24]\n\n### Output:\narr = [12, 15, 8, 10]\narr[:] = [x for x in arr if x % 3 != 0]"}
{"instruction":"Write a Python program that calculates the greatest common divisor of two numbers and displays the result.","input":"10 and 20","output":"def gcd(a, b):\n    if b == 0: \n        return a \n    return gcd(b, a % b) \n  \nnum1 = 10\nnum2 = 20\n\ngcd_value = gcd(num1, num2)\n\nprint(f'The greatest common divisor of {num1} and {num2} is {gcd_value}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that calculates the greatest common divisor of two numbers and displays the result.\n\n### Input:\n10 and 20\n\n### Output:\ndef gcd(a, b):\n    if b == 0: \n        return a \n    return gcd(b, a % b) \n  \nnum1 = 10\nnum2 = 20\n\ngcd_value = gcd(num1, num2)\n\nprint(f'The greatest common divisor of {num1} and {num2} is {gcd_value}')"}
{"instruction":"The code is a Python script that inserts data into a MySQL database. To use this code, you need to have a MySQL database set up and running. You also need to have the necessary Python libraries installed. Once you have these prerequisites, you can call the functions in the script to insert data into the database. The functions include inserting domain, subdomain, region, country, workcenter, postatus, and ordering company data. To insert data, call the appropriate function and pass in the database connection object as an argument.","input":"","output":"#encoding=utf-8\n\nimport MySQLdb, os\nfrom django.core.checks.registry import Tags\n\ndef insertDomain(db):\n    cursor = db.cursor()\n    sql = \"insert into %(table)s (%(para)s) values ('%(value)s')\"\n    insertValues = {'table' : 'quotation_domain', 'para' : 'name', 'value' : 'CD'}\n    f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + 'domain', 'r+')\n    for line in f.readlines():\n        line = line.strip()\n        if('' != line):\n            insertValues['value'] = line\n            exesql = sql % insertValues\n            cursor.execute(exesql)\n    db.commit()\n    db.close()\n    \ndef insertSubDomain(db):\n    cursor = db.cursor()\n    sql = \"insert into %(table)s (%(para)s) values ('%(value)s')\"\n    insertValues = {'table' : 'quotation_domain', 'para' : 'name', 'value' : 'CD'}\n    insertValues['table'] = 'quotation_subdomain'\n    f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + 'subdomain', 'r+')\n    for line in f.readlines():\n        line = line.strip()\n        if('' != line):\n            insertValues['value'] = line\n            exesql = sql % insertValues\n            cursor.execute(exesql)\n    db.commit()\n    db.close()\n    \ndef insertRegion(db, tableName, valueTag, fileName):\n    cursor = db.cursor()\n    sql = \"insert into %(table)s (%(valueTag)s) values ('%(value)s')\"\n    insertValues = {'table' : tableName, 'valueTag' : valueTag, 'value' : 'xxxxx'}\n    #print sql % insertValues\n    f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + fileName, 'r+')\n    for line in f.readlines():\n        line = line.strip()\n        if('' != line):\n            para = line.split('**')\n            if(len(para) > 1):\n                insertValues['value'] = para[0].strip()\n                cursor.execute(sql % insertValues)\n    db.commit()\n    db.close()\n\ndef insertValuesWithForignKey(db, table, tagValue, tagForKey, f_table, f_tagvalue, fileName = 'unitid'):\n    cursor = db.cursor()\n    sql = \"insert into %(table)s (\" + tagValue + \",\" + tagForKey + \") values ('%(\" + tagValue + \")s', %(\" + tagForKey + \")s)\"\n    insertValues = {'table' : table, tagValue : 'OMS CD', tagForKey : 1}\n    \n    f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + fileName, 'r+')\n    \n    f_id = -1\n    exeTimes = 0\n    for line in f.readlines():\n        exeTimes += 1\n        line = line.strip()\n        if('' != line):\n            para = line.split('**')\n            if(len(para) > 1):\n                f_name = para[0].strip()\n                cursor.execute(\"select id from %s where %s='%s'\" % (f_table, f_tagvalue, f_name))\n                f_id = cursor.fetchone()[0]\n                insertValues[tagValue] = para[1].strip().replace('\\'', \"\\\\'\")\n                insertValues[tagForKey] = f_id\n                print sql % insertValues\n            else:\n                insertValues[tagValue] = para[0].strip().replace('\\'', \"\\\\'\")\n                insertValues[tagForKey] = f_id\n                print sql % insertValues\n            cursor.execute(sql % insertValues)\n        \n        if(exeTimes % 10 == 0):\n            db.commit()\n            #pass\n    db.commit()\n    db.close()\n\ndef insertWorkcenter(db, tableName, fileName, *tags):\n    if(4 != len(tags)):\n        return False\n    else:\n        cursor = db.cursor()\n        sql = \"insert into %(tableName)s (\" + tags[0] + \",\" + tags[1] + \",\" + tags[2] + \",\" + tags[3] + \") values ('%(\" + tags[0] + \")s','%(\" + tags[1] + \")s','%(\" + tags[2] + \")s','%(\"+ tags[3] +\")s')\".encode('utf-8')\n        insertDatas = {\n                       'tableName' : tableName,\n                       tags[0] : '',\n                       tags[1] : '',\n                       tags[2] : '',\n                       tags[3] : ''\n                       }\n        f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + fileName, 'r+')\n        \n        cIndex = 0\n        for line in f.readlines():\n            cIndex += 1\n            if('' != line):\n                para = line.split('**')\n                if(len(para) > 3):\n                    insertDatas[tags[0]] = para[0].strip().replace(\"\\'\", \"\\\\'\").encode('utf-8')\n                    insertDatas[tags[1]] = para[1].strip().replace(\"\\'\", \"\\\\'\").encode('utf-8')\n                    insertDatas[tags[2]] = para[2].strip().replace(\"\\'\", \"\\\\'\").encode('utf-8')\n                    insertDatas[tags[3]] = para[3].strip().replace(\"\\'\", \"\\\\'\").encode('utf-8')\n                    #print (sql % insertDatas).encode('utf-8')\n                    cursor.execute((sql % insertDatas).encode('utf-8'))\n            if(cIndex % 10 == 0):\n                db.commit()\n        db.commit()\n        db.close()\n\ndef insertPostatus(db, fileName):\n    cursor = db.cursor()\n    sql = \"insert into quotation_postatus (name) values ('%s')\"\n    f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + fileName, 'r+')\n    for line in f.readlines():\n        line = line.strip()\n        if('' != line):\n            exesql = sql % line\n            cursor.execute(exesql)\n    db.commit()\n    db.close()\n\ndef insertOrderingcompany(db, fileName):\n    cursor = db.cursor()\n    sql = \"insert into quotation_orderingcompany (name) values ('%s')\"\n    f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + fileName, 'r+')\n    \n    cIndex = 0\n    for line in f.readlines():\n        cIndex += 1\n        line = line.strip()\n        if('' != line):\n            exesql = sql % line\n            #print exesql\n            cursor.execute(exesql)\n        if( 0 == cIndex % 10):\n            db.commit()\n    db.commit()\n    db.close()\n\nif __name__ == '__main__':\n    host = \"localhost\"\n    passwd = \"tatool\"\n    user = \"tatool\"\n    dbname = \"eeep\"\n    db = MySQLdb.connect(host=host, user=user, passwd=passwd, db=dbname)\n    \n    #insertDomain(db)\n    #insertSubDomain(db)\n    #insertValuesWithForignKey(db, 'quotation_unitid', 'name', 'domain_id', \"quotation_domain\", \"name\")\n    #insertRegion(db, 'quotation_region', 'name', 'regionandcountry')\n    #insertValuesWithForignKey(db, 'quotation_country', 'name', 'region_id', \"quotation_region\", \"name\", 'regionandcountry')\n    #insertWorkcenter(db, 'quotation_workcenter', 'workcenter', 'number', 'descworkcenter', 'icrrbactivitytype', 'intracompanyactivitytyoe')\n    #insertPostatus(db, 'postatus')\n    insertOrderingcompany(db, 'orderingcompany')\n    \n    \n    ","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe code is a Python script that inserts data into a MySQL database. To use this code, you need to have a MySQL database set up and running. You also need to have the necessary Python libraries installed. Once you have these prerequisites, you can call the functions in the script to insert data into the database. The functions include inserting domain, subdomain, region, country, workcenter, postatus, and ordering company data. To insert data, call the appropriate function and pass in the database connection object as an argument.\n\n### Input:\n\n\n### Output:\n#encoding=utf-8\n\nimport MySQLdb, os\nfrom django.core.checks.registry import Tags\n\ndef insertDomain(db):\n    cursor = db.cursor()\n    sql = \"insert into %(table)s (%(para)s) values ('%(value)s')\"\n    insertValues = {'table' : 'quotation_domain', 'para' : 'name', 'value' : 'CD'}\n    f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + 'domain', 'r+')\n    for line in f.readlines():\n        line = line.strip()\n        if('' != line):\n            insertValues['value'] = line\n            exesql = sql % insertValues\n            cursor.execute(exesql)\n    db.commit()\n    db.close()\n    \ndef insertSubDomain(db):\n    cursor = db.cursor()\n    sql = \"insert into %(table)s (%(para)s) values ('%(value)s')\"\n    insertValues = {'table' : 'quotation_domain', 'para' : 'name', 'value' : 'CD'}\n    insertValues['table'] = 'quotation_subdomain'\n    f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + 'subdomain', 'r+')\n    for line in f.readlines():\n        line = line.strip()\n        if('' != line):\n            insertValues['value'] = line\n            exesql = sql % insertValues\n            cursor.execute(exesql)\n    db.commit()\n    db.close()\n    \ndef insertRegion(db, tableName, valueTag, fileName):\n    cursor = db.cursor()\n    sql = \"insert into %(table)s (%(valueTag)s) values ('%(value)s')\"\n    insertValues = {'table' : tableName, 'valueTag' : valueTag, 'value' : 'xxxxx'}\n    #print sql % insertValues\n    f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + fileName, 'r+')\n    for line in f.readlines():\n        line = line.strip()\n        if('' != line):\n            para = line.split('**')\n            if(len(para) > 1):\n                insertValues['value'] = para[0].strip()\n                cursor.execute(sql % insertValues)\n    db.commit()\n    db.close()\n\ndef insertValuesWithForignKey(db, table, tagValue, tagForKey, f_table, f_tagvalue, fileName = 'unitid'):\n    cursor = db.cursor()\n    sql = \"insert into %(table)s (\" + tagValue + \",\" + tagForKey + \") values ('%(\" + tagValue + \")s', %(\" + tagForKey + \")s)\"\n    insertValues = {'table' : table, tagValue : 'OMS CD', tagForKey : 1}\n    \n    f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + fileName, 'r+')\n    \n    f_id = -1\n    exeTimes = 0\n    for line in f.readlines():\n        exeTimes += 1\n        line = line.strip()\n        if('' != line):\n            para = line.split('**')\n            if(len(para) > 1):\n                f_name = para[0].strip()\n                cursor.execute(\"select id from %s where %s='%s'\" % (f_table, f_tagvalue, f_name))\n                f_id = cursor.fetchone()[0]\n                insertValues[tagValue] = para[1].strip().replace('\\'', \"\\\\'\")\n                insertValues[tagForKey] = f_id\n                print sql % insertValues\n            else:\n                insertValues[tagValue] = para[0].strip().replace('\\'', \"\\\\'\")\n                insertValues[tagForKey] = f_id\n                print sql % insertValues\n            cursor.execute(sql % insertValues)\n        \n        if(exeTimes % 10 == 0):\n            db.commit()\n            #pass\n    db.commit()\n    db.close()\n\ndef insertWorkcenter(db, tableName, fileName, *tags):\n    if(4 != len(tags)):\n        return False\n    else:\n        cursor = db.cursor()\n        sql = \"insert into %(tableName)s (\" + tags[0] + \",\" + tags[1] + \",\" + tags[2] + \",\" + tags[3] + \") values ('%(\" + tags[0] + \")s','%(\" + tags[1] + \")s','%(\" + tags[2] + \")s','%(\"+ tags[3] +\")s')\".encode('utf-8')\n        insertDatas = {\n                       'tableName' : tableName,\n                       tags[0] : '',\n                       tags[1] : '',\n                       tags[2] : '',\n                       tags[3] : ''\n                       }\n        f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + fileName, 'r+')\n        \n        cIndex = 0\n        for line in f.readlines():\n            cIndex += 1\n            if('' != line):\n                para = line.split('**')\n                if(len(para) > 3):\n                    insertDatas[tags[0]] = para[0].strip().replace(\"\\'\", \"\\\\'\").encode('utf-8')\n                    insertDatas[tags[1]] = para[1].strip().replace(\"\\'\", \"\\\\'\").encode('utf-8')\n                    insertDatas[tags[2]] = para[2].strip().replace(\"\\'\", \"\\\\'\").encode('utf-8')\n                    insertDatas[tags[3]] = para[3].strip().replace(\"\\'\", \"\\\\'\").encode('utf-8')\n                    #print (sql % insertDatas).encode('utf-8')\n                    cursor.execute((sql % insertDatas).encode('utf-8'))\n            if(cIndex % 10 == 0):\n                db.commit()\n        db.commit()\n        db.close()\n\ndef insertPostatus(db, fileName):\n    cursor = db.cursor()\n    sql = \"insert into quotation_postatus (name) values ('%s')\"\n    f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + fileName, 'r+')\n    for line in f.readlines():\n        line = line.strip()\n        if('' != line):\n            exesql = sql % line\n            cursor.execute(exesql)\n    db.commit()\n    db.close()\n\ndef insertOrderingcompany(db, fileName):\n    cursor = db.cursor()\n    sql = \"insert into quotation_orderingcompany (name) values ('%s')\"\n    f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + fileName, 'r+')\n    \n    cIndex = 0\n    for line in f.readlines():\n        cIndex += 1\n        line = line.strip()\n        if('' != line):\n            exesql = sql % line\n            #print exesql\n            cursor.execute(exesql)\n        if( 0 == cIndex % 10):\n            db.commit()\n    db.commit()\n    db.close()\n\nif __name__ == '__main__':\n    host = \"localhost\"\n    passwd = \"tatool\"\n    user = \"tatool\"\n    dbname = \"eeep\"\n    db = MySQLdb.connect(host=host, user=user, passwd=passwd, db=dbname)\n    \n    #insertDomain(db)\n    #insertSubDomain(db)\n    #insertValuesWithForignKey(db, 'quotation_unitid', 'name', 'domain_id', \"quotation_domain\", \"name\")\n    #insertRegion(db, 'quotation_region', 'name', 'regionandcountry')\n    #insertValuesWithForignKey(db, 'quotation_country', 'name', 'region_id', \"quotation_region\", \"name\", 'regionandcountry')\n    #insertWorkcenter(db, 'quotation_workcenter', 'workcenter', 'number', 'descworkcenter', 'icrrbactivitytype', 'intracompanyactivitytyoe')\n    #insertPostatus(db, 'postatus')\n    insertOrderingcompany(db, 'orderingcompany')\n    \n    \n    "}
{"instruction":"Write a Python algorithm to identify special numbers","input":"Compute a list of numbers that are special (e.g., the prime numbers that are also perfect squares, or the Fibonacci numbers that are also multiples of five).","output":"def identify_special_numbers():\n    special_numbers = []\n\n    for n in range(1, 1000):\n        # check if n is prime\n        is_prime = True\n        for i in range(2, n):\n            if n % i == 0:\n                is_prime = False\n                break\n\n        # check if n is perfect square\n        is_square = False\n        i = 1\n        while i * i <= n:\n            if i * i == n:\n                is_square = True\n            i += 1\n\n        # check if n is Fibonacci number\n        is_fibonacci = False\n        x = 5 * n * n + 4\n        y = 5 * n * n - 4\n        if x > 0 and (x ** (1.0\/2.0)).is_integer() or y > 0 and (y ** (1.0\/2.0)).is_integer():\n            is_fibonacci = True\n\n        # if n satisfies all criteria, add n to the list\n        if is_prime and is_square and is_fibonacci and n % 5 == 0:\n            special_numbers.append(n)\n\n    return special_numbers","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python algorithm to identify special numbers\n\n### Input:\nCompute a list of numbers that are special (e.g., the prime numbers that are also perfect squares, or the Fibonacci numbers that are also multiples of five).\n\n### Output:\ndef identify_special_numbers():\n    special_numbers = []\n\n    for n in range(1, 1000):\n        # check if n is prime\n        is_prime = True\n        for i in range(2, n):\n            if n % i == 0:\n                is_prime = False\n                break\n\n        # check if n is perfect square\n        is_square = False\n        i = 1\n        while i * i <= n:\n            if i * i == n:\n                is_square = True\n            i += 1\n\n        # check if n is Fibonacci number\n        is_fibonacci = False\n        x = 5 * n * n + 4\n        y = 5 * n * n - 4\n        if x > 0 and (x ** (1.0\/2.0)).is_integer() or y > 0 and (y ** (1.0\/2.0)).is_integer():\n            is_fibonacci = True\n\n        # if n satisfies all criteria, add n to the list\n        if is_prime and is_square and is_fibonacci and n % 5 == 0:\n            special_numbers.append(n)\n\n    return special_numbers"}
{"instruction":"Write a Python program to convert a positive integer to negative or vice versa using bitwise NOT operator.","input":"","output":"def convert_to_negative(x): \n    return ~x + 1 \n  \ndef convert_to_positive(x): \n    return ~(x-1)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a positive integer to negative or vice versa using bitwise NOT operator.\n\n### Input:\n\n\n### Output:\ndef convert_to_negative(x): \n    return ~x + 1 \n  \ndef convert_to_positive(x): \n    return ~(x-1)"}
{"instruction":"Implement a Neural Network written in Python using TensorFlow for predicting the local weather.","input":"Not applicable.","output":"import tensorflow as tf\n\n# Build the neural network model\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Input(shape=(24,)),\n  # 8 neurons on the first hidden layer\n  tf.keras.layers.Dense(8, activation='relu'),\n  # 4 neurons on the second hidden layer\n  tf.keras.layers.Dense(4, activation='relu'),\n  # Output layer, which will have 3 neurons since we have 3 classes\n  tf.keras.layers.Dense(3, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss=tf.losses.CategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))\n\n# Save the model\nmodel.save('weather_predictor_model.h5')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Neural Network written in Python using TensorFlow for predicting the local weather.\n\n### Input:\nNot applicable.\n\n### Output:\nimport tensorflow as tf\n\n# Build the neural network model\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Input(shape=(24,)),\n  # 8 neurons on the first hidden layer\n  tf.keras.layers.Dense(8, activation='relu'),\n  # 4 neurons on the second hidden layer\n  tf.keras.layers.Dense(4, activation='relu'),\n  # Output layer, which will have 3 neurons since we have 3 classes\n  tf.keras.layers.Dense(3, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss=tf.losses.CategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))\n\n# Save the model\nmodel.save('weather_predictor_model.h5')"}
{"instruction":"Write a python program to which given a list of numbers, will calculate the mean value","input":"","output":"def mean(nums):\n    total = 0\n    for num in nums:\n        total += num\n    # Return the mean by dividing by the number of elements \n    return total \/ len(nums)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to which given a list of numbers, will calculate the mean value\n\n### Input:\n\n\n### Output:\ndef mean(nums):\n    total = 0\n    for num in nums:\n        total += num\n    # Return the mean by dividing by the number of elements \n    return total \/ len(nums)"}
{"instruction":"Create a search engine using Python.","input":"","output":"def search(query):\n    results = []\n    for document in documents:\n        if query in document:\n            results.append(document)\n    return results","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a search engine using Python.\n\n### Input:\n\n\n### Output:\ndef search(query):\n    results = []\n    for document in documents:\n        if query in document:\n            results.append(document)\n    return results"}
{"instruction":"Write a regex to identify all the words starting with 't' and ending with 'e' in a given string.","input":"str1=\"this is a python program\"","output":"import re\n\ndef identify_words(str1):\n    regex = \"\\w*t\\w*e\\b\"\n    words = re.findall(regex, str1)\n    return words\n\nprint(identify_words(\"this is a python program\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a regex to identify all the words starting with 't' and ending with 'e' in a given string.\n\n### Input:\nstr1=\"this is a python program\"\n\n### Output:\nimport re\n\ndef identify_words(str1):\n    regex = \"\\w*t\\w*e\\b\"\n    words = re.findall(regex, str1)\n    return words\n\nprint(identify_words(\"this is a python program\"))"}
{"instruction":"Create a program in python to count the occurences of a given word in a sentence.","input":"sentence = \"This is a sample sentence for the purpose of the example. \"\nkeyword = \"example\"","output":"#Defining the sentence and keyword\nsentence = \"This is a sample sentence for the purpose of the example. \"\nkeyword = \"example\"\n\n#Counting the occurences\ncount = sentence.count(keyword)\n\n#Printing the result\nprint(\"The keyword appears \" + str(count) + \" time(s) in the sentence.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in python to count the occurences of a given word in a sentence.\n\n### Input:\nsentence = \"This is a sample sentence for the purpose of the example. \"\nkeyword = \"example\"\n\n### Output:\n#Defining the sentence and keyword\nsentence = \"This is a sample sentence for the purpose of the example. \"\nkeyword = \"example\"\n\n#Counting the occurences\ncount = sentence.count(keyword)\n\n#Printing the result\nprint(\"The keyword appears \" + str(count) + \" time(s) in the sentence.\")"}
{"instruction":"Generate a Tic-Tac-Toe game in Python.","input":"","output":"import random\n\n# The board is represented by a list of strings. \n# X is player 1\n# O is the computer\n# _ is a blank spot\nboard = [\"_\",\"_\",\"_\",\n         \"_\",\"_\",\"_\",\n         \"_\",\"_\",\"_\"]\n\n# A function to print out the board in its current state\ndef print_board():\n    print(board[0] + \"|\" + board[1] + \"|\" + board[2])\n    print(board[3] + \"|\" + board[4] + \"|\" + board[5])\n    print(board[6] + \"|\" + board[7] + \"|\" + board[8])\n    \n# A function to check if X or O has won\n# Only if a row, column or diagonal is filled with the same player\ndef check_win():\n    # Check rows\n    if board[0] == board[1] == board[2] != \"_\" or \\\n       board[3] == board[4] == board[5] != \"_\" or \\\n       board[6] == board[7] == board[8] != \"_\":\n        return board[0]\n    # Check columns\n    elif board[0] == board[3] == board[6] != \"_\" or \\\n       board[1] == board[4] == board[7] != \"_\" or \\\n       board[2] == board[5] == board[8] != \"_\":\n        return board[0]\n    # Check diagonals \n    elif board[0] == board[4] == board[8] != \"_\" or \\\n       board[2] == board[4] == board[6] != \"_\":\n        return board[0]\n    # No one has won\n    else:\n        return None\n    \n# An AI to choose the best move for the computer\ndef computer_move():\n    # Check the board to see if the computer can win\n    for i in range(9):\n        board_copy = board[:]\n        if board_copy[i] == \"_\":\n            board_copy[i] = \"O\"\n            if check_win() == \"O\":\n                return i\n            \n    # Check the board to see if the player can win    \n    for i in range(9):\n        board_copy = board[:]\n        if board_copy[i] == \"_\":\n            board_copy[i] = \"X\"\n            if check_win() == \"X\":\n                return i\n            \n    # Try to take one of the corners\n    corners = [0, 2, 6, 8]\n    open_corners = []\n    for i in corners:\n        if board[i] == \"_\":\n            open_corners.append(i)\n    if len(open_corners) > 0:\n        return random.choice(open_corners)\n    \n    # Try to take the center\n    if board[4] == \"_\":\n        return 4\n    \n    # Take any open space\n    for i in range(9):\n        if board[i] == \"_\":\n            return i\n        \n# Yhe game loop\nplayer_turn = True\nwhile True:\n    print_board()\n    if check_win() == \"X\":\n        print(\"You win! Congratulations!\")\n        break\n    elif check_win() == \"O\":\n        print(\"The computer wins!\")\n        break\n    if player_turn: \n        # Player turn\n        index = int(input(\"Enter index (0-8):\"))\n        while board[index] != \"_\":\n            index = int(input(\"Invalid choice. Enter index (0-8):\"))\n        board[index] = \"X\"\n    else:\n        # Computer turn\n        index = computer_move()\n        board[index] = \"O\"\n    player_turn = not player_turn","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Tic-Tac-Toe game in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\n# The board is represented by a list of strings. \n# X is player 1\n# O is the computer\n# _ is a blank spot\nboard = [\"_\",\"_\",\"_\",\n         \"_\",\"_\",\"_\",\n         \"_\",\"_\",\"_\"]\n\n# A function to print out the board in its current state\ndef print_board():\n    print(board[0] + \"|\" + board[1] + \"|\" + board[2])\n    print(board[3] + \"|\" + board[4] + \"|\" + board[5])\n    print(board[6] + \"|\" + board[7] + \"|\" + board[8])\n    \n# A function to check if X or O has won\n# Only if a row, column or diagonal is filled with the same player\ndef check_win():\n    # Check rows\n    if board[0] == board[1] == board[2] != \"_\" or \\\n       board[3] == board[4] == board[5] != \"_\" or \\\n       board[6] == board[7] == board[8] != \"_\":\n        return board[0]\n    # Check columns\n    elif board[0] == board[3] == board[6] != \"_\" or \\\n       board[1] == board[4] == board[7] != \"_\" or \\\n       board[2] == board[5] == board[8] != \"_\":\n        return board[0]\n    # Check diagonals \n    elif board[0] == board[4] == board[8] != \"_\" or \\\n       board[2] == board[4] == board[6] != \"_\":\n        return board[0]\n    # No one has won\n    else:\n        return None\n    \n# An AI to choose the best move for the computer\ndef computer_move():\n    # Check the board to see if the computer can win\n    for i in range(9):\n        board_copy = board[:]\n        if board_copy[i] == \"_\":\n            board_copy[i] = \"O\"\n            if check_win() == \"O\":\n                return i\n            \n    # Check the board to see if the player can win    \n    for i in range(9):\n        board_copy = board[:]\n        if board_copy[i] == \"_\":\n            board_copy[i] = \"X\"\n            if check_win() == \"X\":\n                return i\n            \n    # Try to take one of the corners\n    corners = [0, 2, 6, 8]\n    open_corners = []\n    for i in corners:\n        if board[i] == \"_\":\n            open_corners.append(i)\n    if len(open_corners) > 0:\n        return random.choice(open_corners)\n    \n    # Try to take the center\n    if board[4] == \"_\":\n        return 4\n    \n    # Take any open space\n    for i in range(9):\n        if board[i] == \"_\":\n            return i\n        \n# Yhe game loop\nplayer_turn = True\nwhile True:\n    print_board()\n    if check_win() == \"X\":\n        print(\"You win! Congratulations!\")\n        break\n    elif check_win() == \"O\":\n        print(\"The computer wins!\")\n        break\n    if player_turn: \n        # Player turn\n        index = int(input(\"Enter index (0-8):\"))\n        while board[index] != \"_\":\n            index = int(input(\"Invalid choice. Enter index (0-8):\"))\n        board[index] = \"X\"\n    else:\n        # Computer turn\n        index = computer_move()\n        board[index] = \"O\"\n    player_turn = not player_turn"}
{"instruction":"Generate a python program to encode a given string into the Base64 representation.","input":"","output":"import base64\n\ndef encode_string(string):\n    # Encode the bytes of the given string\n    encoded_bytes = base64.b64encode(string.encode(\"utf-8\"))\n\n    # Get the string representation of the encoded bytes\n    encoded_string = str(encoded_bytes, \"utf-8\")\n\n    return encoded_string","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to encode a given string into the Base64 representation.\n\n### Input:\n\n\n### Output:\nimport base64\n\ndef encode_string(string):\n    # Encode the bytes of the given string\n    encoded_bytes = base64.b64encode(string.encode(\"utf-8\"))\n\n    # Get the string representation of the encoded bytes\n    encoded_string = str(encoded_bytes, \"utf-8\")\n\n    return encoded_string"}
{"instruction":"Create a python program that takes a list of user-defined objects as input and prints a summary of the objects.","input":"[{'name': 'John', 'age': 23}, {'name': 'Mary', 'age': 35}]","output":"def print_summary(object_list):\n    for object in object_list:\n        print('Name: {}\\nAge: {}\\n'.format(object['name'], object['age']))\n\nprint_summary([{'name': 'John', 'age': 23}, {'name': 'Mary', 'age': 35}])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that takes a list of user-defined objects as input and prints a summary of the objects.\n\n### Input:\n[{'name': 'John', 'age': 23}, {'name': 'Mary', 'age': 35}]\n\n### Output:\ndef print_summary(object_list):\n    for object in object_list:\n        print('Name: {}\\nAge: {}\\n'.format(object['name'], object['age']))\n\nprint_summary([{'name': 'John', 'age': 23}, {'name': 'Mary', 'age': 35}])"}
{"instruction":"Reverse the words in this sentence using Python.","input":"\"This is a sentence.\"","output":"\"sentence. a is This\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nReverse the words in this sentence using Python.\n\n### Input:\n\"This is a sentence.\"\n\n### Output:\n\"sentence. a is This\""}
{"instruction":"Create a class object in Python which takes in two numbers and finds the sum and product.","input":"","output":"class Numbers(object): \n    def __init__(self, num1, num2): \n        self.num1 = num1 \n        self.num2 = num2 \n\n    def find_sum(self): \n        return self.num1 + self.num2 \n\n    def find_product(self): \n        return self.num1 * self.num2 \n\n#creating an object \nnum_object = Numbers(22, 10) \n\n#finding sum \nsum_result = num_object.find_sum() \n\n#finding product \nproduct_result = num_object.find_product()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class object in Python which takes in two numbers and finds the sum and product.\n\n### Input:\n\n\n### Output:\nclass Numbers(object): \n    def __init__(self, num1, num2): \n        self.num1 = num1 \n        self.num2 = num2 \n\n    def find_sum(self): \n        return self.num1 + self.num2 \n\n    def find_product(self): \n        return self.num1 * self.num2 \n\n#creating an object \nnum_object = Numbers(22, 10) \n\n#finding sum \nsum_result = num_object.find_sum() \n\n#finding product \nproduct_result = num_object.find_product()"}
{"instruction":"Create a Python 3 class called 'Bicycle' which has two attributes: 'brand' and 'colour'.","input":"","output":"class Bicycle():\n    \n    def __init__(self, brand, colour):\n        self.brand = brand\n        self.colour = colour","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python 3 class called 'Bicycle' which has two attributes: 'brand' and 'colour'.\n\n### Input:\n\n\n### Output:\nclass Bicycle():\n    \n    def __init__(self, brand, colour):\n        self.brand = brand\n        self.colour = colour"}
{"instruction":"Generate a function in Python to compare two strings and determine whether they are anagrams.","input":"","output":"def is_anagram(str1, str2): \n    # space complexity O(1) \n    count = [0] * 26\n        \n    # count occurances of character in first string \n    for i in range(len(str1)): \n            count[ord(str1[i]) - ord('a')] += 1\n                \n    # subtracting count for each character of second string \n    for i in range(len(str2)): \n            count[ord(str2[i]) - ord('a')] -= 1\n                \n    # If both strings are anagrams, all counts should be 0 \n    for i in range(26):             \n            if (count[i] != 0): \n                return False\n\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python to compare two strings and determine whether they are anagrams.\n\n### Input:\n\n\n### Output:\ndef is_anagram(str1, str2): \n    # space complexity O(1) \n    count = [0] * 26\n        \n    # count occurances of character in first string \n    for i in range(len(str1)): \n            count[ord(str1[i]) - ord('a')] += 1\n                \n    # subtracting count for each character of second string \n    for i in range(len(str2)): \n            count[ord(str2[i]) - ord('a')] -= 1\n                \n    # If both strings are anagrams, all counts should be 0 \n    for i in range(26):             \n            if (count[i] != 0): \n                return False\n\n    return True"}
{"instruction":"Create a Python function to calculate the standard deviation of a set of numbers.","input":"[1, 2, 3, 4, 5]","output":"def calculate_std(numbers):\n  mean = sum(numbers)\/len(numbers)\n  squared_differences = [(num-mean)**2 for num in numbers]\n  variance = sum(squared_differences) \/ len(numbers)\n  return variance**0.5\n\nresult = calculate_std([1, 2, 3, 4, 5])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to calculate the standard deviation of a set of numbers.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef calculate_std(numbers):\n  mean = sum(numbers)\/len(numbers)\n  squared_differences = [(num-mean)**2 for num in numbers]\n  variance = sum(squared_differences) \/ len(numbers)\n  return variance**0.5\n\nresult = calculate_std([1, 2, 3, 4, 5])\nprint(result)"}
{"instruction":"Create a Tic-tac-toe game in Python.","input":"","output":"import random \n  \n# Function to draw tic-tac-toe board \ndef drawBoard(board): \n    print(\"--- --- ---\")\n    print(\"| \" + board[0][0] + \" | \" + board[0][1] + \" | \" + board[0][2] + \" |\")\n    print(\"--- --- ---\")\n    print(\"| \" + board[1][0] + \" | \" + board[1][1] + \" | \" + board[1][2] + \" |\")\n    print(\"--- --- ---\")\n    print(\"| \" + board[2][0] + \" | \" + board[2][1] + \" | \" + board[2][2] + \" |\")\n    print(\"--- --- ---\") \n  \n# Function to check if any player has won horizontally or vertically    \ndef checkWin(board): \n    # Win Horizontally \n    for x in range(0, 3): \n        if (board[x][0] == board[x][1] and board[x][1] == board[x][2] and board[x][0] != ' '): \n            return board[x][0];","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Tic-tac-toe game in Python.\n\n### Input:\n\n\n### Output:\nimport random \n  \n# Function to draw tic-tac-toe board \ndef drawBoard(board): \n    print(\"--- --- ---\")\n    print(\"| \" + board[0][0] + \" | \" + board[0][1] + \" | \" + board[0][2] + \" |\")\n    print(\"--- --- ---\")\n    print(\"| \" + board[1][0] + \" | \" + board[1][1] + \" | \" + board[1][2] + \" |\")\n    print(\"--- --- ---\")\n    print(\"| \" + board[2][0] + \" | \" + board[2][1] + \" | \" + board[2][2] + \" |\")\n    print(\"--- --- ---\") \n  \n# Function to check if any player has won horizontally or vertically    \ndef checkWin(board): \n    # Win Horizontally \n    for x in range(0, 3): \n        if (board[x][0] == board[x][1] and board[x][1] == board[x][2] and board[x][0] != ' '): \n            return board[x][0];"}
{"instruction":"Generate a python class 'Employee' with properties 'name' and 'salary'.","input":"","output":"class Employee: \n    def __init__(self, name, salary): \n        self.name = name\n        self.salary = salary\n    \n    def get_name(self):\n        return self.name\n    \n    def get_salary(self):\n        return self.salary","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python class 'Employee' with properties 'name' and 'salary'.\n\n### Input:\n\n\n### Output:\nclass Employee: \n    def __init__(self, name, salary): \n        self.name = name\n        self.salary = salary\n    \n    def get_name(self):\n        return self.name\n    \n    def get_salary(self):\n        return self.salary"}
{"instruction":"Automate the following task using Python","input":"You are given a spreadsheat which contains a list of customer names and their respective purchase amounts. Calculate the total purchase made by each customer.","output":"import pandas as pd\n\n# load spreadsheet\ndf = pd.read_csv('customer_purchase.csv')\n\n# calculate total purchase for each customer\ntotal_purchase = df.groupby('Customer Name')['Purchase Amount'].sum().reset_index()\n\n# print total purchase for each customer\nprint(total_purchase)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAutomate the following task using Python\n\n### Input:\nYou are given a spreadsheat which contains a list of customer names and their respective purchase amounts. Calculate the total purchase made by each customer.\n\n### Output:\nimport pandas as pd\n\n# load spreadsheet\ndf = pd.read_csv('customer_purchase.csv')\n\n# calculate total purchase for each customer\ntotal_purchase = df.groupby('Customer Name')['Purchase Amount'].sum().reset_index()\n\n# print total purchase for each customer\nprint(total_purchase)"}
{"instruction":"Create a Python program with a class ```Book``` that has ```title``` and ```author``` properties.","input":"Not applicable","output":"class Book:\n def __init__(self, title, author):\n self.title = title \n self.author = author\n\n def __str__(self):\n return f'{self.title} by {self.author}'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program with a class ```Book``` that has ```title``` and ```author``` properties.\n\n### Input:\nNot applicable\n\n### Output:\nclass Book:\n def __init__(self, title, author):\n self.title = title \n self.author = author\n\n def __str__(self):\n return f'{self.title} by {self.author}'"}
{"instruction":"Generate code to analyze sentiment of a given text using the TextBlob Python library.","input":"Not applicable","output":"from textblob import TextBlob \n \nprint('Enter your text:') \ntext = input()\n\nblob = TextBlob(text) \nsentiment = blob.sentiment \n\nif sentiment.polarity > 0: \n    print('Positive sentiment') \nelif sentiment.polarity == 0: \n    print('Neutral sentiment') \nelse: \n    print('Negative sentiment')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code to analyze sentiment of a given text using the TextBlob Python library.\n\n### Input:\nNot applicable\n\n### Output:\nfrom textblob import TextBlob \n \nprint('Enter your text:') \ntext = input()\n\nblob = TextBlob(text) \nsentiment = blob.sentiment \n\nif sentiment.polarity > 0: \n    print('Positive sentiment') \nelif sentiment.polarity == 0: \n    print('Neutral sentiment') \nelse: \n    print('Negative sentiment')"}
{"instruction":"Create a Python script that takes in two strings and returns a value representing their similarity.","input":"string1 = \"Hello World!\"\nstring2 = \"Goodbye World!\"","output":"def string_similarity(string1, string2):\n    # Create dictionary for storing character frequencies\n    char_freq_dict = dict()\n\n    for char in string1:\n        if char in char_freq_dict:\n            char_freq_dict[char] += 1\n        else:\n            char_freq_dict[char] = 1\n\n    # Count number of matching characters\n    matches = 0\n    for char in string2:\n        if char in char_freq_dict and char_freq_dict[char] > 0:\n            matches += 1\n            char_freq_dict[char] -= 1\n\n    # Calculate similarity\n    similarity = (matches\/len(string1)) * 100\n\n    return similarity","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes in two strings and returns a value representing their similarity.\n\n### Input:\nstring1 = \"Hello World!\"\nstring2 = \"Goodbye World!\"\n\n### Output:\ndef string_similarity(string1, string2):\n    # Create dictionary for storing character frequencies\n    char_freq_dict = dict()\n\n    for char in string1:\n        if char in char_freq_dict:\n            char_freq_dict[char] += 1\n        else:\n            char_freq_dict[char] = 1\n\n    # Count number of matching characters\n    matches = 0\n    for char in string2:\n        if char in char_freq_dict and char_freq_dict[char] > 0:\n            matches += 1\n            char_freq_dict[char] -= 1\n\n    # Calculate similarity\n    similarity = (matches\/len(string1)) * 100\n\n    return similarity"}
{"instruction":"Develop a Python program to list the first 10 numbers in the Fibonacci series.","input":"","output":"a, b = 0, 1\nprint(\"The first 10 numbers in Fibonacci series are:\")\nwhile a < 10:\n    print(a)\n    a, b = b, a + b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to list the first 10 numbers in the Fibonacci series.\n\n### Input:\n\n\n### Output:\na, b = 0, 1\nprint(\"The first 10 numbers in Fibonacci series are:\")\nwhile a < 10:\n    print(a)\n    a, b = b, a + b"}
{"instruction":"Write a Python program to print the count of all even numbers in the given list.","input":"my_list = [1, 2, 3, 4, 5, 6, 7, 8]","output":"my_list = [1, 2, 3, 4, 5, 6, 7, 8]\n\ncount = 0\nfor i in my_list:\n    if i % 2 == 0:\n        count += 1\n\nprint(count)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print the count of all even numbers in the given list.\n\n### Input:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8]\n\n### Output:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8]\n\ncount = 0\nfor i in my_list:\n    if i % 2 == 0:\n        count += 1\n\nprint(count)"}
{"instruction":"Write a code to generate a two-dimensional array with zeros shapes in Python","input":"Row = 3, Column = 3","output":"\"\"\"\nWrite a code to generate a two-dimensional array with zeros shapes in Python\n\"\"\"\n\ndef generate_zeros_array(row,col):\n    return [[0] * col for _ in range(row)]\n\n# Example\nrow = 3\ncol = 3\n\narray = generate_zeros_array(row, col)\nprint(array)\n# Output: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to generate a two-dimensional array with zeros shapes in Python\n\n### Input:\nRow = 3, Column = 3\n\n### Output:\n\"\"\"\nWrite a code to generate a two-dimensional array with zeros shapes in Python\n\"\"\"\n\ndef generate_zeros_array(row,col):\n    return [[0] * col for _ in range(row)]\n\n# Example\nrow = 3\ncol = 3\n\narray = generate_zeros_array(row, col)\nprint(array)\n# Output: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]"}
{"instruction":"Write a Python program to compute the number of valid binary search trees for a given integer N.","input":"N = 5","output":"# Function to calculate the number of binary trees\n# for a given number of nodes 'n'\ndef num_bst(n):\n \n # base case\n if n == 0 or n == 1:\n  return 1\n \n # Initialize the number of BST \n num = 0\n \n # Iterate through the N values\n for i in range(1, n+1):\n  # Calculate the number of BST of left sub-tree\n  num_left_subtrees = num_bst(i-1)\n \n  # Calculate the number of BST of right sub-tree\n  num_right_subtrees = num_bst(n-i)\n \n  # Add the number of BST of left and right sub-tree\n  num += num_left_subtrees * num_right_subtrees\n \n return num\n \n# Driver code\nN = 5\nprint(num_bst(N)) # 42","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compute the number of valid binary search trees for a given integer N.\n\n### Input:\nN = 5\n\n### Output:\n# Function to calculate the number of binary trees\n# for a given number of nodes 'n'\ndef num_bst(n):\n \n # base case\n if n == 0 or n == 1:\n  return 1\n \n # Initialize the number of BST \n num = 0\n \n # Iterate through the N values\n for i in range(1, n+1):\n  # Calculate the number of BST of left sub-tree\n  num_left_subtrees = num_bst(i-1)\n \n  # Calculate the number of BST of right sub-tree\n  num_right_subtrees = num_bst(n-i)\n \n  # Add the number of BST of left and right sub-tree\n  num += num_left_subtrees * num_right_subtrees\n \n return num\n \n# Driver code\nN = 5\nprint(num_bst(N)) # 42"}
{"instruction":"Create a Python program that prints the Roman numerals representation for any given number.","input":"Not applicable","output":"def Roman(number):\n roman = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD',\n100: 'C', 90: 'XC', 50: 'L', 40: 'XL',\n 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n result = ''\n\n for num in roman.keys():\n while number >= num:\n result += roman[num]\n number -= num\n\n print (result) \n\nnumber = int(input('Enter a number: '))\nRoman(number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that prints the Roman numerals representation for any given number.\n\n### Input:\nNot applicable\n\n### Output:\ndef Roman(number):\n roman = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD',\n100: 'C', 90: 'XC', 50: 'L', 40: 'XL',\n 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n result = ''\n\n for num in roman.keys():\n while number >= num:\n result += roman[num]\n number -= num\n\n print (result) \n\nnumber = int(input('Enter a number: '))\nRoman(number)"}
{"instruction":"Write a Python program to generate all the prime numbers between two given numbers.","input":"","output":"def prime_num_generator(start, end):\n    prime_list = [] \n    for num in range(start, end + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_list.append(num)\n    return prime_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate all the prime numbers between two given numbers.\n\n### Input:\n\n\n### Output:\ndef prime_num_generator(start, end):\n    prime_list = [] \n    for num in range(start, end + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_list.append(num)\n    return prime_list"}
{"instruction":"Write a function in python for finding a substring of a given string","input":"\"Hello World\", \"lo Wo\"","output":"def find_substring(string, sub_string):\n  indices = []\n  for i in range(0, len(string)-len(sub_string)+1):\n    if (string[i:i+len(sub_string)] == sub_string):\n      indices.append(i)\n  return indices\n\nprint(find_substring(\"Hello World\", \"lo Wo\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in python for finding a substring of a given string\n\n### Input:\n\"Hello World\", \"lo Wo\"\n\n### Output:\ndef find_substring(string, sub_string):\n  indices = []\n  for i in range(0, len(string)-len(sub_string)+1):\n    if (string[i:i+len(sub_string)] == sub_string):\n      indices.append(i)\n  return indices\n\nprint(find_substring(\"Hello World\", \"lo Wo\"))"}
{"instruction":"Create a function in Python that takes an ID and returns a list of all the numbers in its range.","input":"ID = 5","output":"def get_numbers(id):\n    nums = []\n    for i in range(id + 1):\n        nums.append(i)\n    return nums\n\nnumbers = get_numbers(5)\nprint(numbers)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes an ID and returns a list of all the numbers in its range.\n\n### Input:\nID = 5\n\n### Output:\ndef get_numbers(id):\n    nums = []\n    for i in range(id + 1):\n        nums.append(i)\n    return nums\n\nnumbers = get_numbers(5)\nprint(numbers)"}
{"instruction":"Construct a python program that can predict the outcome of a game of Rock Paper Scissors","input":"","output":"import random\n\ndef rock_paper_scissors():\n    rps_dict = {\n        0: 'rock',\n        1: 'paper',\n        2: 'scissors',\n    }\n\n    user_input = int(input(\"Choose: 0 for rock, 1 for paper, 2 for scissors >>> \"))\n    computer_input = random.randint(0,2)\n\n    if user_input > 2 or user_input < 0:\n        print(\"Invalid input\")\n    else:\n        print(\"You chose:\", rps_dict[user_input])\n        print(\"Computer chose:\", rps_dict[computer_input])\n        if user_input == computer_input:\n            print(\"It's a draw!\")\n        else:\n            if user_input == 0 and computer_input == 2:\n                print(\"You win!\")\n            elif user_input == 1 and computer_input == 0:\n                print(\"You win!\")\n            elif user_input == 2 and computer_input ==1:\n                print(\"You win!\")\n            else:\n                print(\"Computer wins!\")\n\nrock_paper_scissors()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a python program that can predict the outcome of a game of Rock Paper Scissors\n\n### Input:\n\n\n### Output:\nimport random\n\ndef rock_paper_scissors():\n    rps_dict = {\n        0: 'rock',\n        1: 'paper',\n        2: 'scissors',\n    }\n\n    user_input = int(input(\"Choose: 0 for rock, 1 for paper, 2 for scissors >>> \"))\n    computer_input = random.randint(0,2)\n\n    if user_input > 2 or user_input < 0:\n        print(\"Invalid input\")\n    else:\n        print(\"You chose:\", rps_dict[user_input])\n        print(\"Computer chose:\", rps_dict[computer_input])\n        if user_input == computer_input:\n            print(\"It's a draw!\")\n        else:\n            if user_input == 0 and computer_input == 2:\n                print(\"You win!\")\n            elif user_input == 1 and computer_input == 0:\n                print(\"You win!\")\n            elif user_input == 2 and computer_input ==1:\n                print(\"You win!\")\n            else:\n                print(\"Computer wins!\")\n\nrock_paper_scissors()"}
{"instruction":"Generate a correct Python program to take two lists as input and combine them into a 3rd list.","input":"list1 = [1, 2, 3]\nlist2 = [4, 5, 6]","output":"def combine_lists(list1, list2):\n    output = list1 + list2\n    return output\n\ncombined_list = combine_lists(list1, list2)\nprint(combined_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a correct Python program to take two lists as input and combine them into a 3rd list.\n\n### Input:\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n### Output:\ndef combine_lists(list1, list2):\n    output = list1 + list2\n    return output\n\ncombined_list = combine_lists(list1, list2)\nprint(combined_list)"}
{"instruction":"Create a Python script to convert a given string into uppercase and lowercase.","input":"String: \"Hello, World!\"","output":"# Python program to convert string into\n# uppercase and lowercase\n \n# Function to convert the string \n# into uppercase and lowercase \ndef string_case(str): \n    upper_case = str.upper() # convert into uppercase \n    lower_case = str.lower() # convert into lowercase \n  \n    print(\"Original String: \", str) \n    print(\"Uppercase String: \", upper_case) \n    print(\"Lowercase String: \", lower_case) \n  \nstr = 'Hello, World!'\nstring_case(str)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to convert a given string into uppercase and lowercase.\n\n### Input:\nString: \"Hello, World!\"\n\n### Output:\n# Python program to convert string into\n# uppercase and lowercase\n \n# Function to convert the string \n# into uppercase and lowercase \ndef string_case(str): \n    upper_case = str.upper() # convert into uppercase \n    lower_case = str.lower() # convert into lowercase \n  \n    print(\"Original String: \", str) \n    print(\"Uppercase String: \", upper_case) \n    print(\"Lowercase String: \", lower_case) \n  \nstr = 'Hello, World!'\nstring_case(str)"}
{"instruction":"Create a Python lambda expression that takes one argument, word, and converts all uppercase letters in the given word to lowercase.","input":"Word: CHANGE","output":"change = lambda word: word.lower()\n\nprint(change(\"CHANGE\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python lambda expression that takes one argument, word, and converts all uppercase letters in the given word to lowercase.\n\n### Input:\nWord: CHANGE\n\n### Output:\nchange = lambda word: word.lower()\n\nprint(change(\"CHANGE\"))"}
{"instruction":"Generate a code snippet to split a given string using a given delimiter in Python.","input":"","output":"str.split(delimiter)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code snippet to split a given string using a given delimiter in Python.\n\n### Input:\n\n\n### Output:\nstr.split(delimiter)"}
{"instruction":"Generate a class in Python that deals with database operations for a Customer model. The class should include methods for writing to the database, querying from the database, and deleting from the database.","input":"Not applicable","output":"import sqlite3\n\nclass CustomerData:\n \n    def __init__(self):\n        self.db = sqlite3.connect('customers.db')\n \n    def write(self, customer):\n        with self.db:\n            self.db.execute('INSERT INTO customers VALUES(?, ?)', (customer.name, customer.age))\n        return customer\n \n    def get(self, customer_name):\n        with self.db:\n            row = self.db.execute('SELECT * FROM customers WHERE name=?', (customer_name,)).fetchone()\n            if row:\n                return Customer(*row)\n            else:\n                return None\n \n    def delete(self, customer_name):\n        with self.db:\n            self.db.execute('DELETE FROM customers WHERE name=?', (customer_name,))\n \nclass Customer:\n \n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n \n    def __str__(self):\n        return f'{self.name}, {self.age}'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a class in Python that deals with database operations for a Customer model. The class should include methods for writing to the database, querying from the database, and deleting from the database.\n\n### Input:\nNot applicable\n\n### Output:\nimport sqlite3\n\nclass CustomerData:\n \n    def __init__(self):\n        self.db = sqlite3.connect('customers.db')\n \n    def write(self, customer):\n        with self.db:\n            self.db.execute('INSERT INTO customers VALUES(?, ?)', (customer.name, customer.age))\n        return customer\n \n    def get(self, customer_name):\n        with self.db:\n            row = self.db.execute('SELECT * FROM customers WHERE name=?', (customer_name,)).fetchone()\n            if row:\n                return Customer(*row)\n            else:\n                return None\n \n    def delete(self, customer_name):\n        with self.db:\n            self.db.execute('DELETE FROM customers WHERE name=?', (customer_name,))\n \nclass Customer:\n \n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n \n    def __str__(self):\n        return f'{self.name}, {self.age}'"}
{"instruction":"Design a simple web application in Python and Flask that allows users to manage their contacts.","input":"Not applicable","output":"from flask import Flask, request, render_template\n\napp = Flask(__name__)\n\n@app.route('\/')\ndef index():\n return render_template('index.html')\n\n@app.route('\/contacts', methods=['POST'])\ndef contacts():\n action = request.form.get('action')\n if action == 'add':\n # Add contact logic goes here\n elif action == 'delete':\n # Delete contact logic goes here\n elif action == 'update':\n # Update contact logic goes here\n \n return render_template('contacts.html')\n\nif __name__ == '__main__':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a simple web application in Python and Flask that allows users to manage their contacts.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request, render_template\n\napp = Flask(__name__)\n\n@app.route('\/')\ndef index():\n return render_template('index.html')\n\n@app.route('\/contacts', methods=['POST'])\ndef contacts():\n action = request.form.get('action')\n if action == 'add':\n # Add contact logic goes here\n elif action == 'delete':\n # Delete contact logic goes here\n elif action == 'update':\n # Update contact logic goes here\n \n return render_template('contacts.html')\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"instruction":"Generate code to optimize a matrix multiplication in Python.","input":"A 3x3 matrix","output":"# import numpy\nimport numpy as np\n\n# Declare matrix A and B\nA = np. array([[2, 3, 5], [5, 7, 2], [4, 2, 6]])\nB = np.array([[6, 2, 1], [3, 4, 5], [5, 3, 7]])\n\n# use numpy for matrix multiplication\nC = np.dot(A, B)\n\n# Vectorization \nD = np.zeros((3,3))\n\nfor i in range(3):\n for j in range(3):\n for k in range(3):\n D[i,j] += A[i,k] * B[k,j]\n\n# Compare matrix multiplication results\nif np.array_equal(C, D):\n print(\"Matrix optimzation is successful\")\nelse:\n print(\"Matrix optimization failed\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code to optimize a matrix multiplication in Python.\n\n### Input:\nA 3x3 matrix\n\n### Output:\n# import numpy\nimport numpy as np\n\n# Declare matrix A and B\nA = np. array([[2, 3, 5], [5, 7, 2], [4, 2, 6]])\nB = np.array([[6, 2, 1], [3, 4, 5], [5, 3, 7]])\n\n# use numpy for matrix multiplication\nC = np.dot(A, B)\n\n# Vectorization \nD = np.zeros((3,3))\n\nfor i in range(3):\n for j in range(3):\n for k in range(3):\n D[i,j] += A[i,k] * B[k,j]\n\n# Compare matrix multiplication results\nif np.array_equal(C, D):\n print(\"Matrix optimzation is successful\")\nelse:\n print(\"Matrix optimization failed\")"}
{"instruction":"Create a Python program to generate random numbers within a given interval.","input":"","output":"import random\n\n# Function to generate random numbers \ndef random_number(start, end): \n\treturn random.randint(start, end) \n\n# Driver code\nstart = 1\nend = 10\nprint(random_number(start, end))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate random numbers within a given interval.\n\n### Input:\n\n\n### Output:\nimport random\n\n# Function to generate random numbers \ndef random_number(start, end): \n\treturn random.randint(start, end) \n\n# Driver code\nstart = 1\nend = 10\nprint(random_number(start, end))"}
{"instruction":"This code generates a set of C++ files for the BAGEL package. To use it, create a file named \"RelCASPT2.cc\" and add the desired code to it. Then run the script to generate the necessary files.","input":"","output":"#!\/opt\/local\/bin\/python\nimport string\nimport os\nimport re\n\n\ndef header(n) :\n    return \"\/\/\\n\\\n\/\/ BAGEL - Brilliantly Advanced General Electronic Structure Library\\n\\\n\/\/ Filename: RelCASPT2\" + n + \".cc\\n\\\n\/\/ Copyright (C) 2014 Toru Shiozaki\\n\\\n\/\/\\n\\\n\/\/ Author: Toru Shiozaki <shiozaki@northwestern.edu>\\n\\\n\/\/ Maintainer: Shiozaki group\\n\\\n\/\/\\n\\\n\/\/ This file is part of the BAGEL package.\\n\\\n\/\/\\n\\\n\/\/ This program is free software: you can redistribute it and\/or modify\\n\\\n\/\/ it under the terms of the GNU General Public License as published by\\n\\\n\/\/ the Free Software Foundation, either version 3 of the License, or\\n\\\n\/\/ (at your option) any later version.\\n\\\n\/\/\\n\\\n\/\/ This program is distributed in the hope that it will be useful,\\n\\\n\/\/ but WITHOUT ANY WARRANTY; without even the implied warranty of\\n\\\n\/\/ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n\\\n\/\/ GNU General Public License for more details.\\n\\\n\/\/\\n\\\n\/\/ You should have received a copy of the GNU General Public License\\n\\\n\/\/ along with this program.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\\n\\\n\/\/\\n\\\n\\n\\\n#include <bagel_config.h>\\n\\\n#ifdef COMPILE_SMITH\\n\\\n\\n\\\n\\n\\\n#include <src\/smith\/relcaspt2\/RelCASPT2.h>\\n\"\n\ndef insert():\n    return \"#include <src\/smith\/relcaspt2\/RelCASPT2_tasks.h>\\n\"\n\ndef header2():\n    return \"\\n\\\nusing namespace std;\\n\\\nusing namespace bagel;\\n\\\nusing namespace bagel::SMITH;\\n\\\n\\n\\\n\"\n\nfooter = \"#endif\\n\"\n\nf = open('RelCASPT2.cc', 'r')\nlines = f.read().split(\"\\n\")[34:]\n\ntasks = []\ntmp = \"\"\n\nfor line in lines:\n    if (len(line) >= 17 and (line[0:17] == \"shared_ptr<Queue>\" or line[0:17] == \"RelCASPT2::RelCAS\")):\n        if (tmp != \"\"):\n            tasks.append(tmp)\n            tmp = \"\"\n    tmp += line + \"\\n\"\n    if (line == \"}\"):\n        tmp += \"\\n\"\ntasks.append(tmp)\n\np = re.compile('make_[a-z0-9]+q')\nfor task in tasks[0:-1]:\n    tag = p.search(task).group()[5:]\n    fout = open(\"RelCASPT2_\" + tag + \".cc\", \"w\")\n    out = header(\"_\" + tag + \"q\") + insert() + header2() + task + footer\n    fout.write(out)\n    fout.close()\n\nos.remove(\"RelCASPT2.cc\")\n\nfout = open(\"RelCASPT2.cc\", \"w\")\nout = header(\"\") + header2() + tasks[len(tasks)-1] + footer\nfout.write(out)\nfout.close()\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code generates a set of C++ files for the BAGEL package. To use it, create a file named \"RelCASPT2.cc\" and add the desired code to it. Then run the script to generate the necessary files.\n\n### Input:\n\n\n### Output:\n#!\/opt\/local\/bin\/python\nimport string\nimport os\nimport re\n\n\ndef header(n) :\n    return \"\/\/\\n\\\n\/\/ BAGEL - Brilliantly Advanced General Electronic Structure Library\\n\\\n\/\/ Filename: RelCASPT2\" + n + \".cc\\n\\\n\/\/ Copyright (C) 2014 Toru Shiozaki\\n\\\n\/\/\\n\\\n\/\/ Author: Toru Shiozaki <shiozaki@northwestern.edu>\\n\\\n\/\/ Maintainer: Shiozaki group\\n\\\n\/\/\\n\\\n\/\/ This file is part of the BAGEL package.\\n\\\n\/\/\\n\\\n\/\/ This program is free software: you can redistribute it and\/or modify\\n\\\n\/\/ it under the terms of the GNU General Public License as published by\\n\\\n\/\/ the Free Software Foundation, either version 3 of the License, or\\n\\\n\/\/ (at your option) any later version.\\n\\\n\/\/\\n\\\n\/\/ This program is distributed in the hope that it will be useful,\\n\\\n\/\/ but WITHOUT ANY WARRANTY; without even the implied warranty of\\n\\\n\/\/ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n\\\n\/\/ GNU General Public License for more details.\\n\\\n\/\/\\n\\\n\/\/ You should have received a copy of the GNU General Public License\\n\\\n\/\/ along with this program.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\\n\\\n\/\/\\n\\\n\\n\\\n#include <bagel_config.h>\\n\\\n#ifdef COMPILE_SMITH\\n\\\n\\n\\\n\\n\\\n#include <src\/smith\/relcaspt2\/RelCASPT2.h>\\n\"\n\ndef insert():\n    return \"#include <src\/smith\/relcaspt2\/RelCASPT2_tasks.h>\\n\"\n\ndef header2():\n    return \"\\n\\\nusing namespace std;\\n\\\nusing namespace bagel;\\n\\\nusing namespace bagel::SMITH;\\n\\\n\\n\\\n\"\n\nfooter = \"#endif\\n\"\n\nf = open('RelCASPT2.cc', 'r')\nlines = f.read().split(\"\\n\")[34:]\n\ntasks = []\ntmp = \"\"\n\nfor line in lines:\n    if (len(line) >= 17 and (line[0:17] == \"shared_ptr<Queue>\" or line[0:17] == \"RelCASPT2::RelCAS\")):\n        if (tmp != \"\"):\n            tasks.append(tmp)\n            tmp = \"\"\n    tmp += line + \"\\n\"\n    if (line == \"}\"):\n        tmp += \"\\n\"\ntasks.append(tmp)\n\np = re.compile('make_[a-z0-9]+q')\nfor task in tasks[0:-1]:\n    tag = p.search(task).group()[5:]\n    fout = open(\"RelCASPT2_\" + tag + \".cc\", \"w\")\n    out = header(\"_\" + tag + \"q\") + insert() + header2() + task + footer\n    fout.write(out)\n    fout.close()\n\nos.remove(\"RelCASPT2.cc\")\n\nfout = open(\"RelCASPT2.cc\", \"w\")\nout = header(\"\") + header2() + tasks[len(tasks)-1] + footer\nfout.write(out)\nfout.close()\n"}
{"instruction":"Generate a python program to compute the cartesian product of two lists.","input":"list1 = [1,2,3]\nlist2 = [4,5]","output":"def cartesian_product(list1, list2):\n    result_list = []\n    for i in list1:\n        for j in list2:\n            result_list.append([i,j])\n    return result_list\n\nlist1 = [1,2,3]\nlist2 = [4,5]\n\ncartesian_product_list = cartesian_product(list1, list2)\n\nprint(cartesian_product_list)  # [[1,4],[1,5],[2,4],[2,5],[3,4],[3,5]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to compute the cartesian product of two lists.\n\n### Input:\nlist1 = [1,2,3]\nlist2 = [4,5]\n\n### Output:\ndef cartesian_product(list1, list2):\n    result_list = []\n    for i in list1:\n        for j in list2:\n            result_list.append([i,j])\n    return result_list\n\nlist1 = [1,2,3]\nlist2 = [4,5]\n\ncartesian_product_list = cartesian_product(list1, list2)\n\nprint(cartesian_product_list)  # [[1,4],[1,5],[2,4],[2,5],[3,4],[3,5]]"}
{"instruction":"Create a Python program to convert an English sentence to Pig Latin.","input":"","output":"def pig_latin(sentence):\n    words = sentence.split(\" \")\n    result = \"\"\n    for word in words:\n        result += word[1:] + word[0] + \"ay \"\n    return result[:-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to convert an English sentence to Pig Latin.\n\n### Input:\n\n\n### Output:\ndef pig_latin(sentence):\n    words = sentence.split(\" \")\n    result = \"\"\n    for word in words:\n        result += word[1:] + word[0] + \"ay \"\n    return result[:-1]"}
{"instruction":"Create an algorithm in Python that takes a string as input and returns a list of words from that string.","input":"\"Hello World\"","output":"def string_to_words(s):\n    return s.split(' ')\n\nwords = string_to_words('Hello World')\nprint(words)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that takes a string as input and returns a list of words from that string.\n\n### Input:\n\"Hello World\"\n\n### Output:\ndef string_to_words(s):\n    return s.split(' ')\n\nwords = string_to_words('Hello World')\nprint(words)"}
{"instruction":"Write a function in Python to generate a random integer between two numbers, a and b.","input":"a = 4\nb = 15","output":"import random\n\ndef random_int_generator(a, b):\n    return random.randint(a, b)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to generate a random integer between two numbers, a and b.\n\n### Input:\na = 4\nb = 15\n\n### Output:\nimport random\n\ndef random_int_generator(a, b):\n    return random.randint(a, b)"}
{"instruction":"Devise a Python function to calculate Fibonacci series up to n numbers.","input":"10","output":"def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n  \n# Driver Program \n  \nprint(Fibonacci(10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevise a Python function to calculate Fibonacci series up to n numbers.\n\n### Input:\n10\n\n### Output:\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n  \n# Driver Program \n  \nprint(Fibonacci(10))"}
{"instruction":"Generate a python program to display the largest and smallest elements in a given array","input":"[2, 3, 8, 5, 10, 6]","output":"def display_min_max(arr):\n    # initializing max and min element\n    max_element = arr[0]\n    min_element = arr[0]\n\n    # traverse through the array elements\n    for x in arr:\n        if (x > max_element):\n            max_element = x\n        if (x < min_element):\n            min_element = x\n\n    # display max and min element\n    print(\"The largest element is\", max_element)\n    print(\"The smallest element is\", min_element)\n\n# Driver code\narr = [2, 3, 8, 5, 10, 6]\ndisplay_min_max(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to display the largest and smallest elements in a given array\n\n### Input:\n[2, 3, 8, 5, 10, 6]\n\n### Output:\ndef display_min_max(arr):\n    # initializing max and min element\n    max_element = arr[0]\n    min_element = arr[0]\n\n    # traverse through the array elements\n    for x in arr:\n        if (x > max_element):\n            max_element = x\n        if (x < min_element):\n            min_element = x\n\n    # display max and min element\n    print(\"The largest element is\", max_element)\n    print(\"The smallest element is\", min_element)\n\n# Driver code\narr = [2, 3, 8, 5, 10, 6]\ndisplay_min_max(arr)"}
{"instruction":"Create a program in Python that takes a sorted array of numbers as input, and prints the pairs of numbers that adds up to 10.","input":"arr = [1, 2, 3, 4, 5, 6]","output":"def findPairs(arr): \n    result = [] \n    first = 0\n    last = len(arr) - 1\n    while first < last: \n        if arr[first] + arr[last] == 10: \n            result.append ((arr[first], arr[last])) \n            first += 1\n            last -= 1\n        elif arr[first] + arr[last] < 10: \n            first += 1\n        else: \n            last -= 1\n    return result\n\nprint(findPairs([1, 2, 3, 4, 5, 6]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes a sorted array of numbers as input, and prints the pairs of numbers that adds up to 10.\n\n### Input:\narr = [1, 2, 3, 4, 5, 6]\n\n### Output:\ndef findPairs(arr): \n    result = [] \n    first = 0\n    last = len(arr) - 1\n    while first < last: \n        if arr[first] + arr[last] == 10: \n            result.append ((arr[first], arr[last])) \n            first += 1\n            last -= 1\n        elif arr[first] + arr[last] < 10: \n            first += 1\n        else: \n            last -= 1\n    return result\n\nprint(findPairs([1, 2, 3, 4, 5, 6]))"}
{"instruction":"Write a function in Python to Print a given string in Reverse order.","input":"string = \"Welcome to my site!\"","output":"def reverseString(string):\n    revString = ''\n    for i in range(len(string)-1, -1, -1):\n        revString += string[i]\n    return revString","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to Print a given string in Reverse order.\n\n### Input:\nstring = \"Welcome to my site!\"\n\n### Output:\ndef reverseString(string):\n    revString = ''\n    for i in range(len(string)-1, -1, -1):\n        revString += string[i]\n    return revString"}
{"instruction":"Parse a Ruby file and create a gtk.TreeModel with the class elements of the document. The parser uses the ctags command from the shell to create a ctags file, then parses the file, and finally populates a treemodel.","input":"","output":"# -*- coding: utf-8 -*-\n# Copyright (C) 2006 Frederic Back (fredericback@gmail.com)\n# Copyright (C) 2007 Kristoffer Lund\u00e9n (kristoffer.lunden@gmail.com)\n#\n# This program is free software; you can redistribute it and\/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place, Suite 330, \n# Boston, MA 02111-1307, USA.\n\nimport gtk\nimport gobject\nimport pango\nimport os\nimport re\nimport options\nfrom parserinterface import ClassParserInterface\nimport imagelibrary\n\n#===============================================================================\n\ndef tokenFromString(string):\n    \"\"\" Parse a string containing a function or class definition and return\n        a tuple containing information about the function, or None if the\n        parsing failed.\n\n        Example: \n            \"#def foo(bar):\" would return :\n            {'comment':True,'type':\"def\",'name':\"foo\",'params':\"bar\" } \"\"\"\n\n    try:\n        e = r\"([# ]*?)([a-zA-Z0-9_]+)( +)([a-zA-Z0-9_\\?\\!<>\\+=\\.]+)(.*)\"\n        r = re.match(e,string).groups()\n        token = Token()\n        token.comment = '#' in r[0]\n        token.type = r[1]\n        token.name = r[3]\n        token.params = r[4]\n        token.original = string\n        return token\n    except: return None # return None to skip if unable to parse\n    \n    def test():\n        pass\n\n#===============================================================================\n\nclass Token:\n    def __init__(self):\n        self.type = None\n        self.original = None # the line in the file, unparsed\n\n        self.indent = 0\n        self.name = None\n        self.comment = False # if true, the token is commented, ie. inactive\n        self.params = None   # string containing additional info\n        self.expanded = False\n\n        self.access = \"public\"\n\n        # start and end points\n        self.start = 0\n        self.end = 0\n\n        self.rubyfile = None\n        self.path = None # save the position in the browser\n\n        self.parent = None\n        self.children = []\n\n    def get_endline(self):\n        \"\"\" Get the line number where this token's declaration, including all\n            its children, finishes. Use it for copy operations.\"\"\"\n        if len(self.children) > 0:\n            return self.children[-1].get_endline()\n        return self.end\n\n        def test_nested():\n            pass\n            \n    def get_toplevel_class(self):\n        \"\"\" Try to get the class a token is in. \"\"\"\n            \n        if self.type == \"class\":\n            return self    \n\n        if self.parent is not None:\n            tc = self.parent.get_toplevel_class()\n            if tc is None or tc.type == \"file\": return self #hack\n            else: return tc\n                \n        return None\n\n    def printout(self):\n        for r in range(self.indent): print \"\",\n        print self.name,\n        if self.parent: print \" (parent: \",self.parent.name       \n        else: print\n        for tok in self.children: tok.printout()\n\n#===============================================================================\n\nclass RubyFile(Token):\n    \"\"\" A class that represents a ruby file.\n        Manages \"tokens\", ie. classes and functions.\"\"\"\n\n    def __init__(self, doc):\n        Token.__init__(self)\n        self.doc = doc\n        self.uri = doc.get_uri()\n        self.linestotal = 0 # total line count\n        self.type = \"file\"\n        self.name = os.path.basename(self.uri)\n        self.tokens = []\n\n\n    def getTokenAtLine(self, line):\n        \"\"\" get the token at the specified line number \"\"\"\n        for token in self.tokens:\n            if token.start <= line and token.end > line:\n                return self.__findInnermostTokenAtLine(token, line)\n        return None\n\n    def __findInnermostTokenAtLine(self, token, line):\n        \"\"\"\" ruby is parsed as nested, unlike python \"\"\"\n        for child in token.children:\n            if child.start <= line and child.end > line:\n                return self.__findInnermostTokenAtLine(child, line)\n        return token\n\n\n    def parse(self, verbose=True):\n\n        #if verbose: print \"parse ----------------------------------------------\"\n        newtokenlist = []\n\n        self.children = []\n\n        currentParent = self\n\n        self.linestotal = self.doc.get_line_count()\n\n        text = self.doc.get_text(*self.doc.get_bounds())\n        linecount = -1\n        ends_to_skip = 0\n        \n        access = \"public\"\n        \n        for line in text.splitlines():\n            linecount += 1\n            lstrip = line.lstrip()\n            ln = lstrip.split()\n            if len(ln) == 0: continue\n            if ln[0] == '#': continue\n            \n            if ln[0] in (\"class\",\"module\",\"def\"):\n                token = tokenFromString(lstrip)\n                if token is None: continue\n                token.rubyfile = self\n                token.start = linecount\n                if token.type == \"def\":\n                    token.access = access\n                    \n                #print \"line\",linecount\n                #print \"name\", token.name\n                #print \"type\",token.type\n                #print \"access\",token.access\n                #print \"to\",currentParent.name\n                \n                currentParent.children.append(token)\n                token.parent = currentParent\n                currentParent = token\n                newtokenlist.append(token)\n                \n                \n                idx = len(newtokenlist) - 1\n                if idx < len(self.tokens):\n                    if newtokenlist[idx].original == self.tokens[idx].original:\n                        newtokenlist[idx].expanded = self.tokens[idx].expanded\n                \n            elif ln[0] in(\"begin\",\"while\",\"until\",\"case\",\"if\",\"unless\",\"for\"):\n                    ends_to_skip += 1\n                    \n            elif ln[0] in (\"attr_reader\",\"attr_writer\",\"attr_accessor\"):\n                for attr in ln:\n                    m = re.match(r\":(\\w+)\",attr)\n                    if m:\n                        token = Token()\n                        token.rubyfile = self\n                        token.type = 'def'\n                        token.name = m.group(1)\n                        token.start = linecount\n                        token.end = linecount\n                        token.original = lstrip\n                        currentParent.children.append(token)\n                        token.parent = currentParent\n                        newtokenlist.append(token)\n            \n            elif re.search(r\"\\sdo(\\s+\\|.*?\\|)?\\s*(#|$)\", line):\n                #print \"do\",line\n\n                # Support for new style RSpec\n                if re.match(r\"^(describe|it|before|after)\\b\", ln[0]):\n                    token = Token()\n                    token.rubyfile = self\n                    token.start = linecount\n                    \n                    if currentParent.type == \"describe\":                    \n                        if ln[0] == \"it\":\n                            token.name = \" \".join(ln[1:-1])\n                        else:\n                            token.name = ln[0]\n                        token.type = \"def\"\n                    elif ln[0] == \"describe\":\n                        token.type = \"describe\"\n                        token.name = \" \".join(ln[1:-1])\n                    else:\n                        continue\n                    currentParent.children.append(token)\n                    token.parent = currentParent\n                    currentParent = token\n                    newtokenlist.append(token)\n\n                # Deprectated support for old style RSpec, will be removed later\n                elif ln[0] in (\"context\",\"specify\",\"setup\",\"teardown\",\"context_setup\",\"context_teardown\"):\n                    token = Token()\n                    token.rubyfile = self\n                    token.start = linecount\n                    \n                    if currentParent.type == \"context\":                    \n                        if ln[0] == \"specify\":\n                            token.name = \" \".join(ln[1:-1])\n                        else:\n                            token.name = ln[0]\n                        token.type = \"def\"\n                    elif ln[0] == \"context\":\n                        token.type = \"context\"\n                        token.name = \" \".join(ln[1:-1])\n                    else:\n                        continue\n                    currentParent.children.append(token)\n                    token.parent = currentParent\n                    currentParent = token\n                    newtokenlist.append(token)\n                else:\n                    ends_to_skip += 1\n                \n            elif ln[0] in (\"public\",\"private\",\"protected\"):\n                if len(ln) == 1:\n                    access = ln[0]\n                    \n            if re.search(r\";?\\s*end(?:\\s*$|\\s+(?:while|until))\", line):\n                if ends_to_skip > 0:\n                    ends_to_skip -= 1\n                else:\n                  token = currentParent\n                  #print \"end\",currentParent.name\n                  token.end = linecount\n                  currentParent = token.parent\n                \n\n        # set new token list\n        self.tokens = newtokenlist\n        return True\n\n\n#===============================================================================\n\nclass RubyParser( ClassParserInterface ):\n    \n    def __init__(self):\n        self.rubyfile = None\n\n\n    def appendTokenToBrowser(self, token, parentit ):\n        it = self.__browsermodel.append(parentit,(token,))\n        token.path = self.__browsermodel.get_path(it)\n        #print token.path\n        #if token.parent:\n        #    if token.parent.expanded:\n        #        self.browser.expand_row(token.parent.path,False)\n        #        pass\n        for child in token.children:\n            self.appendTokenToBrowser(child, it)\n\n\n    def parse(self, doc):\n        \"\"\" \n        Create a gtk.TreeModel with the class elements of the document\n        \n        The parser uses the ctags command from the shell to create a ctags file,\n        then parses the file, and finally populates a treemodel.\n        \"\"\"\n    \n        self.rubyfile = RubyFile(doc)\n        self.rubyfile.parse(options.singleton().verbose)\n        self.__browsermodel = gtk.TreeStore(gobject.TYPE_PYOBJECT)\n        for child in self.rubyfile.children:\n            self.appendTokenToBrowser(child,None)\n        return self.__browsermodel\n\n        \n    def __private_test_method(self):\n        pass\n\n\n    def get_tag_position(self, model, path):\n        tok = model.get_value( model.get_iter(path), 0 )\n        try: return tok.rubyfile.uri, tok.start+1\n        except: return None\n\n\n    def current_line_changed(self, model, doc, line):\n\n        # parse again if line count changed\n        if abs(self.rubyfile.linestotal - doc.get_line_count()) > 0:\n            if abs(self.rubyfile.linestotal - doc.get_line_count()) > 5:\n                if options.singleton().verbose:\n                    print \"RubyParser: refresh because line dif > 5\"\n                self.rubyfile.parse()\n            else:\n                it = doc.get_iter_at_line(line)\n                a = it.copy(); b = it.copy()\n                a.backward_line(); a.backward_line()\n                b.forward_line(); b.forward_line()\n\n                t = doc.get_text(a,b)\n                if t.find(\"class\") >= 0 or t.find(\"def\") >= 0:\n                    if options.singleton().verbose:\n                        print \"RubyParser: refresh because line cound changed near keyword\"\n                    self.rubyfile.parse()\n \n\n    def get_tag_at_line(self, model, doc, linenumber):\n        t = self.rubyfile.getTokenAtLine(linenumber)\n        #print linenumber,t\n        if t: return t.path\n\n\n    def cellrenderer(self, column, ctr, model, it):\n\n        \"\"\" Render the browser cell according to the token it represents. \"\"\"\n        tok = model.get_value(it,0)\n\n        weight = 400\n        style = pango.STYLE_NORMAL\n        name = tok.name#+tok.params\n        colour = options.singleton().colours[ \"function\" ]\n\n        # set label and colour\n        if tok.type == \"class\":\n            name = \"class \"+name\n            colour = options.singleton().colours[ \"class\" ]\n            weight = 600\n            \n        elif tok.type == \"module\":\n            name = \"module \"+name\n            colour = options.singleton().colours[ \"namespace\" ]\n            weight = 600\n            \n        # new style RSpec\n        elif tok.type == \"describe\":\n            name = \"describe \"+name\n            colour = options.singleton().colours[ \"namespace\" ]\n            weight = 600\n        \n        # Old style RSpec, deprecated    \n        elif tok.type == \"context\":\n            name = \"context \"+name\n            colour = options.singleton().colours[ \"namespace\" ]\n            weight = 600\n            \n        elif tok.type == \"def\":\n            colour = options.singleton().colours[ \"member\" ]\n            \n        if tok.comment: name = \"#\"+name\n\n        # assing properties\n        ctr.set_property(\"text\", name)\n        ctr.set_property(\"style\", style)\n        ctr.set_property(\"foreground-gdk\", colour)\n\n\n    def pixbufrenderer(self, column, crp, model, it):\n        tok = model.get_value(it,0)\n\n        icon = \"default\"\n\n        if tok.type == \"class\":\n            icon = \"class\"\n        elif tok.type == \"module\":\n            icon = \"namespace\"\n        elif tok.type == \"describe\":\n            icon = \"namespace\"\n        elif tok.type == \"context\":\n            icon = \"namespace\"\n        elif tok.type == \"def\":\n            if tok.access == \"public\":\n                icon = \"method\"\n            elif tok.access == \"protected\":\n                icon = \"method_prot\"\n            elif tok.access == \"private\":\n                icon = \"method_priv\"\n                \n        crp.set_property(\"pixbuf\",imagelibrary.pixbufs[icon])\n\n        \n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nParse a Ruby file and create a gtk.TreeModel with the class elements of the document. The parser uses the ctags command from the shell to create a ctags file, then parses the file, and finally populates a treemodel.\n\n### Input:\n\n\n### Output:\n# -*- coding: utf-8 -*-\n# Copyright (C) 2006 Frederic Back (fredericback@gmail.com)\n# Copyright (C) 2007 Kristoffer Lund\u00e9n (kristoffer.lunden@gmail.com)\n#\n# This program is free software; you can redistribute it and\/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place, Suite 330, \n# Boston, MA 02111-1307, USA.\n\nimport gtk\nimport gobject\nimport pango\nimport os\nimport re\nimport options\nfrom parserinterface import ClassParserInterface\nimport imagelibrary\n\n#===============================================================================\n\ndef tokenFromString(string):\n    \"\"\" Parse a string containing a function or class definition and return\n        a tuple containing information about the function, or None if the\n        parsing failed.\n\n        Example: \n            \"#def foo(bar):\" would return :\n            {'comment':True,'type':\"def\",'name':\"foo\",'params':\"bar\" } \"\"\"\n\n    try:\n        e = r\"([# ]*?)([a-zA-Z0-9_]+)( +)([a-zA-Z0-9_\\?\\!<>\\+=\\.]+)(.*)\"\n        r = re.match(e,string).groups()\n        token = Token()\n        token.comment = '#' in r[0]\n        token.type = r[1]\n        token.name = r[3]\n        token.params = r[4]\n        token.original = string\n        return token\n    except: return None # return None to skip if unable to parse\n    \n    def test():\n        pass\n\n#===============================================================================\n\nclass Token:\n    def __init__(self):\n        self.type = None\n        self.original = None # the line in the file, unparsed\n\n        self.indent = 0\n        self.name = None\n        self.comment = False # if true, the token is commented, ie. inactive\n        self.params = None   # string containing additional info\n        self.expanded = False\n\n        self.access = \"public\"\n\n        # start and end points\n        self.start = 0\n        self.end = 0\n\n        self.rubyfile = None\n        self.path = None # save the position in the browser\n\n        self.parent = None\n        self.children = []\n\n    def get_endline(self):\n        \"\"\" Get the line number where this token's declaration, including all\n            its children, finishes. Use it for copy operations.\"\"\"\n        if len(self.children) > 0:\n            return self.children[-1].get_endline()\n        return self.end\n\n        def test_nested():\n            pass\n            \n    def get_toplevel_class(self):\n        \"\"\" Try to get the class a token is in. \"\"\"\n            \n        if self.type == \"class\":\n            return self    \n\n        if self.parent is not None:\n            tc = self.parent.get_toplevel_class()\n            if tc is None or tc.type == \"file\": return self #hack\n            else: return tc\n                \n        return None\n\n    def printout(self):\n        for r in range(self.indent): print \"\",\n        print self.name,\n        if self.parent: print \" (parent: \",self.parent.name       \n        else: print\n        for tok in self.children: tok.printout()\n\n#===============================================================================\n\nclass RubyFile(Token):\n    \"\"\" A class that represents a ruby file.\n        Manages \"tokens\", ie. classes and functions.\"\"\"\n\n    def __init__(self, doc):\n        Token.__init__(self)\n        self.doc = doc\n        self.uri = doc.get_uri()\n        self.linestotal = 0 # total line count\n        self.type = \"file\"\n        self.name = os.path.basename(self.uri)\n        self.tokens = []\n\n\n    def getTokenAtLine(self, line):\n        \"\"\" get the token at the specified line number \"\"\"\n        for token in self.tokens:\n            if token.start <= line and token.end > line:\n                return self.__findInnermostTokenAtLine(token, line)\n        return None\n\n    def __findInnermostTokenAtLine(self, token, line):\n        \"\"\"\" ruby is parsed as nested, unlike python \"\"\"\n        for child in token.children:\n            if child.start <= line and child.end > line:\n                return self.__findInnermostTokenAtLine(child, line)\n        return token\n\n\n    def parse(self, verbose=True):\n\n        #if verbose: print \"parse ----------------------------------------------\"\n        newtokenlist = []\n\n        self.children = []\n\n        currentParent = self\n\n        self.linestotal = self.doc.get_line_count()\n\n        text = self.doc.get_text(*self.doc.get_bounds())\n        linecount = -1\n        ends_to_skip = 0\n        \n        access = \"public\"\n        \n        for line in text.splitlines():\n            linecount += 1\n            lstrip = line.lstrip()\n            ln = lstrip.split()\n            if len(ln) == 0: continue\n            if ln[0] == '#': continue\n            \n            if ln[0] in (\"class\",\"module\",\"def\"):\n                token = tokenFromString(lstrip)\n                if token is None: continue\n                token.rubyfile = self\n                token.start = linecount\n                if token.type == \"def\":\n                    token.access = access\n                    \n                #print \"line\",linecount\n                #print \"name\", token.name\n                #print \"type\",token.type\n                #print \"access\",token.access\n                #print \"to\",currentParent.name\n                \n                currentParent.children.append(token)\n                token.parent = currentParent\n                currentParent = token\n                newtokenlist.append(token)\n                \n                \n                idx = len(newtokenlist) - 1\n                if idx < len(self.tokens):\n                    if newtokenlist[idx].original == self.tokens[idx].original:\n                        newtokenlist[idx].expanded = self.tokens[idx].expanded\n                \n            elif ln[0] in(\"begin\",\"while\",\"until\",\"case\",\"if\",\"unless\",\"for\"):\n                    ends_to_skip += 1\n                    \n            elif ln[0] in (\"attr_reader\",\"attr_writer\",\"attr_accessor\"):\n                for attr in ln:\n                    m = re.match(r\":(\\w+)\",attr)\n                    if m:\n                        token = Token()\n                        token.rubyfile = self\n                        token.type = 'def'\n                        token.name = m.group(1)\n                        token.start = linecount\n                        token.end = linecount\n                        token.original = lstrip\n                        currentParent.children.append(token)\n                        token.parent = currentParent\n                        newtokenlist.append(token)\n            \n            elif re.search(r\"\\sdo(\\s+\\|.*?\\|)?\\s*(#|$)\", line):\n                #print \"do\",line\n\n                # Support for new style RSpec\n                if re.match(r\"^(describe|it|before|after)\\b\", ln[0]):\n                    token = Token()\n                    token.rubyfile = self\n                    token.start = linecount\n                    \n                    if currentParent.type == \"describe\":                    \n                        if ln[0] == \"it\":\n                            token.name = \" \".join(ln[1:-1])\n                        else:\n                            token.name = ln[0]\n                        token.type = \"def\"\n                    elif ln[0] == \"describe\":\n                        token.type = \"describe\"\n                        token.name = \" \".join(ln[1:-1])\n                    else:\n                        continue\n                    currentParent.children.append(token)\n                    token.parent = currentParent\n                    currentParent = token\n                    newtokenlist.append(token)\n\n                # Deprectated support for old style RSpec, will be removed later\n                elif ln[0] in (\"context\",\"specify\",\"setup\",\"teardown\",\"context_setup\",\"context_teardown\"):\n                    token = Token()\n                    token.rubyfile = self\n                    token.start = linecount\n                    \n                    if currentParent.type == \"context\":                    \n                        if ln[0] == \"specify\":\n                            token.name = \" \".join(ln[1:-1])\n                        else:\n                            token.name = ln[0]\n                        token.type = \"def\"\n                    elif ln[0] == \"context\":\n                        token.type = \"context\"\n                        token.name = \" \".join(ln[1:-1])\n                    else:\n                        continue\n                    currentParent.children.append(token)\n                    token.parent = currentParent\n                    currentParent = token\n                    newtokenlist.append(token)\n                else:\n                    ends_to_skip += 1\n                \n            elif ln[0] in (\"public\",\"private\",\"protected\"):\n                if len(ln) == 1:\n                    access = ln[0]\n                    \n            if re.search(r\";?\\s*end(?:\\s*$|\\s+(?:while|until))\", line):\n                if ends_to_skip > 0:\n                    ends_to_skip -= 1\n                else:\n                  token = currentParent\n                  #print \"end\",currentParent.name\n                  token.end = linecount\n                  currentParent = token.parent\n                \n\n        # set new token list\n        self.tokens = newtokenlist\n        return True\n\n\n#===============================================================================\n\nclass RubyParser( ClassParserInterface ):\n    \n    def __init__(self):\n        self.rubyfile = None\n\n\n    def appendTokenToBrowser(self, token, parentit ):\n        it = self.__browsermodel.append(parentit,(token,))\n        token.path = self.__browsermodel.get_path(it)\n        #print token.path\n        #if token.parent:\n        #    if token.parent.expanded:\n        #        self.browser.expand_row(token.parent.path,False)\n        #        pass\n        for child in token.children:\n            self.appendTokenToBrowser(child, it)\n\n\n    def parse(self, doc):\n        \"\"\" \n        Create a gtk.TreeModel with the class elements of the document\n        \n        The parser uses the ctags command from the shell to create a ctags file,\n        then parses the file, and finally populates a treemodel.\n        \"\"\"\n    \n        self.rubyfile = RubyFile(doc)\n        self.rubyfile.parse(options.singleton().verbose)\n        self.__browsermodel = gtk.TreeStore(gobject.TYPE_PYOBJECT)\n        for child in self.rubyfile.children:\n            self.appendTokenToBrowser(child,None)\n        return self.__browsermodel\n\n        \n    def __private_test_method(self):\n        pass\n\n\n    def get_tag_position(self, model, path):\n        tok = model.get_value( model.get_iter(path), 0 )\n        try: return tok.rubyfile.uri, tok.start+1\n        except: return None\n\n\n    def current_line_changed(self, model, doc, line):\n\n        # parse again if line count changed\n        if abs(self.rubyfile.linestotal - doc.get_line_count()) > 0:\n            if abs(self.rubyfile.linestotal - doc.get_line_count()) > 5:\n                if options.singleton().verbose:\n                    print \"RubyParser: refresh because line dif > 5\"\n                self.rubyfile.parse()\n            else:\n                it = doc.get_iter_at_line(line)\n                a = it.copy(); b = it.copy()\n                a.backward_line(); a.backward_line()\n                b.forward_line(); b.forward_line()\n\n                t = doc.get_text(a,b)\n                if t.find(\"class\") >= 0 or t.find(\"def\") >= 0:\n                    if options.singleton().verbose:\n                        print \"RubyParser: refresh because line cound changed near keyword\"\n                    self.rubyfile.parse()\n \n\n    def get_tag_at_line(self, model, doc, linenumber):\n        t = self.rubyfile.getTokenAtLine(linenumber)\n        #print linenumber,t\n        if t: return t.path\n\n\n    def cellrenderer(self, column, ctr, model, it):\n\n        \"\"\" Render the browser cell according to the token it represents. \"\"\"\n        tok = model.get_value(it,0)\n\n        weight = 400\n        style = pango.STYLE_NORMAL\n        name = tok.name#+tok.params\n        colour = options.singleton().colours[ \"function\" ]\n\n        # set label and colour\n        if tok.type == \"class\":\n            name = \"class \"+name\n            colour = options.singleton().colours[ \"class\" ]\n            weight = 600\n            \n        elif tok.type == \"module\":\n            name = \"module \"+name\n            colour = options.singleton().colours[ \"namespace\" ]\n            weight = 600\n            \n        # new style RSpec\n        elif tok.type == \"describe\":\n            name = \"describe \"+name\n            colour = options.singleton().colours[ \"namespace\" ]\n            weight = 600\n        \n        # Old style RSpec, deprecated    \n        elif tok.type == \"context\":\n            name = \"context \"+name\n            colour = options.singleton().colours[ \"namespace\" ]\n            weight = 600\n            \n        elif tok.type == \"def\":\n            colour = options.singleton().colours[ \"member\" ]\n            \n        if tok.comment: name = \"#\"+name\n\n        # assing properties\n        ctr.set_property(\"text\", name)\n        ctr.set_property(\"style\", style)\n        ctr.set_property(\"foreground-gdk\", colour)\n\n\n    def pixbufrenderer(self, column, crp, model, it):\n        tok = model.get_value(it,0)\n\n        icon = \"default\"\n\n        if tok.type == \"class\":\n            icon = \"class\"\n        elif tok.type == \"module\":\n            icon = \"namespace\"\n        elif tok.type == \"describe\":\n            icon = \"namespace\"\n        elif tok.type == \"context\":\n            icon = \"namespace\"\n        elif tok.type == \"def\":\n            if tok.access == \"public\":\n                icon = \"method\"\n            elif tok.access == \"protected\":\n                icon = \"method_prot\"\n            elif tok.access == \"private\":\n                icon = \"method_priv\"\n                \n        crp.set_property(\"pixbuf\",imagelibrary.pixbufs[icon])\n\n        \n"}
{"instruction":"Design a Python program to make a calculator that can add, subtract, multiply, and divide two numbers.","input":"","output":"# define functions\ndef add(x, y):\n   return x + y\n \ndef subtract(x, y):\n   return x - y\n \ndef multiply(x, y):\n   return x * y\n \ndef divide(x, y):\n   return x \/ y\n \n# take input from the user\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\n \nchoice = input(\"Enter choice(1\/2\/3\/4):\")\n \nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\n \nif choice == '1':\n   print(num1,\"+\",num2,\"=\", add(num1,num2))\n \nelif choice == '2':\n   print(num1,\"-\",num2,\"=\", subtract(num1,num2))\n \nelif choice == '3':\n   print(num1,\"*\",num2,\"=\", multiply(num1,num2))\n\nelif choice == '4':\n   print(num1,\"\/\",num2,\"=\", divide(num1,num2))\nelse:\n   print(\"Invalid input\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to make a calculator that can add, subtract, multiply, and divide two numbers.\n\n### Input:\n\n\n### Output:\n# define functions\ndef add(x, y):\n   return x + y\n \ndef subtract(x, y):\n   return x - y\n \ndef multiply(x, y):\n   return x * y\n \ndef divide(x, y):\n   return x \/ y\n \n# take input from the user\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\n \nchoice = input(\"Enter choice(1\/2\/3\/4):\")\n \nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\n \nif choice == '1':\n   print(num1,\"+\",num2,\"=\", add(num1,num2))\n \nelif choice == '2':\n   print(num1,\"-\",num2,\"=\", subtract(num1,num2))\n \nelif choice == '3':\n   print(num1,\"*\",num2,\"=\", multiply(num1,num2))\n\nelif choice == '4':\n   print(num1,\"\/\",num2,\"=\", divide(num1,num2))\nelse:\n   print(\"Invalid input\")"}
{"instruction":"Develop an AI prediction model for a given dataset in Python.","input":"dataset.csv\ncolumns=[X1,X2....Xn, Y]","output":"import pandas as pd\nimport numpy as np\n\n# Read data from csv\ndata = pd.read_csv('dataset.csv')\n\n# Separate features and target\nX = data.iloc[:, 0:-1].values\nY = data.iloc[:, -1].values\n\n# Train-test split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.20, random_state=0)\n\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\n\n# Train a model\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, Y_train)\n\n# predict\nY_pred = regressor.predict(X_test)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI prediction model for a given dataset in Python.\n\n### Input:\ndataset.csv\ncolumns=[X1,X2....Xn, Y]\n\n### Output:\nimport pandas as pd\nimport numpy as np\n\n# Read data from csv\ndata = pd.read_csv('dataset.csv')\n\n# Separate features and target\nX = data.iloc[:, 0:-1].values\nY = data.iloc[:, -1].values\n\n# Train-test split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.20, random_state=0)\n\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\n\n# Train a model\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, Y_train)\n\n# predict\nY_pred = regressor.predict(X_test)"}
{"instruction":"Create a function in Python that prints each element of a list one by one.","input":"list1 = [1,2,3,4,5]","output":"def print_list(list1):\n    for element in list1:\n        print(element)\n\nlist1 = [1,2,3,4,5]\n\nprint_list(list1)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that prints each element of a list one by one.\n\n### Input:\nlist1 = [1,2,3,4,5]\n\n### Output:\ndef print_list(list1):\n    for element in list1:\n        print(element)\n\nlist1 = [1,2,3,4,5]\n\nprint_list(list1)"}
{"instruction":"Develop a Python program that takes an array of integers and returns the largest element.","input":"[2, 4, 8, 9, 10]","output":"def find_max(arr):\n    \n    max_val = arr[0]\n    \n    for num in arr:\n        if num > max_val:\n            max_val = num\n            \n    return max_val\n\nprint(find_max([2, 4, 8, 9, 10]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that takes an array of integers and returns the largest element.\n\n### Input:\n[2, 4, 8, 9, 10]\n\n### Output:\ndef find_max(arr):\n    \n    max_val = arr[0]\n    \n    for num in arr:\n        if num > max_val:\n            max_val = num\n            \n    return max_val\n\nprint(find_max([2, 4, 8, 9, 10]))"}
{"instruction":"Create a Python program to fetch data from an HTTPS resource.","input":"url = \"https:\/\/example.com\/data\"","output":"import requests\n\nurl = \"https:\/\/example.com\/data\"\n\n# Send a GET request to the URL\nr =  requests.get(url)\n\n# Check the status of the request\nif r.status_code == 200:\n data = r.json()\n # Process the fetched data\nelse:\n print('Error: status code {}'.format(r.status_code))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to fetch data from an HTTPS resource.\n\n### Input:\nurl = \"https:\/\/example.com\/data\"\n\n### Output:\nimport requests\n\nurl = \"https:\/\/example.com\/data\"\n\n# Send a GET request to the URL\nr =  requests.get(url)\n\n# Check the status of the request\nif r.status_code == 200:\n data = r.json()\n # Process the fetched data\nelse:\n print('Error: status code {}'.format(r.status_code))"}
{"instruction":"Design an object-oriented Python class to represent a vehicle.","input":"","output":"class Vehicle:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n    \n    def getMake(self):\n        return self.make\n    \n    def getModel(self):\n        return self.model\n    \n    def getYear(self):\n        return self.year","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an object-oriented Python class to represent a vehicle.\n\n### Input:\n\n\n### Output:\nclass Vehicle:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n    \n    def getMake(self):\n        return self.make\n    \n    def getModel(self):\n        return self.model\n    \n    def getYear(self):\n        return self.year"}
{"instruction":"Complete this Python code to to generate a random password using a given length.","input":"length = 10","output":"import string\nimport random\n\ndef generate_password(length):\n    password_characters = string.ascii_letters + string.digits + string.punctuation \n    password = ''.join(random.choice(password_characters) for i in range(length))\n    return password\n\nprint(generate_password(length))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nComplete this Python code to to generate a random password using a given length.\n\n### Input:\nlength = 10\n\n### Output:\nimport string\nimport random\n\ndef generate_password(length):\n    password_characters = string.ascii_letters + string.digits + string.punctuation \n    password = ''.join(random.choice(password_characters) for i in range(length))\n    return password\n\nprint(generate_password(length))"}
{"instruction":"Generate a python function that takes an array as an argument and returns the distinct elements in the array.","input":"","output":"def distinct_values(arr):\n    distinct_arr = []\n    for element in arr:\n        if element not in distinct_arr:\n            distinct_arr.append(element)\n    return distinct_arr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python function that takes an array as an argument and returns the distinct elements in the array.\n\n### Input:\n\n\n### Output:\ndef distinct_values(arr):\n    distinct_arr = []\n    for element in arr:\n        if element not in distinct_arr:\n            distinct_arr.append(element)\n    return distinct_arr"}
{"instruction":"Using the input as a guide, modify the following Python code to generate a new list containing integers which are divisible by 5 in the input list.","input":"lst = [5, 10, 15, 20, 25, 30]","output":"lst = [5, 10, 15, 20, 25, 30]\n\ndivisible_by_5 = [num for num in lst if num%5 == 0]\nprint(divisible_by_5)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the input as a guide, modify the following Python code to generate a new list containing integers which are divisible by 5 in the input list.\n\n### Input:\nlst = [5, 10, 15, 20, 25, 30]\n\n### Output:\nlst = [5, 10, 15, 20, 25, 30]\n\ndivisible_by_5 = [num for num in lst if num%5 == 0]\nprint(divisible_by_5)"}
{"instruction":"Create a Python program using PyTorch to categorize the sentiment of a sentence into either positive, negative, or neutral.","input":"Sentence: The movie was critically acclaimed.","output":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SentimentClassifier(nn.Module):\n def __init__(self):\n  super().__init__()\n  self.embedding = nn.EmbeddingBag(1000, 16, sparse=True)\n  self.fc = nn.Linear(16, 3)\n \n def forward(self, x):\n  x = self.embedding(x)\n  x = self.fc(x)\n  return x\n\n# instantiate the model\nmodel = SentimentClassifier()\n\n# define the loss and optimizer\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n\n# train the model\nmodel.train()\nfor i in range(num_epochs):\n # iterate over the data\n for x,y in train_iter:\n  # predict\n  y_pred = model(x)\n \n  # calculate the loss\n  loss = criterion(y_pred, y)\n \n  # backpropagate the loss\n  loss.backward()\n \n  # update weights\n  optimizer.step()\n \n  # zero grad\n  optimizer.zero_grad()\n\n# Test the model\nmodel.eval()\nwith torch.no_grad():\n for x,y in test_iter:\n  y_pred = model(x)\n \n  # calculate the accuracy\n  correct = (y == y_pred.argmax(dim=1)).float().sum()\n  acc = correct\/len(y)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using PyTorch to categorize the sentiment of a sentence into either positive, negative, or neutral.\n\n### Input:\nSentence: The movie was critically acclaimed.\n\n### Output:\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SentimentClassifier(nn.Module):\n def __init__(self):\n  super().__init__()\n  self.embedding = nn.EmbeddingBag(1000, 16, sparse=True)\n  self.fc = nn.Linear(16, 3)\n \n def forward(self, x):\n  x = self.embedding(x)\n  x = self.fc(x)\n  return x\n\n# instantiate the model\nmodel = SentimentClassifier()\n\n# define the loss and optimizer\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n\n# train the model\nmodel.train()\nfor i in range(num_epochs):\n # iterate over the data\n for x,y in train_iter:\n  # predict\n  y_pred = model(x)\n \n  # calculate the loss\n  loss = criterion(y_pred, y)\n \n  # backpropagate the loss\n  loss.backward()\n \n  # update weights\n  optimizer.step()\n \n  # zero grad\n  optimizer.zero_grad()\n\n# Test the model\nmodel.eval()\nwith torch.no_grad():\n for x,y in test_iter:\n  y_pred = model(x)\n \n  # calculate the accuracy\n  correct = (y == y_pred.argmax(dim=1)).float().sum()\n  acc = correct\/len(y)"}
{"instruction":"Generate a Python program to initialize a third matrix given two existing matrices c and d.","input":"c = [[7, 8], [6, 3]]\nd = [[6, 7], [1, 5]]","output":"def initialize_matrix(c, d):\n    rows = len(c)\n    cols = len(c[0])\n    matrix = []\n    for i in range(rows):\n        row = []\n        for j in range(cols):\n            row.append(c[i][j] + d[i][j])\n        matrix.append(row)\n    return matrix","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to initialize a third matrix given two existing matrices c and d.\n\n### Input:\nc = [[7, 8], [6, 3]]\nd = [[6, 7], [1, 5]]\n\n### Output:\ndef initialize_matrix(c, d):\n    rows = len(c)\n    cols = len(c[0])\n    matrix = []\n    for i in range(rows):\n        row = []\n        for j in range(cols):\n            row.append(c[i][j] + d[i][j])\n        matrix.append(row)\n    return matrix"}
{"instruction":"Generate a GraphQL API in Python to create and read Books. Books should have a title and an author","input":"Not applicable","output":"import asyncio\nimport graphene\nfrom graphene import ObjectType, InputObjectType, String\nfrom graphene_sqlalchemy import SQLAlchemyObjectType\n\nfrom models import Book\n\n# Declare a Book data type\nclass BookObject(SQLAlchemyObjectType):\n class Meta:\n model = Book\n\n# Define a Book Create Input type\nclass BookCreateInput(InputObjectType):\n title = String(required=True)\n author = String(required=True)\n\n# Create Book mutation\nclass CreateBook(graphene.Mutation):\n class Arguments:\n book_data = BookCreateInput(required=True)\n \n book = graphene.Field(BookObject)\n \n async def mutate(cls, info, book_data):\n loop = asyncio.get_running_loop()\n session = info.context['session']\n async with session.begin_nested():\n book = await loop.run_in_executor(None, lambda: Book(**book_data))\n session.add(book)\n await session.commit()\n return CreateBook(book=book)\n\n# Queries\nclass Query(ObjectType):\n book = graphene.Field(BookObject, title=String(required=True))\n \n def resolve_book(self, info, title):\n return Book.query.filter_by(title=title).first()\n\n# Mutations\nclass Mutation(ObjectType):\n create_book = CreateBook.Field()\n\nschema = graphene.Schema(query=Query, mutation=Mutation)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a GraphQL API in Python to create and read Books. Books should have a title and an author\n\n### Input:\nNot applicable\n\n### Output:\nimport asyncio\nimport graphene\nfrom graphene import ObjectType, InputObjectType, String\nfrom graphene_sqlalchemy import SQLAlchemyObjectType\n\nfrom models import Book\n\n# Declare a Book data type\nclass BookObject(SQLAlchemyObjectType):\n class Meta:\n model = Book\n\n# Define a Book Create Input type\nclass BookCreateInput(InputObjectType):\n title = String(required=True)\n author = String(required=True)\n\n# Create Book mutation\nclass CreateBook(graphene.Mutation):\n class Arguments:\n book_data = BookCreateInput(required=True)\n \n book = graphene.Field(BookObject)\n \n async def mutate(cls, info, book_data):\n loop = asyncio.get_running_loop()\n session = info.context['session']\n async with session.begin_nested():\n book = await loop.run_in_executor(None, lambda: Book(**book_data))\n session.add(book)\n await session.commit()\n return CreateBook(book=book)\n\n# Queries\nclass Query(ObjectType):\n book = graphene.Field(BookObject, title=String(required=True))\n \n def resolve_book(self, info, title):\n return Book.query.filter_by(title=title).first()\n\n# Mutations\nclass Mutation(ObjectType):\n create_book = CreateBook.Field()\n\nschema = graphene.Schema(query=Query, mutation=Mutation)"}
{"instruction":"Write a Python program to generate an HTML table displaying information about the top 10 bestselling books in a specific genre.","input":"Table name: Books\nTable columns: id (int), title (string), author (string), genre (string), sales (int)","output":"import sqlite3\n\n# connect to the database\nconn = sqlite3.connect('books.db')\nc = conn.cursor()\n\n# retrieve the data\nc.execute('''SELECT title, author, genre, sales\nFROM Books\nWHERE genre='Fantasy'\nORDER BY sales DESC\nLIMIT 10''')\n\n# save the results\nresults = c.fetchall()\n\n# generate the HTML code\nhtml = '<table>'\nhtml += '<tr><th>Title<\/th><th>Author<\/th><th>Genre<\/th><th>Sales<\/th><\/tr>'\n\nfor result in results:\n title = result[0]\n author = result[1]\n genre = result[2]\n sales = result[3]\n\n html += f'<tr><td>{title}<\/td><td>{author}<\/td><td>{genre}<\/td><td>{sales}<\/td><\/tr>'\n\nhtml += '<\/table>'\n\n# display the results\nprint(html)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate an HTML table displaying information about the top 10 bestselling books in a specific genre.\n\n### Input:\nTable name: Books\nTable columns: id (int), title (string), author (string), genre (string), sales (int)\n\n### Output:\nimport sqlite3\n\n# connect to the database\nconn = sqlite3.connect('books.db')\nc = conn.cursor()\n\n# retrieve the data\nc.execute('''SELECT title, author, genre, sales\nFROM Books\nWHERE genre='Fantasy'\nORDER BY sales DESC\nLIMIT 10''')\n\n# save the results\nresults = c.fetchall()\n\n# generate the HTML code\nhtml = '<table>'\nhtml += '<tr><th>Title<\/th><th>Author<\/th><th>Genre<\/th><th>Sales<\/th><\/tr>'\n\nfor result in results:\n title = result[0]\n author = result[1]\n genre = result[2]\n sales = result[3]\n\n html += f'<tr><td>{title}<\/td><td>{author}<\/td><td>{genre}<\/td><td>{sales}<\/td><\/tr>'\n\nhtml += '<\/table>'\n\n# display the results\nprint(html)"}
{"instruction":"Create a Python function to encrypt a string using the substitution method.","input":"","output":"def encrypt_substitution(s):\n    result = ''\n    for c in s:\n        result += chr(ord(c) + 3)\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to encrypt a string using the substitution method.\n\n### Input:\n\n\n### Output:\ndef encrypt_substitution(s):\n    result = ''\n    for c in s:\n        result += chr(ord(c) + 3)\n    return result"}
{"instruction":"Create a REST API in Python that implements a To-Do list application. The API should include endpoints for adding, editing, and deleting To-Do list items.","input":"Not applicable","output":"import flask\nfrom flask import request\n\napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n\ntodos = [\n {\n 'id': 1,\n 'title': 'buy groceries',\n 'completed': False\n },\n {\n 'id': 2,\n 'title': 'clean room',\n 'completed': False\n }\n]\n\n@app.route('\/', methods=['GET'])\ndef home():\n return '''<h1>To-Do List API<\/h1>\n <p>A prototype API for a To-Do List application.<\/p>'''\n\n@app.route('\/api\/v1\/todos\/', methods=['GET'])\ndef api_all():\n return flask.jsonify(todos)\n\n@app.route('\/api\/v1\/todos\/', methods=['POST'])\ndef api_create():\n data = request.get_json()\n todos.append(data)\n return flask.jsonify(data)\n\n@app.route('\/api\/v1\/todos\/<int:id>', methods=['PUT', 'PATCH'])\ndef api_update(id):\n for todo in todos:\n if todo['id'] == id:\n data = request.get_json()\n for key, value in data.items():\n todo[key] = value\n return flask.jsonify(todo)\n\n@app.route('\/api\/v1\/todos\/<int:id>', methods=['DELETE'])\ndef api_delete(id):\n for i, todo in enumerate(todos):\n if todo['id'] == id:\n del todos[i]\n return flask.jsonify({'success': True})\n\napp.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API in Python that implements a To-Do list application. The API should include endpoints for adding, editing, and deleting To-Do list items.\n\n### Input:\nNot applicable\n\n### Output:\nimport flask\nfrom flask import request\n\napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n\ntodos = [\n {\n 'id': 1,\n 'title': 'buy groceries',\n 'completed': False\n },\n {\n 'id': 2,\n 'title': 'clean room',\n 'completed': False\n }\n]\n\n@app.route('\/', methods=['GET'])\ndef home():\n return '''<h1>To-Do List API<\/h1>\n <p>A prototype API for a To-Do List application.<\/p>'''\n\n@app.route('\/api\/v1\/todos\/', methods=['GET'])\ndef api_all():\n return flask.jsonify(todos)\n\n@app.route('\/api\/v1\/todos\/', methods=['POST'])\ndef api_create():\n data = request.get_json()\n todos.append(data)\n return flask.jsonify(data)\n\n@app.route('\/api\/v1\/todos\/<int:id>', methods=['PUT', 'PATCH'])\ndef api_update(id):\n for todo in todos:\n if todo['id'] == id:\n data = request.get_json()\n for key, value in data.items():\n todo[key] = value\n return flask.jsonify(todo)\n\n@app.route('\/api\/v1\/todos\/<int:id>', methods=['DELETE'])\ndef api_delete(id):\n for i, todo in enumerate(todos):\n if todo['id'] == id:\n del todos[i]\n return flask.jsonify({'success': True})\n\napp.run()"}
{"instruction":"Author a Python program to check if a number is a palindrome.","input":"1991","output":"def isPalindrome(num):\n  numStr = str(num)\n  for i in range(0, len(numStr)\/\/2):\n    if numStr[i] != numStr[len(numStr)-i-1]:\n      return False\n  return True\n\nprint(isPalindrome(1991)) # Output: True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAuthor a Python program to check if a number is a palindrome.\n\n### Input:\n1991\n\n### Output:\ndef isPalindrome(num):\n  numStr = str(num)\n  for i in range(0, len(numStr)\/\/2):\n    if numStr[i] != numStr[len(numStr)-i-1]:\n      return False\n  return True\n\nprint(isPalindrome(1991)) # Output: True"}
{"instruction":"Create a linear regression model in Python that predicts the outcome of a simple dataset.","input":"x = [1, 2, 3, 4, 5], y = [1, 2, 3, 4, 5]","output":"# import the necessary libraries\nimport numpy as np \nimport matplotlib.pyplot as plt \n\n# Create the dataset \nx = np.array([1, 2, 3, 4, 5]) \ny = np.array([1, 2, 3, 4, 5]) \n\n# Create the model \n# Fit the data \ncoeff = np.polyfit(x, y, 1) \n\n# Generate the prediction \npredict = np.poly1d(coeff)\n\n# Plot the regression line\nplt.plot(x, y, 'o')\nplt.plot(x, predict(x), 'x')\nplt.xlabel('x-axis')\nplt.ylabel('y-axis')\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a linear regression model in Python that predicts the outcome of a simple dataset.\n\n### Input:\nx = [1, 2, 3, 4, 5], y = [1, 2, 3, 4, 5]\n\n### Output:\n# import the necessary libraries\nimport numpy as np \nimport matplotlib.pyplot as plt \n\n# Create the dataset \nx = np.array([1, 2, 3, 4, 5]) \ny = np.array([1, 2, 3, 4, 5]) \n\n# Create the model \n# Fit the data \ncoeff = np.polyfit(x, y, 1) \n\n# Generate the prediction \npredict = np.poly1d(coeff)\n\n# Plot the regression line\nplt.plot(x, y, 'o')\nplt.plot(x, predict(x), 'x')\nplt.xlabel('x-axis')\nplt.ylabel('y-axis')\nplt.show()"}
{"instruction":"Design a Python program to generate Fibonacci series up to the given number.","input":"","output":"def FibonacciSeries(num):\n    a = 0\n    b = 1\n    print(\"Fibonacci Series: \")\n    for i in range(0, num):\n        print(a, end=\" \")\n        temp = a\n        a = b\n        b = temp + b\n\nnum = int(input(\"Enter a number: \"))\nFibonacciSeries(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to generate Fibonacci series up to the given number.\n\n### Input:\n\n\n### Output:\ndef FibonacciSeries(num):\n    a = 0\n    b = 1\n    print(\"Fibonacci Series: \")\n    for i in range(0, num):\n        print(a, end=\" \")\n        temp = a\n        a = b\n        b = temp + b\n\nnum = int(input(\"Enter a number: \"))\nFibonacciSeries(num)"}
{"instruction":"Build a Python program to read the following data and generate the running average of temperature after every 10 minutes.","input":"time temperature\n10:00 21\n10:10 22\n10:20 21\n10:30 19\n10:40 24\n10:50 21","output":"def running_average(data):\n    time_list = []\n    current_average = 0\n    num_values = 0\n    for t, c in data:\n        time_list.append(t)\n        current_average += c\n        num_values += 1\n        if t in time_list[-10:]:\n            print(\"The running average of temperature after %s is %f\" %(t, current_average\/num_values))\n\ndata = [('10:00', 21), ('10:10', 22), ('10:20', 21), ('10:30', 19), ('10:40', 24), ('10:50', 21)]\n\nrunning_average(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python program to read the following data and generate the running average of temperature after every 10 minutes.\n\n### Input:\ntime temperature\n10:00 21\n10:10 22\n10:20 21\n10:30 19\n10:40 24\n10:50 21\n\n### Output:\ndef running_average(data):\n    time_list = []\n    current_average = 0\n    num_values = 0\n    for t, c in data:\n        time_list.append(t)\n        current_average += c\n        num_values += 1\n        if t in time_list[-10:]:\n            print(\"The running average of temperature after %s is %f\" %(t, current_average\/num_values))\n\ndata = [('10:00', 21), ('10:10', 22), ('10:20', 21), ('10:30', 19), ('10:40', 24), ('10:50', 21)]\n\nrunning_average(data)"}
{"instruction":"This code provides a class called BuildKernel that has two methods: compileNewKernel and upgradeKernel. To use this class, create an instance of BuildKernel and call the appropriate method with the required arguments. If you want to upgrade the kernel, call the upgradeKernel method. If you want to compile a new kernel, call the compileNewKernel method with the kernel type and init settings as arguments.","input":"","output":"#!\/usr\/bin\/env python\nimport fileinput\nimport sys\n\n\/\/\/<summary>\n\/\/\/Provides a bunch of operations to format and manage hard disks.\n\/\/\/\n\/\/\/One cool thing that this class does is allow you to generate a fstab file\n\/\/\/based on disk formatting operations conducted earlier using this class. This\n\/\/\/is helpful when installing a new Gentoo installation.\n\/\/\/<\/summary>\nclass BuildKernel:\n\n    def compileNewKernel(self, kernelType, initSettings):\n        f = fopen('\/etc\/superGentoo\/kernel', 'w')\n        f.write(kernelType + \",\" + initSettings)\n        f.close()\n        \n        os.system(\"emerge \" + kernelType)\n\n        os.system(\"mv \/usr\/src\/.config \/usr\/src\/linux\/.config\")\n        os.system(\"touch \/usr\/src\/linux\/.config\")\n        \n        os.system(\"cd \/usr\/src\/linux\")\n        os.system(\"make\")\n        os.system(\"make modules_install\")\n        os.system(\"cp arch\/x86_64\/boot\/bzImage \/boot\/kernel-`find \/usr\/src -name linux-3* | awk -Flinux- '{print \\$NF }'`\")\n\n    def upgradeKernel(self):\n        kernelData = open('\/etc\/superGentoo\/kernel').read(1000).split(\",\")\n        os.system(\"emerge --update \". kernelData[0])\n        os.system()\n\n\/\/--------------------------------------------------------------------------\/\/\n\/\/ MAIN FUNCTION\n\/\/--------------------------------------------------------------------------\/\/\n\nif __name__ == '__main__':\n    bk = BuildKernel()\n\n    if sys.argv[1] == \"upgrade\":\n        bk.upgradeKernel()\n    elif sys.argv[1] == \"newKernel\":\n        bk.compileNewKernel(sys.argv[2], sys.argv[3])\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code provides a class called BuildKernel that has two methods: compileNewKernel and upgradeKernel. To use this class, create an instance of BuildKernel and call the appropriate method with the required arguments. If you want to upgrade the kernel, call the upgradeKernel method. If you want to compile a new kernel, call the compileNewKernel method with the kernel type and init settings as arguments.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\nimport fileinput\nimport sys\n\n\/\/\/<summary>\n\/\/\/Provides a bunch of operations to format and manage hard disks.\n\/\/\/\n\/\/\/One cool thing that this class does is allow you to generate a fstab file\n\/\/\/based on disk formatting operations conducted earlier using this class. This\n\/\/\/is helpful when installing a new Gentoo installation.\n\/\/\/<\/summary>\nclass BuildKernel:\n\n    def compileNewKernel(self, kernelType, initSettings):\n        f = fopen('\/etc\/superGentoo\/kernel', 'w')\n        f.write(kernelType + \",\" + initSettings)\n        f.close()\n        \n        os.system(\"emerge \" + kernelType)\n\n        os.system(\"mv \/usr\/src\/.config \/usr\/src\/linux\/.config\")\n        os.system(\"touch \/usr\/src\/linux\/.config\")\n        \n        os.system(\"cd \/usr\/src\/linux\")\n        os.system(\"make\")\n        os.system(\"make modules_install\")\n        os.system(\"cp arch\/x86_64\/boot\/bzImage \/boot\/kernel-`find \/usr\/src -name linux-3* | awk -Flinux- '{print \\$NF }'`\")\n\n    def upgradeKernel(self):\n        kernelData = open('\/etc\/superGentoo\/kernel').read(1000).split(\",\")\n        os.system(\"emerge --update \". kernelData[0])\n        os.system()\n\n\/\/--------------------------------------------------------------------------\/\/\n\/\/ MAIN FUNCTION\n\/\/--------------------------------------------------------------------------\/\/\n\nif __name__ == '__main__':\n    bk = BuildKernel()\n\n    if sys.argv[1] == \"upgrade\":\n        bk.upgradeKernel()\n    elif sys.argv[1] == \"newKernel\":\n        bk.compileNewKernel(sys.argv[2], sys.argv[3])\n"}
{"instruction":"Develop a natural language processing (NLP) model in Python that takes a sentence as an input and returns the subject and predicate of the sentence.","input":"The cat is happy.","output":"def parse_sentence(sentence):\n tokens = nltk.word_tokenize(sentence)\n tagged_tokens = nltk.pos_tag(tokens)\n subject = None\n predicate = None\n for token, tag in tagged_tokens:\n if tag == 'NN':\n subject = token\n elif tag == 'VBP':\n predicate = token\n return subject, predicate","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a natural language processing (NLP) model in Python that takes a sentence as an input and returns the subject and predicate of the sentence.\n\n### Input:\nThe cat is happy.\n\n### Output:\ndef parse_sentence(sentence):\n tokens = nltk.word_tokenize(sentence)\n tagged_tokens = nltk.pos_tag(tokens)\n subject = None\n predicate = None\n for token, tag in tagged_tokens:\n if tag == 'NN':\n subject = token\n elif tag == 'VBP':\n predicate = token\n return subject, predicate"}
{"instruction":"Design an algorithm in Python for finding a common element in two sorted arrays.","input":"List 1:\n[1, 4, 6, 10, 20]\n\nList 2:\n[2, 5, 8, 10, 15, 20]","output":"def findCommon(list1, list2): \n  common = [] \n  i = j = 0\n  \n  while i < len(list1) and j < len(list2): \n    if list1[i] == list2[j]: \n      common.append(list1[i]) \n      i += 1\n      j += 1\n    elif list1[i] < list2[j]: \n      i += 1\n    else: \n      j += 1\n  return common\n  \nlist1 = [1, 4, 6, 10, 20]\nlist2 = [2, 5, 8, 10, 15, 20]\n\nprint(findCommon(list1, list2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python for finding a common element in two sorted arrays.\n\n### Input:\nList 1:\n[1, 4, 6, 10, 20]\n\nList 2:\n[2, 5, 8, 10, 15, 20]\n\n### Output:\ndef findCommon(list1, list2): \n  common = [] \n  i = j = 0\n  \n  while i < len(list1) and j < len(list2): \n    if list1[i] == list2[j]: \n      common.append(list1[i]) \n      i += 1\n      j += 1\n    elif list1[i] < list2[j]: \n      i += 1\n    else: \n      j += 1\n  return common\n  \nlist1 = [1, 4, 6, 10, 20]\nlist2 = [2, 5, 8, 10, 15, 20]\n\nprint(findCommon(list1, list2))"}
{"instruction":"Design a function in Python for filtering out unique elements in a list.","input":"list = [1, 2, 2, 3, 3, 4]","output":"def filter_list(list): \n  filtered_list = [] \n\n  for i in list: \n    if i not in filtered_list: \n      filtered_list.append(i) \n  \n  return filtered_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python for filtering out unique elements in a list.\n\n### Input:\nlist = [1, 2, 2, 3, 3, 4]\n\n### Output:\ndef filter_list(list): \n  filtered_list = [] \n\n  for i in list: \n    if i not in filtered_list: \n      filtered_list.append(i) \n  \n  return filtered_list"}
{"instruction":"Design a class in Python that stores a 2x2 matrix and has a method to return its inverse.","input":"","output":"class Matrix:\n    def __init__(self, matrix):\n        self.matrix = matrix\n    \n    def get_inverse(self):\n        inverse = [[0,0],[0,0]]\n        a = self.matrix[0][0]\n        b = self.matrix[0][1]\n        c = self.matrix[1][0]\n        d = self.matrix[1][1]\n    \n        inverse[0][0] = d\/(a*d - b*c)\n        inverse[0][1] = -1*b\/(a*d - b*c)\n        inverse[1][0] = -1*c\/(a*d - b*c)\n        inverse[1][1] = -(a\/(a*d - b*c))\n    \n        return inverse","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python that stores a 2x2 matrix and has a method to return its inverse.\n\n### Input:\n\n\n### Output:\nclass Matrix:\n    def __init__(self, matrix):\n        self.matrix = matrix\n    \n    def get_inverse(self):\n        inverse = [[0,0],[0,0]]\n        a = self.matrix[0][0]\n        b = self.matrix[0][1]\n        c = self.matrix[1][0]\n        d = self.matrix[1][1]\n    \n        inverse[0][0] = d\/(a*d - b*c)\n        inverse[0][1] = -1*b\/(a*d - b*c)\n        inverse[1][0] = -1*c\/(a*d - b*c)\n        inverse[1][1] = -(a\/(a*d - b*c))\n    \n        return inverse"}
{"instruction":"Write a Python function to generate a random password with a length between 8 and 16 characters, containing at least one lowercase letter, one uppercase letter and one number.","input":"","output":"import string\nimport random\n\ndef generate_password():\n    # create the characters list\n    characters = string.ascii_lowercase + string.ascii_uppercase + string.digits\n    password_length = random.randint(8,16)\n    # generate a random password\n    password = ''\n    for i in range(password_length):\n        # add one of the characters to the password\n        password += random.choice(characters)\n    return password\n\nif __name__ == \"__main__\":\n    print(generate_password())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to generate a random password with a length between 8 and 16 characters, containing at least one lowercase letter, one uppercase letter and one number.\n\n### Input:\n\n\n### Output:\nimport string\nimport random\n\ndef generate_password():\n    # create the characters list\n    characters = string.ascii_lowercase + string.ascii_uppercase + string.digits\n    password_length = random.randint(8,16)\n    # generate a random password\n    password = ''\n    for i in range(password_length):\n        # add one of the characters to the password\n        password += random.choice(characters)\n    return password\n\nif __name__ == \"__main__\":\n    print(generate_password())"}
{"instruction":"Write a Python function that takes a list of names as an input and generates a dictionary of people\u2019s names as keys and their scores as values.","input":"names = [\"John\", \"Mary\", \"Jack\", \"Sarah\"]","output":"def names_scores(names):\n    scores = {}\n    for name in names:\n        scores[name] = random.randint(1, 10)\n    return scores","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes a list of names as an input and generates a dictionary of people\u2019s names as keys and their scores as values.\n\n### Input:\nnames = [\"John\", \"Mary\", \"Jack\", \"Sarah\"]\n\n### Output:\ndef names_scores(names):\n    scores = {}\n    for name in names:\n        scores[name] = random.randint(1, 10)\n    return scores"}
{"instruction":"Create a sorting algorithm for an array of integers using Python.","input":"[4, 2, 9, 7, 3]","output":"def sort(array):\n  # base case: if array is empty or has only one element, it is already sorted\n  if len(array) <= 1:\n    return array\n\n  # divide array into two halves\n  midpoint = len(array) \/\/ 2\n  left = array[:midpoint]\n  right = array[midpoint:]\n\n  # recursively sort left and right subarrays\n  left = sort(left)\n  right = sort(right)\n\n  # merge two sorted halfs\n  return merge(left, right)\n\ndef merge(left, right):\n  result = []\n  left_index = 0 # index of the left subarray\n  right_index = 0 # index of the right subarray\n\n  # keep going until one of the two subarrays is depleted\n  while left_index < len(left) and right_index < len(right):\n    if left[left_index] <= right[right_index]:\n      # add the smallest element and increment its index\n      result.append(left[left_index])\n      left_index += 1\n    else:\n      result.append(right[right_index])\n      right_index += 1\n  \n  # we must have reached the end of the left or right subarray\n  # append all remaining elements\n  for i in range(left_index, len(left)):\n    result.append(left[i])\n  for i in range(right_index, len(right)):\n    result.append(right[i])\n  \n  return result\n\n# Test code\narray = [4, 2, 9, 7, 3]\nsorted_array = sort(array)\nprint(sorted_array)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sorting algorithm for an array of integers using Python.\n\n### Input:\n[4, 2, 9, 7, 3]\n\n### Output:\ndef sort(array):\n  # base case: if array is empty or has only one element, it is already sorted\n  if len(array) <= 1:\n    return array\n\n  # divide array into two halves\n  midpoint = len(array) \/\/ 2\n  left = array[:midpoint]\n  right = array[midpoint:]\n\n  # recursively sort left and right subarrays\n  left = sort(left)\n  right = sort(right)\n\n  # merge two sorted halfs\n  return merge(left, right)\n\ndef merge(left, right):\n  result = []\n  left_index = 0 # index of the left subarray\n  right_index = 0 # index of the right subarray\n\n  # keep going until one of the two subarrays is depleted\n  while left_index < len(left) and right_index < len(right):\n    if left[left_index] <= right[right_index]:\n      # add the smallest element and increment its index\n      result.append(left[left_index])\n      left_index += 1\n    else:\n      result.append(right[right_index])\n      right_index += 1\n  \n  # we must have reached the end of the left or right subarray\n  # append all remaining elements\n  for i in range(left_index, len(left)):\n    result.append(left[i])\n  for i in range(right_index, len(right)):\n    result.append(right[i])\n  \n  return result\n\n# Test code\narray = [4, 2, 9, 7, 3]\nsorted_array = sort(array)\nprint(sorted_array)"}
{"instruction":"Can you build a machine learning model in Python to classify a dataset with three classes?","input":"data.csv:\nx1,x2,x3,label\n1,-2,3,a\n2,2,2,b\n4,-4,-4,c","output":"import pandas as pd\nimport numpy as np\n\n# Load and prepare the data\ndata = pd.read_csv(\"data.csv\")\nX = np.array(data.iloc[:, :3])\ny = np.array(data.iloc[:, 3])\n\n# Train the model\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression(multi_class=\"multinomial\", solver=\"lbfgs\")\nmodel.fit(X, y)\n\n# Test the model\npredictions = model.predict(X)\nprint(\"Confusion matrix:\\n\", confusion_matrix(y, predictions))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you build a machine learning model in Python to classify a dataset with three classes?\n\n### Input:\ndata.csv:\nx1,x2,x3,label\n1,-2,3,a\n2,2,2,b\n4,-4,-4,c\n\n### Output:\nimport pandas as pd\nimport numpy as np\n\n# Load and prepare the data\ndata = pd.read_csv(\"data.csv\")\nX = np.array(data.iloc[:, :3])\ny = np.array(data.iloc[:, 3])\n\n# Train the model\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression(multi_class=\"multinomial\", solver=\"lbfgs\")\nmodel.fit(X, y)\n\n# Test the model\npredictions = model.predict(X)\nprint(\"Confusion matrix:\\n\", confusion_matrix(y, predictions))"}
{"instruction":"Create a basic scoring engine in Python that takes two numbers and returns the higher of the two.","input":"5, 6","output":"def higher_number(num1, num2):\n if num1 > num2:\n return num1\n else:\n return num2\n\nprint(higher_number(5, 6)) # 6","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic scoring engine in Python that takes two numbers and returns the higher of the two.\n\n### Input:\n5, 6\n\n### Output:\ndef higher_number(num1, num2):\n if num1 > num2:\n return num1\n else:\n return num2\n\nprint(higher_number(5, 6)) # 6"}
{"instruction":"Given a 2D array of integers, write a Python function that returns the sum of all values in the array.","input":"[[1, 2], [3, 4], [5, 6]]","output":"def sum2dArray(arr):\n    two_d_sum = 0\n    for sub_arr in arr:\n        for elem in sub_arr:\n            two_d_sum += elem\n    return two_d_sum\n\narr = [[1,2], [3,4], [5,6]]\nresult = sum2dArray(arr)\nprint(result) # 21","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a 2D array of integers, write a Python function that returns the sum of all values in the array.\n\n### Input:\n[[1, 2], [3, 4], [5, 6]]\n\n### Output:\ndef sum2dArray(arr):\n    two_d_sum = 0\n    for sub_arr in arr:\n        for elem in sub_arr:\n            two_d_sum += elem\n    return two_d_sum\n\narr = [[1,2], [3,4], [5,6]]\nresult = sum2dArray(arr)\nprint(result) # 21"}
{"instruction":"Create a Python program for generating a calendar of events from a set of dates.","input":"Dates:\nMay 15, June 22, July 8","output":"# Import the necessary libraries\nimport calendar\nfrom datetime import datetime\n\n# Define a function for generating the calendar of events\ndef generate_calendar(dates):\n  # Create the calendar\n  c = calendar.TextCalendar()\n\n  # Format the dates in datetime objects\n  dt_dates = [datetime.strptime(date, '%B %d') for date in dates]\n\n  # Generate the output\n  for date in sorted(dt_dates):\n    month_str = date.strftime('%B')\n    day_str = date.strftime('%d')\n    print(month_str + ' ' + day_str + ' - Event')\n\n# Test\ndates = ['May 15', 'June 22', 'July 8']\ngenerate_calendar(dates)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for generating a calendar of events from a set of dates.\n\n### Input:\nDates:\nMay 15, June 22, July 8\n\n### Output:\n# Import the necessary libraries\nimport calendar\nfrom datetime import datetime\n\n# Define a function for generating the calendar of events\ndef generate_calendar(dates):\n  # Create the calendar\n  c = calendar.TextCalendar()\n\n  # Format the dates in datetime objects\n  dt_dates = [datetime.strptime(date, '%B %d') for date in dates]\n\n  # Generate the output\n  for date in sorted(dt_dates):\n    month_str = date.strftime('%B')\n    day_str = date.strftime('%d')\n    print(month_str + ' ' + day_str + ' - Event')\n\n# Test\ndates = ['May 15', 'June 22', 'July 8']\ngenerate_calendar(dates)"}
{"instruction":"Create a looping animation with a spinning square in Python.","input":"","output":"import pygame\n\n#intialize pygame\npygame.init()\n\n#define some colours\nGREEN = (20, 255, 140)\nRED = (255, 0, 0)\n\n#define size of the window\nsize = (640, 480)\n\n#create the window\nscreen = pygame.display.set_mode(size)\n\n#define a variable for the speed of spinning\nspeed = 0.05\n\n#and two variables one to start rotation, the other to control rotational speed\nangle = 0\nangle_speed = 0\n\n#runs the program until closed by the user\nrun = True\nwhile run:\n    #for every tick in pygame\n    for event in pygame.event.get():\n        #if the tick is closes window\n        if event.type == pygame.QUIT:\n            #exit programme\n            run = False\n\n    #fill background with a certain colour\n    screen.fill(GREEN)\n\n    #get the center of the window\n    center_x, center_y = size[0]\/\/2, size[1]\/\/2\n\n    #calculate the x and y cordinates of the four points on the square\n    x1 = int(center_x - 30 * math.cos(angle))\n    y1 = int(center_y - 30 * math.sin(angle))\n    x2 = int(center_x - 30 * math.cos(angle + 90))\n    y2 = int(center_y - 30 * math.sin(angle + 90))\n    x3 = int(center_x - 30 * math.cos(angle + 180))\n    y3 = int(center_y - 30 * math.sin(angle + 180))\n    x4 = int(center_x - 30 * math.cos(angle + 270))\n    y4 = int(center_y - 30 * math.sin(angle + 270))\n\n    #join the points with lines\n    pygame.draw.line(screen, RED, [x1, y1], [x2, y2], 4)\n    pygame.draw.line(screen, RED, [x2, y2], [x3, y3], 4)\n    pygame.draw.line(screen, RED, [x3, y3], [x4, y4], 4)\n    pygame.draw.line(screen, RED, [x4, y4], [x1, y1], 4)\n\n    #increment angle\n    angle += speed\n    angle_speed += 0.005\n\n    #update the window\n    pygame.display.update()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a looping animation with a spinning square in Python.\n\n### Input:\n\n\n### Output:\nimport pygame\n\n#intialize pygame\npygame.init()\n\n#define some colours\nGREEN = (20, 255, 140)\nRED = (255, 0, 0)\n\n#define size of the window\nsize = (640, 480)\n\n#create the window\nscreen = pygame.display.set_mode(size)\n\n#define a variable for the speed of spinning\nspeed = 0.05\n\n#and two variables one to start rotation, the other to control rotational speed\nangle = 0\nangle_speed = 0\n\n#runs the program until closed by the user\nrun = True\nwhile run:\n    #for every tick in pygame\n    for event in pygame.event.get():\n        #if the tick is closes window\n        if event.type == pygame.QUIT:\n            #exit programme\n            run = False\n\n    #fill background with a certain colour\n    screen.fill(GREEN)\n\n    #get the center of the window\n    center_x, center_y = size[0]\/\/2, size[1]\/\/2\n\n    #calculate the x and y cordinates of the four points on the square\n    x1 = int(center_x - 30 * math.cos(angle))\n    y1 = int(center_y - 30 * math.sin(angle))\n    x2 = int(center_x - 30 * math.cos(angle + 90))\n    y2 = int(center_y - 30 * math.sin(angle + 90))\n    x3 = int(center_x - 30 * math.cos(angle + 180))\n    y3 = int(center_y - 30 * math.sin(angle + 180))\n    x4 = int(center_x - 30 * math.cos(angle + 270))\n    y4 = int(center_y - 30 * math.sin(angle + 270))\n\n    #join the points with lines\n    pygame.draw.line(screen, RED, [x1, y1], [x2, y2], 4)\n    pygame.draw.line(screen, RED, [x2, y2], [x3, y3], 4)\n    pygame.draw.line(screen, RED, [x3, y3], [x4, y4], 4)\n    pygame.draw.line(screen, RED, [x4, y4], [x1, y1], 4)\n\n    #increment angle\n    angle += speed\n    angle_speed += 0.005\n\n    #update the window\n    pygame.display.update()"}
{"instruction":"Create a Python web scraper that takes a web page URL as input and retrieves all the headlines from the page.","input":"https:\/\/www.nytimes.com\/","output":"import requests \nfrom bs4 import BeautifulSoup \n\n# URL of the page to be scraped \nurl = \"https:\/\/www.nytimes.com\/\"\n\n# Fetching the webpage \nr = requests.get(url) \n\n# Extracting all the headlines from the page \nsoup = BeautifulSoup(r.content, 'html.parser') \nheadlines = soup.find_all('h2') \n\n# Extracting the text from all the headlines \nheadlines_text = [] \nfor headline in headlines: \n    headlines_text.append(headline.get_text()) \n\n# Printing the extracted headlines \nprint(headlines_text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python web scraper that takes a web page URL as input and retrieves all the headlines from the page.\n\n### Input:\nhttps:\/\/www.nytimes.com\/\n\n### Output:\nimport requests \nfrom bs4 import BeautifulSoup \n\n# URL of the page to be scraped \nurl = \"https:\/\/www.nytimes.com\/\"\n\n# Fetching the webpage \nr = requests.get(url) \n\n# Extracting all the headlines from the page \nsoup = BeautifulSoup(r.content, 'html.parser') \nheadlines = soup.find_all('h2') \n\n# Extracting the text from all the headlines \nheadlines_text = [] \nfor headline in headlines: \n    headlines_text.append(headline.get_text()) \n\n# Printing the extracted headlines \nprint(headlines_text)"}
{"instruction":"Create a Python program to determine whether a given number is prime or not.","input":"Number: 47","output":"def is_prime(num):\n    if num > 1:\n        for i in range(2,int(num**0.5)+1):\n            if (num % i) == 0:\n                return False\n    else:\n        return False\n    return True\n\nnum = 47\nif (is_prime(num)):\n    print(num,\"is a prime number\")\nelse:\n    print(num,\"is not a prime number\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to determine whether a given number is prime or not.\n\n### Input:\nNumber: 47\n\n### Output:\ndef is_prime(num):\n    if num > 1:\n        for i in range(2,int(num**0.5)+1):\n            if (num % i) == 0:\n                return False\n    else:\n        return False\n    return True\n\nnum = 47\nif (is_prime(num)):\n    print(num,\"is a prime number\")\nelse:\n    print(num,\"is not a prime number\")"}
{"instruction":"Create a web scraper in Python's BeautifulSoup to scrape a list of titles and their corresponding URLs from a web page.","input":"URL: https:\/\/www.example.com\/","output":"import requests\nfrom bs4 import BeautifulSoup\n\n# Make a GET request to fetch the raw HTML content\nurl = \"https:\/\/www.example.com\/\"\nhtml_content = requests.get(url).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# Find all links in the page\ntitles_list = soup.find_all(\"a\")\ntitles_urls = [(title.text, title[\"href\"]) for title in titles_list]\n\n# Print all titles and their corresponding links\nfor title, url in titles_urls:\n    print(\"Title:\", title)\n    print(\"URL:\", url)\n    print()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python's BeautifulSoup to scrape a list of titles and their corresponding URLs from a web page.\n\n### Input:\nURL: https:\/\/www.example.com\/\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Make a GET request to fetch the raw HTML content\nurl = \"https:\/\/www.example.com\/\"\nhtml_content = requests.get(url).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# Find all links in the page\ntitles_list = soup.find_all(\"a\")\ntitles_urls = [(title.text, title[\"href\"]) for title in titles_list]\n\n# Print all titles and their corresponding links\nfor title, url in titles_urls:\n    print(\"Title:\", title)\n    print(\"URL:\", url)\n    print()"}
{"instruction":"Generate a Python script to iterate through a list and print each element.","input":"lst = [\"hello\", \"how\", \"are\", \"you\"]","output":"for item in lst:\n  print(item)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to iterate through a list and print each element.\n\n### Input:\nlst = [\"hello\", \"how\", \"are\", \"you\"]\n\n### Output:\nfor item in lst:\n  print(item)"}
{"instruction":"Write a Python program to search a list of numbers using a binary search algorithm.","input":"list = [1, 3, 8, 10, 12, 15, 17, 20, 22, 34, 38, 40]","output":"def binary_search(numbers, number_to_find, low, high):\n \n if low > high:\n return False\n \n mid = (low + high) \/\/ 2\n \n if numbers[mid] == number_to_find:\n return True\n elif numbers[mid] > number_to_find:\n return binary_search(numbers, number_to_find, low, mid - 1)\n else:\n return binary_search(numbers, number_to_find, mid + 1, high)\n \n \nif __name__ == '__main__':\n numbers = [1, 3, 8, 10, 12, 15, 17, 20, 22, 34, 38, 40]\n \n number_to_find = int(input('Enter a number: '))\n \n result = binary_search(numbers, number_to_find, 0, len(numbers) - 1)\n \n if result is True:\n print('The number is in the list')\n else:\n print('The number is NOT in the list')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to search a list of numbers using a binary search algorithm.\n\n### Input:\nlist = [1, 3, 8, 10, 12, 15, 17, 20, 22, 34, 38, 40]\n\n### Output:\ndef binary_search(numbers, number_to_find, low, high):\n \n if low > high:\n return False\n \n mid = (low + high) \/\/ 2\n \n if numbers[mid] == number_to_find:\n return True\n elif numbers[mid] > number_to_find:\n return binary_search(numbers, number_to_find, low, mid - 1)\n else:\n return binary_search(numbers, number_to_find, mid + 1, high)\n \n \nif __name__ == '__main__':\n numbers = [1, 3, 8, 10, 12, 15, 17, 20, 22, 34, 38, 40]\n \n number_to_find = int(input('Enter a number: '))\n \n result = binary_search(numbers, number_to_find, 0, len(numbers) - 1)\n \n if result is True:\n print('The number is in the list')\n else:\n print('The number is NOT in the list')"}
{"instruction":"Demonstrate how tog concatenate two strings in Python.","input":"","output":"a = \"Hello\"\nb = \"World!\"\n\nc = a + b\nprint(c)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDemonstrate how tog concatenate two strings in Python.\n\n### Input:\n\n\n### Output:\na = \"Hello\"\nb = \"World!\"\n\nc = a + b\nprint(c)"}
{"instruction":"Generate a python program to swap the first and last element of a list","input":"list_of_numbers = [4, 5, 7, 8, 6]","output":"def swap(list_of_numbers):\n    list_of_numbers[0], list_of_numbers[-1] = list_of_numbers[-1], list_of_numbers[0]\n    return list_of_numbers","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to swap the first and last element of a list\n\n### Input:\nlist_of_numbers = [4, 5, 7, 8, 6]\n\n### Output:\ndef swap(list_of_numbers):\n    list_of_numbers[0], list_of_numbers[-1] = list_of_numbers[-1], list_of_numbers[0]\n    return list_of_numbers"}
{"instruction":"Create a Python program to find the number of days between two dates.","input":"date1 = \"2020-10-01\"\ndate2 = \"2020-10-31\"","output":"from datetime import datetime\n\ndef get_days_diff(date1, date2):\n d1 = datetime.strptime(date1, \"%Y-%m-%d\")\n d2 = datetime.strptime(date2, \"%Y-%m-%d\")\n return abs((d2 - d1).days)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the number of days between two dates.\n\n### Input:\ndate1 = \"2020-10-01\"\ndate2 = \"2020-10-31\"\n\n### Output:\nfrom datetime import datetime\n\ndef get_days_diff(date1, date2):\n d1 = datetime.strptime(date1, \"%Y-%m-%d\")\n d2 = datetime.strptime(date2, \"%Y-%m-%d\")\n return abs((d2 - d1).days)"}
{"instruction":"Create an algorithm in Python using the algorithm library for finding the greatest common divisor between two numbers.","input":"Not applicable","output":"import algorithm\n\ndef gcd(a, b):\n\ta, b = max(a, b), min(a, b)\n\tif a % b == 0:\n\t\treturn b\n\telse:\n\t\treturn gcd(b, a % b)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python using the algorithm library for finding the greatest common divisor between two numbers.\n\n### Input:\nNot applicable\n\n### Output:\nimport algorithm\n\ndef gcd(a, b):\n\ta, b = max(a, b), min(a, b)\n\tif a % b == 0:\n\t\treturn b\n\telse:\n\t\treturn gcd(b, a % b)"}
{"instruction":"Create a GPU-accelerated algorithm in Python that performs matrix multiplication.","input":"Not applicable","output":"import torch\n\ndef matrix_multiplication(A, B):\n    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n    A = torch.tensor(A).to(device)\n    B = torch.tensor(B).to(device)\n    return torch.matmul(A, B).cpu().numpy()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a GPU-accelerated algorithm in Python that performs matrix multiplication.\n\n### Input:\nNot applicable\n\n### Output:\nimport torch\n\ndef matrix_multiplication(A, B):\n    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n    A = torch.tensor(A).to(device)\n    B = torch.tensor(B).to(device)\n    return torch.matmul(A, B).cpu().numpy()"}
{"instruction":"Write a Python script to find the longest word in a given text.","input":"","output":"def find_longest_word(text):\n    words = text.split(' ')\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nlongest_word = find_longest_word('The quick brown fox jumps over the lazy dog')\nprint(longest_word)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to find the longest word in a given text.\n\n### Input:\n\n\n### Output:\ndef find_longest_word(text):\n    words = text.split(' ')\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nlongest_word = find_longest_word('The quick brown fox jumps over the lazy dog')\nprint(longest_word)"}
{"instruction":"Create a function in Python that will sort a list of tuples based on the second elements in the tuples.","input":"[(2, 1), (3, 7), (6, 5)]","output":"def sort_by_second_element(tuples):\n    return sorted(tuples, key=lambda element: element[1])\n\n\/\/ testing\ntuples_list = [(2, 1), (3, 7), (6, 5)]\nprint(\"Original list of tuples:\")\nprint(tuples_list)\nprint(\"Sorted list of tuples based on the second element of tuples:\")\nprint(sort_by_second_element(tuples_list))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that will sort a list of tuples based on the second elements in the tuples.\n\n### Input:\n[(2, 1), (3, 7), (6, 5)]\n\n### Output:\ndef sort_by_second_element(tuples):\n    return sorted(tuples, key=lambda element: element[1])\n\n\/\/ testing\ntuples_list = [(2, 1), (3, 7), (6, 5)]\nprint(\"Original list of tuples:\")\nprint(tuples_list)\nprint(\"Sorted list of tuples based on the second element of tuples:\")\nprint(sort_by_second_element(tuples_list))"}
{"instruction":"Generate a Python program that accepts a user input and checks if the input is a valid email address.","input":"Not applicable","output":"import re\n\ndef is_valid_email(email):\n  pattern = re.compile(r\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\")\n  match = pattern.match(email)\n  return match != None\n\nuser_input = input(\"Enter your email address: \")\nif is_valid_email(user_input):\n  print(\"Valid email address!\")\nelse:\n  print(\"Invalid email address!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that accepts a user input and checks if the input is a valid email address.\n\n### Input:\nNot applicable\n\n### Output:\nimport re\n\ndef is_valid_email(email):\n  pattern = re.compile(r\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\")\n  match = pattern.match(email)\n  return match != None\n\nuser_input = input(\"Enter your email address: \")\nif is_valid_email(user_input):\n  print(\"Valid email address!\")\nelse:\n  print(\"Invalid email address!\")"}
{"instruction":"Create a Python class called Department with three instance variables: name, employees, and budget.","input":"Not applicable","output":"class Department:\n def __init__(self, name, employees=[], budget=0):\n  self.name = name\n  self.employees = employees\n  self.budget = budget\n\n def set_name(self, name):\n  self.name = name\n\n def add_employee(self, employee):\n  self.employees.append(employee)\n\n def set_budget(self, budget):\n  self.budget = budget","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class called Department with three instance variables: name, employees, and budget.\n\n### Input:\nNot applicable\n\n### Output:\nclass Department:\n def __init__(self, name, employees=[], budget=0):\n  self.name = name\n  self.employees = employees\n  self.budget = budget\n\n def set_name(self, name):\n  self.name = name\n\n def add_employee(self, employee):\n  self.employees.append(employee)\n\n def set_budget(self, budget):\n  self.budget = budget"}
{"instruction":"Suggest a method to optimize the following code segment in Python:\n\n    x = 10\n    y = 20","input":"","output":"The code segment does not need to be optimized as it does not contain any code that can be improved. It simply sets two variables to a given value.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a method to optimize the following code segment in Python:\n\n    x = 10\n    y = 20\n\n### Input:\n\n\n### Output:\nThe code segment does not need to be optimized as it does not contain any code that can be improved. It simply sets two variables to a given value."}
{"instruction":"Generate a Python code snippet for sorting an array of strings in ascending alphabetical order.","input":"[\"apple\", \"banana\", \"orange\", \"kiwi\"]","output":"def sort_words(words):\n    # Sort the list in ascending alphabetical order.\n    sorted_words = sorted(words)\n    # Return the sorted list.\n    return sorted_words\n    \nwords = [\"apple\", \"banana\", \"orange\", \"kiwi\"]\n\nsorted_words = sort_words(words)\n\nprint(sorted_words)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code snippet for sorting an array of strings in ascending alphabetical order.\n\n### Input:\n[\"apple\", \"banana\", \"orange\", \"kiwi\"]\n\n### Output:\ndef sort_words(words):\n    # Sort the list in ascending alphabetical order.\n    sorted_words = sorted(words)\n    # Return the sorted list.\n    return sorted_words\n    \nwords = [\"apple\", \"banana\", \"orange\", \"kiwi\"]\n\nsorted_words = sort_words(words)\n\nprint(sorted_words)"}
{"instruction":"Build a Python script to terminate all running processes.","input":"","output":"import psutil\n\n# terminate all running processes\nfor proc in psutil.process_iter():\n    proc.terminate()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python script to terminate all running processes.\n\n### Input:\n\n\n### Output:\nimport psutil\n\n# terminate all running processes\nfor proc in psutil.process_iter():\n    proc.terminate()"}
{"instruction":"Write a Python program that implements gradient descent to find the minimum of a function.","input":"function = 3x\u00b2 + 2x - 10","output":"import numpy as np\n\n# Define the function\ndef f(x):\n    return (3 * (x**2)) + (2 * x) - 10\n\ndef grad_f(x):\n    return (6 * x) + 2\n\n# Gradient Descent\nx_old = 0\nx_new = 4 # Arbitrary initial value\nepsilon = 0.01 # Stop criteria\nprecision = 0.00001\n\nmax_iters = 1000 # Maximum number of iterations\niters = 0\n\nwhile abs(x_new - x_old) > epsilon and iters < max_iters:\n    x_old = x_new\n\n    # Calculate the gradient\n    grad = grad_f(x_old)\n\n    # Calculate the step size\n    alpha = 0.01\n\n    # Take a step in the opposite direction of the gradient\n    x_new = x_old - (alpha * grad)\n\n    # Update iteration counter\n    iters += 1\n\nprint(\"Minimum at: \", x_new)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that implements gradient descent to find the minimum of a function.\n\n### Input:\nfunction = 3x\u00b2 + 2x - 10\n\n### Output:\nimport numpy as np\n\n# Define the function\ndef f(x):\n    return (3 * (x**2)) + (2 * x) - 10\n\ndef grad_f(x):\n    return (6 * x) + 2\n\n# Gradient Descent\nx_old = 0\nx_new = 4 # Arbitrary initial value\nepsilon = 0.01 # Stop criteria\nprecision = 0.00001\n\nmax_iters = 1000 # Maximum number of iterations\niters = 0\n\nwhile abs(x_new - x_old) > epsilon and iters < max_iters:\n    x_old = x_new\n\n    # Calculate the gradient\n    grad = grad_f(x_old)\n\n    # Calculate the step size\n    alpha = 0.01\n\n    # Take a step in the opposite direction of the gradient\n    x_new = x_old - (alpha * grad)\n\n    # Update iteration counter\n    iters += 1\n\nprint(\"Minimum at: \", x_new)"}
{"instruction":"This code is a Python module that defines a class called \"GoogledriveCom\" which is a hoster plugin for the website drive.google.com. To use this plugin, import the module and create an instance of the \"GoogledriveCom\" class. The instance has a method called \"handleFree\" which takes a pyfile argument and returns a download link. The module also defines a function called \"getInfo\" which creates an instance of the \"GoogledriveCom\" class and returns information about the plugin.","input":"","output":"# -*- coding: utf-8 -*\n#\n# Test links:\n#   https:\/\/drive.google.com\/file\/d\/0B6RNTe4ygItBQm15RnJiTmMyckU\/view?pli=1\n\nimport re\nimport urlparse\n\nfrom module.plugins.internal.SimpleHoster import SimpleHoster, create_getInfo\nfrom module.utils import html_unescape\n\n\nclass GoogledriveCom(SimpleHoster):\n    __name__    = \"GoogledriveCom\"\n    __type__    = \"hoster\"\n    __version__ = \"0.12\"\n\n    __pattern__ = r'https?:\/\/(?:www\\.)?(drive|docs)\\.google\\.com\/(file\/d\/\\w+|uc\\?.*id=)'\n    __config__  = [(\"use_premium\", \"bool\", \"Use premium account if available\", True)]\n\n    __description__ = \"\"\"Drive.google.com hoster plugin\"\"\"\n    __license__     = \"GPLv3\"\n    __authors__     = [(\"zapp-brannigan\", \"fuerst.reinje@web.de\")]\n\n\n    DISPOSITION = False  #: Remove in 0.4.10\n\n    NAME_PATTERN    = r'(?:<title>|class=\"uc-name-size\".*>)(?P<N>.+?)(?: - Google Drive<\/title>|<\/a> \\()'\n    OFFLINE_PATTERN = r'align=\"center\"><p class=\"errorMessage\"'\n\n    LINK_FREE_PATTERN = r'\"([^\"]+uc\\?.*?)\"'\n\n\n    def setup(self):\n        self.multiDL        = True\n        self.resumeDownload = True\n        self.chunkLimit     = 1\n\n\n    def handleFree(self, pyfile):\n        for _i in xrange(2):\n            m = re.search(self.LINK_FREE_PATTERN, self.html)\n\n            if m is None:\n                self.error(_(\"Free download link not found\"))\n\n            else:\n                link = html_unescape(m.group(1).decode('unicode-escape'))\n                if not urlparse.urlparse(link).scheme:\n                    link = urlparse.urljoin(\"https:\/\/docs.google.com\/\", link)\n\n                direct_link = self.directLink(link, False)\n                if not direct_link:\n                    self.html = self.load(link, decode=True)\n                else:\n                    self.link = direct_link\n                    break\n\n\ngetInfo = create_getInfo(GoogledriveCom)\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a Python module that defines a class called \"GoogledriveCom\" which is a hoster plugin for the website drive.google.com. To use this plugin, import the module and create an instance of the \"GoogledriveCom\" class. The instance has a method called \"handleFree\" which takes a pyfile argument and returns a download link. The module also defines a function called \"getInfo\" which creates an instance of the \"GoogledriveCom\" class and returns information about the plugin.\n\n### Input:\n\n\n### Output:\n# -*- coding: utf-8 -*\n#\n# Test links:\n#   https:\/\/drive.google.com\/file\/d\/0B6RNTe4ygItBQm15RnJiTmMyckU\/view?pli=1\n\nimport re\nimport urlparse\n\nfrom module.plugins.internal.SimpleHoster import SimpleHoster, create_getInfo\nfrom module.utils import html_unescape\n\n\nclass GoogledriveCom(SimpleHoster):\n    __name__    = \"GoogledriveCom\"\n    __type__    = \"hoster\"\n    __version__ = \"0.12\"\n\n    __pattern__ = r'https?:\/\/(?:www\\.)?(drive|docs)\\.google\\.com\/(file\/d\/\\w+|uc\\?.*id=)'\n    __config__  = [(\"use_premium\", \"bool\", \"Use premium account if available\", True)]\n\n    __description__ = \"\"\"Drive.google.com hoster plugin\"\"\"\n    __license__     = \"GPLv3\"\n    __authors__     = [(\"zapp-brannigan\", \"fuerst.reinje@web.de\")]\n\n\n    DISPOSITION = False  #: Remove in 0.4.10\n\n    NAME_PATTERN    = r'(?:<title>|class=\"uc-name-size\".*>)(?P<N>.+?)(?: - Google Drive<\/title>|<\/a> \\()'\n    OFFLINE_PATTERN = r'align=\"center\"><p class=\"errorMessage\"'\n\n    LINK_FREE_PATTERN = r'\"([^\"]+uc\\?.*?)\"'\n\n\n    def setup(self):\n        self.multiDL        = True\n        self.resumeDownload = True\n        self.chunkLimit     = 1\n\n\n    def handleFree(self, pyfile):\n        for _i in xrange(2):\n            m = re.search(self.LINK_FREE_PATTERN, self.html)\n\n            if m is None:\n                self.error(_(\"Free download link not found\"))\n\n            else:\n                link = html_unescape(m.group(1).decode('unicode-escape'))\n                if not urlparse.urlparse(link).scheme:\n                    link = urlparse.urljoin(\"https:\/\/docs.google.com\/\", link)\n\n                direct_link = self.directLink(link, False)\n                if not direct_link:\n                    self.html = self.load(link, decode=True)\n                else:\n                    self.link = direct_link\n                    break\n\n\ngetInfo = create_getInfo(GoogledriveCom)\n"}
{"instruction":"Create an algorithm in Python to make a prediction given a list of features.","input":"features = ['feature1', 'feature2', 'feature3']","output":"def predict(features):\n    # Use the features to make a prediction\n    prediction = 0\n    \n    # Iterate through each feature to calculate the prediction\n    for feature in features:\n        prediction += calculate_feature(feature)\n    \n    return prediction\n\ndef calculate_feature(feature):\n    # Use a suitable algorithm to calculate the prediction\n    # Value of the feature\n    return value","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to make a prediction given a list of features.\n\n### Input:\nfeatures = ['feature1', 'feature2', 'feature3']\n\n### Output:\ndef predict(features):\n    # Use the features to make a prediction\n    prediction = 0\n    \n    # Iterate through each feature to calculate the prediction\n    for feature in features:\n        prediction += calculate_feature(feature)\n    \n    return prediction\n\ndef calculate_feature(feature):\n    # Use a suitable algorithm to calculate the prediction\n    # Value of the feature\n    return value"}
{"instruction":"Develop a function to search for a value in a list.","input":"lst = [\u2018hello\u2019, \u2018world\u2019, \u2018python\u2019]\nvalue = \u2018python\u2019","output":"def search_list(lst, value): \n    for item in lst: \n        if item == value:  \n            return True \n    return False\n\n# Driver Code \nlst = ['hello', 'world', 'python'] \nvalue = 'python'\n\nis_present = search_list(lst, value) \nif is_present == True: \n    print(value, \"is present in the list\") \nelse: \n    print(value, \"is not present in the list\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function to search for a value in a list.\n\n### Input:\nlst = [\u2018hello\u2019, \u2018world\u2019, \u2018python\u2019]\nvalue = \u2018python\u2019\n\n### Output:\ndef search_list(lst, value): \n    for item in lst: \n        if item == value:  \n            return True \n    return False\n\n# Driver Code \nlst = ['hello', 'world', 'python'] \nvalue = 'python'\n\nis_present = search_list(lst, value) \nif is_present == True: \n    print(value, \"is present in the list\") \nelse: \n    print(value, \"is not present in the list\")"}
{"instruction":"Create a Python function that takes a dictionary as an argument, and returns the value with maximum frequency in that dictionary.","input":"dic = {1: 'a', 2: 'b', 3: 'b', 4: 'c'}","output":"def max_freq_val(dic): \n    max_freq = 0\n    max_val = None\n    for val in dic.values():\n        if dic.values().count(val) > max_freq:\n            max_freq = dic.values().count(val)\n            max_val = val\n    \n    return max_val\n\nmax_val = max_freq_val(dic)\nprint(max_val)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes a dictionary as an argument, and returns the value with maximum frequency in that dictionary.\n\n### Input:\ndic = {1: 'a', 2: 'b', 3: 'b', 4: 'c'}\n\n### Output:\ndef max_freq_val(dic): \n    max_freq = 0\n    max_val = None\n    for val in dic.values():\n        if dic.values().count(val) > max_freq:\n            max_freq = dic.values().count(val)\n            max_val = val\n    \n    return max_val\n\nmax_val = max_freq_val(dic)\nprint(max_val)"}
{"instruction":"Design a program in Python to find the max three numbers in a list.","input":"[7, 9, 15, 10, 11]","output":"def max_three_nums(arr):\n    max_three = []\n\n    for i in range(3):\n        max_element = 0 \n        for j in range(len(arr)): \n            if max_element < arr[j]:\n                max_element = arr[j] \n        arr.remove(max_element) \n        max_three.append(max_element) \n    return max_three \n    \narr = [7, 9, 15, 10, 11] \nprint(max_three_nums(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to find the max three numbers in a list.\n\n### Input:\n[7, 9, 15, 10, 11]\n\n### Output:\ndef max_three_nums(arr):\n    max_three = []\n\n    for i in range(3):\n        max_element = 0 \n        for j in range(len(arr)): \n            if max_element < arr[j]:\n                max_element = arr[j] \n        arr.remove(max_element) \n        max_three.append(max_element) \n    return max_three \n    \narr = [7, 9, 15, 10, 11] \nprint(max_three_nums(arr))"}
{"instruction":"Create a command-line tool in Python that can calculate the sum of two numbers.","input":"Not applicable","output":"import argparse\n\n# Create a parser\nparser = argparse.ArgumentParser()\n# Add the arguments\nparser.add_argument('--num1', type=int, help='First number')\nparser.add_argument('--num2', type=int, help='Second number')\n# Execute the parse_args() method\nargs = parser.parse_args()\n\n#Calculate the sum\nsum = args.num1 + args.num2\n#Print the sum\nprint(sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a command-line tool in Python that can calculate the sum of two numbers.\n\n### Input:\nNot applicable\n\n### Output:\nimport argparse\n\n# Create a parser\nparser = argparse.ArgumentParser()\n# Add the arguments\nparser.add_argument('--num1', type=int, help='First number')\nparser.add_argument('--num2', type=int, help='Second number')\n# Execute the parse_args() method\nargs = parser.parse_args()\n\n#Calculate the sum\nsum = args.num1 + args.num2\n#Print the sum\nprint(sum)"}
{"instruction":"Create a Python script that prints an inverted pyramid pattern.","input":"Number = 5;","output":"# Create an empty list \npattern = [] \n# Add the elements to the list for the desired pattern \nrows = 5\nfor i in range(1, rows+1): \n    rows = rows - i \n    pattern.append(\"*\"*i +  \" \"*rows) \n   \n# print the pattern \nfor i in pattern[::-1]: \n    print(i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that prints an inverted pyramid pattern.\n\n### Input:\nNumber = 5;\n\n### Output:\n# Create an empty list \npattern = [] \n# Add the elements to the list for the desired pattern \nrows = 5\nfor i in range(1, rows+1): \n    rows = rows - i \n    pattern.append(\"*\"*i +  \" \"*rows) \n   \n# print the pattern \nfor i in pattern[::-1]: \n    print(i)"}
{"instruction":"Add a function to a python program that returns the maximum value in a list of integers.","input":"arr = [3, 6, 4, 7, 15, 10]","output":"def max_val(arr):\n    max_val = 0\n    for num in arr:\n        if num > max_val:\n            max_val = num\n    return max_val","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAdd a function to a python program that returns the maximum value in a list of integers.\n\n### Input:\narr = [3, 6, 4, 7, 15, 10]\n\n### Output:\ndef max_val(arr):\n    max_val = 0\n    for num in arr:\n        if num > max_val:\n            max_val = num\n    return max_val"}
{"instruction":"Generate a Python program for extending a list with strings. The program should take a string as input and create a new list containing the string and all the strings from the input list.","input":"inputList = [\"Hello\", \"World\"]\nnewString = \"Hi\"","output":"inputList = [\"Hello\", \"World\"]\nnewString = \"Hi\"\n\noutputList = []\n\nfor string in inputList:\n    outputList.append(string)\n\noutputList.append(newString)\n\nprint(outputList)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program for extending a list with strings. The program should take a string as input and create a new list containing the string and all the strings from the input list.\n\n### Input:\ninputList = [\"Hello\", \"World\"]\nnewString = \"Hi\"\n\n### Output:\ninputList = [\"Hello\", \"World\"]\nnewString = \"Hi\"\n\noutputList = []\n\nfor string in inputList:\n    outputList.append(string)\n\noutputList.append(newString)\n\nprint(outputList)"}
{"instruction":"Given a list of words, write a Python program to generate all valid anagrams.","input":"Python","output":"def generate_anagrams(words):\n anagrams = []\n for word in words:\n  anagrams_list = []\n  if len(word) == 1:\n   return [word]\n  for anagram in generate_anagrams(words.difference({word})):\n   for i in range(len(word)):\n    anagrams_list.append(anagram[:i]+ word[0] + anagram[i:])\n  anagrams += anagrams_list\n return anagrams\n\nwords = set(['python', 'typhon'])\nprint(generate_anagrams(words))\n# Output: ['typhon', 'python', 'hynopt', 'ptyhon']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of words, write a Python program to generate all valid anagrams.\n\n### Input:\nPython\n\n### Output:\ndef generate_anagrams(words):\n anagrams = []\n for word in words:\n  anagrams_list = []\n  if len(word) == 1:\n   return [word]\n  for anagram in generate_anagrams(words.difference({word})):\n   for i in range(len(word)):\n    anagrams_list.append(anagram[:i]+ word[0] + anagram[i:])\n  anagrams += anagrams_list\n return anagrams\n\nwords = set(['python', 'typhon'])\nprint(generate_anagrams(words))\n# Output: ['typhon', 'python', 'hynopt', 'ptyhon']"}
{"instruction":"Modify a basic Python algorithm to increase the speed of the program.","input":"list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","output":"def faster_sum(arr):\n total = 0\n # looping over the array and adding the elements\n # to the variable total\n for i in range(0, len(arr)):\n total += arr[i]\n return total\n\nlist_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# using the faster_sum() function\nresult = faster_sum(list_of_numbers)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify a basic Python algorithm to increase the speed of the program.\n\n### Input:\nlist_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n### Output:\ndef faster_sum(arr):\n total = 0\n # looping over the array and adding the elements\n # to the variable total\n for i in range(0, len(arr)):\n total += arr[i]\n return total\n\nlist_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# using the faster_sum() function\nresult = faster_sum(list_of_numbers)\nprint(result)"}
{"instruction":"Develop a Python function that can detect the spoken language of a user\u2019s input.","input":"Bonjour","output":"def detect_language(text):\n \"\"\"Detect the language of a given text.\n\n Args:\n  text (str): The text to detect the language of.\n\n Returns:\n  str: The detected language of the text.\n \"\"\"\n\n language = detect(text)\n return language","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function that can detect the spoken language of a user\u2019s input.\n\n### Input:\nBonjour\n\n### Output:\ndef detect_language(text):\n \"\"\"Detect the language of a given text.\n\n Args:\n  text (str): The text to detect the language of.\n\n Returns:\n  str: The detected language of the text.\n \"\"\"\n\n language = detect(text)\n return language"}
{"instruction":"Generate a correct python code for implementing a stack","input":"","output":"class Stack: \n  \n    def __init__(self): \n        self.items = [] \n  \n    def isEmpty(self): \n        return self.items == [] \n  \n    def push(self, item): \n        self.items.append(item) \n  \n    def pop(self): \n        return self.items.pop() \n  \n    def peek(self): \n        return self.items[len(self.items)-1] \n  \n    def size(self): \n        return len(self.items)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a correct python code for implementing a stack\n\n### Input:\n\n\n### Output:\nclass Stack: \n  \n    def __init__(self): \n        self.items = [] \n  \n    def isEmpty(self): \n        return self.items == [] \n  \n    def push(self, item): \n        self.items.append(item) \n  \n    def pop(self): \n        return self.items.pop() \n  \n    def peek(self): \n        return self.items[len(self.items)-1] \n  \n    def size(self): \n        return len(self.items)"}
{"instruction":"Create a Python program to compare two words using edit distance.","input":"word1: hello\nword2: yellow","output":"def editDistance(word1, word2):\n\tm = len(word1)\n\tn = len(word2)\n\n\t# Create a matrix to store results of subproblems\n\tdp = [[0 for x in range(n+1)] for x in range(m+1)]\n\n\t# Fill dp[][] in bottom up manner\n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\n\t\t\t# If first string is empty, only option is to \n\t\t\t# insert all characters of second string\n\t\t\tif i == 0: \n\t\t\t\tdp[i][j] = j\n\n\t\t\t# If second string is empty, only option is to \n\t\t\t# remove all characters of second string\n\t\t\telif j == 0: \n\t\t\t\tdp[i][j] = i\n\n\t\t\t# If last characters are same, ignore last char \n\t\t\t# and recur for remaining string\n\t\t\telif word1[i-1] == word2[j-1]: \n\t\t\t\tdp[i][j] = dp[i-1][j-1]\n\n\t\t\t# If last character are different, consider all \n\t\t\t# possibilities and find minimum \n\t\t\telse: \n\t\t\t\tdp[i][j] = 1 + min(dp[i][j-1], # Insert\n\t\t\t\t\t\t\t\tdp[i-1][j], # Remove \n\t\t\t\t\t\t\t\tdp[i-1][j-1]) # Replace \n\n\treturn dp[m][n] \n\n# Driver program \nword1 = \"hello\"\nword2 = \"yellow\"\n\nprint( editDistance(word1, word2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to compare two words using edit distance.\n\n### Input:\nword1: hello\nword2: yellow\n\n### Output:\ndef editDistance(word1, word2):\n\tm = len(word1)\n\tn = len(word2)\n\n\t# Create a matrix to store results of subproblems\n\tdp = [[0 for x in range(n+1)] for x in range(m+1)]\n\n\t# Fill dp[][] in bottom up manner\n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\n\t\t\t# If first string is empty, only option is to \n\t\t\t# insert all characters of second string\n\t\t\tif i == 0: \n\t\t\t\tdp[i][j] = j\n\n\t\t\t# If second string is empty, only option is to \n\t\t\t# remove all characters of second string\n\t\t\telif j == 0: \n\t\t\t\tdp[i][j] = i\n\n\t\t\t# If last characters are same, ignore last char \n\t\t\t# and recur for remaining string\n\t\t\telif word1[i-1] == word2[j-1]: \n\t\t\t\tdp[i][j] = dp[i-1][j-1]\n\n\t\t\t# If last character are different, consider all \n\t\t\t# possibilities and find minimum \n\t\t\telse: \n\t\t\t\tdp[i][j] = 1 + min(dp[i][j-1], # Insert\n\t\t\t\t\t\t\t\tdp[i-1][j], # Remove \n\t\t\t\t\t\t\t\tdp[i-1][j-1]) # Replace \n\n\treturn dp[m][n] \n\n# Driver program \nword1 = \"hello\"\nword2 = \"yellow\"\n\nprint( editDistance(word1, word2))"}
{"instruction":"Create an algorithm in Python to identify the missing number in a sequence of integers.","input":"[1,2,4,5]","output":"def missing_number(arr): \n  n = len(arr) \n  total = (n+1)*(n+2)\/2\n  for i in range(n): \n    total -= arr[i] \n  return total\n  \narr = [1,2,4,5]\nprint(\"The missing number is\",int(missing_number(arr)))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to identify the missing number in a sequence of integers.\n\n### Input:\n[1,2,4,5]\n\n### Output:\ndef missing_number(arr): \n  n = len(arr) \n  total = (n+1)*(n+2)\/2\n  for i in range(n): \n    total -= arr[i] \n  return total\n  \narr = [1,2,4,5]\nprint(\"The missing number is\",int(missing_number(arr)))"}
{"instruction":"Using existing Python code, design a classifier to differentiate between two similar types of programming languages.","input":"Java and C++","output":"import pandas as pd\n\n# Load data \ndata = pd.read_csv('programming_languages.csv') \n\n# Separate input and output data\nX = data.drop('language', axis=1).values \ny = data['language'].values \n\n# Train model \nfrom sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=100, max_depth=4)\nmodel.fit(X, y)\n\n# Generate predictions \npredictions = model.predict(X)\n\n# Print predictions \nprint(predictions)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing existing Python code, design a classifier to differentiate between two similar types of programming languages.\n\n### Input:\nJava and C++\n\n### Output:\nimport pandas as pd\n\n# Load data \ndata = pd.read_csv('programming_languages.csv') \n\n# Separate input and output data\nX = data.drop('language', axis=1).values \ny = data['language'].values \n\n# Train model \nfrom sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=100, max_depth=4)\nmodel.fit(X, y)\n\n# Generate predictions \npredictions = model.predict(X)\n\n# Print predictions \nprint(predictions)"}
{"instruction":"Write a Python function to check if a given number is an Armstrong number.","input":"Not applicable","output":"def is_armstrong_number(num): \n \n    # Calculate the number of digits \n    n = len(str(num)) \n  \n    # Check whether is an armstrong number \n    sum = 0 \n    temp = num \n    while temp > 0: \n        digit = temp % 10\n        sum += digit ** n \n        temp \/\/= 10\n  \n    if num == sum: \n        return True\n    else: \n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to check if a given number is an Armstrong number.\n\n### Input:\nNot applicable\n\n### Output:\ndef is_armstrong_number(num): \n \n    # Calculate the number of digits \n    n = len(str(num)) \n  \n    # Check whether is an armstrong number \n    sum = 0 \n    temp = num \n    while temp > 0: \n        digit = temp % 10\n        sum += digit ** n \n        temp \/\/= 10\n  \n    if num == sum: \n        return True\n    else: \n        return False"}
{"instruction":"Create a function to implement linear search in Python.","input":"","output":"def linear_search(list, item):\n    # Traverse through all elements in the list\n    for i in range(len(list)):\n        if list[i] == item:\n            return i  # Return the index of the element\n    return -1 # Return -1 if the item is not found","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to implement linear search in Python.\n\n### Input:\n\n\n### Output:\ndef linear_search(list, item):\n    # Traverse through all elements in the list\n    for i in range(len(list)):\n        if list[i] == item:\n            return i  # Return the index of the element\n    return -1 # Return -1 if the item is not found"}
{"instruction":"Provide a Python program to print out a Pascal triangle","input":"","output":"\"\"\"\nA function to print out a Pascal triangle\n\"\"\"\n\ndef pascal_triangle(n): \n    # Initialize the row\n    row = [1]\n\n    # Calculate each successive row \n    y = [0] \n    for x in range(max(n, 0)): \n        print(row)\n\t\t# Compute the next row\n        row = [sum(i) for i in zip(row + y, y + row)] \n        # Copy the row\n        y = row[:] \n\t\t\nif __name__ == '__main__':\n    n = 5\n    pascal_triangle(n)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProvide a Python program to print out a Pascal triangle\n\n### Input:\n\n\n### Output:\n\"\"\"\nA function to print out a Pascal triangle\n\"\"\"\n\ndef pascal_triangle(n): \n    # Initialize the row\n    row = [1]\n\n    # Calculate each successive row \n    y = [0] \n    for x in range(max(n, 0)): \n        print(row)\n\t\t# Compute the next row\n        row = [sum(i) for i in zip(row + y, y + row)] \n        # Copy the row\n        y = row[:] \n\t\t\nif __name__ == '__main__':\n    n = 5\n    pascal_triangle(n)"}
{"instruction":"Design a Python program to print out all prime numbers in a range","input":"Number Range between 1 and 10","output":"def is_prime(n):\n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    return True\n\nfor num in range(1, 10):\n    if is_prime(num):\n        print(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to print out all prime numbers in a range\n\n### Input:\nNumber Range between 1 and 10\n\n### Output:\ndef is_prime(n):\n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    return True\n\nfor num in range(1, 10):\n    if is_prime(num):\n        print(num)"}
{"instruction":"Create a program in Python to capitalize the first letter of a given string.","input":"hello world","output":"def capitalize_first_letter(text):\n  return text[0].upper() + text[1:]\n\nprint(capitalize_first_letter(\"hello world\")) # Output: Hello world","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to capitalize the first letter of a given string.\n\n### Input:\nhello world\n\n### Output:\ndef capitalize_first_letter(text):\n  return text[0].upper() + text[1:]\n\nprint(capitalize_first_letter(\"hello world\")) # Output: Hello world"}
{"instruction":"Create a Python program that accepts periods of time from the user and calculates the total amount of time in minutes.","input":"3 hours, 4 minutes","output":"def calculate_total_time(text):\n    total_time = 0\n    # Split the text into its individual components\n    components = text.split(\", \")\n    \n    # Calculate the amount of time in minutes for each component\n    for component in components:\n        if \"hour\" in component:\n            num = float(component.split(\" \")[0])\n            total_time += (num * 60)\n        elif \"minute\" in component:\n            num = float(component.split(\" \")[0])\n            total_time += num\n    return total_time\n\ntotal_time = calculate_total_time(\"3 hours, 4 minutes\")\nprint(total_time)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that accepts periods of time from the user and calculates the total amount of time in minutes.\n\n### Input:\n3 hours, 4 minutes\n\n### Output:\ndef calculate_total_time(text):\n    total_time = 0\n    # Split the text into its individual components\n    components = text.split(\", \")\n    \n    # Calculate the amount of time in minutes for each component\n    for component in components:\n        if \"hour\" in component:\n            num = float(component.split(\" \")[0])\n            total_time += (num * 60)\n        elif \"minute\" in component:\n            num = float(component.split(\" \")[0])\n            total_time += num\n    return total_time\n\ntotal_time = calculate_total_time(\"3 hours, 4 minutes\")\nprint(total_time)"}
{"instruction":"Write a Python program to generate 10 random numbers and put them in a list.","input":"","output":"import random\n\nrandom_list = []\nfor i in range(10):\n number = random.randint(1, 100)\n random_list.append(number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate 10 random numbers and put them in a list.\n\n### Input:\n\n\n### Output:\nimport random\n\nrandom_list = []\nfor i in range(10):\n number = random.randint(1, 100)\n random_list.append(number)"}
{"instruction":"Create a Python program for visualizing a given dataset using matplotlib.","input":"x = [1, 2, 3, 4, 5]\ny = [1, 4, 9, 16, 25]","output":"import matplotlib.pyplot as plt \n\nx = [1, 2, 3, 4, 5] \ny = [1, 4, 9, 16, 25] \n  \n# plotting the points  \nplt.plot(x, y) \n\n# naming the x axis \nplt.xlabel('x - axis') \n# naming the y axis \nplt.ylabel('y - axis') \n  \n# giving a title to my graph \nplt.title('My first graph!') \n  \n# function to show the plot \nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for visualizing a given dataset using matplotlib.\n\n### Input:\nx = [1, 2, 3, 4, 5]\ny = [1, 4, 9, 16, 25]\n\n### Output:\nimport matplotlib.pyplot as plt \n\nx = [1, 2, 3, 4, 5] \ny = [1, 4, 9, 16, 25] \n  \n# plotting the points  \nplt.plot(x, y) \n\n# naming the x axis \nplt.xlabel('x - axis') \n# naming the y axis \nplt.ylabel('y - axis') \n  \n# giving a title to my graph \nplt.title('My first graph!') \n  \n# function to show the plot \nplt.show()"}
{"instruction":"Create a class in python, named RoundInstance, that can store radius, diameter, area and circumference coordinates.","input":"","output":"class RoundInstance():\n    def __init__(self, radius, diameter, area, circumference):\n        self.radius = radius\n        self.diameter = diameter\n        self.area = area\n        self.circumference = circumference\n    \n    def get_radius(self):\n        return self.radius\n\n    def get_diameter(self):\n        return self.diameter\n\n    def get_area(self):\n        return self.area\n\n    def get_circumference(self):\n        return self.circumference","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in python, named RoundInstance, that can store radius, diameter, area and circumference coordinates.\n\n### Input:\n\n\n### Output:\nclass RoundInstance():\n    def __init__(self, radius, diameter, area, circumference):\n        self.radius = radius\n        self.diameter = diameter\n        self.area = area\n        self.circumference = circumference\n    \n    def get_radius(self):\n        return self.radius\n\n    def get_diameter(self):\n        return self.diameter\n\n    def get_area(self):\n        return self.area\n\n    def get_circumference(self):\n        return self.circumference"}
{"instruction":"Create a python program that generates a random password. The password should contain a combination of uppercase, lowercase, and numbers.","input":"Not applicable","output":"import random\nimport string\n\ndef generate_password():\n password_length = 8\n chars = string.ascii_letters + string.digits \n return ''.join(random.choice(chars) for i in range(password_length))\n\nprint(generate_password())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that generates a random password. The password should contain a combination of uppercase, lowercase, and numbers.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\nimport string\n\ndef generate_password():\n password_length = 8\n chars = string.ascii_letters + string.digits \n return ''.join(random.choice(chars) for i in range(password_length))\n\nprint(generate_password())"}
{"instruction":"Design a neural network in Python to classify the sentiment of a movie review. The data should consist of reviews and labels indicating whether the review is positive or negative.","input":"Not applicable","output":"#import libraries\nimport keras\nfrom keras import models\nfrom keras.layers import Dense, Dropout, Embedding, Conv1D, GlobalMaxPooling1D, Flatten\nimport numpy as np\n\n#Specify parameters\nvocab_size = 50000\nembedding_dim = 200\nmaxlen = 500\nbatch_size = 64\n\n#define model\nmodel = models.Sequential()\nmodel.add(Embedding(vocab_size, embedding_dim, input_length=maxlen))\nmodel.add(Conv1D(256, 3, activation='relu'))\nmodel.add(GlobalMaxPooling1D())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n#Fit model\nmodel.fit(x_train, y_train,\n          batch_size=batch_size,\n          epochs=5,\n          validation_data=(x_val, y_val))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a neural network in Python to classify the sentiment of a movie review. The data should consist of reviews and labels indicating whether the review is positive or negative.\n\n### Input:\nNot applicable\n\n### Output:\n#import libraries\nimport keras\nfrom keras import models\nfrom keras.layers import Dense, Dropout, Embedding, Conv1D, GlobalMaxPooling1D, Flatten\nimport numpy as np\n\n#Specify parameters\nvocab_size = 50000\nembedding_dim = 200\nmaxlen = 500\nbatch_size = 64\n\n#define model\nmodel = models.Sequential()\nmodel.add(Embedding(vocab_size, embedding_dim, input_length=maxlen))\nmodel.add(Conv1D(256, 3, activation='relu'))\nmodel.add(GlobalMaxPooling1D())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n#Fit model\nmodel.fit(x_train, y_train,\n          batch_size=batch_size,\n          epochs=5,\n          validation_data=(x_val, y_val))"}
{"instruction":"Rewrite the following if\/else statement in one line of Python code","input":"if condition:\n    do_this()\nelse:\n    do_that()","output":"do_this() if condition else do_that()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following if\/else statement in one line of Python code\n\n### Input:\nif condition:\n    do_this()\nelse:\n    do_that()\n\n### Output:\ndo_this() if condition else do_that()"}
{"instruction":"Design an algorithm in Python that sorts an unordered list of three numbers in increasing order.","input":"List = [3, 1, 2]","output":"def sort_list(input_list):\n    output_list = []\n    while input_list:\n        smallest = input_list[0]\n        for i in input_list:\n            if i < smallest:\n                smallest = i\n        output_list.append(smallest)\n        input_list.remove(smallest)\n    return output_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that sorts an unordered list of three numbers in increasing order.\n\n### Input:\nList = [3, 1, 2]\n\n### Output:\ndef sort_list(input_list):\n    output_list = []\n    while input_list:\n        smallest = input_list[0]\n        for i in input_list:\n            if i < smallest:\n                smallest = i\n        output_list.append(smallest)\n        input_list.remove(smallest)\n    return output_list"}
{"instruction":"Write a Python program to create 8 random numbers between 1 and 100.","input":"","output":"import random \n\n# Create 8 random numbers \nrand_nums = [random.randint(1, 100) for _ in range(8)]\nprint(rand_nums)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create 8 random numbers between 1 and 100.\n\n### Input:\n\n\n### Output:\nimport random \n\n# Create 8 random numbers \nrand_nums = [random.randint(1, 100) for _ in range(8)]\nprint(rand_nums)"}
{"instruction":"Design a Python function to print out all permutations of a given string.","input":"\"ABC\"","output":"def permute(s):\n    if len(s) == 1:\n        return s\n\n    perms = []\n    for i in range(len(s)):\n        element = s[i]\n\n        remaining_elements = s[:i] + s[i+1:]\n        z = permute(remaining_elements)\n\n        for t in z:\n            perms.append(element + t)\n\n    return perms\n\nprint(permute(\"ABC\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python function to print out all permutations of a given string.\n\n### Input:\n\"ABC\"\n\n### Output:\ndef permute(s):\n    if len(s) == 1:\n        return s\n\n    perms = []\n    for i in range(len(s)):\n        element = s[i]\n\n        remaining_elements = s[:i] + s[i+1:]\n        z = permute(remaining_elements)\n\n        for t in z:\n            perms.append(element + t)\n\n    return perms\n\nprint(permute(\"ABC\"))"}
{"instruction":"Create a Python class representing a grocery item with the following attributes: name, price, quantity.","input":"","output":"class GroceryItem:\n    def __init__(self, name, price, quantity):\n        self.name = name\n        self.price = price\n        self.quantity = quantity","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class representing a grocery item with the following attributes: name, price, quantity.\n\n### Input:\n\n\n### Output:\nclass GroceryItem:\n    def __init__(self, name, price, quantity):\n        self.name = name\n        self.price = price\n        self.quantity = quantity"}
{"instruction":"Create a function in Python to calculate the average of a given list [9, 8, 7].","input":"[9, 8, 7]","output":"def calculate_average(lst): \n sum = 0\n for el in lst: \n  sum += el\n return sum \/ len(lst) \n \n avg = calculate_average([9, 8, 7]) \n print(avg) \n# Output: 8.0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to calculate the average of a given list [9, 8, 7].\n\n### Input:\n[9, 8, 7]\n\n### Output:\ndef calculate_average(lst): \n sum = 0\n for el in lst: \n  sum += el\n return sum \/ len(lst) \n \n avg = calculate_average([9, 8, 7]) \n print(avg) \n# Output: 8.0"}
{"instruction":"Generate a program in Python to generate a list with numbers from 1 to 20 in random order.","input":"","output":"import random\n\ndef randomListGenerator():\n    randomList = []\n    for i in range(1, 21):\n        randomNumber = random.randint(1,20)\n        while randomNumber in randomList:\n            randomNumber = random.randint(1,20)\n        else:\n            randomList.append(randomNumber)\n    return randomList\n\nprint(randomListGenerator())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to generate a list with numbers from 1 to 20 in random order.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef randomListGenerator():\n    randomList = []\n    for i in range(1, 21):\n        randomNumber = random.randint(1,20)\n        while randomNumber in randomList:\n            randomNumber = random.randint(1,20)\n        else:\n            randomList.append(randomNumber)\n    return randomList\n\nprint(randomListGenerator())"}
{"instruction":"Create a Python lambda expression that takes two parameters, a and b, and returns the average of them.","input":"","output":"avg = lambda a,b : (a + b)\/2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python lambda expression that takes two parameters, a and b, and returns the average of them.\n\n### Input:\n\n\n### Output:\navg = lambda a,b : (a + b)\/2"}
{"instruction":"Create a function in Python to find the most common elements in a list.","input":"[2, 4, 1, 4, 5, 6, 4, 8]","output":"def most_common_element(lst):\n    max_count = 0\n    most_common = None\n    \n    for num in lst:\n        count = lst.count(num)\n        if count > max_count:\n            most_common = num\n            max_count = count\n    return most_common\n\nmost_common_element([2, 4, 1, 4, 5, 6, 4, 8])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to find the most common elements in a list.\n\n### Input:\n[2, 4, 1, 4, 5, 6, 4, 8]\n\n### Output:\ndef most_common_element(lst):\n    max_count = 0\n    most_common = None\n    \n    for num in lst:\n        count = lst.count(num)\n        if count > max_count:\n            most_common = num\n            max_count = count\n    return most_common\n\nmost_common_element([2, 4, 1, 4, 5, 6, 4, 8])"}
{"instruction":"Develop a Python solution to identify parts of speech of a given sentence.","input":"Sentence: \"I like apples.\"","output":"import nltk\n\nsentence = \"I like apples.\"\nwords = nltk.word_tokenize(sentence)\ntagged_words = nltk.pos_tag(words)\n\nparts_of_speech = dict()\nfor word, tag in tagged_words:\n  parts_of_speech[word] = tag\n\nprint(parts_of_speech)\n# Output: {'I': 'PRP', 'like': 'VBP', 'apples': 'NNS'}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python solution to identify parts of speech of a given sentence.\n\n### Input:\nSentence: \"I like apples.\"\n\n### Output:\nimport nltk\n\nsentence = \"I like apples.\"\nwords = nltk.word_tokenize(sentence)\ntagged_words = nltk.pos_tag(words)\n\nparts_of_speech = dict()\nfor word, tag in tagged_words:\n  parts_of_speech[word] = tag\n\nprint(parts_of_speech)\n# Output: {'I': 'PRP', 'like': 'VBP', 'apples': 'NNS'}"}
{"instruction":"Convert the given string to all capital letters using an algorithm and Python.","input":"","output":"def convert_to_upper(string):\n    \"\"\"Function to convert the given string to all capital letters using an algorithm. 'Input should be a string.\"\"\"\n    result = ''\n    for char in string:\n        result += chr(ord(char) - 32)\n    return result\n\nprint(convert_to_upper('Hello world!'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the given string to all capital letters using an algorithm and Python.\n\n### Input:\n\n\n### Output:\ndef convert_to_upper(string):\n    \"\"\"Function to convert the given string to all capital letters using an algorithm. 'Input should be a string.\"\"\"\n    result = ''\n    for char in string:\n        result += chr(ord(char) - 32)\n    return result\n\nprint(convert_to_upper('Hello world!'))"}
{"instruction":"Create a Python algorithm that classifies the Iris flowers dataset into three categories.","input":"","output":"from sklearn.datasets import load_iris\nfrom sklearn import tree\nimport pandas as pd\n\n# Import dataset\ndata = load_iris()\n\n# Split dataset into features and labels\nX = data.data\ny = data.target\n\n# Train decision tree model\nclf = tree.DecisionTreeClassifier()\nclf.fit(X, y)\n\n# Make predictions\nprediction = clf.predict(X)\n\n# Print accuracy and confusion matrix\nprint(f'Accuracy: {clf.score(X, y)}')\npd.crosstab(data.target, prediction, rownames=['Actual'], colnames=['Predicted'])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python algorithm that classifies the Iris flowers dataset into three categories.\n\n### Input:\n\n\n### Output:\nfrom sklearn.datasets import load_iris\nfrom sklearn import tree\nimport pandas as pd\n\n# Import dataset\ndata = load_iris()\n\n# Split dataset into features and labels\nX = data.data\ny = data.target\n\n# Train decision tree model\nclf = tree.DecisionTreeClassifier()\nclf.fit(X, y)\n\n# Make predictions\nprediction = clf.predict(X)\n\n# Print accuracy and confusion matrix\nprint(f'Accuracy: {clf.score(X, y)}')\npd.crosstab(data.target, prediction, rownames=['Actual'], colnames=['Predicted'])"}
{"instruction":"Design an algorithm in Python that reads an unordered array of integers and prints the integers in sorted order.","input":"[98, 45, 21, 99, 74, 44]","output":"def sortArray(arr): \n    for i in range(len(arr)): \n        if (arr[i] > arr[i+1]):\n            temp = arr[i] \n            arr[i] = arr[i+1] \n            arr[i+1] = temp \n    return arr\n\nprint(sortArray([98, 45, 21, 99, 74, 44])) # Output: [21, 44, 45, 74, 98, 99]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that reads an unordered array of integers and prints the integers in sorted order.\n\n### Input:\n[98, 45, 21, 99, 74, 44]\n\n### Output:\ndef sortArray(arr): \n    for i in range(len(arr)): \n        if (arr[i] > arr[i+1]):\n            temp = arr[i] \n            arr[i] = arr[i+1] \n            arr[i+1] = temp \n    return arr\n\nprint(sortArray([98, 45, 21, 99, 74, 44])) # Output: [21, 44, 45, 74, 98, 99]"}
{"instruction":"Create a Python script to calculate the circumference of a circle given its radius.","input":"radius = 5","output":"def calc_circumference(radius):\n  circumference = 2 * 3.14 * radius\n  return circumference\n  \ncircumference = calc_circumference(radius)\nprint(circumference)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to calculate the circumference of a circle given its radius.\n\n### Input:\nradius = 5\n\n### Output:\ndef calc_circumference(radius):\n  circumference = 2 * 3.14 * radius\n  return circumference\n  \ncircumference = calc_circumference(radius)\nprint(circumference)"}
{"instruction":"Create a function in Python to extract all number from a comma separated string.","input":"","output":"def extract_numbers(s): \n    return [int(el) for el in s.split(',') if el.lstrip('-').isnumeric()]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to extract all number from a comma separated string.\n\n### Input:\n\n\n### Output:\ndef extract_numbers(s): \n    return [int(el) for el in s.split(',') if el.lstrip('-').isnumeric()]"}
{"instruction":"Find the most common words in a document using Python.","input":"The quick brown fox jumps over the lazy dog.","output":"from collections import Counter\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nwords = text.split()\n\nword_count = Counter(words)\n\n# print the most common words\nprint(word_count.most_common(3))\n\n# Output: [('the', 2), ('quick', 1), ('brown', 1)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the most common words in a document using Python.\n\n### Input:\nThe quick brown fox jumps over the lazy dog.\n\n### Output:\nfrom collections import Counter\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nwords = text.split()\n\nword_count = Counter(words)\n\n# print the most common words\nprint(word_count.most_common(3))\n\n# Output: [('the', 2), ('quick', 1), ('brown', 1)]"}
{"instruction":"Optimize a Python program to find the maximum number of elements in two given lists.","input":"listA = [1, 3, 5, 7]\nlistB = [2, 4, 6, 8]","output":"def findMaxLen(listA, listB):\n  lengthA = len(listA)\n  lengthB = len(listB) \n  \n  # Initialize left and right pointers \n  l, r = 0, 0\n  \n  max_len = 0 \n  \n  # While left and right pointer cross the other    \n  # maintain a maximum length\n  while l < lengthA and r < lengthB: \n      # If they both have same element \n      if listA[l] == listB[r]:\n          max_len = max(max_len, l + r + 1) \n          l += 1\n          r += 1\n      \n      # If listA's element is less, increment  \n      # listB pointer \n      elif listA[l] > listB[r]:\n          r += 1\n          \n      # If listA's element is more, increment  \n      # listA pointer\n      else:\n          l += 1   \n  return max_len","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Python program to find the maximum number of elements in two given lists.\n\n### Input:\nlistA = [1, 3, 5, 7]\nlistB = [2, 4, 6, 8]\n\n### Output:\ndef findMaxLen(listA, listB):\n  lengthA = len(listA)\n  lengthB = len(listB) \n  \n  # Initialize left and right pointers \n  l, r = 0, 0\n  \n  max_len = 0 \n  \n  # While left and right pointer cross the other    \n  # maintain a maximum length\n  while l < lengthA and r < lengthB: \n      # If they both have same element \n      if listA[l] == listB[r]:\n          max_len = max(max_len, l + r + 1) \n          l += 1\n          r += 1\n      \n      # If listA's element is less, increment  \n      # listB pointer \n      elif listA[l] > listB[r]:\n          r += 1\n          \n      # If listA's element is more, increment  \n      # listA pointer\n      else:\n          l += 1   \n  return max_len"}
{"instruction":"What is the shortest way to sort a list of integers in descending order in Python?","input":"","output":"# using the sorted function with key parameter \nlist_of_ints = [8, 0, 7, 4, 5, 6, 9]\n\nsorted_list_ints = sorted(list_of_ints, key=lambda num: -num)\n\nprint(sorted_list_ints) #[9, 8, 7, 6, 5, 4, 0]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat is the shortest way to sort a list of integers in descending order in Python?\n\n### Input:\n\n\n### Output:\n# using the sorted function with key parameter \nlist_of_ints = [8, 0, 7, 4, 5, 6, 9]\n\nsorted_list_ints = sorted(list_of_ints, key=lambda num: -num)\n\nprint(sorted_list_ints) #[9, 8, 7, 6, 5, 4, 0]"}
{"instruction":"Create a function in Python to find the smallest positive number which is not present in a given unsorted array.","input":"[3, 1, 2, 6, 0, -2, -1]","output":"def smallestMissingPositiveNumber(arr): \n    s = set() \n    for i in arr: \n        s.add(i) \n  \n    for i in range(1, len(arr) + 1): \n        if i not in s: \n            return i \n  \n    return len(arr)+1\n  \narr = [3, 1, 2, 6, 0, -2, -1]\nmissing = smallestMissingPositiveNumber(arr)\nprint(missing) # 4","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to find the smallest positive number which is not present in a given unsorted array.\n\n### Input:\n[3, 1, 2, 6, 0, -2, -1]\n\n### Output:\ndef smallestMissingPositiveNumber(arr): \n    s = set() \n    for i in arr: \n        s.add(i) \n  \n    for i in range(1, len(arr) + 1): \n        if i not in s: \n            return i \n  \n    return len(arr)+1\n  \narr = [3, 1, 2, 6, 0, -2, -1]\nmissing = smallestMissingPositiveNumber(arr)\nprint(missing) # 4"}
{"instruction":"Create a Python program which prints the calendar for a given year.","input":"year = 2019","output":"import calendar\n\nc = calendar.TextCalendar(calendar.SUNDAY)\nstr = c.formatyear(2019, 2, 1, 1, 3)\nprint (str)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program which prints the calendar for a given year.\n\n### Input:\nyear = 2019\n\n### Output:\nimport calendar\n\nc = calendar.TextCalendar(calendar.SUNDAY)\nstr = c.formatyear(2019, 2, 1, 1, 3)\nprint (str)"}
{"instruction":"Generate a code snippet to add two numbers in Python.","input":"x = 2, y = 4","output":"result = x + y\nprint(result) # Prints 6","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code snippet to add two numbers in Python.\n\n### Input:\nx = 2, y = 4\n\n### Output:\nresult = x + y\nprint(result) # Prints 6"}
{"instruction":"Write a Python program to optimize a function for finding the minimum value using an evolutionary algorithm such as differential evolution.","input":"def function(x):\n return x**2 - 0.5 * x - 2","output":"import random\nimport numpy as np\n\ndef differential_evolution(f, bounds, mut=0.8, crossp=0.7, popsize=20, its=1000):\n\n # Initialization\n dim = len(bounds)\n population = np.random.rand(popsize, dim)\n min_b, max_b = np.asarray(bounds).T\n diff = np.fabs(min_b - max_b)\n population_denorm = min_b + population * diff\n\n fitness = np.asarray([f(ind) for ind in population_denorm])\n\n best_idx = np.argmin(fitness)\n best = population_denorm[best_idx]\n\n for i in range(its):\n for j in range(popsize):\n\n # Mutation\n  idxs = [idx for idx in range(popsize) if idx != j]\n a, b, c = population[np.random.choice(idxs, 3, replace = False)]\n mutation = a + mut * (b - c)\n mutation = np.clip(mutation, 0, 1)\n\n # Crossover\n cross_points = np.random.rand(dim) < crossp\n if not np.any(cross_points):\n   cross_points[np.random.randint(0, dim)] = True\n trial = np.where(cross_points, mutation, population[j])\n trial_denorm = min_b + trial * diff\n\n # Selection\n f = f(trial_denorm)\n if f < fitness[j]:\n   fitness[j] = f\n   population[j] = trial\n   if f < fitness[best_idx]:\n     best_idx = j\n     best = trial_denorm\n\n # Printing\n print(\"Iteration: {}, Best Value: {:.4f}\".format(i, f))\n\n return best\n\n# Function to optimize\ndef function(x):\n return x**2 - 0.5 * x - 2\n\n# Search Space\nbounds = [(-10, 10)]\n\n# Run the optimization\nresult = differential_evolution(function, bounds)\nprint(\"Optimized Value: {:.4f}\".format(function(result)))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize a function for finding the minimum value using an evolutionary algorithm such as differential evolution.\n\n### Input:\ndef function(x):\n return x**2 - 0.5 * x - 2\n\n### Output:\nimport random\nimport numpy as np\n\ndef differential_evolution(f, bounds, mut=0.8, crossp=0.7, popsize=20, its=1000):\n\n # Initialization\n dim = len(bounds)\n population = np.random.rand(popsize, dim)\n min_b, max_b = np.asarray(bounds).T\n diff = np.fabs(min_b - max_b)\n population_denorm = min_b + population * diff\n\n fitness = np.asarray([f(ind) for ind in population_denorm])\n\n best_idx = np.argmin(fitness)\n best = population_denorm[best_idx]\n\n for i in range(its):\n for j in range(popsize):\n\n # Mutation\n  idxs = [idx for idx in range(popsize) if idx != j]\n a, b, c = population[np.random.choice(idxs, 3, replace = False)]\n mutation = a + mut * (b - c)\n mutation = np.clip(mutation, 0, 1)\n\n # Crossover\n cross_points = np.random.rand(dim) < crossp\n if not np.any(cross_points):\n   cross_points[np.random.randint(0, dim)] = True\n trial = np.where(cross_points, mutation, population[j])\n trial_denorm = min_b + trial * diff\n\n # Selection\n f = f(trial_denorm)\n if f < fitness[j]:\n   fitness[j] = f\n   population[j] = trial\n   if f < fitness[best_idx]:\n     best_idx = j\n     best = trial_denorm\n\n # Printing\n print(\"Iteration: {}, Best Value: {:.4f}\".format(i, f))\n\n return best\n\n# Function to optimize\ndef function(x):\n return x**2 - 0.5 * x - 2\n\n# Search Space\nbounds = [(-10, 10)]\n\n# Run the optimization\nresult = differential_evolution(function, bounds)\nprint(\"Optimized Value: {:.4f}\".format(function(result)))"}
{"instruction":"Write a Python program to print out the alphabet pattern 'ABCD...XYZ'.","input":"","output":"for i in range(65, 91): \n    print(chr(i), end=\" \")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print out the alphabet pattern 'ABCD...XYZ'.\n\n### Input:\n\n\n### Output:\nfor i in range(65, 91): \n    print(chr(i), end=\" \")"}
{"instruction":"Construct a mini-search engine in Python using regular expressions.","input":"Not applicable","output":"import re\n\n# Input text\ntext = \"This is my text and I am looking for a search term\"\n\n# Search term\nsearch_term = \"search\"\n\n# Use regular expression to find search term\npattern = re.compile(search_term)\nresult = pattern.findall(text)\n\n# Print result\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a mini-search engine in Python using regular expressions.\n\n### Input:\nNot applicable\n\n### Output:\nimport re\n\n# Input text\ntext = \"This is my text and I am looking for a search term\"\n\n# Search term\nsearch_term = \"search\"\n\n# Use regular expression to find search term\npattern = re.compile(search_term)\nresult = pattern.findall(text)\n\n# Print result\nprint(result)"}
{"instruction":"Explain the concept of recursion with an example in Python.","input":"","output":"Recursion is a programming concept which involves a function invoking itself. Instead of using loops, recursion makes use of a function calling itself with a different input value each time. An example of recursive function in Python is the factorial function, defined as follows:\n\ndef factorial(x):\n    if x == 1:\n        return 1\n    else:\n        return x * factorial(x-1)\n\nThe function factorial(x) takes a single parameter x and returns x multiplied by the factorial of x-1. This recursive process will continue until it reaches the base case, which is x==1, where the function returns the value 1.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain the concept of recursion with an example in Python.\n\n### Input:\n\n\n### Output:\nRecursion is a programming concept which involves a function invoking itself. Instead of using loops, recursion makes use of a function calling itself with a different input value each time. An example of recursive function in Python is the factorial function, defined as follows:\n\ndef factorial(x):\n    if x == 1:\n        return 1\n    else:\n        return x * factorial(x-1)\n\nThe function factorial(x) takes a single parameter x and returns x multiplied by the factorial of x-1. This recursive process will continue until it reaches the base case, which is x==1, where the function returns the value 1."}
{"instruction":"Write a procedure in Python to rectify misspelled words in a paragraph.","input":"\"My favarite flowers are rose and tulples\"","output":"import re\n\ndef fix_spelling(paragraph):\n    words = paragraph.split()\n    corrected_words = []\n    for word in words:\n        corrected_words.append(re.sub(r'[aeiou]',r'[aeiou]', word))\n \n    return \" \".join(corrected_words)\n\nprint(fix_spelling(\"My favarite flowers are rose and tulples\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a procedure in Python to rectify misspelled words in a paragraph.\n\n### Input:\n\"My favarite flowers are rose and tulples\"\n\n### Output:\nimport re\n\ndef fix_spelling(paragraph):\n    words = paragraph.split()\n    corrected_words = []\n    for word in words:\n        corrected_words.append(re.sub(r'[aeiou]',r'[aeiou]', word))\n \n    return \" \".join(corrected_words)\n\nprint(fix_spelling(\"My favarite flowers are rose and tulples\"))"}
{"instruction":"Create a linked list data structure in Python.","input":"Not applicable","output":"# Node class \nclass Node: \n    def __init__(self, data): \n        self.data = data  \n        self.next = None\n\n# LinkedList class \nclass LinkedList: \n    def __init__(self):  \n        self.head = None\n\n# Insert at the beginning of the list\n    def insert_at_beginning(self, data): \n        new_node = Node(data)\n        new_node.next = self.head \n        self.head = new_node\n\n# Insert at the end of the list\n    def insert_at_end(self, data): \n        new_node = Node(data) \n  \n        # If linked list is empty \n        if self.head is None: \n            self.head = new_node \n            return \n  \n        # Otherwise iterate to the last node\n        last = self.head \n        while (last.next): \n            last = last.next\n  \n        # Change the next of the last node \n        last.next =  new_node \n##\n13. Instruction: Develop a sorting algorithm to sort a list of words in alphabetical order.\n13. Input: \nNot applicable\n13. Output: \n# Function to sort the list of words\ndef sort_words(words):\n   # Split the words into letters\n   letters = [list(word) for word in words]\n\n   # Loop through the list of letters\n   for i in range(len(letters) - 1):\n      # Set min_idx to the current index \n      min_idx = i\n      # Check the rest of the list\n      for j in range(i + 1, len(letters)):\n         # Determine if the current letter comes before the letter in min_idx \n         if letters[j] < letters[min_idx]:\n            # Update the minimum index\n            min_idx = j\n      # Swap the minimums\n      letters[i], letters[min_idx] = letters[min_idx], letters[i]\n\n   # Re-combine the letters and join the words\n   sorted_words = []\n   for word in letters:\n      sorted_words.append(\"\".join(word))\n   return sorted_words","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a linked list data structure in Python.\n\n### Input:\nNot applicable\n\n### Output:\n# Node class \nclass Node: \n    def __init__(self, data): \n        self.data = data  \n        self.next = None\n\n# LinkedList class \nclass LinkedList: \n    def __init__(self):  \n        self.head = None\n\n# Insert at the beginning of the list\n    def insert_at_beginning(self, data): \n        new_node = Node(data)\n        new_node.next = self.head \n        self.head = new_node\n\n# Insert at the end of the list\n    def insert_at_end(self, data): \n        new_node = Node(data) \n  \n        # If linked list is empty \n        if self.head is None: \n            self.head = new_node \n            return \n  \n        # Otherwise iterate to the last node\n        last = self.head \n        while (last.next): \n            last = last.next\n  \n        # Change the next of the last node \n        last.next =  new_node \n##\n13. Instruction: Develop a sorting algorithm to sort a list of words in alphabetical order.\n13. Input: \nNot applicable\n13. Output: \n# Function to sort the list of words\ndef sort_words(words):\n   # Split the words into letters\n   letters = [list(word) for word in words]\n\n   # Loop through the list of letters\n   for i in range(len(letters) - 1):\n      # Set min_idx to the current index \n      min_idx = i\n      # Check the rest of the list\n      for j in range(i + 1, len(letters)):\n         # Determine if the current letter comes before the letter in min_idx \n         if letters[j] < letters[min_idx]:\n            # Update the minimum index\n            min_idx = j\n      # Swap the minimums\n      letters[i], letters[min_idx] = letters[min_idx], letters[i]\n\n   # Re-combine the letters and join the words\n   sorted_words = []\n   for word in letters:\n      sorted_words.append(\"\".join(word))\n   return sorted_words"}
{"instruction":"Create a Python class called 'Book' that stores an ISBN, title, author and publisher for a book.","input":"","output":"class Book:\n    def __init__(self, isbn, title, author, publisher):\n        self.isbn = isbn\n        self.title = title\n        self.author = author\n        self.publisher = publisher\n\n    def get_isbn(self):\n        return self.isbn\n\n    def get_title(self):\n        return self.title\n\n    def get_author(self):\n        return self.author\n\n    def get_publisher(self):\n        return self.publisher","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class called 'Book' that stores an ISBN, title, author and publisher for a book.\n\n### Input:\n\n\n### Output:\nclass Book:\n    def __init__(self, isbn, title, author, publisher):\n        self.isbn = isbn\n        self.title = title\n        self.author = author\n        self.publisher = publisher\n\n    def get_isbn(self):\n        return self.isbn\n\n    def get_title(self):\n        return self.title\n\n    def get_author(self):\n        return self.author\n\n    def get_publisher(self):\n        return self.publisher"}
{"instruction":"Create a Python script that makes an API call to Twitter and prints the last 10 tweets from a given account.","input":"The Twitter account should be @twitter","output":"import tweepy \n\n# enter your authentication details\nconsumer_key = 'YOUR CONSUMER KEY'\nconsumer_secret = 'YOUR CONSUMER SECRET'\naccess_token = 'YOUR ACCESS TOKEN'\naccess_token_secret = 'YOUR ACCESS TOKEN SECRET'\n \nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name = 'twitter', count = 10, tweet_mode=\"extended\", include_rts=False)\n\nfor tweet in tweets:\n print(tweet.full_text)\n print(\"-------------------------------\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that makes an API call to Twitter and prints the last 10 tweets from a given account.\n\n### Input:\nThe Twitter account should be @twitter\n\n### Output:\nimport tweepy \n\n# enter your authentication details\nconsumer_key = 'YOUR CONSUMER KEY'\nconsumer_secret = 'YOUR CONSUMER SECRET'\naccess_token = 'YOUR ACCESS TOKEN'\naccess_token_secret = 'YOUR ACCESS TOKEN SECRET'\n \nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name = 'twitter', count = 10, tweet_mode=\"extended\", include_rts=False)\n\nfor tweet in tweets:\n print(tweet.full_text)\n print(\"-------------------------------\")"}
{"instruction":"Create a class in Python for creating a binary search tree. The class should include methods for inserting a node, searching for a node, and deleting a node.","input":"Not applicable","output":"class Node:\n def __init__(self, data):\n  self.data = data\n  self.left = None\n  self.right = None\n\nclass BinarySearchTree:\n def __init__(self):\n  self.root = None\n\n # Insert a node \n def insert(self, data):\n  if self.root == None:\n   self.root = Node(data)\n  else:\n   self._insert(data, self.root)\n\n # Helper function for Node Insert\n def _insert(self, data, cur_node):\n  if data < cur_node.data: \n   if cur_node.left == None: \n    cur_node.left = Node(data) \n   else: \n    self._insert(data, cur_node.left)\n  elif data > cur_node.data: \n   if cur_node.right == None: \n    cur_node.right = Node(data) \n   else: \n    self._insert(data, cur_node.right) \n  else: \n   pass\n\n# Search a node\ndef search(self, data):\n if self.root != None:\n  return self._search(data, self.root)\n else:\n  return False\n\n# Helper function for Node Search\ndef _search(self, data, cur_node):\n if data > cur_node.data and cur_node.right != None:\n  return self._search(data, cur_node.right)\n elif data < cur_node.data and cur_node.left != None:\n  return self._search(data, cur_node.left)\n elif data == cur_node.data:\n  return True\n\n# Delete a node\ndef delete(self, data):\n if self.root == None:\n  print(\"The tree is empty\")\n  return\n\n# call the delete helper function \nself.root = self._delete(data, self.root)\n\n# Helper function for Node Delete\ndef _delete(self, data, cur_node):\n if cur_node:\n  if data > cur_node.data:\n   cur_node.right = self._delete(data, cur_node.right)\n  elif data < cur_node.data:\n   cur_node.left = self._delete(data, cur_node.left)\n  else:\n   # Node to be deleted is a leaf node\n   if not cur_node.right and not cur_node.left:\n    print(\"Deleting leaf node\")\n    cur_node = None\n    return cur_node\n\n# Node to be deleted has only one child\nif not cur_node.right:\n print(\"Deleting a Node with single left child\")\n cur_node = cur_node.left\n return cur_node\nelif not cur_node.left:\n print(\"Deleting a Node with single right child\")\n cur_node = cur_node.right\n return cur_node\n\n# Node to be deleted has two children\nprint(\"Deleting a Node with two children\")\ndel_node = cur_node\ncur_node = cur_node.right\nmin_node = self._min_value_node(cur_node)\ndel_node.data = min_node.data\ndel_node.right = self._delete(min_node.data, del_node.right)\nreturn del_node\n\ndef _min_value_node(self, cur_node):\n while cur_node.left is not None:\n  cur_node = cur_node.left\n return cur_node","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python for creating a binary search tree. The class should include methods for inserting a node, searching for a node, and deleting a node.\n\n### Input:\nNot applicable\n\n### Output:\nclass Node:\n def __init__(self, data):\n  self.data = data\n  self.left = None\n  self.right = None\n\nclass BinarySearchTree:\n def __init__(self):\n  self.root = None\n\n # Insert a node \n def insert(self, data):\n  if self.root == None:\n   self.root = Node(data)\n  else:\n   self._insert(data, self.root)\n\n # Helper function for Node Insert\n def _insert(self, data, cur_node):\n  if data < cur_node.data: \n   if cur_node.left == None: \n    cur_node.left = Node(data) \n   else: \n    self._insert(data, cur_node.left)\n  elif data > cur_node.data: \n   if cur_node.right == None: \n    cur_node.right = Node(data) \n   else: \n    self._insert(data, cur_node.right) \n  else: \n   pass\n\n# Search a node\ndef search(self, data):\n if self.root != None:\n  return self._search(data, self.root)\n else:\n  return False\n\n# Helper function for Node Search\ndef _search(self, data, cur_node):\n if data > cur_node.data and cur_node.right != None:\n  return self._search(data, cur_node.right)\n elif data < cur_node.data and cur_node.left != None:\n  return self._search(data, cur_node.left)\n elif data == cur_node.data:\n  return True\n\n# Delete a node\ndef delete(self, data):\n if self.root == None:\n  print(\"The tree is empty\")\n  return\n\n# call the delete helper function \nself.root = self._delete(data, self.root)\n\n# Helper function for Node Delete\ndef _delete(self, data, cur_node):\n if cur_node:\n  if data > cur_node.data:\n   cur_node.right = self._delete(data, cur_node.right)\n  elif data < cur_node.data:\n   cur_node.left = self._delete(data, cur_node.left)\n  else:\n   # Node to be deleted is a leaf node\n   if not cur_node.right and not cur_node.left:\n    print(\"Deleting leaf node\")\n    cur_node = None\n    return cur_node\n\n# Node to be deleted has only one child\nif not cur_node.right:\n print(\"Deleting a Node with single left child\")\n cur_node = cur_node.left\n return cur_node\nelif not cur_node.left:\n print(\"Deleting a Node with single right child\")\n cur_node = cur_node.right\n return cur_node\n\n# Node to be deleted has two children\nprint(\"Deleting a Node with two children\")\ndel_node = cur_node\ncur_node = cur_node.right\nmin_node = self._min_value_node(cur_node)\ndel_node.data = min_node.data\ndel_node.right = self._delete(min_node.data, del_node.right)\nreturn del_node\n\ndef _min_value_node(self, cur_node):\n while cur_node.left is not None:\n  cur_node = cur_node.left\n return cur_node"}
{"instruction":"Create a Python program to open the user's default web browser with the given URL as an argument.","input":"www.example.com","output":"import webbrowser\n\nurl = 'www.example.com'\nwebbrowser.open_new(url)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to open the user's default web browser with the given URL as an argument.\n\n### Input:\nwww.example.com\n\n### Output:\nimport webbrowser\n\nurl = 'www.example.com'\nwebbrowser.open_new(url)"}
{"instruction":"Develop a REST API endpoint in Python to return a user's profile information from a database.","input":"","output":"@app.route('\/api\/profile', methods=['GET'])\ndef get_user_profile():\n    user_id = request.args.get('user_id')\n    user = User.query.filter_by(id=user_id).first_or_404()\n    return jsonify({\n        'username': user.username,\n        'name': user.name,\n        'email': user.email\n    })","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a REST API endpoint in Python to return a user's profile information from a database.\n\n### Input:\n\n\n### Output:\n@app.route('\/api\/profile', methods=['GET'])\ndef get_user_profile():\n    user_id = request.args.get('user_id')\n    user = User.query.filter_by(id=user_id).first_or_404()\n    return jsonify({\n        'username': user.username,\n        'name': user.name,\n        'email': user.email\n    })"}
{"instruction":"Create a Python program to extract Summary statistics for a data set.","input":"a dataset containing several features and numeric values","output":"import pandas as pd\nimport numpy as np\n\ncsv_file = 'data.csv'\n\n# Read CSV file\ndf = pd.read_csv(csv_file)\n\n# Calculate summary statistics\ncount = df.count()\nmean = df.mean()\nstd = df.std()\nmin = df.min()\nmax = df.max()\nquantiles = df.quantile([0.25, 0.5, 0.75])\n\n# Print out summary statistics\nprint('Count: ', count)\nprint('Mean: ', mean)\nprint('Standard Deviation: ', std)\nprint('Minimum: ', min)\nprint('Maximum: ', max)\nprint('Quantiles: ', quantiles)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to extract Summary statistics for a data set.\n\n### Input:\na dataset containing several features and numeric values\n\n### Output:\nimport pandas as pd\nimport numpy as np\n\ncsv_file = 'data.csv'\n\n# Read CSV file\ndf = pd.read_csv(csv_file)\n\n# Calculate summary statistics\ncount = df.count()\nmean = df.mean()\nstd = df.std()\nmin = df.min()\nmax = df.max()\nquantiles = df.quantile([0.25, 0.5, 0.75])\n\n# Print out summary statistics\nprint('Count: ', count)\nprint('Mean: ', mean)\nprint('Standard Deviation: ', std)\nprint('Minimum: ', min)\nprint('Maximum: ', max)\nprint('Quantiles: ', quantiles)"}
{"instruction":"Generate a function in Python that takes in a list of integers and a target sum, it should return all the unique pairs of numbers in the list that add up to the target sum.","input":"[2, 3, 5, 7], 10","output":"def findPairs(nums, t_sum):\n    '''Function to find all the unique pairs of numbers \n    that add up to the target sum.'''\n    num_set = set(nums)\n    found_pairs = []\n    for num in nums:\n        if (t_sum - num) in num_set:\n            found_pair = (min(num, t_sum - num), max(num, t_sum - num))\n            if found_pair not in found_pairs:\n                found_pairs.append(found_pair)\n    return found_pairs\n    \nnums = [2, 3, 5, 7]\nt_sum = 10\nprint(findPairs(nums, t_sum))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python that takes in a list of integers and a target sum, it should return all the unique pairs of numbers in the list that add up to the target sum.\n\n### Input:\n[2, 3, 5, 7], 10\n\n### Output:\ndef findPairs(nums, t_sum):\n    '''Function to find all the unique pairs of numbers \n    that add up to the target sum.'''\n    num_set = set(nums)\n    found_pairs = []\n    for num in nums:\n        if (t_sum - num) in num_set:\n            found_pair = (min(num, t_sum - num), max(num, t_sum - num))\n            if found_pair not in found_pairs:\n                found_pairs.append(found_pair)\n    return found_pairs\n    \nnums = [2, 3, 5, 7]\nt_sum = 10\nprint(findPairs(nums, t_sum))"}
{"instruction":"Design a function in Python that takes two strings as parameters and combines them into a new string.","input":"String1: \"Hello\"\nString2: \"World\"","output":"def combine_strings(string1, string2):\n    return string1 + \" \" + string2\n\ncombined_string = combine_strings(\"Hello\", \"World\")\nprint(combined_string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python that takes two strings as parameters and combines them into a new string.\n\n### Input:\nString1: \"Hello\"\nString2: \"World\"\n\n### Output:\ndef combine_strings(string1, string2):\n    return string1 + \" \" + string2\n\ncombined_string = combine_strings(\"Hello\", \"World\")\nprint(combined_string)"}
{"instruction":"Design an algorithm in Python which takes an array as an input and sorts them in ascending order using selection sort.","input":"[76, 25, 16, 15, 88]","output":"def selection_sort(arr): \n\tfor i in range(len(arr)):   \n\t\tmin_idx = i \n\t\tfor j in range(i+1, len(arr)): \n\t\t\tif arr[min_idx] > arr[j]: \n\t\t\t\tmin_idx = j \n\t\tarr[i], arr[min_idx] = arr[min_idx], arr[i]\n\narr = [76, 25, 16, 15, 88]\nselection_sort(arr)\nprint(\"Sorted array:\", arr) # [15, 16, 25, 76, 88]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python which takes an array as an input and sorts them in ascending order using selection sort.\n\n### Input:\n[76, 25, 16, 15, 88]\n\n### Output:\ndef selection_sort(arr): \n\tfor i in range(len(arr)):   \n\t\tmin_idx = i \n\t\tfor j in range(i+1, len(arr)): \n\t\t\tif arr[min_idx] > arr[j]: \n\t\t\t\tmin_idx = j \n\t\tarr[i], arr[min_idx] = arr[min_idx], arr[i]\n\narr = [76, 25, 16, 15, 88]\nselection_sort(arr)\nprint(\"Sorted array:\", arr) # [15, 16, 25, 76, 88]"}
{"instruction":"Develop a function in Python for analyzing a given text and generating a statistical report for finding the word frequencies in the text.","input":"","output":"def generate_freq_report(text):\n    words = {} # to store the word frequencies\n    text = text.lower()\n    text = text.replace('\\n', ' ')\n    text = text.split(' ')\n    for word in text:\n        if word in words:\n            words[word] += 1\n        else:\n            words[word] = 1\n    return words","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python for analyzing a given text and generating a statistical report for finding the word frequencies in the text.\n\n### Input:\n\n\n### Output:\ndef generate_freq_report(text):\n    words = {} # to store the word frequencies\n    text = text.lower()\n    text = text.replace('\\n', ' ')\n    text = text.split(' ')\n    for word in text:\n        if word in words:\n            words[word] += 1\n        else:\n            words[word] = 1\n    return words"}
{"instruction":"Write a Python code to implement a recursive binary search algorithm on a predefined sorted list.","input":"","output":"def binarySearch(arr, start, end, x): \n    if end >= start:  \n        mid = start + (end - start) \/\/ 2 \n        if arr[mid] == x: \n            return mid  \n        elif arr[mid] > x: \n            return binarySearch(arr, start, mid - 1, x)  \n        else: \n            return binarySearch(arr, mid + 1, end, x)  \n    else: \n        return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to implement a recursive binary search algorithm on a predefined sorted list.\n\n### Input:\n\n\n### Output:\ndef binarySearch(arr, start, end, x): \n    if end >= start:  \n        mid = start + (end - start) \/\/ 2 \n        if arr[mid] == x: \n            return mid  \n        elif arr[mid] > x: \n            return binarySearch(arr, start, mid - 1, x)  \n        else: \n            return binarySearch(arr, mid + 1, end, x)  \n    else: \n        return -1"}
{"instruction":"Write a function in Python which takes in a list of numbers and returns the most common element in the list.","input":"mylist = [3, 8, 8, 2, 4]","output":"def most_common(mylist):\n    return max(set(mylist), key = mylist.count)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python which takes in a list of numbers and returns the most common element in the list.\n\n### Input:\nmylist = [3, 8, 8, 2, 4]\n\n### Output:\ndef most_common(mylist):\n    return max(set(mylist), key = mylist.count)"}
{"instruction":"Write a Python program to generate a password of length 10 containing lowercase letters, uppercase letters, and numbers.","input":"","output":"import string\nimport random\n\ndef generate_password():\n    letters = string.ascii_letters + string.digits\n    password = ''.join(random.choice(letters) for i in range(10))\n    return password\n\nprint(generate_password())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a password of length 10 containing lowercase letters, uppercase letters, and numbers.\n\n### Input:\n\n\n### Output:\nimport string\nimport random\n\ndef generate_password():\n    letters = string.ascii_letters + string.digits\n    password = ''.join(random.choice(letters) for i in range(10))\n    return password\n\nprint(generate_password())"}
{"instruction":"Write a Python program to get the size of an object in bytes","input":"","output":"import sys\n\ndef get_object_size(obj):\n    #Return the size of the object in bytes\n    return sys.getsizeof(obj)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to get the size of an object in bytes\n\n### Input:\n\n\n### Output:\nimport sys\n\ndef get_object_size(obj):\n    #Return the size of the object in bytes\n    return sys.getsizeof(obj)"}
{"instruction":"Find the most common letter in a string and write a Python program to count its occurrences.","input":"\"abbabbccabbc\"","output":"from collections import Counter\n\ndef findMostCommonLetter(s):\n    letters = Counter(s)\n    most_common = letters.most_common(1)\n    return most_common[0][0]\n\ndef countOccurences(s, c):\n    cnt = 0\n    for letter in s:\n        if letter == c:\n            cnt += 1\n    return cnt\n\nmost_common = findMostCommonLetter(\"abbabbccabbc\")\nocc = countOccurences(\"abbabbccabbc\", most_common)\n\nprint(\"Most common letter: \" + most_common)\nprint(\"Occurrences: \" + str(occ))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the most common letter in a string and write a Python program to count its occurrences.\n\n### Input:\n\"abbabbccabbc\"\n\n### Output:\nfrom collections import Counter\n\ndef findMostCommonLetter(s):\n    letters = Counter(s)\n    most_common = letters.most_common(1)\n    return most_common[0][0]\n\ndef countOccurences(s, c):\n    cnt = 0\n    for letter in s:\n        if letter == c:\n            cnt += 1\n    return cnt\n\nmost_common = findMostCommonLetter(\"abbabbccabbc\")\nocc = countOccurences(\"abbabbccabbc\", most_common)\n\nprint(\"Most common letter: \" + most_common)\nprint(\"Occurrences: \" + str(occ))"}
{"instruction":"Create a command line calculator using Python","input":"","output":"import sys\n\ndef calculator():\n    while True:\n        try:\n            expression = input('> ')\n            result = eval(expression)\n            print(result)\n        except (SyntaxError, NameError):\n            pass\n        except (KeyboardInterrupt, EOFError):\n            print('\\nBye!')\n            sys.exit()\n\nif __name__ == '__main__':\n    calculator()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a command line calculator using Python\n\n### Input:\n\n\n### Output:\nimport sys\n\ndef calculator():\n    while True:\n        try:\n            expression = input('> ')\n            result = eval(expression)\n            print(result)\n        except (SyntaxError, NameError):\n            pass\n        except (KeyboardInterrupt, EOFError):\n            print('\\nBye!')\n            sys.exit()\n\nif __name__ == '__main__':\n    calculator()"}
{"instruction":"Generate a python script to perform this action.","input":"Given a string, remove all the consecutive duplicates from the string.\n\nInput: \"AAABBCCCD\"","output":"def remove_duplicates(string): \n    result = \"\" \n    prev = '' \n\n    for char in string:\n        if char != prev: \n            result += char\n            prev = char\n    return result\n\nresult = remove_duplicates(\"AAABBCCCD\")\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python script to perform this action.\n\n### Input:\nGiven a string, remove all the consecutive duplicates from the string.\n\nInput: \"AAABBCCCD\"\n\n### Output:\ndef remove_duplicates(string): \n    result = \"\" \n    prev = '' \n\n    for char in string:\n        if char != prev: \n            result += char\n            prev = char\n    return result\n\nresult = remove_duplicates(\"AAABBCCCD\")\nprint(result)"}
{"instruction":"Create a web crawler in Python that visits pages from a given list of URLs and extracts hyperlinks contained in each page","input":"URL1: https:\/\/www.example1.com\nURL2: https:\/\/www.example2.com","output":"import requests\nfrom bs4 import BeautifulSoup\n\n# The list of URLs\nurls = [\n    'https:\/\/www.example1.com',\n    'https:\/\/www.example2.com'\n]\n\n# Iterate through each URL\nfor url in urls:\n    # Connect to the URL\n    response = requests.get(url)\n\n    # Parse HTML and save to BeautifulSoup object\u00b6\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    # Extract all the hyperlinks\n    links = soup.find_all('a')\n\n    # Print out the link\n    for link in links:\n        print(link['href'])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web crawler in Python that visits pages from a given list of URLs and extracts hyperlinks contained in each page\n\n### Input:\nURL1: https:\/\/www.example1.com\nURL2: https:\/\/www.example2.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# The list of URLs\nurls = [\n    'https:\/\/www.example1.com',\n    'https:\/\/www.example2.com'\n]\n\n# Iterate through each URL\nfor url in urls:\n    # Connect to the URL\n    response = requests.get(url)\n\n    # Parse HTML and save to BeautifulSoup object\u00b6\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    # Extract all the hyperlinks\n    links = soup.find_all('a')\n\n    # Print out the link\n    for link in links:\n        print(link['href'])"}
{"instruction":"Design a program in Python that prints out characters of the alphabet A-Z in reverse order.","input":"","output":"import string\n\nalphabet = string.ascii_uppercase\n\nfor letter in alphabet[::-1]:\n    print(letter)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python that prints out characters of the alphabet A-Z in reverse order.\n\n### Input:\n\n\n### Output:\nimport string\n\nalphabet = string.ascii_uppercase\n\nfor letter in alphabet[::-1]:\n    print(letter)"}
{"instruction":"Write a Python program to test if the inputs are equal and return a boolean value.","input":"28, 48","output":"def equals(a, b):\n    return a == b\n\nequal = equals(28, 48)\nprint(equal)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to test if the inputs are equal and return a boolean value.\n\n### Input:\n28, 48\n\n### Output:\ndef equals(a, b):\n    return a == b\n\nequal = equals(28, 48)\nprint(equal)"}
{"instruction":"Write a Python program to convert a given temperature from Celsius to Fahrenheit using a given formula.","input":"Temperature in Celsius: 30","output":"def celsius_to_fahrenheit(celsius):\n fahrenheit = (celsius * 9\/5) + 32\n return fahrenheit\n\ncelsius_to_fahrenheit(30) # returns 86.0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a given temperature from Celsius to Fahrenheit using a given formula.\n\n### Input:\nTemperature in Celsius: 30\n\n### Output:\ndef celsius_to_fahrenheit(celsius):\n fahrenheit = (celsius * 9\/5) + 32\n return fahrenheit\n\ncelsius_to_fahrenheit(30) # returns 86.0"}
{"instruction":"Write a python program to print a frequency table of the data in a two-dimensional array","input":"data = [[6, 2, 8], [9, 5, 6], [4, 5, 2]]","output":"def print_freq_table(data):\n    row_count = len(data)\n    col_count = len(data[0]) \n    freq_table = [[0] * col_count for i in range(row_count)]\n\n    for i in range(row_count):\n        for j in range(col_count):\n            freq_table[i][j] = data[i][j] * 100 \/ sum([data[k][j] for k in range(row_count)]) \n\n    for i in range(row_count): \n        for j in range(col_count): \n            print('%d : %.2f' %(data[i][j], freq_table[i][j]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to print a frequency table of the data in a two-dimensional array\n\n### Input:\ndata = [[6, 2, 8], [9, 5, 6], [4, 5, 2]]\n\n### Output:\ndef print_freq_table(data):\n    row_count = len(data)\n    col_count = len(data[0]) \n    freq_table = [[0] * col_count for i in range(row_count)]\n\n    for i in range(row_count):\n        for j in range(col_count):\n            freq_table[i][j] = data[i][j] * 100 \/ sum([data[k][j] for k in range(row_count)]) \n\n    for i in range(row_count): \n        for j in range(col_count): \n            print('%d : %.2f' %(data[i][j], freq_table[i][j]))"}
{"instruction":"Create a Python program that will take an array of integers as input and output a reversed version of the array.","input":"[1,2,3,4,5]","output":"def reverseArray(arr): \n    return arr[::-1] \n  \narr = [1,2,3,4,5] \nreverseArr = reverseArray(arr) \n  \nprint(\"Reversed array is\", reverseArr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that will take an array of integers as input and output a reversed version of the array.\n\n### Input:\n[1,2,3,4,5]\n\n### Output:\ndef reverseArray(arr): \n    return arr[::-1] \n  \narr = [1,2,3,4,5] \nreverseArr = reverseArray(arr) \n  \nprint(\"Reversed array is\", reverseArr)"}
{"instruction":"Design an automation system using Python that can receive sensor data and respond with different actions.","input":"The sensor data should involve temperature and humidity readings.","output":"import time\nimport random\n\ndef check_sensors():\n    # Get temperature and humidity from sensors\n    temperature = random.randint(20,30)\n    humidity = random.randint(40,60)\n\n    # Decide if the temperature\/humidity is within range\n    if (temperature <= 30 and humidity <= 60):\n        # Temperature is ok, but humidity is high\n        if temperature <= 25:\n            # Low temperature, adjust heater\n            adjust_heater()\n        else:\n            # High humidity, adjust dehumidifier\n            adjust_dehumidifier()\n    else:\n        # Temperature or humidity is out of range, shut down the system\n        shut_down_system()\n\ndef adjust_heater():\n    print(\"Heater is being adjusted.\")\n\ndef adjust_dehumidifier():\n    print(\"Dehumidifier is being adjusted.\")\n\ndef shut_down_system():\n    print(\"System is shutting down.\")\n\nwhile True:\n    # Check sensors every 10 seconds\n    check_sensors()\n    time.sleep(10)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an automation system using Python that can receive sensor data and respond with different actions.\n\n### Input:\nThe sensor data should involve temperature and humidity readings.\n\n### Output:\nimport time\nimport random\n\ndef check_sensors():\n    # Get temperature and humidity from sensors\n    temperature = random.randint(20,30)\n    humidity = random.randint(40,60)\n\n    # Decide if the temperature\/humidity is within range\n    if (temperature <= 30 and humidity <= 60):\n        # Temperature is ok, but humidity is high\n        if temperature <= 25:\n            # Low temperature, adjust heater\n            adjust_heater()\n        else:\n            # High humidity, adjust dehumidifier\n            adjust_dehumidifier()\n    else:\n        # Temperature or humidity is out of range, shut down the system\n        shut_down_system()\n\ndef adjust_heater():\n    print(\"Heater is being adjusted.\")\n\ndef adjust_dehumidifier():\n    print(\"Dehumidifier is being adjusted.\")\n\ndef shut_down_system():\n    print(\"System is shutting down.\")\n\nwhile True:\n    # Check sensors every 10 seconds\n    check_sensors()\n    time.sleep(10)"}
{"instruction":"Create a RESTful API in Python that exposes a content to be consumed by other applications.","input":"","output":"from flask import Flask, jsonify\n \napp = Flask(__name__)\n\n@app.route('\/content', methods=['GET'])\ndef get_content():\n    content = {'data': 'This is the content that will be exposed.'}\n    return jsonify(content)\n\nif __name__ == \"__main__\":\n    app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a RESTful API in Python that exposes a content to be consumed by other applications.\n\n### Input:\n\n\n### Output:\nfrom flask import Flask, jsonify\n \napp = Flask(__name__)\n\n@app.route('\/content', methods=['GET'])\ndef get_content():\n    content = {'data': 'This is the content that will be exposed.'}\n    return jsonify(content)\n\nif __name__ == \"__main__\":\n    app.run()"}
{"instruction":"Create a program in Python to sum the multiples of 3 or 5 between 1 and 1000","input":"","output":"total = 0\n\nfor i in range(1,1000):\n    if i % 3 == 0 or i % 5 == 0:\n        total += i\n\nprint(total)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to sum the multiples of 3 or 5 between 1 and 1000\n\n### Input:\n\n\n### Output:\ntotal = 0\n\nfor i in range(1,1000):\n    if i % 3 == 0 or i % 5 == 0:\n        total += i\n\nprint(total)"}
{"instruction":"Write a function in Python that takes in two strings of the same length and returns the number of different characters in the two strings.","input":"str1 = \"data\"\nstr2 = \"muta\"","output":"def diff_char(str1, str2):\n count = 0\n for i in range(len(str1)):\n if str1[i] != str2[i]:\n count += 1\n return count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes in two strings of the same length and returns the number of different characters in the two strings.\n\n### Input:\nstr1 = \"data\"\nstr2 = \"muta\"\n\n### Output:\ndef diff_char(str1, str2):\n count = 0\n for i in range(len(str1)):\n if str1[i] != str2[i]:\n count += 1\n return count"}
{"instruction":"Compose an editor program, in Python code, to remove all the duplicate words from a given sentence.","input":"sentence = \"This is a a random sentence with with repeated words\"","output":"def remove_duplicates(sentence): \n    words = sentence.split() \n    words_without_duplicates = [] \n    for i in words: \n        if i not in words_without_duplicates: \n            words_without_duplicates.append(i) \n  \n    return \" \".join(words_without_duplicates)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose an editor program, in Python code, to remove all the duplicate words from a given sentence.\n\n### Input:\nsentence = \"This is a a random sentence with with repeated words\"\n\n### Output:\ndef remove_duplicates(sentence): \n    words = sentence.split() \n    words_without_duplicates = [] \n    for i in words: \n        if i not in words_without_duplicates: \n            words_without_duplicates.append(i) \n  \n    return \" \".join(words_without_duplicates)"}
{"instruction":"Edit the following python code such that the functions provide the stated output","input":"def func1(a):\n    return a**2\n\ndef func2(a):\n    return a+1","output":"def func1(a):\n    return a**2\n\ndef func2(a):\n    return a**2 + 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following python code such that the functions provide the stated output\n\n### Input:\ndef func1(a):\n    return a**2\n\ndef func2(a):\n    return a+1\n\n### Output:\ndef func1(a):\n    return a**2\n\ndef func2(a):\n    return a**2 + 1"}
{"instruction":"Generate an array with 20 random unique numbers from 1 to 100 in Python.","input":"","output":"import random\n\nrandom_numbers = []\n\nwhile len(random_numbers) < 20:\n    n = random.randint(1, 100)\n    if n not in random_numbers:\n        random_numbers.append(n)\n\nprint(random_numbers)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an array with 20 random unique numbers from 1 to 100 in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\nrandom_numbers = []\n\nwhile len(random_numbers) < 20:\n    n = random.randint(1, 100)\n    if n not in random_numbers:\n        random_numbers.append(n)\n\nprint(random_numbers)"}
{"instruction":"Given a list of numbers in an array, use the Python slice operator to return the last five elements of the array.","input":"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","output":"a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nb = a[-5:]\nprint(b)  # [6, 7, 8, 9, 10]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers in an array, use the Python slice operator to return the last five elements of the array.\n\n### Input:\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n### Output:\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nb = a[-5:]\nprint(b)  # [6, 7, 8, 9, 10]"}
{"instruction":"Create an API endpoint with the Flask framework in Python to query a database of movies. The endpoint should be able to respond with results when queried with the title of a movie, the language it was made in, and the year it was released.","input":"Not applicable","output":"from flask import Flask, request\nimport sqlite3\n\napp = Flask(name)\n\nconn = sqlite3.connect('movies.db')\ncur = conn.cursor()\n\n@app.route('\/api\/movies', methods=['GET'])\ndef get_movie():\n title = request.args.get('title')\n language = request.args.get('language')\n year = request.args.get('year')\n \n query = 'SELECT * FROM movies WHERE title=' + title + ' AND language=' + language + ' AND year=' + year\n cur.execute(query)\n result = cur.fetchone()\n \n if not result:\n return {'error': 'No movie found for given parameters.'}, 400\n \n return {\n 'title': result[0],\n 'language': result[1],\n 'year': result[2]\n }\n\nif name == 'main':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API endpoint with the Flask framework in Python to query a database of movies. The endpoint should be able to respond with results when queried with the title of a movie, the language it was made in, and the year it was released.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request\nimport sqlite3\n\napp = Flask(name)\n\nconn = sqlite3.connect('movies.db')\ncur = conn.cursor()\n\n@app.route('\/api\/movies', methods=['GET'])\ndef get_movie():\n title = request.args.get('title')\n language = request.args.get('language')\n year = request.args.get('year')\n \n query = 'SELECT * FROM movies WHERE title=' + title + ' AND language=' + language + ' AND year=' + year\n cur.execute(query)\n result = cur.fetchone()\n \n if not result:\n return {'error': 'No movie found for given parameters.'}, 400\n \n return {\n 'title': result[0],\n 'language': result[1],\n 'year': result[2]\n }\n\nif name == 'main':\n app.run(debug=True)"}
{"instruction":"Edit this Python function to return the result with two decimal points.","input":"def area_of_circle(radius):\n    return 3.14 * radius * radius","output":"def area_of_circle(radius):\n    return round(3.14 * radius * radius, 2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit this Python function to return the result with two decimal points.\n\n### Input:\ndef area_of_circle(radius):\n    return 3.14 * radius * radius\n\n### Output:\ndef area_of_circle(radius):\n    return round(3.14 * radius * radius, 2)"}
{"instruction":"Create a Python script for generating a random password of length 8.","input":"Not applicable","output":"import string\nimport random\n \ndef generatePassword(length):\n \n chars = string.ascii_lowercase + string.ascii_uppercase + string.digits\n password = ''.join(random.choice(chars) for i in range(length))\n  \n return password\n \nrandomPassword = generatePassword(8)\nprint(randomPassword)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for generating a random password of length 8.\n\n### Input:\nNot applicable\n\n### Output:\nimport string\nimport random\n \ndef generatePassword(length):\n \n chars = string.ascii_lowercase + string.ascii_uppercase + string.digits\n password = ''.join(random.choice(chars) for i in range(length))\n  \n return password\n \nrandomPassword = generatePassword(8)\nprint(randomPassword)"}
{"instruction":"Create a python program to display a histogram of the list items.","input":"[1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9]","output":"import matplotlib.pyplot as plt\n\nlist_data = [1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9] \nplt.hist(list_data, bins=6) \nplt.title(\"Histogram\") \nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to display a histogram of the list items.\n\n### Input:\n[1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9]\n\n### Output:\nimport matplotlib.pyplot as plt\n\nlist_data = [1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9] \nplt.hist(list_data, bins=6) \nplt.title(\"Histogram\") \nplt.show()"}
{"instruction":"Write a function in Python to compute the nth Fibonacci number.","input":"8","output":"def fibonacciNum(n): \n    if n <= 1: \n        return n \n    else: \n        return (fibonacciNum(n-1) + fibonacciNum(n-2)) \n\nn = 8\nresult = fibonacciNum(n) \nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to compute the nth Fibonacci number.\n\n### Input:\n8\n\n### Output:\ndef fibonacciNum(n): \n    if n <= 1: \n        return n \n    else: \n        return (fibonacciNum(n-1) + fibonacciNum(n-2)) \n\nn = 8\nresult = fibonacciNum(n) \nprint(result)"}
{"instruction":"Write a Python program to detect out-of-range values in a given column of a data set.","input":"column = \"Salary\"\ndataset = {\n \"John\": {\"Salary\": 75000, \"Age\": 30},\n \"Sam\": {\"Salary\": 90000, \"Age\": 45},\n \"Jill\": {\"Salary\": 120000, \"Age\": 25},\n \"Thomas\": {\"Salary\": 80000, \"Age\": 40}\n}","output":"for row in dataset.values():\n salary = row['Salary']\n if salary < 40000 or salary > 100000:\n print(\"Out-of-range value: {}\".format(salary))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to detect out-of-range values in a given column of a data set.\n\n### Input:\ncolumn = \"Salary\"\ndataset = {\n \"John\": {\"Salary\": 75000, \"Age\": 30},\n \"Sam\": {\"Salary\": 90000, \"Age\": 45},\n \"Jill\": {\"Salary\": 120000, \"Age\": 25},\n \"Thomas\": {\"Salary\": 80000, \"Age\": 40}\n}\n\n### Output:\nfor row in dataset.values():\n salary = row['Salary']\n if salary < 40000 or salary > 100000:\n print(\"Out-of-range value: {}\".format(salary))"}
{"instruction":"Write a Python program that takes two strings as input and returns a list of all the words that appear in both strings.","input":"string1 = \"This is a string of text\"\nstring2 = \"This text is also a string\"","output":"string1 = \"This is a string of text\"\nstring2 = \"This text is also a string\"\n\ndef find_words_in_both(s1, s2):\n    list1 = s1.split()\n    list2 = s2.split()\n    result = []\n    for word1 in list1:\n        for word2 in list2:\n            if word1 == word2:\n                result.append(word1)\n    return result\n\nprint(find_words_in_both(string1, string2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes two strings as input and returns a list of all the words that appear in both strings.\n\n### Input:\nstring1 = \"This is a string of text\"\nstring2 = \"This text is also a string\"\n\n### Output:\nstring1 = \"This is a string of text\"\nstring2 = \"This text is also a string\"\n\ndef find_words_in_both(s1, s2):\n    list1 = s1.split()\n    list2 = s2.split()\n    result = []\n    for word1 in list1:\n        for word2 in list2:\n            if word1 == word2:\n                result.append(word1)\n    return result\n\nprint(find_words_in_both(string1, string2))"}
{"instruction":"Generate a Python function that checks to see if a given string is a palindrome.","input":"Input: madam","output":"def is_palindrome(str):\n    reversed_str = \"\"\n    for i in range(len(str) - 1, -1, -1): \n        reversed_str += str[i]\n\n    if str == reversed_str: \n        return True\n    else: \n        return False\n\nstring = \"madam\"\nresult = is_palindrome(string)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that checks to see if a given string is a palindrome.\n\n### Input:\nInput: madam\n\n### Output:\ndef is_palindrome(str):\n    reversed_str = \"\"\n    for i in range(len(str) - 1, -1, -1): \n        reversed_str += str[i]\n\n    if str == reversed_str: \n        return True\n    else: \n        return False\n\nstring = \"madam\"\nresult = is_palindrome(string)\nprint(result)"}
{"instruction":"Generate a Python program to calculate the maximum possible sum of a sub-array in an array of integers.","input":"A list of integers [-2, 4, -1, 5, 6]","output":"def max_subarray_sum(arr):\n    current_sum = 0\n    max_sum = 0\n\n    for x in arr:\n        current_sum += x\n        if current_sum < 0:\n            current_sum = 0\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n\nresult = max_subarray_sum([-2, 4, -1, 5, 6])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to calculate the maximum possible sum of a sub-array in an array of integers.\n\n### Input:\nA list of integers [-2, 4, -1, 5, 6]\n\n### Output:\ndef max_subarray_sum(arr):\n    current_sum = 0\n    max_sum = 0\n\n    for x in arr:\n        current_sum += x\n        if current_sum < 0:\n            current_sum = 0\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n\nresult = max_subarray_sum([-2, 4, -1, 5, 6])\nprint(result)"}
{"instruction":"Write a Python program that takes in an email address, checks it is valid and then prints the domain.","input":"email = \"test@example.com\"","output":"import re \n  \ndef validate_email(email): \n  \n    regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n  \n    if(re.search(regex,email)):  \n        domain = email.split('@')[1] \n        print(\"Domain name:\", domain)      \n    else:  \n        print(\"Invalid Email\")  \n  \n  \nemail = \"test@example.com\"\nvalidate_email(email)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes in an email address, checks it is valid and then prints the domain.\n\n### Input:\nemail = \"test@example.com\"\n\n### Output:\nimport re \n  \ndef validate_email(email): \n  \n    regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n  \n    if(re.search(regex,email)):  \n        domain = email.split('@')[1] \n        print(\"Domain name:\", domain)      \n    else:  \n        print(\"Invalid Email\")  \n  \n  \nemail = \"test@example.com\"\nvalidate_email(email)"}
{"instruction":"Create a function in Python to calculate the total cost after applying a discount. The function should accept the original cost and the discount percentage as arguments.","input":"original cost = 100\ndiscount percentage = 25","output":"def calculate_discounted_cost(cost, discount_percentage):\n discounted_cost = cost - (cost * (discount_percentage\/100))\n return discounted_cost\n\ndiscounted_cost = calculate_discounted_cost(100, 25)\nprint ('The discounted cost is: ', discounted_cost)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to calculate the total cost after applying a discount. The function should accept the original cost and the discount percentage as arguments.\n\n### Input:\noriginal cost = 100\ndiscount percentage = 25\n\n### Output:\ndef calculate_discounted_cost(cost, discount_percentage):\n discounted_cost = cost - (cost * (discount_percentage\/100))\n return discounted_cost\n\ndiscounted_cost = calculate_discounted_cost(100, 25)\nprint ('The discounted cost is: ', discounted_cost)"}
{"instruction":"Create a Python script that includes a function that returns the sum of the first n prime numbers.","input":"n = 5","output":"import math\n \ndef is_prime(num):\n    # Check if the number is 1 or less than 1\n    if num <= 1:\n        return False\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n \ndef sum_primes(n):\n    prime_sum = 0\n    count = 0\n \n    i = 2\n    while count < n:\n        if is_prime(i):\n            prime_sum += i\n            count += 1\n        i += 1\n \n    return prime_sum\n\nsum_primes(n)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that includes a function that returns the sum of the first n prime numbers.\n\n### Input:\nn = 5\n\n### Output:\nimport math\n \ndef is_prime(num):\n    # Check if the number is 1 or less than 1\n    if num <= 1:\n        return False\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n \ndef sum_primes(n):\n    prime_sum = 0\n    count = 0\n \n    i = 2\n    while count < n:\n        if is_prime(i):\n            prime_sum += i\n            count += 1\n        i += 1\n \n    return prime_sum\n\nsum_primes(n)"}
{"instruction":"Generate a Python program to generate a list of all the prime numbers in given range [n,m], where n and m are input parameters.","input":"n = 5, m = 20","output":"def generatePrimes(n, m):\n  primes = []\n  for i in range(n, m + 1):\n    isPrime = True\n    for j in range(2,i):\n      if i % j == 0:\n        isPrime = False\n        break\n    \n    if isPrime:\n      primes.append(i)\n  \n  return primes\n  \nn = 5\nm = 20\nprimes = generatePrimes(n, m)\nprint(primes)  #Output: [5, 7, 11, 13, 17, 19]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to generate a list of all the prime numbers in given range [n,m], where n and m are input parameters.\n\n### Input:\nn = 5, m = 20\n\n### Output:\ndef generatePrimes(n, m):\n  primes = []\n  for i in range(n, m + 1):\n    isPrime = True\n    for j in range(2,i):\n      if i % j == 0:\n        isPrime = False\n        break\n    \n    if isPrime:\n      primes.append(i)\n  \n  return primes\n  \nn = 5\nm = 20\nprimes = generatePrimes(n, m)\nprint(primes)  #Output: [5, 7, 11, 13, 17, 19]"}
{"instruction":"Write an algorithm in Python to find the minimum number of coins required to get a desired amount of money.","input":"[1, 2, 5], 11","output":"def min_coins(coins, amount): \n    # Sort the coins in descending order\n    coins.sort(reverse = True)  \n    \n    # Initialize the array to store the number of coins needed\n    result = [] \n      \n    # Iterate through all the coins and calculate the number of coins needed to fulfill the amount\n    for i in coins: \n        while amount >= i: \n            amount -= i \n            result.append(i)\n              \n    # Return the number of coins needed\n    print(len(result))\n    \ncoins = [1, 2, 5]\namount = 11\nmin_coins(coins, amount)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to find the minimum number of coins required to get a desired amount of money.\n\n### Input:\n[1, 2, 5], 11\n\n### Output:\ndef min_coins(coins, amount): \n    # Sort the coins in descending order\n    coins.sort(reverse = True)  \n    \n    # Initialize the array to store the number of coins needed\n    result = [] \n      \n    # Iterate through all the coins and calculate the number of coins needed to fulfill the amount\n    for i in coins: \n        while amount >= i: \n            amount -= i \n            result.append(i)\n              \n    # Return the number of coins needed\n    print(len(result))\n    \ncoins = [1, 2, 5]\namount = 11\nmin_coins(coins, amount)"}
{"instruction":"Develop a Keras deep learning program in Python to detect facial features using a Convolutional Neural Network (CNN).","input":"Not applicable","output":"from keras.layers import Conv2D, MaxPool2D, Dense, Flatten\nfrom keras.models import Sequential\n\n# Build the model\nmodel = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Conv2D(16, (3, 3), activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(2, activation='sigmoid'))\n\n# Compile and Train\nmodel.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\nmodel.fit(X, y, batch_size=32, epochs=10, validation_split=0.2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Keras deep learning program in Python to detect facial features using a Convolutional Neural Network (CNN).\n\n### Input:\nNot applicable\n\n### Output:\nfrom keras.layers import Conv2D, MaxPool2D, Dense, Flatten\nfrom keras.models import Sequential\n\n# Build the model\nmodel = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Conv2D(16, (3, 3), activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(2, activation='sigmoid'))\n\n# Compile and Train\nmodel.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\nmodel.fit(X, y, batch_size=32, epochs=10, validation_split=0.2)"}
{"instruction":"Create a Python program to generate multiplication tables from 1 to 10.","input":"","output":"for i in range(1, 11):\n    for j in range(1, 11):\n        print(i*j, end = \" \")\n    print()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate multiplication tables from 1 to 10.\n\n### Input:\n\n\n### Output:\nfor i in range(1, 11):\n    for j in range(1, 11):\n        print(i*j, end = \" \")\n    print()"}
{"instruction":"Write a Python snippet that prints all the stdout of a given command.","input":"","output":"import subprocess\n\ncommand = 'ls'\nprocess = subprocess.run([command], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)\n\nfor line in process.stdout.splitlines():\n    print( line )","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python snippet that prints all the stdout of a given command.\n\n### Input:\n\n\n### Output:\nimport subprocess\n\ncommand = 'ls'\nprocess = subprocess.run([command], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)\n\nfor line in process.stdout.splitlines():\n    print( line )"}
{"instruction":"Create a Python script to scrape the text from a Wikipedia article and find the most frequent words in the text.","input":"The URL of the Wikipedia article.","output":"import requests\nimport collections\nimport re\nfrom bs4 import BeautifulSoup\n\n# specify the URL of the Wikipedia article\nurl = 'https:\/\/en.wikipedia.org\/wiki\/Genetic_algorithm'\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get(url).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# take out the script and style portions of the HTML\nfor script in soup([\"script\", \"style\"]):\n script.extract()\n\n# get text\ntext = soup.get_text()\n\n# break the text down into individual words\nwords = re.findall(r'\\w+',text)\n\n# Count the words\nword_count = collections.Counter(words)\n\n# get the most common words\nmost_common_words = word_count.most_common(20)\n\nprint(most_common_words)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to scrape the text from a Wikipedia article and find the most frequent words in the text.\n\n### Input:\nThe URL of the Wikipedia article.\n\n### Output:\nimport requests\nimport collections\nimport re\nfrom bs4 import BeautifulSoup\n\n# specify the URL of the Wikipedia article\nurl = 'https:\/\/en.wikipedia.org\/wiki\/Genetic_algorithm'\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get(url).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# take out the script and style portions of the HTML\nfor script in soup([\"script\", \"style\"]):\n script.extract()\n\n# get text\ntext = soup.get_text()\n\n# break the text down into individual words\nwords = re.findall(r'\\w+',text)\n\n# Count the words\nword_count = collections.Counter(words)\n\n# get the most common words\nmost_common_words = word_count.most_common(20)\n\nprint(most_common_words)"}
{"instruction":"Create a function for sorting an array of integers using Merge Sort in Python.","input":"[8, 4, 6, 1]","output":"def mergeSort(arr):\n if len(arr) > 1: \n mid = len(arr) \/\/ 2 \n L = arr[:mid] \n R = arr[mid:] \n  \n mergeSort(L) \n mergeSort(R) \n  \n i = j = k = 0\n   \n while i < len(L) and j < len(R): \n if L[i] < R[j]: \n arr[k] = L[i] \n i+= 1\n else: \n arr[k] = R[j] \n j+= 1\n k+= 1\n   \n while i < len(L): \n arr[k] = L[i] \n i+= 1\n k+= 1\n   \n while j < len(R): \n arr[k] = R[j] \n j+= 1\n k+= 1\n\narr = [8, 4, 6, 1] \nmergeSort(arr) \n\nprint(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function for sorting an array of integers using Merge Sort in Python.\n\n### Input:\n[8, 4, 6, 1]\n\n### Output:\ndef mergeSort(arr):\n if len(arr) > 1: \n mid = len(arr) \/\/ 2 \n L = arr[:mid] \n R = arr[mid:] \n  \n mergeSort(L) \n mergeSort(R) \n  \n i = j = k = 0\n   \n while i < len(L) and j < len(R): \n if L[i] < R[j]: \n arr[k] = L[i] \n i+= 1\n else: \n arr[k] = R[j] \n j+= 1\n k+= 1\n   \n while i < len(L): \n arr[k] = L[i] \n i+= 1\n k+= 1\n   \n while j < len(R): \n arr[k] = R[j] \n j+= 1\n k+= 1\n\narr = [8, 4, 6, 1] \nmergeSort(arr) \n\nprint(arr)"}
{"instruction":"Create a Python program that prints out a message if a given number is divisible by 7.","input":"num = 49","output":"num = 49\n\nif num % 7 == 0:\n    print(\"The number %d is divisible by 7!\" %num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that prints out a message if a given number is divisible by 7.\n\n### Input:\nnum = 49\n\n### Output:\nnum = 49\n\nif num % 7 == 0:\n    print(\"The number %d is divisible by 7!\" %num)"}
{"instruction":"Optimize an existing Python application to run faster.","input":"Not applicable","output":"There are many ways to optimize the performance of a Python application. Here are a few tips:\n\n1. Reduce the number of function calls by passing parameters that are used multiple times.\n2. Use lazy loading where possible.\n3. Use list comprehensions and other iteration techniques to reduce overall time spent in loops.\n4. Use built-in functions instead of hand-crafted solutions.\n5. Use vectorized operations and optimized data structures to reduce the amount of computation.\n6. Use asynchronous operations to reduce blocking and wait times.\n7. Pre-allocate memory for loops and data structures to reduce dynamic memory allocations.\n8. Use compilation techniques (e.g. Cython) to further optimize your code.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize an existing Python application to run faster.\n\n### Input:\nNot applicable\n\n### Output:\nThere are many ways to optimize the performance of a Python application. Here are a few tips:\n\n1. Reduce the number of function calls by passing parameters that are used multiple times.\n2. Use lazy loading where possible.\n3. Use list comprehensions and other iteration techniques to reduce overall time spent in loops.\n4. Use built-in functions instead of hand-crafted solutions.\n5. Use vectorized operations and optimized data structures to reduce the amount of computation.\n6. Use asynchronous operations to reduce blocking and wait times.\n7. Pre-allocate memory for loops and data structures to reduce dynamic memory allocations.\n8. Use compilation techniques (e.g. Cython) to further optimize your code."}
{"instruction":"Write a Python program that implements linear regression using the least squares method.","input":"Not applicable","output":"import numpy as np\n\n# define the least squares function\ndef least_squares(x, y):\nx_mean = np.mean(x)\ny_mean = np.mean(y)\n\nnum = np.sum((x - x_mean)*(y - y_mean))\ndenom = np.sum((x - x_mean)**2)\n\nm = num \/ denom\nb = y_mean - (m * x_mean)\n\nreturn m, b\n\n# define some sample data\nx = np.array([1, 2, 3, 4, 5, 6])\ny = np.array([3, 4, 5, 6, 7, 8])\n\n# get the linear regression line coefficients\nm, b = least_squares(x, y)\n\n# calculate the linear regression line\nreg_line = m * x + b\n\n# print out the linear regression line\nprint('y = %sx + %s' % (round(m,2), round(b,2)))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that implements linear regression using the least squares method.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\n\n# define the least squares function\ndef least_squares(x, y):\nx_mean = np.mean(x)\ny_mean = np.mean(y)\n\nnum = np.sum((x - x_mean)*(y - y_mean))\ndenom = np.sum((x - x_mean)**2)\n\nm = num \/ denom\nb = y_mean - (m * x_mean)\n\nreturn m, b\n\n# define some sample data\nx = np.array([1, 2, 3, 4, 5, 6])\ny = np.array([3, 4, 5, 6, 7, 8])\n\n# get the linear regression line coefficients\nm, b = least_squares(x, y)\n\n# calculate the linear regression line\nreg_line = m * x + b\n\n# print out the linear regression line\nprint('y = %sx + %s' % (round(m,2), round(b,2)))"}
{"instruction":"Write a Python program to generate a series of random numbers ranging from 0 to 9.","input":"","output":"import random\n\nfor i in range(10):\n    print(random.randint(0, 9))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a series of random numbers ranging from 0 to 9.\n\n### Input:\n\n\n### Output:\nimport random\n\nfor i in range(10):\n    print(random.randint(0, 9))"}
{"instruction":"Write a Python program that takes in a list of integerNums and returns a new list with elements which are divisible by 3.","input":"[3,4,6,9,10]","output":"def divisible_by_3(intNums):\n    result = []\n    for i in intNums:\n        if i % 3 == 0:\n            result.append(i)\n    return result\n\nintNums = [3,4,6,9,10]\nprint(divisible_by_3(intNums)) # Output: [3, 6, 9]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes in a list of integerNums and returns a new list with elements which are divisible by 3.\n\n### Input:\n[3,4,6,9,10]\n\n### Output:\ndef divisible_by_3(intNums):\n    result = []\n    for i in intNums:\n        if i % 3 == 0:\n            result.append(i)\n    return result\n\nintNums = [3,4,6,9,10]\nprint(divisible_by_3(intNums)) # Output: [3, 6, 9]"}
{"instruction":"Create a class in Python for a 2D vector with the basic vector operations- addition, subtraction, dot product and cross product.","input":"","output":"class Vector2D:\n    \"\"\"Represents a 2D vector with the basic vector operations- addition, subtraction, dot product, and cross product.\"\"\"\n    \n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __add__(self, other):\n        \"\"\"Adds two vectors.\"\"\"\n        x = self.x + other.x\n        y = self.y + other.y\n        return Vector2D(x, y)\n    \n    def __sub__(self, other):\n        \"\"\"Subtracts two vectors.\"\"\"\n        x = self.x - other.x\n        y = self.y - other.y\n        return Vector2D(x, y)\n  \n    def dot(self, other):\n        \"\"\"Returns the dot product of two vectors.\"\"\"\n        return self.x * other.x + self.y * other.y\n    \n    def cross(self, other):\n        \"\"\"Returns the cross product of two vectors.\"\"\"\n        return self.x * other.y - self.y * other.x","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python for a 2D vector with the basic vector operations- addition, subtraction, dot product and cross product.\n\n### Input:\n\n\n### Output:\nclass Vector2D:\n    \"\"\"Represents a 2D vector with the basic vector operations- addition, subtraction, dot product, and cross product.\"\"\"\n    \n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __add__(self, other):\n        \"\"\"Adds two vectors.\"\"\"\n        x = self.x + other.x\n        y = self.y + other.y\n        return Vector2D(x, y)\n    \n    def __sub__(self, other):\n        \"\"\"Subtracts two vectors.\"\"\"\n        x = self.x - other.x\n        y = self.y - other.y\n        return Vector2D(x, y)\n  \n    def dot(self, other):\n        \"\"\"Returns the dot product of two vectors.\"\"\"\n        return self.x * other.x + self.y * other.y\n    \n    def cross(self, other):\n        \"\"\"Returns the cross product of two vectors.\"\"\"\n        return self.x * other.y - self.y * other.x"}
{"instruction":"Write a Python code to classify a given list of words into two categories depending on length.","input":"words = [\"aardvark\", \"cat\", \"caterpillar\", \"tail\"]","output":"def classify_words(words):\n    \"\"\"Classify a list of words into two categories depending on length\"\"\"\n    # Initialize empty lists\n    short_words = []\n    long_words = []\n    # Loop through the words\n    for word in words:\n        # Add the word to the short list if it is less\n        # than 7 characters, otherwise add it to the long list\n        if len(word) < 7:\n            short_words.append(word)\n        else:\n            long_words.append(word)\n\n    return short_words, long_words\n\n# Output\nprint(classify_words(words))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to classify a given list of words into two categories depending on length.\n\n### Input:\nwords = [\"aardvark\", \"cat\", \"caterpillar\", \"tail\"]\n\n### Output:\ndef classify_words(words):\n    \"\"\"Classify a list of words into two categories depending on length\"\"\"\n    # Initialize empty lists\n    short_words = []\n    long_words = []\n    # Loop through the words\n    for word in words:\n        # Add the word to the short list if it is less\n        # than 7 characters, otherwise add it to the long list\n        if len(word) < 7:\n            short_words.append(word)\n        else:\n            long_words.append(word)\n\n    return short_words, long_words\n\n# Output\nprint(classify_words(words))"}
{"instruction":"Develop a Python Webscraper for collecting data from a given URL.","input":"Example URL: http:\/\/example.com\/data","output":"import requests\nfrom bs4 import BeautifulSoup\n\nURL = 'http:\/\/example.com\/data'\n\n# Send a request to the URL\npage = requests.get(URL)\n\n# Parse the page\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Get the data\ndata = soup.find_all('div', class_='data')\n\n# Print the data\nfor item in data:\n print(item.text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python Webscraper for collecting data from a given URL.\n\n### Input:\nExample URL: http:\/\/example.com\/data\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nURL = 'http:\/\/example.com\/data'\n\n# Send a request to the URL\npage = requests.get(URL)\n\n# Parse the page\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Get the data\ndata = soup.find_all('div', class_='data')\n\n# Print the data\nfor item in data:\n print(item.text)"}
{"instruction":"Create a sorting algorithm in Python that takes in an array of integers and sorts it in ascending order.","input":"[4, 2, 7, 1, 3]","output":"def sort_ascending(arr):\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n                swapped = True\n    return arr\n\nprint(sort_ascending([4, 2, 7, 1, 3]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sorting algorithm in Python that takes in an array of integers and sorts it in ascending order.\n\n### Input:\n[4, 2, 7, 1, 3]\n\n### Output:\ndef sort_ascending(arr):\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n                swapped = True\n    return arr\n\nprint(sort_ascending([4, 2, 7, 1, 3]))"}
{"instruction":"Create a function in Python that solves the Fibonacci sequence.","input":"","output":"def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that solves the Fibonacci sequence.\n\n### Input:\n\n\n### Output:\ndef fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2)"}
{"instruction":"Create a python program to print the Fibonacci sequence for the first ten numbers.","input":"","output":"def fibonacciSequence(n):\n    a = 0\n    b = 1\n    sequence = [a, b]\n    for _ in range(2, n):\n        c = a + b\n        a = b\n        b = c\n        sequence.append(c)\n    return sequence\n\nprint(fibonacciSequence(10)) # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to print the Fibonacci sequence for the first ten numbers.\n\n### Input:\n\n\n### Output:\ndef fibonacciSequence(n):\n    a = 0\n    b = 1\n    sequence = [a, b]\n    for _ in range(2, n):\n        c = a + b\n        a = b\n        b = c\n        sequence.append(c)\n    return sequence\n\nprint(fibonacciSequence(10)) # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"}
{"instruction":"Create an AI chatbot in Python that can respond to queries about a topic of your choice.","input":"Not applicable","output":"import nltk\nimport numpy as np\nimport random\nimport string # to process standard python strings\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nf=open('chatbot.txt','r',errors = 'ignore')\n\n#Corpus of the raw data\nraw=f.read()\n\nraw=raw.lower()# converts to lowercase\n\nnltk.download('punkt') # first-time use only\nnltk.download('wordnet') # first-time use only\n\nsent_tokens = nltk.sent_tokenize(raw)# converts to list of sentences \nword_tokens = nltk.word_tokenize(raw)# converts to list of words\n\n# Pre-processing\nlemmer = nltk.stem.WordNetLemmatizer()\n#WordNet is a semantically-oriented dictionary of English included in NLTK.\ndef LemTokens(tokens):\n    return [lemmer.lemmatize(token) for token in tokens]\nremove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)\ndef LemNormalize(text):\n    return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))\n\n# Keyword Matching\nGREETING_INPUTS = (\"hello\", \"hi\", \"greetings\", \"sup\", \"what's up\",\"hey\",)\nGREETING_RESPONSES = [\"hi\", \"hey\", \"*nods*\", \"hi there\", \"hello\", \"I am glad! You are talking to me\"]\n\ndef greeting(sentence):\n   \n    for word in sentence.split():\n        if word.lower() in GREETING_INPUTS:\n            return random.choice(GREETING_RESPONSES)\n\n# Generating response\ndef response(user_response):\n    robo_response=''\n    sent_tokens.append(user_response)\n    TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')\n    tfidf = TfidfVec.fit_transform(sent_tokens)\n    vals = cosine_similarity(tfidf[-1], tfidf)\n    idx=vals.argsort()[0][-2]\n    flat = vals.flatten()\n    flat.sort()\n    req_tfidf = flat[-2]\n    if(req_tfidf==0):\n        robo_response=robo_response+\"I am sorry! I don't understand you\"\n        return robo_response\n    else:\n        robo_response = robo_response+sent_tokens[idx]\n        return robo_response\n\nflag=True\nprint(\"My name is Qabot. I will answer your queries about quantum computing. If you want to exit, type Bye!\")\nwhile(flag==True):\n    user_response = input()\n    user_response=user_response.lower()\n    if(user_response!='bye'):\n        if(user_response=='thanks' or user_response=='thank you' ):\n            flag=False\n            print(\"Qabot: You are welcome..\")\n        else:\n            if(greeting(user_response)!=None):\n                print(\"Qabot: \"+greeting(user_response))\n            else:\n                print(\"Qabot: \",end=\"\")\n                print(response(user_response))\n                sent_tokens.remove(user_response)\n    else:\n        flag=False\n        print(\"Qabot: Bye! take care..\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI chatbot in Python that can respond to queries about a topic of your choice.\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\nimport numpy as np\nimport random\nimport string # to process standard python strings\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nf=open('chatbot.txt','r',errors = 'ignore')\n\n#Corpus of the raw data\nraw=f.read()\n\nraw=raw.lower()# converts to lowercase\n\nnltk.download('punkt') # first-time use only\nnltk.download('wordnet') # first-time use only\n\nsent_tokens = nltk.sent_tokenize(raw)# converts to list of sentences \nword_tokens = nltk.word_tokenize(raw)# converts to list of words\n\n# Pre-processing\nlemmer = nltk.stem.WordNetLemmatizer()\n#WordNet is a semantically-oriented dictionary of English included in NLTK.\ndef LemTokens(tokens):\n    return [lemmer.lemmatize(token) for token in tokens]\nremove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)\ndef LemNormalize(text):\n    return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))\n\n# Keyword Matching\nGREETING_INPUTS = (\"hello\", \"hi\", \"greetings\", \"sup\", \"what's up\",\"hey\",)\nGREETING_RESPONSES = [\"hi\", \"hey\", \"*nods*\", \"hi there\", \"hello\", \"I am glad! You are talking to me\"]\n\ndef greeting(sentence):\n   \n    for word in sentence.split():\n        if word.lower() in GREETING_INPUTS:\n            return random.choice(GREETING_RESPONSES)\n\n# Generating response\ndef response(user_response):\n    robo_response=''\n    sent_tokens.append(user_response)\n    TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')\n    tfidf = TfidfVec.fit_transform(sent_tokens)\n    vals = cosine_similarity(tfidf[-1], tfidf)\n    idx=vals.argsort()[0][-2]\n    flat = vals.flatten()\n    flat.sort()\n    req_tfidf = flat[-2]\n    if(req_tfidf==0):\n        robo_response=robo_response+\"I am sorry! I don't understand you\"\n        return robo_response\n    else:\n        robo_response = robo_response+sent_tokens[idx]\n        return robo_response\n\nflag=True\nprint(\"My name is Qabot. I will answer your queries about quantum computing. If you want to exit, type Bye!\")\nwhile(flag==True):\n    user_response = input()\n    user_response=user_response.lower()\n    if(user_response!='bye'):\n        if(user_response=='thanks' or user_response=='thank you' ):\n            flag=False\n            print(\"Qabot: You are welcome..\")\n        else:\n            if(greeting(user_response)!=None):\n                print(\"Qabot: \"+greeting(user_response))\n            else:\n                print(\"Qabot: \",end=\"\")\n                print(response(user_response))\n                sent_tokens.remove(user_response)\n    else:\n        flag=False\n        print(\"Qabot: Bye! take care..\")"}
{"instruction":"Write a Python script to detect duplicate data in two columns in an Excel spreadsheet.","input":"Sheet name: \"Customers\"\nColumns: \"Name\" and \"Address\"","output":"import xlrd \n  \n# Give the location of the file \nloc = (\"Customers.xlsx\") \n  \n# To open Workbook \nwb = xlrd.open_workbook(loc) \nsheet = wb.sheet_by_name(\"Customers\") \n  \n# Extracting Column information name and address\nname_data = sheet.col_values(0)\nadress_data = sheet.col_values(1)\n  \n#printing Column data \nprint(\"Name Data\")\nprint(name_data) \nprint(\"Address Data\") \nprint(adress_data)\n  \n#Finding Duplicate Values\nduplicate_name = []\nfor n in range(len(name_data)):\n for i in range(n+1, len(name_data)):\n  if(name_data[n] == name_data[i]):\n   duplicate_name.append(name_data[n])\n\nduplicate_adress = []\nfor a in range(len(adress_data)):\n for b in range(a+1, len(adress_data)):\n  if(adress_data[a] == adress_data[b]):\n   duplicate_adress.append(adress_data[a])\n\nprint(\"Duplicate Name data\")\nprint(duplicate_name)\n\nprint(\"Duplicate Adress data\")\nprint(duplicate_adress)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to detect duplicate data in two columns in an Excel spreadsheet.\n\n### Input:\nSheet name: \"Customers\"\nColumns: \"Name\" and \"Address\"\n\n### Output:\nimport xlrd \n  \n# Give the location of the file \nloc = (\"Customers.xlsx\") \n  \n# To open Workbook \nwb = xlrd.open_workbook(loc) \nsheet = wb.sheet_by_name(\"Customers\") \n  \n# Extracting Column information name and address\nname_data = sheet.col_values(0)\nadress_data = sheet.col_values(1)\n  \n#printing Column data \nprint(\"Name Data\")\nprint(name_data) \nprint(\"Address Data\") \nprint(adress_data)\n  \n#Finding Duplicate Values\nduplicate_name = []\nfor n in range(len(name_data)):\n for i in range(n+1, len(name_data)):\n  if(name_data[n] == name_data[i]):\n   duplicate_name.append(name_data[n])\n\nduplicate_adress = []\nfor a in range(len(adress_data)):\n for b in range(a+1, len(adress_data)):\n  if(adress_data[a] == adress_data[b]):\n   duplicate_adress.append(adress_data[a])\n\nprint(\"Duplicate Name data\")\nprint(duplicate_name)\n\nprint(\"Duplicate Adress data\")\nprint(duplicate_adress)"}
{"instruction":"Generate a program to merge two sorted linked lists in Python.","input":"","output":"def merge(list1, list2):  \n    if list1 is None:  \n        return list2  \n    if list2 is None:  \n        return list1  \n    if list1.data < list2.data:  \n        list1.next = merge(list1.next, list2)  \n        return list1  \n    else:  \n        list2.next = merge(list1, list2.next)  \n        return list2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program to merge two sorted linked lists in Python.\n\n### Input:\n\n\n### Output:\ndef merge(list1, list2):  \n    if list1 is None:  \n        return list2  \n    if list2 is None:  \n        return list1  \n    if list1.data < list2.data:  \n        list1.next = merge(list1.next, list2)  \n        return list1  \n    else:  \n        list2.next = merge(list1, list2.next)  \n        return list2"}
{"instruction":"Develop a web-crawler in Python to scan a given website and store all the hyperlinks into a database.","input":"Website URL: https:\/\/www.example.com","output":"import requests\nfrom bs4 import BeautifulSoup\nimport sqlite3\n\n# connect to database\nconn = sqlite3.connect('links.db')\ncursor = conn.cursor()\n \n# create table\ncursor.execute(\"CREATE TABLE IF NOT EXISTS urls (url TEXT)\")\n\n# get website content\nresponse = requests.get(\"https:\/\/www.example.com\")\nsoup = BeautifulSoup(response.content,'html.parser')\n \n# parse out the hyperlinks\nfor link in soup.find_all('a'):\n    if link.get('href'):\n        # get absolute URLs\n        if link.get('href')[0] == '\/':\n            url = 'https:\/\/www.example.com' + link.get('href')\n        else:\n            url = link.get('href')\n \n        # insert into database\n        cursor.execute(\"INSERT INTO urls VALUES (?)\",(url,))\n \nconn.commit()\nconn.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a web-crawler in Python to scan a given website and store all the hyperlinks into a database.\n\n### Input:\nWebsite URL: https:\/\/www.example.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\nimport sqlite3\n\n# connect to database\nconn = sqlite3.connect('links.db')\ncursor = conn.cursor()\n \n# create table\ncursor.execute(\"CREATE TABLE IF NOT EXISTS urls (url TEXT)\")\n\n# get website content\nresponse = requests.get(\"https:\/\/www.example.com\")\nsoup = BeautifulSoup(response.content,'html.parser')\n \n# parse out the hyperlinks\nfor link in soup.find_all('a'):\n    if link.get('href'):\n        # get absolute URLs\n        if link.get('href')[0] == '\/':\n            url = 'https:\/\/www.example.com' + link.get('href')\n        else:\n            url = link.get('href')\n \n        # insert into database\n        cursor.execute(\"INSERT INTO urls VALUES (?)\",(url,))\n \nconn.commit()\nconn.close()"}
{"instruction":"Using Python, write a program to tokenize a given string.","input":"\"This is a sentence\"","output":"import re\n\ndef tokenize(s):\n    tokens = re.findall(r'\\w+|[^\\w\\s]', s, flags=re.UNICODE)\n    return tokens\n\nprint(tokenize(\"This is a sentence\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, write a program to tokenize a given string.\n\n### Input:\n\"This is a sentence\"\n\n### Output:\nimport re\n\ndef tokenize(s):\n    tokens = re.findall(r'\\w+|[^\\w\\s]', s, flags=re.UNICODE)\n    return tokens\n\nprint(tokenize(\"This is a sentence\"))"}
{"instruction":"Generate a Python function that takes in two arrays and returns a list of the elements that are present in both arrays.","input":"","output":"def intersection(list1, list2):\n    return [value for value in list1 if value in list2]\n\nlist1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6, 7]\n\nprint(intersection(list1, list2)) # [2, 4]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that takes in two arrays and returns a list of the elements that are present in both arrays.\n\n### Input:\n\n\n### Output:\ndef intersection(list1, list2):\n    return [value for value in list1 if value in list2]\n\nlist1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6, 7]\n\nprint(intersection(list1, list2)) # [2, 4]"}
{"instruction":"Write a function in Python that takes an array of integers and its size as parameters and returns the maximum value in the array.","input":"arr = [1, 6, 8, 4, 9, 6, 10]\nn = len(arr)","output":"def findMax(arr, n):\n # Initializing max with first element of array\n max = arr[0]\n\n # Starting loop from second element\n for i in range(1, n):\n # Comparing max with remaining elements of array\n if arr[i] > max:\n max = arr[i]\n\n # Returning maximum\n return max","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes an array of integers and its size as parameters and returns the maximum value in the array.\n\n### Input:\narr = [1, 6, 8, 4, 9, 6, 10]\nn = len(arr)\n\n### Output:\ndef findMax(arr, n):\n # Initializing max with first element of array\n max = arr[0]\n\n # Starting loop from second element\n for i in range(1, n):\n # Comparing max with remaining elements of array\n if arr[i] > max:\n max = arr[i]\n\n # Returning maximum\n return max"}
{"instruction":"Find the longest substring in the given input using Python.","input":"abcabcbb","output":"def longest_substring(s):\n    # create set\n    seen_characters = set()\n    # initialize variables\n    max_length = i = 0\n    # loop through string\n    while i < len(s):\n        # if character is not in seen_characters\n        if s[i] not in seen_characters:\n            # increment max_length and update seen_characters\n            seen_characters.add(s[i])\n            max_length = max(max_length, len(seen_characters))\n            i += 1\n        else:\n            # remove first character from seen_characters\n            seen_characters.remove(s[i-max_length])\n    # return max_length\n    return max_length\n\nstring = 'abcabcbb'\nresult = longest_substring(string)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the longest substring in the given input using Python.\n\n### Input:\nabcabcbb\n\n### Output:\ndef longest_substring(s):\n    # create set\n    seen_characters = set()\n    # initialize variables\n    max_length = i = 0\n    # loop through string\n    while i < len(s):\n        # if character is not in seen_characters\n        if s[i] not in seen_characters:\n            # increment max_length and update seen_characters\n            seen_characters.add(s[i])\n            max_length = max(max_length, len(seen_characters))\n            i += 1\n        else:\n            # remove first character from seen_characters\n            seen_characters.remove(s[i-max_length])\n    # return max_length\n    return max_length\n\nstring = 'abcabcbb'\nresult = longest_substring(string)\nprint(result)"}
{"instruction":"Extend a Python class to create another class with similar behavior.","input":"class Vehicle:\n\tdef __init__(self):\n\t\tself.speed = 0\n\t\tself.odometer = 0\n\t\tself.time = 0","output":"class Motorcycle(Vehicle):\n    def __init__(self):\n        super().__init__()\n        self.num_wheels = 2\n        self.type = 'motorcycle'\n\n    def accelerate(self):\n        self.speed += 10\n\n    def brake(self):\n        self.speed = max(self.speed - 7, 0)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExtend a Python class to create another class with similar behavior.\n\n### Input:\nclass Vehicle:\n\tdef __init__(self):\n\t\tself.speed = 0\n\t\tself.odometer = 0\n\t\tself.time = 0\n\n### Output:\nclass Motorcycle(Vehicle):\n    def __init__(self):\n        super().__init__()\n        self.num_wheels = 2\n        self.type = 'motorcycle'\n\n    def accelerate(self):\n        self.speed += 10\n\n    def brake(self):\n        self.speed = max(self.speed - 7, 0)"}
{"instruction":"Can you write an algorithm in Python to check if a given variable is palindrome?","input":"","output":"def is_palindrome(variable):\n  var = variable.lower()\n  rev_var = var[::-1]\n  if (var == rev_var):\n    return True\n  else:\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you write an algorithm in Python to check if a given variable is palindrome?\n\n### Input:\n\n\n### Output:\ndef is_palindrome(variable):\n  var = variable.lower()\n  rev_var = var[::-1]\n  if (var == rev_var):\n    return True\n  else:\n    return False"}
{"instruction":"Develop a function in Python to concatenate two lists","input":"list1 = [1,2,3]\nlist2 = [4,5,6]","output":"def concatenateLists(list1, list2): \n    list3 = list1 + list2 \n    return list3","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python to concatenate two lists\n\n### Input:\nlist1 = [1,2,3]\nlist2 = [4,5,6]\n\n### Output:\ndef concatenateLists(list1, list2): \n    list3 = list1 + list2 \n    return list3"}
{"instruction":"Write a Python program to read in three numbers and find the smallest of the three.","input":"3, 6, 8","output":"a = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\nc = int(input(\"Enter third number: \"))\n\nminimum = min(a, b, c)\n\nprint(\"The smallest of the three numbers is\", minimum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to read in three numbers and find the smallest of the three.\n\n### Input:\n3, 6, 8\n\n### Output:\na = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\nc = int(input(\"Enter third number: \"))\n\nminimum = min(a, b, c)\n\nprint(\"The smallest of the three numbers is\", minimum)"}
{"instruction":"Construct a Python for loop to find the largest number in a list of given numbers.","input":"[3, 6, 8, 11, 12]","output":"largest = 0\nlist = [3, 6, 8, 11, 12]\n\nfor i in list:\n  if i > largest:\n    largest = i\n\nprint(largest)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python for loop to find the largest number in a list of given numbers.\n\n### Input:\n[3, 6, 8, 11, 12]\n\n### Output:\nlargest = 0\nlist = [3, 6, 8, 11, 12]\n\nfor i in list:\n  if i > largest:\n    largest = i\n\nprint(largest)"}
{"instruction":"Design a program that sorts a given array of numbers.","input":"","output":"# Python program for implementation of Bubble Sort \ndef bubbleSort(arr): \n\tn = len(arr) \n\n\t# Traverse through all array elements \n\tfor i in range(n): \n\n\t\t# Last i elements are already in place \n\t\tfor j in range(0, n-i-1): \n\n\t\t\t# traverse the array from 0 to n-i-1 \n\t\t\t# Swap if the element found is greater \n\t\t\t# than the next element \n\t\t\tif arr[j] > arr[j+1] : \n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program that sorts a given array of numbers.\n\n### Input:\n\n\n### Output:\n# Python program for implementation of Bubble Sort \ndef bubbleSort(arr): \n\tn = len(arr) \n\n\t# Traverse through all array elements \n\tfor i in range(n): \n\n\t\t# Last i elements are already in place \n\t\tfor j in range(0, n-i-1): \n\n\t\t\t# traverse the array from 0 to n-i-1 \n\t\t\t# Swap if the element found is greater \n\t\t\t# than the next element \n\t\t\tif arr[j] > arr[j+1] : \n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]"}
{"instruction":"Given a set of sentences as input, write a Python program to return only the sentences that contain at least one noun.","input":"['The sky is blue.', 'Roses are red.', 'The cat is cute.']","output":"import nltk\n\ndef find_nouns(sentences):\n    \n    noun_sentences = []\n    for sentence in sentences:\n        words = nltk.tokenize.word_tokenize(sentence)\n        pos_tags = nltk.pos_tag(words)\n        for tag in pos_tags:\n            if tag[1] == 'NN' or tag[1] == 'NNS':\n                noun_sentences.append(sentence)\n                break\n\n    return noun_sentences","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a set of sentences as input, write a Python program to return only the sentences that contain at least one noun.\n\n### Input:\n['The sky is blue.', 'Roses are red.', 'The cat is cute.']\n\n### Output:\nimport nltk\n\ndef find_nouns(sentences):\n    \n    noun_sentences = []\n    for sentence in sentences:\n        words = nltk.tokenize.word_tokenize(sentence)\n        pos_tags = nltk.pos_tag(words)\n        for tag in pos_tags:\n            if tag[1] == 'NN' or tag[1] == 'NNS':\n                noun_sentences.append(sentence)\n                break\n\n    return noun_sentences"}
{"instruction":"Create a Django model for a Category with a name, slug, and description field, a Tag with a name and slug field, and an Article with a title, slug, content, status, category, tags, views, publish_date, and created_date field. The Article model should also have a method to check if it was published recently.","input":"","output":"from django.db import models\nimport datetime\nfrom django.utils import timezone\nfrom django.utils.encoding import python_2_unicode_compatible\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100)\n    slug = models.SlugField(max_length=100, unique=True, verbose_name='slug')\n    description = models.TextField(max_length=4096)\n\n    def __str__(self):\n        return '%s' % (self.name)\n\nclass Tag(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n    slug = models.SlugField(max_length=100, unique=True, verbose_name='slug')\n\n    def __str__(self):\n        return '%s' % (self.name)\n\n@python_2_unicode_compatible\nclass Article(models.Model):\n    ARTICLE_STATUS = (\n        ('D', 'Not Reviewed'),\n        ('P', 'Published'),\n        ('E', 'Expired'),\n    )\n    title = models.CharField(max_length=100, unique=True)\n    slug = models.SlugField(max_length=100, unique=True, verbose_name='slug')\n    status = models.IntegerField(default=0)\n    content = models.TextField()\n    status = models.CharField(max_length=1, choices=ARTICLE_STATUS, default='D')\n    category = models.ForeignKey(Category, verbose_name=\"the related category\")\n    tags = models.ManyToManyField(Tag, verbose_name=\"the related tags\", related_name=\"keyword_set\", blank=True)\n        \n    views = models.IntegerField(default=0)\n    publish_date = models.DateTimeField(auto_now=True, editable=False, help_text=\"Please use the following format: <em>YYYY-MM-DD<\/em>.\")\n    created_date = models.DateTimeField(auto_now_add=True, editable=False)\n\n    def was_published_recently(self):\n        return self.publish_date >= timezone.now() - datetime.timedelta(days=1)\n    was_published_recently.admin_order_field = 'publish_date'\n    was_published_recently.boolean = True\n    was_published_recently.short_description = 'Published recently?'\n\n    def __str__(self):\n        return '%s' % (self.title)\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Django model for a Category with a name, slug, and description field, a Tag with a name and slug field, and an Article with a title, slug, content, status, category, tags, views, publish_date, and created_date field. The Article model should also have a method to check if it was published recently.\n\n### Input:\n\n\n### Output:\nfrom django.db import models\nimport datetime\nfrom django.utils import timezone\nfrom django.utils.encoding import python_2_unicode_compatible\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100)\n    slug = models.SlugField(max_length=100, unique=True, verbose_name='slug')\n    description = models.TextField(max_length=4096)\n\n    def __str__(self):\n        return '%s' % (self.name)\n\nclass Tag(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n    slug = models.SlugField(max_length=100, unique=True, verbose_name='slug')\n\n    def __str__(self):\n        return '%s' % (self.name)\n\n@python_2_unicode_compatible\nclass Article(models.Model):\n    ARTICLE_STATUS = (\n        ('D', 'Not Reviewed'),\n        ('P', 'Published'),\n        ('E', 'Expired'),\n    )\n    title = models.CharField(max_length=100, unique=True)\n    slug = models.SlugField(max_length=100, unique=True, verbose_name='slug')\n    status = models.IntegerField(default=0)\n    content = models.TextField()\n    status = models.CharField(max_length=1, choices=ARTICLE_STATUS, default='D')\n    category = models.ForeignKey(Category, verbose_name=\"the related category\")\n    tags = models.ManyToManyField(Tag, verbose_name=\"the related tags\", related_name=\"keyword_set\", blank=True)\n        \n    views = models.IntegerField(default=0)\n    publish_date = models.DateTimeField(auto_now=True, editable=False, help_text=\"Please use the following format: <em>YYYY-MM-DD<\/em>.\")\n    created_date = models.DateTimeField(auto_now_add=True, editable=False)\n\n    def was_published_recently(self):\n        return self.publish_date >= timezone.now() - datetime.timedelta(days=1)\n    was_published_recently.admin_order_field = 'publish_date'\n    was_published_recently.boolean = True\n    was_published_recently.short_description = 'Published recently?'\n\n    def __str__(self):\n        return '%s' % (self.title)\n"}
{"instruction":"Create a Python program to classify a given text into one of two categories using a multinomial Naive Bayes classifier.","input":"Data.csv\ncategory, text\npositive, I had a great time!\nnegative, This was a horrible experience.","output":"import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer \nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load the data from a file\ndf = pd.read_csv('Data.csv')\n\n# Extract the labels and text from the data\nlabels = df['category']\ntexts = df['text']\n\n# Create a count vectorizer\nvectorizer = CountVectorizer() \nvectors = vectorizer.fit_transform(texts) \n\n# Create a multinomial Naive Bayes classifier\nclassifier = MultinomialNB()\nclassifier.fit(vectors, labels)\n\n# Test the classifier with some input\ninput_text = \"It wasn't the best night.\"\ninput_vector = vectorizer.transform([input_text])\npredicted_label = classifier.predict(input_vector)[0]\n\nprint('Input text:', input_text)\nprint('Predicted label:', predicted_label)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to classify a given text into one of two categories using a multinomial Naive Bayes classifier.\n\n### Input:\nData.csv\ncategory, text\npositive, I had a great time!\nnegative, This was a horrible experience.\n\n### Output:\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer \nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load the data from a file\ndf = pd.read_csv('Data.csv')\n\n# Extract the labels and text from the data\nlabels = df['category']\ntexts = df['text']\n\n# Create a count vectorizer\nvectorizer = CountVectorizer() \nvectors = vectorizer.fit_transform(texts) \n\n# Create a multinomial Naive Bayes classifier\nclassifier = MultinomialNB()\nclassifier.fit(vectors, labels)\n\n# Test the classifier with some input\ninput_text = \"It wasn't the best night.\"\ninput_vector = vectorizer.transform([input_text])\npredicted_label = classifier.predict(input_vector)[0]\n\nprint('Input text:', input_text)\nprint('Predicted label:', predicted_label)"}
{"instruction":"Write a python code to generate a unique URL using a randomly generated string.","input":"","output":"import random\nimport string\n \ndef generate_random_string(num_chars): \n    # Generate a random string of length num_chars\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    random_string = \"\"\n    for i in range(num_chars):\n        random_string += random.choice(chars)\n    return random_string\n \ndef generate_unique_url(base_url): \n    random_string = generate_random_string(8)\n    unique_url = base_url + random_string\n    return unique_url\n\nif __name__ == '__main__':\n    output = generate_unique_url('www.example.com\/')\n    print(output)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to generate a unique URL using a randomly generated string.\n\n### Input:\n\n\n### Output:\nimport random\nimport string\n \ndef generate_random_string(num_chars): \n    # Generate a random string of length num_chars\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    random_string = \"\"\n    for i in range(num_chars):\n        random_string += random.choice(chars)\n    return random_string\n \ndef generate_unique_url(base_url): \n    random_string = generate_random_string(8)\n    unique_url = base_url + random_string\n    return unique_url\n\nif __name__ == '__main__':\n    output = generate_unique_url('www.example.com\/')\n    print(output)"}
{"instruction":"Generate a reinforcement learning algorithm.","input":"Design a RL algorithm to solve an environment with a single agent and sparse rewards.","output":"Create a Python program to implement a reinforcement learning agent that utilizes Q-learning for solving an environment with sparse rewards. The algorithm should keep the learning agent in a continuous loop of taking actions, observing rewards and updating the Q-value function to reach the outcome desired.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a reinforcement learning algorithm.\n\n### Input:\nDesign a RL algorithm to solve an environment with a single agent and sparse rewards.\n\n### Output:\nCreate a Python program to implement a reinforcement learning agent that utilizes Q-learning for solving an environment with sparse rewards. The algorithm should keep the learning agent in a continuous loop of taking actions, observing rewards and updating the Q-value function to reach the outcome desired."}
{"instruction":"Write a Python program to create a JSON object for a student's marks database. The database should contain the student's name, id, subject name and the marks obtained.","input":"Student Name: John    \nId: 105    \nSubject: Science    \nMarks: 90","output":"student_data = [\n    {\n        'name': 'John',\n        'id': 105, \n        'subjects': {\n            'Science': 90\n        }\n    }\n]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a JSON object for a student's marks database. The database should contain the student's name, id, subject name and the marks obtained.\n\n### Input:\nStudent Name: John    \nId: 105    \nSubject: Science    \nMarks: 90\n\n### Output:\nstudent_data = [\n    {\n        'name': 'John',\n        'id': 105, \n        'subjects': {\n            'Science': 90\n        }\n    }\n]"}
{"instruction":"Write a Python program that takes an input string and reverses all of its words.","input":"hello world","output":"world hello","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes an input string and reverses all of its words.\n\n### Input:\nhello world\n\n### Output:\nworld hello"}
{"instruction":"Create an HTTP server in Python that responds to `GET` requests with a \u2018Hello World\u2019 message.","input":"Not applicable","output":"from http.server import HTTPServer, BaseHTTPRequestHandler\n\nclass HelloWorldHandler(BaseHTTPRequestHandler):\n def do_GET(self):\n self.send_response(200)\n self.end_headers()\n self.wfile.write(b'Hello World!')\n\nserver = HTTPServer(('', 8080), HelloWorldHandler)\nserver.serve_forever()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an HTTP server in Python that responds to `GET` requests with a \u2018Hello World\u2019 message.\n\n### Input:\nNot applicable\n\n### Output:\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\n\nclass HelloWorldHandler(BaseHTTPRequestHandler):\n def do_GET(self):\n self.send_response(200)\n self.end_headers()\n self.wfile.write(b'Hello World!')\n\nserver = HTTPServer(('', 8080), HelloWorldHandler)\nserver.serve_forever()"}
{"instruction":"Write a Python program to find the number of times each character in an array occurs.","input":"Given an array = ['a', 'b', 'c', 'a', 'c', 'b', 'd', 'd']","output":"from collections import Counter\n\ns = ['a', 'b', 'c', 'a', 'c', 'b', 'd', 'd']\ncounts = Counter(s)\n\nfor c, count in counts.items():\n print(f'{c}: {count} times')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the number of times each character in an array occurs.\n\n### Input:\nGiven an array = ['a', 'b', 'c', 'a', 'c', 'b', 'd', 'd']\n\n### Output:\nfrom collections import Counter\n\ns = ['a', 'b', 'c', 'a', 'c', 'b', 'd', 'd']\ncounts = Counter(s)\n\nfor c, count in counts.items():\n print(f'{c}: {count} times')"}
{"instruction":"Create a class in Python that simulates a timer object.","input":"","output":"class Timer:\n  def __init__(self):\n    self.start_time = 0\n    self.end_time = 0\n    \n  def start(self):\n    self.start_time = time.time()\n    \n  def end(self):\n    self.end_time = time.time()\n\n  def elapsed(self):\n    return self.end_time - self.start_time","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that simulates a timer object.\n\n### Input:\n\n\n### Output:\nclass Timer:\n  def __init__(self):\n    self.start_time = 0\n    self.end_time = 0\n    \n  def start(self):\n    self.start_time = time.time()\n    \n  def end(self):\n    self.end_time = time.time()\n\n  def elapsed(self):\n    return self.end_time - self.start_time"}
{"instruction":"Develop an algorithm in Python to find longest increasing contiguous subarray of a given array.","input":"[2, 6, 4, 8, 10]","output":"def find_longest_increasing_subarray(arr): \n    n = len(arr) \n  \n    # Initialize overall max \n    max_len = 1\n  \n    # Initialize starting point of current subarray \n    start_index = 0\n  \n    # Initialize ending point of current subarray \n    end_index = 0\n  \n    # Initialize current max \n    curr_max = 1\n  \n    # Traverse array elements \n    for i in range(1, n): \n  \n        # If element is greater than previous one \n        if arr[i] > arr[i - 1]: \n            curr_max += 1\n              \n        # Else Reset current max and \n        # starting point of current subarray \n        else: \n            if curr_max > max_len: \n                max_len = curr_max \n                start_index = i - curr_max \n                end_index = i - 1\n            curr_max = 1\n          \n    # Compare the last maximum length with \n    # overall maximum length \n    if curr_max > max_len: \n        max_len = curr_max \n        start_index = n - curr_max \n        end_index = n - 1\n          \n    # Print starting and ending index of longest \n    # increasing contiguous subarray \n    print(\"Longest increasing contiguous \" + \n          \"subarray is [\",  \n          arr[start_index], \"..\", arr[end_index], \n          \"] of length\", max_len)\n          \n# Driver code\narr = [2, 6, 4, 8, 10]\nfind_longest_increasing_subarray(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to find longest increasing contiguous subarray of a given array.\n\n### Input:\n[2, 6, 4, 8, 10]\n\n### Output:\ndef find_longest_increasing_subarray(arr): \n    n = len(arr) \n  \n    # Initialize overall max \n    max_len = 1\n  \n    # Initialize starting point of current subarray \n    start_index = 0\n  \n    # Initialize ending point of current subarray \n    end_index = 0\n  \n    # Initialize current max \n    curr_max = 1\n  \n    # Traverse array elements \n    for i in range(1, n): \n  \n        # If element is greater than previous one \n        if arr[i] > arr[i - 1]: \n            curr_max += 1\n              \n        # Else Reset current max and \n        # starting point of current subarray \n        else: \n            if curr_max > max_len: \n                max_len = curr_max \n                start_index = i - curr_max \n                end_index = i - 1\n            curr_max = 1\n          \n    # Compare the last maximum length with \n    # overall maximum length \n    if curr_max > max_len: \n        max_len = curr_max \n        start_index = n - curr_max \n        end_index = n - 1\n          \n    # Print starting and ending index of longest \n    # increasing contiguous subarray \n    print(\"Longest increasing contiguous \" + \n          \"subarray is [\",  \n          arr[start_index], \"..\", arr[end_index], \n          \"] of length\", max_len)\n          \n# Driver code\narr = [2, 6, 4, 8, 10]\nfind_longest_increasing_subarray(arr)"}
{"instruction":"Port a Python code snippet to Java.","input":"def add(a, b):\n    return a + b","output":"public class Add {\n    public static int add(int a, int b) {\n        return a + b;\n    }\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPort a Python code snippet to Java.\n\n### Input:\ndef add(a, b):\n    return a + b\n\n### Output:\npublic class Add {\n    public static int add(int a, int b) {\n        return a + b;\n    }\n}"}
{"instruction":"Write a short Python script to compute the average temperature of a given set of temperatures.","input":"temperatures = [71,77,82,81,75,72,78]","output":"def average(temperatures):\n    total = 0\n    for temp in temperatures:\n        total += temp\n    return total\/len(temperatures)\n\nprint(average(temperatures))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a short Python script to compute the average temperature of a given set of temperatures.\n\n### Input:\ntemperatures = [71,77,82,81,75,72,78]\n\n### Output:\ndef average(temperatures):\n    total = 0\n    for temp in temperatures:\n        total += temp\n    return total\/len(temperatures)\n\nprint(average(temperatures))"}
{"instruction":"Create a program in Python that uses a machine learning approach to classify a type of data.","input":"dataset = [[1,2,3], [4,5,6], [7,8,9]]\nlabels = [\"a\", \"b\", \"c\"]","output":"import numpy as np\nfrom sklearn.svm import SVC\n\n# Intialize dataset and labels\ndataset = [[1,2,3], [4,5,6], [7,8,9]]\nlabels = [\"a\", \"b\", \"c\"]\n\n# Fit the model\nclf = SVC(gamma='auto')\nclf.fit(dataset, labels)\n\n# Make predictions \nx = [2, 3, 4]\nprediction = clf.predict([x])\nprint(\"The prediction is\", prediction[0])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that uses a machine learning approach to classify a type of data.\n\n### Input:\ndataset = [[1,2,3], [4,5,6], [7,8,9]]\nlabels = [\"a\", \"b\", \"c\"]\n\n### Output:\nimport numpy as np\nfrom sklearn.svm import SVC\n\n# Intialize dataset and labels\ndataset = [[1,2,3], [4,5,6], [7,8,9]]\nlabels = [\"a\", \"b\", \"c\"]\n\n# Fit the model\nclf = SVC(gamma='auto')\nclf.fit(dataset, labels)\n\n# Make predictions \nx = [2, 3, 4]\nprediction = clf.predict([x])\nprint(\"The prediction is\", prediction[0])"}
{"instruction":"Edit a Python program so that it calculates the sum of two integers.","input":"# Program to add two numbers\nnum1 = 3\nnum2 = 5\nprint(3 + 5)","output":"# Program to add two numbers\nnum1 = 3\nnum2 = 5\nprint(num1 + num2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit a Python program so that it calculates the sum of two integers.\n\n### Input:\n# Program to add two numbers\nnum1 = 3\nnum2 = 5\nprint(3 + 5)\n\n### Output:\n# Program to add two numbers\nnum1 = 3\nnum2 = 5\nprint(num1 + num2)"}
{"instruction":"Generate a Python program to merge two sorted list and create a new sorted list","input":"list_a = [1, 3, 5, 7]\nlist_b = [2, 4, 6, 8]","output":"list_a = [1, 3, 5, 7]\nlist_b = [2, 4, 6, 8]\n\ndef merge_sorted_lists(list_a, list_b):\n    merged_list = []\n    i = 0\n    j = 0\n    while i < len(list_a) and j < len(list_b):\n        if list_a[i] < list_b[j]:\n            merged_list.append(list_a[i])\n            i+=1\n        else:\n            merged_list.append(list_b[j])\n            j+=1\n    while i < len(list_a):\n        merged_list.append(list_a[i])\n        i+=1\n    while j < len(list_b):\n        merged_list.append(list_b[j])\n        j+=1\n    return merged_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to merge two sorted list and create a new sorted list\n\n### Input:\nlist_a = [1, 3, 5, 7]\nlist_b = [2, 4, 6, 8]\n\n### Output:\nlist_a = [1, 3, 5, 7]\nlist_b = [2, 4, 6, 8]\n\ndef merge_sorted_lists(list_a, list_b):\n    merged_list = []\n    i = 0\n    j = 0\n    while i < len(list_a) and j < len(list_b):\n        if list_a[i] < list_b[j]:\n            merged_list.append(list_a[i])\n            i+=1\n        else:\n            merged_list.append(list_b[j])\n            j+=1\n    while i < len(list_a):\n        merged_list.append(list_a[i])\n        i+=1\n    while j < len(list_b):\n        merged_list.append(list_b[j])\n        j+=1\n    return merged_list"}
{"instruction":"Implement quick sort in Python.","input":"","output":"def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) \/\/ 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement quick sort in Python.\n\n### Input:\n\n\n### Output:\ndef quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) \/\/ 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)"}
{"instruction":"Create a Python program to convert a list of temperatures from Celcius to Fahrenheit.","input":"temp_list = [30,15,17,18]","output":"temp_list = [30,15,17,18]\n\n# Convert each element in the list to Fahrenheit\nfahrenheit_list = []\n\nfor temp in temp_list:\n fahrenheit_list.append(temp*9\/5 + 32)\n\nprint(fahrenheit_list)\n# [86.0, 59.0, 62.6, 64.4]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to convert a list of temperatures from Celcius to Fahrenheit.\n\n### Input:\ntemp_list = [30,15,17,18]\n\n### Output:\ntemp_list = [30,15,17,18]\n\n# Convert each element in the list to Fahrenheit\nfahrenheit_list = []\n\nfor temp in temp_list:\n fahrenheit_list.append(temp*9\/5 + 32)\n\nprint(fahrenheit_list)\n# [86.0, 59.0, 62.6, 64.4]"}
{"instruction":"Write a Python class to convert an integer to its Roman numeral equivalent.","input":"","output":"class Solution:\n    def int_to_Roman(self, num):\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"M\", \"CM\", \"D\", \"CD\",\n            \"C\", \"XC\", \"L\", \"XL\",\n            \"X\", \"IX\", \"V\", \"IV\",\n            \"I\"\n            ]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num \/\/ val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class to convert an integer to its Roman numeral equivalent.\n\n### Input:\n\n\n### Output:\nclass Solution:\n    def int_to_Roman(self, num):\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"M\", \"CM\", \"D\", \"CD\",\n            \"C\", \"XC\", \"L\", \"XL\",\n            \"X\", \"IX\", \"V\", \"IV\",\n            \"I\"\n            ]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num \/\/ val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num"}
{"instruction":"Generate a correct python program to initialize a dictionary of user-defined size.","input":"","output":"def initialize_dict(size):\n    my_dict = {}\n    for i in range(size):\n        my_dict[i] = None\n    return my_dict","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a correct python program to initialize a dictionary of user-defined size.\n\n### Input:\n\n\n### Output:\ndef initialize_dict(size):\n    my_dict = {}\n    for i in range(size):\n        my_dict[i] = None\n    return my_dict"}
{"instruction":"Write a Python program that creates a new database and a new table in it.","input":"","output":"import mysql.connector\n\n# Create a database connection\nconnection = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"\"\n)\n\n# Create a new database\ncursor = connection.cursor()\ncursor.execute(\"CREATE DATABASE mydatabase\")\n\n# Create a new table in the database\ncursor.execute(\"USE mydatabase\")\ncursor.execute(\"CREATE TABLE mytable (id INT, name VARCHAR(255), age INT)\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that creates a new database and a new table in it.\n\n### Input:\n\n\n### Output:\nimport mysql.connector\n\n# Create a database connection\nconnection = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  passwd=\"\"\n)\n\n# Create a new database\ncursor = connection.cursor()\ncursor.execute(\"CREATE DATABASE mydatabase\")\n\n# Create a new table in the database\ncursor.execute(\"USE mydatabase\")\ncursor.execute(\"CREATE TABLE mytable (id INT, name VARCHAR(255), age INT)\")"}
{"instruction":"Suggest a way to randomize the order of the following list using Python.","input":"array = [1, 2, 3, 4, 5, 6]","output":"import random\narray = [1, 2, 3, 4, 5, 6]\nrandom.shuffle(array)  # shuffle list in-place using a random permutation","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a way to randomize the order of the following list using Python.\n\n### Input:\narray = [1, 2, 3, 4, 5, 6]\n\n### Output:\nimport random\narray = [1, 2, 3, 4, 5, 6]\nrandom.shuffle(array)  # shuffle list in-place using a random permutation"}
{"instruction":"Develop a Python program that embeds a sentence using a pre-trained Word2Vec model?","input":"\"word embeddings are very useful\"","output":"import gensim\n\n# Load the pre-trained Word2Vec model\nmodel = gensim.models.KeyedVectors.load_word2vec_format('GoogleNews-vectors-negative300.bin', binary=True)\n\nsentence = 'word embeddings are very useful'\nwords = sentence.split()\n\n# Embed each word in sentence\nembed = []\nfor word in words:\n    word_embedding = model[word]\n    embed.append(word_embedding)\n\nprint(embed)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that embeds a sentence using a pre-trained Word2Vec model?\n\n### Input:\n\"word embeddings are very useful\"\n\n### Output:\nimport gensim\n\n# Load the pre-trained Word2Vec model\nmodel = gensim.models.KeyedVectors.load_word2vec_format('GoogleNews-vectors-negative300.bin', binary=True)\n\nsentence = 'word embeddings are very useful'\nwords = sentence.split()\n\n# Embed each word in sentence\nembed = []\nfor word in words:\n    word_embedding = model[word]\n    embed.append(word_embedding)\n\nprint(embed)"}
{"instruction":"Create a data structure to store a list of integers in Python.","input":"","output":"int_list = []\n\ndef add_element_to_list(element):\n    int_list.append(element);\n\ndef remove_element_from_list(element):\n    int_list.remove(element);","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a data structure to store a list of integers in Python.\n\n### Input:\n\n\n### Output:\nint_list = []\n\ndef add_element_to_list(element):\n    int_list.append(element);\n\ndef remove_element_from_list(element):\n    int_list.remove(element);"}
{"instruction":"Develop a Python program to identify characters that occur more than once in a string","input":"","output":"def find_duplicate_characters(string):\n    count = {}\n    result = []\n    for char in string:\n        count[char] = count.get(char, 0) + 1\n        if count[char] > 1:\n            result.append(char) \n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to identify characters that occur more than once in a string\n\n### Input:\n\n\n### Output:\ndef find_duplicate_characters(string):\n    count = {}\n    result = []\n    for char in string:\n        count[char] = count.get(char, 0) + 1\n        if count[char] > 1:\n            result.append(char) \n    return result"}
{"instruction":"Write a Python function to detect if a given string contains any vowels.","input":"","output":"def contains_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in string:\n        if char in vowels:\n            return True\n    return False\n\nprint(contains_vowels(\" hello, how are you\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to detect if a given string contains any vowels.\n\n### Input:\n\n\n### Output:\ndef contains_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in string:\n        if char in vowels:\n            return True\n    return False\n\nprint(contains_vowels(\" hello, how are you\"))"}
{"instruction":"Given a list of strings, write a python program to check if all of the strings are palindromes.","input":"strings = ['abba', 'bob', 'acca']","output":"def palindrome_checker(strings):\n    is_palindrome = True\n    for string in strings:\n        if string  != string[::-1]:\n            is_palindrome = False\n            break\n    return is_palindrome\n\nstrings = ['abba', 'bob', 'acca']\n\nprint(palindrome_checker(strings))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of strings, write a python program to check if all of the strings are palindromes.\n\n### Input:\nstrings = ['abba', 'bob', 'acca']\n\n### Output:\ndef palindrome_checker(strings):\n    is_palindrome = True\n    for string in strings:\n        if string  != string[::-1]:\n            is_palindrome = False\n            break\n    return is_palindrome\n\nstrings = ['abba', 'bob', 'acca']\n\nprint(palindrome_checker(strings))"}
{"instruction":"This code performs a series of calculations and plots based on input data. Before running the script, run eval_spectrum.py and calibration.py with appropriate measurements. The script imports necessary modules and functions from external sources. The main function loads the input data, performs calibration, calculates various values, and generates plots based on instructions provided in a separate text file. The generated plots show absorbed power vs emitted power, absorbed power vs reflectivity, and dissipated power vs wavelength. The script also calculates thermal resistance and displays it on the plot. To run the code, execute the main function.","input":"","output":"#! \/usr\/bin\/python2.7\n# -*- coding: utf-8 -*-\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport errorvalues as ev # github.com\/stefantkeller\/errorvalues\n\nfrom VECSELsetup.eval.varycolor import varycolor\nfrom VECSELsetup.eval.gen_functions import load, extract, plotinstructions_write, plotinstructions_read, lut_from_calibfolder, lut_interp_from_calibfolder, thermal_resistance\n\n\ndef main():\n    # before running this script:\n    #   run eval_spectrum.py to provide the .._eval.csv files required for the spectra\n    #   run calibration.py (with appropriate calib measurements)\n    # and don't forget temperature_heatsink (this is not necessary for this script here, but it provides interesting insights for the measurement at hand)\n    logfile = '..\/24_LL_ev\/20150211_sample21-1-d6\/spot333um.csv'\n    calib_folder = '..\/24_LL_ev\/20150204_calib_333um_s21-1-d6'\n    \n    \n    #------------------------------------\n    # calibration\n    emis_lut = lut_from_calibfolder(calib_folder,identifiers=['Laser'],ignore_error=False) # emission has constant value solely due to BS, no ND in front of detector etc.\n    pump_lut, refl_lut = lut_interp_from_calibfolder(calib_folder,identifiers=['Pump','Refl'])\n    \n    \n    #------------------------------------\n    # load measurement\n    current_set, current, pump, refl, laser, spectra, meantemp = extract(logfile, identifiers=['Current','Pump','Refl','Laser','Spectra', 'Temperature'])\n    Temperatures = sorted(current_set.keys()) # set temperatures (round numbers like 15.0 or 22.5 etc)\n    T_out = dict((T,meantemp[T].round(1)) for T in Temperatures) # real temperatures for display in plot, including +-uncertainty\n\n\n    #------------------------------------\n    # calculate using calibration\n    absorbed, reflected, emitted, pumped, dissipated = {}, {}, {}, {}, {}\n    for T in Temperatures:\n        reflected[T] = refl_lut(refl[T])\n        pumped[T] = pump_lut(pump[T])\n        absorbed[T] = pumped[T] - reflected[T]\n        emitted[T] = emis_lut(laser[T])\n        dissipated[T] = absorbed[T] - emitted[T]\n\n        \n    #\n    #------------------------------------\n    # invoke instructions for plot and fit\n    # plotting the data can be tricky to reproduce, store the plot properties in a text file and read from there!\n    # (easy to repeat the plot at a later time)\n    # open the instruction file in a text editor, edit the instructions and run this module again; it will use the new instructions\n    instrfile = logfile[:-4]+'_instr.csv'\n    plotinstructions_write(instrfile,Temperatures,calib_folder)\n    \n    #------------------------------------\n    # retrieve instructions\n    instr = plotinstructions_read(instrfile)\n    \n    #\n    #------------------------------------\n    # translate instructions\n    str2lst = lambda s: map(float,s[1:-1].split(','))\n\n    textx = float(instr['textx']) # x coordinate for text; same for first two subplots (absorbed-emitted and absorbed-reflectivity)\n    fontsize = float(instr['fontsize'])\n    title = instr['title']\n    xlim = str2lst(instr['xlim']) # range of x-axis; same for first two subplots\n    ylim1 = str2lst(instr['ylim1']) # range of y-axis of first (aborbed-emitted) plot\n    ylim2 = str2lst(instr['ylim2']) # range of second y-axis (absorbed-reflectivity)\n    xlim3 = str2lst(instr['xlim3']) # third x-axis; (dissipated-wavelength)\n    ylim3 = str2lst(instr['ylim3']) # 3rd y-axis\n    plot_temps_for_3 = str2lst(instr['plot_temps_for_3']) # which ones to plot? you may have measured a heat sink temperature without lasing output, whose data will confuse the reader, so you don't plot it.\n    textx3 = float(instr['textx3']) # x-coordinate of text in 3rd plot\n    texty3 = str2lst(instr['texty3']) # 3rd y-coordinate\n    llow0 = {}\n    lhigh0 = {}\n    texty1 = {}\n    for T in Temperatures:\n        llow0[T] = sum(absorbed[T].v()<float(instr['llow0[{0}]'.format(T)])) # index indicating start of lasing activity\n        lhigh0[T] = sum(absorbed[T].v()<float(instr['lhigh0[{0}]'.format(T)])) # index corresponding to where linear segment stops\n        texty1[T] = float(instr['texty1[{0}]'.format(T)])\n\n    \n    \n    #\n    #\n    #------------------------------------\n    #------------------------------------\n    # plot\n    cols = varycolor(3*len(Temperatures))\n\n\n    plt.subplot(3,1,1)\n    cnt = 0 # color counter\n\n    q0,m0 = {},{} # for linreg\n    for T in Temperatures:\n\n        # linreg\n        q0[T],m0[T] = ev.linreg(absorbed[T].v()[llow0[T]:lhigh0[T]],\n                                emitted[T].v()[llow0[T]:lhigh0[T]],\n                                emitted[T].e()[llow0[T]:lhigh0[T]],\n                                overwrite_zeroerrors=True)\n\n        emax,emaxi = ev.max(emitted[T],True)\n        amax = absorbed[T][emaxi]\n        print 'Max emission at ({}) degC at ({}) W absorbed power: ({}) W'.format(T_out[T],amax,emax)\n        # plot\n        plt.errorbar(absorbed[T].v(),emitted[T].v(),\n                     xerr=absorbed[T].e(),yerr=emitted[T].e(),\n                     c=cols[cnt],linestyle=' ')\n        plt.plot(absorbed[T].v(),m0[T].v()*absorbed[T].v()+q0[T].v(),c=cols[cnt+1])\n\n        plt.text(textx,texty1[T],\n                 '${0}$$^\\circ$C: ${1}$ %'.format(T_out[T],m0[T].round(3)*100),\n                 color=cols[cnt],fontsize=fontsize)\n        cnt+=3\n\n    plt.title(title)\n    plt.xlabel('Absorbed power (W)')\n    plt.ylabel('Emited power (W)')\n    plt.xlim(xlim)\n    plt.ylim(ylim1)\n    plt.grid('on')\n    \n    #plt.show()\n\n    \n    #------------------------------------\n    plt.subplot(3,1,2)\n    cnt = 0 # reset color counter\n\n    q1,m1 = {},{}\n    for T in Temperatures:\n        relref = reflected[T]\/pumped[T]*100\n        \n        # plot\n        plt.errorbar(absorbed[T].v(),relref.v(),\n                     xerr=absorbed[T].e(),yerr=relref.e(),\n                     c=cols[cnt],linestyle=' ')\n        cnt+=3\n\n    plt.title(title)\n    plt.xlabel('Absorbed power (W)')\n    plt.ylabel('Reflectivity (%)')\n    plt.xlim(xlim)\n    plt.ylim(ylim2)\n    plt.grid('on')\n\n    #plt.show()\n    \n    #------------------------------------\n    # plot dissipation and spectra\n    plt.subplot(3,1,3)\n    cnt = 0 # reset\n    \n    q3,m3 = {},{}\n    for T in Temperatures:\n        if T in plot_temps_for_3:\n            # lambda_short\n            #plt.errorbar(dissipated[T].v(),spectra[T][0].v(), \n            #             xerr=dissipated[T].e(),yerr=spectra[T][0].e(),\n            #             c=cols[cnt],linestyle=' ')\n        \n            # lambda_long\n            # lin reg for range that lases (>threshold, <roll over), hence instr from subplot 1\n            q3[T],m3[T] = ev.linreg(dissipated[T].v()[llow0[T]:lhigh0[T]],\n                                    spectra[T][1].v()[llow0[T]:lhigh0[T]],\n                                    spectra[T][1].e()[llow0[T]:lhigh0[T]],\n                                    overwrite_zeroerrors=True)\n            \n            # show only a part, not to confuse reader\n            #plt.errorbar(dissipated[T].v()[llow0[T]:lhigh0[T]],spectra[T][1].v()[llow0[T]:lhigh0[T]], \n            #             xerr=dissipated[T].e()[llow0[T]:lhigh0[T]],yerr=spectra[T][1].e()[llow0[T]:lhigh0[T]],\n            #             c=cols[cnt],linestyle=' ')\n            \n            # show the whole range\n            plt.errorbar(dissipated[T].v(),spectra[T][1].v(), \n                         xerr=dissipated[T].e(),yerr=spectra[T][1].e(),\n                         c=cols[cnt],linestyle=' ')\n            \n        cnt += 3\n\n    plt.title(title)\n    plt.xlim(xlim3)\n    plt.ylim(ylim3)\n    plt.xlim()\n    plt.xlabel('Dissipated power (W)')\n    plt.ylabel('Wavelength (nm)')\n    plt.grid('on')\n    cnt = 0 # reset\n    \n    \n    wavelength = ev.errvallist([q3[T] for T in plot_temps_for_3]) # wavelength offsets\n    slopes = ev.errvallist([m3[T] for T in plot_temps_for_3]) # slopes\n    T_active = ev.errvallist([T_out[T] for T in plot_temps_for_3])\n    \n    dldD, dldT, l0 = thermal_resistance(T_active,wavelength,slopes) #, R_th\n    R_th = dldD\/dldT\n    for T in Temperatures:\n        if T in plot_temps_for_3:\n            plt.plot(dissipated[T].v(),l0.v() + dldT.v()*T_out[T].v() + dldD.v()*dissipated[T].v(),c=cols[cnt+1])\n        cnt+=3\n    \n    plt.text(textx3,texty3[0],\n             '$\\lambda=$'+'$({})$'.format(dldT.round(3))+'$T_{hs}+$'+'$({})$'.format(dldD.round(3))+'$D+$'+'${}$'.format(l0.round(3)),\n             color='k')\n    \n    R_th = R_th.round(2)\n    therm_imp = 'Thermal impedance: $({0})$ K\/W'.format(R_th)\n    plt.text(textx3,texty3[1],\n             therm_imp,color='k')\n    print therm_imp\n\n    \n    for T in Temperatures:\n        print meantemp[T]\n    \n    plt.show()\n\n\n\nif __name__ == \"__main__\":\n    main()\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code performs a series of calculations and plots based on input data. Before running the script, run eval_spectrum.py and calibration.py with appropriate measurements. The script imports necessary modules and functions from external sources. The main function loads the input data, performs calibration, calculates various values, and generates plots based on instructions provided in a separate text file. The generated plots show absorbed power vs emitted power, absorbed power vs reflectivity, and dissipated power vs wavelength. The script also calculates thermal resistance and displays it on the plot. To run the code, execute the main function.\n\n### Input:\n\n\n### Output:\n#! \/usr\/bin\/python2.7\n# -*- coding: utf-8 -*-\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport errorvalues as ev # github.com\/stefantkeller\/errorvalues\n\nfrom VECSELsetup.eval.varycolor import varycolor\nfrom VECSELsetup.eval.gen_functions import load, extract, plotinstructions_write, plotinstructions_read, lut_from_calibfolder, lut_interp_from_calibfolder, thermal_resistance\n\n\ndef main():\n    # before running this script:\n    #   run eval_spectrum.py to provide the .._eval.csv files required for the spectra\n    #   run calibration.py (with appropriate calib measurements)\n    # and don't forget temperature_heatsink (this is not necessary for this script here, but it provides interesting insights for the measurement at hand)\n    logfile = '..\/24_LL_ev\/20150211_sample21-1-d6\/spot333um.csv'\n    calib_folder = '..\/24_LL_ev\/20150204_calib_333um_s21-1-d6'\n    \n    \n    #------------------------------------\n    # calibration\n    emis_lut = lut_from_calibfolder(calib_folder,identifiers=['Laser'],ignore_error=False) # emission has constant value solely due to BS, no ND in front of detector etc.\n    pump_lut, refl_lut = lut_interp_from_calibfolder(calib_folder,identifiers=['Pump','Refl'])\n    \n    \n    #------------------------------------\n    # load measurement\n    current_set, current, pump, refl, laser, spectra, meantemp = extract(logfile, identifiers=['Current','Pump','Refl','Laser','Spectra', 'Temperature'])\n    Temperatures = sorted(current_set.keys()) # set temperatures (round numbers like 15.0 or 22.5 etc)\n    T_out = dict((T,meantemp[T].round(1)) for T in Temperatures) # real temperatures for display in plot, including +-uncertainty\n\n\n    #------------------------------------\n    # calculate using calibration\n    absorbed, reflected, emitted, pumped, dissipated = {}, {}, {}, {}, {}\n    for T in Temperatures:\n        reflected[T] = refl_lut(refl[T])\n        pumped[T] = pump_lut(pump[T])\n        absorbed[T] = pumped[T] - reflected[T]\n        emitted[T] = emis_lut(laser[T])\n        dissipated[T] = absorbed[T] - emitted[T]\n\n        \n    #\n    #------------------------------------\n    # invoke instructions for plot and fit\n    # plotting the data can be tricky to reproduce, store the plot properties in a text file and read from there!\n    # (easy to repeat the plot at a later time)\n    # open the instruction file in a text editor, edit the instructions and run this module again; it will use the new instructions\n    instrfile = logfile[:-4]+'_instr.csv'\n    plotinstructions_write(instrfile,Temperatures,calib_folder)\n    \n    #------------------------------------\n    # retrieve instructions\n    instr = plotinstructions_read(instrfile)\n    \n    #\n    #------------------------------------\n    # translate instructions\n    str2lst = lambda s: map(float,s[1:-1].split(','))\n\n    textx = float(instr['textx']) # x coordinate for text; same for first two subplots (absorbed-emitted and absorbed-reflectivity)\n    fontsize = float(instr['fontsize'])\n    title = instr['title']\n    xlim = str2lst(instr['xlim']) # range of x-axis; same for first two subplots\n    ylim1 = str2lst(instr['ylim1']) # range of y-axis of first (aborbed-emitted) plot\n    ylim2 = str2lst(instr['ylim2']) # range of second y-axis (absorbed-reflectivity)\n    xlim3 = str2lst(instr['xlim3']) # third x-axis; (dissipated-wavelength)\n    ylim3 = str2lst(instr['ylim3']) # 3rd y-axis\n    plot_temps_for_3 = str2lst(instr['plot_temps_for_3']) # which ones to plot? you may have measured a heat sink temperature without lasing output, whose data will confuse the reader, so you don't plot it.\n    textx3 = float(instr['textx3']) # x-coordinate of text in 3rd plot\n    texty3 = str2lst(instr['texty3']) # 3rd y-coordinate\n    llow0 = {}\n    lhigh0 = {}\n    texty1 = {}\n    for T in Temperatures:\n        llow0[T] = sum(absorbed[T].v()<float(instr['llow0[{0}]'.format(T)])) # index indicating start of lasing activity\n        lhigh0[T] = sum(absorbed[T].v()<float(instr['lhigh0[{0}]'.format(T)])) # index corresponding to where linear segment stops\n        texty1[T] = float(instr['texty1[{0}]'.format(T)])\n\n    \n    \n    #\n    #\n    #------------------------------------\n    #------------------------------------\n    # plot\n    cols = varycolor(3*len(Temperatures))\n\n\n    plt.subplot(3,1,1)\n    cnt = 0 # color counter\n\n    q0,m0 = {},{} # for linreg\n    for T in Temperatures:\n\n        # linreg\n        q0[T],m0[T] = ev.linreg(absorbed[T].v()[llow0[T]:lhigh0[T]],\n                                emitted[T].v()[llow0[T]:lhigh0[T]],\n                                emitted[T].e()[llow0[T]:lhigh0[T]],\n                                overwrite_zeroerrors=True)\n\n        emax,emaxi = ev.max(emitted[T],True)\n        amax = absorbed[T][emaxi]\n        print 'Max emission at ({}) degC at ({}) W absorbed power: ({}) W'.format(T_out[T],amax,emax)\n        # plot\n        plt.errorbar(absorbed[T].v(),emitted[T].v(),\n                     xerr=absorbed[T].e(),yerr=emitted[T].e(),\n                     c=cols[cnt],linestyle=' ')\n        plt.plot(absorbed[T].v(),m0[T].v()*absorbed[T].v()+q0[T].v(),c=cols[cnt+1])\n\n        plt.text(textx,texty1[T],\n                 '${0}$$^\\circ$C: ${1}$ %'.format(T_out[T],m0[T].round(3)*100),\n                 color=cols[cnt],fontsize=fontsize)\n        cnt+=3\n\n    plt.title(title)\n    plt.xlabel('Absorbed power (W)')\n    plt.ylabel('Emited power (W)')\n    plt.xlim(xlim)\n    plt.ylim(ylim1)\n    plt.grid('on')\n    \n    #plt.show()\n\n    \n    #------------------------------------\n    plt.subplot(3,1,2)\n    cnt = 0 # reset color counter\n\n    q1,m1 = {},{}\n    for T in Temperatures:\n        relref = reflected[T]\/pumped[T]*100\n        \n        # plot\n        plt.errorbar(absorbed[T].v(),relref.v(),\n                     xerr=absorbed[T].e(),yerr=relref.e(),\n                     c=cols[cnt],linestyle=' ')\n        cnt+=3\n\n    plt.title(title)\n    plt.xlabel('Absorbed power (W)')\n    plt.ylabel('Reflectivity (%)')\n    plt.xlim(xlim)\n    plt.ylim(ylim2)\n    plt.grid('on')\n\n    #plt.show()\n    \n    #------------------------------------\n    # plot dissipation and spectra\n    plt.subplot(3,1,3)\n    cnt = 0 # reset\n    \n    q3,m3 = {},{}\n    for T in Temperatures:\n        if T in plot_temps_for_3:\n            # lambda_short\n            #plt.errorbar(dissipated[T].v(),spectra[T][0].v(), \n            #             xerr=dissipated[T].e(),yerr=spectra[T][0].e(),\n            #             c=cols[cnt],linestyle=' ')\n        \n            # lambda_long\n            # lin reg for range that lases (>threshold, <roll over), hence instr from subplot 1\n            q3[T],m3[T] = ev.linreg(dissipated[T].v()[llow0[T]:lhigh0[T]],\n                                    spectra[T][1].v()[llow0[T]:lhigh0[T]],\n                                    spectra[T][1].e()[llow0[T]:lhigh0[T]],\n                                    overwrite_zeroerrors=True)\n            \n            # show only a part, not to confuse reader\n            #plt.errorbar(dissipated[T].v()[llow0[T]:lhigh0[T]],spectra[T][1].v()[llow0[T]:lhigh0[T]], \n            #             xerr=dissipated[T].e()[llow0[T]:lhigh0[T]],yerr=spectra[T][1].e()[llow0[T]:lhigh0[T]],\n            #             c=cols[cnt],linestyle=' ')\n            \n            # show the whole range\n            plt.errorbar(dissipated[T].v(),spectra[T][1].v(), \n                         xerr=dissipated[T].e(),yerr=spectra[T][1].e(),\n                         c=cols[cnt],linestyle=' ')\n            \n        cnt += 3\n\n    plt.title(title)\n    plt.xlim(xlim3)\n    plt.ylim(ylim3)\n    plt.xlim()\n    plt.xlabel('Dissipated power (W)')\n    plt.ylabel('Wavelength (nm)')\n    plt.grid('on')\n    cnt = 0 # reset\n    \n    \n    wavelength = ev.errvallist([q3[T] for T in plot_temps_for_3]) # wavelength offsets\n    slopes = ev.errvallist([m3[T] for T in plot_temps_for_3]) # slopes\n    T_active = ev.errvallist([T_out[T] for T in plot_temps_for_3])\n    \n    dldD, dldT, l0 = thermal_resistance(T_active,wavelength,slopes) #, R_th\n    R_th = dldD\/dldT\n    for T in Temperatures:\n        if T in plot_temps_for_3:\n            plt.plot(dissipated[T].v(),l0.v() + dldT.v()*T_out[T].v() + dldD.v()*dissipated[T].v(),c=cols[cnt+1])\n        cnt+=3\n    \n    plt.text(textx3,texty3[0],\n             '$\\lambda=$'+'$({})$'.format(dldT.round(3))+'$T_{hs}+$'+'$({})$'.format(dldD.round(3))+'$D+$'+'${}$'.format(l0.round(3)),\n             color='k')\n    \n    R_th = R_th.round(2)\n    therm_imp = 'Thermal impedance: $({0})$ K\/W'.format(R_th)\n    plt.text(textx3,texty3[1],\n             therm_imp,color='k')\n    print therm_imp\n\n    \n    for T in Temperatures:\n        print meantemp[T]\n    \n    plt.show()\n\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"instruction":"Create a function to calculate the sum of two values in Python.","input":"< noinput >","output":"def add_two_numbers(x, y):\n    sum = x + y\n    return sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to calculate the sum of two values in Python.\n\n### Input:\n< noinput >\n\n### Output:\ndef add_two_numbers(x, y):\n    sum = x + y\n    return sum"}
{"instruction":"Using the data provided, write a Python program to find and print the root of the quadratic equation ax2 + bx + c = 0","input":"a = 1, b = 5, c = 6","output":"import math\n\na = 1\nb = 5\nc = 6\n\n# calculate the discriminant\nd = (b**2) - (4*a*c)\n\n# find the two solutions \nsol1 = (-b-math.sqrt(d))\/(2*a)\nsol2 = (-b+math.sqrt(d))\/(2*a)\n\nprint('The solutions are {0} and {1}'.format(sol1, sol2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the data provided, write a Python program to find and print the root of the quadratic equation ax2 + bx + c = 0\n\n### Input:\na = 1, b = 5, c = 6\n\n### Output:\nimport math\n\na = 1\nb = 5\nc = 6\n\n# calculate the discriminant\nd = (b**2) - (4*a*c)\n\n# find the two solutions \nsol1 = (-b-math.sqrt(d))\/(2*a)\nsol2 = (-b+math.sqrt(d))\/(2*a)\n\nprint('The solutions are {0} and {1}'.format(sol1, sol2))"}
{"instruction":"This code generates a dependency graph for frameworks in a given system library path. To use it, run the script with the path to the system library as the first argument, and optionally provide one or more framework names to determine what depends on them. The output will be a dot file representing the dependency graph.","input":"","output":"#!\/usr\/bin\/env python\n\"\"\"\nThe MIT License (MIT)\n\nCopyright (c) 2013 Andrew Wooster\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and\/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\"\"\"\nimport os\nimport subprocess\nimport sys\n\ndef escape_arg(argument):\n    \"\"\"Escapes an argument to a command line utility.\"\"\"\n    argument = argument.replace('\\\\', \"\\\\\\\\\").replace(\"'\", \"\\'\").replace('\"', '\\\\\"').replace(\"!\", \"\\\\!\").replace(\"`\", \"\\\\`\")\n    return \"\\\"%s\\\"\" % argument\n\ndef run_command(command, verbose=False):\n    \"\"\"Runs the command and returns the status and the output.\"\"\"\n    if verbose:\n        sys.stderr.write(\"Running: %s\\n\" % command)\n    p = subprocess.Popen(command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE)\n    stdin, stdout = (p.stdin, p.stdout)\n    output = stdout.read()\n    output = output.strip(\"\\n\")\n    status = stdin.close()\n    stdout.close()\n    p.wait()\n    return (p.returncode, output)\n\nDEPENDENCY_PRIVATE = 'Private'\nDEPENDENCY_PUBLIC = 'Public'\nDEPENDENCY_UNKNOWN = 'Unknown'\n\ndef dependencies_for_resolved_framework_path(lib_base, framework_path, dependencies, dep_to_visibility, exclude_dylibs=True):\n    def visibility_from_path(path):\n        visibility = DEPENDENCY_UNKNOWN\n        if '\/PrivateFrameworks\/' in path:\n            visibility = DEPENDENCY_PRIVATE\n        elif '\/Frameworks\/' in path:\n            visibility = DEPENDENCY_PUBLIC\n        return visibility\n    \n    real_framework_path = framework_path\n    if not framework_path.startswith(lib_base):\n        real_framework_path = lib_base + framework_path\n        if not os.path.exists(real_framework_path):\n            real_framework_path = framework_path\n    if not os.path.exists(real_framework_path):\n        print >> sys.stderr, \"Unable to find framework:\", real_framework_path\n        return\n    \n    (path, filename) = os.path.split(real_framework_path)\n    (base, ext) = os.path.splitext(filename)\n    (status, output) = run_command(\"otool -L %s\" % escape_arg(real_framework_path))\n    lines = output.splitlines()\n    \n    dep_to_visibility[base] = visibility_from_path(real_framework_path)\n    \n    for line in lines:\n        if not line.startswith(\"\\t\"):\n            continue\n        if not \"(\" in line:\n            continue\n        parts = line.split(\"(\")\n        if not len(parts) > 1:\n            continue\n        f_path = parts[0].strip()\n        (_, depname) = os.path.split(f_path)\n        if depname == base:\n            # Exclude self-dependency.\n            continue\n        visibility = visibility_from_path(f_path)\n        if exclude_dylibs and f_path.endswith(\"dylib\"):\n            continue\n        \n        should_recurse = (dep_to_visibility.get(depname) is None)\n        dep_to_visibility[depname] = visibility\n        dependencies.setdefault(base, [])\n        if not depname in dependencies[base]:\n            dependencies[base].append(depname)\n        if should_recurse:\n            dependencies_for_resolved_framework_path(lib_base, f_path, dependencies, dep_to_visibility, exclude_dylibs=exclude_dylibs)\n\ndef dependencies_for_framework_path(framework_path, dependencies, dep_to_visibility, exclude_dylibs=True):\n    (path, filename) = os.path.split(framework_path)\n    (base, ext) = os.path.splitext(filename)\n    lib_path = os.path.join(framework_path, base)\n    lib_parts = lib_path.split(os.sep)\n    lib_base_parts = []\n    for part in lib_parts:\n        if part == \"System\":\n            break\n        lib_base_parts.append(part)\n    lib_base = os.sep.join(lib_base_parts)\n    return dependencies_for_resolved_framework_path(lib_base, lib_path, dependencies, dep_to_visibility, exclude_dylibs=exclude_dylibs)\n\ndef dependencies_for_system_library_path(library_path):\n    entries = os.listdir(library_path)\n    if \"\/System\/Library\" not in library_path or \"Frameworks\" not in entries or \"PrivateFrameworks\" not in entries:\n        print >> sys.stderr, \"Path doesn't look like it points to the System\/Library folder of an SDK.\"\n        sys.exit(1)\n    dependencies = {}\n    dep_to_visibility = {}\n    def update_dependencies(dependencies, dep_to_visibility, library_path, f_path):\n        framework_paths = os.listdir(os.path.join(library_path, f_path))\n        for framework_path in framework_paths:\n            if not framework_path.endswith(\".framework\"):\n                continue\n            full_path = os.path.join(library_path, f_path, framework_path)\n            dependencies_for_framework_path(full_path, dependencies, dep_to_visibility)\n    update_dependencies(dependencies, dep_to_visibility, library_path, \"Frameworks\")\n    update_dependencies(dependencies, dep_to_visibility, library_path, \"PrivateFrameworks\")\n    return (dependencies, dep_to_visibility)\n\ndef dot_for_dependencies(dependencies, dep_to_visibility, framework_depnames=None):\n    l = []\n    l.append(\"digraph G {\")\n    l.append(\"\\tnode [shape=box];\")\n    \n    def color_for_visibility(visibility):\n        if visibility == DEPENDENCY_PRIVATE:\n            return \"#FFD1E0\"\n        elif visibility == DEPENDENCY_PUBLIC:\n            return \"#D1FFD2\"\n        else:\n            return \"#FFFFFF\"\n    \n    \n    if framework_depnames is None:\n        nodes = {}\n        seen_deps = []\n        i = 0\n        for framework_name, visibility in dep_to_visibility.iteritems():\n            if framework_name in seen_deps:\n                continue\n            nodename = \"Node%d\" % i\n            i += 1\n            nodes[framework_name] = nodename\n            seen_deps.append(framework_name)\n            color = color_for_visibility(dep_to_visibility[framework_name])\n            l.append(\"\\t%s [label=\\\"%s\\\", fillcolor=\\\"%s\\\"];\" % (nodename, framework_name, color))\n        for framework_name, deps in dependencies.iteritems():\n            if nodes.get(framework_name) is None:\n                print >> sys.stderr, \"Unknown node\", framework_name\n                continue\n            from_nodename = nodes[framework_name]\n            if len(deps) == 0:\n                l.append(\"\\t\\\"%s\\\" -> {};\" % framework_name)\n            for lib_name in deps:\n                to_nodename = nodes[lib_name]\n                l.append(\"\\t%s -> %s; \/\/ %s -> %s\" % (from_nodename, to_nodename, framework_name, lib_name))\n    else:\n        def gather_dependents(dependencies, framework_name, seen=None):\n            \"\"\"Get a list of all the frameworks wich depend on framework_name, recursively.\"\"\"\n            results = []\n            if seen is None:\n                seen = []\n            for framework, deps in dependencies.iteritems():\n                if framework_name in deps:\n                    if framework in seen:\n                        continue\n                    seen.append(framework)\n                    # framework depends on framework_name\n                    results.append(framework_name)\n                    for result in gather_dependents(dependencies, framework, seen=seen):\n                        results.append(result)\n            return list(set(results))\n        frameworks_to_print = []\n        for framework_depname in framework_depnames:\n            for f in gather_dependents(dependencies, framework_depname):\n                frameworks_to_print.append(f)\n        frameworks_to_print = list(set(frameworks_to_print))\n        nodes = {}\n        seen_deps = []\n        i = 0\n        for framework_name, visibility in dep_to_visibility.iteritems():\n            if framework_name in seen_deps:\n                continue\n            if framework_name not in frameworks_to_print:\n                continue\n            nodename = \"Node%d\" % i\n            i += 1\n            nodes[framework_name] = nodename\n            seen_deps.append(framework_name)\n            color = color_for_visibility(dep_to_visibility[framework_name])\n            l.append(\"\\t%s [label=\\\"%s\\\", style=filled, fillcolor=\\\"%s\\\"];\" % (nodename, framework_name, color))\n        for framework_name, deps in dependencies.iteritems():\n            if framework_name in frameworks_to_print:\n                if nodes.get(framework_name) is None:\n                    print >> sys.stderr, \"Unknown node\", framework_name\n                    continue\n                from_nodename = nodes[framework_name]\n                if len(deps) == 0:\n                    l.append(\"\\t\\\"%s\\\" -> {};\" % framework_name)\n                for lib_name in deps:\n                    if lib_name in frameworks_to_print:\n                        to_nodename = nodes[lib_name]\n                        l.append(\"\\t%s -> %s; \/\/ %s -> %s\" % (from_nodename, to_nodename, framework_name, lib_name))\n                \n    l.append(\"}\\n\")\n    return \"\\n\".join(l)\n\ndef main(library_path, framework_depnames=None):\n    library_path = os.path.expanduser(library_path)\n    (dependencies, dep_to_visibility) = dependencies_for_system_library_path(library_path)\n    dot_output = dot_for_dependencies(dependencies, dep_to_visibility, framework_depnames=framework_depnames)\n    print >> sys.stdout, dot_output\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 2:\n        print >> sys.stderr, \"Usage: %s [SDK System Library Path] [framework name ...]\"\n        print >> sys.stderr, \"  Where the library path is like \/System\/Library\"\n        print >> sys.stderr, \"  Where the framework name (optional) is one to determine what depends on it\"\n        sys.exit(1)\n    framework_depnames = None\n    if len(sys.argv) > 2:\n        framework_depnames = sys.argv[2:]\n    main(sys.argv[1], framework_depnames=framework_depnames)\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code generates a dependency graph for frameworks in a given system library path. To use it, run the script with the path to the system library as the first argument, and optionally provide one or more framework names to determine what depends on them. The output will be a dot file representing the dependency graph.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n\"\"\"\nThe MIT License (MIT)\n\nCopyright (c) 2013 Andrew Wooster\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and\/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\"\"\"\nimport os\nimport subprocess\nimport sys\n\ndef escape_arg(argument):\n    \"\"\"Escapes an argument to a command line utility.\"\"\"\n    argument = argument.replace('\\\\', \"\\\\\\\\\").replace(\"'\", \"\\'\").replace('\"', '\\\\\"').replace(\"!\", \"\\\\!\").replace(\"`\", \"\\\\`\")\n    return \"\\\"%s\\\"\" % argument\n\ndef run_command(command, verbose=False):\n    \"\"\"Runs the command and returns the status and the output.\"\"\"\n    if verbose:\n        sys.stderr.write(\"Running: %s\\n\" % command)\n    p = subprocess.Popen(command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE)\n    stdin, stdout = (p.stdin, p.stdout)\n    output = stdout.read()\n    output = output.strip(\"\\n\")\n    status = stdin.close()\n    stdout.close()\n    p.wait()\n    return (p.returncode, output)\n\nDEPENDENCY_PRIVATE = 'Private'\nDEPENDENCY_PUBLIC = 'Public'\nDEPENDENCY_UNKNOWN = 'Unknown'\n\ndef dependencies_for_resolved_framework_path(lib_base, framework_path, dependencies, dep_to_visibility, exclude_dylibs=True):\n    def visibility_from_path(path):\n        visibility = DEPENDENCY_UNKNOWN\n        if '\/PrivateFrameworks\/' in path:\n            visibility = DEPENDENCY_PRIVATE\n        elif '\/Frameworks\/' in path:\n            visibility = DEPENDENCY_PUBLIC\n        return visibility\n    \n    real_framework_path = framework_path\n    if not framework_path.startswith(lib_base):\n        real_framework_path = lib_base + framework_path\n        if not os.path.exists(real_framework_path):\n            real_framework_path = framework_path\n    if not os.path.exists(real_framework_path):\n        print >> sys.stderr, \"Unable to find framework:\", real_framework_path\n        return\n    \n    (path, filename) = os.path.split(real_framework_path)\n    (base, ext) = os.path.splitext(filename)\n    (status, output) = run_command(\"otool -L %s\" % escape_arg(real_framework_path))\n    lines = output.splitlines()\n    \n    dep_to_visibility[base] = visibility_from_path(real_framework_path)\n    \n    for line in lines:\n        if not line.startswith(\"\\t\"):\n            continue\n        if not \"(\" in line:\n            continue\n        parts = line.split(\"(\")\n        if not len(parts) > 1:\n            continue\n        f_path = parts[0].strip()\n        (_, depname) = os.path.split(f_path)\n        if depname == base:\n            # Exclude self-dependency.\n            continue\n        visibility = visibility_from_path(f_path)\n        if exclude_dylibs and f_path.endswith(\"dylib\"):\n            continue\n        \n        should_recurse = (dep_to_visibility.get(depname) is None)\n        dep_to_visibility[depname] = visibility\n        dependencies.setdefault(base, [])\n        if not depname in dependencies[base]:\n            dependencies[base].append(depname)\n        if should_recurse:\n            dependencies_for_resolved_framework_path(lib_base, f_path, dependencies, dep_to_visibility, exclude_dylibs=exclude_dylibs)\n\ndef dependencies_for_framework_path(framework_path, dependencies, dep_to_visibility, exclude_dylibs=True):\n    (path, filename) = os.path.split(framework_path)\n    (base, ext) = os.path.splitext(filename)\n    lib_path = os.path.join(framework_path, base)\n    lib_parts = lib_path.split(os.sep)\n    lib_base_parts = []\n    for part in lib_parts:\n        if part == \"System\":\n            break\n        lib_base_parts.append(part)\n    lib_base = os.sep.join(lib_base_parts)\n    return dependencies_for_resolved_framework_path(lib_base, lib_path, dependencies, dep_to_visibility, exclude_dylibs=exclude_dylibs)\n\ndef dependencies_for_system_library_path(library_path):\n    entries = os.listdir(library_path)\n    if \"\/System\/Library\" not in library_path or \"Frameworks\" not in entries or \"PrivateFrameworks\" not in entries:\n        print >> sys.stderr, \"Path doesn't look like it points to the System\/Library folder of an SDK.\"\n        sys.exit(1)\n    dependencies = {}\n    dep_to_visibility = {}\n    def update_dependencies(dependencies, dep_to_visibility, library_path, f_path):\n        framework_paths = os.listdir(os.path.join(library_path, f_path))\n        for framework_path in framework_paths:\n            if not framework_path.endswith(\".framework\"):\n                continue\n            full_path = os.path.join(library_path, f_path, framework_path)\n            dependencies_for_framework_path(full_path, dependencies, dep_to_visibility)\n    update_dependencies(dependencies, dep_to_visibility, library_path, \"Frameworks\")\n    update_dependencies(dependencies, dep_to_visibility, library_path, \"PrivateFrameworks\")\n    return (dependencies, dep_to_visibility)\n\ndef dot_for_dependencies(dependencies, dep_to_visibility, framework_depnames=None):\n    l = []\n    l.append(\"digraph G {\")\n    l.append(\"\\tnode [shape=box];\")\n    \n    def color_for_visibility(visibility):\n        if visibility == DEPENDENCY_PRIVATE:\n            return \"#FFD1E0\"\n        elif visibility == DEPENDENCY_PUBLIC:\n            return \"#D1FFD2\"\n        else:\n            return \"#FFFFFF\"\n    \n    \n    if framework_depnames is None:\n        nodes = {}\n        seen_deps = []\n        i = 0\n        for framework_name, visibility in dep_to_visibility.iteritems():\n            if framework_name in seen_deps:\n                continue\n            nodename = \"Node%d\" % i\n            i += 1\n            nodes[framework_name] = nodename\n            seen_deps.append(framework_name)\n            color = color_for_visibility(dep_to_visibility[framework_name])\n            l.append(\"\\t%s [label=\\\"%s\\\", fillcolor=\\\"%s\\\"];\" % (nodename, framework_name, color))\n        for framework_name, deps in dependencies.iteritems():\n            if nodes.get(framework_name) is None:\n                print >> sys.stderr, \"Unknown node\", framework_name\n                continue\n            from_nodename = nodes[framework_name]\n            if len(deps) == 0:\n                l.append(\"\\t\\\"%s\\\" -> {};\" % framework_name)\n            for lib_name in deps:\n                to_nodename = nodes[lib_name]\n                l.append(\"\\t%s -> %s; \/\/ %s -> %s\" % (from_nodename, to_nodename, framework_name, lib_name))\n    else:\n        def gather_dependents(dependencies, framework_name, seen=None):\n            \"\"\"Get a list of all the frameworks wich depend on framework_name, recursively.\"\"\"\n            results = []\n            if seen is None:\n                seen = []\n            for framework, deps in dependencies.iteritems():\n                if framework_name in deps:\n                    if framework in seen:\n                        continue\n                    seen.append(framework)\n                    # framework depends on framework_name\n                    results.append(framework_name)\n                    for result in gather_dependents(dependencies, framework, seen=seen):\n                        results.append(result)\n            return list(set(results))\n        frameworks_to_print = []\n        for framework_depname in framework_depnames:\n            for f in gather_dependents(dependencies, framework_depname):\n                frameworks_to_print.append(f)\n        frameworks_to_print = list(set(frameworks_to_print))\n        nodes = {}\n        seen_deps = []\n        i = 0\n        for framework_name, visibility in dep_to_visibility.iteritems():\n            if framework_name in seen_deps:\n                continue\n            if framework_name not in frameworks_to_print:\n                continue\n            nodename = \"Node%d\" % i\n            i += 1\n            nodes[framework_name] = nodename\n            seen_deps.append(framework_name)\n            color = color_for_visibility(dep_to_visibility[framework_name])\n            l.append(\"\\t%s [label=\\\"%s\\\", style=filled, fillcolor=\\\"%s\\\"];\" % (nodename, framework_name, color))\n        for framework_name, deps in dependencies.iteritems():\n            if framework_name in frameworks_to_print:\n                if nodes.get(framework_name) is None:\n                    print >> sys.stderr, \"Unknown node\", framework_name\n                    continue\n                from_nodename = nodes[framework_name]\n                if len(deps) == 0:\n                    l.append(\"\\t\\\"%s\\\" -> {};\" % framework_name)\n                for lib_name in deps:\n                    if lib_name in frameworks_to_print:\n                        to_nodename = nodes[lib_name]\n                        l.append(\"\\t%s -> %s; \/\/ %s -> %s\" % (from_nodename, to_nodename, framework_name, lib_name))\n                \n    l.append(\"}\\n\")\n    return \"\\n\".join(l)\n\ndef main(library_path, framework_depnames=None):\n    library_path = os.path.expanduser(library_path)\n    (dependencies, dep_to_visibility) = dependencies_for_system_library_path(library_path)\n    dot_output = dot_for_dependencies(dependencies, dep_to_visibility, framework_depnames=framework_depnames)\n    print >> sys.stdout, dot_output\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 2:\n        print >> sys.stderr, \"Usage: %s [SDK System Library Path] [framework name ...]\"\n        print >> sys.stderr, \"  Where the library path is like \/System\/Library\"\n        print >> sys.stderr, \"  Where the framework name (optional) is one to determine what depends on it\"\n        sys.exit(1)\n    framework_depnames = None\n    if len(sys.argv) > 2:\n        framework_depnames = sys.argv[2:]\n    main(sys.argv[1], framework_depnames=framework_depnames)\n"}
{"instruction":"Design a python program to return the n-th element of a given list.","input":"list_input = [1, 3, 5, 7, 9]\nn = 3","output":"def get_nth_element(list_input, n):\n    return list_input[n]\n\nprint(get_nth_element(list_input, n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program to return the n-th element of a given list.\n\n### Input:\nlist_input = [1, 3, 5, 7, 9]\nn = 3\n\n### Output:\ndef get_nth_element(list_input, n):\n    return list_input[n]\n\nprint(get_nth_element(list_input, n))"}
{"instruction":"Develop a lightweight AI model to classify and categorize text.","input":"","output":"A lightweight AI model can be developed using programming languages such as Python, JavaScript, etc. It will contain code to process text data, extract features, apply a suitable machine learning algorithm and train a model to classify and categorize text.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a lightweight AI model to classify and categorize text.\n\n### Input:\n\n\n### Output:\nA lightweight AI model can be developed using programming languages such as Python, JavaScript, etc. It will contain code to process text data, extract features, apply a suitable machine learning algorithm and train a model to classify and categorize text."}
{"instruction":"Create a Python class to manage a stack data structure. The class should include the methods push, pop, and peek.","input":"Not applicable","output":"class Stack:\n   def __init__(self):\n      self.items = []\n \n   def isEmpty(self):\n      return self.items == []\n \n   def push(self, item):\n      self.items.append(item)\n \n   def pop(self):\n      return self.items.pop()\n \n   def peek(self):\n      return self.items[len(self.items)-1]\n \n   def size(self):\n      return len(self.items)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to manage a stack data structure. The class should include the methods push, pop, and peek.\n\n### Input:\nNot applicable\n\n### Output:\nclass Stack:\n   def __init__(self):\n      self.items = []\n \n   def isEmpty(self):\n      return self.items == []\n \n   def push(self, item):\n      self.items.append(item)\n \n   def pop(self):\n      return self.items.pop()\n \n   def peek(self):\n      return self.items[len(self.items)-1]\n \n   def size(self):\n      return len(self.items)"}
{"instruction":"Write a function in Python that computes the average of all numbers in a given list.","input":"numbers = [4, 8, 6, 2, 10]","output":"def compute_average(numbers):\n  total = 0\n  for num in numbers:\n    total += num\n  return total \/ len(numbers)\n\naverage = compute_average(numbers)\nprint(average)  # Outputs 6","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that computes the average of all numbers in a given list.\n\n### Input:\nnumbers = [4, 8, 6, 2, 10]\n\n### Output:\ndef compute_average(numbers):\n  total = 0\n  for num in numbers:\n    total += num\n  return total \/ len(numbers)\n\naverage = compute_average(numbers)\nprint(average)  # Outputs 6"}
{"instruction":"Create a Python script to filter a list and return all elements which are divisible by a given number (i.e. create a filter function).","input":"num_list = [1, 2, 3, 4, 5, 6]\ndivisor = 2","output":"def filter_list(num_list, divisor):\n    return list(filter(lambda n: n % divisor == 0, num_list))\n\nnum_list = [1, 2, 3, 4, 5, 6]\ndivisor = 2\n\ndivisible_nums = filter_list(num_list, divisor)\nprint(divisible_nums) # [2, 4, 6]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to filter a list and return all elements which are divisible by a given number (i.e. create a filter function).\n\n### Input:\nnum_list = [1, 2, 3, 4, 5, 6]\ndivisor = 2\n\n### Output:\ndef filter_list(num_list, divisor):\n    return list(filter(lambda n: n % divisor == 0, num_list))\n\nnum_list = [1, 2, 3, 4, 5, 6]\ndivisor = 2\n\ndivisible_nums = filter_list(num_list, divisor)\nprint(divisible_nums) # [2, 4, 6]"}
{"instruction":"Create a program to filter a list of numbers using the built-in Python filter() function.","input":"[25, 35, 8, 2, 10]","output":"def even_number_filter(number):\n  return number % 2 == 0\n\nnumbers = [25, 35, 8, 2, 10]\nfiltered_list = list(filter(even_number_filter, numbers))\nprint(filtered_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to filter a list of numbers using the built-in Python filter() function.\n\n### Input:\n[25, 35, 8, 2, 10]\n\n### Output:\ndef even_number_filter(number):\n  return number % 2 == 0\n\nnumbers = [25, 35, 8, 2, 10]\nfiltered_list = list(filter(even_number_filter, numbers))\nprint(filtered_list)"}
{"instruction":"In Python, debug the following program and explain what was the issue?","input":"def greet(name):\n    if name == \"John\":\n        msg = \"Hello, John\"\n    else:\n        msg = \"Name not found\"\n\nprint(greet(\"John\"))","output":"The issue with the program is that it is not printing the message stored in the \"msg\" variable. To fix this, the program can be modified as follows:\n\ndef greet(name):\n    if name == \"John\":\n        msg = \"Hello, John\"\n    else:\n        msg = \"Name not found\"\n    print(msg)\n\ngreet(\"John\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, debug the following program and explain what was the issue?\n\n### Input:\ndef greet(name):\n    if name == \"John\":\n        msg = \"Hello, John\"\n    else:\n        msg = \"Name not found\"\n\nprint(greet(\"John\"))\n\n### Output:\nThe issue with the program is that it is not printing the message stored in the \"msg\" variable. To fix this, the program can be modified as follows:\n\ndef greet(name):\n    if name == \"John\":\n        msg = \"Hello, John\"\n    else:\n        msg = \"Name not found\"\n    print(msg)\n\ngreet(\"John\")"}
{"instruction":"Write a Python program to generate a virtual assistant for processing natural language queries.","input":"Not applicable","output":"import sys\nimport speech_recognition\nimport time\nfrom gtts import gTTS\nfrom playsound import playsound\nimport webbrowser\nimport os\nimport random\n\ndef reg_and_speak(query):\n \n query = query.lower()\n # recognize speech using Google Speech Recognition\n \n try:\n # for testing purposes, we're just using the default API key\n # to use another API key, use `r.recognize_google(audio, key=\"GOOGLE_SPEECH_RECOGNITION_API_KEY\")`\n # instead of `r.recognize_google(audio)`\n text = r.recognize_google(audio)\n print(text)\n    \n except:\n speech = \"I could not understand it\"\n speak(speech)\n sys.exit()\n    \n \n def speak(speech):\n tts = gTTS(text=speech, lang='en', slow=False)\n # save the file\n tts.save(\"speech.mp3\")\n # play the mp3\n playsound.playsound(\"speech.mp3\", True)\n os.remove('speech.mp3')\n \n while True:\n print('listening...')\n speech_recognition.Microphone(device_index=1)\n r.adjust_for_ambient_noise(source)\n audio = r.listen(source)\n reg_and_speak(audio)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a virtual assistant for processing natural language queries.\n\n### Input:\nNot applicable\n\n### Output:\nimport sys\nimport speech_recognition\nimport time\nfrom gtts import gTTS\nfrom playsound import playsound\nimport webbrowser\nimport os\nimport random\n\ndef reg_and_speak(query):\n \n query = query.lower()\n # recognize speech using Google Speech Recognition\n \n try:\n # for testing purposes, we're just using the default API key\n # to use another API key, use `r.recognize_google(audio, key=\"GOOGLE_SPEECH_RECOGNITION_API_KEY\")`\n # instead of `r.recognize_google(audio)`\n text = r.recognize_google(audio)\n print(text)\n    \n except:\n speech = \"I could not understand it\"\n speak(speech)\n sys.exit()\n    \n \n def speak(speech):\n tts = gTTS(text=speech, lang='en', slow=False)\n # save the file\n tts.save(\"speech.mp3\")\n # play the mp3\n playsound.playsound(\"speech.mp3\", True)\n os.remove('speech.mp3')\n \n while True:\n print('listening...')\n speech_recognition.Microphone(device_index=1)\n r.adjust_for_ambient_noise(source)\n audio = r.listen(source)\n reg_and_speak(audio)"}
{"instruction":"Develop a Python program that takes a string as an argument and prints out the most commonly occurring letter in the string.","input":"","output":"from collections import Counter \n\ndef most_common_letter(string): \n\t\"\"\"Function to find the most common letters in the string\"\"\"\n\twords = string.split() \n\tcnt = Counter() \n\t\n\tfor word in words: \n\t\tfor letter in word: \n\t\t\tcnt[letter] += 1\n\n\tmost_occur = cnt.most_common(1)[0] \n\treturn most_occur[0] \n\n# Driver code \nstring = \"this is a sample sentence\"\nprint(most_common_letter(string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that takes a string as an argument and prints out the most commonly occurring letter in the string.\n\n### Input:\n\n\n### Output:\nfrom collections import Counter \n\ndef most_common_letter(string): \n\t\"\"\"Function to find the most common letters in the string\"\"\"\n\twords = string.split() \n\tcnt = Counter() \n\t\n\tfor word in words: \n\t\tfor letter in word: \n\t\t\tcnt[letter] += 1\n\n\tmost_occur = cnt.most_common(1)[0] \n\treturn most_occur[0] \n\n# Driver code \nstring = \"this is a sample sentence\"\nprint(most_common_letter(string))"}
{"instruction":"Write a Python program to build a decision tree using a given dataset","input":"","output":"from sklearn import tree\n\ndef create_tree_model(x,y):\n    model = tree.DecisionTreeClassifier()\n    model.fit(x, y) \n    return model","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to build a decision tree using a given dataset\n\n### Input:\n\n\n### Output:\nfrom sklearn import tree\n\ndef create_tree_model(x,y):\n    model = tree.DecisionTreeClassifier()\n    model.fit(x, y) \n    return model"}
{"instruction":"The code creates required directories and moves files to a specific directory. To use this code, provide a target directory as an argument and call the function \"restructureMaildirDirectory\" on the target directory.","input":"","output":"#!\/usr\/bin\/python -OO\n# This file is part of Archivematica.\n#\n# Copyright 2010-2013 Artefactual Systems Inc. <http:\/\/artefactual.com>\n#\n# Archivematica is free software: you can redistribute it and\/or modify\n# it under the terms of the GNU Affero General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Archivematica is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Archivematica.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n\n# @package Archivematica\n# @subpackage archivematicaClientScript\n# @author Joseph Perry <joseph@artefactual.com>\n\nimport os\nimport sys\nimport shutil\n\n\n\nrequiredDirectories = [\"logs\", \"logs\/fileMeta\", \"metadata\", \"metadata\/submissionDocumentation\", \"objects\", \"objects\/Maildir\"]\noptionalFiles = \"processingMCP.xml\"\n\ndef restructureMaildirDirectory(unitPath):\n    for dir in requiredDirectories:\n        dirPath = os.path.join(unitPath, dir)\n        if not os.path.isdir(dirPath):\n            os.mkdir(dirPath)\n            print \"creating: \", dir\n    for item in os.listdir(unitPath):\n        dst = os.path.join(unitPath, \"objects\", \"Maildir\") + \"\/.\"\n        itemPath =  os.path.join(unitPath, item)\n        if os.path.isdir(itemPath) and item not in requiredDirectories:\n            shutil.move(itemPath, dst)\n            print \"moving directory to objects\/Maildir: \", item\n        elif os.path.isfile(itemPath) and item not in optionalFiles:\n            shutil.move(itemPath, dst)\n            print \"moving file to objects\/Maildir: \", item\n\nif __name__ == '__main__':\n    target = sys.argv[1]\n    restructureMaildirDirectory(target)\n    \n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe code creates required directories and moves files to a specific directory. To use this code, provide a target directory as an argument and call the function \"restructureMaildirDirectory\" on the target directory.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/python -OO\n# This file is part of Archivematica.\n#\n# Copyright 2010-2013 Artefactual Systems Inc. <http:\/\/artefactual.com>\n#\n# Archivematica is free software: you can redistribute it and\/or modify\n# it under the terms of the GNU Affero General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Archivematica is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Archivematica.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n\n# @package Archivematica\n# @subpackage archivematicaClientScript\n# @author Joseph Perry <joseph@artefactual.com>\n\nimport os\nimport sys\nimport shutil\n\n\n\nrequiredDirectories = [\"logs\", \"logs\/fileMeta\", \"metadata\", \"metadata\/submissionDocumentation\", \"objects\", \"objects\/Maildir\"]\noptionalFiles = \"processingMCP.xml\"\n\ndef restructureMaildirDirectory(unitPath):\n    for dir in requiredDirectories:\n        dirPath = os.path.join(unitPath, dir)\n        if not os.path.isdir(dirPath):\n            os.mkdir(dirPath)\n            print \"creating: \", dir\n    for item in os.listdir(unitPath):\n        dst = os.path.join(unitPath, \"objects\", \"Maildir\") + \"\/.\"\n        itemPath =  os.path.join(unitPath, item)\n        if os.path.isdir(itemPath) and item not in requiredDirectories:\n            shutil.move(itemPath, dst)\n            print \"moving directory to objects\/Maildir: \", item\n        elif os.path.isfile(itemPath) and item not in optionalFiles:\n            shutil.move(itemPath, dst)\n            print \"moving file to objects\/Maildir: \", item\n\nif __name__ == '__main__':\n    target = sys.argv[1]\n    restructureMaildirDirectory(target)\n    \n"}
{"instruction":"Create a Python program to create a stack with basic push and pop operations.","input":"","output":"\"\"\"\nCreate a stack with basic push and pop operations\n\"\"\"\n\nclass Stack:\n    def __init__(self):\n        self.stack = []\n    def push(self, item):\n        self.stack.append(item)\n    def pop(self):\n        return self.stack.pop()\n    def peek(self):\n        return self.stack[-1]\n    def is_empty(self):\n        return len(self.stack) == 0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to create a stack with basic push and pop operations.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a stack with basic push and pop operations\n\"\"\"\n\nclass Stack:\n    def __init__(self):\n        self.stack = []\n    def push(self, item):\n        self.stack.append(item)\n    def pop(self):\n        return self.stack.pop()\n    def peek(self):\n        return self.stack[-1]\n    def is_empty(self):\n        return len(self.stack) == 0"}
{"instruction":"Create a python function to calculate the BMI of a person given the person's weight and height in 'Metric' unit.","input":"weight = 80 (kg)\nheight = 180 (cm)","output":"def calculateBMI(weight, height):\n    # convert height from cm to m\n    height = height\/100\n    \n    # calculate BMI\n    BMI = weight \/ (height*height)\n    \n    return BMI\n    \nif __name__ == '__main__':\n    weight = 80  # in kg\n    height = 180 # in cm\n    BMI = calculateBMI(weight, height)\n    print(f'The BMI of the person is {BMI}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function to calculate the BMI of a person given the person's weight and height in 'Metric' unit.\n\n### Input:\nweight = 80 (kg)\nheight = 180 (cm)\n\n### Output:\ndef calculateBMI(weight, height):\n    # convert height from cm to m\n    height = height\/100\n    \n    # calculate BMI\n    BMI = weight \/ (height*height)\n    \n    return BMI\n    \nif __name__ == '__main__':\n    weight = 80  # in kg\n    height = 180 # in cm\n    BMI = calculateBMI(weight, height)\n    print(f'The BMI of the person is {BMI}')"}
{"instruction":"Write a code in Python to find the minimum value in a Binary Search Tree.","input":"The following is the given BST:\n\n      10  \n     \/  \\  \n    5    14  \n   \/ \\   \/ \\  \n  1   7 11  20","output":"class Node: \n    def __init__(self, key): \n        self.left = None\n        self.right = None\n        self.val = key \n  \n# Function to find the minimum value in a given BST\ndef minValue(node): \n    current = node \n  \n    # loop down to find the leftmost leaf \n    while(current.left is not None): \n        current = current.left  \n  \n    return current.val","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python to find the minimum value in a Binary Search Tree.\n\n### Input:\nThe following is the given BST:\n\n      10  \n     \/  \\  \n    5    14  \n   \/ \\   \/ \\  \n  1   7 11  20\n\n### Output:\nclass Node: \n    def __init__(self, key): \n        self.left = None\n        self.right = None\n        self.val = key \n  \n# Function to find the minimum value in a given BST\ndef minValue(node): \n    current = node \n  \n    # loop down to find the leftmost leaf \n    while(current.left is not None): \n        current = current.left  \n  \n    return current.val"}
{"instruction":"Create a python program to scrape news articles from a website and store them in a database.","input":"The news website: https:\/\/www.huffpost.com","output":"import requests\nfrom bs4 import BeautifulSoup\nimport sqlite3\n\nURL = 'https:\/\/www.huffpost.com'\n\n# Request the data\nhtml_data = requests.get(URL).text\n\n# Parse the data\nsoup = BeautifulSoup(html_data, 'html.parser')\n\n# Create a connection\nconn = sqlite3.connect('news.db')\nc = conn.cursor()\n\n# Get all article links\narticles = soup.find_all('article')\nfor article in articles:\n a = article.find('a')\n # check if a has href attr\n if a and 'href' in a.attr:\n # join the url with href\n article_url = URL + a.attr['href']\n # Get article data\n html_data = requests.get(article_url).text\n soup_article = BeautifulSoup(html_data, 'html.parser')\n # Get title\n title = soup_article.find('h1')\n # Get the content\n content = soup_article.find('div', {'class': 'entry__content'})\n # Create a database entry\n c.execute('INSERT INTO article (title, url, content) VALUES (?,?,?)',\n (title.text, article_url, content.text))\n \n# Save the changes\nconn.commit()\n \n# Close the connection\nconn.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to scrape news articles from a website and store them in a database.\n\n### Input:\nThe news website: https:\/\/www.huffpost.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\nimport sqlite3\n\nURL = 'https:\/\/www.huffpost.com'\n\n# Request the data\nhtml_data = requests.get(URL).text\n\n# Parse the data\nsoup = BeautifulSoup(html_data, 'html.parser')\n\n# Create a connection\nconn = sqlite3.connect('news.db')\nc = conn.cursor()\n\n# Get all article links\narticles = soup.find_all('article')\nfor article in articles:\n a = article.find('a')\n # check if a has href attr\n if a and 'href' in a.attr:\n # join the url with href\n article_url = URL + a.attr['href']\n # Get article data\n html_data = requests.get(article_url).text\n soup_article = BeautifulSoup(html_data, 'html.parser')\n # Get title\n title = soup_article.find('h1')\n # Get the content\n content = soup_article.find('div', {'class': 'entry__content'})\n # Create a database entry\n c.execute('INSERT INTO article (title, url, content) VALUES (?,?,?)',\n (title.text, article_url, content.text))\n \n# Save the changes\nconn.commit()\n \n# Close the connection\nconn.close()"}
{"instruction":"Write a Python program for data cleaning and semantic analysis. The program should remove any noisy attributes, identify important topics, and generate textual summaries.","input":"A collection of 200 blog posts about the US presidential election.","output":"import re\nimport nltk\nfrom nltk.tokenize import word_tokenize\n\n# Read in the blog posts\nposts_raw = open('posts.txt', 'r').read()\n\n# Tokenize the posts and remove punctuations\nposts_tokens = [word_tokenize(post) for post in posts_raw.split('\\n')]\nposts_tokens = [[token for token in post if not re.match('[^\\w\\s]', token)] for post in posts_tokens]\n\n#Remove stopwords and identify topics\nstopwords = set(nltk.corpus.stopwords.words('english'))\nposts_filtered = [[token for token in post if token not in stopwords] for post in posts_tokens]\ntopic_counts = nltk.FreqDist( [token for post in posts_filtered for token in post] )\ntopics = topic_counts.most_common(20)\n\n# Generate textual summaries\ntopics_dict = {topic[0]:topic[1] for topic in topics}\nsummaries = []\nfor post in posts_filtered:\n summary = []\n for token in post:\n if token in topics_dict.keys():\n summary.append(token)\n summaries.append(' '.join(summary))\n\nprint(summaries)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program for data cleaning and semantic analysis. The program should remove any noisy attributes, identify important topics, and generate textual summaries.\n\n### Input:\nA collection of 200 blog posts about the US presidential election.\n\n### Output:\nimport re\nimport nltk\nfrom nltk.tokenize import word_tokenize\n\n# Read in the blog posts\nposts_raw = open('posts.txt', 'r').read()\n\n# Tokenize the posts and remove punctuations\nposts_tokens = [word_tokenize(post) for post in posts_raw.split('\\n')]\nposts_tokens = [[token for token in post if not re.match('[^\\w\\s]', token)] for post in posts_tokens]\n\n#Remove stopwords and identify topics\nstopwords = set(nltk.corpus.stopwords.words('english'))\nposts_filtered = [[token for token in post if token not in stopwords] for post in posts_tokens]\ntopic_counts = nltk.FreqDist( [token for post in posts_filtered for token in post] )\ntopics = topic_counts.most_common(20)\n\n# Generate textual summaries\ntopics_dict = {topic[0]:topic[1] for topic in topics}\nsummaries = []\nfor post in posts_filtered:\n summary = []\n for token in post:\n if token in topics_dict.keys():\n summary.append(token)\n summaries.append(' '.join(summary))\n\nprint(summaries)"}
{"instruction":"Create a basic artificial neural network (ANN) using the Keras library in Python.","input":"Not applicable","output":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n#define the model\nmodel = Sequential()\nmodel.add(Dense(units=64, activation='relu', input_dim=50))\nmodel.add(Dense(units=10, activation='softmax'))\n\n#compile the model\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='sgd',\n              metrics=['accuracy'])\n\n#train the model\nmodel.fit(x_train, y_train, epochs=5, batch_size=32)\n\n#evaluate the model\nloss_and_metrics = model.evaluate(x_test, y_test, batch_size=128)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic artificial neural network (ANN) using the Keras library in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n#define the model\nmodel = Sequential()\nmodel.add(Dense(units=64, activation='relu', input_dim=50))\nmodel.add(Dense(units=10, activation='softmax'))\n\n#compile the model\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='sgd',\n              metrics=['accuracy'])\n\n#train the model\nmodel.fit(x_train, y_train, epochs=5, batch_size=32)\n\n#evaluate the model\nloss_and_metrics = model.evaluate(x_test, y_test, batch_size=128)"}
{"instruction":"Create a Python program to generate a Fibonacci number sequence.","input":"Length of the sequence = 10","output":"def generate_Fibonacci_sequence(length):\n    # Initialize the sequence\n    fib_sequence = [0, 1]\n\n    # Generate the sequence\n    for i in range(2, length):\n        fib_sequence.append(fib_sequence[i - 1] + fib_sequence[i - 2])\n\n    # Return the sequence\n    return fib_sequence\n\nprint(generate_Fibonacci_sequence(10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a Fibonacci number sequence.\n\n### Input:\nLength of the sequence = 10\n\n### Output:\ndef generate_Fibonacci_sequence(length):\n    # Initialize the sequence\n    fib_sequence = [0, 1]\n\n    # Generate the sequence\n    for i in range(2, length):\n        fib_sequence.append(fib_sequence[i - 1] + fib_sequence[i - 2])\n\n    # Return the sequence\n    return fib_sequence\n\nprint(generate_Fibonacci_sequence(10))"}
{"instruction":"Generate a Python program to convert an array from the cartesian to the polar coordinate system.","input":"[1, 2]","output":"def cartesian_to_polar(arr):\n    x = arr[0]\n    y = arr[1]\n \n    radius = (x**2 + y**2)**0.5\n    theta = math.atan2(y,x)\n \n    return [radius, theta]\n    \narr = [1, 2]\nresult = cartesian_to_polar(arr)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to convert an array from the cartesian to the polar coordinate system.\n\n### Input:\n[1, 2]\n\n### Output:\ndef cartesian_to_polar(arr):\n    x = arr[0]\n    y = arr[1]\n \n    radius = (x**2 + y**2)**0.5\n    theta = math.atan2(y,x)\n \n    return [radius, theta]\n    \narr = [1, 2]\nresult = cartesian_to_polar(arr)\nprint(result)"}
{"instruction":"Write a Python algorithm that finds the factorial of a given number.","input":"5","output":"def factorial(n):\n    if n == 0:\n        return 1\n    \n    return n * factorial(n-1)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python algorithm that finds the factorial of a given number.\n\n### Input:\n5\n\n### Output:\ndef factorial(n):\n    if n == 0:\n        return 1\n    \n    return n * factorial(n-1)"}
{"instruction":"Create a Python program to implement a selection sort algorithm","input":"","output":"def selection_sort(arr): \n    n = len(arr) \n  \n    # One by one move boundary of unsorted subarray \n    for i in range(n): \n        # Find the minimum element in unsorted array \n        min_index = i \n        for j in range(i+1, n): \n            if arr[min_index] > arr[j]: \n                min_index = j \n  \n        # Swap the found minimum element with the first element         \n        arr[i], arr[min_index] = arr[min_index], arr[i] \n  \n    return arr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to implement a selection sort algorithm\n\n### Input:\n\n\n### Output:\ndef selection_sort(arr): \n    n = len(arr) \n  \n    # One by one move boundary of unsorted subarray \n    for i in range(n): \n        # Find the minimum element in unsorted array \n        min_index = i \n        for j in range(i+1, n): \n            if arr[min_index] > arr[j]: \n                min_index = j \n  \n        # Swap the found minimum element with the first element         \n        arr[i], arr[min_index] = arr[min_index], arr[i] \n  \n    return arr"}
{"instruction":"Write a function in Python which takes one string as input and checks if the string starts with a vowel.","input":"String \"abc\"","output":"def start_vowel(input_string):\n    vowel_list = [\"a\", \"e\", \"i\", \"o\", \"u\"] \n    if input_string[0] in vowel_list: \n      print(\"String starts with a vowel\") \n    else:\n      print(\"String does not start with a vowel\")\n\nstart_vowel(\"abc\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python which takes one string as input and checks if the string starts with a vowel.\n\n### Input:\nString \"abc\"\n\n### Output:\ndef start_vowel(input_string):\n    vowel_list = [\"a\", \"e\", \"i\", \"o\", \"u\"] \n    if input_string[0] in vowel_list: \n      print(\"String starts with a vowel\") \n    else:\n      print(\"String does not start with a vowel\")\n\nstart_vowel(\"abc\")"}
{"instruction":"Write a Python code to generate a random color code (RGB).","input":"","output":"# Generate a random color code (RGB) \nimport random\n\ndef get_random_color():\n    r = random.randint(0, 255)\n    g = random.randint(0, 255)\n    b = random.randint(0, 255)\n    return (r, g, b)\n\nif __name__ == '__main__':\n    print(get_random_color())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to generate a random color code (RGB).\n\n### Input:\n\n\n### Output:\n# Generate a random color code (RGB) \nimport random\n\ndef get_random_color():\n    r = random.randint(0, 255)\n    g = random.randint(0, 255)\n    b = random.randint(0, 255)\n    return (r, g, b)\n\nif __name__ == '__main__':\n    print(get_random_color())"}
{"instruction":"Write a Python program to create a function to sort an array of objects by a specified key. The function should accept the array and sort it based on the key given, and return a new array with the objects sorted in ascending order.","input":"array = [\n { name: \"Bob\", age: 18 }, \n { name: \"Alice\", age: 16 }, \n { name: \"John\", age: 19 }\n] \nkey = \"age\"","output":"def sortArrayByKey(array, key):\n sortedArray = array[:]\n sortedArray.sort(key=lambda x: x[key])\n \n return sortedArray\n \nsortedArray = sortArrayByKey(array, key)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a function to sort an array of objects by a specified key. The function should accept the array and sort it based on the key given, and return a new array with the objects sorted in ascending order.\n\n### Input:\narray = [\n { name: \"Bob\", age: 18 }, \n { name: \"Alice\", age: 16 }, \n { name: \"John\", age: 19 }\n] \nkey = \"age\"\n\n### Output:\ndef sortArrayByKey(array, key):\n sortedArray = array[:]\n sortedArray.sort(key=lambda x: x[key])\n \n return sortedArray\n \nsortedArray = sortArrayByKey(array, key)"}
{"instruction":"Create a Python script to generate a calendar representation of a given month.","input":"Month : April; Year : 2020","output":"import calendar\n\nyear = 2020\nmonth = 4\n\n# create a calendar of the given month and year\ncal = calendar.month(year, month)\n\n# print it\nprint(cal)\n\n# Output\n     April 2020\nMo Tu We Th Fr Sa Su\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate a calendar representation of a given month.\n\n### Input:\nMonth : April; Year : 2020\n\n### Output:\nimport calendar\n\nyear = 2020\nmonth = 4\n\n# create a calendar of the given month and year\ncal = calendar.month(year, month)\n\n# print it\nprint(cal)\n\n# Output\n     April 2020\nMo Tu We Th Fr Sa Su\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19"}
{"instruction":"Create a basic calculator in Python","input":"","output":"def calculator():\n  while True:\n    try:\n      userInput = input('Input equation (type \"quit\" to exit): ')\n\n      if userInput == \"quit\":\n        break\n        \n      result = eval(userInput)\n      print(result)\n\n    except:\n      print('Invalid equation')\n\ncalculator()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic calculator in Python\n\n### Input:\n\n\n### Output:\ndef calculator():\n  while True:\n    try:\n      userInput = input('Input equation (type \"quit\" to exit): ')\n\n      if userInput == \"quit\":\n        break\n        \n      result = eval(userInput)\n      print(result)\n\n    except:\n      print('Invalid equation')\n\ncalculator()"}
{"instruction":"Generate a Python program to perform matrix multiplication.","input":"A = [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]] \n\nB = [[7, 8, 9],\n     [4, 5, 6],\n     [1, 2, 3]]","output":"def matrixMultiplication(A,B): \n \n    return [[sum(a*b for a,b in zip(A_row,B_col))  \n                 for B_col in zip(*B)] for A_row in A] \n\nA = [[1, 2, 3], \n     [4, 5, 6], \n     [7, 8, 9]] \n\nB = [[7, 8, 9], \n     [4, 5, 6], \n     [1, 2, 3]]\n\nC = matrixMultiplication(A,B) \n\nfor i in range(len(C)): \n    print(C[i])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to perform matrix multiplication.\n\n### Input:\nA = [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]] \n\nB = [[7, 8, 9],\n     [4, 5, 6],\n     [1, 2, 3]]\n\n### Output:\ndef matrixMultiplication(A,B): \n \n    return [[sum(a*b for a,b in zip(A_row,B_col))  \n                 for B_col in zip(*B)] for A_row in A] \n\nA = [[1, 2, 3], \n     [4, 5, 6], \n     [7, 8, 9]] \n\nB = [[7, 8, 9], \n     [4, 5, 6], \n     [1, 2, 3]]\n\nC = matrixMultiplication(A,B) \n\nfor i in range(len(C)): \n    print(C[i])"}
{"instruction":"Create a C program to calculate the Levenshtein distance of two strings","input":"\"Python\", \"Perl\"","output":"#include <stdio.h>\n#include <string.h>\n\nint LevenshteinDistance(char *s1, char *s2) {\n    int s1len, s2len, x, y, lastdiag, olddiag;\n    s1len = strlen(s1);\n    s2len = strlen(s2);\n    unsigned int column[s1len+1];\n    for (y = 1; y <= s1len; y++)\n        column[y] = y;\n    for (x = 1; x <= s2len; x++) {\n        column[0] = x;\n        for (y = 1, lastdiag = x-1; y <= s1len; y++) {\n            olddiag = column[y];\n            if (s1[y-1] == s2[x-1])\n                column[y] = lastdiag;\n            else \n                column[y] = min( column[y] + 1, min(column[y-1] + 1, lastdiag + 2));\n            lastdiag = olddiag;\n        }\n    }\n    return(column[s1len]);\n}\n\nint main(){\n    printf (\"%d\\n\", LevenshteinDistance(\"Python\", \"Perl\"));\n    return 0;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a C program to calculate the Levenshtein distance of two strings\n\n### Input:\n\"Python\", \"Perl\"\n\n### Output:\n#include <stdio.h>\n#include <string.h>\n\nint LevenshteinDistance(char *s1, char *s2) {\n    int s1len, s2len, x, y, lastdiag, olddiag;\n    s1len = strlen(s1);\n    s2len = strlen(s2);\n    unsigned int column[s1len+1];\n    for (y = 1; y <= s1len; y++)\n        column[y] = y;\n    for (x = 1; x <= s2len; x++) {\n        column[0] = x;\n        for (y = 1, lastdiag = x-1; y <= s1len; y++) {\n            olddiag = column[y];\n            if (s1[y-1] == s2[x-1])\n                column[y] = lastdiag;\n            else \n                column[y] = min( column[y] + 1, min(column[y-1] + 1, lastdiag + 2));\n            lastdiag = olddiag;\n        }\n    }\n    return(column[s1len]);\n}\n\nint main(){\n    printf (\"%d\\n\", LevenshteinDistance(\"Python\", \"Perl\"));\n    return 0;\n}"}
{"instruction":"This code is a Python script that defines a class called \"source\" and several methods within it. To use this code, import the necessary modules and create an instance of the \"source\" class. Then, call the appropriate methods to perform actions such as searching for movies or TV shows, retrieving sources for a given URL, or resolving a URL. The code also includes a license statement at the beginning, which should be retained if the code is used or modified.","input":"","output":"# -*- coding: UTF-8 -*-\n#######################################################################\n # ----------------------------------------------------------------------------\n # \"THE BEER-WARE LICENSE\" (Revision 42):\n # @tantrumdev wrote this file.  As long as you retain this notice you\n # can do whatever you want with this stuff. If we meet some day, and you think\n # this stuff is worth it, you can buy me a beer in return. - Muad'Dib\n # ----------------------------------------------------------------------------\n#######################################################################\n\n# Addon Name: Placenta\n# Addon id: plugin.video.placenta\n# Addon Provider: Mr.Blamo\n\nimport re, urllib, urlparse, base64, json, unicodedata\n\nfrom resources.lib.modules import cleantitle\nfrom resources.lib.modules import client\nfrom resources.lib.modules import proxy\n\n\nclass source:\n    def __init__(self):\n        self.priority = 1\n        self.language = ['fr']\n        self.domains = ['filmenstreaminghd.co']\n\n        #http:\/\/dpstreaming.tv\/?s=max+steel\n        #http:\/\/dpstreaming.tv\/max-steel-vostfr-streaming-telecharger\/']\n\n        self.base_link = 'http:\/\/www.filmenstreaminghd.co'\n        self.key_link = '?'\n        self.moviesearch_link = 's=%s'\n        self.tvsearch_link = 's=%s'\n\n    def movie(self, imdb, title, localtitle, aliases, year):\n        try:\n            url = {'imdb': imdb, 'title': title, 'year': year}\n            url = urllib.urlencode(url)\n            return url\n        except:\n            return\n\n    def tvshow(self, imdb, tvdb, tvshowtitle, localtvshowtitle, aliases, year):\n        try:\n            url = {'imdb': imdb, 'tvdb': tvdb, 'tvshowtitle': tvshowtitle, 'year': year}\n            url = urllib.urlencode(url)\n            return url\n        except:\n            return\n\n    def episode(self, url, imdb, tvdb, title, premiered, season, episode):\n        try:\n            if url == None: return\n\n            url = urlparse.parse_qs(url)\n            url = dict([(i, url[i][0]) if url[i] else (i, '') for i in url])\n            url['title'], url['premiered'], url['season'], url['episode'] = title, premiered, season, episode\n            url = urllib.urlencode(url)\n            return url\n        except:\n            return\n\n    def sources(self, url, hostDict, hostprDict):\n        try:\n            print '-------------------------------    -------------------------------'\n            sources = []\n\n            print url\n\n            data = urlparse.parse_qs(url)\n            data = dict([(i, data[i][0]) if data[i] else (i, '') for i in data])\n\n            season = data['season'] if 'season' in data else False\n            episode = data['episode'] if 'episode' in data else False\n\n            print season, episode\n\n            if season and episode:\n                print 'TV'\n\n                self.search_link = 'query=%s&submit=Submit+Query'\n                aTitle = data['tvshowtitle']\n\n            else:\n                self.search_link = 'query=%s&submit=Submit+Query'\n                aTitle = data['title']\n\n\n            post = self.search_link % (urllib.quote_plus(cleantitle.query(aTitle)))\n            url = 'http:\/\/www.filmenstreaminghd.com\/recherche\/'\n\n\n            t = cleantitle.get(aTitle)\n\n            r = client.request(url, XHR=True, referer=url, post=post)\n\n            r = client.parseDOM(r, 'div', attrs={'class': 'film-k kutu-icerik kat'})\n\n            if season and episode:\n                t = t + 'saison0' + season\n\n            r = client.parseDOM(r, 'div', attrs={'class': 'play fa fa-play-circle'})\n            r = sorted(set(r))\n            r = [(client.parseDOM(r, 'a', ret='href'), client.parseDOM(r, 'a', ret='title')) for i in r]\n            r = [(i[0][0], i[1][0].lower()) for i in r if len(i[0]) > 0 and len(i[1]) > 0]\n            r = [i[0] for i in r if t == cleantitle.get(i[1])][0]\n            #r = sorted(set(r))\n\n            url0 = '%s%s' % ('http:\/\/www.filmenstreaminghd.com' , r)\n            print url0\n            url = client.replaceHTMLCodes(url0)\n            url = url0.encode('utf-8')\n\n            r = client.request(url, XHR=True, referer=url)\n            r = re.sub('(\\n|\\t)', '', r)\n\n            langue = re.compile('<b class=\\\"fa fa-cc\\\"><\/b><span>(.+?)<\/span>', re.MULTILINE | re.DOTALL).findall(r)[0]\n            if langue == 'VF':\n                langue = 'FR'\n\n            quality2 = re.compile('<div class=\\\"kalite\\\">(.+?)<\/div>', re.MULTILINE | re.DOTALL).findall(r)[0]\n            quality2 = re.sub('-', '', quality2)\n\n            if season and episode:\n                unLien0a = client.parseDOM(r, 'div', attrs={'class': 'dizi-bolumleri'})[0]\n                r = re.compile('Saison\\s+0%s\\s+\\-\\s+Episode\\s+0%s(.+?)class=\\\"dropit-trigger\\\">' % (season, episode), re.MULTILINE | re.DOTALL).findall(unLien0a)[0]\n                unLien0b = client.parseDOM(r, 'li', ret='id')\n            else:\n                r = client.parseDOM(r, 'div', attrs={'class': 'dizi-bolumleri film'})\n                unLien0b = client.parseDOM(r, 'span', ret='id')\n\n            counter = 0\n\n            for unLienUrl in unLien0b:\n\n                if 'gf-' in unLienUrl:\n                    continue\n\n                dataUrl = urllib.urlencode({'pid': unLienUrl[1:]})\n                dataUrl = client.request(url0, post=dataUrl, XHR=True, referer=url0)\n\n                try:\n                    url = client.parseDOM(dataUrl, 'iframe', ret='src')[1]\n                except:\n                    url = client.parseDOM(dataUrl, 'iframe', ret='src')[0]\n\n                if url.startswith('\/\/'):\n                    url = url.replace('\/\/', '', 1)\n\n                host = re.findall('([\\w]+[.][\\w]+)$', urlparse.urlparse(url.strip().lower()).netloc)[0]\n                if not host in hostDict: continue\n                host = client.replaceHTMLCodes(host)\n                host = host.encode('utf-8')\n\n                url = url.encode('utf-8')\n\n                if '1080p' in quality2:\n                    quality = '1080p'\n                elif '720p' in quality2 or 'bdrip' in quality2 or 'hdrip' in quality2:\n                    quality = 'HD'\n                else:\n                    quality = 'SD'\n\n                if 'dvdscr' in quality2 or 'r5' in quality2 or 'r6' in quality2:\n                    quality2 = 'SCR'\n                elif 'camrip' in quality2 or 'tsrip' in quality2 or 'hdcam' in quality2 or 'hdts' in quality2 or 'dvdcam' in quality2 or 'dvdts' in quality2 or 'cam' in quality2 or 'telesync' in quality2 or 'ts' in quality2:\n                    quality2 = 'CAM'\n\n                sources.append({'source': host, 'quality': quality, 'language': langue, 'url': url, 'direct': False, 'debridonly': False})\n\n            print sources\n\n            return sources\n        except:\n            return sources\n\n\n    def resolve(self, url):\n\n        return url\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a Python script that defines a class called \"source\" and several methods within it. To use this code, import the necessary modules and create an instance of the \"source\" class. Then, call the appropriate methods to perform actions such as searching for movies or TV shows, retrieving sources for a given URL, or resolving a URL. The code also includes a license statement at the beginning, which should be retained if the code is used or modified.\n\n### Input:\n\n\n### Output:\n# -*- coding: UTF-8 -*-\n#######################################################################\n # ----------------------------------------------------------------------------\n # \"THE BEER-WARE LICENSE\" (Revision 42):\n # @tantrumdev wrote this file.  As long as you retain this notice you\n # can do whatever you want with this stuff. If we meet some day, and you think\n # this stuff is worth it, you can buy me a beer in return. - Muad'Dib\n # ----------------------------------------------------------------------------\n#######################################################################\n\n# Addon Name: Placenta\n# Addon id: plugin.video.placenta\n# Addon Provider: Mr.Blamo\n\nimport re, urllib, urlparse, base64, json, unicodedata\n\nfrom resources.lib.modules import cleantitle\nfrom resources.lib.modules import client\nfrom resources.lib.modules import proxy\n\n\nclass source:\n    def __init__(self):\n        self.priority = 1\n        self.language = ['fr']\n        self.domains = ['filmenstreaminghd.co']\n\n        #http:\/\/dpstreaming.tv\/?s=max+steel\n        #http:\/\/dpstreaming.tv\/max-steel-vostfr-streaming-telecharger\/']\n\n        self.base_link = 'http:\/\/www.filmenstreaminghd.co'\n        self.key_link = '?'\n        self.moviesearch_link = 's=%s'\n        self.tvsearch_link = 's=%s'\n\n    def movie(self, imdb, title, localtitle, aliases, year):\n        try:\n            url = {'imdb': imdb, 'title': title, 'year': year}\n            url = urllib.urlencode(url)\n            return url\n        except:\n            return\n\n    def tvshow(self, imdb, tvdb, tvshowtitle, localtvshowtitle, aliases, year):\n        try:\n            url = {'imdb': imdb, 'tvdb': tvdb, 'tvshowtitle': tvshowtitle, 'year': year}\n            url = urllib.urlencode(url)\n            return url\n        except:\n            return\n\n    def episode(self, url, imdb, tvdb, title, premiered, season, episode):\n        try:\n            if url == None: return\n\n            url = urlparse.parse_qs(url)\n            url = dict([(i, url[i][0]) if url[i] else (i, '') for i in url])\n            url['title'], url['premiered'], url['season'], url['episode'] = title, premiered, season, episode\n            url = urllib.urlencode(url)\n            return url\n        except:\n            return\n\n    def sources(self, url, hostDict, hostprDict):\n        try:\n            print '-------------------------------    -------------------------------'\n            sources = []\n\n            print url\n\n            data = urlparse.parse_qs(url)\n            data = dict([(i, data[i][0]) if data[i] else (i, '') for i in data])\n\n            season = data['season'] if 'season' in data else False\n            episode = data['episode'] if 'episode' in data else False\n\n            print season, episode\n\n            if season and episode:\n                print 'TV'\n\n                self.search_link = 'query=%s&submit=Submit+Query'\n                aTitle = data['tvshowtitle']\n\n            else:\n                self.search_link = 'query=%s&submit=Submit+Query'\n                aTitle = data['title']\n\n\n            post = self.search_link % (urllib.quote_plus(cleantitle.query(aTitle)))\n            url = 'http:\/\/www.filmenstreaminghd.com\/recherche\/'\n\n\n            t = cleantitle.get(aTitle)\n\n            r = client.request(url, XHR=True, referer=url, post=post)\n\n            r = client.parseDOM(r, 'div', attrs={'class': 'film-k kutu-icerik kat'})\n\n            if season and episode:\n                t = t + 'saison0' + season\n\n            r = client.parseDOM(r, 'div', attrs={'class': 'play fa fa-play-circle'})\n            r = sorted(set(r))\n            r = [(client.parseDOM(r, 'a', ret='href'), client.parseDOM(r, 'a', ret='title')) for i in r]\n            r = [(i[0][0], i[1][0].lower()) for i in r if len(i[0]) > 0 and len(i[1]) > 0]\n            r = [i[0] for i in r if t == cleantitle.get(i[1])][0]\n            #r = sorted(set(r))\n\n            url0 = '%s%s' % ('http:\/\/www.filmenstreaminghd.com' , r)\n            print url0\n            url = client.replaceHTMLCodes(url0)\n            url = url0.encode('utf-8')\n\n            r = client.request(url, XHR=True, referer=url)\n            r = re.sub('(\\n|\\t)', '', r)\n\n            langue = re.compile('<b class=\\\"fa fa-cc\\\"><\/b><span>(.+?)<\/span>', re.MULTILINE | re.DOTALL).findall(r)[0]\n            if langue == 'VF':\n                langue = 'FR'\n\n            quality2 = re.compile('<div class=\\\"kalite\\\">(.+?)<\/div>', re.MULTILINE | re.DOTALL).findall(r)[0]\n            quality2 = re.sub('-', '', quality2)\n\n            if season and episode:\n                unLien0a = client.parseDOM(r, 'div', attrs={'class': 'dizi-bolumleri'})[0]\n                r = re.compile('Saison\\s+0%s\\s+\\-\\s+Episode\\s+0%s(.+?)class=\\\"dropit-trigger\\\">' % (season, episode), re.MULTILINE | re.DOTALL).findall(unLien0a)[0]\n                unLien0b = client.parseDOM(r, 'li', ret='id')\n            else:\n                r = client.parseDOM(r, 'div', attrs={'class': 'dizi-bolumleri film'})\n                unLien0b = client.parseDOM(r, 'span', ret='id')\n\n            counter = 0\n\n            for unLienUrl in unLien0b:\n\n                if 'gf-' in unLienUrl:\n                    continue\n\n                dataUrl = urllib.urlencode({'pid': unLienUrl[1:]})\n                dataUrl = client.request(url0, post=dataUrl, XHR=True, referer=url0)\n\n                try:\n                    url = client.parseDOM(dataUrl, 'iframe', ret='src')[1]\n                except:\n                    url = client.parseDOM(dataUrl, 'iframe', ret='src')[0]\n\n                if url.startswith('\/\/'):\n                    url = url.replace('\/\/', '', 1)\n\n                host = re.findall('([\\w]+[.][\\w]+)$', urlparse.urlparse(url.strip().lower()).netloc)[0]\n                if not host in hostDict: continue\n                host = client.replaceHTMLCodes(host)\n                host = host.encode('utf-8')\n\n                url = url.encode('utf-8')\n\n                if '1080p' in quality2:\n                    quality = '1080p'\n                elif '720p' in quality2 or 'bdrip' in quality2 or 'hdrip' in quality2:\n                    quality = 'HD'\n                else:\n                    quality = 'SD'\n\n                if 'dvdscr' in quality2 or 'r5' in quality2 or 'r6' in quality2:\n                    quality2 = 'SCR'\n                elif 'camrip' in quality2 or 'tsrip' in quality2 or 'hdcam' in quality2 or 'hdts' in quality2 or 'dvdcam' in quality2 or 'dvdts' in quality2 or 'cam' in quality2 or 'telesync' in quality2 or 'ts' in quality2:\n                    quality2 = 'CAM'\n\n                sources.append({'source': host, 'quality': quality, 'language': langue, 'url': url, 'direct': False, 'debridonly': False})\n\n            print sources\n\n            return sources\n        except:\n            return sources\n\n\n    def resolve(self, url):\n\n        return url\n"}
{"instruction":"Create a Cloud Function using Python for managing a list of strings.","input":"Not applicable","output":"from google.cloud import storage\n\ndef manage_list_strings(data, context):\n    strings_list = data['strings_list']\n    action = data['action']\n    \n    if action == 'add':\n        strings_list.append(data['string'])\n    elif action == 'delete':\n        strings_list.remove(data['string'])\n    elif action == 'update':\n        strings_list = strings_list.map(lambda x: data['string'] if x == data['old_string'] else x)\n    \n    bucket = storage.Client().get_bucket('my-bucket')\n    blob = bucket.blob('my-strings-list.json')\n    blob.upload_from_string(str(strings_list))\n    \n    return strings_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Cloud Function using Python for managing a list of strings.\n\n### Input:\nNot applicable\n\n### Output:\nfrom google.cloud import storage\n\ndef manage_list_strings(data, context):\n    strings_list = data['strings_list']\n    action = data['action']\n    \n    if action == 'add':\n        strings_list.append(data['string'])\n    elif action == 'delete':\n        strings_list.remove(data['string'])\n    elif action == 'update':\n        strings_list = strings_list.map(lambda x: data['string'] if x == data['old_string'] else x)\n    \n    bucket = storage.Client().get_bucket('my-bucket')\n    blob = bucket.blob('my-strings-list.json')\n    blob.upload_from_string(str(strings_list))\n    \n    return strings_list"}
{"instruction":"Design a Python script to remove all numerical elements from a list.","input":"[1, 2, 3, \"a\", \"b\", \"c\", 4, 5]","output":"lst = [1, 2, 3, \"a\", \"b\", \"c\", 4, 5]\n\nnew_lst = []\n\nfor item in lst:\n    if not isinstance(item, int):\n        new_lst.append(item)\n\nprint(new_lst)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script to remove all numerical elements from a list.\n\n### Input:\n[1, 2, 3, \"a\", \"b\", \"c\", 4, 5]\n\n### Output:\nlst = [1, 2, 3, \"a\", \"b\", \"c\", 4, 5]\n\nnew_lst = []\n\nfor item in lst:\n    if not isinstance(item, int):\n        new_lst.append(item)\n\nprint(new_lst)"}
{"instruction":"Write a Python script that takes a paragraph as input and prints the unique words in it.","input":"This is a sample paragraph.","output":"paragraph = \"This is a sample paragraph.\"\n\n# split the string into words\nwords = paragraph.split()\n\n# sort the words alphabetically\nwords.sort()\n\n# remove duplicates\nunique_words = []\nfor word in words:\n    if word not in unique_words:\n        unique_words.append(word)\n\n# print the unique words\nprint(\", \".join(unique_words))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that takes a paragraph as input and prints the unique words in it.\n\n### Input:\nThis is a sample paragraph.\n\n### Output:\nparagraph = \"This is a sample paragraph.\"\n\n# split the string into words\nwords = paragraph.split()\n\n# sort the words alphabetically\nwords.sort()\n\n# remove duplicates\nunique_words = []\nfor word in words:\n    if word not in unique_words:\n        unique_words.append(word)\n\n# print the unique words\nprint(\", \".join(unique_words))"}
{"instruction":"Create a Python function to generate a password of length 10 containing alphanumeric characters only.","input":"","output":"import string\nimport random\n\ndef generate_password(length):\n    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits\n    return ''.join(random.choice(chars) for _ in range(length))\n\ngenerate_password(10)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to generate a password of length 10 containing alphanumeric characters only.\n\n### Input:\n\n\n### Output:\nimport string\nimport random\n\ndef generate_password(length):\n    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits\n    return ''.join(random.choice(chars) for _ in range(length))\n\ngenerate_password(10)"}
{"instruction":"Make a Python program to get the factors of a number","input":"","output":"def get_factors(n): \n    factors = [1]\n    for i in range(2, n + 1):\n        if (n % i == 0): \n            factors.append(i) \n    return factors","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a Python program to get the factors of a number\n\n### Input:\n\n\n### Output:\ndef get_factors(n): \n    factors = [1]\n    for i in range(2, n + 1):\n        if (n % i == 0): \n            factors.append(i) \n    return factors"}
{"instruction":"Write a python program to retrieve the value at a given index of a list.","input":"Lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nIndex = 1","output":"def getValueAtIndex(my_list, index):\n    return my_list[index]\n\nresult = getValueAtIndex([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) \nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to retrieve the value at a given index of a list.\n\n### Input:\nLists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nIndex = 1\n\n### Output:\ndef getValueAtIndex(my_list, index):\n    return my_list[index]\n\nresult = getValueAtIndex([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) \nprint(result)"}
{"instruction":"Design an algorithm in Python to perform binary search.","input":"","output":"def binary_search(arr, target):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) \/\/ 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to perform binary search.\n\n### Input:\n\n\n### Output:\ndef binary_search(arr, target):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) \/\/ 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1"}
{"instruction":"Create a python data structure that stores the following three values: \"apple\": 0, \"orange\": 25, and \"banana\": 52.","input":"","output":"numbers = {\"apple\": 0, \"orange\": 25, \"banana\": 52}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python data structure that stores the following three values: \"apple\": 0, \"orange\": 25, and \"banana\": 52.\n\n### Input:\n\n\n### Output:\nnumbers = {\"apple\": 0, \"orange\": 25, \"banana\": 52}"}
{"instruction":"Design a web scraper using python to extract information from wikipedia.","input":"","output":"import requests\nfrom bs4 import BeautifulSoup\n\nweb_url = \"https:\/\/en.wikipedia.org\/wiki\/Wikipedia\"\n\nweb_data = requests.get(web_url).text\nsoup = BeautifulSoup(web_data,\"html.parser\")\n\nfor title in soup.find_all(\"h1\"):\n    print(title.string)\n\nfor para in soup.find_all(\"p\"):\n    print(para.string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a web scraper using python to extract information from wikipedia.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nweb_url = \"https:\/\/en.wikipedia.org\/wiki\/Wikipedia\"\n\nweb_data = requests.get(web_url).text\nsoup = BeautifulSoup(web_data,\"html.parser\")\n\nfor title in soup.find_all(\"h1\"):\n    print(title.string)\n\nfor para in soup.find_all(\"p\"):\n    print(para.string)"}
{"instruction":"Debug the following Python program which raises a SyntaxError.","input":"","output":"def func(a, b): \n  c = a + b \n  return c \n\na = 4 \nb = 5 \n\nres = func(a, b) \nprint(res)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDebug the following Python program which raises a SyntaxError.\n\n### Input:\n\n\n### Output:\ndef func(a, b): \n  c = a + b \n  return c \n\na = 4 \nb = 5 \n\nres = func(a, b) \nprint(res)"}
{"instruction":"Develop a machine learning algorithm in Python to identify apples from bananas.","input":"No Input","output":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.svm import SVC\n\n# Load data\nX = np.array([[1,2,3], [-1,2,5], [-1,2,7], [5,5,5], [3,3,3], [5,5,7]])\ny = np.array([0, 0, 0, 1, 0, 1])\n\n# Initialize classifier\nclf = SVC(kernel='linear')\n\n# Fit data\nclf.fit(X, y)\n\n# Test classifier\nx_test = np.array([[2,2,2], [4,4,4]])\n\nprediction = clf.predict(x_test)\nprint(prediction)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a machine learning algorithm in Python to identify apples from bananas.\n\n### Input:\nNo Input\n\n### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.svm import SVC\n\n# Load data\nX = np.array([[1,2,3], [-1,2,5], [-1,2,7], [5,5,5], [3,3,3], [5,5,7]])\ny = np.array([0, 0, 0, 1, 0, 1])\n\n# Initialize classifier\nclf = SVC(kernel='linear')\n\n# Fit data\nclf.fit(X, y)\n\n# Test classifier\nx_test = np.array([[2,2,2], [4,4,4]])\n\nprediction = clf.predict(x_test)\nprint(prediction)"}
{"instruction":"Develop a program in Python to sort the elements in a list in ascending order.","input":"unsorted_list = [4,6,1,7,2]","output":"def bubble_sort(unsorted_list): \n     for i in range(len(unsorted_list)-1): \n        for j in range(0, len(unsorted_list)-1-i): \n            if(unsorted_list[j] > unsorted_list[j+1]): \n                temp = unsorted_list[j] \n                unsorted_list[j] = unsorted_list[j+1] \n                unsorted_list[j+1] = temp\n                \nbubble_sort(unsorted_list)\nprint(unsorted_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python to sort the elements in a list in ascending order.\n\n### Input:\nunsorted_list = [4,6,1,7,2]\n\n### Output:\ndef bubble_sort(unsorted_list): \n     for i in range(len(unsorted_list)-1): \n        for j in range(0, len(unsorted_list)-1-i): \n            if(unsorted_list[j] > unsorted_list[j+1]): \n                temp = unsorted_list[j] \n                unsorted_list[j] = unsorted_list[j+1] \n                unsorted_list[j+1] = temp\n                \nbubble_sort(unsorted_list)\nprint(unsorted_list)"}
{"instruction":"Create a function to invert the keys and values of a dictionary in Python.","input":"{\n    \"apple\": 3,\n    \"banana\": 4,\n    \"carrot\": 2\n}","output":"def invert_dictionary(input_dict):\n    output_dict = {}\n    for key, value in input_dict.items():\n        output_dict[value] = key\n    return output_dict\n\ninverted_dict = invert_dictionary({\n    \"apple\": 3,\n    \"banana\": 4,\n    \"carrot\": 2\n})\n\nprint(inverted_dict) # {3: 'apple', 4: 'banana', 2: 'carrot'}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to invert the keys and values of a dictionary in Python.\n\n### Input:\n{\n    \"apple\": 3,\n    \"banana\": 4,\n    \"carrot\": 2\n}\n\n### Output:\ndef invert_dictionary(input_dict):\n    output_dict = {}\n    for key, value in input_dict.items():\n        output_dict[value] = key\n    return output_dict\n\ninverted_dict = invert_dictionary({\n    \"apple\": 3,\n    \"banana\": 4,\n    \"carrot\": 2\n})\n\nprint(inverted_dict) # {3: 'apple', 4: 'banana', 2: 'carrot'}"}
{"instruction":"Write a Python script that identifies a given sentence as being positive or negative.","input":"Sentence: I'm feeling great today","output":"def identify_sentiment(sentence):\n    # Split sentence into individual words\n    words = sentence.split()\n\n    # Import Textblob package\n    from textblob import TextBlob\n\n    # Create a textblob object\n    analysis = TextBlob(' '.join(words))\n\n    # Return sentiment polarity \n    return analysis.sentiment.polarity\n    \n    \nif __name__ == \"__main__\":\n    sentiment = identify_sentiment('I'm feeling great today')\n    if sentiment > 0:\n        print('Positive sentiment')\n    elif sentiment == 0:\n        print('Neutral sentiment')\n    else:\n        print('Negative sentiment')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that identifies a given sentence as being positive or negative.\n\n### Input:\nSentence: I'm feeling great today\n\n### Output:\ndef identify_sentiment(sentence):\n    # Split sentence into individual words\n    words = sentence.split()\n\n    # Import Textblob package\n    from textblob import TextBlob\n\n    # Create a textblob object\n    analysis = TextBlob(' '.join(words))\n\n    # Return sentiment polarity \n    return analysis.sentiment.polarity\n    \n    \nif __name__ == \"__main__\":\n    sentiment = identify_sentiment('I'm feeling great today')\n    if sentiment > 0:\n        print('Positive sentiment')\n    elif sentiment == 0:\n        print('Neutral sentiment')\n    else:\n        print('Negative sentiment')"}
{"instruction":"Generate a code in Python to measure the loading time of a website.","input":"","output":"import time  \nimport urllib.request  \n  \ndef loadUrl(url): \n    start = time.time() \n    response = urllib.request.urlopen(url) \n    end = time.time()\n    total_time = end - start\n    print(total_time)\n  \nurl = input(\"Enter website url: \")\nloadUrl(url)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code in Python to measure the loading time of a website.\n\n### Input:\n\n\n### Output:\nimport time  \nimport urllib.request  \n  \ndef loadUrl(url): \n    start = time.time() \n    response = urllib.request.urlopen(url) \n    end = time.time()\n    total_time = end - start\n    print(total_time)\n  \nurl = input(\"Enter website url: \")\nloadUrl(url)"}
{"instruction":"Create a text-based game using Python.","input":"","output":"# Game setup\nname = input(\"What is your name? \")\nprint(\"Welcome, \" + name + \"!\")\n\n# Main loop\nwhile True:\n\n    # Get player input\n    command = input(\"What would you like to do? \")\n\n    # Execute command\n    if command == \"go north\":\n        print(\"You head north.\")\n    elif command == \"go east\":\n        print(\"You head east.\")\n    elif command == \"go south\":\n        print(\"You head south.\")\n    elif command == \"go west\":\n        print(\"You head west.\")\n    elif command == \"quit\":\n        print(\"Goodbye, \" + name + \"!\")\n        break\n    else:\n        print(\"Sorry, I don't understand.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a text-based game using Python.\n\n### Input:\n\n\n### Output:\n# Game setup\nname = input(\"What is your name? \")\nprint(\"Welcome, \" + name + \"!\")\n\n# Main loop\nwhile True:\n\n    # Get player input\n    command = input(\"What would you like to do? \")\n\n    # Execute command\n    if command == \"go north\":\n        print(\"You head north.\")\n    elif command == \"go east\":\n        print(\"You head east.\")\n    elif command == \"go south\":\n        print(\"You head south.\")\n    elif command == \"go west\":\n        print(\"You head west.\")\n    elif command == \"quit\":\n        print(\"Goodbye, \" + name + \"!\")\n        break\n    else:\n        print(\"Sorry, I don't understand.\")"}
{"instruction":"Identify one potential optimization that could be made to the following Python code.","input":"def func(n):\n    if n == 0:\n        return 0\n    return n + func(n-1)","output":"The potential optimization is to store the previous results in a dictionary and check if the results for n - 1 is already present in the dictionary, if it is present then use the result present in the dictionary instead of executing the function for n-1 again. This will reduce the time complexity from O(n) to O(1).\n\ndef func(n):\n    mydict = dict()\n    if n == 0:\n        return 0\n    if n in mydict:\n        return mydict[n]\n    mydict[n] = n + func(n-1)\n    return mydict[n]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIdentify one potential optimization that could be made to the following Python code.\n\n### Input:\ndef func(n):\n    if n == 0:\n        return 0\n    return n + func(n-1)\n\n### Output:\nThe potential optimization is to store the previous results in a dictionary and check if the results for n - 1 is already present in the dictionary, if it is present then use the result present in the dictionary instead of executing the function for n-1 again. This will reduce the time complexity from O(n) to O(1).\n\ndef func(n):\n    mydict = dict()\n    if n == 0:\n        return 0\n    if n in mydict:\n        return mydict[n]\n    mydict[n] = n + func(n-1)\n    return mydict[n]"}
{"instruction":"Generate a Python program that takes a date as input and returns the day of the week as a string (i.e. Sunday, Monday, etc.).","input":"3\/22\/2021","output":"import datetime\n\ndef get_weekday(date_string):\n    date = datetime.datetime.strptime(date_string, '%m\/%d\/%Y')\n    return date.strftime('%A')\n\nweekday = get_weekday('3\/22\/2021')\nprint(weekday)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that takes a date as input and returns the day of the week as a string (i.e. Sunday, Monday, etc.).\n\n### Input:\n3\/22\/2021\n\n### Output:\nimport datetime\n\ndef get_weekday(date_string):\n    date = datetime.datetime.strptime(date_string, '%m\/%d\/%Y')\n    return date.strftime('%A')\n\nweekday = get_weekday('3\/22\/2021')\nprint(weekday)"}
{"instruction":"In this Python code, identify the type of data structure being used and write down advantages and disadvantages of using this type of data structure.","input":"my_list = [\"Apple\", \"Banana\", \"Orange\", \"Mango\"]","output":"A list is being used in this code snippet. Advantages of using a list are that it is mutable, can store duplicate data, and allows for indexing. Disadvantages of using a list are that it can be slow if the list is very long and operations take a long time.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn this Python code, identify the type of data structure being used and write down advantages and disadvantages of using this type of data structure.\n\n### Input:\nmy_list = [\"Apple\", \"Banana\", \"Orange\", \"Mango\"]\n\n### Output:\nA list is being used in this code snippet. Advantages of using a list are that it is mutable, can store duplicate data, and allows for indexing. Disadvantages of using a list are that it can be slow if the list is very long and operations take a long time."}
{"instruction":"Find the average of the numbers 10 and 15 in a python program.","input":"","output":"def average(x, y):\n return (x + y) \/ 2\n\nresult = average(10, 15)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the average of the numbers 10 and 15 in a python program.\n\n### Input:\n\n\n### Output:\ndef average(x, y):\n return (x + y) \/ 2\n\nresult = average(10, 15)\nprint(result)"}
{"instruction":"Write a Python program to find all numbers divisible by sixteen from a given list of numbers.","input":"[20, 16, 5, 6, 26, 48]","output":"list_numbers = [20, 16, 5, 6, 26, 48]\n\ndivisible_numbers = []\nfor number in list_numbers:\n    if number % 16 == 0:\n        divisible_numbers.append(number)\n\nprint(divisible_numbers)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find all numbers divisible by sixteen from a given list of numbers.\n\n### Input:\n[20, 16, 5, 6, 26, 48]\n\n### Output:\nlist_numbers = [20, 16, 5, 6, 26, 48]\n\ndivisible_numbers = []\nfor number in list_numbers:\n    if number % 16 == 0:\n        divisible_numbers.append(number)\n\nprint(divisible_numbers)"}
{"instruction":"Compose a function in Python to take two numbers as input and return the greatest number.","input":"5 and 8","output":"def getGreatestNumber(a, b):\n    if a > b:\n        return a\n    return b\n\ngreatest_num = getGreatestNumber(5, 8)\nprint(\"Greatest number is\", greatest_num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a function in Python to take two numbers as input and return the greatest number.\n\n### Input:\n5 and 8\n\n### Output:\ndef getGreatestNumber(a, b):\n    if a > b:\n        return a\n    return b\n\ngreatest_num = getGreatestNumber(5, 8)\nprint(\"Greatest number is\", greatest_num)"}
{"instruction":"Generate a Python program to find all the common elements of two given lists.","input":"[1, 2, 3], [3, 4, 5]","output":"def find_common_elements(list1, list2):\n return list(set(list1).intersection(set(list2)))\n\nresult = find_common_elements([1, 2, 3], [3, 4, 5])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to find all the common elements of two given lists.\n\n### Input:\n[1, 2, 3], [3, 4, 5]\n\n### Output:\ndef find_common_elements(list1, list2):\n return list(set(list1).intersection(set(list2)))\n\nresult = find_common_elements([1, 2, 3], [3, 4, 5])\nprint(result)"}
{"instruction":"Suppose you have a dictionary of books with each containing a title and a list of page numbers that refer to the page numbers of the book. Write a Python program to create a new dictionary with only the page numbers as the keys, and their corresponding titles as the values.","input":"book_dict = {\n    \"The Lord of the Rings\": [1, 32, 54, 75], \n    \"Harry Potter and the Sorcerer's Stone\": [1, 26, 92, 132], \n    \"To Kill a Mockingbird\": [1, 15, 52, 101] \n}","output":"page_dict = {\n    1: [\"The Lord of the Rings\", \"Harry Potter and the Sorcerer's Stone\", \"To Kill a Mockingbird\"],\n    32: [\"The Lord of the Rings\"],\n    54: [\"The Lord of the Rings\"],\n    75: [\"The Lord of the Rings\"],\n    26: [\"Harry Potter and the Sorcerer's Stone\"],\n    92: [\"Harry Potter and the Sorcerer's Stone\"],\n    132: [\"Harry Potter and the Sorcerer's Stone\"],\n    15: [\"To Kill a Mockingbird\"],\n    52: [\"To Kill a Mockingbird\"],\n    101: [\"To Kill a Mockingbird\"]\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuppose you have a dictionary of books with each containing a title and a list of page numbers that refer to the page numbers of the book. Write a Python program to create a new dictionary with only the page numbers as the keys, and their corresponding titles as the values.\n\n### Input:\nbook_dict = {\n    \"The Lord of the Rings\": [1, 32, 54, 75], \n    \"Harry Potter and the Sorcerer's Stone\": [1, 26, 92, 132], \n    \"To Kill a Mockingbird\": [1, 15, 52, 101] \n}\n\n### Output:\npage_dict = {\n    1: [\"The Lord of the Rings\", \"Harry Potter and the Sorcerer's Stone\", \"To Kill a Mockingbird\"],\n    32: [\"The Lord of the Rings\"],\n    54: [\"The Lord of the Rings\"],\n    75: [\"The Lord of the Rings\"],\n    26: [\"Harry Potter and the Sorcerer's Stone\"],\n    92: [\"Harry Potter and the Sorcerer's Stone\"],\n    132: [\"Harry Potter and the Sorcerer's Stone\"],\n    15: [\"To Kill a Mockingbird\"],\n    52: [\"To Kill a Mockingbird\"],\n    101: [\"To Kill a Mockingbird\"]\n}"}
{"instruction":"Create a function in Python to find the longest string in a given list of strings","input":"[\"Apple\", \"Banana\", \"Orange\", \"Mango\", \"Pineapple\"]","output":"def find_longest_string(arr):\n    longest_string = ''\n    for s in arr:\n        if len(s) > len(longest_string):\n            longest_string = s\n    return longest_string\n\narr = [\"Apple\", \"Banana\", \"Orange\", \"Mango\", \"Pineapple\"]\nresult = find_longest_string(arr)\nprint('Longest string is', result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to find the longest string in a given list of strings\n\n### Input:\n[\"Apple\", \"Banana\", \"Orange\", \"Mango\", \"Pineapple\"]\n\n### Output:\ndef find_longest_string(arr):\n    longest_string = ''\n    for s in arr:\n        if len(s) > len(longest_string):\n            longest_string = s\n    return longest_string\n\narr = [\"Apple\", \"Banana\", \"Orange\", \"Mango\", \"Pineapple\"]\nresult = find_longest_string(arr)\nprint('Longest string is', result)"}
{"instruction":"Create a web scraper using Python and Scrapy to retrieve the titles and URLs of all articles on a given website.","input":"Example website: https:\/\/example.org\/","output":"import scrapy\n\nclass ExampleSpider(scrapy.Spider):\n name = 'example'\n allowed_domains = ['example.org']\n start_urls = ['https:\/\/example.org\/']\n\n def parse(self, response):\n    for article in response.xpath(\"\/\/div[@class='article']\"):\n        yield {\n            'title': article.xpath(\".\/h1\/text()\").get(),\n            'url': article.xpath(\".\/a\/@href\").get(),\n        }","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper using Python and Scrapy to retrieve the titles and URLs of all articles on a given website.\n\n### Input:\nExample website: https:\/\/example.org\/\n\n### Output:\nimport scrapy\n\nclass ExampleSpider(scrapy.Spider):\n name = 'example'\n allowed_domains = ['example.org']\n start_urls = ['https:\/\/example.org\/']\n\n def parse(self, response):\n    for article in response.xpath(\"\/\/div[@class='article']\"):\n        yield {\n            'title': article.xpath(\".\/h1\/text()\").get(),\n            'url': article.xpath(\".\/a\/@href\").get(),\n        }"}
{"instruction":"Create a web application in Python and Flask to display information about books.","input":"books = [\n  {\n   'title': 'Book 1',\n   'author': 'John Doe',\n   'publisher': 'ABC Publisher',\n  },\n  {\n   'title': 'Book 2',\n   'author': 'Jane Doe',\n   'publisher': 'XYZ Publisher',\n  }\n]","output":"from flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('\/')\ndef index():\n books = [\n  {\n   'title': 'Book 1',\n   'author': 'John Doe',\n   'publisher': 'ABC Publisher',\n  },\n  {\n   'title': 'Book 2',\n   'author': 'Jane Doe',\n   'publisher': 'XYZ Publisher',\n  }\n]\n return render_template('index.html', books=books)\n\nif __name__ == '__main__':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application in Python and Flask to display information about books.\n\n### Input:\nbooks = [\n  {\n   'title': 'Book 1',\n   'author': 'John Doe',\n   'publisher': 'ABC Publisher',\n  },\n  {\n   'title': 'Book 2',\n   'author': 'Jane Doe',\n   'publisher': 'XYZ Publisher',\n  }\n]\n\n### Output:\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('\/')\ndef index():\n books = [\n  {\n   'title': 'Book 1',\n   'author': 'John Doe',\n   'publisher': 'ABC Publisher',\n  },\n  {\n   'title': 'Book 2',\n   'author': 'Jane Doe',\n   'publisher': 'XYZ Publisher',\n  }\n]\n return render_template('index.html', books=books)\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"instruction":"Create a command-line chatbot in Python that can respond to simple questions like \"What is your name?\"","input":"Not applicable","output":"import cmd\n\nclass Bot(cmd.Cmd):\n prompt = 'Bot> '\n \n def do_greet(self, args):\n print('Hello! My name is Bot.')\n\ndef do_name(self, args):\n print('My name is Bot.')\n\nif __name__ == '__main__':\n Bot().cmdloop()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a command-line chatbot in Python that can respond to simple questions like \"What is your name?\"\n\n### Input:\nNot applicable\n\n### Output:\nimport cmd\n\nclass Bot(cmd.Cmd):\n prompt = 'Bot> '\n \n def do_greet(self, args):\n print('Hello! My name is Bot.')\n\ndef do_name(self, args):\n print('My name is Bot.')\n\nif __name__ == '__main__':\n Bot().cmdloop()"}
{"instruction":"Write a Python program to detect the most frequently used words in a given set of HTML documents.","input":"<html>\n<head>\n    <title>Example<\/title>\n<\/head>\n<body>\n    <p>This is some text containing words like \"cat\", \"dog\" and \"mouse\".<\/p>\n    <p>This is a different paragraph with additional words like \"apple\" and \"banana\".<\/p>\n<\/body>\n<\/html>","output":"# imports \nimport re\nimport string\nfrom collections import Counter\n\n# read the html file\nhtml text = \"\"\nwith open('example.html', 'r') as f:\n html_text = f.read()\n\n# remove punctuation from the html file\nfor char in string.punctuation:\n html_text = html_text.replace(char, \"\")\n\n# split file into words\nwords = html_text.split()\n\n# count the occurrence of each word\nword_counts = Counter(words)\n\n# print the most frequent word\nprint(\"Most frequent words: \")\nfor word in word_counts.most_common():\n print(word[0])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to detect the most frequently used words in a given set of HTML documents.\n\n### Input:\n<html>\n<head>\n    <title>Example<\/title>\n<\/head>\n<body>\n    <p>This is some text containing words like \"cat\", \"dog\" and \"mouse\".<\/p>\n    <p>This is a different paragraph with additional words like \"apple\" and \"banana\".<\/p>\n<\/body>\n<\/html>\n\n### Output:\n# imports \nimport re\nimport string\nfrom collections import Counter\n\n# read the html file\nhtml text = \"\"\nwith open('example.html', 'r') as f:\n html_text = f.read()\n\n# remove punctuation from the html file\nfor char in string.punctuation:\n html_text = html_text.replace(char, \"\")\n\n# split file into words\nwords = html_text.split()\n\n# count the occurrence of each word\nword_counts = Counter(words)\n\n# print the most frequent word\nprint(\"Most frequent words: \")\nfor word in word_counts.most_common():\n print(word[0])"}
{"instruction":"Compose a Python program to move zeros in a given list to the end.","input":"[1,0,2,3,0,4,5,0]","output":"def move_zeroes(nums):\n    \"\"\"\n    Moves all the zeros in a given list to the end.\n    @param nums: List\n    @return: List\n    \"\"\"\n    i = 0\n    for num in nums:\n        if num != 0:\n            nums[i] = num\n            i += 1\n    while i < len(nums):\n        nums[i] = 0\n        i += 1\n    return nums","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python program to move zeros in a given list to the end.\n\n### Input:\n[1,0,2,3,0,4,5,0]\n\n### Output:\ndef move_zeroes(nums):\n    \"\"\"\n    Moves all the zeros in a given list to the end.\n    @param nums: List\n    @return: List\n    \"\"\"\n    i = 0\n    for num in nums:\n        if num != 0:\n            nums[i] = num\n            i += 1\n    while i < len(nums):\n        nums[i] = 0\n        i += 1\n    return nums"}
{"instruction":"To find the optimal solution for the two pitchers problem, follow these steps:\n\n1. Make sure you have Python 3 installed.\n2. Copy the given code into a Python file.\n3. Run the program.\n4. Enter the volumes of the two pitchers when prompted.\n5. Enter the desired volume when prompted.\n6. The program will output the number of steps required and the actions to take to reach the desired volume.","input":"","output":"\"\"\"\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0438\u0449\u0435\u0442 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e \u0434\u0432\u0430 \u043a\u0443\u0432\u0448\u0438\u043d\u0430\n\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f Python 3\n\"\"\"\nfrom enum import Enum\n\n\nclass Action(Enum):\n    \"\"\"\n    \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043a\u0443\u0432\u0448\u0438\u043d\u0430\u043c\u0438\n    \"\"\"\n    empty = 0\n    fill = 1\n    transfer = 2\n    start = 3\n\n\ndef get_pitchers_volume():\n    \"\"\"\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0431\u044a\u0451\u043c\u043e\u0432 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\n    \"\"\"\n    while True:  # pitchers_volume \u044d\u0442\u043e list \u0438\u0437 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435\u043c \u0432\u0432\u043e\u0434\u0438\u043c\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438\n        pitchers_volume = list(int(pitcher) for pitcher in input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u043e\u0431\u044a\u0451\u043c\u044b \u0434\u0432\u0443\u0445 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432: \").split())\n\n        if len(pitchers_volume) != 2:  # \u041c\u044b \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u0443\u0447\u0430\u0438 \u0441 \u0434\u0432\u0443\u043c\u044f \u043a\u0443\u0432\u0448\u0438\u043d\u0430\u043c\u0438\n            print('\u0410\u0439\u0430\u0439\u0430\u0439! \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0437\u0430\u043d\u043e\u0432\u043e.')\n        else:\n            return pitchers_volume\n\n\ndef get_target():\n    \"\"\"\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0451\u043c\n    \"\"\"\n    return int(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0451\u043c: \"))\n\n\ndef greatest_common_divisor(a, b):\n    \"\"\"\n    \u0421\u0447\u0438\u0442\u0430\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0431\u0449\u0438\u0439 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef make_edges(i, j, i_max, j_max):\n    \"\"\"\n    \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0432\u0441\u0435\u0445 \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0432\u0435\u0442\u0432\u0435\u0439 \u0433\u0440\u0430\u0444\u0430 \u0432 \u0442\u043e\u0447\u043a\u0435 (i, j)\n    \u0413\u0434\u0435 i \u0438 j \u2014 \u043d\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\n    \"\"\"\n    edges = dict()\n\n    # \u0415\u0441\u043b\u0438 \u043a\u0443\u0432\u0448\u0438\u043d\u044b \u043d\u0435 \u043f\u0443\u0441\u0442\u044b, \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0443\u0441\u0442\u043e\u0448\u0438\u0442\u044c\n    if i != 0:\n        edges[(0, j)] = Action.empty\n    if j != 0:\n        edges[(i, 0)] = Action.empty\n\n    # \u0415\u0441\u043b\u0438 \u043a\u0443\u0432\u0448\u0438\u043d\u044b \u043d\u0435 \u043f\u043e\u043b\u043d\u044b\u0435, \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c\n    if i != i_max:\n        edges[(i_max, j)] = Action.fill\n    if j != j_max:\n        edges[(i, j_max)] = Action.fill\n\n    # \u0418\u0437 \u043d\u0435\u043f\u0443\u0441\u0442\u043e\u0433\u043e \u043a\u0443\u0432\u0448\u0438\u043d\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043b\u0438\u0442\u044c \u0432 \u043d\u0435\u043f\u043e\u043b\u043d\u044b\u0439\n    if i != 0 and j_max-j >= i:\n        edges[(0, j+i)] = Action.transfer\n    if j != 0 and i_max-i >= j:\n        edges[(i+j, 0)] = Action.transfer\n\n    # \u041f\u0440\u0438\u0447\u0435\u043c, \u0435\u0441\u043b\u0438 \u0432 \u043d\u0435\u043f\u043e\u043b\u043d\u043e\u043c \u043d\u0435 \u0445\u0432\u0430\u0442\u0438\u0442 \u043c\u0435\u0441\u0442\u0430,\n    # \u0442\u043e \u043e\u0431\u0430 \u043a\u0443\u0432\u0448\u0438\u043d\u0430 \u043e\u0441\u0442\u0430\u043d\u0443\u0442\u0441\u044f \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u043c\u0438\n    if j != 0 and 0 < i_max-i < j:\n        edges[(i_max, j - (i_max-i))] = Action.transfer\n    if i != 0 and 0 < j_max-j < i:\n        edges[(i - (j_max-j), j_max)] = Action.transfer\n    return edges\n\n\ndef make_pitchers_graph(pitchers_volume):\n    \"\"\"\n    \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043a\u043b\u044e\u0447\u0438 \u2014 \u0432\u0441\u0435 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u043d\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432,\n    \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u2014 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u044b \u0438\u0437 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438\n    \"\"\"\n    pitchers_graph = dict()\n    gcd = greatest_common_divisor(pitchers_volume[0], pitchers_volume[1])\n    for i in range(0, int(pitchers_volume[0]\/gcd)+1):      # \u041d\u0430\u0439\u0434\u0451\u043c \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043e\u0431\u0449\u0435\u0435 \u043a\u0440\u0430\u0442\u043d\u043e\u0435 \u0443 \u043e\u0431\u044a\u0451\u043c\u043e\u0432 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\n        for j in range(0, int(pitchers_volume[1]\/gcd)+1):  # \u0418 \u043f\u043e\u0434\u0435\u043b\u0438\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043e\u0431\u044a\u0451\u043c\u043e\u0432 \u043d\u0430 \u043d\u0435\u0433\u043e, \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438\n            pitchers_graph[(i*gcd, j*gcd)] = make_edges(i*gcd, j*gcd, pitchers_volume[0], pitchers_volume[1])\n    return pitchers_graph\n\n\ndef dijkstra(graph, start_node, target):\n    \"\"\"\n    \u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0438\u0439 \u043f\u0443\u0442\u044c \u0432 \u0433\u0440\u0430\u0444\u0435\n    \"\"\"\n    distance = dict.fromkeys(graph, float('inf'))\n    path = dict()\n    path[start_node] = [[[start_node], [Action.start]]]  # \u041f\u0443\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u0437\n    distance[start_node] = 0                           # \u0438\u043c\u0451\u043d \u0443\u0437\u043b\u043e\u0432 \u0441\u043e\u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f list \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0443\u0437\u043b\u043e\u0432\n    node_set = set(graph)                              # \u0441 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0442\u0438\u043f\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043a\u0443\u0432\u0448\u0438\u043d\u0430\u043c\u0438\n    targets_list = [node for node in node_set                   # \u0426\u0435\u043b\u0438 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u043a\u0430\u043a list \u0438\u0437 \u0432\u0441\u0435\u0445 \u0443\u0437\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435\n                    if node[0] == target or node[1] == target]  # \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0444\u0438\u043d\u0438\u0448\u0430\n\n    while node_set:\n        node = min(node_set, key=distance.get)\n        if node in targets_list and node in path:  # \u041a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0448\u043b\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0443\u0437\u0435\u043b \u2014 \u0432\u044b\u0445\u043e\u0434\u0438\u043c. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u044b \u0438\u0449\u0435\u043c\n            return path[node]                      # \u043e\u0442 \u0442\u043e\u0447\u043a\u0438 (0, 0), \u0430 \u0432\u0435\u0441 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0431\u0440\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c,\n        node_set.remove(node)                      # \u0442\u043e \u043f\u0435\u0440\u0432\u044b\u0439 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0439 \u0443\u0437\u0435\u043b \u0438 \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c\n        for child_node in graph[node].keys():\n            if distance[child_node] >= distance[node] + 1:  # \u0412\u0435\u0441 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0431\u0440\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0437\u0430 \u0435\u0434\u0438\u043d\u0438\u0446\u0443\n                distance[child_node] = distance[node] + 1\n                path[child_node] = list()\n                path[child_node].extend(path[node])     # \u041f\u0443\u0442\u044c \u0434\u043e \u043d\u043e\u0432\u043e\u0433\u043e \u0443\u0437\u043b\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043f\u0443\u0442\u0438 \u0434\u043e \u0435\u0433\u043e \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n                path[child_node].append([[child_node],  # \u043f\u043b\u044e\u0441 \u0441\u0430\u043c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\n                                         [graph[node].get(child_node)]])  # \u0441 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0442\u0438\u043f\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\n\n\ndef show_answer(path, target):\n    \"\"\"\n    \u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0432\u0435\u0442 \u0432 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u043e\u0447\u0438\u0442\u0430\u0435\u043c\u043e\u043c \u0432\u0438\u0434\u0435\n    \"\"\"\n    if path is not None:\n        print('\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0448\u0430\u0433\u043e\u0432: {}'.format(len(path)-1))\n        for node in path:\n            print(node[0][0], end=' ')  # \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\n            print(node[1][0].name)      # \u0422\u0438\u043f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\n    else:\n        print('\u041d\u0435\u043b\u044c\u0437\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c {}\u043b., \u0438\u043c\u0435\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u0443\u0432\u0448\u0438\u043d\u044b.'.format(target))\n\n\npitchers_volume = get_pitchers_volume()  # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u043e\u0431\u044a\u0451\u043c\u044b \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\ntarget_node = get_target()               # \u0418 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0451\u043c\nstart_node = (0, 0)  # \u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0441 \u043f\u0443\u0441\u0442\u044b\u0445 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\npitchers_graph = make_pitchers_graph(pitchers_volume)  # \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u0433\u0440\u0430\u0444 \u0438\u0437 \u0432\u0441\u0435\u0445 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\npath = dijkstra(pitchers_graph, start_node, target_node)  # \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0438\u0439 \u043f\u0443\u0442\u044c\nshow_answer(path, target_node)  # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTo find the optimal solution for the two pitchers problem, follow these steps:\n\n1. Make sure you have Python 3 installed.\n2. Copy the given code into a Python file.\n3. Run the program.\n4. Enter the volumes of the two pitchers when prompted.\n5. Enter the desired volume when prompted.\n6. The program will output the number of steps required and the actions to take to reach the desired volume.\n\n### Input:\n\n\n### Output:\n\"\"\"\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0438\u0449\u0435\u0442 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e \u0434\u0432\u0430 \u043a\u0443\u0432\u0448\u0438\u043d\u0430\n\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f Python 3\n\"\"\"\nfrom enum import Enum\n\n\nclass Action(Enum):\n    \"\"\"\n    \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043a\u0443\u0432\u0448\u0438\u043d\u0430\u043c\u0438\n    \"\"\"\n    empty = 0\n    fill = 1\n    transfer = 2\n    start = 3\n\n\ndef get_pitchers_volume():\n    \"\"\"\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0431\u044a\u0451\u043c\u043e\u0432 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\n    \"\"\"\n    while True:  # pitchers_volume \u044d\u0442\u043e list \u0438\u0437 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435\u043c \u0432\u0432\u043e\u0434\u0438\u043c\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438\n        pitchers_volume = list(int(pitcher) for pitcher in input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u043e\u0431\u044a\u0451\u043c\u044b \u0434\u0432\u0443\u0445 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432: \").split())\n\n        if len(pitchers_volume) != 2:  # \u041c\u044b \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u0443\u0447\u0430\u0438 \u0441 \u0434\u0432\u0443\u043c\u044f \u043a\u0443\u0432\u0448\u0438\u043d\u0430\u043c\u0438\n            print('\u0410\u0439\u0430\u0439\u0430\u0439! \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0437\u0430\u043d\u043e\u0432\u043e.')\n        else:\n            return pitchers_volume\n\n\ndef get_target():\n    \"\"\"\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0451\u043c\n    \"\"\"\n    return int(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0451\u043c: \"))\n\n\ndef greatest_common_divisor(a, b):\n    \"\"\"\n    \u0421\u0447\u0438\u0442\u0430\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0431\u0449\u0438\u0439 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef make_edges(i, j, i_max, j_max):\n    \"\"\"\n    \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0432\u0441\u0435\u0445 \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0432\u0435\u0442\u0432\u0435\u0439 \u0433\u0440\u0430\u0444\u0430 \u0432 \u0442\u043e\u0447\u043a\u0435 (i, j)\n    \u0413\u0434\u0435 i \u0438 j \u2014 \u043d\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\n    \"\"\"\n    edges = dict()\n\n    # \u0415\u0441\u043b\u0438 \u043a\u0443\u0432\u0448\u0438\u043d\u044b \u043d\u0435 \u043f\u0443\u0441\u0442\u044b, \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0443\u0441\u0442\u043e\u0448\u0438\u0442\u044c\n    if i != 0:\n        edges[(0, j)] = Action.empty\n    if j != 0:\n        edges[(i, 0)] = Action.empty\n\n    # \u0415\u0441\u043b\u0438 \u043a\u0443\u0432\u0448\u0438\u043d\u044b \u043d\u0435 \u043f\u043e\u043b\u043d\u044b\u0435, \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c\n    if i != i_max:\n        edges[(i_max, j)] = Action.fill\n    if j != j_max:\n        edges[(i, j_max)] = Action.fill\n\n    # \u0418\u0437 \u043d\u0435\u043f\u0443\u0441\u0442\u043e\u0433\u043e \u043a\u0443\u0432\u0448\u0438\u043d\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043b\u0438\u0442\u044c \u0432 \u043d\u0435\u043f\u043e\u043b\u043d\u044b\u0439\n    if i != 0 and j_max-j >= i:\n        edges[(0, j+i)] = Action.transfer\n    if j != 0 and i_max-i >= j:\n        edges[(i+j, 0)] = Action.transfer\n\n    # \u041f\u0440\u0438\u0447\u0435\u043c, \u0435\u0441\u043b\u0438 \u0432 \u043d\u0435\u043f\u043e\u043b\u043d\u043e\u043c \u043d\u0435 \u0445\u0432\u0430\u0442\u0438\u0442 \u043c\u0435\u0441\u0442\u0430,\n    # \u0442\u043e \u043e\u0431\u0430 \u043a\u0443\u0432\u0448\u0438\u043d\u0430 \u043e\u0441\u0442\u0430\u043d\u0443\u0442\u0441\u044f \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u043c\u0438\n    if j != 0 and 0 < i_max-i < j:\n        edges[(i_max, j - (i_max-i))] = Action.transfer\n    if i != 0 and 0 < j_max-j < i:\n        edges[(i - (j_max-j), j_max)] = Action.transfer\n    return edges\n\n\ndef make_pitchers_graph(pitchers_volume):\n    \"\"\"\n    \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043a\u043b\u044e\u0447\u0438 \u2014 \u0432\u0441\u0435 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u043d\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432,\n    \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u2014 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u044b \u0438\u0437 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438\n    \"\"\"\n    pitchers_graph = dict()\n    gcd = greatest_common_divisor(pitchers_volume[0], pitchers_volume[1])\n    for i in range(0, int(pitchers_volume[0]\/gcd)+1):      # \u041d\u0430\u0439\u0434\u0451\u043c \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043e\u0431\u0449\u0435\u0435 \u043a\u0440\u0430\u0442\u043d\u043e\u0435 \u0443 \u043e\u0431\u044a\u0451\u043c\u043e\u0432 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\n        for j in range(0, int(pitchers_volume[1]\/gcd)+1):  # \u0418 \u043f\u043e\u0434\u0435\u043b\u0438\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043e\u0431\u044a\u0451\u043c\u043e\u0432 \u043d\u0430 \u043d\u0435\u0433\u043e, \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438\n            pitchers_graph[(i*gcd, j*gcd)] = make_edges(i*gcd, j*gcd, pitchers_volume[0], pitchers_volume[1])\n    return pitchers_graph\n\n\ndef dijkstra(graph, start_node, target):\n    \"\"\"\n    \u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0438\u0439 \u043f\u0443\u0442\u044c \u0432 \u0433\u0440\u0430\u0444\u0435\n    \"\"\"\n    distance = dict.fromkeys(graph, float('inf'))\n    path = dict()\n    path[start_node] = [[[start_node], [Action.start]]]  # \u041f\u0443\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u0437\n    distance[start_node] = 0                           # \u0438\u043c\u0451\u043d \u0443\u0437\u043b\u043e\u0432 \u0441\u043e\u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f list \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0443\u0437\u043b\u043e\u0432\n    node_set = set(graph)                              # \u0441 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0442\u0438\u043f\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043a\u0443\u0432\u0448\u0438\u043d\u0430\u043c\u0438\n    targets_list = [node for node in node_set                   # \u0426\u0435\u043b\u0438 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u043a\u0430\u043a list \u0438\u0437 \u0432\u0441\u0435\u0445 \u0443\u0437\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435\n                    if node[0] == target or node[1] == target]  # \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0444\u0438\u043d\u0438\u0448\u0430\n\n    while node_set:\n        node = min(node_set, key=distance.get)\n        if node in targets_list and node in path:  # \u041a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0448\u043b\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0443\u0437\u0435\u043b \u2014 \u0432\u044b\u0445\u043e\u0434\u0438\u043c. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u044b \u0438\u0449\u0435\u043c\n            return path[node]                      # \u043e\u0442 \u0442\u043e\u0447\u043a\u0438 (0, 0), \u0430 \u0432\u0435\u0441 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0431\u0440\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c,\n        node_set.remove(node)                      # \u0442\u043e \u043f\u0435\u0440\u0432\u044b\u0439 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0439 \u0443\u0437\u0435\u043b \u0438 \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c\n        for child_node in graph[node].keys():\n            if distance[child_node] >= distance[node] + 1:  # \u0412\u0435\u0441 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0431\u0440\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0437\u0430 \u0435\u0434\u0438\u043d\u0438\u0446\u0443\n                distance[child_node] = distance[node] + 1\n                path[child_node] = list()\n                path[child_node].extend(path[node])     # \u041f\u0443\u0442\u044c \u0434\u043e \u043d\u043e\u0432\u043e\u0433\u043e \u0443\u0437\u043b\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043f\u0443\u0442\u0438 \u0434\u043e \u0435\u0433\u043e \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n                path[child_node].append([[child_node],  # \u043f\u043b\u044e\u0441 \u0441\u0430\u043c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\n                                         [graph[node].get(child_node)]])  # \u0441 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0442\u0438\u043f\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\n\n\ndef show_answer(path, target):\n    \"\"\"\n    \u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0432\u0435\u0442 \u0432 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u043e\u0447\u0438\u0442\u0430\u0435\u043c\u043e\u043c \u0432\u0438\u0434\u0435\n    \"\"\"\n    if path is not None:\n        print('\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0448\u0430\u0433\u043e\u0432: {}'.format(len(path)-1))\n        for node in path:\n            print(node[0][0], end=' ')  # \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\n            print(node[1][0].name)      # \u0422\u0438\u043f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\n    else:\n        print('\u041d\u0435\u043b\u044c\u0437\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c {}\u043b., \u0438\u043c\u0435\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u0443\u0432\u0448\u0438\u043d\u044b.'.format(target))\n\n\npitchers_volume = get_pitchers_volume()  # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u043e\u0431\u044a\u0451\u043c\u044b \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\ntarget_node = get_target()               # \u0418 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0451\u043c\nstart_node = (0, 0)  # \u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0441 \u043f\u0443\u0441\u0442\u044b\u0445 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\npitchers_graph = make_pitchers_graph(pitchers_volume)  # \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u0433\u0440\u0430\u0444 \u0438\u0437 \u0432\u0441\u0435\u0445 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\npath = dijkstra(pitchers_graph, start_node, target_node)  # \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0438\u0439 \u043f\u0443\u0442\u044c\nshow_answer(path, target_node)  # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"}
{"instruction":"Generate an automated unit test in Python for the following function","input":"def add(a, b):\n    return a + b","output":"import unittest\n\nclass TestAddition(unittest.TestCase):\n\n    def test_addition(self):\n        self.assertEqual(add(1, 1), 2)\n        self.assertEqual(add(2, 5), 7)\n        self.assertEqual(add(3, 3), 6)\n        self.assertEqual(add(-8, 6), -2)\n        self.assertEqual(add(-3, -3), -6)\n\nif __name__ == '__main__':\n    unittest.main()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an automated unit test in Python for the following function\n\n### Input:\ndef add(a, b):\n    return a + b\n\n### Output:\nimport unittest\n\nclass TestAddition(unittest.TestCase):\n\n    def test_addition(self):\n        self.assertEqual(add(1, 1), 2)\n        self.assertEqual(add(2, 5), 7)\n        self.assertEqual(add(3, 3), 6)\n        self.assertEqual(add(-8, 6), -2)\n        self.assertEqual(add(-3, -3), -6)\n\nif __name__ == '__main__':\n    unittest.main()"}
{"instruction":"Create a module for generating unique tokens in Python. The module should provide a function that takes a length parameter (number of characters) and returns a unique token.","input":"length = 15","output":"import hashlib\nimport string\nimport random\n\ndef generate_token(length):\n token_chars = string.ascii_letters + string.digits\n token = ''.join(random.choice(token_chars) for _ in range(length))\n return hashlib.sha256(token.encode('utf-8')).hexdigest()\n\nlength = 15\ntoken = generate_token(length)\nprint(token)  # Output: 830af667b1a5cb6405df21f2d54d46a2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a module for generating unique tokens in Python. The module should provide a function that takes a length parameter (number of characters) and returns a unique token.\n\n### Input:\nlength = 15\n\n### Output:\nimport hashlib\nimport string\nimport random\n\ndef generate_token(length):\n token_chars = string.ascii_letters + string.digits\n token = ''.join(random.choice(token_chars) for _ in range(length))\n return hashlib.sha256(token.encode('utf-8')).hexdigest()\n\nlength = 15\ntoken = generate_token(length)\nprint(token)  # Output: 830af667b1a5cb6405df21f2d54d46a2"}
{"instruction":"Refactor a Python program by identifying code unnecessarily repeated, converting it into a function, and using the function wherever necessary.","input":"def my_function():\n  for i in range(0, 5):\n    print('loop 1:', i)\n\n  for i in range(0, 5):\n    print('loop 2:', i)","output":"def my_function():\n  print_loop(0, 5, 'loop 1')\n  print_loop(0, 5, 'loop 2')\n\ndef print_loop(start, end, tag):\n  for i in range(start, end):\n    print(tag + ':', i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRefactor a Python program by identifying code unnecessarily repeated, converting it into a function, and using the function wherever necessary.\n\n### Input:\ndef my_function():\n  for i in range(0, 5):\n    print('loop 1:', i)\n\n  for i in range(0, 5):\n    print('loop 2:', i)\n\n### Output:\ndef my_function():\n  print_loop(0, 5, 'loop 1')\n  print_loop(0, 5, 'loop 2')\n\ndef print_loop(start, end, tag):\n  for i in range(start, end):\n    print(tag + ':', i)"}
{"instruction":"Create a function in Python which takes a list of strings as input, and prints the longest palindrome contained in the list.","input":"[\"racecar\", \"python\", \"mom\", \"abba\"]","output":"def longest_palindrome(str_list):\n  longest_palindrome = \"\"\n  for s in str_list:\n    if s == s[::-1] and len(s) > len(longest_palindrome):\n      longest_palindrome = s\n  print(longest_palindrome)\n  \nlongest_palindrome([\"racecar\", \"python\", \"mom\", \"abba\"])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python which takes a list of strings as input, and prints the longest palindrome contained in the list.\n\n### Input:\n[\"racecar\", \"python\", \"mom\", \"abba\"]\n\n### Output:\ndef longest_palindrome(str_list):\n  longest_palindrome = \"\"\n  for s in str_list:\n    if s == s[::-1] and len(s) > len(longest_palindrome):\n      longest_palindrome = s\n  print(longest_palindrome)\n  \nlongest_palindrome([\"racecar\", \"python\", \"mom\", \"abba\"])"}
{"instruction":"Create a Python program that prints a Fibonacci sequence.","input":"length = 10","output":"def fibonacci(length):\n  fibonacci_list = [1, 1]\n  while len(fibonacci_list) < length:\n    last_item = fibonacci_list[-1]\n    second_last_item = fibonacci_list[-2]\n    next_item = last_item + second_last_item\n    fibonacci_list.append(next_item)\n  return fibonacci_list\n\nlength = 10\nprint(fibonacci(length))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that prints a Fibonacci sequence.\n\n### Input:\nlength = 10\n\n### Output:\ndef fibonacci(length):\n  fibonacci_list = [1, 1]\n  while len(fibonacci_list) < length:\n    last_item = fibonacci_list[-1]\n    second_last_item = fibonacci_list[-2]\n    next_item = last_item + second_last_item\n    fibonacci_list.append(next_item)\n  return fibonacci_list\n\nlength = 10\nprint(fibonacci(length))"}
{"instruction":"Generate a function in Python that takes in a string and returns the longest consecutive letter sequence in the string.","input":"","output":"def longest_consecutive_letters(s):\n    longest_seq = \"\"\n    current_seq = \"\"\n     \n    for i in range(len(s)):\n        if i == 0:\n            current_seq = current_seq + s[i]\n        else:\n            if s[i] == s[i-1]:\n                current_seq = current_seq + s[i]\n            else:\n                longest_seq = max(longest_seq, current_seq, key=len)\n                 \n                current_seq = s[i]\n     \n    longest_seq = max(longest_seq, current_seq, key=len)\n    return longest_seq","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python that takes in a string and returns the longest consecutive letter sequence in the string.\n\n### Input:\n\n\n### Output:\ndef longest_consecutive_letters(s):\n    longest_seq = \"\"\n    current_seq = \"\"\n     \n    for i in range(len(s)):\n        if i == 0:\n            current_seq = current_seq + s[i]\n        else:\n            if s[i] == s[i-1]:\n                current_seq = current_seq + s[i]\n            else:\n                longest_seq = max(longest_seq, current_seq, key=len)\n                 \n                current_seq = s[i]\n     \n    longest_seq = max(longest_seq, current_seq, key=len)\n    return longest_seq"}
{"instruction":"Create a program that takes a name as input and prints the length of the name using Python.","input":"Jane","output":"def nameLength(name): \n    return len(name) \n\nname = \"Jane\"\nprint(\"Length of the name is:\", nameLength(name))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that takes a name as input and prints the length of the name using Python.\n\n### Input:\nJane\n\n### Output:\ndef nameLength(name): \n    return len(name) \n\nname = \"Jane\"\nprint(\"Length of the name is:\", nameLength(name))"}
{"instruction":"Create a method in Python which takes a string as input and outputs all distinct words in the string.","input":"String: \"Hello, there! How are you?\"","output":"def getDistinctWords(string):\n    wordlist = string.split()\n    lst = []\n    for word in wordlist: \n        if word not in lst:\n            lst.append(word)\n    return lst\n\nprint(getDistinctWords(\"Hello, there! How are you?\"))\n# Output: ['Hello,', 'there!', 'How', 'are', 'you?']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a method in Python which takes a string as input and outputs all distinct words in the string.\n\n### Input:\nString: \"Hello, there! How are you?\"\n\n### Output:\ndef getDistinctWords(string):\n    wordlist = string.split()\n    lst = []\n    for word in wordlist: \n        if word not in lst:\n            lst.append(word)\n    return lst\n\nprint(getDistinctWords(\"Hello, there! How are you?\"))\n# Output: ['Hello,', 'there!', 'How', 'are', 'you?']"}
{"instruction":"Write a Python program to format a number with leading zeros.","input":"","output":"def leading_zeros(num, zeros=6):\n  return str(num).zfill(zeros)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to format a number with leading zeros.\n\n### Input:\n\n\n### Output:\ndef leading_zeros(num, zeros=6):\n  return str(num).zfill(zeros)"}
{"instruction":"Create a program in Python to add the elements of two given lists.","input":"list1 = [1, 2, 3]\nlist2 = [4, 5, 6]","output":"list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\ndef addLists(list1, list2):\n    result = [] \n    for i in range(0, len(list1)):\n        result.append(list1[i] + list2[i])\n    return result\n\nprint(addLists(list1, list2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to add the elements of two given lists.\n\n### Input:\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n### Output:\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\ndef addLists(list1, list2):\n    result = [] \n    for i in range(0, len(list1)):\n        result.append(list1[i] + list2[i])\n    return result\n\nprint(addLists(list1, list2))"}
{"instruction":"Write a Python script to decode a base64 encoded string.","input":"encoded_string = 'aGVsbG8='","output":"import base64\n\nencoded_string = 'aGVsbG8='\ndecoded_string = base64.b64decode(encoded_string)\nprint(decoded_string) # prints b'hello'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to decode a base64 encoded string.\n\n### Input:\nencoded_string = 'aGVsbG8='\n\n### Output:\nimport base64\n\nencoded_string = 'aGVsbG8='\ndecoded_string = base64.b64decode(encoded_string)\nprint(decoded_string) # prints b'hello'"}
{"instruction":"Write a Python program to sort a list of dictionaries by a given key.","input":"list_of_dicts = [\n{'name': 'John', 'age': 25},\n{'name': 'Adam', 'age': 30},\n{'name': 'Sarah', 'age': 28}\n]\n\nsort_by_key = 'age'","output":"def sort_dicts_by_key(list_of_dicts, key):\n    return sorted(list_of_dicts, key=lambda k: k[key])\n\nsorted_dicts = sort_dicts_by_key(list_of_dicts, sort_by_key)\n\n# Output:\n[\n{'name': 'John', 'age': 25},\n{'name': 'Sarah', 'age': 28},\n{'name': 'Adam', 'age': 30}\n]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a list of dictionaries by a given key.\n\n### Input:\nlist_of_dicts = [\n{'name': 'John', 'age': 25},\n{'name': 'Adam', 'age': 30},\n{'name': 'Sarah', 'age': 28}\n]\n\nsort_by_key = 'age'\n\n### Output:\ndef sort_dicts_by_key(list_of_dicts, key):\n    return sorted(list_of_dicts, key=lambda k: k[key])\n\nsorted_dicts = sort_dicts_by_key(list_of_dicts, sort_by_key)\n\n# Output:\n[\n{'name': 'John', 'age': 25},\n{'name': 'Sarah', 'age': 28},\n{'name': 'Adam', 'age': 30}\n]"}
{"instruction":"Modify the given code such that a python list of strings is created based on the input.","input":"lst = [1, 2, 3]","output":"lst_strs = []\nfor i in lst:\n    lst_strs.append(str(i))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the given code such that a python list of strings is created based on the input.\n\n### Input:\nlst = [1, 2, 3]\n\n### Output:\nlst_strs = []\nfor i in lst:\n    lst_strs.append(str(i))"}
{"instruction":"Generate a Machine Learning model in Python for sentiment analysis on a rhetorical question.","input":"Not applicable","output":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Load the dataset\ndata = pd.read_csv('data.csv')\n\n# Split the dataset into training and test sets\nX = data['rhetorical_questions']\ny = data['category']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Create a TF-IDF vectorizer\nvectorizer = TfidfVectorizer()\nX_train = vectorizer.fit_transform(X_train)\nX_test = vectorizer.transform(X_test)\n\n# Build and fit the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions and evaluate performance\nscore = model.score(X_test, y_test)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Machine Learning model in Python for sentiment analysis on a rhetorical question.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Load the dataset\ndata = pd.read_csv('data.csv')\n\n# Split the dataset into training and test sets\nX = data['rhetorical_questions']\ny = data['category']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Create a TF-IDF vectorizer\nvectorizer = TfidfVectorizer()\nX_train = vectorizer.fit_transform(X_train)\nX_test = vectorizer.transform(X_test)\n\n# Build and fit the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions and evaluate performance\nscore = model.score(X_test, y_test)"}
{"instruction":"Translate the following pseudocode into Python","input":"\"For each element in the array, if it is an even number, add one to a counter\"","output":"def count_even(arr): \n    count = 0\n    for x in arr: \n        if x % 2 == 0: \n            count += 1\n    return count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTranslate the following pseudocode into Python\n\n### Input:\n\"For each element in the array, if it is an even number, add one to a counter\"\n\n### Output:\ndef count_even(arr): \n    count = 0\n    for x in arr: \n        if x % 2 == 0: \n            count += 1\n    return count"}
{"instruction":"Create a machine learning model in Python using the Scikit-learn library to predict the temperature of a city using several metrics such as humidity, windspeed, and pressure.","input":"humidity, windspeed, pressure","output":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\ndata = pd.read_csv('<dataset_path>')\n\n# Split into independent and dependent variables\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\n\n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train the linear regression model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Test the model\ny_pred = model.predict(X_test)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python using the Scikit-learn library to predict the temperature of a city using several metrics such as humidity, windspeed, and pressure.\n\n### Input:\nhumidity, windspeed, pressure\n\n### Output:\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\ndata = pd.read_csv('<dataset_path>')\n\n# Split into independent and dependent variables\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\n\n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train the linear regression model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Test the model\ny_pred = model.predict(X_test)"}
{"instruction":"Create a matrix multiplication algorithm using Python.","input":"Matrix A (2x3): \n  2  4  -3 \n  6  1   0  \n\nMatrix B (3x2):\n  1 -1\n  2  0\n  3  4","output":"def matrix_multiply(matrixA, matrixB):\n    if len(matrixA[0]) != len(matrixB):\n        print(\"Error: The number of columns of matrix A is not equal to the number of rows of matrix B\")\n        return\n \n    m, n, p = len(matrixA), len(matrixA[0]), len(matrixB[0])\n    result = [[0 for i in range(p)] for j in range(m)]\n    # multiplying matrix A and matrix B \n    for i in range(m): \n        for j in range(p): \n            for k in range(n):\n                result[i][j] += matrixA[i][k] * matrixB[k][j]\n  \n    return result\n\n# Example\nmata = [[2, 4, -3], \n        [6, 1, 0]] \nmatb = [[1, -1],  \n        [2, 0], \n        [3, 4]]\n\nres = matrix_multiply(mata, matb)\n\nfor row in res:\n   print(row)\n\n# Output\n# [4, -4] \n# [24, 12]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a matrix multiplication algorithm using Python.\n\n### Input:\nMatrix A (2x3): \n  2  4  -3 \n  6  1   0  \n\nMatrix B (3x2):\n  1 -1\n  2  0\n  3  4\n\n### Output:\ndef matrix_multiply(matrixA, matrixB):\n    if len(matrixA[0]) != len(matrixB):\n        print(\"Error: The number of columns of matrix A is not equal to the number of rows of matrix B\")\n        return\n \n    m, n, p = len(matrixA), len(matrixA[0]), len(matrixB[0])\n    result = [[0 for i in range(p)] for j in range(m)]\n    # multiplying matrix A and matrix B \n    for i in range(m): \n        for j in range(p): \n            for k in range(n):\n                result[i][j] += matrixA[i][k] * matrixB[k][j]\n  \n    return result\n\n# Example\nmata = [[2, 4, -3], \n        [6, 1, 0]] \nmatb = [[1, -1],  \n        [2, 0], \n        [3, 4]]\n\nres = matrix_multiply(mata, matb)\n\nfor row in res:\n   print(row)\n\n# Output\n# [4, -4] \n# [24, 12]"}
{"instruction":"Edit a given Python program such that it returns the optimal solution of a given problem.","input":"def solve_problem(input):\n    solution = 0\n    for i in range(input):\n        solution += input\n    return solution","output":"def solve_problem(input):\n    solution = 0\n    for i in range(input):\n        if input < 0:\n            break\n        solution += input\n        input -= 1\n    return solution","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit a given Python program such that it returns the optimal solution of a given problem.\n\n### Input:\ndef solve_problem(input):\n    solution = 0\n    for i in range(input):\n        solution += input\n    return solution\n\n### Output:\ndef solve_problem(input):\n    solution = 0\n    for i in range(input):\n        if input < 0:\n            break\n        solution += input\n        input -= 1\n    return solution"}
{"instruction":"Write a Python script to access the Twitter API and retrieve the profile information of a given user.","input":"Username to search for: @twitter","output":"# Install packages\nimport tweepy\nimport requests\n\n# Access Twitter API\nconsumer_key = 'YOUR_CONSUMER_KEY'\nconsumer_secret = 'YOUR_CONSUMER_SECRET'\n\naccess_token = 'YOUR_ACCESS_TOKEN'\naccess_token_secret = 'YOUR_ACCESS_TOKEN_SECRET'\n\n# Set up authorization\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)  \nauth.set_access_token(access_token, access_token_secret)\n\n# Set up the API\napi = tweepy.API(auth)\n\n# Retrieve information\nusername = \"@twitter\"\nuser = api.get_user(username)\n\nprint(\"Name: \"+user.name)\nprint(\"Location: \"+user.location)\nprint(\"Followers count: \"+str(user.followers_count))\nprint(\"Profile picture: \"+user.profile_image_url)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to access the Twitter API and retrieve the profile information of a given user.\n\n### Input:\nUsername to search for: @twitter\n\n### Output:\n# Install packages\nimport tweepy\nimport requests\n\n# Access Twitter API\nconsumer_key = 'YOUR_CONSUMER_KEY'\nconsumer_secret = 'YOUR_CONSUMER_SECRET'\n\naccess_token = 'YOUR_ACCESS_TOKEN'\naccess_token_secret = 'YOUR_ACCESS_TOKEN_SECRET'\n\n# Set up authorization\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)  \nauth.set_access_token(access_token, access_token_secret)\n\n# Set up the API\napi = tweepy.API(auth)\n\n# Retrieve information\nusername = \"@twitter\"\nuser = api.get_user(username)\n\nprint(\"Name: \"+user.name)\nprint(\"Location: \"+user.location)\nprint(\"Followers count: \"+str(user.followers_count))\nprint(\"Profile picture: \"+user.profile_image_url)"}
{"instruction":"Create a class in Python to filter a string and return only the lowercase letters.","input":"","output":"class LowercaseFilter:\n    def __init__(self, my_string):\n        self.my_string = my_string\n\n    def filter_string(self):\n        return ''.join([c for c in self.my_string if c.islower()])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to filter a string and return only the lowercase letters.\n\n### Input:\n\n\n### Output:\nclass LowercaseFilter:\n    def __init__(self, my_string):\n        self.my_string = my_string\n\n    def filter_string(self):\n        return ''.join([c for c in self.my_string if c.islower()])"}
{"instruction":"Can you convert a given dictionary into a string using Python?","input":"{\"foo\": \"bar\", \"hello\": \"world\"}","output":"dictionary_string = str({\"foo\": \"bar\", \"hello\": \"world\"})","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you convert a given dictionary into a string using Python?\n\n### Input:\n{\"foo\": \"bar\", \"hello\": \"world\"}\n\n### Output:\ndictionary_string = str({\"foo\": \"bar\", \"hello\": \"world\"})"}
{"instruction":"Create a web API with Python and Flask to give the current date and time.","input":"Not applicable","output":"from flask import Flask\nimport datetime\n\napp = Flask(__name__)\n\n@app.route('\/datetime')\ndef get_datetime():\n    return datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\nif __name__ == '__main__':\n    app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web API with Python and Flask to give the current date and time.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask\nimport datetime\n\napp = Flask(__name__)\n\n@app.route('\/datetime')\ndef get_datetime():\n    return datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\nif __name__ == '__main__':\n    app.run()"}
{"instruction":"Generate a Python script to print all the prime numbers in a given range.","input":"Range = 2 to 20","output":"for n in range(2, 21): \n   if n > 1: \n       for i in range(2, n\/\/2 + 2): \n           if (n % i) == 0: \n               break\n       else: \n           print(n)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to print all the prime numbers in a given range.\n\n### Input:\nRange = 2 to 20\n\n### Output:\nfor n in range(2, 21): \n   if n > 1: \n       for i in range(2, n\/\/2 + 2): \n           if (n % i) == 0: \n               break\n       else: \n           print(n)"}
{"instruction":"Create a Python program that simulates a dice roll by randomly selecting a number between 1 and 6.","input":"","output":"import random\n\n# Simulate a dice roll by randomly selecting a number between 1 and 6\ndie_roll = random.randint(1, 6)\nprint(\"You rolled a\", die_roll)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that simulates a dice roll by randomly selecting a number between 1 and 6.\n\n### Input:\n\n\n### Output:\nimport random\n\n# Simulate a dice roll by randomly selecting a number between 1 and 6\ndie_roll = random.randint(1, 6)\nprint(\"You rolled a\", die_roll)"}
{"instruction":"Program an algorithm in Python to calculate the largest sum of non-adjacents from an unsorted array.","input":"","output":"def largestSumNonAdjacent(arr):\n  incl = 0\n  excl = 0\n \n  for i in arr: \n    new_excl = max(incl, excl) \n    incl = excl + i \n    excl = new_excl \n    \n  return max(incl, excl)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProgram an algorithm in Python to calculate the largest sum of non-adjacents from an unsorted array.\n\n### Input:\n\n\n### Output:\ndef largestSumNonAdjacent(arr):\n  incl = 0\n  excl = 0\n \n  for i in arr: \n    new_excl = max(incl, excl) \n    incl = excl + i \n    excl = new_excl \n    \n  return max(incl, excl)"}
{"instruction":"Create a Python class that receives two strings and has methods for comparing the strings and returning whether they are equal, different, or similar up to a provided threshold.","input":"Not applicable","output":"class StringComparator:\n\ndef __init__(self, string1, string2):\n self.string1 = string1\n self.string2 = string2\n\ndef is_equal(self):\n return self.string1 == self.string2\n\ndef is_different(self):\n return self.string1 != self.string2\n\ndef is_similar(self, threshold=0.5):\n distance = edit_distance(self.string1, self.string2)\n max_length = max(len(self.string1), len(self.string2))\n\n return distance \/ max_length < threshold","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that receives two strings and has methods for comparing the strings and returning whether they are equal, different, or similar up to a provided threshold.\n\n### Input:\nNot applicable\n\n### Output:\nclass StringComparator:\n\ndef __init__(self, string1, string2):\n self.string1 = string1\n self.string2 = string2\n\ndef is_equal(self):\n return self.string1 == self.string2\n\ndef is_different(self):\n return self.string1 != self.string2\n\ndef is_similar(self, threshold=0.5):\n distance = edit_distance(self.string1, self.string2)\n max_length = max(len(self.string1), len(self.string2))\n\n return distance \/ max_length < threshold"}
{"instruction":"Write a Python program that can compare two lists of integers and identify any elements that appear in both lists.","input":"","output":"def find_common_elements(list1, list2):\n    common_elements = []\n\n    for e1 in list1:\n        for e2 in list2:\n            if e1 == e2:\n               common_elements.append(e1)\n\n    return common_elements\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 6, 8]\n\nprint(find_common_elements(list1, list2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that can compare two lists of integers and identify any elements that appear in both lists.\n\n### Input:\n\n\n### Output:\ndef find_common_elements(list1, list2):\n    common_elements = []\n\n    for e1 in list1:\n        for e2 in list2:\n            if e1 == e2:\n               common_elements.append(e1)\n\n    return common_elements\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 6, 8]\n\nprint(find_common_elements(list1, list2))"}
{"instruction":"Implement a function in Python to round a number up to 0 decimal places.","input":"19.876","output":"def roundUp(x):\n    return int(round(x))\n\nprint(roundUp(19.876))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python to round a number up to 0 decimal places.\n\n### Input:\n19.876\n\n### Output:\ndef roundUp(x):\n    return int(round(x))\n\nprint(roundUp(19.876))"}
{"instruction":"Generate a link-shortening web API in Python. The API should accept a request with a URL and return a URL pointing to a new service endpoint that can be used to reshorten the passed URL.","input":"URL: \"https:\/\/www.example.com\/very-long-url\"","output":"from flask import Flask, request, jsonify\nimport json\n\napp = Flask(__name__)\n \n@app.route('\/shorten', methods=['POST'])\ndef shorten():\n    response = {'url': request.json[\"url\"]}\n    response['short_url'] = 'http:\/\/example.com\/' + create_short_url()\n    return jsonify(response), 201\n\ndef create_short_url():\n    # Code to generate and store a unique short URL\n    return 'abcd123'\n \nif __name__ == '__main__':\n    app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a link-shortening web API in Python. The API should accept a request with a URL and return a URL pointing to a new service endpoint that can be used to reshorten the passed URL.\n\n### Input:\nURL: \"https:\/\/www.example.com\/very-long-url\"\n\n### Output:\nfrom flask import Flask, request, jsonify\nimport json\n\napp = Flask(__name__)\n \n@app.route('\/shorten', methods=['POST'])\ndef shorten():\n    response = {'url': request.json[\"url\"]}\n    response['short_url'] = 'http:\/\/example.com\/' + create_short_url()\n    return jsonify(response), 201\n\ndef create_short_url():\n    # Code to generate and store a unique short URL\n    return 'abcd123'\n \nif __name__ == '__main__':\n    app.run(debug=True)"}
{"instruction":"Generate a unique 32-bit number in Python.","input":"","output":"import uuid\n\nunique_number = uuid.uuid4().int\nprint(unique_number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a unique 32-bit number in Python.\n\n### Input:\n\n\n### Output:\nimport uuid\n\nunique_number = uuid.uuid4().int\nprint(unique_number)"}
{"instruction":"Write a python program that takes a list of numbers as input and prints out the sum of the two numbers that are closest to zero.","input":"nots = [1, 5, -3, 0 -7]","output":"# Take the list of numbers\nnots = [1, 5, -3, 0, -7]\n\n# Sort the list\nnots.sort()\n\n# Set up variables to store the two closest values\nclosest1 = 0 \nclosest2 = 0\n\n# Iterate through the list\nfor val in nots:\n # Check if the absolute value of the current number \n # is closest to zero\n if abs(val) < abs(closest1):\n closest2 = closest1 \n closest1 = val\n\n# Print the sum of the two closest values\nprint(closest1 + closest2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that takes a list of numbers as input and prints out the sum of the two numbers that are closest to zero.\n\n### Input:\nnots = [1, 5, -3, 0 -7]\n\n### Output:\n# Take the list of numbers\nnots = [1, 5, -3, 0, -7]\n\n# Sort the list\nnots.sort()\n\n# Set up variables to store the two closest values\nclosest1 = 0 \nclosest2 = 0\n\n# Iterate through the list\nfor val in nots:\n # Check if the absolute value of the current number \n # is closest to zero\n if abs(val) < abs(closest1):\n closest2 = closest1 \n closest1 = val\n\n# Print the sum of the two closest values\nprint(closest1 + closest2)"}
{"instruction":"The given code is a Python module for implementing Google reCAPTCHA. To use it, import the necessary modules and functions, and then call the functions as needed. To display the reCAPTCHA HTML, call the \"displayhtml\" function and pass in the public key and any optional parameters. To submit the reCAPTCHA response for verification, call the \"submit\" function and pass in the necessary parameters. To check the reCAPTCHA response in a Django view, call the \"check_captcha\" function and pass in the request object. To generate new reCAPTCHA HTML based on the result of the verification, call the \"new_captcha_html\" function and pass in the result object.","input":"","output":"import urllib2, urllib\nfrom   proj.settings import *\n\n\nAPI_SSL_SERVER=\"https:\/\/www.google.com\/recaptcha\/api\"\nAPI_SERVER=\"http:\/\/www.google.com\/recaptcha\/api\"\nVERIFY_SERVER=\"www.google.com\"\n\nclass RecaptchaResponse(object):\n    def __init__(self, is_valid, error_code=None):\n        self.is_valid = is_valid\n        self.error_code = error_code\n\ndef displayhtml (public_key,\n                 use_ssl = False,\n                 error = None):\n    \"\"\"Gets the HTML to display for reCAPTCHA\n\n    public_key -- The public api key\n    use_ssl -- Should the request be sent over ssl?\n    error -- An error message to display (from RecaptchaResponse.error_code)\"\"\"\n\n    error_param = ''\n    if error:\n        error_param = '&error=%s' % error\n\n    if use_ssl:\n        server = API_SSL_SERVER\n    else:\n        server = API_SERVER\n\n    return \"\"\"<script type=\"text\/javascript\" src=\"%(ApiServer)s\/challenge?k=%(PublicKey)s%(ErrorParam)s\"><\/script>\n\n<noscript>\n  <iframe src=\"%(ApiServer)s\/noscript?k=%(PublicKey)s%(ErrorParam)s\" height=\"300\" width=\"500\" frameborder=\"0\"><\/iframe><br \/>\n  <textarea name=\"recaptcha_challenge_field\" rows=\"3\" cols=\"40\"><\/textarea>\n  <input type='hidden' name='recaptcha_response_field' value='manual_challenge' \/>\n<\/noscript>\n\"\"\" % {\n        'ApiServer' : server,\n        'PublicKey' : public_key,\n        'ErrorParam' : error_param,\n        }\n\n\ndef submit (recaptcha_challenge_field,\n            recaptcha_response_field,\n            private_key,\n            remoteip):\n    \"\"\"\n    Submits a reCAPTCHA request for verification. Returns RecaptchaResponse\n    for the request\n\n    recaptcha_challenge_field -- The value of recaptcha_challenge_field from the form\n    recaptcha_response_field -- The value of recaptcha_response_field from the form\n    private_key -- your reCAPTCHA private key\n    remoteip -- the user's ip address\n    \"\"\"\n\n    if not (recaptcha_response_field and recaptcha_challenge_field and\n            len (recaptcha_response_field) and len (recaptcha_challenge_field)):\n        return RecaptchaResponse (is_valid = False, error_code = 'incorrect-captcha-sol')\n    \n\n    def encode_if_necessary(s):\n        if isinstance(s, unicode):\n            return s.encode('utf-8')\n        return s\n\n    params = urllib.urlencode ({\n            'privatekey': encode_if_necessary(private_key),\n            'remoteip' :  encode_if_necessary(remoteip),\n            'challenge':  encode_if_necessary(recaptcha_challenge_field),\n            'response' :  encode_if_necessary(recaptcha_response_field),\n            })\n\n    request = urllib2.Request (\n        url = \"http:\/\/%s\/recaptcha\/api\/verify\" % VERIFY_SERVER,\n        data = params,\n        headers = {\n            \"Content-type\": \"application\/x-www-form-urlencoded\",\n            \"User-agent\": \"reCAPTCHA Python\"\n            }\n        )\n    \n    httpresp = urllib2.urlopen (request)\n\n    return_values = httpresp.read ().splitlines ();\n    httpresp.close();\n\n    return_code = return_values [0]\n\n    if (return_code == \"true\"):\n        return RecaptchaResponse (is_valid=True)\n    else:\n        return RecaptchaResponse (is_valid=False, error_code = return_values [1])\n\ndef check_captcha(request):\n    \n    captcha_challenge = request.POST.get('recaptcha_challenge_field')\n    captcha_response = request.POST.get('recaptcha_response_field')\n    captcha_result = None\n    ip = None\n    if 'HTTP_X_FORWARDED_FOR' in request.META:\n        ip = request.META['HTTP_X_FORWARDED_FOR']\n    elif 'REMOTE_ADDR' in request.META:\n        ip = request.META['REMOTE_ADDR']\n    if captcha_response is not None and captcha_challenge is not None:\n        captcha_result = submit(captcha_challenge,\n                                captcha_response,\n                                recaptcha_private_key,\n                                ip)\n    return captcha_result\n\ndef new_captcha_html(captcha_result):\n    if captcha_result is None:\n        captcha_html = displayhtml(recaptcha_public_key, use_ssl=True)\n    else:\n        captcha_html = displayhtml(recaptcha_public_key, use_ssl=True, error = captcha_result.error_code)\n    return captcha_html\n\n\n\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python module for implementing Google reCAPTCHA. To use it, import the necessary modules and functions, and then call the functions as needed. To display the reCAPTCHA HTML, call the \"displayhtml\" function and pass in the public key and any optional parameters. To submit the reCAPTCHA response for verification, call the \"submit\" function and pass in the necessary parameters. To check the reCAPTCHA response in a Django view, call the \"check_captcha\" function and pass in the request object. To generate new reCAPTCHA HTML based on the result of the verification, call the \"new_captcha_html\" function and pass in the result object.\n\n### Input:\n\n\n### Output:\nimport urllib2, urllib\nfrom   proj.settings import *\n\n\nAPI_SSL_SERVER=\"https:\/\/www.google.com\/recaptcha\/api\"\nAPI_SERVER=\"http:\/\/www.google.com\/recaptcha\/api\"\nVERIFY_SERVER=\"www.google.com\"\n\nclass RecaptchaResponse(object):\n    def __init__(self, is_valid, error_code=None):\n        self.is_valid = is_valid\n        self.error_code = error_code\n\ndef displayhtml (public_key,\n                 use_ssl = False,\n                 error = None):\n    \"\"\"Gets the HTML to display for reCAPTCHA\n\n    public_key -- The public api key\n    use_ssl -- Should the request be sent over ssl?\n    error -- An error message to display (from RecaptchaResponse.error_code)\"\"\"\n\n    error_param = ''\n    if error:\n        error_param = '&error=%s' % error\n\n    if use_ssl:\n        server = API_SSL_SERVER\n    else:\n        server = API_SERVER\n\n    return \"\"\"<script type=\"text\/javascript\" src=\"%(ApiServer)s\/challenge?k=%(PublicKey)s%(ErrorParam)s\"><\/script>\n\n<noscript>\n  <iframe src=\"%(ApiServer)s\/noscript?k=%(PublicKey)s%(ErrorParam)s\" height=\"300\" width=\"500\" frameborder=\"0\"><\/iframe><br \/>\n  <textarea name=\"recaptcha_challenge_field\" rows=\"3\" cols=\"40\"><\/textarea>\n  <input type='hidden' name='recaptcha_response_field' value='manual_challenge' \/>\n<\/noscript>\n\"\"\" % {\n        'ApiServer' : server,\n        'PublicKey' : public_key,\n        'ErrorParam' : error_param,\n        }\n\n\ndef submit (recaptcha_challenge_field,\n            recaptcha_response_field,\n            private_key,\n            remoteip):\n    \"\"\"\n    Submits a reCAPTCHA request for verification. Returns RecaptchaResponse\n    for the request\n\n    recaptcha_challenge_field -- The value of recaptcha_challenge_field from the form\n    recaptcha_response_field -- The value of recaptcha_response_field from the form\n    private_key -- your reCAPTCHA private key\n    remoteip -- the user's ip address\n    \"\"\"\n\n    if not (recaptcha_response_field and recaptcha_challenge_field and\n            len (recaptcha_response_field) and len (recaptcha_challenge_field)):\n        return RecaptchaResponse (is_valid = False, error_code = 'incorrect-captcha-sol')\n    \n\n    def encode_if_necessary(s):\n        if isinstance(s, unicode):\n            return s.encode('utf-8')\n        return s\n\n    params = urllib.urlencode ({\n            'privatekey': encode_if_necessary(private_key),\n            'remoteip' :  encode_if_necessary(remoteip),\n            'challenge':  encode_if_necessary(recaptcha_challenge_field),\n            'response' :  encode_if_necessary(recaptcha_response_field),\n            })\n\n    request = urllib2.Request (\n        url = \"http:\/\/%s\/recaptcha\/api\/verify\" % VERIFY_SERVER,\n        data = params,\n        headers = {\n            \"Content-type\": \"application\/x-www-form-urlencoded\",\n            \"User-agent\": \"reCAPTCHA Python\"\n            }\n        )\n    \n    httpresp = urllib2.urlopen (request)\n\n    return_values = httpresp.read ().splitlines ();\n    httpresp.close();\n\n    return_code = return_values [0]\n\n    if (return_code == \"true\"):\n        return RecaptchaResponse (is_valid=True)\n    else:\n        return RecaptchaResponse (is_valid=False, error_code = return_values [1])\n\ndef check_captcha(request):\n    \n    captcha_challenge = request.POST.get('recaptcha_challenge_field')\n    captcha_response = request.POST.get('recaptcha_response_field')\n    captcha_result = None\n    ip = None\n    if 'HTTP_X_FORWARDED_FOR' in request.META:\n        ip = request.META['HTTP_X_FORWARDED_FOR']\n    elif 'REMOTE_ADDR' in request.META:\n        ip = request.META['REMOTE_ADDR']\n    if captcha_response is not None and captcha_challenge is not None:\n        captcha_result = submit(captcha_challenge,\n                                captcha_response,\n                                recaptcha_private_key,\n                                ip)\n    return captcha_result\n\ndef new_captcha_html(captcha_result):\n    if captcha_result is None:\n        captcha_html = displayhtml(recaptcha_public_key, use_ssl=True)\n    else:\n        captcha_html = displayhtml(recaptcha_public_key, use_ssl=True, error = captcha_result.error_code)\n    return captcha_html\n\n\n\n"}
{"instruction":"Create a Python Program to perform a linear search on given data and print the index of the found element.","input":"data = [7, 4, 3, 11, 9]","output":"def linear_search(data, target):\n    for i in range(len(data)):\n        if (data[i] == target):\n            return i\n    return -1\n\ndata = [7, 4, 3, 11, 9]\ntarget = 11\n\nindex = linear_search(data, target)\nif index != -1:\n    print(\"Element\", target, \"is present at index\", index)\nelse:\n    print(\"Element is not present in the given array\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python Program to perform a linear search on given data and print the index of the found element.\n\n### Input:\ndata = [7, 4, 3, 11, 9]\n\n### Output:\ndef linear_search(data, target):\n    for i in range(len(data)):\n        if (data[i] == target):\n            return i\n    return -1\n\ndata = [7, 4, 3, 11, 9]\ntarget = 11\n\nindex = linear_search(data, target)\nif index != -1:\n    print(\"Element\", target, \"is present at index\", index)\nelse:\n    print(\"Element is not present in the given array\")"}
{"instruction":"Write a Python program to sort a given list of numbers and return the sorted list","input":"list_of_numbers = [2, 3, 5, 8, 1, 4]","output":"list_of_numbers = [2, 3, 5, 8, 1, 4]\n\ndef sort_list(list_of_numbers): \n    list_of_numbers.sort() \n    return list_of_numbers\n\nsorted_list = sort_list(list_of_numbers) \nprint(sorted_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a given list of numbers and return the sorted list\n\n### Input:\nlist_of_numbers = [2, 3, 5, 8, 1, 4]\n\n### Output:\nlist_of_numbers = [2, 3, 5, 8, 1, 4]\n\ndef sort_list(list_of_numbers): \n    list_of_numbers.sort() \n    return list_of_numbers\n\nsorted_list = sort_list(list_of_numbers) \nprint(sorted_list)"}
{"instruction":"Optimize a code snippet in Python for maximum performance.","input":"import time\n \ndef sleep_for_the_ night():\n time.sleep(5)\n \nwhile True:\n sleep_for_the_ night()","output":"import time\n\ndef sleep_for_the_night():\n while True:\n  start_time = time.time()\n  time.sleep(5)\n  end_time = time.time()\n  elapsed_time = end_time - start_time\n  if elapsed_time < 5:\n   time.sleep(5-elapsed_time)\n\nwhile True:\n sleep_for_the_night()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a code snippet in Python for maximum performance.\n\n### Input:\nimport time\n \ndef sleep_for_the_ night():\n time.sleep(5)\n \nwhile True:\n sleep_for_the_ night()\n\n### Output:\nimport time\n\ndef sleep_for_the_night():\n while True:\n  start_time = time.time()\n  time.sleep(5)\n  end_time = time.time()\n  elapsed_time = end_time - start_time\n  if elapsed_time < 5:\n   time.sleep(5-elapsed_time)\n\nwhile True:\n sleep_for_the_night()"}
{"instruction":"Rewrite the following code in python","input":"#include <stdio.h>\nint main()\n{\n    int a[10], b[10], i, j;\n    for (i = 0; i < 10; ++i) {\n        a[i] = 0;\n        b[i] = 0;\n    }\n    for (j = 1; j <= 5; ++j) {\n        for (i = 0; i < 10; ++i) {\n            a[i] = a[i] + j;\n            b[i] = b[i] + b[i - 1] + a[i];\n        }\n    }\n    for (i = 0; i < 10; ++i) {\n        printf(\"%d \", b[i]);\n    }\n    return 0;\n}","output":"a = [0] * 10\nb = [0] * 10\n\nfor j in range(1, 6):\n    for i in range(10):\n        a[i] = a[i] + j\n        b[i] = b[i] + b[i - 1] + a[i]\n\nfor i in range(10):\n    print(b[i], end=\" \")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code in python\n\n### Input:\n#include <stdio.h>\nint main()\n{\n    int a[10], b[10], i, j;\n    for (i = 0; i < 10; ++i) {\n        a[i] = 0;\n        b[i] = 0;\n    }\n    for (j = 1; j <= 5; ++j) {\n        for (i = 0; i < 10; ++i) {\n            a[i] = a[i] + j;\n            b[i] = b[i] + b[i - 1] + a[i];\n        }\n    }\n    for (i = 0; i < 10; ++i) {\n        printf(\"%d \", b[i]);\n    }\n    return 0;\n}\n\n### Output:\na = [0] * 10\nb = [0] * 10\n\nfor j in range(1, 6):\n    for i in range(10):\n        a[i] = a[i] + j\n        b[i] = b[i] + b[i - 1] + a[i]\n\nfor i in range(10):\n    print(b[i], end=\" \")"}
{"instruction":"Develop a Python program to flatten a n level nested dictionary into a single list of key-value pairs.","input":"a nested dictionary\n{\n    'level1': {\n        'level2_1': {\n            'level3_1': 'value1'\n        },\n        'level2_2': {\n            'level3_2': 'value2'\n        }\n    }\n}","output":"def flatten_dict(nested_dict, flat_dict={}, prefix=''):\n    for key, value in nested_dict.items():\n        key_prefix = prefix + key + '.' if prefix else key\n\n        if isinstance(value, dict):\n            flatten_dict(value, flat_dict, key_prefix)\n        else:\n            flat_dict[key_prefix] = value\n\n    return flat_dict","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to flatten a n level nested dictionary into a single list of key-value pairs.\n\n### Input:\na nested dictionary\n{\n    'level1': {\n        'level2_1': {\n            'level3_1': 'value1'\n        },\n        'level2_2': {\n            'level3_2': 'value2'\n        }\n    }\n}\n\n### Output:\ndef flatten_dict(nested_dict, flat_dict={}, prefix=''):\n    for key, value in nested_dict.items():\n        key_prefix = prefix + key + '.' if prefix else key\n\n        if isinstance(value, dict):\n            flatten_dict(value, flat_dict, key_prefix)\n        else:\n            flat_dict[key_prefix] = value\n\n    return flat_dict"}
{"instruction":"Develop a Python program to generate the first N Fibonacci numbers.","input":"N = 10","output":"def fibonacci_numbers(n):\n result = []\n a, b = 0, 1\n while a < n:\n result.append(a)\n a, b = b, a+b\n return result\n\nn = 10\nfibonacci = fibonacci_numbers(n)\n\nprint(fibonacci)\n\n# Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to generate the first N Fibonacci numbers.\n\n### Input:\nN = 10\n\n### Output:\ndef fibonacci_numbers(n):\n result = []\n a, b = 0, 1\n while a < n:\n result.append(a)\n a, b = b, a+b\n return result\n\nn = 10\nfibonacci = fibonacci_numbers(n)\n\nprint(fibonacci)\n\n# Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"}
{"instruction":"Write a Python program to optimize an existing array using Bubble sort.","input":"arr = [2,3,1,4,5]","output":"def bubble_sort(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr) - 1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\nif __name__ == '__main__':\n    arr = [2,3,1,4,5]\n    print(\"Optimized array:\", bubble_sort(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize an existing array using Bubble sort.\n\n### Input:\narr = [2,3,1,4,5]\n\n### Output:\ndef bubble_sort(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr) - 1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\nif __name__ == '__main__':\n    arr = [2,3,1,4,5]\n    print(\"Optimized array:\", bubble_sort(arr))"}
{"instruction":"Write a Python program to create a random password of length 10.","input":"<noimport>","output":"import string \nimport random\n\ndef generate_password(length): \n    password = \"\" \n    for i in range(length): \n        character = random.choice(\n            string.ascii_letters + \n            string.digits + \n            string.punctuation)\n        password += character\n    return password\n\npassword = generate_password(10) \nprint(password)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a random password of length 10.\n\n### Input:\n<noimport>\n\n### Output:\nimport string \nimport random\n\ndef generate_password(length): \n    password = \"\" \n    for i in range(length): \n        character = random.choice(\n            string.ascii_letters + \n            string.digits + \n            string.punctuation)\n        password += character\n    return password\n\npassword = generate_password(10) \nprint(password)"}
{"instruction":"Write an algorithm in Python to calculate the nth prime number.","input":"Not applicable","output":"def nth_prime(n):\n primes = [2]\n\nnum = 3\nwhile len(primes) < n:\n isPrime = True\n for prime in primes:\n if num % prime == 0:\n isPrime = False\n break\n if isPrime:\n primes.append(num)\n num += 2\n\nreturn primes[n-1]\n\n#Example\nprint(nth_prime(100))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to calculate the nth prime number.\n\n### Input:\nNot applicable\n\n### Output:\ndef nth_prime(n):\n primes = [2]\n\nnum = 3\nwhile len(primes) < n:\n isPrime = True\n for prime in primes:\n if num % prime == 0:\n isPrime = False\n break\n if isPrime:\n primes.append(num)\n num += 2\n\nreturn primes[n-1]\n\n#Example\nprint(nth_prime(100))"}
{"instruction":"Create a function in Python which takes a user input and sorts it in ascending order.","input":"9,5,4,7","output":"def my_function(values):\n    sorted_values = sorted(values)\n    return sorted_values\n\nif __name__ == \"__main__\":\n    values = [int(value) for value in input().split(',')]\n    print(my_function(values))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python which takes a user input and sorts it in ascending order.\n\n### Input:\n9,5,4,7\n\n### Output:\ndef my_function(values):\n    sorted_values = sorted(values)\n    return sorted_values\n\nif __name__ == \"__main__\":\n    values = [int(value) for value in input().split(',')]\n    print(my_function(values))"}
{"instruction":"Generate a Python function to validate a credit card billing address.","input":"Credit card billing address example\n\nAnn Smith\n1234 Main St.\nAnytown, CA 99999","output":"def validate_billing_address(address):\n    # Split address into individual elements\n    street, city_state_zip = address.split(\"\\n\")\n\n    # Check street element\n    if not street:\n        return False\n    \n    # Check city_state_zip element\n    elements = city_state_zip.split(\",\")\n    if len(elements) != 2:\n        return False\n    city, state_zip = elements\n    state, zip = state_zip.split(\" \")\n    if len(zip) != 5 or not zip.isdigit():\n        return False\n    \n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to validate a credit card billing address.\n\n### Input:\nCredit card billing address example\n\nAnn Smith\n1234 Main St.\nAnytown, CA 99999\n\n### Output:\ndef validate_billing_address(address):\n    # Split address into individual elements\n    street, city_state_zip = address.split(\"\\n\")\n\n    # Check street element\n    if not street:\n        return False\n    \n    # Check city_state_zip element\n    elements = city_state_zip.split(\",\")\n    if len(elements) != 2:\n        return False\n    city, state_zip = elements\n    state, zip = state_zip.split(\" \")\n    if len(zip) != 5 or not zip.isdigit():\n        return False\n    \n    return True"}
{"instruction":"Generate a REST endpoint with Python Flask to accept an employee ID and return employee information.","input":"Not applicable","output":"from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\nemployees = [\n {'id': 1, 'name': 'John Doe', 'age': 30},\n {'id': 2, 'name': 'Jane Doe', 'age': 25}\n]\n\n@app.route('\/employees\/<int:employee_id>', methods=['GET'])\ndef get_employee(employee_id):\n employee = [employee for employee in employees if employee['id'] == employee_id]\n\n if len(employee) == 0:\n return jsonify({'message': 'Employee not found'})\n\n return jsonify({'employee': employee[0]})\n\napp.run(port=5000)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a REST endpoint with Python Flask to accept an employee ID and return employee information.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\nemployees = [\n {'id': 1, 'name': 'John Doe', 'age': 30},\n {'id': 2, 'name': 'Jane Doe', 'age': 25}\n]\n\n@app.route('\/employees\/<int:employee_id>', methods=['GET'])\ndef get_employee(employee_id):\n employee = [employee for employee in employees if employee['id'] == employee_id]\n\n if len(employee) == 0:\n return jsonify({'message': 'Employee not found'})\n\n return jsonify({'employee': employee[0]})\n\napp.run(port=5000)"}
{"instruction":"Create a Python version of the classic \"Hello World!\" program.","input":"","output":"print(\"Hello World!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python version of the classic \"Hello World!\" program.\n\n### Input:\n\n\n### Output:\nprint(\"Hello World!\")"}
{"instruction":"Create a Python module file named \"slot\" with a class named \"Slot\" that contains at least four methods: \"initialize\" for initializing resources, \"__enter__\" for getting next data to process, \"slot\" for user custom code, and \"__exit__\" for when the slot is finished. Override the \"initialize\", \"__enter__\", \"__exit__\", and \"slot\" methods in the subclass as needed. Return False in \"__enter__\" when there is no data to process. Add custom code to the \"slot\" method.","input":"","output":"# -*- coding: utf-8 -*-\n\nclass Slot(object):\n    \"\"\"\n    To use comb, you should create a python module file. we named *slot*.\n\n    A legal slot must be named 'Slot' in your module file and it must be at least contain four method:\n\n    * `initialize`\n\n    initial resource, e.g: database handle\n\n    * `__enter__`\n\n    get next data to do,you can fetch one or more data.\n\n    * `slot`\n\n    user custom code\n\n    * `__exit__`\n\n    when slot finished, call this method\n\n    \"\"\"\n\n    def __init__(self, combd):\n        \"\"\"Don't override this method unless what you're doing.\n\n        \"\"\"\n\n        self.threads_num = combd.threads_num\n        self.sleep = combd.sleep\n        self.sleep_max = combd.sleep_max\n        self.debug = combd.debug\n        self.combd = combd\n\n        self.initialize()\n\n\n    def initialize(self):\n        \"\"\"Hook for subclass initialization.\n        \n        This block is execute before thread initial\n        \n        Example::\n\n            class UserSlot(Slot):\n                def initialize(self):\n                    self.threads_num = 10 \n\n                def slot(self, result):\n                    ...\n        \n        \"\"\"\n        pass\n\n    def __enter__(self):\n        \"\"\"You **MUST** return False when no data to do.\n\n        The return value will be used in `Slot.slot`\n        \"\"\"\n        print(\"You should override __enter__ method by subclass\")\n        return False\n\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        \"\"\"When slot done, will call this method.\n        \"\"\"\n        print(\"You should override __exit__ method by subclass\")\n        pass\n\n\n    def slot(self, msg):\n        \"\"\"\n        Add your custom code at here.\n\n        For example, look at:\n\n        * `comb.demo.list`\n\n        * `comb.demo.mongo`\n\n        * `comb.demo.redis`\n\n\n        \"\"\"\n\n        pass\n\n\n        # @staticmethod\n        # def options():\n        # \"\"\"\n        # replace this method if you want add user options\n        #     :return:\n        #     \"\"\"\n        #     return ()\n        #     pass\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module file named \"slot\" with a class named \"Slot\" that contains at least four methods: \"initialize\" for initializing resources, \"__enter__\" for getting next data to process, \"slot\" for user custom code, and \"__exit__\" for when the slot is finished. Override the \"initialize\", \"__enter__\", \"__exit__\", and \"slot\" methods in the subclass as needed. Return False in \"__enter__\" when there is no data to process. Add custom code to the \"slot\" method.\n\n### Input:\n\n\n### Output:\n# -*- coding: utf-8 -*-\n\nclass Slot(object):\n    \"\"\"\n    To use comb, you should create a python module file. we named *slot*.\n\n    A legal slot must be named 'Slot' in your module file and it must be at least contain four method:\n\n    * `initialize`\n\n    initial resource, e.g: database handle\n\n    * `__enter__`\n\n    get next data to do,you can fetch one or more data.\n\n    * `slot`\n\n    user custom code\n\n    * `__exit__`\n\n    when slot finished, call this method\n\n    \"\"\"\n\n    def __init__(self, combd):\n        \"\"\"Don't override this method unless what you're doing.\n\n        \"\"\"\n\n        self.threads_num = combd.threads_num\n        self.sleep = combd.sleep\n        self.sleep_max = combd.sleep_max\n        self.debug = combd.debug\n        self.combd = combd\n\n        self.initialize()\n\n\n    def initialize(self):\n        \"\"\"Hook for subclass initialization.\n        \n        This block is execute before thread initial\n        \n        Example::\n\n            class UserSlot(Slot):\n                def initialize(self):\n                    self.threads_num = 10 \n\n                def slot(self, result):\n                    ...\n        \n        \"\"\"\n        pass\n\n    def __enter__(self):\n        \"\"\"You **MUST** return False when no data to do.\n\n        The return value will be used in `Slot.slot`\n        \"\"\"\n        print(\"You should override __enter__ method by subclass\")\n        return False\n\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        \"\"\"When slot done, will call this method.\n        \"\"\"\n        print(\"You should override __exit__ method by subclass\")\n        pass\n\n\n    def slot(self, msg):\n        \"\"\"\n        Add your custom code at here.\n\n        For example, look at:\n\n        * `comb.demo.list`\n\n        * `comb.demo.mongo`\n\n        * `comb.demo.redis`\n\n\n        \"\"\"\n\n        pass\n\n\n        # @staticmethod\n        # def options():\n        # \"\"\"\n        # replace this method if you want add user options\n        #     :return:\n        #     \"\"\"\n        #     return ()\n        #     pass\n"}
{"instruction":"Design a program in Python to check if a given number is a palindrome","input":"12321","output":"def check_number(num): \n  \n    # make a copy of the original number \n    temp = num \n  \n    # initialize sum \n    rev = 0\n  \n    while temp > 0: \n        rev = (rev * 10) + (temp % 10) \n        temp = temp \/\/ 10\n  \n    # Check if number is equal to its reverse \n    if num == rev: \n        return True\n    else: \n        return False\n  \n# main function \nnum = 12321\n  \nif check_number(num): \n    print(\"Given Number is Palindrome\") \nelse: \n    print(\"Given Number is not a Palindrome\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to check if a given number is a palindrome\n\n### Input:\n12321\n\n### Output:\ndef check_number(num): \n  \n    # make a copy of the original number \n    temp = num \n  \n    # initialize sum \n    rev = 0\n  \n    while temp > 0: \n        rev = (rev * 10) + (temp % 10) \n        temp = temp \/\/ 10\n  \n    # Check if number is equal to its reverse \n    if num == rev: \n        return True\n    else: \n        return False\n  \n# main function \nnum = 12321\n  \nif check_number(num): \n    print(\"Given Number is Palindrome\") \nelse: \n    print(\"Given Number is not a Palindrome\")"}
{"instruction":"Launch a web server in Docker using Python","input":"","output":"FROM python:3\n\nWORKDIR \/app\n\nCOPY . \/app\n\nRUN pip install flask\n\nEXPOSE 5000\n\nCMD [\"python\", \"app.py\"]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nLaunch a web server in Docker using Python\n\n### Input:\n\n\n### Output:\nFROM python:3\n\nWORKDIR \/app\n\nCOPY . \/app\n\nRUN pip install flask\n\nEXPOSE 5000\n\nCMD [\"python\", \"app.py\"]"}
{"instruction":"Edit a Python program to add support for a GUI.","input":"import math\n\ndef calculate_area(radius):\narea = math.pi * radius * radius\nreturn area","output":"import math\nimport tkinter as tk\n\ndef calculate_area(radius):\n area = math.pi * radius * radius\n return area\n\nroot = tk.Tk()\n\ncanvas1 = tk.Canvas(root, width=300, height=300)\ncanvas1.pack()\n \nentry1 = tk.Entry (root) \ncanvas1.create_window(150, 140, window=entry1)\n\ndef getSquareRoot ():  \n root = entry1.get()\n \n label1 = tk.Label(root, text= calculate_area(int(root)))\n canvas1.create_window(150, 230, window=label1)\n\nbutton1 = tk.Button(text='Calculate Area', command=getSquareRoot)\ncanvas1.create_window(150, 180, window=button1)\n \nroot.mainloop()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit a Python program to add support for a GUI.\n\n### Input:\nimport math\n\ndef calculate_area(radius):\narea = math.pi * radius * radius\nreturn area\n\n### Output:\nimport math\nimport tkinter as tk\n\ndef calculate_area(radius):\n area = math.pi * radius * radius\n return area\n\nroot = tk.Tk()\n\ncanvas1 = tk.Canvas(root, width=300, height=300)\ncanvas1.pack()\n \nentry1 = tk.Entry (root) \ncanvas1.create_window(150, 140, window=entry1)\n\ndef getSquareRoot ():  \n root = entry1.get()\n \n label1 = tk.Label(root, text= calculate_area(int(root)))\n canvas1.create_window(150, 230, window=label1)\n\nbutton1 = tk.Button(text='Calculate Area', command=getSquareRoot)\ncanvas1.create_window(150, 180, window=button1)\n \nroot.mainloop()"}
{"instruction":"Write a Python function to return the GCD (Greatest Common Denominator) of two integers.","input":"num_1 = 12\nnum_2 = 24","output":"def gcd(num_1, num_2):\n  if num_2 == 0:\n    return num_1\n  return gcd(num_2, num_1 % num_2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to return the GCD (Greatest Common Denominator) of two integers.\n\n### Input:\nnum_1 = 12\nnum_2 = 24\n\n### Output:\ndef gcd(num_1, num_2):\n  if num_2 == 0:\n    return num_1\n  return gcd(num_2, num_1 % num_2)"}
{"instruction":"Develop a machine learning model in Python to identify the author of a given article.","input":"","output":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\n\n# load data\nsamples = [\n  \"sample 1 from AuthorA\",\n  \"sample 2 from AuthorA\",\n  \"sample 1 from AuthorB\",\n  \"sample 2 from AuthorB\"\n]\nlabels = [\n  \"AuthorA\",\n  \"AuthorA\",\n  \"AuthorB\",\n  \"AuthorB\"\n]\n\n# build the model\nmodel = Pipeline([\n  ('tfidf', TfidfVectorizer()),\n  ('clf', GaussianNB())\n])\n\n# train the model\nX_train, X_test, y_train, y_test = train_test_split(samples, labels, test_size=0.3)\nmodel.fit(X_train, y_train)\n\n# evalulate the model\nscore = model.score(X_test, y_test)\nprint(f'model score: {score}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a machine learning model in Python to identify the author of a given article.\n\n### Input:\n\n\n### Output:\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\n\n# load data\nsamples = [\n  \"sample 1 from AuthorA\",\n  \"sample 2 from AuthorA\",\n  \"sample 1 from AuthorB\",\n  \"sample 2 from AuthorB\"\n]\nlabels = [\n  \"AuthorA\",\n  \"AuthorA\",\n  \"AuthorB\",\n  \"AuthorB\"\n]\n\n# build the model\nmodel = Pipeline([\n  ('tfidf', TfidfVectorizer()),\n  ('clf', GaussianNB())\n])\n\n# train the model\nX_train, X_test, y_train, y_test = train_test_split(samples, labels, test_size=0.3)\nmodel.fit(X_train, y_train)\n\n# evalulate the model\nscore = model.score(X_test, y_test)\nprint(f'model score: {score}')"}
{"instruction":"Design an algorithm in Python that computes the minimum number of coins that needs to be used for making change in a given denomination.","input":"An array of coins [1, 2, 5, 10] and a total amount of 19","output":"def minimumNumberOfCoins(coins, amount): \n    # Initialize the table for all amounts\n    table = [0] * (amount + 1) \n  \n    table[0] = 0\n  \n    for i in range(1, amount+1): \n        table[i] = float(\"inf\") \n        for j in range(len(coins)): \n            sub_res = 0\n            if i >= coins[j]: \n                sub_res = table[i - coins[j]] \n            if (sub_res != float(\"inf\") and\n            sub_res + 1 < table[i]): \n                table[i] = sub_res + 1\n  \n    return table[amount] \n  \n  \nif __name__ == \"__main__\": \n    Coins = [1, 2, 5, 10] \n    Amount = 19\n    print(\"Minimum Coins Required:\",minimumNumberOfCoins(Coins, Amount))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that computes the minimum number of coins that needs to be used for making change in a given denomination.\n\n### Input:\nAn array of coins [1, 2, 5, 10] and a total amount of 19\n\n### Output:\ndef minimumNumberOfCoins(coins, amount): \n    # Initialize the table for all amounts\n    table = [0] * (amount + 1) \n  \n    table[0] = 0\n  \n    for i in range(1, amount+1): \n        table[i] = float(\"inf\") \n        for j in range(len(coins)): \n            sub_res = 0\n            if i >= coins[j]: \n                sub_res = table[i - coins[j]] \n            if (sub_res != float(\"inf\") and\n            sub_res + 1 < table[i]): \n                table[i] = sub_res + 1\n  \n    return table[amount] \n  \n  \nif __name__ == \"__main__\": \n    Coins = [1, 2, 5, 10] \n    Amount = 19\n    print(\"Minimum Coins Required:\",minimumNumberOfCoins(Coins, Amount))"}
{"instruction":"Develop a Python program to print the first 20 Armstrong numbers","input":"","output":"for num in range(1,21):\n   sum = 0\n   temp = num\n   while temp > 0:\n       digit = temp % 10\n       sum += digit ** 3\n       temp \/\/= 10\n   if num == sum:\n       print(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to print the first 20 Armstrong numbers\n\n### Input:\n\n\n### Output:\nfor num in range(1,21):\n   sum = 0\n   temp = num\n   while temp > 0:\n       digit = temp % 10\n       sum += digit ** 3\n       temp \/\/= 10\n   if num == sum:\n       print(num)"}
{"instruction":"Build an algorithm in Python for finding the sum of all the odd numbers in a given array.","input":"[1, 2, 3, 4, 5, 6]","output":"def sumOddNumbers(arr):\n    sum = 0\n    for num in arr:\n        if num % 2 != 0:\n            sum += num\n    return sum\n\narr = [1, 2, 3, 4, 5, 6]\nprint(sumOddNumbers(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild an algorithm in Python for finding the sum of all the odd numbers in a given array.\n\n### Input:\n[1, 2, 3, 4, 5, 6]\n\n### Output:\ndef sumOddNumbers(arr):\n    sum = 0\n    for num in arr:\n        if num % 2 != 0:\n            sum += num\n    return sum\n\narr = [1, 2, 3, 4, 5, 6]\nprint(sumOddNumbers(arr))"}
{"instruction":"Create a Python program to construct a Huffman tree from the given input string.","input":"\"abracadabra\"","output":"def huffman_tree(input_string):\n    frequency = {}\n    for i in input_string:\n        if i in frequency:\n            frequency[i]+= 1\n        else:\n            frequency[i]= 1\n    m = min(frequency, key=frequency.get)\n    freq_sorted = sorted(frequency.items(), \n                         key = lambda kv:kv[1], reverse = True)\n    huffman_tree = [None]*2*len(freq_sorted)-1\n    huffman_tree[0] = [m, frequency[m]]\n    # Construct the Huffman Tree\n    j = 0\n    while len(freq_sorted) != 0:\n        j+= 1\n        if len(freq_sorted) > 1:\n            freq1 = freq_sorted[0][1]\n            entry1 = freq_sorted[0][0]\n            del freq_sorted[0]\n            freq2 = freq_sorted[0][1]\n            entry2 = freq_sorted[0][0]\n            del freq_sorted[0]\n            huffman_tree[j] = [entry1+\"\"+entry2,\n                               freq1+freq2]\n            freq_sorted.append([entry1+\"\"+entry2,\n                                freq1+freq2])\n            freq_sorted = sorted(freq_sorted,\n                                 key = lambda kv:kv[1], reverse = True)\n        else:\n            entry = freq_sorted[0][0]\n            huffman_tree[j] = [entry, freq_sorted[0][1]]\n            del freq_sorted[0]\n\n    return huffman_tree","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to construct a Huffman tree from the given input string.\n\n### Input:\n\"abracadabra\"\n\n### Output:\ndef huffman_tree(input_string):\n    frequency = {}\n    for i in input_string:\n        if i in frequency:\n            frequency[i]+= 1\n        else:\n            frequency[i]= 1\n    m = min(frequency, key=frequency.get)\n    freq_sorted = sorted(frequency.items(), \n                         key = lambda kv:kv[1], reverse = True)\n    huffman_tree = [None]*2*len(freq_sorted)-1\n    huffman_tree[0] = [m, frequency[m]]\n    # Construct the Huffman Tree\n    j = 0\n    while len(freq_sorted) != 0:\n        j+= 1\n        if len(freq_sorted) > 1:\n            freq1 = freq_sorted[0][1]\n            entry1 = freq_sorted[0][0]\n            del freq_sorted[0]\n            freq2 = freq_sorted[0][1]\n            entry2 = freq_sorted[0][0]\n            del freq_sorted[0]\n            huffman_tree[j] = [entry1+\"\"+entry2,\n                               freq1+freq2]\n            freq_sorted.append([entry1+\"\"+entry2,\n                                freq1+freq2])\n            freq_sorted = sorted(freq_sorted,\n                                 key = lambda kv:kv[1], reverse = True)\n        else:\n            entry = freq_sorted[0][0]\n            huffman_tree[j] = [entry, freq_sorted[0][1]]\n            del freq_sorted[0]\n\n    return huffman_tree"}
{"instruction":"Use regex in a Python program to find all instances of the word \"the\".","input":"The quick brown fox jumps over the lazy dog","output":"import re\n\nstring = 'The quick brown fox jumps over the lazy dog'\n\n# Prints matches\nmatches = re.findall('the', string, re.IGNORECASE)\nprint(matches)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse regex in a Python program to find all instances of the word \"the\".\n\n### Input:\nThe quick brown fox jumps over the lazy dog\n\n### Output:\nimport re\n\nstring = 'The quick brown fox jumps over the lazy dog'\n\n# Prints matches\nmatches = re.findall('the', string, re.IGNORECASE)\nprint(matches)"}
{"instruction":"Create a python script to compare two lists of strings and print the difference between them.","input":"list1 = [\"Car\", \"Plane\", \"Train\"]\nlist2 = [\"Car\", \"Bus\", \"Train\"]","output":"def compare_list(list1, list2):\n    diff = []\n    for word1 in list1:\n        if word1 not in list2:\n            diff.append(word1)\n    for word2 in list2:\n        if word2 not in list1:\n            diff.append(word2)\n    return diff\n\nlist1 = [\"Car\", \"Plane\", \"Train\"]\nlist2 = [\"Car\", \"Bus\", \"Train\"]\n\ndifference = compare_list(list1, list2)\nprint(difference)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to compare two lists of strings and print the difference between them.\n\n### Input:\nlist1 = [\"Car\", \"Plane\", \"Train\"]\nlist2 = [\"Car\", \"Bus\", \"Train\"]\n\n### Output:\ndef compare_list(list1, list2):\n    diff = []\n    for word1 in list1:\n        if word1 not in list2:\n            diff.append(word1)\n    for word2 in list2:\n        if word2 not in list1:\n            diff.append(word2)\n    return diff\n\nlist1 = [\"Car\", \"Plane\", \"Train\"]\nlist2 = [\"Car\", \"Bus\", \"Train\"]\n\ndifference = compare_list(list1, list2)\nprint(difference)"}
{"instruction":"Generate a list comprehension in Python that prints the cubes of the first 5 numbers.","input":"","output":"[x**3 for x in range(1, 6)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list comprehension in Python that prints the cubes of the first 5 numbers.\n\n### Input:\n\n\n### Output:\n[x**3 for x in range(1, 6)]"}
{"instruction":"Create a fish shape using the given Python turtle library.","input":"","output":"import turtle\n\ndef draw_fish():\n    # draw the head\n    turtle.forward(40)\n    turtle.right(90)\n    turtle.forward(70) \n    turtle.left(150)\n    # draw the body\n    turtle.forward(100)\n    turtle.right(90)\n    turtle.forward(50)\n    # draw the tail\n    turtle.right(90)\n    turtle.forward(50)\n    turtle.right(130)\n    turtle.forward(90)\n    # draw the eyes\n    turtle.penup()\n    turtle.goto(30, 34)\n    turtle.pendown()\n    turtle.dot()\n    turtle.penup()\n    turtle.goto(70, 34)\n    turtle.pendown()\n    turtle.dot()\n\ndraw_fish()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a fish shape using the given Python turtle library.\n\n### Input:\n\n\n### Output:\nimport turtle\n\ndef draw_fish():\n    # draw the head\n    turtle.forward(40)\n    turtle.right(90)\n    turtle.forward(70) \n    turtle.left(150)\n    # draw the body\n    turtle.forward(100)\n    turtle.right(90)\n    turtle.forward(50)\n    # draw the tail\n    turtle.right(90)\n    turtle.forward(50)\n    turtle.right(130)\n    turtle.forward(90)\n    # draw the eyes\n    turtle.penup()\n    turtle.goto(30, 34)\n    turtle.pendown()\n    turtle.dot()\n    turtle.penup()\n    turtle.goto(70, 34)\n    turtle.pendown()\n    turtle.dot()\n\ndraw_fish()"}
{"instruction":"Create a function in Python that determines if a given number is an Armstrong number or not.","input":"371","output":"def isArmstrongNumber(number):\n  num_str = str(number)\n  result = 0\n  power = len(num_str)\n\n  for c in num_str:\n    result += int(c) ** power\n\n  if result == number:\n    return True\n  else:\n    return False\n\nif isArmstrongNumber(371):\n  print('It is an Armstrong number.')\nelse:\n  print('It is not an Armstrong number.')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that determines if a given number is an Armstrong number or not.\n\n### Input:\n371\n\n### Output:\ndef isArmstrongNumber(number):\n  num_str = str(number)\n  result = 0\n  power = len(num_str)\n\n  for c in num_str:\n    result += int(c) ** power\n\n  if result == number:\n    return True\n  else:\n    return False\n\nif isArmstrongNumber(371):\n  print('It is an Armstrong number.')\nelse:\n  print('It is not an Armstrong number.')"}
{"instruction":"Create a machine learning model in Python to predict the age of a person from their height and weight.","input":"Sample input: \nHeight: 59\nWeight: 140","output":"import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Creating the X and Y datasets \nx = []\ny = []\n\n# Adding the data\nx.append([59, 140])\ny.append(30)\n\nx = np.array(x)\ny = np.array(y)\n\n# Creating and fitting the model \nmodel = LinearRegression().fit(x, y)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python to predict the age of a person from their height and weight.\n\n### Input:\nSample input: \nHeight: 59\nWeight: 140\n\n### Output:\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Creating the X and Y datasets \nx = []\ny = []\n\n# Adding the data\nx.append([59, 140])\ny.append(30)\n\nx = np.array(x)\ny = np.array(y)\n\n# Creating and fitting the model \nmodel = LinearRegression().fit(x, y)"}
{"instruction":"Write a python program that will generate a password containing numbers and letters from an entered string.","input":"Hello","output":"def generate_password(word):\n      # initialize variables \n    password = \"\"\n    letters = \"\"\n    numbers = \"\"\n\n    # create new password\n    for i in range(0, len(word)):\n      letters += word[i]\n      numbers += str(i)\n\n    password = letters + numbers\n    return password\n\nprint(generate_password(\"Hello\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that will generate a password containing numbers and letters from an entered string.\n\n### Input:\nHello\n\n### Output:\ndef generate_password(word):\n      # initialize variables \n    password = \"\"\n    letters = \"\"\n    numbers = \"\"\n\n    # create new password\n    for i in range(0, len(word)):\n      letters += word[i]\n      numbers += str(i)\n\n    password = letters + numbers\n    return password\n\nprint(generate_password(\"Hello\"))"}
{"instruction":"Create a SQLite table in Python to store information about books in a library. The table should include fields for title, author, year of publication, and number of copies.","input":"Not applicable","output":"import sqlite3\n\n# connect to the database\nconn = sqlite3.connect('library.db')\nc = conn.cursor()\n\n#create table\nc.execute(\"CREATE TABLE books (title TEXT, author TEXT, year INT, copies INT)\")\n\n# save the changes\nconn.commit()\n\n# close the database connection\nconn.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a SQLite table in Python to store information about books in a library. The table should include fields for title, author, year of publication, and number of copies.\n\n### Input:\nNot applicable\n\n### Output:\nimport sqlite3\n\n# connect to the database\nconn = sqlite3.connect('library.db')\nc = conn.cursor()\n\n#create table\nc.execute(\"CREATE TABLE books (title TEXT, author TEXT, year INT, copies INT)\")\n\n# save the changes\nconn.commit()\n\n# close the database connection\nconn.close()"}
{"instruction":"Create a Python program to sort the list of colors in alphabetical order.","input":"[\"red\", \"green\", \"blue\"]","output":"colors = [\"red\", \"green\", \"blue\"]\n\n#sorting in ascending order\ndesc_colors = sorted(colors)\n\nprint(\"Colors in alphabetical order:\", desc_colors)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to sort the list of colors in alphabetical order.\n\n### Input:\n[\"red\", \"green\", \"blue\"]\n\n### Output:\ncolors = [\"red\", \"green\", \"blue\"]\n\n#sorting in ascending order\ndesc_colors = sorted(colors)\n\nprint(\"Colors in alphabetical order:\", desc_colors)"}
{"instruction":"Create a Python program that can convert temperatures between celsius and fahrenheit.","input":"","output":"def celsius_to_fahrenheit(temp):\n    fahrenheit = temp * 9\/5 + 32\n    return fahrenheit\n\ndef fahrenheit_to_celsius(temp):\n    celsius = (temp - 32) * 5\/9\n    return celsius\n\nprint(\"Fahrenheit to Celsius:\", fahrenheit_to_celsius(59))\nprint(\"Celsius to Fahrenheit:\", celsius_to_fahrenheit(15))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that can convert temperatures between celsius and fahrenheit.\n\n### Input:\n\n\n### Output:\ndef celsius_to_fahrenheit(temp):\n    fahrenheit = temp * 9\/5 + 32\n    return fahrenheit\n\ndef fahrenheit_to_celsius(temp):\n    celsius = (temp - 32) * 5\/9\n    return celsius\n\nprint(\"Fahrenheit to Celsius:\", fahrenheit_to_celsius(59))\nprint(\"Celsius to Fahrenheit:\", celsius_to_fahrenheit(15))"}
{"instruction":"Produce a program in python to solve a given Sudoku puzzle.","input":"grid = [\n    [7,8,0,4,0,0,1,2,0],\n    [6,0,0,0,7,5,0,0,9],\n    [0,0,0,6,0,1,0,7,8],\n    [0,0,7,0,4,0,2,6,0],\n    [0,0,1,0,5,0,9,3,0],\n    [9,0,4,0,6,0,0,0,5],\n    [0,7,0,3,0,0,0,1,2],\n    [1,2,0,0,0,7,4,0,0],\n    [0,4,9,2,0,6,0,0,7]\n]","output":"def solve(grid): \n  \n    \"\"\"solves a 9x9 sudoku grid   \n    \"\"\"\n    row = 0\n    col = 0\n  \n# Initially searching for an unassigned position \n    while row<9: \n        while col<9: \n            # If the entry is empty \n            if grid[row][col]==0: \n                for num in range(1,10): \n                    if check(grid, row, col, num): \n                        grid[row][col] = num     \n  \n                        # recursively checking \n                        if solve(grid):   \n                            return True\n                        else:\n                            grid[row][col]=0\n            # If the entry is not empty, go to the next position \n            col += 1  \n            if col >= 9: \n                col = 0 \n                row += 1 \n   \n# returning true when the whole grid is assigned with numbers\n    return True\n  \ndef check(grid, row, col, num): \n    # checking row and column \n    for i in range(0, 9): \n        # To check whether this num is  \n        # already present in the row \n        if grid[row][i] == num:  \n            return False\n  \n        # To check whether this num is \n        # already present in the column \n        if grid[i][col] == num: \n            return False\n  \n        \n    # now checking in its block (3x3) \n    r = row - row%3\n    c = col - col%3\n  \n    for i in range(3): \n        for j in range(3): \n            if grid[i+r][j+c] == num: \n                return False\n  \n    # If everything checks out, \n    # return true (num is not being used) \n    return True\n\n# Driver program to test above function \nif __name__ == '__main__': \n  \n    grid = [ \n        [7,8,0,4,0,0,1,2,0], \n        [6,0,0,0,7,5,0,0,9], \n        [0,0,0,6,0,1,0,7,8], \n        [0,0,7,0,4,0,2,6,0], \n        [0,0,1,0,5,0,9,3,0], \n        [9,0,4,0,6,0,0,0,5], \n        [0,7,0,3,0,0,0,1,2], \n        [1,2,0,0,0,7,4,0,0], \n        [0,4,9,2,0,6,0,0,7] \n    ]\n    if solve(grid):\n        for row in grid:\n            print (*row, sep=' ')\n    else: \n        print(\"No solution exists!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a program in python to solve a given Sudoku puzzle.\n\n### Input:\ngrid = [\n    [7,8,0,4,0,0,1,2,0],\n    [6,0,0,0,7,5,0,0,9],\n    [0,0,0,6,0,1,0,7,8],\n    [0,0,7,0,4,0,2,6,0],\n    [0,0,1,0,5,0,9,3,0],\n    [9,0,4,0,6,0,0,0,5],\n    [0,7,0,3,0,0,0,1,2],\n    [1,2,0,0,0,7,4,0,0],\n    [0,4,9,2,0,6,0,0,7]\n]\n\n### Output:\ndef solve(grid): \n  \n    \"\"\"solves a 9x9 sudoku grid   \n    \"\"\"\n    row = 0\n    col = 0\n  \n# Initially searching for an unassigned position \n    while row<9: \n        while col<9: \n            # If the entry is empty \n            if grid[row][col]==0: \n                for num in range(1,10): \n                    if check(grid, row, col, num): \n                        grid[row][col] = num     \n  \n                        # recursively checking \n                        if solve(grid):   \n                            return True\n                        else:\n                            grid[row][col]=0\n            # If the entry is not empty, go to the next position \n            col += 1  \n            if col >= 9: \n                col = 0 \n                row += 1 \n   \n# returning true when the whole grid is assigned with numbers\n    return True\n  \ndef check(grid, row, col, num): \n    # checking row and column \n    for i in range(0, 9): \n        # To check whether this num is  \n        # already present in the row \n        if grid[row][i] == num:  \n            return False\n  \n        # To check whether this num is \n        # already present in the column \n        if grid[i][col] == num: \n            return False\n  \n        \n    # now checking in its block (3x3) \n    r = row - row%3\n    c = col - col%3\n  \n    for i in range(3): \n        for j in range(3): \n            if grid[i+r][j+c] == num: \n                return False\n  \n    # If everything checks out, \n    # return true (num is not being used) \n    return True\n\n# Driver program to test above function \nif __name__ == '__main__': \n  \n    grid = [ \n        [7,8,0,4,0,0,1,2,0], \n        [6,0,0,0,7,5,0,0,9], \n        [0,0,0,6,0,1,0,7,8], \n        [0,0,7,0,4,0,2,6,0], \n        [0,0,1,0,5,0,9,3,0], \n        [9,0,4,0,6,0,0,0,5], \n        [0,7,0,3,0,0,0,1,2], \n        [1,2,0,0,0,7,4,0,0], \n        [0,4,9,2,0,6,0,0,7] \n    ]\n    if solve(grid):\n        for row in grid:\n            print (*row, sep=' ')\n    else: \n        print(\"No solution exists!\")"}
{"instruction":"Create a Python script that takes in a positive integer as argument and prints out the Fibonacci sequence up to that number.","input":"5","output":"def fibonacci(n):\n a, b = 0, 1\n fibonacci = [a]\n \n while b < n:\n fibonacci.append(b)\n a, b = b, a + b\n \n return fibonacci\n\nprint(fibonacci(5))\n# Output: [0, 1, 1, 2, 3]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes in a positive integer as argument and prints out the Fibonacci sequence up to that number.\n\n### Input:\n5\n\n### Output:\ndef fibonacci(n):\n a, b = 0, 1\n fibonacci = [a]\n \n while b < n:\n fibonacci.append(b)\n a, b = b, a + b\n \n return fibonacci\n\nprint(fibonacci(5))\n# Output: [0, 1, 1, 2, 3]"}
{"instruction":"Create a Python program to select high temperature days based on a given dataset.","input":"Link to Dataset: http:\/\/web.engr.oregonstate.edu\/~mjb\/weather_data\/index.html","output":"import pandas as pd\n\n# Load data\ndf = pd.read_csv('Oregon_OregonState_97_02.csv', sep=',', index_col=0)\n\n# Select days with high temperature\nhigh_temp_days = df.query('T_MAX > 25')\n\n# Display results\nprint(high_temp_days)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to select high temperature days based on a given dataset.\n\n### Input:\nLink to Dataset: http:\/\/web.engr.oregonstate.edu\/~mjb\/weather_data\/index.html\n\n### Output:\nimport pandas as pd\n\n# Load data\ndf = pd.read_csv('Oregon_OregonState_97_02.csv', sep=',', index_col=0)\n\n# Select days with high temperature\nhigh_temp_days = df.query('T_MAX > 25')\n\n# Display results\nprint(high_temp_days)"}
{"instruction":"Generate a Python program to detect the key phrases in a given text.","input":"text = \"I like to eat apples and oranges.\"","output":"def detect_key_phrases(text):\n    # use some NLP model to detect the key phrases\n    key_phrases = model.predict(text)\n    return key_phrases","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to detect the key phrases in a given text.\n\n### Input:\ntext = \"I like to eat apples and oranges.\"\n\n### Output:\ndef detect_key_phrases(text):\n    # use some NLP model to detect the key phrases\n    key_phrases = model.predict(text)\n    return key_phrases"}
{"instruction":"Generate a valid python program to calculate the frequency of occurrence of a character in a given string.","input":"\"Hello World!\"","output":"def char_frequency(string):\n    frequencies = {}\n    for char in string:\n        if char in frequencies:\n            frequencies[char] += 1\n        else:\n            frequencies[char] = 1\n    return frequencies\n\nfreq = char_frequency(\"Hello World!\")\nprint(freq)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a valid python program to calculate the frequency of occurrence of a character in a given string.\n\n### Input:\n\"Hello World!\"\n\n### Output:\ndef char_frequency(string):\n    frequencies = {}\n    for char in string:\n        if char in frequencies:\n            frequencies[char] += 1\n        else:\n            frequencies[char] = 1\n    return frequencies\n\nfreq = char_frequency(\"Hello World!\")\nprint(freq)"}
{"instruction":"Create a Python class called 'Person' that contains a name, age, and a method get_age()","input":"","output":"\"\"\"\nCreate a Python class called 'Person' that contains a name, age, and a method get_age()\n\"\"\"\n\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def get_age(self):\n        return self.age\n\nif __name__ == '__main__':\n    p = Person('John', 30)\n    print(p.get_age())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class called 'Person' that contains a name, age, and a method get_age()\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a Python class called 'Person' that contains a name, age, and a method get_age()\n\"\"\"\n\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def get_age(self):\n        return self.age\n\nif __name__ == '__main__':\n    p = Person('John', 30)\n    print(p.get_age())"}
{"instruction":"Generate a Python program that implements Linear Search with a list of integers as input.","input":"sampleList = [5, 2, 3, 8, 0]","output":"def linearSearch(sampleList, x):\n for i in range(len(sampleList)):\n if sampleList[i] == x:\n return i \n\nreturn -1\n\n# Driver code\nx = 5\nresult = linearSearch(sampleList, x)\n\nif result == -1:\n print(\"Element not found\")\nelse:\n print(\"Element found at index\", result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that implements Linear Search with a list of integers as input.\n\n### Input:\nsampleList = [5, 2, 3, 8, 0]\n\n### Output:\ndef linearSearch(sampleList, x):\n for i in range(len(sampleList)):\n if sampleList[i] == x:\n return i \n\nreturn -1\n\n# Driver code\nx = 5\nresult = linearSearch(sampleList, x)\n\nif result == -1:\n print(\"Element not found\")\nelse:\n print(\"Element found at index\", result)"}
{"instruction":"Generate a Python program to evaluate a mathematical expression?","input":"expression = \"2 * (3 + 5)\"","output":"def evaluate(expression):\n    return eval(expression)\n\nprint(evaluate(expression))\n\n# Output\n16","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to evaluate a mathematical expression?\n\n### Input:\nexpression = \"2 * (3 + 5)\"\n\n### Output:\ndef evaluate(expression):\n    return eval(expression)\n\nprint(evaluate(expression))\n\n# Output\n16"}
{"instruction":"Transform the following nested for loop into a list comprehension statement in Python.","input":"for i in range(2, 5): \n    for j in range(3): \n        print(i, j)","output":"[(i,j)  for i in range(2,5) for j in range(3)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTransform the following nested for loop into a list comprehension statement in Python.\n\n### Input:\nfor i in range(2, 5): \n    for j in range(3): \n        print(i, j)\n\n### Output:\n[(i,j)  for i in range(2,5) for j in range(3)]"}
{"instruction":"Create a Python program to calculate the Fibonacci numbers up to a certain value.","input":"The value is 50.","output":"def fib(n): \n if n <= 1: \n  return n \n else: \n  return(fib(n-1) + fib(n-2)) \n\n# Take input from the user \nn = int(input(\"Enter a number: \")) \n\n# Print Fibonacci sequence up to n \nprint(\"Fibonacci sequence:\") \nfor i in range(n): \n print(fib(i))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the Fibonacci numbers up to a certain value.\n\n### Input:\nThe value is 50.\n\n### Output:\ndef fib(n): \n if n <= 1: \n  return n \n else: \n  return(fib(n-1) + fib(n-2)) \n\n# Take input from the user \nn = int(input(\"Enter a number: \")) \n\n# Print Fibonacci sequence up to n \nprint(\"Fibonacci sequence:\") \nfor i in range(n): \n print(fib(i))"}
{"instruction":"Generate Python code to print a formatted table from a given list of dictionaries.","input":"list_of_dicts = [{'name': 'John', 'Occupation': 'Software Engineer', 'Age': 34},\n                 {'name': 'Jane', 'Occupation': 'Professor', 'Age': 44},\n                 {'name': 'Jacob', 'Occupation': 'Data Scientist', 'Age': 28},\n                 {'name': 'Justin', 'Occupation': 'Accountant', 'Age': 24}]","output":"keys = list_of_dicts[0].keys()\nfor dicts in list_of_dicts:\n    print('-'*20)\n    for k in keys:\n        print(f\"{k}: {dicts[k]}\")\n    print('-'*20)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to print a formatted table from a given list of dictionaries.\n\n### Input:\nlist_of_dicts = [{'name': 'John', 'Occupation': 'Software Engineer', 'Age': 34},\n                 {'name': 'Jane', 'Occupation': 'Professor', 'Age': 44},\n                 {'name': 'Jacob', 'Occupation': 'Data Scientist', 'Age': 28},\n                 {'name': 'Justin', 'Occupation': 'Accountant', 'Age': 24}]\n\n### Output:\nkeys = list_of_dicts[0].keys()\nfor dicts in list_of_dicts:\n    print('-'*20)\n    for k in keys:\n        print(f\"{k}: {dicts[k]}\")\n    print('-'*20)"}
{"instruction":"Implement a Python class that calculates factorial of a number.","input":"","output":"class Factorial:\n    def __init__(self,n):\n        self.n=n\n    def fact(self):\n        f=1\n        while self.n>0:\n            f*=self.n\n            self.n-=1\n        return f\nnum =int(input('Enter the number: '))\nobj = Factorial(num)\nprint('Factorial of ',num,' is: ',obj.fact())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python class that calculates factorial of a number.\n\n### Input:\n\n\n### Output:\nclass Factorial:\n    def __init__(self,n):\n        self.n=n\n    def fact(self):\n        f=1\n        while self.n>0:\n            f*=self.n\n            self.n-=1\n        return f\nnum =int(input('Enter the number: '))\nobj = Factorial(num)\nprint('Factorial of ',num,' is: ',obj.fact())"}
{"instruction":"Create an implementation of the Quicksort algorithm in Python.","input":"[5, 4, 3, 1, 2]","output":"def quicksort(nums):\n    if len(nums) <= 1:\n        return nums\n \n    pivot = nums[len(nums) \/\/ 2]\n    left = [x for x in nums if x < pivot]\n    middle = [x for x in nums if x == pivot]\n    right = [x for x in nums if x > pivot]\n \n    return quicksort(left) + middle + quicksort(right)\n \ninput_list = [5, 4, 3, 1, 2]\nresult = quicksort(input_list)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an implementation of the Quicksort algorithm in Python.\n\n### Input:\n[5, 4, 3, 1, 2]\n\n### Output:\ndef quicksort(nums):\n    if len(nums) <= 1:\n        return nums\n \n    pivot = nums[len(nums) \/\/ 2]\n    left = [x for x in nums if x < pivot]\n    middle = [x for x in nums if x == pivot]\n    right = [x for x in nums if x > pivot]\n \n    return quicksort(left) + middle + quicksort(right)\n \ninput_list = [5, 4, 3, 1, 2]\nresult = quicksort(input_list)\nprint(result)"}
{"instruction":"Write a Python program that takes a list of numbers as input and returns a list of the same numbers sorted from least to greatest.","input":"list_nums = [6, 8, 4, 2, 5]","output":"list_nums = [6, 8, 4, 2, 5]\n\ndef sort_nums_ascending(input_list):\n    for x in range(len(input_list)-1):\n        min_val = x\n        for y in range(x+1, len(input_list)):\n            if input_list[min_val] > input_list[y]:\n                min_val = y\n        input_list[x], input_list[min_val] = input_list[min_val], input_list[x]\n    return input_list\n\nprint(sort_nums_ascending(list_nums))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a list of numbers as input and returns a list of the same numbers sorted from least to greatest.\n\n### Input:\nlist_nums = [6, 8, 4, 2, 5]\n\n### Output:\nlist_nums = [6, 8, 4, 2, 5]\n\ndef sort_nums_ascending(input_list):\n    for x in range(len(input_list)-1):\n        min_val = x\n        for y in range(x+1, len(input_list)):\n            if input_list[min_val] > input_list[y]:\n                min_val = y\n        input_list[x], input_list[min_val] = input_list[min_val], input_list[x]\n    return input_list\n\nprint(sort_nums_ascending(list_nums))"}
{"instruction":"Transform a given string to uppercase.","input":"string = \"Python Programming\"","output":"def to_upper(string):\n    return string.upper()\n\nstring = \"Python Programming\"\nprint(to_upper(string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTransform a given string to uppercase.\n\n### Input:\nstring = \"Python Programming\"\n\n### Output:\ndef to_upper(string):\n    return string.upper()\n\nstring = \"Python Programming\"\nprint(to_upper(string))"}
{"instruction":"Create a Python script that simulates an 8-sided dice roll.","input":"","output":"import random\n\ndef roll_dice():\n    dice = random.randint(1, 8)\n    return dice\n\ndice = roll_dice()\nprint(f\"You rolled a {dice}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that simulates an 8-sided dice roll.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef roll_dice():\n    dice = random.randint(1, 8)\n    return dice\n\ndice = roll_dice()\nprint(f\"You rolled a {dice}\")"}
{"instruction":"Code a solution for creating a function that sorts an array of strings in descending order using Python.","input":"","output":"def sort_array(arr):\n    arr.sort(reverse = True)\n    return arr\n  \narr = [\"Hello\", \"World\", \"This\", \"is\", \"a\", \"Test\"]\nprint(sort_array(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a solution for creating a function that sorts an array of strings in descending order using Python.\n\n### Input:\n\n\n### Output:\ndef sort_array(arr):\n    arr.sort(reverse = True)\n    return arr\n  \narr = [\"Hello\", \"World\", \"This\", \"is\", \"a\", \"Test\"]\nprint(sort_array(arr))"}
{"instruction":"Create a Python script to extract a list of unique words from the given text.","input":"This is a sample text with some duplicate entries","output":"import re\n\ntext = 'This is a sample text with some duplicate entries'\nwords_list = re.findall(r'\\w+', text)\nunique_words = set(words_list)\n\nprint(unique_words)\n# output: {'some', 'is', 'duplicate', 'with', 'entries', 'text', 'This', 'a'}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to extract a list of unique words from the given text.\n\n### Input:\nThis is a sample text with some duplicate entries\n\n### Output:\nimport re\n\ntext = 'This is a sample text with some duplicate entries'\nwords_list = re.findall(r'\\w+', text)\nunique_words = set(words_list)\n\nprint(unique_words)\n# output: {'some', 'is', 'duplicate', 'with', 'entries', 'text', 'This', 'a'}"}
{"instruction":"Given a text string, write a program in Python which will remove any two consecutive duplicate words from the string.","input":"text: \"The the quick brown fox fox jumps over the lazy dog dog\"","output":"text = \"The quick brown fox jumps over the lazy dog\"\n\ndef remove_duplicate_words(text):\n  words = []\n  for word in text.split():\n    if not words or word != words[-1]:\n      words.append(word)\n  \n  return \" \".join(words)\n\ntext = \"The the quick brown fox fox jumps over the lazy dog dog\"\ntext = remove_duplicate_words(text)\nprint(text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a text string, write a program in Python which will remove any two consecutive duplicate words from the string.\n\n### Input:\ntext: \"The the quick brown fox fox jumps over the lazy dog dog\"\n\n### Output:\ntext = \"The quick brown fox jumps over the lazy dog\"\n\ndef remove_duplicate_words(text):\n  words = []\n  for word in text.split():\n    if not words or word != words[-1]:\n      words.append(word)\n  \n  return \" \".join(words)\n\ntext = \"The the quick brown fox fox jumps over the lazy dog dog\"\ntext = remove_duplicate_words(text)\nprint(text)"}
{"instruction":"Construct an algorithm in Python to find the deepest node in a binary tree.","input":"","output":"def find_deepest_node(root):\n    if root is None: \n        return \n    queue = [] \n    queue.append(root) \n  \n    deepest_node = None\n    while queue:\n        node = queue.pop(0)\n        deepest_node = node \n  \n        if node.left: \n            queue.append(node.left)\n        if node.right: \n            queue.append(node.right)\n    return deepest_node","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm in Python to find the deepest node in a binary tree.\n\n### Input:\n\n\n### Output:\ndef find_deepest_node(root):\n    if root is None: \n        return \n    queue = [] \n    queue.append(root) \n  \n    deepest_node = None\n    while queue:\n        node = queue.pop(0)\n        deepest_node = node \n  \n        if node.left: \n            queue.append(node.left)\n        if node.right: \n            queue.append(node.right)\n    return deepest_node"}
{"instruction":"Given an array of integers, write a Python program to classify each number as even or odd.","input":"[10, 27, 32, 11]","output":"def classify_number(arr): \n result = []\n for num in arr: \n if num % 2 == 0: \n result.append(\"even\")\n else: \n result.append(\"odd\")\n return result \n\nprint(classify_number([10, 27, 32, 11]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of integers, write a Python program to classify each number as even or odd.\n\n### Input:\n[10, 27, 32, 11]\n\n### Output:\ndef classify_number(arr): \n result = []\n for num in arr: \n if num % 2 == 0: \n result.append(\"even\")\n else: \n result.append(\"odd\")\n return result \n\nprint(classify_number([10, 27, 32, 11]))"}
{"instruction":"Develop a python class to model a book with attributes title and authors.","input":"","output":"class Book:\n    def __init__(self, title, authors):\n        self.title = title\n        self.authors = authors\n\nmyBook = Book('The Great Gatsby', 'F. Scott Fitzgerald')\nprint(myBook.title, myBook.authors)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python class to model a book with attributes title and authors.\n\n### Input:\n\n\n### Output:\nclass Book:\n    def __init__(self, title, authors):\n        self.title = title\n        self.authors = authors\n\nmyBook = Book('The Great Gatsby', 'F. Scott Fitzgerald')\nprint(myBook.title, myBook.authors)"}
{"instruction":"Generate a random password of the given length in Python.","input":"","output":"import random\nimport string\n\ndef generate_password(length):\n chars = string.ascii_letters + string.digits\n return ''.join(random.choice(chars) for _ in range(length))\n\nrandom_password = generate_password(8)\nprint(random_password)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random password of the given length in Python.\n\n### Input:\n\n\n### Output:\nimport random\nimport string\n\ndef generate_password(length):\n chars = string.ascii_letters + string.digits\n return ''.join(random.choice(chars) for _ in range(length))\n\nrandom_password = generate_password(8)\nprint(random_password)"}
{"instruction":"Build a decison tree in Python to classify emails as spam or not spam.","input":"","output":"import pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier \n\n# Create dataframe\ndf = pd.DataFrame({'content': ['This is a great deal!', 'Buy now!'], 'spam': [0, 1]})\n\n# Create features and labels\nX = df['content'] \ny = df['spam']\n\n# Create decision tree\ndtree_model = DecisionTreeClassifier(max_depth = 2).fit(X, y) \ndtree_predictions = dtree_model.predict(X) \n\n# Print accuracy\nprint(\"Accuracy:\", dtree_model.score(X, y))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a decison tree in Python to classify emails as spam or not spam.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier \n\n# Create dataframe\ndf = pd.DataFrame({'content': ['This is a great deal!', 'Buy now!'], 'spam': [0, 1]})\n\n# Create features and labels\nX = df['content'] \ny = df['spam']\n\n# Create decision tree\ndtree_model = DecisionTreeClassifier(max_depth = 2).fit(X, y) \ndtree_predictions = dtree_model.predict(X) \n\n# Print accuracy\nprint(\"Accuracy:\", dtree_model.score(X, y))"}
{"instruction":"Create a function that takes two strings as its inputs and returns true if one of the two strings is a substring of the other.","input":"\"python\", \"java\"","output":"def is_substring(string1, string2):\n    for i in range(len(string1)):\n        for j in range(len(string2)):\n            if string1[i] == string2[j]:\n                return True\n    return False\n\nresult = is_substring(\"python\", \"java\")\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes two strings as its inputs and returns true if one of the two strings is a substring of the other.\n\n### Input:\n\"python\", \"java\"\n\n### Output:\ndef is_substring(string1, string2):\n    for i in range(len(string1)):\n        for j in range(len(string2)):\n            if string1[i] == string2[j]:\n                return True\n    return False\n\nresult = is_substring(\"python\", \"java\")\nprint(result)"}
{"instruction":"Produce a program in Python to classify an animal as \"mammal\" or \"non-mammal\" depending on its features and description.","input":"features = [\"warm blooded\", \"gives birth to live young\"]\ndescription = \"The animal is feline and has four legs.\"","output":"def classify_animal(features,description):\n    if(\"warm blooded\" in features and \"gives birth to live young\" in features):\n        return \"mammal\"\n    elif(\"feline\" in description and \"four legs\" in description):\n        return \"mammal\"\n    else:\n        return \"non-mammal\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a program in Python to classify an animal as \"mammal\" or \"non-mammal\" depending on its features and description.\n\n### Input:\nfeatures = [\"warm blooded\", \"gives birth to live young\"]\ndescription = \"The animal is feline and has four legs.\"\n\n### Output:\ndef classify_animal(features,description):\n    if(\"warm blooded\" in features and \"gives birth to live young\" in features):\n        return \"mammal\"\n    elif(\"feline\" in description and \"four legs\" in description):\n        return \"mammal\"\n    else:\n        return \"non-mammal\""}
{"instruction":"The code generates a GDS file for a wafer mask. To use it, call the GenerateCell() function with the desired parameters. The function takes in the following parameters: chipX, chipY, leftKerf, rightKerf, topKerf, botKerf, narray_X, narray_Y, mask_width, wafer_offset_x, wafer_offset_y, and wafer_radius. The function extracts an existing die mask top cell from a GDS file, creates a top reticle cell, adds cells to the top cell, fills the kerf with resist, creates a wafer top cell, and views the resulting cell. Finally, it writes the wafer mask GDS file.","input":"","output":"#!\/usr\/bin\/python\nimport os\nimport numpy\nimport gdspy\n\nld_mask_edge = {'layer': 300, 'datatype': 0}\nld_kerf = {'layer': 200, 'datatype': 0}\nld_acfmask = {'layer': 100, 'datatype': 0}\nld_topmetal= {'layer': 81, 'datatype': 0}\nld_po= {'layer': 27, 'datatype': 1}\n\n\ndef GenerateCell(chipX = 14100., chipY=16210.,leftKerf=85.,rightKerf=15.,topKerf=465.,botKerf=15.,narray_X=13,narray_Y=11,mask_width=254000.,wafer_offset_x=-570.0,wafer_offset_y=2595.0,wafer_radius=100000) :\n\n    #Extract existing die mask top cell from GDS\n    gdsii = gdspy.current_library.read_gds(infile='Timepix3_top_ACF_Nometal.GDS',layers=ld_acfmask)\n    die =  gdspy.current_library.extract(\"Timepix3_top\")\n    die_ref = gdspy.CellReference(die,origin=(leftKerf,botKerf))\n\n    #Create top reticle cell\n    pixel_cell = gdspy.Cell(\"Reticle_top\")\n\n    # Create a kerf layer for visualization\n    kerfWidth  = leftKerf+rightKerf+chipX\n    kerfHeight = topKerf+botKerf+chipY\n    Kerf = gdspy.Rectangle((0,0), (kerfWidth, kerfHeight),**ld_kerf)\n\n   # Add cells to the top cell\n    pixel_cell.add(Kerf)\n    pixel_cell.add(die_ref.get_polygonsets())\n    pixel_cell.add(die_ref.get_paths())\n    #Fill the Kerf with Resist\n    pixel_cell.add(gdspy.Rectangle((0,0), (leftKerf, kerfHeight),**ld_acfmask))\n    pixel_cell.add(gdspy.Rectangle((0,0), (kerfWidth, botKerf),**ld_acfmask))\n    pixel_cell.add(gdspy.Rectangle((0,kerfHeight), (kerfWidth, kerfHeight-topKerf),**ld_acfmask))\n    pixel_cell.add(gdspy.Rectangle((kerfWidth-rightKerf,0), (kerfWidth, kerfHeight-topKerf),**ld_acfmask))\n\n    wafer_cell = gdspy.Cell('Wafer_Top')\n    mask_edge = gdspy.Rectangle((-mask_width\/2,-mask_width\/2), (mask_width\/2., mask_width\/2.),**ld_mask_edge)\n\n    array_origin_x = -narray_X*(leftKerf+rightKerf+chipX)\/2. + wafer_offset_x\n    array_origin_y = -narray_Y*(botKerf+topKerf+chipY)\/2. + wafer_offset_y\n\n\n    wafer_edge = gdspy.Path(1,(wafer_radius,0))\n    wafer_edge.arc(wafer_radius,0,360,layer=400)\n    wafer_cell.add(wafer_edge)\n\n    print kerfWidth,kerfHeight\n    wafer_cell.add(gdspy.CellArray(pixel_cell,narray_X,narray_Y,spacing=(kerfWidth,kerfHeight),origin=(array_origin_x,array_origin_y)))\n    wafer_cell.add(mask_edge)\n\n\n\n\n    # View the resulting cell\n    gdspy.LayoutViewer(cells=[wafer_cell],depth=1)\n\n\n    gdspy.write_gds(\"wafer_mask.gds\",cells=[wafer_cell,pixel_cell])\n\n\n\nif __name__ == '__main__':\n    GenerateCell()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe code generates a GDS file for a wafer mask. To use it, call the GenerateCell() function with the desired parameters. The function takes in the following parameters: chipX, chipY, leftKerf, rightKerf, topKerf, botKerf, narray_X, narray_Y, mask_width, wafer_offset_x, wafer_offset_y, and wafer_radius. The function extracts an existing die mask top cell from a GDS file, creates a top reticle cell, adds cells to the top cell, fills the kerf with resist, creates a wafer top cell, and views the resulting cell. Finally, it writes the wafer mask GDS file.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/python\nimport os\nimport numpy\nimport gdspy\n\nld_mask_edge = {'layer': 300, 'datatype': 0}\nld_kerf = {'layer': 200, 'datatype': 0}\nld_acfmask = {'layer': 100, 'datatype': 0}\nld_topmetal= {'layer': 81, 'datatype': 0}\nld_po= {'layer': 27, 'datatype': 1}\n\n\ndef GenerateCell(chipX = 14100., chipY=16210.,leftKerf=85.,rightKerf=15.,topKerf=465.,botKerf=15.,narray_X=13,narray_Y=11,mask_width=254000.,wafer_offset_x=-570.0,wafer_offset_y=2595.0,wafer_radius=100000) :\n\n    #Extract existing die mask top cell from GDS\n    gdsii = gdspy.current_library.read_gds(infile='Timepix3_top_ACF_Nometal.GDS',layers=ld_acfmask)\n    die =  gdspy.current_library.extract(\"Timepix3_top\")\n    die_ref = gdspy.CellReference(die,origin=(leftKerf,botKerf))\n\n    #Create top reticle cell\n    pixel_cell = gdspy.Cell(\"Reticle_top\")\n\n    # Create a kerf layer for visualization\n    kerfWidth  = leftKerf+rightKerf+chipX\n    kerfHeight = topKerf+botKerf+chipY\n    Kerf = gdspy.Rectangle((0,0), (kerfWidth, kerfHeight),**ld_kerf)\n\n   # Add cells to the top cell\n    pixel_cell.add(Kerf)\n    pixel_cell.add(die_ref.get_polygonsets())\n    pixel_cell.add(die_ref.get_paths())\n    #Fill the Kerf with Resist\n    pixel_cell.add(gdspy.Rectangle((0,0), (leftKerf, kerfHeight),**ld_acfmask))\n    pixel_cell.add(gdspy.Rectangle((0,0), (kerfWidth, botKerf),**ld_acfmask))\n    pixel_cell.add(gdspy.Rectangle((0,kerfHeight), (kerfWidth, kerfHeight-topKerf),**ld_acfmask))\n    pixel_cell.add(gdspy.Rectangle((kerfWidth-rightKerf,0), (kerfWidth, kerfHeight-topKerf),**ld_acfmask))\n\n    wafer_cell = gdspy.Cell('Wafer_Top')\n    mask_edge = gdspy.Rectangle((-mask_width\/2,-mask_width\/2), (mask_width\/2., mask_width\/2.),**ld_mask_edge)\n\n    array_origin_x = -narray_X*(leftKerf+rightKerf+chipX)\/2. + wafer_offset_x\n    array_origin_y = -narray_Y*(botKerf+topKerf+chipY)\/2. + wafer_offset_y\n\n\n    wafer_edge = gdspy.Path(1,(wafer_radius,0))\n    wafer_edge.arc(wafer_radius,0,360,layer=400)\n    wafer_cell.add(wafer_edge)\n\n    print kerfWidth,kerfHeight\n    wafer_cell.add(gdspy.CellArray(pixel_cell,narray_X,narray_Y,spacing=(kerfWidth,kerfHeight),origin=(array_origin_x,array_origin_y)))\n    wafer_cell.add(mask_edge)\n\n\n\n\n    # View the resulting cell\n    gdspy.LayoutViewer(cells=[wafer_cell],depth=1)\n\n\n    gdspy.write_gds(\"wafer_mask.gds\",cells=[wafer_cell,pixel_cell])\n\n\n\nif __name__ == '__main__':\n    GenerateCell()"}
{"instruction":"Design a python program that would generate a random password","input":"","output":"import random\n\ndef generatePassword():\n    charSet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%&*'\n    password = ''\n    for x in range(8):\n        password += random.choice(charSet)\n    return password","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program that would generate a random password\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generatePassword():\n    charSet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%&*'\n    password = ''\n    for x in range(8):\n        password += random.choice(charSet)\n    return password"}
{"instruction":"Compute the sum of a list of numbers using a for loop in Python.","input":"[1, 2, 3, 4]","output":"total = 0\n\nnums = [1, 2, 3, 4]\n\nfor num in nums:\n    total += num\n\nprint(total)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the sum of a list of numbers using a for loop in Python.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\ntotal = 0\n\nnums = [1, 2, 3, 4]\n\nfor num in nums:\n    total += num\n\nprint(total)"}
{"instruction":"Create a Python NLTK program to tokenize a given English text.","input":"Example text: \"This is a sample sentence for tokenizing.\"","output":"import nltk\n\n# Input text\ntext = \"This is a sample sentence for tokenizing.\"\n\n# Tokenize sentences\ntokens = nltk.word_tokenize(text)\n\n# Print tokens\nprint(tokens)\n\n# Output\n['This', 'is', 'a', 'sample', 'sentence', 'for', 'tokenizing', '.']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python NLTK program to tokenize a given English text.\n\n### Input:\nExample text: \"This is a sample sentence for tokenizing.\"\n\n### Output:\nimport nltk\n\n# Input text\ntext = \"This is a sample sentence for tokenizing.\"\n\n# Tokenize sentences\ntokens = nltk.word_tokenize(text)\n\n# Print tokens\nprint(tokens)\n\n# Output\n['This', 'is', 'a', 'sample', 'sentence', 'for', 'tokenizing', '.']"}
{"instruction":"Design a program in Python that counts the number of words in a paragraph and returns the count.","input":"","output":"def count_paragraph_words(par):\n    par = par.split()\n    return len(par)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python that counts the number of words in a paragraph and returns the count.\n\n### Input:\n\n\n### Output:\ndef count_paragraph_words(par):\n    par = par.split()\n    return len(par)"}
{"instruction":"Create a Python program to sort the elements of a list in descending order (largest value first).","input":"numbers = [1, 7, 25, 8, 14]","output":"numbers = [1, 7, 25, 8, 14]\n\n# Sort the list in descending order\nnumbers.sort(reverse=True)\n\n# Print the sorted list\nprint(numbers)\n\n# Output\n[25, 14, 8, 7, 1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to sort the elements of a list in descending order (largest value first).\n\n### Input:\nnumbers = [1, 7, 25, 8, 14]\n\n### Output:\nnumbers = [1, 7, 25, 8, 14]\n\n# Sort the list in descending order\nnumbers.sort(reverse=True)\n\n# Print the sorted list\nprint(numbers)\n\n# Output\n[25, 14, 8, 7, 1]"}
{"instruction":"Using the provided data, generate a Python program to determine the average of all numbers in the list.","input":"list_numbers = [22.2, 33, 44.4, 55.5, 66.6]","output":"def find_average(list_numbers):\n    # Calculate the sum of all elements in the list\n    list_sum = 0\n    for i in range(len(list_numbers)):\n        list_sum += list_numbers[i]\n\n    # Calculate the average\n    list_average = list_sum \/ len(list_numbers)\n\n    # Return the average\n    return list_average\n\n# Call the function\nlist_average = find_average(list_numbers)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the provided data, generate a Python program to determine the average of all numbers in the list.\n\n### Input:\nlist_numbers = [22.2, 33, 44.4, 55.5, 66.6]\n\n### Output:\ndef find_average(list_numbers):\n    # Calculate the sum of all elements in the list\n    list_sum = 0\n    for i in range(len(list_numbers)):\n        list_sum += list_numbers[i]\n\n    # Calculate the average\n    list_average = list_sum \/ len(list_numbers)\n\n    # Return the average\n    return list_average\n\n# Call the function\nlist_average = find_average(list_numbers)"}
{"instruction":"Write a python class called \"Car\" which has attributes like model, color and year.","input":"","output":"class Car(object):\n    \"\"\"A car object with attributes like model, colour and year\"\"\"\n\n    def __init__(self, model, colour, year):\n        self.model = model\n        self.colour = colour\n        self.year = year\n\n# Example\nmy_car = Car(\"Ford Mustang\", \"Red\", 2016)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python class called \"Car\" which has attributes like model, color and year.\n\n### Input:\n\n\n### Output:\nclass Car(object):\n    \"\"\"A car object with attributes like model, colour and year\"\"\"\n\n    def __init__(self, model, colour, year):\n        self.model = model\n        self.colour = colour\n        self.year = year\n\n# Example\nmy_car = Car(\"Ford Mustang\", \"Red\", 2016)"}
{"instruction":"Generate a correct python script to identify the output of a given expression.","input":"expression: (4 + 2) * 3","output":"a = (4 + 2) * 3\nprint(a)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a correct python script to identify the output of a given expression.\n\n### Input:\nexpression: (4 + 2) * 3\n\n### Output:\na = (4 + 2) * 3\nprint(a)"}
{"instruction":"Create a Python program to evaluate an arithmetic expression given as input.","input":"expression = \"1 + 2 * 4\"","output":"def evaluate(expression): \n    expression = expression.replace(\" \", \"\")\n    tokens = list(expression)\n    \n    a = tokens.pop(0)\n    while len(tokens) > 0: \n        op = tokens.pop(0)\n        b = tokens.pop(0)\n        if op == '+':\n            a = int(a) + int(b)\n        elif op == '-':\n            a = int(a) - int(b)\n        elif op == '*':\n            a = int(a) * int(b)\n        elif op == '\/':\n            a = int(a) \/ int(b)\n        else: \n            return False\n    \n    return a\n\nresult = evaluate(expression)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to evaluate an arithmetic expression given as input.\n\n### Input:\nexpression = \"1 + 2 * 4\"\n\n### Output:\ndef evaluate(expression): \n    expression = expression.replace(\" \", \"\")\n    tokens = list(expression)\n    \n    a = tokens.pop(0)\n    while len(tokens) > 0: \n        op = tokens.pop(0)\n        b = tokens.pop(0)\n        if op == '+':\n            a = int(a) + int(b)\n        elif op == '-':\n            a = int(a) - int(b)\n        elif op == '*':\n            a = int(a) * int(b)\n        elif op == '\/':\n            a = int(a) \/ int(b)\n        else: \n            return False\n    \n    return a\n\nresult = evaluate(expression)\nprint(result)"}
{"instruction":"Create an algorithm to solve the Tower of Hanoi in Python.","input":"","output":"def tower_of_hanoi(num_discs, source, auxiliary, destination): \n if num_discs == 1: \n     print(\"Move disc 1 from\", source, \"to\", destination) \n     return\n tower_of_hanoi(num_discs - 1, source, destination, auxiliary) \n print(\"Move disc\", num_discs, \"from\", source, \"to\", destination) \n tower_of_hanoi(num_discs - 1, auxiliary, source, destination) \n\ntower_of_hanoi(3, \"A\", \"B\", \"C\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to solve the Tower of Hanoi in Python.\n\n### Input:\n\n\n### Output:\ndef tower_of_hanoi(num_discs, source, auxiliary, destination): \n if num_discs == 1: \n     print(\"Move disc 1 from\", source, \"to\", destination) \n     return\n tower_of_hanoi(num_discs - 1, source, destination, auxiliary) \n print(\"Move disc\", num_discs, \"from\", source, \"to\", destination) \n tower_of_hanoi(num_discs - 1, auxiliary, source, destination) \n\ntower_of_hanoi(3, \"A\", \"B\", \"C\")"}
{"instruction":"Create a basic Python program that includes a function to find the greatest common divisor (GCD) of two numbers.","input":"int num1 = 21; int num2 = 15","output":"def gcd(x, y): \n    while(y): \n        x, y = y, x % y \n  \n    return x \n  \n# Driver code\nnum1 = 21\nnum2 = 15\n  \nprint(\"The GCD is\", gcd(num1, num2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Python program that includes a function to find the greatest common divisor (GCD) of two numbers.\n\n### Input:\nint num1 = 21; int num2 = 15\n\n### Output:\ndef gcd(x, y): \n    while(y): \n        x, y = y, x % y \n  \n    return x \n  \n# Driver code\nnum1 = 21\nnum2 = 15\n  \nprint(\"The GCD is\", gcd(num1, num2))"}
{"instruction":"Modify the following code to make it more Pythonic.","input":"list1 = [1, 2, 3, 4]\nlist2 = [5, 6, 7, 8]\n\nresult = []\nfor i in range(len(list1)):\nresult.append(list1[i] * list2[i])","output":"list1 = [1, 2, 3, 4]\nlist2 = [5, 6, 7, 8]\n\nresult = [x * y for x, y in zip(list1, list2)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following code to make it more Pythonic.\n\n### Input:\nlist1 = [1, 2, 3, 4]\nlist2 = [5, 6, 7, 8]\n\nresult = []\nfor i in range(len(list1)):\nresult.append(list1[i] * list2[i])\n\n### Output:\nlist1 = [1, 2, 3, 4]\nlist2 = [5, 6, 7, 8]\n\nresult = [x * y for x, y in zip(list1, list2)]"}
{"instruction":"Create a Python program to calculate day of the week for a given date.","input":"(2020, 05, 22)","output":"import datetime\n\nday, month, year = (2020, 05, 22)\n\nweekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n\ninpDate = datetime.date(year, month, day)\ndayOfWeek = inpDate.weekday()\nprint(weekdays[dayOfWeek])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate day of the week for a given date.\n\n### Input:\n(2020, 05, 22)\n\n### Output:\nimport datetime\n\nday, month, year = (2020, 05, 22)\n\nweekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n\ninpDate = datetime.date(year, month, day)\ndayOfWeek = inpDate.weekday()\nprint(weekdays[dayOfWeek])"}
{"instruction":"Generate a function in Python that takes integer numbers as input and prints out their binary, octal and hexadecimal equivalent.","input":"","output":"def decimal_binary_octal_hexadecimal(n):\n    print(\"Binary =\", bin(n))\n    print(\"Octal =\", oct(n))\n    print(\"Hexadecimal =\", hex(n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python that takes integer numbers as input and prints out their binary, octal and hexadecimal equivalent.\n\n### Input:\n\n\n### Output:\ndef decimal_binary_octal_hexadecimal(n):\n    print(\"Binary =\", bin(n))\n    print(\"Octal =\", oct(n))\n    print(\"Hexadecimal =\", hex(n))"}
{"instruction":"Can you create a program Python to find the top ten most frequent words in a text?","input":"text=\"Python is a great language to learn. It is very powerful and easy to learn.\"","output":"import collections\n\n#Splitting the text into words\nwords=text.split()\n\n#Creating a frequency table\nword_freq = collections.Counter(words)\n\n#Printing the top 10 most frequent words\nfor word, frequency in word_freq.most_common(10):\n    print(word, frequency)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you create a program Python to find the top ten most frequent words in a text?\n\n### Input:\ntext=\"Python is a great language to learn. It is very powerful and easy to learn.\"\n\n### Output:\nimport collections\n\n#Splitting the text into words\nwords=text.split()\n\n#Creating a frequency table\nword_freq = collections.Counter(words)\n\n#Printing the top 10 most frequent words\nfor word, frequency in word_freq.most_common(10):\n    print(word, frequency)"}
{"instruction":"Create a Python program to read in 15 integers and print the sum of them.","input":"[1, 5, 9, 0, 2, 4, 7, 8, 6, 10, 3, 11, 12, 13, 14]","output":"def sum_nums(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total\n\nlst = [1, 5, 9, 0, 2, 4, 7, 8, 6, 10, 3, 11, 12, 13, 14]\ntotal = sum_nums(lst)\nprint(total)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to read in 15 integers and print the sum of them.\n\n### Input:\n[1, 5, 9, 0, 2, 4, 7, 8, 6, 10, 3, 11, 12, 13, 14]\n\n### Output:\ndef sum_nums(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total\n\nlst = [1, 5, 9, 0, 2, 4, 7, 8, 6, 10, 3, 11, 12, 13, 14]\ntotal = sum_nums(lst)\nprint(total)"}
{"instruction":"Create a SQLite database in Python, with one table containing the fields \"name\", \"country\" and \"population\".","input":"Not applicable","output":"import sqlite3\n\n# create a connection to the database\nconn = sqlite3.connect(\"example.db\")\n\n# create the database\nc = conn.cursor()\nc.execute(\"create table countries (name text, country text, population int)\")\n\n# commit changes\nconn.commit()\n\n# close the connection\nconn.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a SQLite database in Python, with one table containing the fields \"name\", \"country\" and \"population\".\n\n### Input:\nNot applicable\n\n### Output:\nimport sqlite3\n\n# create a connection to the database\nconn = sqlite3.connect(\"example.db\")\n\n# create the database\nc = conn.cursor()\nc.execute(\"create table countries (name text, country text, population int)\")\n\n# commit changes\nconn.commit()\n\n# close the connection\nconn.close()"}
{"instruction":"Create a Python program for predicting the stock prices using a linear regression model.","input":"stock_prices = [\n  100, 101, 98, 107, 103, 97, 111, 104, 95\n]","output":"import numpy as np \nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt \n\n# define training data\nx = np.array([i for i in range(len(stock_prices))]).reshape(-1,1)\ny = np.array(stock_prices)\n\n# create and train model \nmodel = LinearRegression()\nmodel.fit(x, y)\n\n# make predictions \ny_pred = model.predict(x)\n\n# plot results\nplt.plot(x, y, 'o-')\nplt.plot(x, y_pred, 'x-')\nplt.title('Stock Prices with Linear Regression Model')\nplt.xlabel('Day')\nplt.ylabel('Price')\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for predicting the stock prices using a linear regression model.\n\n### Input:\nstock_prices = [\n  100, 101, 98, 107, 103, 97, 111, 104, 95\n]\n\n### Output:\nimport numpy as np \nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt \n\n# define training data\nx = np.array([i for i in range(len(stock_prices))]).reshape(-1,1)\ny = np.array(stock_prices)\n\n# create and train model \nmodel = LinearRegression()\nmodel.fit(x, y)\n\n# make predictions \ny_pred = model.predict(x)\n\n# plot results\nplt.plot(x, y, 'o-')\nplt.plot(x, y_pred, 'x-')\nplt.title('Stock Prices with Linear Regression Model')\nplt.xlabel('Day')\nplt.ylabel('Price')\nplt.show()"}
{"instruction":"Write a python program that creates and prints a range of numbers.","input":"Start from 0, increment by 2 and end at 10","output":"for number in range(0, 11, 2):\n    print(number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that creates and prints a range of numbers.\n\n### Input:\nStart from 0, increment by 2 and end at 10\n\n### Output:\nfor number in range(0, 11, 2):\n    print(number)"}
{"instruction":"Develop an algorithm in Python to sort a list of numbers using merge sort.","input":"list = [10, 7, 8, 9, 1, 5]","output":"def mergeSort(arr):\n    if len(arr) > 1:\n        mid = len(arr)\/\/2\n        left = arr[:mid]\n        right = arr[mid:]\n        \n        mergeSort(left)\n        mergeSort(right)\n\n        i = 0\n        j = 0\n        k = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to sort a list of numbers using merge sort.\n\n### Input:\nlist = [10, 7, 8, 9, 1, 5]\n\n### Output:\ndef mergeSort(arr):\n    if len(arr) > 1:\n        mid = len(arr)\/\/2\n        left = arr[:mid]\n        right = arr[mid:]\n        \n        mergeSort(left)\n        mergeSort(right)\n\n        i = 0\n        j = 0\n        k = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1"}
{"instruction":"Create a Python program to remove duplicates from an unsorted array.","input":"[1, 1, 2, 2, 3, 4, 5, 5, 6]","output":"original_list = [1, 1, 2, 2, 3, 4, 5, 5, 6]\n\ndef remove_duplicates(lst):\n    new_list = []\n    for item in lst:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list\n\nprint(remove_duplicates(original_list))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to remove duplicates from an unsorted array.\n\n### Input:\n[1, 1, 2, 2, 3, 4, 5, 5, 6]\n\n### Output:\noriginal_list = [1, 1, 2, 2, 3, 4, 5, 5, 6]\n\ndef remove_duplicates(lst):\n    new_list = []\n    for item in lst:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list\n\nprint(remove_duplicates(original_list))"}
{"instruction":"Write a loop to multiply all the numbers from 1 to 5 in Python.","input":"Not applicable","output":"multiply = 1\nfor x in range(1,6):\n multiply = multiply * x\n\nprint(multiply)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a loop to multiply all the numbers from 1 to 5 in Python.\n\n### Input:\nNot applicable\n\n### Output:\nmultiply = 1\nfor x in range(1,6):\n multiply = multiply * x\n\nprint(multiply)"}
{"instruction":"Write a Python script for sorting an array of numbers.","input":"[4, 2, 3, 5, 1]","output":"arr = [4, 2, 3, 5, 1]\narr.sort()\nprint(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script for sorting an array of numbers.\n\n### Input:\n[4, 2, 3, 5, 1]\n\n### Output:\narr = [4, 2, 3, 5, 1]\narr.sort()\nprint(arr)"}
{"instruction":"Add Python logging capabilities to a given Flask application.","input":"Example existing application:\nfrom flask import Flask\napp = Flask(name)\n\n@app.route('\/')\ndef index():\n return 'Hello World!'","output":"import logging\nimport sys\nfrom flask import Flask\n\napp = Flask(name)\n\n# Set up logging\napp.logger.addHandler(logging.StreamHandler(sys.stdout))\napp.logger.setLevel(logging.DEBUG)\n\n@app.route('\/')\ndef index():\n app.logger.info('Processing request to index')\n return 'Hello World!'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAdd Python logging capabilities to a given Flask application.\n\n### Input:\nExample existing application:\nfrom flask import Flask\napp = Flask(name)\n\n@app.route('\/')\ndef index():\n return 'Hello World!'\n\n### Output:\nimport logging\nimport sys\nfrom flask import Flask\n\napp = Flask(name)\n\n# Set up logging\napp.logger.addHandler(logging.StreamHandler(sys.stdout))\napp.logger.setLevel(logging.DEBUG)\n\n@app.route('\/')\ndef index():\n app.logger.info('Processing request to index')\n return 'Hello World!'"}
{"instruction":"Create a Python script that crawls a given URL and prints out all of the links within it.","input":"","output":"import requests\nfrom bs4 import BeautifulSoup\n\ndef get_url_links(url):\n    # query the website and return the html to the variable\n    page = requests.get(url)\n    \n    # parse the html using beautiful soup and store in variable `soup`\n    soup = BeautifulSoup(page.content, 'html.parser')\n    \n    # Take out the <div> of name and get its value\n    links = soup.find_all('a')\n    for link in links:\n        print(link.get('href'))\n\nget_url_links('https:\/\/www.example.com\/')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that crawls a given URL and prints out all of the links within it.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef get_url_links(url):\n    # query the website and return the html to the variable\n    page = requests.get(url)\n    \n    # parse the html using beautiful soup and store in variable `soup`\n    soup = BeautifulSoup(page.content, 'html.parser')\n    \n    # Take out the <div> of name and get its value\n    links = soup.find_all('a')\n    for link in links:\n        print(link.get('href'))\n\nget_url_links('https:\/\/www.example.com\/')"}
{"instruction":"Design a class to represent a car in the Python programming language.","input":"","output":"class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n\n    def get_make(self):\n        return self.make\n\n    def get_model(self):\n        return self.model\n\n    def get_year(self):\n        return self.year\n\n    def set_make(self, make):\n        self.make = make\n\n    def set_model(self, model):\n        self.model = model\n\n    def set_year(self, year):\n        self.year = year","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class to represent a car in the Python programming language.\n\n### Input:\n\n\n### Output:\nclass Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n\n    def get_make(self):\n        return self.make\n\n    def get_model(self):\n        return self.model\n\n    def get_year(self):\n        return self.year\n\n    def set_make(self, make):\n        self.make = make\n\n    def set_model(self, model):\n        self.model = model\n\n    def set_year(self, year):\n        self.year = year"}
{"instruction":"Write a Python program to classify the given words as valid or invalid.","input":"word_list = [\"code\", \"data\", \"text\", \"test\"]","output":"word_list = [\"code\", \"data\", \"text\", \"test\"]\n\ndef classify_words(word_list):\n    valid_words = []\n    invalid_words = []\n    for word in word_list:\n        if len(word) >= 4:\n            valid_words.append(word)\n        else:\n            invalid_words.append(word)\n    return valid_words, invalid_words\n\nvalid_words, invalid_words = classify_words(word_list)\n\nprint(\"Valid Words:\", valid_words)\nprint(\"Invalid Words:\", invalid_words)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify the given words as valid or invalid.\n\n### Input:\nword_list = [\"code\", \"data\", \"text\", \"test\"]\n\n### Output:\nword_list = [\"code\", \"data\", \"text\", \"test\"]\n\ndef classify_words(word_list):\n    valid_words = []\n    invalid_words = []\n    for word in word_list:\n        if len(word) >= 4:\n            valid_words.append(word)\n        else:\n            invalid_words.append(word)\n    return valid_words, invalid_words\n\nvalid_words, invalid_words = classify_words(word_list)\n\nprint(\"Valid Words:\", valid_words)\nprint(\"Invalid Words:\", invalid_words)"}
{"instruction":"Write an algorithm in Python to calendarify the dates in the following array","input":"dates = [423, 198, 720, 930, 505]","output":"def calendarify(dates):\n    calendar = []\n    for date in dates:\n        day = date % 100\n        month = date \/\/ 100\n        calendar.append((day, month))\n    return calendar\n  \ncalendarify(dates)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to calendarify the dates in the following array\n\n### Input:\ndates = [423, 198, 720, 930, 505]\n\n### Output:\ndef calendarify(dates):\n    calendar = []\n    for date in dates:\n        day = date % 100\n        month = date \/\/ 100\n        calendar.append((day, month))\n    return calendar\n  \ncalendarify(dates)"}
{"instruction":"Write a Python program that sorts a list of numbers using the Merge Sort algorithm.","input":"Not applicable","output":"def merge_sort(lst):\n # Base case: if lst has 0 or 1 element, it is already sorted\n if len(lst) <= 1:\n  return lst\n\n # Split the list into two halves\n mid = len(lst) \/\/ 2\n left_half = merge_sort(lst[:mid])\n right_half = merge_sort(lst[mid:])\n\n # Merge the sorted halves\n return merge(left_half, right_half)\n\ndef merge(left_half, right_half):\n # Create an empty list\n merged_list = []\n\n # Each loop iteration, take the smallest remaining element in each list\n while left_half and right_half:\n  if left_half[0] <= right_half[0]:\n   merged_list.append(left_half.pop(0))\n  else:\n   merged_list.append(right_half.pop(0))\n\n # Add the remainder of the left or right half\n merged_list.extend(left_half)\n merged_list.extend(right_half)\n\n # Return the merged list\n return merged_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that sorts a list of numbers using the Merge Sort algorithm.\n\n### Input:\nNot applicable\n\n### Output:\ndef merge_sort(lst):\n # Base case: if lst has 0 or 1 element, it is already sorted\n if len(lst) <= 1:\n  return lst\n\n # Split the list into two halves\n mid = len(lst) \/\/ 2\n left_half = merge_sort(lst[:mid])\n right_half = merge_sort(lst[mid:])\n\n # Merge the sorted halves\n return merge(left_half, right_half)\n\ndef merge(left_half, right_half):\n # Create an empty list\n merged_list = []\n\n # Each loop iteration, take the smallest remaining element in each list\n while left_half and right_half:\n  if left_half[0] <= right_half[0]:\n   merged_list.append(left_half.pop(0))\n  else:\n   merged_list.append(right_half.pop(0))\n\n # Add the remainder of the left or right half\n merged_list.extend(left_half)\n merged_list.extend(right_half)\n\n # Return the merged list\n return merged_list"}
{"instruction":"Using Python, create a dictionary with the list of elements in \"a\" and as the value, the list of elements in \"b\".","input":"a = [1, 2, 3, 4]\nb = [5, 6, 7, 8]","output":"dict_1 = {1: [5, 6, 7, 8], 2: [5, 6, 7, 8], 3: [5, 6, 7, 8], 4: [5, 6, 7, 8]}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, create a dictionary with the list of elements in \"a\" and as the value, the list of elements in \"b\".\n\n### Input:\na = [1, 2, 3, 4]\nb = [5, 6, 7, 8]\n\n### Output:\ndict_1 = {1: [5, 6, 7, 8], 2: [5, 6, 7, 8], 3: [5, 6, 7, 8], 4: [5, 6, 7, 8]}"}
{"instruction":"Use python to create a function to calculate the mean of three numbers.","input":"","output":"def mean_of_three(num1, num2, num3):\n    return (num1 + num2 + num3) \/ 3\n\nif __name__ == '__main__':\n    print(mean_of_three(2, 4, 6))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse python to create a function to calculate the mean of three numbers.\n\n### Input:\n\n\n### Output:\ndef mean_of_three(num1, num2, num3):\n    return (num1 + num2 + num3) \/ 3\n\nif __name__ == '__main__':\n    print(mean_of_three(2, 4, 6))"}
{"instruction":"Create a Python script to evaluate a given polynomial equation.","input":"2x2 + 3x + 4","output":"def evaluate_polynomial(eqn):\n  x = int(input(\"Enter the value of x: \"))\n  result = 0\n  for i in range(len(eqn)):\n    elem = eqn[i]\n    if elem[-1] == 'x':\n      coefficient = int(elem[:-1])\n      if i == 0:\n        result += coefficient * (x ** 2)\n      elif i == 1:\n        result += coefficient * x\n      else:\n        result += coefficient\n    else:\n      result += int(elem)\n\n  return result\n\nprint(evaluate_polynomial(\"2x2 + 3x + 4\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to evaluate a given polynomial equation.\n\n### Input:\n2x2 + 3x + 4\n\n### Output:\ndef evaluate_polynomial(eqn):\n  x = int(input(\"Enter the value of x: \"))\n  result = 0\n  for i in range(len(eqn)):\n    elem = eqn[i]\n    if elem[-1] == 'x':\n      coefficient = int(elem[:-1])\n      if i == 0:\n        result += coefficient * (x ** 2)\n      elif i == 1:\n        result += coefficient * x\n      else:\n        result += coefficient\n    else:\n      result += int(elem)\n\n  return result\n\nprint(evaluate_polynomial(\"2x2 + 3x + 4\"))"}
{"instruction":"Create a Python script that takes in an array of numbers and returns the mode.","input":"[1, 2, 5, 2, 3, 2, 5, 2]","output":"def mode(list):\n    count_dict = {}\n    for item in list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n            \n    max_count = 0\n    mode = 0\n    for key in count_dict.keys():\n        if count_dict[key] > max_count:\n            max_count = count_dict[key]\n            mode = key\n            \n    return mode\n    \nnumbers = [1, 2, 5, 2, 3, 2, 5, 2]\nprint(mode(numbers))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes in an array of numbers and returns the mode.\n\n### Input:\n[1, 2, 5, 2, 3, 2, 5, 2]\n\n### Output:\ndef mode(list):\n    count_dict = {}\n    for item in list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n            \n    max_count = 0\n    mode = 0\n    for key in count_dict.keys():\n        if count_dict[key] > max_count:\n            max_count = count_dict[key]\n            mode = key\n            \n    return mode\n    \nnumbers = [1, 2, 5, 2, 3, 2, 5, 2]\nprint(mode(numbers))"}
{"instruction":"Generate a list of 50 random numbers between 1 and 100 in Python.","input":"","output":"import random\nrandom_number_list = random.sample(range(1, 100), 50)\nprint(random_number_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of 50 random numbers between 1 and 100 in Python.\n\n### Input:\n\n\n### Output:\nimport random\nrandom_number_list = random.sample(range(1, 100), 50)\nprint(random_number_list)"}
{"instruction":"Develop Python code to calculate the Average of two numbers.","input":"2, 3","output":"def average(a, b):\n    return (a + b) \/ 2\n\nresult = average(2, 3)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop Python code to calculate the Average of two numbers.\n\n### Input:\n2, 3\n\n### Output:\ndef average(a, b):\n    return (a + b) \/ 2\n\nresult = average(2, 3)\nprint(result)"}
{"instruction":"Implement a genetic algorithm in Python to optimize a cost function.","input":"Not applicable","output":"import random\n\ndef cost(x):\n    # compute the cost of x\n\ndef generate_population(size):\n    # generate a population of size 'size'\n\ndef mutation(x):\n    # randomize a single gene of x\n\ndef selection(population):\n    # select two elements from the population for crossover\n\ndef crossover(x1, x2):\n    # produce two offsprings using crossover\n\n# initialize population\npopulation = generate_population(50)\n\n# repeat until convergence (or until a maximum number of iterations is reached)\nwhile True:\n    # select two parents\n    x1, x2 = selection(population)\n      \n    # produce two offsprings by crossover\n    offspring1, offspring2 = crossover(x1, x2)\n          \n    # mutation\n    offspring1 = mutation(offspring1)\n    offspring2 = mutation(offspring2) \n          \n    # add offsprings to population\n    population.append(offspring1)\n    population.append(offspring2)\n\n# select best solution\nbest_x = min(population, key=cost)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a genetic algorithm in Python to optimize a cost function.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\ndef cost(x):\n    # compute the cost of x\n\ndef generate_population(size):\n    # generate a population of size 'size'\n\ndef mutation(x):\n    # randomize a single gene of x\n\ndef selection(population):\n    # select two elements from the population for crossover\n\ndef crossover(x1, x2):\n    # produce two offsprings using crossover\n\n# initialize population\npopulation = generate_population(50)\n\n# repeat until convergence (or until a maximum number of iterations is reached)\nwhile True:\n    # select two parents\n    x1, x2 = selection(population)\n      \n    # produce two offsprings by crossover\n    offspring1, offspring2 = crossover(x1, x2)\n          \n    # mutation\n    offspring1 = mutation(offspring1)\n    offspring2 = mutation(offspring2) \n          \n    # add offsprings to population\n    population.append(offspring1)\n    population.append(offspring2)\n\n# select best solution\nbest_x = min(population, key=cost)"}
{"instruction":"Create a python script to convert a string to a list containing the ASCII values of each character in the string.","input":"\"Hello World!\"","output":"def string_to_ascii_list(string):\n    ascii_list = []\n    for char in string:\n        ascii_list.append(ord(char))\n    return ascii_list\n\nprint(string_to_ascii_list(\"Hello World!\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to convert a string to a list containing the ASCII values of each character in the string.\n\n### Input:\n\"Hello World!\"\n\n### Output:\ndef string_to_ascii_list(string):\n    ascii_list = []\n    for char in string:\n        ascii_list.append(ord(char))\n    return ascii_list\n\nprint(string_to_ascii_list(\"Hello World!\"))"}
{"instruction":"Develop a static analysis program in Python code to detect programming errors.","input":"","output":"import ast\n\nclass StaticAnalysis:\n    def detect_errors(self, code):\n        tree = ast.parse(code)\n        errors = []\n        for node in ast.walk(tree):\n            if isinstance(node, ast.FunctionDef):\n                errors.extend(self.check_function_def(node))\n            elif isinstance(node, ast.Call):\n                errors.extend(self.check_function_call(node))\n        return errors\n\n    def check_function_def(self, function):\n        errors = []\n        if not function.args.args:\n            errors.append(('No parameters passed to function', function.lineno))\n        return errors\n\n    def check_function_call(self, call):\n        errors = []\n        if not call.args:\n            errors.append(('No arguments passed to function call', call.lineno))\n        return errors","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a static analysis program in Python code to detect programming errors.\n\n### Input:\n\n\n### Output:\nimport ast\n\nclass StaticAnalysis:\n    def detect_errors(self, code):\n        tree = ast.parse(code)\n        errors = []\n        for node in ast.walk(tree):\n            if isinstance(node, ast.FunctionDef):\n                errors.extend(self.check_function_def(node))\n            elif isinstance(node, ast.Call):\n                errors.extend(self.check_function_call(node))\n        return errors\n\n    def check_function_def(self, function):\n        errors = []\n        if not function.args.args:\n            errors.append(('No parameters passed to function', function.lineno))\n        return errors\n\n    def check_function_call(self, call):\n        errors = []\n        if not call.args:\n            errors.append(('No arguments passed to function call', call.lineno))\n        return errors"}
{"instruction":"Create an algorithm in Python to search for an element in a sorted array.","input":"arr[] = {2, 3, 5, 6, 8, 11, 14, 18}","output":"def binary_search(arr, low, high, x): \n    if high >= low:  \n        mid = (low + high) \/\/ 2\n        if arr[mid] == x: \n            return mid \n\n        elif arr[mid] > x: \n            return binary_search(arr, low, mid - 1, x) \n        else: \n            return binary_search(arr, mid + 1, high, x) \n    else: \n        return -1\n\narr = [2, 3, 5, 6, 8, 11, 14, 18]\nx = 11\nres = binary_search(arr, 0, len(arr)-1, x) \nif res != -1: \n    print(\"Element is present at index\", str(res)) \nelse: \n    print(\"Element is not present in array\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to search for an element in a sorted array.\n\n### Input:\narr[] = {2, 3, 5, 6, 8, 11, 14, 18}\n\n### Output:\ndef binary_search(arr, low, high, x): \n    if high >= low:  \n        mid = (low + high) \/\/ 2\n        if arr[mid] == x: \n            return mid \n\n        elif arr[mid] > x: \n            return binary_search(arr, low, mid - 1, x) \n        else: \n            return binary_search(arr, mid + 1, high, x) \n    else: \n        return -1\n\narr = [2, 3, 5, 6, 8, 11, 14, 18]\nx = 11\nres = binary_search(arr, 0, len(arr)-1, x) \nif res != -1: \n    print(\"Element is present at index\", str(res)) \nelse: \n    print(\"Element is not present in array\")"}
{"instruction":"Create a Python program that takes a sentence and converts it to Morse code.","input":"Not applicable","output":"MORSE_CODE = {\n 'A': '.-', 'B': '-...',\n 'C': '-.-.', 'D': '-..',\n 'E': '.', 'F': '..-.',\n 'G': '--.', 'H': '....',\n 'I': '..', 'J': '.---',\n 'K': '-.-', 'L': '.-..',\n 'M': '--', 'N': '-.',\n 'O': '---', 'P': '.--.',\n 'Q': '--.-', 'R': '.-.',\n 'S': '...', 'T': '-',\n 'U': '..-', 'V': '...-',\n 'W': '.--', 'X': '-..-',\n 'Y': '-.--', 'Z': '--..',\n '0': '-----', '1': '.----',\n '2': '..---', '3': '...--',\n '4': '....-', '5': '.....',\n '6': '-....', '7': '--...',\n '8': '---..', '9': '----.',\n ' ': ' ', '.': '.-.-.-',\n ',': '--..--', '?': '..--..',\n '\/': '-..-.', '-': '-....-',\n '(': '-.--.-', ')': '-.--.-'\n}\n\ndef encode(message):\n code = ''\n for letter in message:\n  code += MORSE_CODE[letter.upper()] + ' '\n \n return code\n\nprint(encode(\"Hello world\"))\n# Output: .... . .-.. .-.. ---  .-- --- .-. .-.. -..","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a sentence and converts it to Morse code.\n\n### Input:\nNot applicable\n\n### Output:\nMORSE_CODE = {\n 'A': '.-', 'B': '-...',\n 'C': '-.-.', 'D': '-..',\n 'E': '.', 'F': '..-.',\n 'G': '--.', 'H': '....',\n 'I': '..', 'J': '.---',\n 'K': '-.-', 'L': '.-..',\n 'M': '--', 'N': '-.',\n 'O': '---', 'P': '.--.',\n 'Q': '--.-', 'R': '.-.',\n 'S': '...', 'T': '-',\n 'U': '..-', 'V': '...-',\n 'W': '.--', 'X': '-..-',\n 'Y': '-.--', 'Z': '--..',\n '0': '-----', '1': '.----',\n '2': '..---', '3': '...--',\n '4': '....-', '5': '.....',\n '6': '-....', '7': '--...',\n '8': '---..', '9': '----.',\n ' ': ' ', '.': '.-.-.-',\n ',': '--..--', '?': '..--..',\n '\/': '-..-.', '-': '-....-',\n '(': '-.--.-', ')': '-.--.-'\n}\n\ndef encode(message):\n code = ''\n for letter in message:\n  code += MORSE_CODE[letter.upper()] + ' '\n \n return code\n\nprint(encode(\"Hello world\"))\n# Output: .... . .-.. .-.. ---  .-- --- .-. .-.. -.."}
{"instruction":"Design a function to calculate the hamming distance of two strings in Python.","input":"str1 = \"karolin\"\nstr2 = \"kathrin\"","output":"def hamming_distance(str1, str2):\n    \"\"\"Calculates the Hamming distance between two strings.\n    Arguments:\n        str1 (str): The first string.\n        str2 (str): The second string.\n    Returns:\n        (int): The Hamming distance.\n    \"\"\"\n    if len(str1) != len(str2):\n        raise ValueError(\"Strings must have the same length\")\n\n    distance = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            distance += 1\n            \n    return distance","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function to calculate the hamming distance of two strings in Python.\n\n### Input:\nstr1 = \"karolin\"\nstr2 = \"kathrin\"\n\n### Output:\ndef hamming_distance(str1, str2):\n    \"\"\"Calculates the Hamming distance between two strings.\n    Arguments:\n        str1 (str): The first string.\n        str2 (str): The second string.\n    Returns:\n        (int): The Hamming distance.\n    \"\"\"\n    if len(str1) != len(str2):\n        raise ValueError(\"Strings must have the same length\")\n\n    distance = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            distance += 1\n            \n    return distance"}
{"instruction":"Write a Python program to filter out values from a given list based on a certain condition.","input":"[7, 6, 5, 4, 3], condition: x > 5","output":"def filter_values(lst, condition):\n    filtered_list = []\n    for x in lst:\n        if eval(condition):\n            filtered_list.append(x)\n    return filtered_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to filter out values from a given list based on a certain condition.\n\n### Input:\n[7, 6, 5, 4, 3], condition: x > 5\n\n### Output:\ndef filter_values(lst, condition):\n    filtered_list = []\n    for x in lst:\n        if eval(condition):\n            filtered_list.append(x)\n    return filtered_list"}
{"instruction":"Create a text-based adventure game in Python where the user must navigate through a world of obstacles.","input":"The user is in a dark dungeon and must find the exit.","output":"print(\"You find yourself in a dark dungeon with no apparent exit. What do you do?\nEnter 'walk left', 'walk right', 'walk straight' or 'look around'\")\n\nmove = input()\n\nif move == 'walk left':\n    print(\"You walk to the left and find a door with a lock. What do you do?\")\nelif move == 'walk right':\n    print(\"You walk to the right and find a secret passage leading through the wall. What do you do?\")\nelif move == 'walk straight':\n    print(\"You walk straight and come to a dead end. What do you do?\")\nelif move == 'look around':\n    print(\"You look around and see a lever on the wall. What do you do?\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a text-based adventure game in Python where the user must navigate through a world of obstacles.\n\n### Input:\nThe user is in a dark dungeon and must find the exit.\n\n### Output:\nprint(\"You find yourself in a dark dungeon with no apparent exit. What do you do?\nEnter 'walk left', 'walk right', 'walk straight' or 'look around'\")\n\nmove = input()\n\nif move == 'walk left':\n    print(\"You walk to the left and find a door with a lock. What do you do?\")\nelif move == 'walk right':\n    print(\"You walk to the right and find a secret passage leading through the wall. What do you do?\")\nelif move == 'walk straight':\n    print(\"You walk straight and come to a dead end. What do you do?\")\nelif move == 'look around':\n    print(\"You look around and see a lever on the wall. What do you do?\")"}
{"instruction":"Update the existing code in the following Python program to generate a list of prime numbers in a given range.","input":"","output":"def generate_prime_numbers(start, end):\n    for i in range(start, end + 1):\n        is_prime = True\n        # check for all numbers from 2 to (i - 1)\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            print(i, end=\" \")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUpdate the existing code in the following Python program to generate a list of prime numbers in a given range.\n\n### Input:\n\n\n### Output:\ndef generate_prime_numbers(start, end):\n    for i in range(start, end + 1):\n        is_prime = True\n        # check for all numbers from 2 to (i - 1)\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            print(i, end=\" \")"}
{"instruction":"Implement a function in Python to remove all instances of an item from a list.","input":"[1, 2, 1, 3, 4, 1], 1","output":"def remove_item(list, item):\n    while item in list:\n        list.remove(item)\n    return list\n\nresult = remove_item([1, 2, 1, 3, 4, 1], 1)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python to remove all instances of an item from a list.\n\n### Input:\n[1, 2, 1, 3, 4, 1], 1\n\n### Output:\ndef remove_item(list, item):\n    while item in list:\n        list.remove(item)\n    return list\n\nresult = remove_item([1, 2, 1, 3, 4, 1], 1)\nprint(result)"}
{"instruction":"Implement a Python program to generate randon uniform numbers. The program should have two input parameters a lower bound and an upper bound.","input":"Lower bound: 10, Upper bound: 20","output":"import random\n\n# generates a random number between lower and upper\ndef generateRandomNumber(lower, upper):\n r = random.uniform(lower, upper)\n return r\n\n# driver program\nif __name__ == \"__main__\":\n lower = 10\n upper = 20\n print(generateRandomNumber(lower, upper))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python program to generate randon uniform numbers. The program should have two input parameters a lower bound and an upper bound.\n\n### Input:\nLower bound: 10, Upper bound: 20\n\n### Output:\nimport random\n\n# generates a random number between lower and upper\ndef generateRandomNumber(lower, upper):\n r = random.uniform(lower, upper)\n return r\n\n# driver program\nif __name__ == \"__main__\":\n lower = 10\n upper = 20\n print(generateRandomNumber(lower, upper))"}
{"instruction":"Develop an AI chatbot in Python that greets a user and helps them with basic tasks like booking tickets and hotel rooms.","input":"","output":"\"\"\"\nCreating an AI Chatbot in Python\n\"\"\"\n\nimport re\nimport random\n\nbot_greetings = [\"Hi!\", \"Hey there!\", \"Good morning!\", \"Good afternoon!\"]\n\n# Define a function that responds to a user's message\ndef respond_to_message(message):\n    # If the message is a greeting, then return a random greeting response\n    if re.search('(hey|hi|hello|morning|afternoon)', message):\n        return random.choice(bot_greetings)\n    # For other messages, you can provide a response that contains the appropriate task instructions\n    elif re.search('(ticket|booking|reservation)', message):\n        return \"To book a ticket, you can enter your travel details here .\"\n    elif re.search('(hotel|accomodation)', message):\n        return \"To book a hotel room, you can enter your dates and other details here .\"\n    else:\n        return \"I don't understand your query. Please enter a valid input!\"\n  \nif __name__ == '__main__':\n    user_message = input(\"User: \")\n    bot_response = respond_to_message(user_message)\n    print(\"Bot:\", bot_response)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI chatbot in Python that greets a user and helps them with basic tasks like booking tickets and hotel rooms.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreating an AI Chatbot in Python\n\"\"\"\n\nimport re\nimport random\n\nbot_greetings = [\"Hi!\", \"Hey there!\", \"Good morning!\", \"Good afternoon!\"]\n\n# Define a function that responds to a user's message\ndef respond_to_message(message):\n    # If the message is a greeting, then return a random greeting response\n    if re.search('(hey|hi|hello|morning|afternoon)', message):\n        return random.choice(bot_greetings)\n    # For other messages, you can provide a response that contains the appropriate task instructions\n    elif re.search('(ticket|booking|reservation)', message):\n        return \"To book a ticket, you can enter your travel details here .\"\n    elif re.search('(hotel|accomodation)', message):\n        return \"To book a hotel room, you can enter your dates and other details here .\"\n    else:\n        return \"I don't understand your query. Please enter a valid input!\"\n  \nif __name__ == '__main__':\n    user_message = input(\"User: \")\n    bot_response = respond_to_message(user_message)\n    print(\"Bot:\", bot_response)"}
{"instruction":"Create a Python script to make an API request to an online store's API. The script should query for all available products, and print a summary of the results.","input":"Not applicable","output":"import requests\n \n# Make an API request\nurl = 'https:\/\/example.com\/api\/products'\ndata = requests.get(url).json()\n \n# Show results\nprint('Available Products')\nfor item in data['products']:\n    print(f'{item[\"name\"]} - {item[\"price\"]}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to make an API request to an online store's API. The script should query for all available products, and print a summary of the results.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\n \n# Make an API request\nurl = 'https:\/\/example.com\/api\/products'\ndata = requests.get(url).json()\n \n# Show results\nprint('Available Products')\nfor item in data['products']:\n    print(f'{item[\"name\"]} - {item[\"price\"]}')"}
{"instruction":"Can you create an optimization algorithm in Python to minimize the following function?","input":"f(x) = x^4 + 7x^3 + 6x^2 - 6x","output":"import numpy as np\n\ndef minimize(x):\n  return np.power(x,4) + 7 * np.power(x,3) + 6 * np.power(x,2) - 6 * x\n\ndef optimize(f, x):\n  best_x = x \n  best_val = f(x)\n\n  while True:\n    new_x = x - 1e-3 \n    new_val = f(new_x)\n    if new_val < best_val: \n      best_x = new_x \n      best_val = new_val \n      x = new_x\n    else:\n      break\n  return best_x, best_val\n\nx = 0 \nx_min, val_min = optimize(minimize, x)\nprint(f'Minimum of function \"f(x)\" is at x={x_min}, with value {val_min}.')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you create an optimization algorithm in Python to minimize the following function?\n\n### Input:\nf(x) = x^4 + 7x^3 + 6x^2 - 6x\n\n### Output:\nimport numpy as np\n\ndef minimize(x):\n  return np.power(x,4) + 7 * np.power(x,3) + 6 * np.power(x,2) - 6 * x\n\ndef optimize(f, x):\n  best_x = x \n  best_val = f(x)\n\n  while True:\n    new_x = x - 1e-3 \n    new_val = f(new_x)\n    if new_val < best_val: \n      best_x = new_x \n      best_val = new_val \n      x = new_x\n    else:\n      break\n  return best_x, best_val\n\nx = 0 \nx_min, val_min = optimize(minimize, x)\nprint(f'Minimum of function \"f(x)\" is at x={x_min}, with value {val_min}.')"}
{"instruction":"Create a Python program that takes two strings as input and returns a boolean indicating if the two strings are permutations of each other or not.","input":"s1 = \"hello\", s2 = \"lloeh\"","output":"def is_permutation(s1, s2):\n    s1 = s1.lower() # Convert both strings to lowercase\n    s2 = s2.lower()\n    if len(s1) != len(s2):\n        return False # If the lengths are not equal, the strings must not be permutations\n    for c in s1:\n        if c not in s2: # Check if every character in s1 appears in s2\n            return False\n    return True\n\nresult = is_permutation(\"hello\", \"lloeh\")\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes two strings as input and returns a boolean indicating if the two strings are permutations of each other or not.\n\n### Input:\ns1 = \"hello\", s2 = \"lloeh\"\n\n### Output:\ndef is_permutation(s1, s2):\n    s1 = s1.lower() # Convert both strings to lowercase\n    s2 = s2.lower()\n    if len(s1) != len(s2):\n        return False # If the lengths are not equal, the strings must not be permutations\n    for c in s1:\n        if c not in s2: # Check if every character in s1 appears in s2\n            return False\n    return True\n\nresult = is_permutation(\"hello\", \"lloeh\")\nprint(result)"}
{"instruction":"Create a function in Python to calculate the total of all the characters in a given input string.","input":"string: 'Hello World!'","output":"def char_total(string):\ntotal = 0\n\nfor char in string:\n total += ord(char)\n\nreturn total\n\nprint(char_total('Hello World!')) \n# Output: 1116","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to calculate the total of all the characters in a given input string.\n\n### Input:\nstring: 'Hello World!'\n\n### Output:\ndef char_total(string):\ntotal = 0\n\nfor char in string:\n total += ord(char)\n\nreturn total\n\nprint(char_total('Hello World!')) \n# Output: 1116"}
{"instruction":"Write a Python class to create objects that represent a movie and its properties.","input":"","output":"class Movie:\n  def __init__(self, title, description, rating):\n    self.title = title\n    self.description = description\n    self.rating = rating\n \n  def print_info(self):\n    print('Title: {}'.format(self.title))\n    print('Description: {}'.format(self.description))\n    print('Rating: {}'.format(self.rating))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class to create objects that represent a movie and its properties.\n\n### Input:\n\n\n### Output:\nclass Movie:\n  def __init__(self, title, description, rating):\n    self.title = title\n    self.description = description\n    self.rating = rating\n \n  def print_info(self):\n    print('Title: {}'.format(self.title))\n    print('Description: {}'.format(self.description))\n    print('Rating: {}'.format(self.rating))"}
{"instruction":"Given a list of integers, write a Python program to find the largest and second largest numbers in the list.","input":"[10, 20, 5, 45, 25]","output":"def find_largest_and_second_largest(nums):\n    max1 = float('-inf')\n    max2 = float('-inf')\n    for n in nums:\n        if n > max1:\n            max2 = max1\n            max1 = n\n        elif n > max2 and n != max1:\n            max2 = n\n    return max1, max2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integers, write a Python program to find the largest and second largest numbers in the list.\n\n### Input:\n[10, 20, 5, 45, 25]\n\n### Output:\ndef find_largest_and_second_largest(nums):\n    max1 = float('-inf')\n    max2 = float('-inf')\n    for n in nums:\n        if n > max1:\n            max2 = max1\n            max1 = n\n        elif n > max2 and n != max1:\n            max2 = n\n    return max1, max2"}
{"instruction":"Create a Python script that makes an HTTP request to retrieve data and convert it from JSON to a pandas DataFrame.","input":"Not applicable","output":"import requests\nimport pandas as pd\n\nurl = 'https:\/\/example.com\/api\/data'\n\n# Make the request and get the response\nresponse = requests.get(url)\n\n# Convert the JSON response to a python dictionary\ndata = response.json()\n\n# Convert the dictionary to a pandas DataFrame\ndf = pd.DataFrame(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that makes an HTTP request to retrieve data and convert it from JSON to a pandas DataFrame.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nimport pandas as pd\n\nurl = 'https:\/\/example.com\/api\/data'\n\n# Make the request and get the response\nresponse = requests.get(url)\n\n# Convert the JSON response to a python dictionary\ndata = response.json()\n\n# Convert the dictionary to a pandas DataFrame\ndf = pd.DataFrame(data)"}
{"instruction":"Translate the following pseudocode into Python:","input":"IF number > 0\n    Print \"positive\"\nELSE\n    Print \"negative\"","output":"if number > 0:\n    print(\"positive\")\nelse:\n    print(\"negative\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTranslate the following pseudocode into Python:\n\n### Input:\nIF number > 0\n    Print \"positive\"\nELSE\n    Print \"negative\"\n\n### Output:\nif number > 0:\n    print(\"positive\")\nelse:\n    print(\"negative\")"}
{"instruction":"Create a new Python script that will print out the following statement: \"Hello, World!\"","input":"","output":"print(\"Hello, World!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a new Python script that will print out the following statement: \"Hello, World!\"\n\n### Input:\n\n\n### Output:\nprint(\"Hello, World!\")"}
{"instruction":"Create an HTML table with a two columns using Python.","input":"","output":"from lxml import etree\n \n# Create the root element\nroot = etree.Element('table')\n \n# Create two columns\ntable_elem = etree.SubElement(root, 'column')\ntable_elem.set('name', 'FirstName')\ntable_elem = etree.SubElement(root, 'column')\ntable_elem.set('name', 'LastName')\n \n# Print the whole XML\nprint(etree.tostring(root, pretty_print=True).decode())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an HTML table with a two columns using Python.\n\n### Input:\n\n\n### Output:\nfrom lxml import etree\n \n# Create the root element\nroot = etree.Element('table')\n \n# Create two columns\ntable_elem = etree.SubElement(root, 'column')\ntable_elem.set('name', 'FirstName')\ntable_elem = etree.SubElement(root, 'column')\ntable_elem.set('name', 'LastName')\n \n# Print the whole XML\nprint(etree.tostring(root, pretty_print=True).decode())"}
{"instruction":"Given the following data, generate a Python program that sorts the data in ascending order.","input":"[5, 3, 10, 4, 1]","output":"def sort_list(list_input):\n    sorted_list = sorted(list_input)\n    return sorted_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven the following data, generate a Python program that sorts the data in ascending order.\n\n### Input:\n[5, 3, 10, 4, 1]\n\n### Output:\ndef sort_list(list_input):\n    sorted_list = sorted(list_input)\n    return sorted_list"}
{"instruction":"Generate a machine learning model using Python and Scikit-Learn to predict a person\u2019s age based on height and weight.","input":"Not applicable","output":"import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Training data\nx = np.array([[1.4, 60],[1.8, 70],[2.2, 80],[2.5, 90]])\ny = np.array([12, 18, 24, 30])\n\n# Create model\nmodel = LinearRegression()\nmodel.fit(x, y)\n\n# Predicted age for height 1.6m and weight 65kg\nmodel.predict([[1.6, 65]]) # output: [16.7]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a machine learning model using Python and Scikit-Learn to predict a person\u2019s age based on height and weight.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Training data\nx = np.array([[1.4, 60],[1.8, 70],[2.2, 80],[2.5, 90]])\ny = np.array([12, 18, 24, 30])\n\n# Create model\nmodel = LinearRegression()\nmodel.fit(x, y)\n\n# Predicted age for height 1.6m and weight 65kg\nmodel.predict([[1.6, 65]]) # output: [16.7]"}
{"instruction":"Write a Python program to simulate a random walk and calculate the position of the walker after N steps.","input":"","output":"import random\n\ndef random_walk(n_steps):\n    x = 0\n    y = 0\n\n    for _ in range(n_steps):\n        direction = random.choice([-1, 1])\n        x += direction * random.randint(1, 10)\n        y += direction * random.randint(1, 10)\n\n    return x, y","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to simulate a random walk and calculate the position of the walker after N steps.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef random_walk(n_steps):\n    x = 0\n    y = 0\n\n    for _ in range(n_steps):\n        direction = random.choice([-1, 1])\n        x += direction * random.randint(1, 10)\n        y += direction * random.randint(1, 10)\n\n    return x, y"}
{"instruction":"Design a data structure in Python for a deck of cards.","input":"","output":"class Card:\n    suits = (\"Hearts\", \"Diamonds\", \"Spades\", \"Clubs\")\n    values = (\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \n              \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\")\n    \n    def __init__(self, suit, value):\n        self.suit = suit\n        self.value = value\n    \n    def __repr__(self):\n        return f\"{self.value} of {self.suit}\"\n\nclass Deck:\n    def __init__(self):\n        self.cards = [Card(suit, value) for suit in Card.suits\n                                       for value in Card.values]\n    \n    def __repr__(self):\n        return f\"Deck of {self.count()} cards\"\n    \n    def count(self):\n        return len(self.cards)\n    \n    def _deal(self, num):\n        count = self.count()\n        actual = min([count,num])\n        if count == 0:\n            raise ValueError(\"All cards have been dealt\")\n        else:\n            cards = self.cards[-actual:]\n            self.cards = self.cards[:-actual]\n            return cards\n    \n    def deal_card(self):\n        return self._deal(1)[0]\n    \n    def deal_hand(self, hand_size):\n        return self._deal(hand_size)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a data structure in Python for a deck of cards.\n\n### Input:\n\n\n### Output:\nclass Card:\n    suits = (\"Hearts\", \"Diamonds\", \"Spades\", \"Clubs\")\n    values = (\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \n              \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\")\n    \n    def __init__(self, suit, value):\n        self.suit = suit\n        self.value = value\n    \n    def __repr__(self):\n        return f\"{self.value} of {self.suit}\"\n\nclass Deck:\n    def __init__(self):\n        self.cards = [Card(suit, value) for suit in Card.suits\n                                       for value in Card.values]\n    \n    def __repr__(self):\n        return f\"Deck of {self.count()} cards\"\n    \n    def count(self):\n        return len(self.cards)\n    \n    def _deal(self, num):\n        count = self.count()\n        actual = min([count,num])\n        if count == 0:\n            raise ValueError(\"All cards have been dealt\")\n        else:\n            cards = self.cards[-actual:]\n            self.cards = self.cards[:-actual]\n            return cards\n    \n    def deal_card(self):\n        return self._deal(1)[0]\n    \n    def deal_hand(self, hand_size):\n        return self._deal(hand_size)"}
{"instruction":"Write a Python program to find the optimal solution for a given weighted job scheduling problem.","input":"jobs = [(1, 5, 1), (3, 5, 7), (4, 6, 5), (6, 7, 4)]","output":"def jobScheduling(jobs):\n    n = len(jobs) \n    \n    jobs = sorted(jobs, key = lambda x: x[1]) \n   \n    table = [0 for i in range(n)] \n    table[0] = jobs[0][2] \n  \n    for i in range(1, n): \n  \n        inclProf = jobs[i][2] \n        l = binarySearch(jobs, i) \n        if (l != -1):\n            inclProf += table[l] \n  \n        table[i] = max(inclProf, table[i-1]) \n  \n    return table[n-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the optimal solution for a given weighted job scheduling problem.\n\n### Input:\njobs = [(1, 5, 1), (3, 5, 7), (4, 6, 5), (6, 7, 4)]\n\n### Output:\ndef jobScheduling(jobs):\n    n = len(jobs) \n    \n    jobs = sorted(jobs, key = lambda x: x[1]) \n   \n    table = [0 for i in range(n)] \n    table[0] = jobs[0][2] \n  \n    for i in range(1, n): \n  \n        inclProf = jobs[i][2] \n        l = binarySearch(jobs, i) \n        if (l != -1):\n            inclProf += table[l] \n  \n        table[i] = max(inclProf, table[i-1]) \n  \n    return table[n-1]"}
{"instruction":"Create a Python script to define a set that contains the names of the days of the week.","input":"","output":"# Create a set containing the names of the days of the week\ndays_of_the_week = set([\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"])\n\n# Print the set \nprint(days_of_the_week)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to define a set that contains the names of the days of the week.\n\n### Input:\n\n\n### Output:\n# Create a set containing the names of the days of the week\ndays_of_the_week = set([\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"])\n\n# Print the set \nprint(days_of_the_week)"}
{"instruction":"Create an interactive CLI tool with Python that takes in student names and adds them to a list.","input":"Not applicable","output":"import sys\n\n# init an empty list\nstudents = []\n\n# ask for user input\nwhile True:\n student_name = input('Please enter a student name: ')\n \n if student_name.strip() == '':\n  break\n students.append(student_name.strip())\n\nprint('The following students have been added to the list:')\nfor student in students:\n print(student)\n\nsys.exit()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an interactive CLI tool with Python that takes in student names and adds them to a list.\n\n### Input:\nNot applicable\n\n### Output:\nimport sys\n\n# init an empty list\nstudents = []\n\n# ask for user input\nwhile True:\n student_name = input('Please enter a student name: ')\n \n if student_name.strip() == '':\n  break\n students.append(student_name.strip())\n\nprint('The following students have been added to the list:')\nfor student in students:\n print(student)\n\nsys.exit()"}
{"instruction":"Create a Python program to generate the nth number in the Fibonacci series.","input":"","output":"def nth_fibonacci(n):\n if n == 0:\n  return 0\n elif n == 1:\n  return 1\n else:\n  return nth_fibonacci(n-1) + nth_fibonacci(n-2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate the nth number in the Fibonacci series.\n\n### Input:\n\n\n### Output:\ndef nth_fibonacci(n):\n if n == 0:\n  return 0\n elif n == 1:\n  return 1\n else:\n  return nth_fibonacci(n-1) + nth_fibonacci(n-2)"}
{"instruction":"Create a Python function that takes in two strings and returns True if they are anagrams (they contain the same letters).","input":"string1 = \"pizza\"\nstring2 = \"appaiz\"","output":"def isAnagram(string1, string2):\n s1 = sorted(string1.lower())\n s2 = sorted(string2.lower())\n\n if s1 == s2:\n return True\n else:\n return False\n\nstring1 = \"pizza\";\nstring2 = \"appaiz\";\n\nisAnagram(string1, string2); \/\/ True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes in two strings and returns True if they are anagrams (they contain the same letters).\n\n### Input:\nstring1 = \"pizza\"\nstring2 = \"appaiz\"\n\n### Output:\ndef isAnagram(string1, string2):\n s1 = sorted(string1.lower())\n s2 = sorted(string2.lower())\n\n if s1 == s2:\n return True\n else:\n return False\n\nstring1 = \"pizza\";\nstring2 = \"appaiz\";\n\nisAnagram(string1, string2); \/\/ True"}
{"instruction":"Construct a Python function to reverse the contents of a given array in-place.","input":"","output":"def reverse_in_place(arr):\n    start = 0\n    end = len(arr)-1\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python function to reverse the contents of a given array in-place.\n\n### Input:\n\n\n### Output:\ndef reverse_in_place(arr):\n    start = 0\n    end = len(arr)-1\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1"}
{"instruction":"Write a Python statement to check if a given number is within a given range","input":"Number: 3, Range: 0-10","output":"if 0 <= 3 <= 10:\n print('Number is within the range')\nelse:\n print('Number is not within the range')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python statement to check if a given number is within a given range\n\n### Input:\nNumber: 3, Range: 0-10\n\n### Output:\nif 0 <= 3 <= 10:\n print('Number is within the range')\nelse:\n print('Number is not within the range')"}
{"instruction":"Generate a Python program that examines a given string and prints out the substring between the first and second occurrence of a given substring.","input":"string: ab-Hello World-ab\nsubstring: ab","output":"def get_substring(s, t):\n    start_index = s.find(t)\n    end_index = s.find(t, start_index + len(t))\n    if start_index == -1 or end_index == -1:\n        return \"\" \n    else:\n        return s[start_index + len(t) : end_index]\n    \ns = \"ab-Hello World-ab\"\nt = \"ab\"\nprint(get_substring(s, t))\n\/\/ Output: Hello World","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that examines a given string and prints out the substring between the first and second occurrence of a given substring.\n\n### Input:\nstring: ab-Hello World-ab\nsubstring: ab\n\n### Output:\ndef get_substring(s, t):\n    start_index = s.find(t)\n    end_index = s.find(t, start_index + len(t))\n    if start_index == -1 or end_index == -1:\n        return \"\" \n    else:\n        return s[start_index + len(t) : end_index]\n    \ns = \"ab-Hello World-ab\"\nt = \"ab\"\nprint(get_substring(s, t))\n\/\/ Output: Hello World"}
{"instruction":"Create a Python class to represent a rectangle.","input":"","output":"class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def get_area(self):\n        return self.length * self.width","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to represent a rectangle.\n\n### Input:\n\n\n### Output:\nclass Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def get_area(self):\n        return self.length * self.width"}
{"instruction":"Make a program in Python that ensures that two dates provided by the user are within one year of each other.","input":"date1 = \"10-02-2020\"\ndate2 = \"11-02-2021\"","output":"from datetime import datetime\n\ndate1 = datetime.strptime(date1, \"%d-%m-%Y\")\ndate2 = datetime.strptime(date2, \"%d-%m-%Y\")\n\ndef within_year (date1, date2):\n  if abs((date2 - date1).days) <= 365:\n    return True\n  else:\n    return False\n\nif within_year(date1, date2):\n  print(\"The two dates are within one year of each other.\")\nelse:\n  print(\"The two dates are not within one year of each other.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a program in Python that ensures that two dates provided by the user are within one year of each other.\n\n### Input:\ndate1 = \"10-02-2020\"\ndate2 = \"11-02-2021\"\n\n### Output:\nfrom datetime import datetime\n\ndate1 = datetime.strptime(date1, \"%d-%m-%Y\")\ndate2 = datetime.strptime(date2, \"%d-%m-%Y\")\n\ndef within_year (date1, date2):\n  if abs((date2 - date1).days) <= 365:\n    return True\n  else:\n    return False\n\nif within_year(date1, date2):\n  print(\"The two dates are within one year of each other.\")\nelse:\n  print(\"The two dates are not within one year of each other.\")"}
{"instruction":"Design a Python program to create a list of randomized numbers.","input":"","output":"import random\n\ndef rand_list(n):\n\trand_num_list = []\n\tfor _ in range(n):\n\t\trand_num_list.append(random.randint(1,100))\n\treturn rand_num_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to create a list of randomized numbers.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef rand_list(n):\n\trand_num_list = []\n\tfor _ in range(n):\n\t\trand_num_list.append(random.randint(1,100))\n\treturn rand_num_list"}
{"instruction":"Write a function in Python that takes a list of strings and a string as input and adds the string as the last item in the list.","input":"list=['apple','orange','banana']\nstring='kiwi'","output":"def add_string_to_list(string_list, string):\n string_list.append(string)\n \n return string_list\n \n# sample call\nlist = ['apple', 'orange', 'banana']\nstring = 'kiwi'\nnew_list = add_string_to_list(list, string)\n\nprint(new_list)\n# ['apple','orange','banana','kiwi']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes a list of strings and a string as input and adds the string as the last item in the list.\n\n### Input:\nlist=['apple','orange','banana']\nstring='kiwi'\n\n### Output:\ndef add_string_to_list(string_list, string):\n string_list.append(string)\n \n return string_list\n \n# sample call\nlist = ['apple', 'orange', 'banana']\nstring = 'kiwi'\nnew_list = add_string_to_list(list, string)\n\nprint(new_list)\n# ['apple','orange','banana','kiwi']"}
{"instruction":"Create an algorithm that checks if a given String is a valid identifier in Python.","input":"","output":"def is_valid_identifier(string):\n  if string.isidentifier():\n    return True\n  else:\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm that checks if a given String is a valid identifier in Python.\n\n### Input:\n\n\n### Output:\ndef is_valid_identifier(string):\n  if string.isidentifier():\n    return True\n  else:\n    return False"}
{"instruction":"Edit the following Python code such that the function produces output in the format \"<Name> said: '<Message>'.","input":"def generate_message(name, message):\n    print(name + ' said: ' + message)","output":"def generate_message(name, message):\n    print(name + ' said: ' + \"'\" + message + \"'\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code such that the function produces output in the format \"<Name> said: '<Message>'.\n\n### Input:\ndef generate_message(name, message):\n    print(name + ' said: ' + message)\n\n### Output:\ndef generate_message(name, message):\n    print(name + ' said: ' + \"'\" + message + \"'\")"}
{"instruction":"Create a function to encode a string using the Caesar cipher in Python.","input":"string = \"the quick brown fox\"\nencryption_key = 3","output":"def caesar_encrypt(string, encryption_key):\n    encrypted_string = \"\"\n    for char in string:\n        # convert char to ASCII code\n        ascii_code = ord(char)\n        # shift the char by given encryption_key\n        shifted_char = ascii_code + encryption_key\n        # convert shifted_char to its character form\n        encrypted_char = chr(shifted_char)\n        # append the encrypted_char to encrypted_string\n        encrypted_string += encrypted_char\n\n    return encrypted_string","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to encode a string using the Caesar cipher in Python.\n\n### Input:\nstring = \"the quick brown fox\"\nencryption_key = 3\n\n### Output:\ndef caesar_encrypt(string, encryption_key):\n    encrypted_string = \"\"\n    for char in string:\n        # convert char to ASCII code\n        ascii_code = ord(char)\n        # shift the char by given encryption_key\n        shifted_char = ascii_code + encryption_key\n        # convert shifted_char to its character form\n        encrypted_char = chr(shifted_char)\n        # append the encrypted_char to encrypted_string\n        encrypted_string += encrypted_char\n\n    return encrypted_string"}
{"instruction":"Write a Python class that stores the employee details such as name, age, salary etc.","input":"","output":"class Employee:\n   def __init__(self, name, age, salary):\n      self.name = name\n      self.age = age\n      self.salary = salary","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class that stores the employee details such as name, age, salary etc.\n\n### Input:\n\n\n### Output:\nclass Employee:\n   def __init__(self, name, age, salary):\n      self.name = name\n      self.age = age\n      self.salary = salary"}
{"instruction":"Create a ML pipeline using Python to predict the sentiment of a given sentence.","input":"Not applicable","output":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\n\n# load data\ntrain_data = [{'text': 'good morning', 'sentiment': 'positive'}, {'text': 'bad news', 'sentiment': 'negative'}] \n\n# process data\nX_train = np.array([x['text'] for x in train_data]) \ny_train = np.array([x['sentiment'] for x in train_data])\n\n# tokenize words\ntokenizer = Tokenizer(num_words=1000) \ntokenizer.fit_on_texts(X_train) \nX_train = tokenizer.texts_to_sequences(X_train) \nX_train = pad_sequences(X_train, padding='post', maxlen=64) \n\n# create model\nmodel = Sequential([\n Embedding(input_dim=1000, output_dim=128, input_length=64), \n Bidirectional(LSTM(128)), \n Dense(128, activation='relu'), \n Dense(2, activation='softmax') \n]) \n\n# compile model\nmodel.compile(\n optimizer=Adam(learning_rate=0.001), \n loss='sparse_categorical_crossentropy', \n metrics=['accuracy']\n)\n\n# fit model\nmodel.fit(X_train, y_train, epochs=10, batch_size=32)\n\n# evaluate\nloss, accuracy = model.evaluate(X_train, y_train)\nprint('Accuracy: %f' % (accuracy*100))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a ML pipeline using Python to predict the sentiment of a given sentence.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\n\n# load data\ntrain_data = [{'text': 'good morning', 'sentiment': 'positive'}, {'text': 'bad news', 'sentiment': 'negative'}] \n\n# process data\nX_train = np.array([x['text'] for x in train_data]) \ny_train = np.array([x['sentiment'] for x in train_data])\n\n# tokenize words\ntokenizer = Tokenizer(num_words=1000) \ntokenizer.fit_on_texts(X_train) \nX_train = tokenizer.texts_to_sequences(X_train) \nX_train = pad_sequences(X_train, padding='post', maxlen=64) \n\n# create model\nmodel = Sequential([\n Embedding(input_dim=1000, output_dim=128, input_length=64), \n Bidirectional(LSTM(128)), \n Dense(128, activation='relu'), \n Dense(2, activation='softmax') \n]) \n\n# compile model\nmodel.compile(\n optimizer=Adam(learning_rate=0.001), \n loss='sparse_categorical_crossentropy', \n metrics=['accuracy']\n)\n\n# fit model\nmodel.fit(X_train, y_train, epochs=10, batch_size=32)\n\n# evaluate\nloss, accuracy = model.evaluate(X_train, y_train)\nprint('Accuracy: %f' % (accuracy*100))"}
{"instruction":"Generate code for a predictive model in Python that uses linear regression to predict the stock price for a given company.","input":"","output":"import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Read in csv data\ndata = pd.read_csv('stock_data.csv')\n\n# Split our data into testing and training sets\nX_train = data[data['date'] < '2014-01-01']\nX_test = data[data['date'] >= '2014-01-01']\n\n# Extract our feature and target columns\nX_train = X_train.drop(['date', 'price'], axis=1)\nX_test = X_test.drop(['date', 'price'], axis=1)\ny_train = data[data['date'] < '2014-01-01']['price']\ny_test = data[data['date'] >= '2014-01-01']['price']\n\n# Fit our Linear Regression Model\nlinear_regression = LinearRegression()\nlinear_regression.fit(X_train, y_train)\ny_preds = linear_regression.predict(X_test)\n\n# Print out our predictions\nfor i in range(1, len(y_preds)):\n print(f\"Predicted: {y_preds[i]}, Actual: {y_test.iloc[i]}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code for a predictive model in Python that uses linear regression to predict the stock price for a given company.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Read in csv data\ndata = pd.read_csv('stock_data.csv')\n\n# Split our data into testing and training sets\nX_train = data[data['date'] < '2014-01-01']\nX_test = data[data['date'] >= '2014-01-01']\n\n# Extract our feature and target columns\nX_train = X_train.drop(['date', 'price'], axis=1)\nX_test = X_test.drop(['date', 'price'], axis=1)\ny_train = data[data['date'] < '2014-01-01']['price']\ny_test = data[data['date'] >= '2014-01-01']['price']\n\n# Fit our Linear Regression Model\nlinear_regression = LinearRegression()\nlinear_regression.fit(X_train, y_train)\ny_preds = linear_regression.predict(X_test)\n\n# Print out our predictions\nfor i in range(1, len(y_preds)):\n print(f\"Predicted: {y_preds[i]}, Actual: {y_test.iloc[i]}\")"}
{"instruction":"Write a Python program to store and display information about a restaurant.","input":"The restaurant is called 'The Olive' and it has a Chinese and Thai cuisine.","output":"class Restaurant:\n   def __init__(self, name, cuisine):\n        self.name = name\n        self.cuisine = cuisine\n\nrestaurant = Restaurant('The Olive', 'Chinese and Thai')\n\nprint('Name of the restaurant: ', restaurant.name)\nprint('Cuisine served in the restaurant: ', restaurant.cuisine)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to store and display information about a restaurant.\n\n### Input:\nThe restaurant is called 'The Olive' and it has a Chinese and Thai cuisine.\n\n### Output:\nclass Restaurant:\n   def __init__(self, name, cuisine):\n        self.name = name\n        self.cuisine = cuisine\n\nrestaurant = Restaurant('The Olive', 'Chinese and Thai')\n\nprint('Name of the restaurant: ', restaurant.name)\nprint('Cuisine served in the restaurant: ', restaurant.cuisine)"}
{"instruction":"Create a Python program to encode\/decode data using a one-time pad-style of encryption.","input":"encrypted_string = \"8a04de1fbc1e1fe9828ef\"\n\ndecryption_key  =  \"a31c98\"","output":"import base64\n\nencrypted_string = base64.b64decode(encrypted_string)\ndecryption_key = base64.b64decode(decryption_key)\n\ndecrypted_string = \"\"\n\nassert len(encrypted_string) == len(decryption_key)\nfor i in range(len(encrypted_string)):\n    decrypted_string += chr(ord(encrypted_string[i]) ^ ord(decryption_key[i]))\n\nprint(decrypted_string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to encode\/decode data using a one-time pad-style of encryption.\n\n### Input:\nencrypted_string = \"8a04de1fbc1e1fe9828ef\"\n\ndecryption_key  =  \"a31c98\"\n\n### Output:\nimport base64\n\nencrypted_string = base64.b64decode(encrypted_string)\ndecryption_key = base64.b64decode(decryption_key)\n\ndecrypted_string = \"\"\n\nassert len(encrypted_string) == len(decryption_key)\nfor i in range(len(encrypted_string)):\n    decrypted_string += chr(ord(encrypted_string[i]) ^ ord(decryption_key[i]))\n\nprint(decrypted_string)"}
{"instruction":"Create a basic Python socket program to send a message back and forth between a server and a client.","input":"Not applicable","output":"# Server:\n\nimport socket \n\ns = socket.socket()\nhost = '127.0.0.1'\nport = 12345\n\ns.bind((host, port))\ns.listen(5)\nwhile True:\n c, addr = s.accept()\n print('Got connection from', addr)\n c.send(b'Thank you for connecting!')\n message = c.recv(1024)\n print('Received:', message)\n c.close()\n\n# Client: \n\nimport socket \n\ns = socket.socket()\nhost = '127.0.0.1'\nport = 12345\n\ns.connect((host, port))\nprint(s.recv(1024))\ns.send(b'Hello, this is client!')\ns.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Python socket program to send a message back and forth between a server and a client.\n\n### Input:\nNot applicable\n\n### Output:\n# Server:\n\nimport socket \n\ns = socket.socket()\nhost = '127.0.0.1'\nport = 12345\n\ns.bind((host, port))\ns.listen(5)\nwhile True:\n c, addr = s.accept()\n print('Got connection from', addr)\n c.send(b'Thank you for connecting!')\n message = c.recv(1024)\n print('Received:', message)\n c.close()\n\n# Client: \n\nimport socket \n\ns = socket.socket()\nhost = '127.0.0.1'\nport = 12345\n\ns.connect((host, port))\nprint(s.recv(1024))\ns.send(b'Hello, this is client!')\ns.close()"}
{"instruction":"Come up with a python program to join two strings x and y, and then print the resulting combined string.","input":"x = \"Hello\"; y = \"World\"","output":"x = \"Hello\"\ny = \"World\"\n\nresult = x + y\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a python program to join two strings x and y, and then print the resulting combined string.\n\n### Input:\nx = \"Hello\"; y = \"World\"\n\n### Output:\nx = \"Hello\"\ny = \"World\"\n\nresult = x + y\nprint(result)"}
{"instruction":"Create a python program that takes a sentence and returns a list of words in alphabetical order.","input":"Sentence:  The quick brown fox jumped over the lazy dog.","output":"sentence = \"The quick brown fox jumped over the lazy dog.\"\n\n# Split sentence into words\nwords = sentence.split()\n\n# Sort list of words alphabetically\nwords.sort()\n\n# Print sorted list of words\nprint(words)\n\n# Output: ['brown', 'dog.', 'fox', 'The', 'jumped', 'lazy', 'over', 'quick', 'the']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that takes a sentence and returns a list of words in alphabetical order.\n\n### Input:\nSentence:  The quick brown fox jumped over the lazy dog.\n\n### Output:\nsentence = \"The quick brown fox jumped over the lazy dog.\"\n\n# Split sentence into words\nwords = sentence.split()\n\n# Sort list of words alphabetically\nwords.sort()\n\n# Print sorted list of words\nprint(words)\n\n# Output: ['brown', 'dog.', 'fox', 'The', 'jumped', 'lazy', 'over', 'quick', 'the']"}
{"instruction":"Generate a list of all possible subsets of a list of size n in Python","input":"list = [1,2,3]","output":"def all_subsets(lst):\n    \n    res = [[]]\n    \n    for elem in lst:\n        res += [subset + [elem] for subset in res]\n        \n    return res\nall_subsets([1,2,3])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of all possible subsets of a list of size n in Python\n\n### Input:\nlist = [1,2,3]\n\n### Output:\ndef all_subsets(lst):\n    \n    res = [[]]\n    \n    for elem in lst:\n        res += [subset + [elem] for subset in res]\n        \n    return res\nall_subsets([1,2,3])"}
{"instruction":"Write a Python program to calculate the distance between two points (given the latitude and longitude of each point).","input":"lat1 = 52.2296756\nlong1 = 21.0122287\nlat2 = 52.406374\nlong2 = 16.9251681","output":"import math\n\ndef distance(lat1, long1, lat2, long2):\n # convert latitude and longitude to \n # spherical coordinates in radians.\n degrees_to_radians = math.pi\/180.0\n \n # phi = 90 - latitude\n phi1 = (90.0 - lat1)*degrees_to_radians\n phi2 = (90.0 - lat2)*degrees_to_radians\n \n # theta = longitude\n theta1 = long1*degrees_to_radians\n theta2 = long2*degrees_to_radians\n \n # Compute spherical distance from spherical coordinates.\n \n # For two locations in spherical coordinates \n # (1, theta, phi) and (1, theta, phi)\n # cosine( arc length ) = \n #    sin phi sin phi' cos(theta-theta') + cos phi cos phi'\n # distance = rho * arc length\n \n cos = (math.sin(phi1)*math.sin(phi2)*math.cos(theta1 - theta2) + \n        math.cos(phi1)*math.cos(phi2))\n arc = math.acos( cos )\n \n # Remember to multiply arc by the radius of the earth \n # in your favorite set of units to get length.\n return arc*6373\n\ndistance(lat1, long1, lat2, long2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the distance between two points (given the latitude and longitude of each point).\n\n### Input:\nlat1 = 52.2296756\nlong1 = 21.0122287\nlat2 = 52.406374\nlong2 = 16.9251681\n\n### Output:\nimport math\n\ndef distance(lat1, long1, lat2, long2):\n # convert latitude and longitude to \n # spherical coordinates in radians.\n degrees_to_radians = math.pi\/180.0\n \n # phi = 90 - latitude\n phi1 = (90.0 - lat1)*degrees_to_radians\n phi2 = (90.0 - lat2)*degrees_to_radians\n \n # theta = longitude\n theta1 = long1*degrees_to_radians\n theta2 = long2*degrees_to_radians\n \n # Compute spherical distance from spherical coordinates.\n \n # For two locations in spherical coordinates \n # (1, theta, phi) and (1, theta, phi)\n # cosine( arc length ) = \n #    sin phi sin phi' cos(theta-theta') + cos phi cos phi'\n # distance = rho * arc length\n \n cos = (math.sin(phi1)*math.sin(phi2)*math.cos(theta1 - theta2) + \n        math.cos(phi1)*math.cos(phi2))\n arc = math.acos( cos )\n \n # Remember to multiply arc by the radius of the earth \n # in your favorite set of units to get length.\n return arc*6373\n\ndistance(lat1, long1, lat2, long2)"}
{"instruction":"Given a list of integers with no duplicates, write a python program to determine if all elements in the list are perfect squares.","input":"","output":"def is_perfect_square(lst):\n    for num in lst:\n        if (int(num ** 0.5)) ** 2 != num: \n            return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integers with no duplicates, write a python program to determine if all elements in the list are perfect squares.\n\n### Input:\n\n\n### Output:\ndef is_perfect_square(lst):\n    for num in lst:\n        if (int(num ** 0.5)) ** 2 != num: \n            return False\n    return True"}
{"instruction":"Write a Python code to find the nearest integer to a given number.","input":"","output":"def nearest_integer(number):\n if number - int(number)>= 0.5:\n return int(number) + 1\n else:\n return int(number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to find the nearest integer to a given number.\n\n### Input:\n\n\n### Output:\ndef nearest_integer(number):\n if number - int(number)>= 0.5:\n return int(number) + 1\n else:\n return int(number)"}
{"instruction":"Write a Python program to return the top 5 customers by average purchase amount in a given month.","input":"Sales Data:\n{\"customer_id\": 1, \"month\": 1, \"amount\": 40000},\n{\"customer_id\": 2, \"month\": 1, \"amount\": 10000},\n{\"customer_id\": 3, \"month\": 1, \"amount\": 20000},\n{\"customer_id\": 1, \"month\": 2, \"amount\": 30000},\n{\"customer_id\": 2, \"month\": 2, \"amount\": 15000},\n{\"customer_id\": 3, \"month\": 2, \"amount\": 50000}","output":"import pandas as pd\n\n# Create a dataframe from the input data\ndf = pd.DataFrame([\n    {\"customer_id\": 1, \"month\": 1, \"amount\": 40000},\n    {\"customer_id\": 2, \"month\": 1, \"amount\": 10000},\n    {\"customer_id\": 3, \"month\": 1, \"amount\": 20000},\n    {\"customer_id\": 1, \"month\": 2, \"amount\": 30000},\n    {\"customer_id\": 2, \"month\": 2, \"amount\": 15000},\n    {\"customer_id\": 3, \"month\": 2, \"amount\": 50000},\n])\n\n# Group by customer and get the average purchase amount in each month\nresult = df.groupby('customer_id')['amount'].mean().sort_values(ascending=False).head(5)\n\n# Print the result\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to return the top 5 customers by average purchase amount in a given month.\n\n### Input:\nSales Data:\n{\"customer_id\": 1, \"month\": 1, \"amount\": 40000},\n{\"customer_id\": 2, \"month\": 1, \"amount\": 10000},\n{\"customer_id\": 3, \"month\": 1, \"amount\": 20000},\n{\"customer_id\": 1, \"month\": 2, \"amount\": 30000},\n{\"customer_id\": 2, \"month\": 2, \"amount\": 15000},\n{\"customer_id\": 3, \"month\": 2, \"amount\": 50000}\n\n### Output:\nimport pandas as pd\n\n# Create a dataframe from the input data\ndf = pd.DataFrame([\n    {\"customer_id\": 1, \"month\": 1, \"amount\": 40000},\n    {\"customer_id\": 2, \"month\": 1, \"amount\": 10000},\n    {\"customer_id\": 3, \"month\": 1, \"amount\": 20000},\n    {\"customer_id\": 1, \"month\": 2, \"amount\": 30000},\n    {\"customer_id\": 2, \"month\": 2, \"amount\": 15000},\n    {\"customer_id\": 3, \"month\": 2, \"amount\": 50000},\n])\n\n# Group by customer and get the average purchase amount in each month\nresult = df.groupby('customer_id')['amount'].mean().sort_values(ascending=False).head(5)\n\n# Print the result\nprint(result)"}
{"instruction":"Develop a recursive program in Python to traverse a given binary tree in-order.","input":"","output":"class Node: \n  \n    # Constructor to create a new binary node \n    def __init__(self, data):\n        self.data = data  \n        self.left = None\n        self.right = None\n\ndef inorder(root): \n    if root: \n        # First recur on left child \n        inorder(root.left) \n  \n        # then print the data of node \n        print(root.data)\n  \n        # now recur on right child \n        inorder(root.right) \n  \n\n# Driver program to test the above function \nroot = Node(1) \nroot.left      = Node(2) \nroot.right     = Node(3) \nroot.left.left  = Node(4) \nroot.left.right  = Node(5) \n  \ninorder(root)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a recursive program in Python to traverse a given binary tree in-order.\n\n### Input:\n\n\n### Output:\nclass Node: \n  \n    # Constructor to create a new binary node \n    def __init__(self, data):\n        self.data = data  \n        self.left = None\n        self.right = None\n\ndef inorder(root): \n    if root: \n        # First recur on left child \n        inorder(root.left) \n  \n        # then print the data of node \n        print(root.data)\n  \n        # now recur on right child \n        inorder(root.right) \n  \n\n# Driver program to test the above function \nroot = Node(1) \nroot.left      = Node(2) \nroot.right     = Node(3) \nroot.left.left  = Node(4) \nroot.left.right  = Node(5) \n  \ninorder(root)"}
{"instruction":"Write a function in Python to generate an email address with a given name and domain.","input":"name = 'John Smith'\ndomain = 'example.com'","output":"def generate_email(name, domain):\n    '''Generates an email address using the given name and domain.'''\n    name_parts = name.lower().split(' ')\n    email_name = '.'.join(name_parts)\n    return email_name + '@' + domain","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to generate an email address with a given name and domain.\n\n### Input:\nname = 'John Smith'\ndomain = 'example.com'\n\n### Output:\ndef generate_email(name, domain):\n    '''Generates an email address using the given name and domain.'''\n    name_parts = name.lower().split(' ')\n    email_name = '.'.join(name_parts)\n    return email_name + '@' + domain"}
{"instruction":"Write a Python program to compare the results of two sorting algorithms.","input":"Algorithms: QuickSort, MergeSort \nArray: [3, 8, 1, 9, 5, 2]","output":"def quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) \/\/ 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quicksort(left) + middle + quicksort(right)\n\ndef mergesort(arr): \n    if len(arr) > 1: \n        mid = len(arr) \/\/ 2   # Finding the mid of the array \n        L = arr[:mid]   # Dividing the array elements  \n        R = arr[mid:]   # into 2 halves \n        left_arr = mergesort(L)  # Sorting the first \n        right_arr = mergesort(R) # half \n        arr =[] \n        while len(left_arr) > 0 and len(right_arr) > 0: \n            if left_arr[0] < right_arr[0]: \n                arr.append(left_arr[0]) \n                left_arr.pop(0) \n            else: \n                arr.append(right_arr[0]) \n                right_arr.pop(0) \n        # Checking if any element was left \n        for i in left_arr: \n            arr.append(i) \n        for i in right_arr: \n            arr.append(i) \n        return arr\n\n# Test array \narr = [3, 8, 1, 9, 5, 2] \n# Sorted array using QuickSort \nprint(\"Sorted array using QuickSort:\", quicksort(arr)) \n# Sorted array using MergeSort \nprint(\"Sorted array using MergeSort:\", mergesort(arr))\n\nOutput:\nSorted array using QuickSort: [1, 2, 3, 5, 8, 9]\nSorted array using MergeSort: [1, 2, 3, 5, 8, 9]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compare the results of two sorting algorithms.\n\n### Input:\nAlgorithms: QuickSort, MergeSort \nArray: [3, 8, 1, 9, 5, 2]\n\n### Output:\ndef quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) \/\/ 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quicksort(left) + middle + quicksort(right)\n\ndef mergesort(arr): \n    if len(arr) > 1: \n        mid = len(arr) \/\/ 2   # Finding the mid of the array \n        L = arr[:mid]   # Dividing the array elements  \n        R = arr[mid:]   # into 2 halves \n        left_arr = mergesort(L)  # Sorting the first \n        right_arr = mergesort(R) # half \n        arr =[] \n        while len(left_arr) > 0 and len(right_arr) > 0: \n            if left_arr[0] < right_arr[0]: \n                arr.append(left_arr[0]) \n                left_arr.pop(0) \n            else: \n                arr.append(right_arr[0]) \n                right_arr.pop(0) \n        # Checking if any element was left \n        for i in left_arr: \n            arr.append(i) \n        for i in right_arr: \n            arr.append(i) \n        return arr\n\n# Test array \narr = [3, 8, 1, 9, 5, 2] \n# Sorted array using QuickSort \nprint(\"Sorted array using QuickSort:\", quicksort(arr)) \n# Sorted array using MergeSort \nprint(\"Sorted array using MergeSort:\", mergesort(arr))\n\nOutput:\nSorted array using QuickSort: [1, 2, 3, 5, 8, 9]\nSorted array using MergeSort: [1, 2, 3, 5, 8, 9]"}
{"instruction":"Design a Python class that stores employee profile and salary information.","input":"","output":"class Employee:\n  def __init__(self, name, id, salary, profile):\n    self.name = name\n    self.id = id\n    self.salary = salary\n    self.profile = profile","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class that stores employee profile and salary information.\n\n### Input:\n\n\n### Output:\nclass Employee:\n  def __init__(self, name, id, salary, profile):\n    self.name = name\n    self.id = id\n    self.salary = salary\n    self.profile = profile"}
{"instruction":"Design a Python class to store and manipulate data from a tabular dataset.","input":"","output":"class TableData:\n    def __init__(self, data):\n        self.data = data\n        self.column_names = list(data[0].keys())\n        self.row_count = len(data)\n\n    def get_rows(self):\n        rows = []\n        for row in self.data:\n            rows.append(list(row.values()))\n\n        return rows\n\n    def get_columns(self):\n        columns = []\n        for name in self.column_names:\n            column = []\n            for row in self.data:\n                column.append(row[name])\n            \n            columns.append(column)\n\n        return columns\n\n    def get_column_names(self):\n        return self.column_names\n\n    def get_row_count(self):\n        return self.row_count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class to store and manipulate data from a tabular dataset.\n\n### Input:\n\n\n### Output:\nclass TableData:\n    def __init__(self, data):\n        self.data = data\n        self.column_names = list(data[0].keys())\n        self.row_count = len(data)\n\n    def get_rows(self):\n        rows = []\n        for row in self.data:\n            rows.append(list(row.values()))\n\n        return rows\n\n    def get_columns(self):\n        columns = []\n        for name in self.column_names:\n            column = []\n            for row in self.data:\n                column.append(row[name])\n            \n            columns.append(column)\n\n        return columns\n\n    def get_column_names(self):\n        return self.column_names\n\n    def get_row_count(self):\n        return self.row_count"}
{"instruction":"Design a system in Python that can recognize speech and generate text.","input":"Sample audio file containing speech","output":"Imports:\n\nimport speech_recognition as sr\n\n# Define audio file\naudio_file = \"sample_audio.wav\"\n\n# Create a recognition instance\nrecognizer = sr.Recognizer()\n\n# Load audio file\nwith sr.AudioFile(audio_file) as source:\n audio_data = recognizer.record(source)\n \n# Recognize speech\nrecognized_text = recognizer.recognize_google(audio_data)\n\n# Print result\nprint(recognized_text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a system in Python that can recognize speech and generate text.\n\n### Input:\nSample audio file containing speech\n\n### Output:\nImports:\n\nimport speech_recognition as sr\n\n# Define audio file\naudio_file = \"sample_audio.wav\"\n\n# Create a recognition instance\nrecognizer = sr.Recognizer()\n\n# Load audio file\nwith sr.AudioFile(audio_file) as source:\n audio_data = recognizer.record(source)\n \n# Recognize speech\nrecognized_text = recognizer.recognize_google(audio_data)\n\n# Print result\nprint(recognized_text)"}
{"instruction":"Create a Python program to find the sum of all numbers in a given string that can represent a mathematical expression.","input":"","output":"import re\n\ndef sum_expression(expression):\n sum = 0\n \n # Extract all numbers from the expression\n numbers = re.findall(r\"\\d+\", expression)\n \n # Calculate the sum\n for num in numbers:\n sum += int(num)\n \n return sum\n\n# Driver code\nexpression = \"2 + 4 - 7 + 3 + 4 - 8\"\nresult = sum_expression(expression)\n\nprint(\"Sum of the expression:\", result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the sum of all numbers in a given string that can represent a mathematical expression.\n\n### Input:\n\n\n### Output:\nimport re\n\ndef sum_expression(expression):\n sum = 0\n \n # Extract all numbers from the expression\n numbers = re.findall(r\"\\d+\", expression)\n \n # Calculate the sum\n for num in numbers:\n sum += int(num)\n \n return sum\n\n# Driver code\nexpression = \"2 + 4 - 7 + 3 + 4 - 8\"\nresult = sum_expression(expression)\n\nprint(\"Sum of the expression:\", result)"}
{"instruction":"Develop an algorithm to remove the duplicate words in a given string.","input":"\"I love coding love coding Python\"","output":"def remove_duplicates(string): \n    words = string.split(\" \") \n    res = [] \n    for word in words: \n        if word not in res: \n            res.append(word) \n    return (\" \".join(res)) \n\nstring = \"I love coding love coding Python\"\nres = remove_duplicates(string) \nprint(\"String after removing duplicates:\")\nprint(res)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm to remove the duplicate words in a given string.\n\n### Input:\n\"I love coding love coding Python\"\n\n### Output:\ndef remove_duplicates(string): \n    words = string.split(\" \") \n    res = [] \n    for word in words: \n        if word not in res: \n            res.append(word) \n    return (\" \".join(res)) \n\nstring = \"I love coding love coding Python\"\nres = remove_duplicates(string) \nprint(\"String after removing duplicates:\")\nprint(res)"}
{"instruction":"Implement a singleton Python class.","input":"","output":"class Singleton:\n    _instance = None\n\n    def __new__(cls):\n        if not cls._instance:\n            cls._instance = super(Singleton, cls).__new__(cls)\n        return cls._instance","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a singleton Python class.\n\n### Input:\n\n\n### Output:\nclass Singleton:\n    _instance = None\n\n    def __new__(cls):\n        if not cls._instance:\n            cls._instance = super(Singleton, cls).__new__(cls)\n        return cls._instance"}
{"instruction":"Create a Python program to generate a random number between 1 and 10.","input":"","output":"import random\n\ndef generate_random_number():\n return random.randint(1, 10)\n \nprint(generate_random_number())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a random number between 1 and 10.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_random_number():\n return random.randint(1, 10)\n \nprint(generate_random_number())"}
{"instruction":"Generate a cache class in Python to store key-value pairs. This class should use the Least-Recently Used (LRU) strategy to optimize the cache performance.","input":"Not applicable","output":"import collections\n\nclass LRUCache:\n\n def __init__(self, capacity):\n self.capacity = capacity\n self._cache = collections.OrderedDict()\n\n def get(self, key):\n try:\n value = self._cache.pop(key)\n self._cache[key] = value\n return value\n except KeyError:\n return -1\n\n def set(self, key, value):\n try:\n self._cache.pop(key)\n except KeyError:\n if len(self._cache) >= self.capacity:\n self._cache.popitem(last=False)\n self._cache[key] = value","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a cache class in Python to store key-value pairs. This class should use the Least-Recently Used (LRU) strategy to optimize the cache performance.\n\n### Input:\nNot applicable\n\n### Output:\nimport collections\n\nclass LRUCache:\n\n def __init__(self, capacity):\n self.capacity = capacity\n self._cache = collections.OrderedDict()\n\n def get(self, key):\n try:\n value = self._cache.pop(key)\n self._cache[key] = value\n return value\n except KeyError:\n return -1\n\n def set(self, key, value):\n try:\n self._cache.pop(key)\n except KeyError:\n if len(self._cache) >= self.capacity:\n self._cache.popitem(last=False)\n self._cache[key] = value"}
{"instruction":"Debug and fix the following Python program that calculates a list of square roots.","input":"nums = [1, 4, 9, 16] \nfor num in nums:\n  print(num ** 0.5","output":"nums = [1, 4, 9, 16] \nfor num in nums:\n  print(num ** 0.5)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDebug and fix the following Python program that calculates a list of square roots.\n\n### Input:\nnums = [1, 4, 9, 16] \nfor num in nums:\n  print(num ** 0.5\n\n### Output:\nnums = [1, 4, 9, 16] \nfor num in nums:\n  print(num ** 0.5)"}
{"instruction":"Create a quiz game using Python. Every round should be timed and display a count down timer on the screen.","input":"List of questions","output":"import time\nimport random\n\nquestions = [...List of questions]\n\ndef start_game():\n    score = 0\n    start_time = time.time()\n    for i in range( len(questions) ):\n        print(f'Question {i+1}:')\n        question = random.choice(questions)\n        print(question['text'])\n        print('Options:')\n        for j, option in enumerate(question['options'], start=1):\n            print(f\"{j}. {option}\")\n        answer = int(input('Answer: '))\n        if answer == question['answer']:\n            score += 1\n            print('Correct!\\n')\n        else:\n            print('Incorrect!\\n')\n        elapsed_time = time.time() - start_time\n        print(f'Time remaining: {30 - int(elapsed_time):02} seconds\\n')\n        if elapsed_time >= 30:\n            break\n    print(f'Your score is {score}\/{len(questions)}')\n\nif __name__ == '__main__':\n    start_game()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a quiz game using Python. Every round should be timed and display a count down timer on the screen.\n\n### Input:\nList of questions\n\n### Output:\nimport time\nimport random\n\nquestions = [...List of questions]\n\ndef start_game():\n    score = 0\n    start_time = time.time()\n    for i in range( len(questions) ):\n        print(f'Question {i+1}:')\n        question = random.choice(questions)\n        print(question['text'])\n        print('Options:')\n        for j, option in enumerate(question['options'], start=1):\n            print(f\"{j}. {option}\")\n        answer = int(input('Answer: '))\n        if answer == question['answer']:\n            score += 1\n            print('Correct!\\n')\n        else:\n            print('Incorrect!\\n')\n        elapsed_time = time.time() - start_time\n        print(f'Time remaining: {30 - int(elapsed_time):02} seconds\\n')\n        if elapsed_time >= 30:\n            break\n    print(f'Your score is {score}\/{len(questions)}')\n\nif __name__ == '__main__':\n    start_game()"}
{"instruction":"Write a script in Python that prints all prime numbers between two given numbers.","input":"Start Number = 10\nEnd Number = 20","output":"start = 10\nend = 20\n\nfor num in range(start, end + 1):\n   # all prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script in Python that prints all prime numbers between two given numbers.\n\n### Input:\nStart Number = 10\nEnd Number = 20\n\n### Output:\nstart = 10\nend = 20\n\nfor num in range(start, end + 1):\n   # all prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)"}
{"instruction":"Design a Python script to scrape a website for data related to a given keyword.","input":"keyword: \"Artificial Intelligence\"","output":"import requests\nfrom bs4 import BeautifulSoup\n\n# Define target website and keyword\nurl = 'http:\/\/example.net'\nkeyword = 'Artificial Intelligence'\n\n# Send request to server and fetch the response\nresponse = requests.get(url)\n\nif response.status_code == 200:\n  # Parse HTML and extract the desired data \n  html_doc = response.text\n  soup = BeautifulSoup(html_doc, 'html.parser')\n  results = soup.find_all(text=keyword)\n  print(results)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script to scrape a website for data related to a given keyword.\n\n### Input:\nkeyword: \"Artificial Intelligence\"\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Define target website and keyword\nurl = 'http:\/\/example.net'\nkeyword = 'Artificial Intelligence'\n\n# Send request to server and fetch the response\nresponse = requests.get(url)\n\nif response.status_code == 200:\n  # Parse HTML and extract the desired data \n  html_doc = response.text\n  soup = BeautifulSoup(html_doc, 'html.parser')\n  results = soup.find_all(text=keyword)\n  print(results)"}
{"instruction":"Write a Python script to generate a dictionary that keeps count of how many times each word appears in a given sentence.","input":"\"the quick brown fox jumps over the lazy dog\"","output":"\"\"\"\nGenerate a dictionary that keeps count of how many times each word appears in a given sentence\n\nParameters:\nsentence (str): a sentence\n\nReturn:\ndict: a dictionary with word as key and count as value\n\"\"\"\n\ndef count_words(sentence):\n    word_count = {}\n    words = sentence.split()\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 1\n        else:\n            word_count[word] += 1\n    return word_count\n\nif __name__ == '__main__':\n    sentence = \"the quick brown fox jumps over the lazy dog\"\n    print(count_words(sentence))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate a dictionary that keeps count of how many times each word appears in a given sentence.\n\n### Input:\n\"the quick brown fox jumps over the lazy dog\"\n\n### Output:\n\"\"\"\nGenerate a dictionary that keeps count of how many times each word appears in a given sentence\n\nParameters:\nsentence (str): a sentence\n\nReturn:\ndict: a dictionary with word as key and count as value\n\"\"\"\n\ndef count_words(sentence):\n    word_count = {}\n    words = sentence.split()\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 1\n        else:\n            word_count[word] += 1\n    return word_count\n\nif __name__ == '__main__':\n    sentence = \"the quick brown fox jumps over the lazy dog\"\n    print(count_words(sentence))"}
{"instruction":"Generate a function to print a Fibonacci series with n steps (including 0) in Python.","input":"","output":"def printFibo(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        print(a) \n    elif n == 1: \n        print(a,b) \n    else: \n        print(a,b,end=\" \") \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n            print(b,end=\" \") \n\nprintFibo(10)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function to print a Fibonacci series with n steps (including 0) in Python.\n\n### Input:\n\n\n### Output:\ndef printFibo(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        print(a) \n    elif n == 1: \n        print(a,b) \n    else: \n        print(a,b,end=\" \") \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n            print(b,end=\" \") \n\nprintFibo(10)"}
{"instruction":"Create a Python class that takes in a string and calculates the number of characters, words and lines.","input":"Not applicable","output":"class TextAnalyzer:\n def __init__(self, text):\n self.text = text\n \n def calculate_characters(self):\n return len(self.text)\n \n def calculate_words(self):\n words = self.text.split()\n return len(words)\n \n def calculate_lines(self):\n lines = self.text.split('\\n')\n return len(lines)\n \ntext_analyzer = TextAnalyzer(\"This is a test string.\")\nprint(text_analyzer.calculate_words()) # prints 4","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that takes in a string and calculates the number of characters, words and lines.\n\n### Input:\nNot applicable\n\n### Output:\nclass TextAnalyzer:\n def __init__(self, text):\n self.text = text\n \n def calculate_characters(self):\n return len(self.text)\n \n def calculate_words(self):\n words = self.text.split()\n return len(words)\n \n def calculate_lines(self):\n lines = self.text.split('\\n')\n return len(lines)\n \ntext_analyzer = TextAnalyzer(\"This is a test string.\")\nprint(text_analyzer.calculate_words()) # prints 4"}
{"instruction":"Generate a random Rubik's cube configuration in Python.","input":"Not applicable","output":"import random\n\n# Create a 3x3x3 cube\ncube = [[[0] * 3 for _ in range(3)] for _ in range(3)]\n\n# Fill the cube with random colors\ncolors = [1, 2, 3, 4, 5, 6]\nfor plane in cube:\n for row in plane:\n for i in range(3):\n row[i] = random.choice(colors)\n\n# Print out the cube configuation\nfor plane in cube:\n print(plane)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random Rubik's cube configuration in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\n# Create a 3x3x3 cube\ncube = [[[0] * 3 for _ in range(3)] for _ in range(3)]\n\n# Fill the cube with random colors\ncolors = [1, 2, 3, 4, 5, 6]\nfor plane in cube:\n for row in plane:\n for i in range(3):\n row[i] = random.choice(colors)\n\n# Print out the cube configuation\nfor plane in cube:\n print(plane)"}
{"instruction":"Rewrite a python program to take input from the user","input":"n1 = 10\nn2 = 20","output":"n1 = int(input(\"Enter first number: \"))\nn2 = int(input(\"Enter second number: \"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite a python program to take input from the user\n\n### Input:\nn1 = 10\nn2 = 20\n\n### Output:\nn1 = int(input(\"Enter first number: \"))\nn2 = int(input(\"Enter second number: \"))"}
{"instruction":"Create a tree structure like below in Python","input":"","output":"class Node():\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n \n    def insert(self, data):\n        if self.data:\n            if data < self.data:\n                if self.left is None:\n                    self.left = Node(data)\n                else:\n                    self.left.insert(data)\n            elif data > self.data:\n                if self.right is None:\n                    self.right = Node(data)\n                else:\n                    self.right.insert(data)\n        else:\n            self.data = data","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a tree structure like below in Python\n\n### Input:\n\n\n### Output:\nclass Node():\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n \n    def insert(self, data):\n        if self.data:\n            if data < self.data:\n                if self.left is None:\n                    self.left = Node(data)\n                else:\n                    self.left.insert(data)\n            elif data > self.data:\n                if self.right is None:\n                    self.right = Node(data)\n                else:\n                    self.right.insert(data)\n        else:\n            self.data = data"}
{"instruction":"Write a Python program to take a list of numbers and ensure that each element in the list is either the minimum or maximum value in the list.","input":"[5, 4, 3, 4, 8, 6, 7]","output":"def normalize(nums):\n  min_num = min(nums)\n  max_num = max(nums)\n\n  for i, n in enumerate(nums):\n    if n > min_num and n < max_num:\n      if n - min_num > max_num - n:\n        nums[i] = max_num\n      else:\n        nums[i] = min_num\n\n  return nums\n\nprint(normalize([5, 4, 3, 4, 8, 6, 7]))\n# [5, 4, 3, 5, 8, 6, 7]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to take a list of numbers and ensure that each element in the list is either the minimum or maximum value in the list.\n\n### Input:\n[5, 4, 3, 4, 8, 6, 7]\n\n### Output:\ndef normalize(nums):\n  min_num = min(nums)\n  max_num = max(nums)\n\n  for i, n in enumerate(nums):\n    if n > min_num and n < max_num:\n      if n - min_num > max_num - n:\n        nums[i] = max_num\n      else:\n        nums[i] = min_num\n\n  return nums\n\nprint(normalize([5, 4, 3, 4, 8, 6, 7]))\n# [5, 4, 3, 5, 8, 6, 7]"}
{"instruction":"Using some common sorting algorithms, create a Python program to sort the given array of numbers","input":"arr = [4, 6, 8, 1, 3, 9]","output":"def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n\ninsertion_sort(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing some common sorting algorithms, create a Python program to sort the given array of numbers\n\n### Input:\narr = [4, 6, 8, 1, 3, 9]\n\n### Output:\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n\ninsertion_sort(arr)"}
{"instruction":"Edit the code to make it in a Python program to check if a number is divisible by 5 and 11.","input":"def isDivisible(num): \n    if num % 5 == 0: \n        print(\"Number is divisible by 5\") \n    if num % 11 == 0:\n        print(\"Number is divisible by 11\")","output":"def isDivisible(num): \n    if num % 5 == 0 and num % 11 == 0:\n        print(\"Number is divisible by 5 and 11\") \n    else:\n        print(\"Number is not divisible by 5 and 11\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the code to make it in a Python program to check if a number is divisible by 5 and 11.\n\n### Input:\ndef isDivisible(num): \n    if num % 5 == 0: \n        print(\"Number is divisible by 5\") \n    if num % 11 == 0:\n        print(\"Number is divisible by 11\")\n\n### Output:\ndef isDivisible(num): \n    if num % 5 == 0 and num % 11 == 0:\n        print(\"Number is divisible by 5 and 11\") \n    else:\n        print(\"Number is not divisible by 5 and 11\")"}
{"instruction":"Develop a Python program that converts temperature between Celsius, Fahrenheit and Kelvin.","input":"","output":"def convertTemp(temp, fromUnit, toUnit):\n    if fromUnit == 'C':\n        if toUnit == 'F':\n            temp = temp * (9\/5) + 32\n        elif toUnit == 'K':\n            temp += 273.15\n    elif fromUnit == 'F':\n        if toUnit == 'C':\n            temp = (temp - 32) * (5\/9)\n        elif toUnit == 'K':\n            temp = (temp - 32) * (5\/9) + 273.15\n    elif fromUnit == 'K':\n        if toUnit == 'C':\n            temp -= 273.15\n        elif toUnit == 'F':\n            temp = (temp - 273.15) * (9\/5) + 32\n\n    return temp\n\ntemp = 100\nprint(\"In Celsius:\", convertTemp(temp, 'F', 'C'))\nprint(\"In Fahrenheit:\", convertTemp(temp, 'C', 'F'))\nprint(\"In Kelvin:\", convertTemp(temp, 'C', 'K'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that converts temperature between Celsius, Fahrenheit and Kelvin.\n\n### Input:\n\n\n### Output:\ndef convertTemp(temp, fromUnit, toUnit):\n    if fromUnit == 'C':\n        if toUnit == 'F':\n            temp = temp * (9\/5) + 32\n        elif toUnit == 'K':\n            temp += 273.15\n    elif fromUnit == 'F':\n        if toUnit == 'C':\n            temp = (temp - 32) * (5\/9)\n        elif toUnit == 'K':\n            temp = (temp - 32) * (5\/9) + 273.15\n    elif fromUnit == 'K':\n        if toUnit == 'C':\n            temp -= 273.15\n        elif toUnit == 'F':\n            temp = (temp - 273.15) * (9\/5) + 32\n\n    return temp\n\ntemp = 100\nprint(\"In Celsius:\", convertTemp(temp, 'F', 'C'))\nprint(\"In Fahrenheit:\", convertTemp(temp, 'C', 'F'))\nprint(\"In Kelvin:\", convertTemp(temp, 'C', 'K'))"}
{"instruction":"Develop a code in Python to simulate a lottery game.","input":"","output":"import random\n\ndef generate_lottery_numbers():\n    # Generate 6 unique random numbers between 1 and 49\n    lottery_nums = random.sample(range(1, 50), 6)\n    return lottery_nums\n\nif __name__ == '__main__':\n    print(\"Lottery numbers:\", generate_lottery_numbers())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a code in Python to simulate a lottery game.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_lottery_numbers():\n    # Generate 6 unique random numbers between 1 and 49\n    lottery_nums = random.sample(range(1, 50), 6)\n    return lottery_nums\n\nif __name__ == '__main__':\n    print(\"Lottery numbers:\", generate_lottery_numbers())"}
{"instruction":"Design a Python function to encode a given string using the base64 encoding scheme.","input":"","output":"import base64 \ndef base64_encode(string):\n    encodedBytes = base64.b64encode(string.encode(\"utf-8\"))\n    return str(encodedBytes, \"utf-8\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python function to encode a given string using the base64 encoding scheme.\n\n### Input:\n\n\n### Output:\nimport base64 \ndef base64_encode(string):\n    encodedBytes = base64.b64encode(string.encode(\"utf-8\"))\n    return str(encodedBytes, \"utf-8\")"}
{"instruction":"Generate a Python script that takes any number of integer arguments and returns their sum.","input":"3 5 7","output":"def sum_ints(*args):\n    total = 0\n    for num in args:\n        total += num\n    \n    return total\n\nprint(sum_ints(3, 5, 7))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script that takes any number of integer arguments and returns their sum.\n\n### Input:\n3 5 7\n\n### Output:\ndef sum_ints(*args):\n    total = 0\n    for num in args:\n        total += num\n    \n    return total\n\nprint(sum_ints(3, 5, 7))"}
{"instruction":"Create an algorithm in Python that takes a list of numbers and returns a new list with only the even numbers.","input":"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","output":"def get_even_numbers(nums_list):\n  even_numbers = []\n  for num in nums_list:\n    if num % 2 == 0:\n      even_numbers.append(num)\n  return even_numbers\n\nnums_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = get_even_numbers(nums_list)\nprint(even_number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that takes a list of numbers and returns a new list with only the even numbers.\n\n### Input:\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n### Output:\ndef get_even_numbers(nums_list):\n  even_numbers = []\n  for num in nums_list:\n    if num % 2 == 0:\n      even_numbers.append(num)\n  return even_numbers\n\nnums_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = get_even_numbers(nums_list)\nprint(even_number)"}
{"instruction":"Design an efficient algorithm using N-Grams in Python for automatically summarizing a text document.","input":"Not applicable","output":"import nltk\n\ndef generate_ngrams(text, n):\n  lst = text.split()\n  ngrams = []\n\n  for i in range(len(lst)-n+1):\n    ngrams.append(' '.join(lst[i:i+n]))\n\n  return ngrams\n\ndef generate_summary(text, n):\n  freq_table = {}\n\n  for ngram in generate_ngrams(text, n):\n    if ngram in freq_table:\n      freq_table[ngram] += 1\n    else:\n      freq_table[ngram] = 1\n\n  sorted_freq_table = sorted(freq_table.items(), key=lambda x: x[1], reverse=True)\n\n  summary = ''\n  for (ngram, count) in sorted_freq_table[:3]:\n    summary += ngram + ' '\n\n  return summary\n\ntext = 'Text document summarization is the process of reducing a text document with a \\\ncomputer program in order to create a summary that retains the most important points \\\nof the original document.'\n\nsummary = generate_summary(text, 2)\n\nprint(summary)\n\n# Output: Text document summarization original document.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an efficient algorithm using N-Grams in Python for automatically summarizing a text document.\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\n\ndef generate_ngrams(text, n):\n  lst = text.split()\n  ngrams = []\n\n  for i in range(len(lst)-n+1):\n    ngrams.append(' '.join(lst[i:i+n]))\n\n  return ngrams\n\ndef generate_summary(text, n):\n  freq_table = {}\n\n  for ngram in generate_ngrams(text, n):\n    if ngram in freq_table:\n      freq_table[ngram] += 1\n    else:\n      freq_table[ngram] = 1\n\n  sorted_freq_table = sorted(freq_table.items(), key=lambda x: x[1], reverse=True)\n\n  summary = ''\n  for (ngram, count) in sorted_freq_table[:3]:\n    summary += ngram + ' '\n\n  return summary\n\ntext = 'Text document summarization is the process of reducing a text document with a \\\ncomputer program in order to create a summary that retains the most important points \\\nof the original document.'\n\nsummary = generate_summary(text, 2)\n\nprint(summary)\n\n# Output: Text document summarization original document."}
{"instruction":"Create a function in Python to validate the syntax of the given code.","input":"code:\ndef myFunc(param1, param2):\n    statement1\n    statement2","output":"def validate_syntax(code):\n    try: \n        compile(code, '<string>', 'exec')\n        return True\n    except SyntaxError: \n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to validate the syntax of the given code.\n\n### Input:\ncode:\ndef myFunc(param1, param2):\n    statement1\n    statement2\n\n### Output:\ndef validate_syntax(code):\n    try: \n        compile(code, '<string>', 'exec')\n        return True\n    except SyntaxError: \n        return False"}
{"instruction":"Write a Python program to generate an array of all the prime numbers within a given range.","input":"lower = 20\nupper = 40","output":"def generate_primes(lower, upper):\n    \"\"\"\n    This functions returns an array of all the prime numbers within a given range.\n    \"\"\"\n    prime_list = []\n    for num in range(lower, upper + 1): \n        if num > 1:\n            for i in range(2, num): \n                if (num % i) == 0: \n                    break\n            else: \n                prime_list.append(num) \n    return prime_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate an array of all the prime numbers within a given range.\n\n### Input:\nlower = 20\nupper = 40\n\n### Output:\ndef generate_primes(lower, upper):\n    \"\"\"\n    This functions returns an array of all the prime numbers within a given range.\n    \"\"\"\n    prime_list = []\n    for num in range(lower, upper + 1): \n        if num > 1:\n            for i in range(2, num): \n                if (num % i) == 0: \n                    break\n            else: \n                prime_list.append(num) \n    return prime_list"}
{"instruction":"Develop a Python program to generate a random password based on a given set of rules.","input":"Minimum length: 8 characters\nInclude lowercase characters: true\nInclude uppercase characters: true\nInclude digits: true\nInclude special characters: true","output":"import string\nimport random\n\ndef generate_password():\n min_length = 8\n allchar = string.ascii_letters + string.digits + string.punctuation\n password = \"\".join(random.choice(allchar) for x in range(min_length))\n return password\n\npassword = generate_password()\nprint(password) \/\/ eXyCvJ121","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to generate a random password based on a given set of rules.\n\n### Input:\nMinimum length: 8 characters\nInclude lowercase characters: true\nInclude uppercase characters: true\nInclude digits: true\nInclude special characters: true\n\n### Output:\nimport string\nimport random\n\ndef generate_password():\n min_length = 8\n allchar = string.ascii_letters + string.digits + string.punctuation\n password = \"\".join(random.choice(allchar) for x in range(min_length))\n return password\n\npassword = generate_password()\nprint(password) \/\/ eXyCvJ121"}
{"instruction":"Create a basic web scraper in Python to collect data from an e-commerce website.","input":"www.example.com","output":"import requests\nimport bs4\n\ndef get_data(url):\n    response = requests.get(url)\n    soup = bs4.BeautifulSoup(response.text, 'html.parser')\n\n    products = soup.find_all('div', {'class': 'product'})\n\n    for product in products:\n        name = product.find('h3', {'class': 'name'}).text \n        price = product.find('span', {'class': 'price'}).text\n\n        print(name, price)\n\nif __name__ == '__main__':\n    get_data('www.example.com')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic web scraper in Python to collect data from an e-commerce website.\n\n### Input:\nwww.example.com\n\n### Output:\nimport requests\nimport bs4\n\ndef get_data(url):\n    response = requests.get(url)\n    soup = bs4.BeautifulSoup(response.text, 'html.parser')\n\n    products = soup.find_all('div', {'class': 'product'})\n\n    for product in products:\n        name = product.find('h3', {'class': 'name'}).text \n        price = product.find('span', {'class': 'price'}).text\n\n        print(name, price)\n\nif __name__ == '__main__':\n    get_data('www.example.com')"}
{"instruction":"Create a Python code snippet for querying a database and converting the data into a Pandas DataFrame.","input":"A SQL query that returns column names name, age, gender, and location","output":"import pandas as pd\nimport sqlite3\n\nconn = sqlite3.connect('example.db')\n\ndf = pd.read_sql_query(\"SELECT name, age, gender, location FROM table_name\", conn)\n\nconn.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code snippet for querying a database and converting the data into a Pandas DataFrame.\n\n### Input:\nA SQL query that returns column names name, age, gender, and location\n\n### Output:\nimport pandas as pd\nimport sqlite3\n\nconn = sqlite3.connect('example.db')\n\ndf = pd.read_sql_query(\"SELECT name, age, gender, location FROM table_name\", conn)\n\nconn.close()"}
{"instruction":"Create an AWS Lambda function with a Python runtime for sending a message to an SNS topic.","input":"Not applicable","output":"import json\nimport boto3\n \ndef lambda_handler(event, context):\n  # Create an SNS Client\n  sns_client = boto3.client('sns')\n  \n  # Send a message to the SNS topic\n  topic_arn = 'arn:aws:sns:eu-west-1:123456789012:my-topic'\n  message = 'This is a test message'\n  response = sns_client.publish(\n    TopicArn = topic_arn,\n    Message = message\n  )\n  return {\n    'statusCode': 200,\n    'body': json.dumps(response)\n  }","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AWS Lambda function with a Python runtime for sending a message to an SNS topic.\n\n### Input:\nNot applicable\n\n### Output:\nimport json\nimport boto3\n \ndef lambda_handler(event, context):\n  # Create an SNS Client\n  sns_client = boto3.client('sns')\n  \n  # Send a message to the SNS topic\n  topic_arn = 'arn:aws:sns:eu-west-1:123456789012:my-topic'\n  message = 'This is a test message'\n  response = sns_client.publish(\n    TopicArn = topic_arn,\n    Message = message\n  )\n  return {\n    'statusCode': 200,\n    'body': json.dumps(response)\n  }"}
{"instruction":"Design a python program that returns the third smallest element from a given list.","input":"x = [4,5,6,7,2,9]","output":"def thirdSmallest(x):\n    y = sorted(x)[2]\n    return y","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program that returns the third smallest element from a given list.\n\n### Input:\nx = [4,5,6,7,2,9]\n\n### Output:\ndef thirdSmallest(x):\n    y = sorted(x)[2]\n    return y"}
{"instruction":"Write binary search tree code (in Python) for inserting elements into a BST.","input":"Not applicable","output":"class Node: \n def __init__(self, data): \n self.data = data\n self.left = None\n self.right = None\n\n# Function to insert a node \ndef insert(node, data): \n if node is None: \n node = Node(data) \n elif data < node.data: \n node.left = insert(node.left, data) \n else: \n node.right = insert(node.right, data) \n\nreturn node \n\nif __name__ == '__main__':\n root = None \n root = insert(root, 8) \n root = insert(root, 3) \n root = insert(root, 10) \n root = insert(root, 1) \n root = insert(root, 6)\n root = insert(root, 4) \n root = insert(root, 7) \n root = insert(root, 14)\n root = insert(root, 13)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite binary search tree code (in Python) for inserting elements into a BST.\n\n### Input:\nNot applicable\n\n### Output:\nclass Node: \n def __init__(self, data): \n self.data = data\n self.left = None\n self.right = None\n\n# Function to insert a node \ndef insert(node, data): \n if node is None: \n node = Node(data) \n elif data < node.data: \n node.left = insert(node.left, data) \n else: \n node.right = insert(node.right, data) \n\nreturn node \n\nif __name__ == '__main__':\n root = None \n root = insert(root, 8) \n root = insert(root, 3) \n root = insert(root, 10) \n root = insert(root, 1) \n root = insert(root, 6)\n root = insert(root, 4) \n root = insert(root, 7) \n root = insert(root, 14)\n root = insert(root, 13)"}
{"instruction":"Create a basic game of Hangman in Python. The game should have a prompt for the player to enter a word, store the word, display a series of underscores corresponding to the number of letters in the word, and prompt the player to enter guesses for letters in the word.","input":"Not applicable","output":"# Initialize state\nword = ''\nguesses = []\n\n# Hangman board:\nhangman_board = [\n '''\n    +---+\n    |   |\n        |\n        |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n        |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n    |   |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n   \/|   |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n   \/|\\  |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n   \/|\\  |\n   \/    |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n   \/|\\  |\n   \/ \\  |\n        |\n =========\n '''\n]\n\n# Function to collect word from player\ndef collect_word():\n global word\n word = input(\"Enter a word for the other player to guess: \")\n\n# Function to collect guesses\ndef collect_guesses():\n global guesses\n while True:\n guess = input(\"Guess a letter: \")\n if len(guess) != 1 or not guess.isalpha():\n print('A single letter is required!')\n continue\n guesses.append(guess)\n break\n\n # Print out the hangman board\ndef display_hangman():\n for board in hangman_board:\n print(board)\n\n # Function to print out the status of the game\ndef display_status():\n uncompleted_word = ''\n wrong_count = 0\n for letter in word:\n if letter in guesses:\n uncompleted_word += letter\n else:\n uncompleted_word += '_'\n if letter not in guesses:\n wrong_count += 1\n print(uncompleted_word)\n print('Wrong Guesses:', wrong_count)\n\n# Main game logic\ndef main():\n collect_word()\n while True:\n display_hangman()\n display_status()\n collect_guesses()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic game of Hangman in Python. The game should have a prompt for the player to enter a word, store the word, display a series of underscores corresponding to the number of letters in the word, and prompt the player to enter guesses for letters in the word.\n\n### Input:\nNot applicable\n\n### Output:\n# Initialize state\nword = ''\nguesses = []\n\n# Hangman board:\nhangman_board = [\n '''\n    +---+\n    |   |\n        |\n        |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n        |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n    |   |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n   \/|   |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n   \/|\\  |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n   \/|\\  |\n   \/    |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n   \/|\\  |\n   \/ \\  |\n        |\n =========\n '''\n]\n\n# Function to collect word from player\ndef collect_word():\n global word\n word = input(\"Enter a word for the other player to guess: \")\n\n# Function to collect guesses\ndef collect_guesses():\n global guesses\n while True:\n guess = input(\"Guess a letter: \")\n if len(guess) != 1 or not guess.isalpha():\n print('A single letter is required!')\n continue\n guesses.append(guess)\n break\n\n # Print out the hangman board\ndef display_hangman():\n for board in hangman_board:\n print(board)\n\n # Function to print out the status of the game\ndef display_status():\n uncompleted_word = ''\n wrong_count = 0\n for letter in word:\n if letter in guesses:\n uncompleted_word += letter\n else:\n uncompleted_word += '_'\n if letter not in guesses:\n wrong_count += 1\n print(uncompleted_word)\n print('Wrong Guesses:', wrong_count)\n\n# Main game logic\ndef main():\n collect_word()\n while True:\n display_hangman()\n display_status()\n collect_guesses()"}
{"instruction":"The given code is a Python script that characterizes the Reactome pathways and their associated genes. To use this code, you need to have Python 3 installed on your system along with the required dependencies. Once you have the necessary setup, run the script by executing the main() function. The script will connect to a MySQL database and retrieve the Reactome pathways and their associated genes. It will then characterize the pathways based on the number of genes they have and group them accordingly. Finally, it will output the results to the console.","input":"","output":"#! \/usr\/bin\/python3\n#\n# This source code is part of icgc, an ICGC processing pipeline.\n#\n# Icgc is free software: you can redistribute it and\/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Icgc is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see<http:\/\/www.gnu.org\/licenses\/>.\n#\n# Contact: ivana.mihalek@gmail.com\n#\n\n# some pathways do not have the associated genes listed, probably by mistake\n# examples:\n# R-HSA-1483171       | Synthesis of BMP\n# R-HSA-2408499       | Formation of selenosugars for excretion\n\nfrom icgc_utils.common_queries import quotify\nfrom icgc_utils.reactome import *\nfrom config import Config\n############\ndef print_genes(cursor, gene_ids, depth):\n\tif len(gene_ids)<1:\n\t\tprint(\"\\t\"*depth, \"no genes listed\")\n\t\treturn\n\t#print(\"\\t\"*depth, \"print genes here\")\n\tgene_id_string = \",\".join([quotify(z) for z in gene_ids])\n\tqry = \"select ensembl_gene_id, approved_name from hgnc  where ensembl_gene_id in (%s)\" % gene_id_string\n\tgene_names = dict(hard_landing_search(cursor, qry))\n\tqry = \"select ensembl_gene_id, approved_symbol from hgnc  where ensembl_gene_id in (%s)\" % gene_id_string\n\tgene_symbols = dict(hard_landing_search(cursor, qry))\n\n\tfor gene in gene_ids:\n\t\tprint(\"\\t\"*depth, gene_symbols.get(gene,\"\"), gene_names.get(gene,\"\"))\n\treturn\n\n\n##############\ndef characterize_subtree(cursor, graph, pthwy_id, gene_groups, depth,  verbose=True):\n\t# this is the whole subtree\n\t# children = [node for node in nx.dfs_preorder_nodes(graph, pthwy_id)]\n\t# A successor of n is a node m such that there exists a directed edge from n to m.\n\tchildren = [node for node in graph.successors(pthwy_id)]\n\tif len(children)==0: return False\n\tnode_id_string = \",\".join([quotify(z) for z in children])\n\tqry_template = \"select * from reactome_pathways where reactome_pathway_id in (%s)\"\n\tchildren_names = hard_landing_search(cursor, qry_template % node_id_string)\n\tfor child_id, child_name in children_names:\n\t\t# number_of_genes = genes related to nodes without descendants\n\t\tgenes = genes_in_subgraph(cursor, graph, child_id)\n\t\tif verbose: print(\"\\t\"*depth, child_id, child_name, len(genes))\n\t\tif len(genes)<100:\n\t\t\tif verbose: print_genes(cursor, genes, depth+1)\n\t\t\tgene_groups[child_name] = genes\n\t\t\tcontinue\n\t\tif not characterize_subtree(cursor, graph, child_id, gene_groups, depth+1, verbose=verbose): # no further subdivisions\n\t\t\tif verbose: print_genes(cursor, genes, depth+1)\n\t\t\tgene_groups[child_name] = genes\n\t\t\tcontinue\n\treturn True\n\n#########################################\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\ndef hist_plot(gene_groups):\n\tdata = [len(gene_list) for gene_list in list(gene_groups.values())]\n\t# fixed bin size\n\tbins = np.arange(0, 505, 5) # fixed bin size\n\tplt.xlim(0,500)\n\tplt.hist(data, bins=bins, alpha=0.5)\n\t# plt.title('')\n\tplt.xlabel('number of genes in group (bin size = 5)')\n\tplt.ylabel('number of groups')\n\t#\n\tplt.show()\n\n####################################################\ndef main():\n\n\tverbose = False\n\n\tdb     = connect_to_mysql(Config.mysql_conf_file)\n\tcursor = db.cursor()\n\n\tswitch_to_db(cursor, 'icgc')\n\n\t# are there children with multiple parents? Yes. So I need some kind of\n\t# directed graph, rather tha a tree.\n\tqry = \"select child, count(distinct parent) as ct from reactome_hierarchy \"\n\tqry += \"group by child having ct>1\"\n\tret = search_db(cursor, qry)\n\tprint(\"number of children with multiple parents:\", len(ret))\n\n\t# feed the parent\/child pairs as edges into graph\n\tgraph = build_reactome_graph(cursor, verbose=True)\n\t# candidate roots\n\tzero_in_degee_nodes = get_roots(graph)\n\n\tnode_id_string = \",\".join([quotify(z) for z in zero_in_degee_nodes])\n\tqry_template = \"select * from reactome_pathways where reactome_pathway_id in (%s)\"\n\troot_names  = hard_landing_search(cursor, qry_template% node_id_string)\n\tgene_groups = {}\n\tfor pthwy_id, name in root_names:\n\t\tif \"disease\" in name.lower(): continue\n\t\tif verbose: print(pthwy_id, name)\n\t\tcharacterize_subtree(cursor, graph, pthwy_id,  gene_groups,  1, verbose=verbose)\n\n\tprint(\"\\n===========================\")\n\tmax_group=0\n\tfor group, genes in gene_groups.items():\n\t\tgroupsize = len(genes)\n\t\tif max_group< groupsize: max_group=groupsize\n\t\tprint (group, len(genes))\n\tprint(\"\\n===========================\")\n\tprint(\"number of groups\", len(gene_groups))\n\tprint(\"largest group\", max_group)\n\tprint(\"\\n===========================\")\n\tfor pthwy_name, genes in gene_groups.items():\n\t\tif len(genes)<=150: continue\n\t\tprint(\"\\n\",pthwy_name, len(genes))\n\t\t#print_genes(cursor, genes, 1)\n\n\n\t#hist_plot(gene_groups)\n\tcursor.close()\n\tdb.close()\n\n\n#########################################\nif __name__ == '__main__':\n\tmain()\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python script that characterizes the Reactome pathways and their associated genes. To use this code, you need to have Python 3 installed on your system along with the required dependencies. Once you have the necessary setup, run the script by executing the main() function. The script will connect to a MySQL database and retrieve the Reactome pathways and their associated genes. It will then characterize the pathways based on the number of genes they have and group them accordingly. Finally, it will output the results to the console.\n\n### Input:\n\n\n### Output:\n#! \/usr\/bin\/python3\n#\n# This source code is part of icgc, an ICGC processing pipeline.\n#\n# Icgc is free software: you can redistribute it and\/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Icgc is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see<http:\/\/www.gnu.org\/licenses\/>.\n#\n# Contact: ivana.mihalek@gmail.com\n#\n\n# some pathways do not have the associated genes listed, probably by mistake\n# examples:\n# R-HSA-1483171       | Synthesis of BMP\n# R-HSA-2408499       | Formation of selenosugars for excretion\n\nfrom icgc_utils.common_queries import quotify\nfrom icgc_utils.reactome import *\nfrom config import Config\n############\ndef print_genes(cursor, gene_ids, depth):\n\tif len(gene_ids)<1:\n\t\tprint(\"\\t\"*depth, \"no genes listed\")\n\t\treturn\n\t#print(\"\\t\"*depth, \"print genes here\")\n\tgene_id_string = \",\".join([quotify(z) for z in gene_ids])\n\tqry = \"select ensembl_gene_id, approved_name from hgnc  where ensembl_gene_id in (%s)\" % gene_id_string\n\tgene_names = dict(hard_landing_search(cursor, qry))\n\tqry = \"select ensembl_gene_id, approved_symbol from hgnc  where ensembl_gene_id in (%s)\" % gene_id_string\n\tgene_symbols = dict(hard_landing_search(cursor, qry))\n\n\tfor gene in gene_ids:\n\t\tprint(\"\\t\"*depth, gene_symbols.get(gene,\"\"), gene_names.get(gene,\"\"))\n\treturn\n\n\n##############\ndef characterize_subtree(cursor, graph, pthwy_id, gene_groups, depth,  verbose=True):\n\t# this is the whole subtree\n\t# children = [node for node in nx.dfs_preorder_nodes(graph, pthwy_id)]\n\t# A successor of n is a node m such that there exists a directed edge from n to m.\n\tchildren = [node for node in graph.successors(pthwy_id)]\n\tif len(children)==0: return False\n\tnode_id_string = \",\".join([quotify(z) for z in children])\n\tqry_template = \"select * from reactome_pathways where reactome_pathway_id in (%s)\"\n\tchildren_names = hard_landing_search(cursor, qry_template % node_id_string)\n\tfor child_id, child_name in children_names:\n\t\t# number_of_genes = genes related to nodes without descendants\n\t\tgenes = genes_in_subgraph(cursor, graph, child_id)\n\t\tif verbose: print(\"\\t\"*depth, child_id, child_name, len(genes))\n\t\tif len(genes)<100:\n\t\t\tif verbose: print_genes(cursor, genes, depth+1)\n\t\t\tgene_groups[child_name] = genes\n\t\t\tcontinue\n\t\tif not characterize_subtree(cursor, graph, child_id, gene_groups, depth+1, verbose=verbose): # no further subdivisions\n\t\t\tif verbose: print_genes(cursor, genes, depth+1)\n\t\t\tgene_groups[child_name] = genes\n\t\t\tcontinue\n\treturn True\n\n#########################################\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\ndef hist_plot(gene_groups):\n\tdata = [len(gene_list) for gene_list in list(gene_groups.values())]\n\t# fixed bin size\n\tbins = np.arange(0, 505, 5) # fixed bin size\n\tplt.xlim(0,500)\n\tplt.hist(data, bins=bins, alpha=0.5)\n\t# plt.title('')\n\tplt.xlabel('number of genes in group (bin size = 5)')\n\tplt.ylabel('number of groups')\n\t#\n\tplt.show()\n\n####################################################\ndef main():\n\n\tverbose = False\n\n\tdb     = connect_to_mysql(Config.mysql_conf_file)\n\tcursor = db.cursor()\n\n\tswitch_to_db(cursor, 'icgc')\n\n\t# are there children with multiple parents? Yes. So I need some kind of\n\t# directed graph, rather tha a tree.\n\tqry = \"select child, count(distinct parent) as ct from reactome_hierarchy \"\n\tqry += \"group by child having ct>1\"\n\tret = search_db(cursor, qry)\n\tprint(\"number of children with multiple parents:\", len(ret))\n\n\t# feed the parent\/child pairs as edges into graph\n\tgraph = build_reactome_graph(cursor, verbose=True)\n\t# candidate roots\n\tzero_in_degee_nodes = get_roots(graph)\n\n\tnode_id_string = \",\".join([quotify(z) for z in zero_in_degee_nodes])\n\tqry_template = \"select * from reactome_pathways where reactome_pathway_id in (%s)\"\n\troot_names  = hard_landing_search(cursor, qry_template% node_id_string)\n\tgene_groups = {}\n\tfor pthwy_id, name in root_names:\n\t\tif \"disease\" in name.lower(): continue\n\t\tif verbose: print(pthwy_id, name)\n\t\tcharacterize_subtree(cursor, graph, pthwy_id,  gene_groups,  1, verbose=verbose)\n\n\tprint(\"\\n===========================\")\n\tmax_group=0\n\tfor group, genes in gene_groups.items():\n\t\tgroupsize = len(genes)\n\t\tif max_group< groupsize: max_group=groupsize\n\t\tprint (group, len(genes))\n\tprint(\"\\n===========================\")\n\tprint(\"number of groups\", len(gene_groups))\n\tprint(\"largest group\", max_group)\n\tprint(\"\\n===========================\")\n\tfor pthwy_name, genes in gene_groups.items():\n\t\tif len(genes)<=150: continue\n\t\tprint(\"\\n\",pthwy_name, len(genes))\n\t\t#print_genes(cursor, genes, 1)\n\n\n\t#hist_plot(gene_groups)\n\tcursor.close()\n\tdb.close()\n\n\n#########################################\nif __name__ == '__main__':\n\tmain()\n"}
{"instruction":"Write a Python script to generate random numbers between 0 and 100, inclusive, that are divisible by 5.","input":"","output":"def genRandomFive():\n    n = 100\n    divisor = 5\n\n    random_number = random.randint(0,n) \n    while (random_number % divisor != 0): \n        random_number = random.randint(0,n) \n    return random_number \n\nfor i in range(5): \n    print(genRandomFive())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate random numbers between 0 and 100, inclusive, that are divisible by 5.\n\n### Input:\n\n\n### Output:\ndef genRandomFive():\n    n = 100\n    divisor = 5\n\n    random_number = random.randint(0,n) \n    while (random_number % divisor != 0): \n        random_number = random.randint(0,n) \n    return random_number \n\nfor i in range(5): \n    print(genRandomFive())"}
{"instruction":"Write a Python program to intersect two given arrays without using any in-built functions.","input":"a = [1, 7, 11, 58, 80]\nb = [11, 13, 7, 32, 80]","output":"def intersect(a, b):\n  intersection = [] \n  for i in a:\n    for j in b:\n      if i == j and i not in intersection:\n        intersection.append(i)\n  return intersection\n\nprint(intersect([1, 7, 11, 58, 80], [11, 13, 7, 32, 80]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to intersect two given arrays without using any in-built functions.\n\n### Input:\na = [1, 7, 11, 58, 80]\nb = [11, 13, 7, 32, 80]\n\n### Output:\ndef intersect(a, b):\n  intersection = [] \n  for i in a:\n    for j in b:\n      if i == j and i not in intersection:\n        intersection.append(i)\n  return intersection\n\nprint(intersect([1, 7, 11, 58, 80], [11, 13, 7, 32, 80]))"}
{"instruction":"Write a python program to shuffle a given list in random order.","input":"[3, 8, 2, 5, 4]","output":"import random\n\ndef shuffle_list(lst):\n    random.shuffle(lst)\n    return lst\n\nprint(shuffle_list([3, 8, 2, 5, 4])) # prints [2, 3, 5, 4, 8] or any other combination","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to shuffle a given list in random order.\n\n### Input:\n[3, 8, 2, 5, 4]\n\n### Output:\nimport random\n\ndef shuffle_list(lst):\n    random.shuffle(lst)\n    return lst\n\nprint(shuffle_list([3, 8, 2, 5, 4])) # prints [2, 3, 5, 4, 8] or any other combination"}
{"instruction":"Create a Python function called print_name that will print out the given name.","input":"","output":"def print_name(name):\n    print(name)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function called print_name that will print out the given name.\n\n### Input:\n\n\n### Output:\ndef print_name(name):\n    print(name)"}
{"instruction":"Write a python program that takes in two integers and prints the largest number.","input":"Num1 = 10 \n Num2 = 8","output":"num1 = 10\n num2 = 8\n\nif num1 > num2:\n    print(num1)\nelse:\n    print(num2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that takes in two integers and prints the largest number.\n\n### Input:\nNum1 = 10 \n Num2 = 8\n\n### Output:\nnum1 = 10\n num2 = 8\n\nif num1 > num2:\n    print(num1)\nelse:\n    print(num2)"}
{"instruction":"Create a program in Python to classify an input string as either palindrome or not.","input":"Input string: \"racecar\"","output":"def is_palindrome(string):\n    # reverse the string and compare\n    reversed_string = ''.join(reversed(string)) \n    if string == reversed_string:\n        print(\"Input string is a palindrome\")\n    else:\n        print(\"Input string is not a palindrome\")\n        \nis_palindrome(\"racecar\")  # Outputs: \"Input string is a palindrome\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to classify an input string as either palindrome or not.\n\n### Input:\nInput string: \"racecar\"\n\n### Output:\ndef is_palindrome(string):\n    # reverse the string and compare\n    reversed_string = ''.join(reversed(string)) \n    if string == reversed_string:\n        print(\"Input string is a palindrome\")\n    else:\n        print(\"Input string is not a palindrome\")\n        \nis_palindrome(\"racecar\")  # Outputs: \"Input string is a palindrome\""}
{"instruction":"Create a sentiment classifier using a linear regression algorithm in Python.","input":"Sentences:\n1. I love this movie \n2. I hate this movie","output":"import numpy as np\n\nX = np.array([[1, 0], [0, 1]])\ny = np.array([1, 0])\n\nfrom sklearn.linear_model import LinearRegression \n\nmodel = LinearRegression().fit(X, y) \n  \npredictions = model.predict(X) \n  \nprint(\"Sentiment:\", predictions)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sentiment classifier using a linear regression algorithm in Python.\n\n### Input:\nSentences:\n1. I love this movie \n2. I hate this movie\n\n### Output:\nimport numpy as np\n\nX = np.array([[1, 0], [0, 1]])\ny = np.array([1, 0])\n\nfrom sklearn.linear_model import LinearRegression \n\nmodel = LinearRegression().fit(X, y) \n  \npredictions = model.predict(X) \n  \nprint(\"Sentiment:\", predictions)"}
{"instruction":"Create a function in Python to search a list for a given item.","input":"list = [1, 2, 3, 4, 5, 6]\nitem = 4","output":"def search_list(lst, item): \n    for i in range(len(lst)): \n        if lst[i] == item: \n            return i \n    return -1\n\nidx = search_list(list, item) \nif idx == -1: \n    print(\"Item not found\")\nelse:\n    print(\"Item found at index\", idx)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to search a list for a given item.\n\n### Input:\nlist = [1, 2, 3, 4, 5, 6]\nitem = 4\n\n### Output:\ndef search_list(lst, item): \n    for i in range(len(lst)): \n        if lst[i] == item: \n            return i \n    return -1\n\nidx = search_list(list, item) \nif idx == -1: \n    print(\"Item not found\")\nelse:\n    print(\"Item found at index\", idx)"}
{"instruction":"Write a Python program to optimize a given set of stock prices to maximize the total profit.","input":"stock_prices=[10,7,5,8,11,9]","output":"def max_profit(prices):\n n = len(prices) \n profit = [0]*n \n max_price = prices[n-1]  \n\n ## Traverse from last element of Prices array \n for i in range(n-2, -1, -1): \n     if (prices[i]> max_price): \n         max_price = prices[i] \n     profit[i] = max(profit[i+1], max_price-prices[i]) \n\n total_profit = profit[0] \n\n for i in range(1,n): \n     if (profit[i] > total_profit): \n         total_profit = profit[i] \n\n return total_profit \n\n# Driver code \nstock_prices = [10, 7, 5, 8, 11, 9] \nprint(\"Total profit:\", max_profit(stock_prices))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize a given set of stock prices to maximize the total profit.\n\n### Input:\nstock_prices=[10,7,5,8,11,9]\n\n### Output:\ndef max_profit(prices):\n n = len(prices) \n profit = [0]*n \n max_price = prices[n-1]  \n\n ## Traverse from last element of Prices array \n for i in range(n-2, -1, -1): \n     if (prices[i]> max_price): \n         max_price = prices[i] \n     profit[i] = max(profit[i+1], max_price-prices[i]) \n\n total_profit = profit[0] \n\n for i in range(1,n): \n     if (profit[i] > total_profit): \n         total_profit = profit[i] \n\n return total_profit \n\n# Driver code \nstock_prices = [10, 7, 5, 8, 11, 9] \nprint(\"Total profit:\", max_profit(stock_prices))"}
{"instruction":"Write a Python program to solve a quadratic equation given the coefficients a, b, c?","input":"","output":"import math\n\ndef solve_quadratic(a, b, c):\n    # calculate discriminant\n    d = (b**2) - (4*a*c)\n    \n    # find two solutions\n    sol1 = (-b-math.sqrt(d))\/(2*a)\n    sol2 = (-b+math.sqrt(d))\/(2*a)\n    \n    return sol1, sol2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to solve a quadratic equation given the coefficients a, b, c?\n\n### Input:\n\n\n### Output:\nimport math\n\ndef solve_quadratic(a, b, c):\n    # calculate discriminant\n    d = (b**2) - (4*a*c)\n    \n    # find two solutions\n    sol1 = (-b-math.sqrt(d))\/(2*a)\n    sol2 = (-b+math.sqrt(d))\/(2*a)\n    \n    return sol1, sol2"}
{"instruction":"Create a program in Python to compute the host BMI given a user\u2019s height and weight.","input":"Height: 172 cm\nWeight: 85 kg","output":"def compute_bmi(height, weight):\n    bmi = weight \/ (height * height)\n    return bmi\n\nbmi = compute_bmi(172, 85)\nprint(\"Your BMI is {:.2f}\".format(bmi))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to compute the host BMI given a user\u2019s height and weight.\n\n### Input:\nHeight: 172 cm\nWeight: 85 kg\n\n### Output:\ndef compute_bmi(height, weight):\n    bmi = weight \/ (height * height)\n    return bmi\n\nbmi = compute_bmi(172, 85)\nprint(\"Your BMI is {:.2f}\".format(bmi))"}
{"instruction":"Write a Python program to automate web form filling.","input":"","output":"from selenium import webdriver\nbrowser = webdriver.Chrome()\n\n# navigate to website\nbrowser.get(\"website_url\")\n\n# fill form\nname_field = browser.find_element_by_id(\"name\")\nname_field.send_keys(\"John Doe\")\n\nemail_field = browser.find_element_by_id(\"email\")\nemail_field.send_keys(\"example@domain.com\")\n\nage_field = browser.find_element_by_id(\"age\")\nage_field.send_keys(\"25\")\n\n# submit form\nsubmit_button = browser.find_element_by_id(\"submit\")\nsubmit_button.click()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to automate web form filling.\n\n### Input:\n\n\n### Output:\nfrom selenium import webdriver\nbrowser = webdriver.Chrome()\n\n# navigate to website\nbrowser.get(\"website_url\")\n\n# fill form\nname_field = browser.find_element_by_id(\"name\")\nname_field.send_keys(\"John Doe\")\n\nemail_field = browser.find_element_by_id(\"email\")\nemail_field.send_keys(\"example@domain.com\")\n\nage_field = browser.find_element_by_id(\"age\")\nage_field.send_keys(\"25\")\n\n# submit form\nsubmit_button = browser.find_element_by_id(\"submit\")\nsubmit_button.click()"}
{"instruction":"Write a class in Python that can generate a Fibonacci sequence up to a given number.","input":"","output":"class Fibonacci():\n\n    def __init__(self, n):\n        self.n = n\n        self.fibonacci_list = [0, 1]\n\n    def generate_list(self):\n        for i in range(2, self.n):\n            self.fibonacci_list.append(self.fibonacci_list[i-2] + self.fibonacci_list[i-1])\n        return self.fibonacci_list\n\nfibonacci = Fibonacci(10)\nprint(fibonacci.generate_list())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a class in Python that can generate a Fibonacci sequence up to a given number.\n\n### Input:\n\n\n### Output:\nclass Fibonacci():\n\n    def __init__(self, n):\n        self.n = n\n        self.fibonacci_list = [0, 1]\n\n    def generate_list(self):\n        for i in range(2, self.n):\n            self.fibonacci_list.append(self.fibonacci_list[i-2] + self.fibonacci_list[i-1])\n        return self.fibonacci_list\n\nfibonacci = Fibonacci(10)\nprint(fibonacci.generate_list())"}
{"instruction":"Create a Python program to normalize a given list of strings by removing leading and trailing whitespace, and converting all letters to lowercase.","input":"[\" HELLO  \", \" WorLD  \", \"HeLlo\", \"DELL\"]","output":"list_of_strings = [\" HELLO  \", \" WorLD  \", \"HeLlo\", \"DELL\"]\nnormalized_strings = [s.strip().lower() for s in list_of_strings]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to normalize a given list of strings by removing leading and trailing whitespace, and converting all letters to lowercase.\n\n### Input:\n[\" HELLO  \", \" WorLD  \", \"HeLlo\", \"DELL\"]\n\n### Output:\nlist_of_strings = [\" HELLO  \", \" WorLD  \", \"HeLlo\", \"DELL\"]\nnormalized_strings = [s.strip().lower() for s in list_of_strings]"}
{"instruction":"Write a python code to achieve the following purpose:","input":"Given a string, find all the possible permutations.","output":"def find_permutations(s):\n    # If a string is empty, return an empty list\n    if len(s) == 0:\n        return [s]\n\n    # Take the first character as the prefix\n    prefix = s[0]\n    # Take the rest of the string as the suffix\n    suffix = s[1:]\n\n    # Find all the possible permutations of the suffix\n    permutations = find_permutations(suffix)\n\n    result = []\n    # Insert the prefix into all possible positions in each permutation\n    for permutation in permutations:\n        for i in range(len(permutation)+1):\n            result.append(permutation[:i] + prefix + permutation[i:])\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to achieve the following purpose:\n\n### Input:\nGiven a string, find all the possible permutations.\n\n### Output:\ndef find_permutations(s):\n    # If a string is empty, return an empty list\n    if len(s) == 0:\n        return [s]\n\n    # Take the first character as the prefix\n    prefix = s[0]\n    # Take the rest of the string as the suffix\n    suffix = s[1:]\n\n    # Find all the possible permutations of the suffix\n    permutations = find_permutations(suffix)\n\n    result = []\n    # Insert the prefix into all possible positions in each permutation\n    for permutation in permutations:\n        for i in range(len(permutation)+1):\n            result.append(permutation[:i] + prefix + permutation[i:])\n    return result"}
{"instruction":"Write a Python program to generate a Web page containing all the digits arranged in a 3x3 matrix structure.","input":"","output":"<html>\n    <head>\n        <title>Digit 3x3 Matrix<\/title>\n        <style>\n            table{\n                border:1px solid black; \n                width: 50px; \n                height:50px;\n            }\n        <\/style>\n    <\/head>\n    <body>\n        <h1>Digit 3x3 Matrix<\/h1>\n        <table>\n            <tr>\n                <td>1<\/td><td>2<\/td><td>3<\/td>\n            <\/tr>\n            <tr>\n                <td>4<\/td><td>5<\/td><td>6<\/td>\n            <\/tr>\n            <tr>\n                <td>7<\/td><td>8<\/td><td>9<\/td>\n            <\/tr>\n        <\/table>\n    <\/body>\n<\/html>","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a Web page containing all the digits arranged in a 3x3 matrix structure.\n\n### Input:\n\n\n### Output:\n<html>\n    <head>\n        <title>Digit 3x3 Matrix<\/title>\n        <style>\n            table{\n                border:1px solid black; \n                width: 50px; \n                height:50px;\n            }\n        <\/style>\n    <\/head>\n    <body>\n        <h1>Digit 3x3 Matrix<\/h1>\n        <table>\n            <tr>\n                <td>1<\/td><td>2<\/td><td>3<\/td>\n            <\/tr>\n            <tr>\n                <td>4<\/td><td>5<\/td><td>6<\/td>\n            <\/tr>\n            <tr>\n                <td>7<\/td><td>8<\/td><td>9<\/td>\n            <\/tr>\n        <\/table>\n    <\/body>\n<\/html>"}
{"instruction":"Create a python program to select the maximum and minimum element from a list of integers","input":"[2, 3, 5, 4, 1]","output":"def get_max_min(numbers):\n    max_val = numbers[0]\n    min_val = numbers[0]\n    for n in numbers:\n        if n > max_val:\n            max_val = n\n        if n < min_val:\n            min_val = n\n    return (max_val, min_val)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to select the maximum and minimum element from a list of integers\n\n### Input:\n[2, 3, 5, 4, 1]\n\n### Output:\ndef get_max_min(numbers):\n    max_val = numbers[0]\n    min_val = numbers[0]\n    for n in numbers:\n        if n > max_val:\n            max_val = n\n        if n < min_val:\n            min_val = n\n    return (max_val, min_val)"}
{"instruction":"Write a Python function that takes a list of strings as input and returns a new list containing all the strings that start with 'A'","input":"List = [\"Apple\", \"Banana\", \"Ant\", \"Dog\", \"Aardvark\"]","output":"def startWithA(list): \n\tnew_list = [] \n\tfor el in list: \n\t\tif el[0] == 'A': \n\t\t\tnew_list.append(el) \n\treturn new_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes a list of strings as input and returns a new list containing all the strings that start with 'A'\n\n### Input:\nList = [\"Apple\", \"Banana\", \"Ant\", \"Dog\", \"Aardvark\"]\n\n### Output:\ndef startWithA(list): \n\tnew_list = [] \n\tfor el in list: \n\t\tif el[0] == 'A': \n\t\t\tnew_list.append(el) \n\treturn new_list"}
{"instruction":"Write a python program to detect the occurrence of a given string in another large string.","input":"String 1: \"This is a test.\"\nString 2: \"test\"","output":"def str_find(str1, str2):\n    return str1.find(str2) != -1\n\nstr_find(\"This is a test.\", \"test\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to detect the occurrence of a given string in another large string.\n\n### Input:\nString 1: \"This is a test.\"\nString 2: \"test\"\n\n### Output:\ndef str_find(str1, str2):\n    return str1.find(str2) != -1\n\nstr_find(\"This is a test.\", \"test\")"}
{"instruction":"Write a python program to invert a given dictionary.","input":"","output":"def invert_dictionary(d): \n    inverse = dict() \n    for key in d: \n        # Go through the original dictionary \n        val = d[key] \n        # Check if key already exists in the inverse dictionary \n        if val not in inverse: \n            # If not, create a new key-value pair \n            inverse[val] = [key] \n        else: \n            inverse[val].append(key) \n    return inverse","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to invert a given dictionary.\n\n### Input:\n\n\n### Output:\ndef invert_dictionary(d): \n    inverse = dict() \n    for key in d: \n        # Go through the original dictionary \n        val = d[key] \n        # Check if key already exists in the inverse dictionary \n        if val not in inverse: \n            # If not, create a new key-value pair \n            inverse[val] = [key] \n        else: \n            inverse[val].append(key) \n    return inverse"}
{"instruction":"Create a class in Python which implements a binary search tree for integers and a method to print the results.","input":"Not applicable","output":"class Node:\n    def __init__(self,value):\n        self.left = None\n        self.right = None\n        self.value = value\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n    \n    # Insert nodes to the binary search tree.\n    def insert(self,value):\n        new_node = Node(value)\n        if self.root == None:\n            self.root = new_node\n            return\n        else:\n            current_node = self.root\n            while True:\n                if value < current_node.value:\n                    if current_node.left == None:\n                        current_node.left = new_node\n                        return\n                    current_node = current_node.left\n                else:\n                    if current_node.right == None: \n                        current_node.right = new_node\n                        return\n                    current_node = current_node.right\n                \n    def printTree(self, node): \n        if node != None: \n            self.printTree(node.right)\n            print(node.value)\n            self.printTree(node.left)\n\n# Test code\nbst = BinarySearchTree()\nnums = [10,4,2,15,14,16]\nfor num in nums:\n    bst.insert(num)\nbst.printTree(bst.root)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python which implements a binary search tree for integers and a method to print the results.\n\n### Input:\nNot applicable\n\n### Output:\nclass Node:\n    def __init__(self,value):\n        self.left = None\n        self.right = None\n        self.value = value\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n    \n    # Insert nodes to the binary search tree.\n    def insert(self,value):\n        new_node = Node(value)\n        if self.root == None:\n            self.root = new_node\n            return\n        else:\n            current_node = self.root\n            while True:\n                if value < current_node.value:\n                    if current_node.left == None:\n                        current_node.left = new_node\n                        return\n                    current_node = current_node.left\n                else:\n                    if current_node.right == None: \n                        current_node.right = new_node\n                        return\n                    current_node = current_node.right\n                \n    def printTree(self, node): \n        if node != None: \n            self.printTree(node.right)\n            print(node.value)\n            self.printTree(node.left)\n\n# Test code\nbst = BinarySearchTree()\nnums = [10,4,2,15,14,16]\nfor num in nums:\n    bst.insert(num)\nbst.printTree(bst.root)"}
{"instruction":"Design a solution in Python to categorize a list of animals.","input":"animals = [\"dog\",\"cat\",\"fish\",\"frog\",\"bird\"]","output":"def categorize_animals(animals): \n    animals_dict = {\"mammals\": [], \"birds\": [], \"reptiles\": [], \"fish\": []} \n    for animal in animals: \n        if animal == \"dog\" or animal == \"cat\": \n            animals_dict[\"mammals\"].append(animal) \n        elif animal == \"bird\": \n            animals_dict[\"birds\"].append(animal) \n        elif animal == \"fish\": \n            animals_dict[\"fish\"].append(animal) \n        else: \n            animals_dict[\"reptiles\"].append(animal) \n    return animals_dict\n\nanimals = [\"dog\",\"cat\",\"fish\",\"frog\",\"bird\"]\nprint(categorize_animals(animals))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a solution in Python to categorize a list of animals.\n\n### Input:\nanimals = [\"dog\",\"cat\",\"fish\",\"frog\",\"bird\"]\n\n### Output:\ndef categorize_animals(animals): \n    animals_dict = {\"mammals\": [], \"birds\": [], \"reptiles\": [], \"fish\": []} \n    for animal in animals: \n        if animal == \"dog\" or animal == \"cat\": \n            animals_dict[\"mammals\"].append(animal) \n        elif animal == \"bird\": \n            animals_dict[\"birds\"].append(animal) \n        elif animal == \"fish\": \n            animals_dict[\"fish\"].append(animal) \n        else: \n            animals_dict[\"reptiles\"].append(animal) \n    return animals_dict\n\nanimals = [\"dog\",\"cat\",\"fish\",\"frog\",\"bird\"]\nprint(categorize_animals(animals))"}
{"instruction":"Optimize the following code written in Python such that its time complexity becomes linear.","input":"def sum(arr):\n total = 0\n for i in range(len(arr)):\n for j in range(i+1, len(arr)):\n total += arr[i] * arr[j]\n return total","output":"def sum(arr):\n total = 0\n for i in range(len(arr)):\n total += arr[i] * (sum(arr[i+1:]) - arr[i])\n return total","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following code written in Python such that its time complexity becomes linear.\n\n### Input:\ndef sum(arr):\n total = 0\n for i in range(len(arr)):\n for j in range(i+1, len(arr)):\n total += arr[i] * arr[j]\n return total\n\n### Output:\ndef sum(arr):\n total = 0\n for i in range(len(arr)):\n total += arr[i] * (sum(arr[i+1:]) - arr[i])\n return total"}
{"instruction":"Optimize a Python program for speed. The program should calculate the sum of a list of numbers and return the result.","input":"list_of_numbers = [2, 4, 6, 8, 10]","output":"def sum_of_numbers(list_of_numbers):\n# initialize the result to 0\n result = 0\n \n# Iterate over the list of numbers\n for num in list_of_numbers:\n result += num\n \n# return the result\n return result\n \n# testing the function\nlist_of_numbers = [2, 4, 6, 8, 10]\nprint(sum_of_numbers(list_of_numbers))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Python program for speed. The program should calculate the sum of a list of numbers and return the result.\n\n### Input:\nlist_of_numbers = [2, 4, 6, 8, 10]\n\n### Output:\ndef sum_of_numbers(list_of_numbers):\n# initialize the result to 0\n result = 0\n \n# Iterate over the list of numbers\n for num in list_of_numbers:\n result += num\n \n# return the result\n return result\n \n# testing the function\nlist_of_numbers = [2, 4, 6, 8, 10]\nprint(sum_of_numbers(list_of_numbers))"}
{"instruction":"Create a function in Python to find the length of a string.","input":"","output":"def string_length(word):\n  return len(word)\n\nprint(string_length('Hello World!'))\n# Output: 12","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to find the length of a string.\n\n### Input:\n\n\n### Output:\ndef string_length(word):\n  return len(word)\n\nprint(string_length('Hello World!'))\n# Output: 12"}
{"instruction":"Write a python program to parse a given input string and extract the URLs present in the string.","input":"The links mentioned in the article are: https:\/\/www.example.com\/ and http:\/\/www.example.com\/mypage","output":"import re\n \ndef extract_urls(input_str): \n    urls = re.findall('http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', input_str) \n    return urls\n \ninput_str = \"The links mentioned in the article are: https:\/\/www.example.com\/ and http:\/\/www.example.com\/mypage\"\nprint(extract_urls(input_str))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to parse a given input string and extract the URLs present in the string.\n\n### Input:\nThe links mentioned in the article are: https:\/\/www.example.com\/ and http:\/\/www.example.com\/mypage\n\n### Output:\nimport re\n \ndef extract_urls(input_str): \n    urls = re.findall('http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', input_str) \n    return urls\n \ninput_str = \"The links mentioned in the article are: https:\/\/www.example.com\/ and http:\/\/www.example.com\/mypage\"\nprint(extract_urls(input_str))"}
{"instruction":"Optimize a given Python program to make it faster.","input":"def optiFunc(n): \n    result = 0\n    for i in range(n): \n        result += i \n    return result","output":"def optiFunc(n):\n    result = n * (n-1) \/ 2 \n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a given Python program to make it faster.\n\n### Input:\ndef optiFunc(n): \n    result = 0\n    for i in range(n): \n        result += i \n    return result\n\n### Output:\ndef optiFunc(n):\n    result = n * (n-1) \/ 2 \n    return result"}
{"instruction":"Rewrite a Python program from imperative to functional style.","input":"def find_even_numbers(numbers):\n  even_numbers = []\n  for num in numbers:\n    if num % 2 == 0:\n      even_numbers.append(num)\n  return even_numbers","output":"def find_even_numbers(numbers):\n    even_numbers = filter(lambda num: num % 2 == 0, numbers)\n    return list(even_numbers)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite a Python program from imperative to functional style.\n\n### Input:\ndef find_even_numbers(numbers):\n  even_numbers = []\n  for num in numbers:\n    if num % 2 == 0:\n      even_numbers.append(num)\n  return even_numbers\n\n### Output:\ndef find_even_numbers(numbers):\n    even_numbers = filter(lambda num: num % 2 == 0, numbers)\n    return list(even_numbers)"}
{"instruction":"Create a basic HTML page for a portfolio website. The page should include sections for About Me, Skills, Experience, and Projects.","input":"Not applicable","output":"<!DOCTYPE html>\n<html>\n<head>\n <title>My Portfolio<\/title>\n<\/head>\n \n<body>\n <h1>My Portfolio<\/h1>\n \n <h2>About Me<\/h2>\n <p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n <\/p>\n \n <h2>Skills<\/h2>\n <ul>\n  <li>HTML<\/li>\n  <li>CSS<\/li>\n  <li>JavaScript<\/li>\n  <li>Python<\/li>\n <\/ul>\n \n <h2>Experience<\/h2>\n <ul>\n  <li>Company 1 (Jan. 2017 - Present)\n   <ul>\n    <li>Position 1<\/li>\n   <\/ul>\n  <\/li>\n  <li>Company 2 (Jan. 2012 - Dec. 2016)\n  <\/li>\n <\/ul>\n \n <h2>Projects<\/h2>\n <ul>\n  <li>Project 1<\/li>\n  <li>Project 2<\/li>\n  <li>Project 3<\/li>\n <\/ul>\n<\/body>\n<\/html>","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic HTML page for a portfolio website. The page should include sections for About Me, Skills, Experience, and Projects.\n\n### Input:\nNot applicable\n\n### Output:\n<!DOCTYPE html>\n<html>\n<head>\n <title>My Portfolio<\/title>\n<\/head>\n \n<body>\n <h1>My Portfolio<\/h1>\n \n <h2>About Me<\/h2>\n <p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n <\/p>\n \n <h2>Skills<\/h2>\n <ul>\n  <li>HTML<\/li>\n  <li>CSS<\/li>\n  <li>JavaScript<\/li>\n  <li>Python<\/li>\n <\/ul>\n \n <h2>Experience<\/h2>\n <ul>\n  <li>Company 1 (Jan. 2017 - Present)\n   <ul>\n    <li>Position 1<\/li>\n   <\/ul>\n  <\/li>\n  <li>Company 2 (Jan. 2012 - Dec. 2016)\n  <\/li>\n <\/ul>\n \n <h2>Projects<\/h2>\n <ul>\n  <li>Project 1<\/li>\n  <li>Project 2<\/li>\n  <li>Project 3<\/li>\n <\/ul>\n<\/body>\n<\/html>"}
{"instruction":"Create a Python script that sorts a list of dictionaries in ascending order based on a specific key value.","input":"list_of_dicts = [{'name':'John','age':32}, {'name':'Doe','age':22}, {'name': 'Jane','age':44}]","output":"def sort_list_of_dicts_asc(list_of_dicts, key):\n    return sorted(list_of_dicts, key=lambda dict: dict[key])\n\nsorted_list_of_dicts = sort_list_of_dicts_asc(list_of_dicts, 'age')\nprint(sorted_list_of_dicts) # prints [{'name': 'Doe', 'age': 22}, {'name': 'John', 'age': 32}, {'name': 'Jane', 'age': 44}]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that sorts a list of dictionaries in ascending order based on a specific key value.\n\n### Input:\nlist_of_dicts = [{'name':'John','age':32}, {'name':'Doe','age':22}, {'name': 'Jane','age':44}]\n\n### Output:\ndef sort_list_of_dicts_asc(list_of_dicts, key):\n    return sorted(list_of_dicts, key=lambda dict: dict[key])\n\nsorted_list_of_dicts = sort_list_of_dicts_asc(list_of_dicts, 'age')\nprint(sorted_list_of_dicts) # prints [{'name': 'Doe', 'age': 22}, {'name': 'John', 'age': 32}, {'name': 'Jane', 'age': 44}]"}
{"instruction":"Write a Python program to find all unique triplets of number in an array that sums up to 0.","input":"[-1, 0, 1, 2, -1, -4]","output":"def threeSum(nums): \n # Find all unique triplets of number in an array that sums up to 0 \n \n res = [] \n nums.sort() \n for i in range(len(nums) - 2): \n # avoid duplicate triplets \n if i > 0 and nums[i] == nums[i - 1]: \n continue\n # two pointer \n l = i + 1 \n r = len(nums) - 1\n while l < r: \n s = nums[i] + nums[l] + nums[r] \n if s > 0: \n r -= 1 \n elif s < 0: \n l += 1 \n else: \n res.append((nums[i], nums[l], nums[r])) \n l += 1 \n r -= 1 \n # handle duplicate\n while l < r and nums[l] == nums[l + 1]: \n l += 1 \n while l < r and nums[r] == nums[r - 1]: \n r -= 1 \n return res\n\narray = [-1, 0, 1, 2, -1, -4]\n\nprint(threeSum(array))\n\n# Output: [(-1, 0, 1), (-1, -1, 2)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find all unique triplets of number in an array that sums up to 0.\n\n### Input:\n[-1, 0, 1, 2, -1, -4]\n\n### Output:\ndef threeSum(nums): \n # Find all unique triplets of number in an array that sums up to 0 \n \n res = [] \n nums.sort() \n for i in range(len(nums) - 2): \n # avoid duplicate triplets \n if i > 0 and nums[i] == nums[i - 1]: \n continue\n # two pointer \n l = i + 1 \n r = len(nums) - 1\n while l < r: \n s = nums[i] + nums[l] + nums[r] \n if s > 0: \n r -= 1 \n elif s < 0: \n l += 1 \n else: \n res.append((nums[i], nums[l], nums[r])) \n l += 1 \n r -= 1 \n # handle duplicate\n while l < r and nums[l] == nums[l + 1]: \n l += 1 \n while l < r and nums[r] == nums[r - 1]: \n r -= 1 \n return res\n\narray = [-1, 0, 1, 2, -1, -4]\n\nprint(threeSum(array))\n\n# Output: [(-1, 0, 1), (-1, -1, 2)]"}
{"instruction":"Translate this RegEx pattern into a Python script for extracting the key-value pairs from a string.","input":"String: myname=Linda&email=linda@example.com&age=30","output":"import re\n\npattern = r'myname=(?P<name>.+?)&email=(?P<email>.+?)&age=(?P<age>.+)'\nstring = 'myname=Linda&email=linda@example.com&age=30'\n\n# Extract values\nmatch = re.search(pattern, string)\nname = match.group('name')\nemail = match.group('email')\nage = match.group('age')\n\n# Print results\nprint('Name:', name)\nprint('Email:', email)\nprint('Age:', age)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTranslate this RegEx pattern into a Python script for extracting the key-value pairs from a string.\n\n### Input:\nString: myname=Linda&email=linda@example.com&age=30\n\n### Output:\nimport re\n\npattern = r'myname=(?P<name>.+?)&email=(?P<email>.+?)&age=(?P<age>.+)'\nstring = 'myname=Linda&email=linda@example.com&age=30'\n\n# Extract values\nmatch = re.search(pattern, string)\nname = match.group('name')\nemail = match.group('email')\nage = match.group('age')\n\n# Print results\nprint('Name:', name)\nprint('Email:', email)\nprint('Age:', age)"}
{"instruction":"Write a Python program to print a given dictionary where the keys are numbers between 1 and 3 and the values are a list from 1 to the number key.","input":"-","output":"d = {1: [1], 2: [1,2], 3: [1,2,3]}\nfor k,v in d.items():\n    print(k,v)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print a given dictionary where the keys are numbers between 1 and 3 and the values are a list from 1 to the number key.\n\n### Input:\n-\n\n### Output:\nd = {1: [1], 2: [1,2], 3: [1,2,3]}\nfor k,v in d.items():\n    print(k,v)"}
{"instruction":"Generate a Python program to calculate the Fibonacci number at a given position.","input":"n = 10","output":"def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nn = 10\nprint(fibonacci(n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to calculate the Fibonacci number at a given position.\n\n### Input:\nn = 10\n\n### Output:\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nn = 10\nprint(fibonacci(n))"}
{"instruction":"Write a Python program to store and querying user data.","input":"user_data = {\n    \"Name\": \"John\",\n    \"Age\": 25,\n    \"City\": \"New York\"\n    \n}","output":"import json\n\nuser_data = {\"Name\": \"John\", \"Age\": 25, \"City\": \"New York\"}\n\ndef store_user_data(data):\n    with open('user_data.json', 'w') as f:\n        json.dump(data, f)\n\ndef get_user_data():\n    with open('user_data.json') as f:\n        return json.load(f)\n\n# store data in JSON file\nstore_user_data(user_data)\n\n# get data\ndata = get_user_data()\nprint(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to store and querying user data.\n\n### Input:\nuser_data = {\n    \"Name\": \"John\",\n    \"Age\": 25,\n    \"City\": \"New York\"\n    \n}\n\n### Output:\nimport json\n\nuser_data = {\"Name\": \"John\", \"Age\": 25, \"City\": \"New York\"}\n\ndef store_user_data(data):\n    with open('user_data.json', 'w') as f:\n        json.dump(data, f)\n\ndef get_user_data():\n    with open('user_data.json') as f:\n        return json.load(f)\n\n# store data in JSON file\nstore_user_data(user_data)\n\n# get data\ndata = get_user_data()\nprint(data)"}
{"instruction":"Write a python program to classify a given email as spam or not.","input":"Subject: 50% Off Discount!!!\n\nHey there,\n\nWe are giving away a 50% discount on all our products today only. Hurry up and claim your offer now!","output":"def is_spam(email):\n    words = [\"discount\", \"offer\", \"free\", \"cheap\", \"50% off\", \"purchase now\"]\n    email_words = email.lower().split()\n    word_list = [word for word in email_words if word in words]\n    if len(word_list) > 0:\n        return 'spam'\n    else:\n        return 'not spam'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to classify a given email as spam or not.\n\n### Input:\nSubject: 50% Off Discount!!!\n\nHey there,\n\nWe are giving away a 50% discount on all our products today only. Hurry up and claim your offer now!\n\n### Output:\ndef is_spam(email):\n    words = [\"discount\", \"offer\", \"free\", \"cheap\", \"50% off\", \"purchase now\"]\n    email_words = email.lower().split()\n    word_list = [word for word in email_words if word in words]\n    if len(word_list) > 0:\n        return 'spam'\n    else:\n        return 'not spam'"}
{"instruction":"Using Python, modify the implementation of a linked list to include a remove method that takes a value as an argument and removes the node with the given value from the linked list.","input":"","output":"class Node: \n \n    # Constructor to create a new node\n    def __init__(self, data):\n        self.data = data \n        self.next = None\n \n \nclass LinkedList:\n \n    # Function to initialize head\n    def __init__(self):\n        self.head = None\n \n    # Function to insert a new node at the beginning\n    def push(self, new_data):\n        new_node = Node(new_data)\n        new_node.next = self.head\n        self.head = new_node\n \n    # Utility function to print it the linked LinkedList\n    def printList(self):\n        temp = self.head\n        while (temp):\n            print (temp.data,)\n            temp = temp.next\n \n    # Function to remove a node from linked list\n    def remove(self, value): \n        temp = self.head\n  \n        # If head node itself holds the key \n        # or multiple occurrences of key\n        while temp is not None:\n            if temp.data == value:\n                break\n            prev = temp\n            temp = temp.next\n        if temp == None:\n            return \n        if temp == self.head: \n            self.head = temp.next \n        else: \n            prev.next = temp.next\n \n    # This code is contributed by Sachin Bisht","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, modify the implementation of a linked list to include a remove method that takes a value as an argument and removes the node with the given value from the linked list.\n\n### Input:\n\n\n### Output:\nclass Node: \n \n    # Constructor to create a new node\n    def __init__(self, data):\n        self.data = data \n        self.next = None\n \n \nclass LinkedList:\n \n    # Function to initialize head\n    def __init__(self):\n        self.head = None\n \n    # Function to insert a new node at the beginning\n    def push(self, new_data):\n        new_node = Node(new_data)\n        new_node.next = self.head\n        self.head = new_node\n \n    # Utility function to print it the linked LinkedList\n    def printList(self):\n        temp = self.head\n        while (temp):\n            print (temp.data,)\n            temp = temp.next\n \n    # Function to remove a node from linked list\n    def remove(self, value): \n        temp = self.head\n  \n        # If head node itself holds the key \n        # or multiple occurrences of key\n        while temp is not None:\n            if temp.data == value:\n                break\n            prev = temp\n            temp = temp.next\n        if temp == None:\n            return \n        if temp == self.head: \n            self.head = temp.next \n        else: \n            prev.next = temp.next\n \n    # This code is contributed by Sachin Bisht"}
{"instruction":"Create a basic chatbot program in Python that responds to user input.","input":"Not applicable","output":"#Import Libraries\nimport re\nimport random\n\n#Define the patterns\npatterns = {\n    'hello': [\"hi\", \"hey\", \"hello\"],\n    'bye': ['bye', 'Later', 'Goodbye!']\n}\n\n#Define Matching Response\nresponses = {\n    'hello': ['Hi there!', 'Hello there!', 'Greetings!'],\n    'bye': ['See you later!', 'Goodbye!', 'Bye!']\n}\n\n#Define a function for responding\ndef respond(message):\n    if message in patterns['hello']:\n        return random.choice(responses['hello'])\n    elif message in patterns['bye']:\n        return random.choice(responses['bye'])\n    else:\n        return \"I'm sorry, I don't understand.\"\n\n#Define a function for chatting\ndef chat():\n    print(\"Welcome to the chatbot! Type 'quit' to exit.\")\n    while True:\n        message = input('You: ').lower()\n        if message == 'quit':\n            break\n        response = respond(message)\n        print('Bot: ' + response)\n\n#Run the chat function\nchat()\n\n# Output:\nWelcome to the chatbot! Type 'quit' to exit.\nYou: Hi\nBot: Hi there!\nYou: Goodbye\nBot: See you later! #","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic chatbot program in Python that responds to user input.\n\n### Input:\nNot applicable\n\n### Output:\n#Import Libraries\nimport re\nimport random\n\n#Define the patterns\npatterns = {\n    'hello': [\"hi\", \"hey\", \"hello\"],\n    'bye': ['bye', 'Later', 'Goodbye!']\n}\n\n#Define Matching Response\nresponses = {\n    'hello': ['Hi there!', 'Hello there!', 'Greetings!'],\n    'bye': ['See you later!', 'Goodbye!', 'Bye!']\n}\n\n#Define a function for responding\ndef respond(message):\n    if message in patterns['hello']:\n        return random.choice(responses['hello'])\n    elif message in patterns['bye']:\n        return random.choice(responses['bye'])\n    else:\n        return \"I'm sorry, I don't understand.\"\n\n#Define a function for chatting\ndef chat():\n    print(\"Welcome to the chatbot! Type 'quit' to exit.\")\n    while True:\n        message = input('You: ').lower()\n        if message == 'quit':\n            break\n        response = respond(message)\n        print('Bot: ' + response)\n\n#Run the chat function\nchat()\n\n# Output:\nWelcome to the chatbot! Type 'quit' to exit.\nYou: Hi\nBot: Hi there!\nYou: Goodbye\nBot: See you later! #"}
{"instruction":"Design a Python class to represent a Binary Search Tree.","input":"","output":"class BinarySearchTree:\n    '''\n    A binary search tree is a Tree Data Structure \n    in which each node has at most two children which \n    are referred to as the left child and the right child.\n    '''\n\n    #defining a constructor to initialize the root node of a BST\n    def __init__(self, value): \n        self.value = value \n        self.left = None\n        self.right = None\n        \n    #method to insert a node at its correct position in BST\n    def insert(self, value): \n        #compare the new element with the root node\n        if self.value > value:\n            #if the new element is smaller than root node,\n            #it has to be inserted in left subtree\n            if self.left is None: \n                self.left = BinarySearchTree(value) \n            else: \n                self.left.insert(value) \n        else:\n            #if the new element is greater than root node,\n            #it has to be inserted in right subtree\n            if self.right is None: \n                self.right = BinarySearchTree(value) \n            else: \n                self.right.insert(value) \n    \n    #method to search an element in the tree\n    def search(self, value): \n        if self.value == value:\n            return True\n        #search in left subtree\n        if value < self.value: \n            if self.left is None: \n                return False\n            return self.left.search(value)\n        #search in right subtree\n        if value > self.value: \n            if self.right is None: \n                return False\n            return self.right.search(value)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class to represent a Binary Search Tree.\n\n### Input:\n\n\n### Output:\nclass BinarySearchTree:\n    '''\n    A binary search tree is a Tree Data Structure \n    in which each node has at most two children which \n    are referred to as the left child and the right child.\n    '''\n\n    #defining a constructor to initialize the root node of a BST\n    def __init__(self, value): \n        self.value = value \n        self.left = None\n        self.right = None\n        \n    #method to insert a node at its correct position in BST\n    def insert(self, value): \n        #compare the new element with the root node\n        if self.value > value:\n            #if the new element is smaller than root node,\n            #it has to be inserted in left subtree\n            if self.left is None: \n                self.left = BinarySearchTree(value) \n            else: \n                self.left.insert(value) \n        else:\n            #if the new element is greater than root node,\n            #it has to be inserted in right subtree\n            if self.right is None: \n                self.right = BinarySearchTree(value) \n            else: \n                self.right.insert(value) \n    \n    #method to search an element in the tree\n    def search(self, value): \n        if self.value == value:\n            return True\n        #search in left subtree\n        if value < self.value: \n            if self.left is None: \n                return False\n            return self.left.search(value)\n        #search in right subtree\n        if value > self.value: \n            if self.right is None: \n                return False\n            return self.right.search(value)"}
{"instruction":"Create a Python program that converts a list of numbers into a dictionary, where the key is the number and the value is the corresponding difference between two immediate numbers in the list.","input":"[1, 2, 4, 7, 11]","output":"def diff_in_list(input_list):\n    \"\"\"This function takes a list of integers and returns a dictionary with the input number as key and the difference between two immediate numbers as value.\"\"\"\n    \n    output_dict = {}\n  \n    # Iterate over the list and create a dictionary with the \n    # input number as key and the difference between\n    # two immediate numbers as value\n    for i in range(len(input_list) - 1):\n        output_dict[input_list[i]] = input_list[i + 1] - input_list[i]\n    \n    return output_dict\n    \n# Sample Input\ninput_list = [1, 2, 4, 7, 11]\n\n# Print the output\nprint(diff_in_list(input_list))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that converts a list of numbers into a dictionary, where the key is the number and the value is the corresponding difference between two immediate numbers in the list.\n\n### Input:\n[1, 2, 4, 7, 11]\n\n### Output:\ndef diff_in_list(input_list):\n    \"\"\"This function takes a list of integers and returns a dictionary with the input number as key and the difference between two immediate numbers as value.\"\"\"\n    \n    output_dict = {}\n  \n    # Iterate over the list and create a dictionary with the \n    # input number as key and the difference between\n    # two immediate numbers as value\n    for i in range(len(input_list) - 1):\n        output_dict[input_list[i]] = input_list[i + 1] - input_list[i]\n    \n    return output_dict\n    \n# Sample Input\ninput_list = [1, 2, 4, 7, 11]\n\n# Print the output\nprint(diff_in_list(input_list))"}
{"instruction":"Write a Python program to sort a list of tuples according to its second parameter in ascending order.","input":"list = [(\"yellow\", 28), (\"blue\", 30), (\"black\", 25), (\"pink\", 45)]","output":"def sort_tuples(list): \n    \"\"\"Function to sort tuples according to their second parameter\"\"\" \n    list.sort(key = lambda x : x[1]) \n    return list\n\n#Example:\nprint(sort_tuples(list))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a list of tuples according to its second parameter in ascending order.\n\n### Input:\nlist = [(\"yellow\", 28), (\"blue\", 30), (\"black\", 25), (\"pink\", 45)]\n\n### Output:\ndef sort_tuples(list): \n    \"\"\"Function to sort tuples according to their second parameter\"\"\" \n    list.sort(key = lambda x : x[1]) \n    return list\n\n#Example:\nprint(sort_tuples(list))"}
{"instruction":"Debug this Python function to find and correct any errors.","input":"def sumN(num): \n  response = 0\n  for i in range(1, num + 1):\n    response *= i\n  return response","output":"def sumN(num): \n  response = 0\n  for i in range(1, num + 1):\n    response += i\n  return response","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDebug this Python function to find and correct any errors.\n\n### Input:\ndef sumN(num): \n  response = 0\n  for i in range(1, num + 1):\n    response *= i\n  return response\n\n### Output:\ndef sumN(num): \n  response = 0\n  for i in range(1, num + 1):\n    response += i\n  return response"}
{"instruction":"Create a Python function that takes an array of numbers as input, prints the largest and the smallest number in the array, and returns the average of all numbers.","input":"[2, 4, 6, 10, 14, 18]","output":"def find_min_max_avg(arr):\n    # set the min, max numbers to the first item in the array\n    min_num = arr[0]\n    max_num = arr[0]\n\n    # keep track of the sum of all the numbers\n    sum_num = 0\n\n    # iterate through the array\n    for item in arr:\n        # find smallest number\n        if item < min_num:\n            min_num = item\n        # find largest number\n        elif item > max_num:\n            max_num = item\n        # add each number to the sum\n        sum_num += item\n\n    # calculate the average\n    avg_num = sum_num \/ len(arr)\n    print(\"Smallest Number: {}\\nLargest Number: {}\".format(min_num, max_num))\n    return avg_num","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes an array of numbers as input, prints the largest and the smallest number in the array, and returns the average of all numbers.\n\n### Input:\n[2, 4, 6, 10, 14, 18]\n\n### Output:\ndef find_min_max_avg(arr):\n    # set the min, max numbers to the first item in the array\n    min_num = arr[0]\n    max_num = arr[0]\n\n    # keep track of the sum of all the numbers\n    sum_num = 0\n\n    # iterate through the array\n    for item in arr:\n        # find smallest number\n        if item < min_num:\n            min_num = item\n        # find largest number\n        elif item > max_num:\n            max_num = item\n        # add each number to the sum\n        sum_num += item\n\n    # calculate the average\n    avg_num = sum_num \/ len(arr)\n    print(\"Smallest Number: {}\\nLargest Number: {}\".format(min_num, max_num))\n    return avg_num"}
{"instruction":"Create a Python function to detect if a string contains a duplicate character.","input":"","output":"def contains_duplicate(s):\n    counts = dict()\n    for ch in s:\n        if ch in counts:\n            return True\n        counts[ch] = 1\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to detect if a string contains a duplicate character.\n\n### Input:\n\n\n### Output:\ndef contains_duplicate(s):\n    counts = dict()\n    for ch in s:\n        if ch in counts:\n            return True\n        counts[ch] = 1\n    return False"}
{"instruction":"Create a library in Python with modules for creating, displaying, and restoring geometric shapes such as a square, circle, and triangle.","input":"Not applicable","output":"# shapes_lib.py\nclass Shape:\n    \"\"\"Base class for creating shapes.\"\"\"\n\n    def __init__(self, sides, *args):\n        self.sides = sides\n\nclass Circle(Shape):\n    \"\"\"A circle with a fixed radius.\"\"\"\n\n    def __init__(self, radius):\n        super().__init__(1)\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * (self.radius ** 2)\n\nclass Triangle(Shape):\n    \"\"\"A triangle with sides of varying lengths.\"\"\"\n\n    def __init__(self, side1, side2, side3):\n        super().__init__(3)\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n\n    def area(self):\n        s = (self.side1 + self.side2 + self.side3) \/ 2\n        return (s * (s - self.side1) * (s - self.side2) * (s - self.side3)) ** 0.5\n\nclass Square(Shape):\n    \"\"\"A square with four equal sides.\"\"\"\n\n    def __init__(self, side):\n        super().__init__(4)\n        self.side = side\n\n    def area(self):\n        return self.side**2\n\ndef restore_shape(shape_data):\n    shape_type = shape_data['type']\n    if shape_type == 'circle':\n        return Circle(shape_data['radius'])\n    elif shape_type == 'triangle':\n        return Triangle(shape_data['side1'], shape_data['side2'], shape_data['side3'])\n    elif shape_type == 'square':\n        return Square(shape_data['side'])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a library in Python with modules for creating, displaying, and restoring geometric shapes such as a square, circle, and triangle.\n\n### Input:\nNot applicable\n\n### Output:\n# shapes_lib.py\nclass Shape:\n    \"\"\"Base class for creating shapes.\"\"\"\n\n    def __init__(self, sides, *args):\n        self.sides = sides\n\nclass Circle(Shape):\n    \"\"\"A circle with a fixed radius.\"\"\"\n\n    def __init__(self, radius):\n        super().__init__(1)\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * (self.radius ** 2)\n\nclass Triangle(Shape):\n    \"\"\"A triangle with sides of varying lengths.\"\"\"\n\n    def __init__(self, side1, side2, side3):\n        super().__init__(3)\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n\n    def area(self):\n        s = (self.side1 + self.side2 + self.side3) \/ 2\n        return (s * (s - self.side1) * (s - self.side2) * (s - self.side3)) ** 0.5\n\nclass Square(Shape):\n    \"\"\"A square with four equal sides.\"\"\"\n\n    def __init__(self, side):\n        super().__init__(4)\n        self.side = side\n\n    def area(self):\n        return self.side**2\n\ndef restore_shape(shape_data):\n    shape_type = shape_data['type']\n    if shape_type == 'circle':\n        return Circle(shape_data['radius'])\n    elif shape_type == 'triangle':\n        return Triangle(shape_data['side1'], shape_data['side2'], shape_data['side3'])\n    elif shape_type == 'square':\n        return Square(shape_data['side'])"}
{"instruction":"Optimize this given Python code using list comprehension.","input":"word_list = ['hello', 'world', 'good', 'morning']\n\nfor i in range(len(word_list)): \n    word_list[i] = word_list[i].upper()","output":"word_list = ['hello', 'world', 'good', 'morning']\n\nword_list = [word.upper() for word in word_list]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize this given Python code using list comprehension.\n\n### Input:\nword_list = ['hello', 'world', 'good', 'morning']\n\nfor i in range(len(word_list)): \n    word_list[i] = word_list[i].upper()\n\n### Output:\nword_list = ['hello', 'world', 'good', 'morning']\n\nword_list = [word.upper() for word in word_list]"}
{"instruction":"Create a Python function that processes a string and returns the string in lowercase.","input":"String to be modified: \"MyString\"","output":"def process_string(string):\n    return string.lower()\n\nprocess_string(\"MyString\") # returns \"mystring\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that processes a string and returns the string in lowercase.\n\n### Input:\nString to be modified: \"MyString\"\n\n### Output:\ndef process_string(string):\n    return string.lower()\n\nprocess_string(\"MyString\") # returns \"mystring\""}
{"instruction":"Write a Python function that takes a string as input and checks if it is a palindrome or not.","input":"Not applicable","output":"def is_palindrome(string):\n   # reverse the string\n   rev_string = string[::-1] \n   \n   # check if the string is equal to its reverse\n   if (string == rev_string): \n     return True\n   return False\n\n# Example usage:\n\nresult = is_palindrome('racecar')\n# result = True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes a string as input and checks if it is a palindrome or not.\n\n### Input:\nNot applicable\n\n### Output:\ndef is_palindrome(string):\n   # reverse the string\n   rev_string = string[::-1] \n   \n   # check if the string is equal to its reverse\n   if (string == rev_string): \n     return True\n   return False\n\n# Example usage:\n\nresult = is_palindrome('racecar')\n# result = True"}
{"instruction":"Create an ML algorithm in Python to identify fraudulent transactions in a dataset.","input":"Not applicable","output":"# import the necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.model_selection import train_test_split\n\n# Read the dataset\ndata = pd.read_csv('dataset.csv')\n\n# Split the dataset into train and test datasets\nx_train, x_test, y_train, y_test = train_test_split(data.iloc[:,:-1], data.iloc[:,-1], test_size=0.2)\n\n# Create the isolation forest model\nmodel = IsolationForest()\nmodel = model.fit(x_train, y_train)\n\n# Make predictions\ny_pred = model.predict(x_test)\n\n# Evaluate the model performance\nfrom sklearn.metrics import accuracy_score\nprint('Accuracy:', accuracy_score(y_test, y_pred))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an ML algorithm in Python to identify fraudulent transactions in a dataset.\n\n### Input:\nNot applicable\n\n### Output:\n# import the necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.model_selection import train_test_split\n\n# Read the dataset\ndata = pd.read_csv('dataset.csv')\n\n# Split the dataset into train and test datasets\nx_train, x_test, y_train, y_test = train_test_split(data.iloc[:,:-1], data.iloc[:,-1], test_size=0.2)\n\n# Create the isolation forest model\nmodel = IsolationForest()\nmodel = model.fit(x_train, y_train)\n\n# Make predictions\ny_pred = model.predict(x_test)\n\n# Evaluate the model performance\nfrom sklearn.metrics import accuracy_score\nprint('Accuracy:', accuracy_score(y_test, y_pred))"}
{"instruction":"Create a Python program to remove all the elements in a given array, which are divisible by a certain number.","input":"[23, 45, 12, 35, 29], 3","output":"# Enter the Array\narr = [23, 45, 12, 35, 29] \n \n# Enter the Number\nnum = 3\n \n# Print the New Array\nnew_arr = [x for x in arr if x % num != 0] \n \n# Print the Result\nprint(new_arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to remove all the elements in a given array, which are divisible by a certain number.\n\n### Input:\n[23, 45, 12, 35, 29], 3\n\n### Output:\n# Enter the Array\narr = [23, 45, 12, 35, 29] \n \n# Enter the Number\nnum = 3\n \n# Print the New Array\nnew_arr = [x for x in arr if x % num != 0] \n \n# Print the Result\nprint(new_arr)"}
{"instruction":"Generate a Python function to compute the Fibonacci sequence.","input":"Not applicable","output":"def fibonacci(n):\n if n == 0:\n  return 0\n elif n == 1:\n  return 1\n else:\n  return fibonacci(n - 1) + fibonacci(n - 2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to compute the Fibonacci sequence.\n\n### Input:\nNot applicable\n\n### Output:\ndef fibonacci(n):\n if n == 0:\n  return 0\n elif n == 1:\n  return 1\n else:\n  return fibonacci(n - 1) + fibonacci(n - 2)"}
{"instruction":"Create a set of functions to encrypt a string in Python using the Advanced Encryption Standard (AES) with a given key and initialization vector (IV).","input":"Key: \"2b7e151628aed2a6abf7158809cf4f3c\"; IV: \"000102030405060708090a0b0c0d0e0f\"","output":"import base64\nfrom Crypto.Cipher import AES\n\ndef encrypt_string(plain_text, key, iv):\n # convert strings to bytes\n plain_text_bytestring = bytes(plain_text, encoding='utf8')\n key = bytes(key, encoding='utf8')\n iv = bytes(iv, encoding='utf8')\n\n # create an AES cipher object with the key\n cipher = AES.new(key, AES.MODE_CBC, iv)\n\n # encrypt the message using the cipher object\n encrypted_string = cipher.encrypt(plain_text_bytestring)\n\n # base64 encode the encrypted message\n base64_encrypted_string = base64.b64encode(encrypted_string)\n\n # return the base64 encoded message\n return base64_encrypted_string.decode('utf-8')\n\ndef decrypt_string(base64_encrypted_string, key, iv):\n # convert strings to bytes\n base64_encrypted_string = bytes(base64_encrypted_string, encoding='utf8')\n key = bytes(key, encoding='utf8')\n iv = bytes(iv, encoding='utf8')\n\n # decode the base encoded message\n encrypted_string = base64.b64decode(base64_encrypted_string)\n\n # create an AES cipher object with the key\n cipher = AES.new(key, AES.MODE_CBC, iv)\n\n # decrypt the message using the cipher object\n decrypted_string = cipher.decrypt(encrypted_string)\n\n # return the decrypted message in string format\n return decrypted_string.decode('utf-8')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a set of functions to encrypt a string in Python using the Advanced Encryption Standard (AES) with a given key and initialization vector (IV).\n\n### Input:\nKey: \"2b7e151628aed2a6abf7158809cf4f3c\"; IV: \"000102030405060708090a0b0c0d0e0f\"\n\n### Output:\nimport base64\nfrom Crypto.Cipher import AES\n\ndef encrypt_string(plain_text, key, iv):\n # convert strings to bytes\n plain_text_bytestring = bytes(plain_text, encoding='utf8')\n key = bytes(key, encoding='utf8')\n iv = bytes(iv, encoding='utf8')\n\n # create an AES cipher object with the key\n cipher = AES.new(key, AES.MODE_CBC, iv)\n\n # encrypt the message using the cipher object\n encrypted_string = cipher.encrypt(plain_text_bytestring)\n\n # base64 encode the encrypted message\n base64_encrypted_string = base64.b64encode(encrypted_string)\n\n # return the base64 encoded message\n return base64_encrypted_string.decode('utf-8')\n\ndef decrypt_string(base64_encrypted_string, key, iv):\n # convert strings to bytes\n base64_encrypted_string = bytes(base64_encrypted_string, encoding='utf8')\n key = bytes(key, encoding='utf8')\n iv = bytes(iv, encoding='utf8')\n\n # decode the base encoded message\n encrypted_string = base64.b64decode(base64_encrypted_string)\n\n # create an AES cipher object with the key\n cipher = AES.new(key, AES.MODE_CBC, iv)\n\n # decrypt the message using the cipher object\n decrypted_string = cipher.decrypt(encrypted_string)\n\n # return the decrypted message in string format\n return decrypted_string.decode('utf-8')"}
{"instruction":"Can you provide a Python program that prints the largest element in the given list?","input":"[1, 3, 4, 5, 19, 13, 7]","output":"def get_largest(nums):\n    max_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nprint(get_largest([1, 3, 4, 5, 19, 13, 7]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you provide a Python program that prints the largest element in the given list?\n\n### Input:\n[1, 3, 4, 5, 19, 13, 7]\n\n### Output:\ndef get_largest(nums):\n    max_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nprint(get_largest([1, 3, 4, 5, 19, 13, 7]))"}
{"instruction":"Develop a program in Python to detect whether an input string is a palindrome.","input":"input_string = \"level\"","output":"def check_palindrome(input_string):\n    '''This function will check if the given string is palindrome or not.'''\n    temp_string = input_string.lower()\n    return temp_string == temp_string[::-1]\n\ninput_string = \"level\"\n\n# check if the string is palindrome\nif check_palindrome(input_string):\n    print(\"The string is palindrome.\")\nelse:\n    print(\"The string is not palindrome.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python to detect whether an input string is a palindrome.\n\n### Input:\ninput_string = \"level\"\n\n### Output:\ndef check_palindrome(input_string):\n    '''This function will check if the given string is palindrome or not.'''\n    temp_string = input_string.lower()\n    return temp_string == temp_string[::-1]\n\ninput_string = \"level\"\n\n# check if the string is palindrome\nif check_palindrome(input_string):\n    print(\"The string is palindrome.\")\nelse:\n    print(\"The string is not palindrome.\")"}
{"instruction":"Design an algorithm in Python for linear search.","input":"[3, 1, 5, 8], 8","output":"def linear_search(arr, target):    \n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python for linear search.\n\n### Input:\n[3, 1, 5, 8], 8\n\n### Output:\ndef linear_search(arr, target):    \n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1"}
{"instruction":"Write a Python program to flatten a list of lists into a single list.","input":"List of lists: [[1,2], [3], [4,5,6]]","output":"import itertools\n\n# flatten a list of lists\nlist_of_lists = [[1,2], [3], [4,5,6]]\nflattened_list = list(itertools.chain.from_iterable(list_of_lists))\n\n# print the flattened list\nprint(flattened_list)  # Output: [1, 2, 3, 4, 5, 6]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to flatten a list of lists into a single list.\n\n### Input:\nList of lists: [[1,2], [3], [4,5,6]]\n\n### Output:\nimport itertools\n\n# flatten a list of lists\nlist_of_lists = [[1,2], [3], [4,5,6]]\nflattened_list = list(itertools.chain.from_iterable(list_of_lists))\n\n# print the flattened list\nprint(flattened_list)  # Output: [1, 2, 3, 4, 5, 6]"}
{"instruction":"Optimize the following Python program by introducing several code refactoring techniques.","input":"def factorial(number):\n\tif (number == 0):\n\t\treturn 1\n\telse:\n\t\treturn number * factorial(number - 1)\n \nprint(factorial(5))","output":"def factorial(number):\n  total = 1\n  while number > 0: \n    total *= number\n    number -= 1\n  return total\n\nprint(factorial(5))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python program by introducing several code refactoring techniques.\n\n### Input:\ndef factorial(number):\n\tif (number == 0):\n\t\treturn 1\n\telse:\n\t\treturn number * factorial(number - 1)\n \nprint(factorial(5))\n\n### Output:\ndef factorial(number):\n  total = 1\n  while number > 0: \n    total *= number\n    number -= 1\n  return total\n\nprint(factorial(5))"}
{"instruction":"Write a Python function to get the maximum and minimum values in a given list.","input":"Not applicable","output":"def get_max_min(lst):\n min_value = lst[0]\n max_value = lst[0]\n \n for i in range(1, len(lst)):\n  if lst[i] > max_value:\n   max_value = lst[i]\n  if lst[i] < min_value:\n   min_value = lst[i]\n \n return (min_value, max_value)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to get the maximum and minimum values in a given list.\n\n### Input:\nNot applicable\n\n### Output:\ndef get_max_min(lst):\n min_value = lst[0]\n max_value = lst[0]\n \n for i in range(1, len(lst)):\n  if lst[i] > max_value:\n   max_value = lst[i]\n  if lst[i] < min_value:\n   min_value = lst[i]\n \n return (min_value, max_value)"}
{"instruction":"Generate a python script which calculates the average of ten numbers stored in a list.","input":"[4, 6, 8, 10, 11, 12, 22, 34, 36, 37]","output":"my_list = [4, 6, 8, 10, 11, 12, 22, 34, 36, 37] \n  \n# calculate sum of the list numbers \nsum_numbers = sum(my_list) \n  \n# length of the list \nlength = len(my_list) \n  \n# average of the list \naverage = sum_numbers\/length \n  \n# print the result \nprint(average)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python script which calculates the average of ten numbers stored in a list.\n\n### Input:\n[4, 6, 8, 10, 11, 12, 22, 34, 36, 37]\n\n### Output:\nmy_list = [4, 6, 8, 10, 11, 12, 22, 34, 36, 37] \n  \n# calculate sum of the list numbers \nsum_numbers = sum(my_list) \n  \n# length of the list \nlength = len(my_list) \n  \n# average of the list \naverage = sum_numbers\/length \n  \n# print the result \nprint(average)"}
{"instruction":"Create a k-Nearest Neighbors (k-NN) classifier in Python to predict whether an individual earns more or less than $50,000 per year.","input":"[[44, 'M', 17, 0, 0, 'high school', 44000], [38, 'M', 9, 4, 0, 'Bachelor's degree', 55000], [30, 'F', 12, 2, 0, 'Master's degree', 48000]]","output":"import numpy as np \n\nclass KNNClassifier:\n def __init__(self, k):\n self.k = k\n\n def fit(self, X, y):\n self.X_train = X\n self.y_train = y\n\n def predict(self, X):\n predictions = []\n \n for row in X:\n distances = []\n for train_row in self.X_train:\n distances.append(np.linalg.norm(row - train_row))\n \n sorted_distances = np.argsort(distances) \n \n top_k_distances = sorted_distances[:self.k]\n \n top_k_labels = [self.y_train[i] for i in top_k_distances] \n \n label_counts = {}\n for label in top_k_labels:\n label_counts[label] = label_counts.get(label, 0) + 1\n \n sorted_label_counts = sorted(label_counts.items(), key = lambda x: x[1], reverse=True)\n \n predictions.append(sorted_label_counts[0][0])\n\n return predictions","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a k-Nearest Neighbors (k-NN) classifier in Python to predict whether an individual earns more or less than $50,000 per year.\n\n### Input:\n[[44, 'M', 17, 0, 0, 'high school', 44000], [38, 'M', 9, 4, 0, 'Bachelor's degree', 55000], [30, 'F', 12, 2, 0, 'Master's degree', 48000]]\n\n### Output:\nimport numpy as np \n\nclass KNNClassifier:\n def __init__(self, k):\n self.k = k\n\n def fit(self, X, y):\n self.X_train = X\n self.y_train = y\n\n def predict(self, X):\n predictions = []\n \n for row in X:\n distances = []\n for train_row in self.X_train:\n distances.append(np.linalg.norm(row - train_row))\n \n sorted_distances = np.argsort(distances) \n \n top_k_distances = sorted_distances[:self.k]\n \n top_k_labels = [self.y_train[i] for i in top_k_distances] \n \n label_counts = {}\n for label in top_k_labels:\n label_counts[label] = label_counts.get(label, 0) + 1\n \n sorted_label_counts = sorted(label_counts.items(), key = lambda x: x[1], reverse=True)\n \n predictions.append(sorted_label_counts[0][0])\n\n return predictions"}
{"instruction":"Design an algorithm in Python that checks if a given number is even or odd.","input":"","output":"def is_even(n):\n   if n % 2 == 0:\n    return True\n   else:\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that checks if a given number is even or odd.\n\n### Input:\n\n\n### Output:\ndef is_even(n):\n   if n % 2 == 0:\n    return True\n   else:\n    return False"}
{"instruction":"Construct a Python program to convert degrees Celsius to Fahrenheit.","input":"C = 32","output":"#Program to convert Celsius to Fahrenheit\n\n#user input\nC = 32\n\n#Celsius to Fahrenheit conversion\nF = (C*9\/5)+32\n\n#print the result\nprint('%0.2f degree Celsius is equal to %0.2f degree Fahrenheit' %(C, F))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to convert degrees Celsius to Fahrenheit.\n\n### Input:\nC = 32\n\n### Output:\n#Program to convert Celsius to Fahrenheit\n\n#user input\nC = 32\n\n#Celsius to Fahrenheit conversion\nF = (C*9\/5)+32\n\n#print the result\nprint('%0.2f degree Celsius is equal to %0.2f degree Fahrenheit' %(C, F))"}
{"instruction":"Write a python script to print a table of squares and cubes of natural numbers upto 10.","input":"","output":"def print_squares_and_cubes_table():\n  # Print top of the table\n  print(\"n\\tSquare\\tCube\")\n\n  # Print the squares and cubes of natural numbers from 1 to 10\n  for n in range(1, 11):\n    print(n,\"\\t\", n*n,\"\\t\",n*n*n)\n\n# Driver code\nprint_squares_and_cubes_table()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to print a table of squares and cubes of natural numbers upto 10.\n\n### Input:\n\n\n### Output:\ndef print_squares_and_cubes_table():\n  # Print top of the table\n  print(\"n\\tSquare\\tCube\")\n\n  # Print the squares and cubes of natural numbers from 1 to 10\n  for n in range(1, 11):\n    print(n,\"\\t\", n*n,\"\\t\",n*n*n)\n\n# Driver code\nprint_squares_and_cubes_table()"}
{"instruction":"Design a Python program that generates a 10 x 10 multiplication table.","input":"","output":"for i in range(1, 11):\n  for j in range(1, 11):\n    print(f\"{i} x {j} = {i * j}\")\n  print()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program that generates a 10 x 10 multiplication table.\n\n### Input:\n\n\n### Output:\nfor i in range(1, 11):\n  for j in range(1, 11):\n    print(f\"{i} x {j} = {i * j}\")\n  print()"}
{"instruction":"Create a machine learning model in Python to predict housing prices given a dataset.","input":"","output":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Read in dataset\ndata = pd.read_csv('housing_data.csv')\n\n# Split data into features and targets\nX = data.drop('HousingPrice', axis=1)\ny = data['HousingPrice']\n\n# Split data into training and testing datasets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initialize linear regression model\nmodel = LinearRegression()\n\n# Fit model to training data\nmodel.fit(X_train, y_train)\n\n# Make prediction on testing data\ny_pred = model.predict(X_test)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python to predict housing prices given a dataset.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Read in dataset\ndata = pd.read_csv('housing_data.csv')\n\n# Split data into features and targets\nX = data.drop('HousingPrice', axis=1)\ny = data['HousingPrice']\n\n# Split data into training and testing datasets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initialize linear regression model\nmodel = LinearRegression()\n\n# Fit model to training data\nmodel.fit(X_train, y_train)\n\n# Make prediction on testing data\ny_pred = model.predict(X_test)"}
{"instruction":"Create an algorithm in Python to calculate the maximum sum of a sub-array of an int array.","input":"Given an array arr = [2, -1, 3, 5, -7, 3].","output":"def max_sum_subarray(arr): \n    n = len(arr) \n    max_sum = 0\n  \n    for i in range(n): \n        sum = arr[i] \n        for j in range(i + 1, n): \n            sum += arr[j] \n            if sum > max_sum: \n                max_sum = sum \n\n    return max_sum \n\n# Test array \narr = [2, -1, 3, 5, -7, 3] \n\n# Function Call \nmax_sum = max_sum_subarray(arr) \n  \n# Printing maximum sum \nprint(\"Maximum sum of the sub-array is\", max_sum) \n\n# Output: Maximum sum of the sub-array is 8","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to calculate the maximum sum of a sub-array of an int array.\n\n### Input:\nGiven an array arr = [2, -1, 3, 5, -7, 3].\n\n### Output:\ndef max_sum_subarray(arr): \n    n = len(arr) \n    max_sum = 0\n  \n    for i in range(n): \n        sum = arr[i] \n        for j in range(i + 1, n): \n            sum += arr[j] \n            if sum > max_sum: \n                max_sum = sum \n\n    return max_sum \n\n# Test array \narr = [2, -1, 3, 5, -7, 3] \n\n# Function Call \nmax_sum = max_sum_subarray(arr) \n  \n# Printing maximum sum \nprint(\"Maximum sum of the sub-array is\", max_sum) \n\n# Output: Maximum sum of the sub-array is 8"}
{"instruction":"Create a function in Python that takes three numbers and returns the maximum value.","input":"","output":"def max_value(num1, num2, num3):\n    max_val = num1\n    if num2 > max_val:\n        max_val = num2\n    if num3 > max_val:\n        max_val = num3\n    return max_val","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes three numbers and returns the maximum value.\n\n### Input:\n\n\n### Output:\ndef max_value(num1, num2, num3):\n    max_val = num1\n    if num2 > max_val:\n        max_val = num2\n    if num3 > max_val:\n        max_val = num3\n    return max_val"}
{"instruction":"Generate a random password using the Python function provided in the input.","input":"def randomString(stringLength=8):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))","output":"print(randomString())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random password using the Python function provided in the input.\n\n### Input:\ndef randomString(stringLength=8):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\n### Output:\nprint(randomString())"}
{"instruction":"Create a Python script that takes a string of comma-separated temperatures and returns a minimum, maximum, and median value.","input":"Input String: 82.0, 84.3, 69.6, 78.2","output":"input_string = '82.0, 84.3, 69.6, 78.2'\n\ntemperatures = [float(temp) for temp in input_string.split(',')]\n\nmin_temp = min(temperatures)\nmax_temp = max(temperatures)\nmedian_temp = statistics.median(temperatures)\n\nprint(f'Minimum temperature: {min_temp}, Maximum temperature: {max_temp}, Median temperature: {median_temp}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes a string of comma-separated temperatures and returns a minimum, maximum, and median value.\n\n### Input:\nInput String: 82.0, 84.3, 69.6, 78.2\n\n### Output:\ninput_string = '82.0, 84.3, 69.6, 78.2'\n\ntemperatures = [float(temp) for temp in input_string.split(',')]\n\nmin_temp = min(temperatures)\nmax_temp = max(temperatures)\nmedian_temp = statistics.median(temperatures)\n\nprint(f'Minimum temperature: {min_temp}, Maximum temperature: {max_temp}, Median temperature: {median_temp}')"}
{"instruction":"Generate a class in Python to represent a Person with the following attributes: name, age, gender.","input":"","output":"class Person:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n \n    def get_name(self):\n        return self.name\n \n    def get_age(self):\n        return self.age\n \n    def get_gender(self):\n        return self.gender","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a class in Python to represent a Person with the following attributes: name, age, gender.\n\n### Input:\n\n\n### Output:\nclass Person:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n \n    def get_name(self):\n        return self.name\n \n    def get_age(self):\n        return self.age\n \n    def get_gender(self):\n        return self.gender"}
{"instruction":"Write a code snippet in Python to create a Pandas Dataframe with three columns containing random numbers in the range 1-1000.","input":"Not applicable","output":"import pandas as pd\nimport numpy as np\n\n# Create a Dataframe with 3 Columns and 10 Rows\ndf = pd.DataFrame(np.random.randint(1,1000,size=(10, 3)),\n columns=['col1', 'col2','col3'])\n \nprint(df)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet in Python to create a Pandas Dataframe with three columns containing random numbers in the range 1-1000.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nimport numpy as np\n\n# Create a Dataframe with 3 Columns and 10 Rows\ndf = pd.DataFrame(np.random.randint(1,1000,size=(10, 3)),\n columns=['col1', 'col2','col3'])\n \nprint(df)"}
{"instruction":"Create a Python script to scrape the titles of the latest 100 articles from a news website.","input":"URL of the news website","output":"import requests\nfrom bs4 import BeautifulSoup\n\n# Get the webpage\nurl = \"http:\/\/example.com\/news\"\npage = requests.get(url)\n\n# Parse the page\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Get the titles\ntitles = soup.find_all('a', class_=\"article-title\")\ntitles = [title.get_text() for title in titles][:100]\n\n# Print the titles\nfor title in titles:\n    print(titles)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to scrape the titles of the latest 100 articles from a news website.\n\n### Input:\nURL of the news website\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Get the webpage\nurl = \"http:\/\/example.com\/news\"\npage = requests.get(url)\n\n# Parse the page\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Get the titles\ntitles = soup.find_all('a', class_=\"article-title\")\ntitles = [title.get_text() for title in titles][:100]\n\n# Print the titles\nfor title in titles:\n    print(titles)"}
{"instruction":"Create a Python program that uses a loop to produce the following output.","input":"Not applicable","output":"for i in range(1,11):\n if i % 2 == 0:\n print('{} is even'.format(i))\n else:\n print('{} is odd'.format(i))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses a loop to produce the following output.\n\n### Input:\nNot applicable\n\n### Output:\nfor i in range(1,11):\n if i % 2 == 0:\n print('{} is even'.format(i))\n else:\n print('{} is odd'.format(i))"}
{"instruction":"Design a loop in Python that runs until the user enters q.","input":"","output":"while True:\n    user_input = input(\"Please enter something or 'q' to exit: \")\n    \n    if user_input == 'q':\n        break\n    else:\n        # Do something with the input","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a loop in Python that runs until the user enters q.\n\n### Input:\n\n\n### Output:\nwhile True:\n    user_input = input(\"Please enter something or 'q' to exit: \")\n    \n    if user_input == 'q':\n        break\n    else:\n        # Do something with the input"}
{"instruction":"Create a neural network in Python that can recognize handwritten numbers.","input":"","output":"import tensorflow as tf\n\n# Build the model\nmodel = tf.keras.Sequential()\n\nmodel.add(tf.keras.layers.Conv2D(filters=16, kernel_size=(3,3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(tf.keras.layers.MaxPooling2D(2,2))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(2,2))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Flatten())\n\nmodel.add(tf.keras.layers.Dense(64, activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy', \n              metrics=['accuracy'])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network in Python that can recognize handwritten numbers.\n\n### Input:\n\n\n### Output:\nimport tensorflow as tf\n\n# Build the model\nmodel = tf.keras.Sequential()\n\nmodel.add(tf.keras.layers.Conv2D(filters=16, kernel_size=(3,3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(tf.keras.layers.MaxPooling2D(2,2))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(2,2))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Flatten())\n\nmodel.add(tf.keras.layers.Dense(64, activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy', \n              metrics=['accuracy'])"}
{"instruction":"Generate a basic REST API with authentication and endpoints in Python.","input":"Not applicable","output":"from flask import Flask, request\nfrom flask_restful import Resource, Api\nfrom flask_jwt import JWT, jwt_required\n\napp = Flask(name)\napi = Api(app)\n\n# Setup JWT authentication\napp.secret_key = 'super-secret-key'\njwt = JWT(app, authenticate, identity)\n\nitems = []\n\nclass Item(Resource):\n @jwt_required()\n def get(self, name):\n for item in items:\n if item['name'] == name:\n return item\n return {'item': None}, 404\n\n def post(self, name):\n new_item = {'name': name, 'price': 12.00}\n items.append(new_item)\n return new_item, 201\n\n\nclass ItemList(Resource):\n def get(self):\n return {'items': items}\n\n\napi.add_resource(Item, '\/item\/<string:name>')\napi.add_resource(ItemList, '\/items')\n\nif name == 'main':\n app.run(port=5000, debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a basic REST API with authentication and endpoints in Python.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request\nfrom flask_restful import Resource, Api\nfrom flask_jwt import JWT, jwt_required\n\napp = Flask(name)\napi = Api(app)\n\n# Setup JWT authentication\napp.secret_key = 'super-secret-key'\njwt = JWT(app, authenticate, identity)\n\nitems = []\n\nclass Item(Resource):\n @jwt_required()\n def get(self, name):\n for item in items:\n if item['name'] == name:\n return item\n return {'item': None}, 404\n\n def post(self, name):\n new_item = {'name': name, 'price': 12.00}\n items.append(new_item)\n return new_item, 201\n\n\nclass ItemList(Resource):\n def get(self):\n return {'items': items}\n\n\napi.add_resource(Item, '\/item\/<string:name>')\napi.add_resource(ItemList, '\/items')\n\nif name == 'main':\n app.run(port=5000, debug=True)"}
{"instruction":"Modify the following Python funciton to return the second largest element in the list.","input":"x = [1, 2, 3, 4, 5]","output":"def second_largest(x):\n    x.sort()\n    return x[-2]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following Python funciton to return the second largest element in the list.\n\n### Input:\nx = [1, 2, 3, 4, 5]\n\n### Output:\ndef second_largest(x):\n    x.sort()\n    return x[-2]"}
{"instruction":"Create a Python script that takes in a string and returns a dictionary of the number of times each character appears in the string.","input":"Not applicable","output":"def character_count(str):\n    d = dict()\n    for c in str:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    return d","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes in a string and returns a dictionary of the number of times each character appears in the string.\n\n### Input:\nNot applicable\n\n### Output:\ndef character_count(str):\n    d = dict()\n    for c in str:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    return d"}
{"instruction":"Create a Python program that takes a list and replaces all negative numbers in the list with zeros.","input":"[-1, 2, -3, 4, -5]","output":"def replace_negative_with_zero(numbers):\n    new_list = []\n\n    for num in numbers:\n        if num < 0:\n            new_list.append(0)\n        else:\n            new_list.append(num)\n    return new_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a list and replaces all negative numbers in the list with zeros.\n\n### Input:\n[-1, 2, -3, 4, -5]\n\n### Output:\ndef replace_negative_with_zero(numbers):\n    new_list = []\n\n    for num in numbers:\n        if num < 0:\n            new_list.append(0)\n        else:\n            new_list.append(num)\n    return new_list"}
{"instruction":"Generate a Python code to solve the given knapsack problem","input":"weights = [1, 3, 4, 5] \nvalues = [15, 50, 60, 30] \nmax_weight = 8","output":"# Function to calculate the maximum value \ndef knapSack(weights, values, max_weight): \n    n = len(weights)\n\n    # Array with one extra item \n    table = [[0 for x in range(max_weight + 1)] for x in range(n + 1)] \n\n    # Build table memonizing the subproblems \n    for i in range(n + 1): \n        for w in range(max_weight + 1): \n            if i == 0 or w == 0: \n                table[i][w] = 0\n            elif weights[i-1] <= w: \n                table[i][w] = max(values[i-1] + table[i-1][w-weights[i-1]], table[i-1][w]) \n            else: \n                table[i][w] = table[i-1][w] \n\n    # Handles the case when there is no item in the knapsack \n    # Maximum value is 0 \n    return table[n][max_weight]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code to solve the given knapsack problem\n\n### Input:\nweights = [1, 3, 4, 5] \nvalues = [15, 50, 60, 30] \nmax_weight = 8\n\n### Output:\n# Function to calculate the maximum value \ndef knapSack(weights, values, max_weight): \n    n = len(weights)\n\n    # Array with one extra item \n    table = [[0 for x in range(max_weight + 1)] for x in range(n + 1)] \n\n    # Build table memonizing the subproblems \n    for i in range(n + 1): \n        for w in range(max_weight + 1): \n            if i == 0 or w == 0: \n                table[i][w] = 0\n            elif weights[i-1] <= w: \n                table[i][w] = max(values[i-1] + table[i-1][w-weights[i-1]], table[i-1][w]) \n            else: \n                table[i][w] = table[i-1][w] \n\n    # Handles the case when there is no item in the knapsack \n    # Maximum value is 0 \n    return table[n][max_weight]"}
{"instruction":"Edit the following Python code to implement case-insensitivity and replace \"word\" with a user-defined variable.","input":"word = 'SUPER'\n\nif word == 'super' or word == 'SUPER':\n print('Object found')","output":"word = input('Enter word: ')\n\nif word.lower() == 'super':\n print('Object found')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code to implement case-insensitivity and replace \"word\" with a user-defined variable.\n\n### Input:\nword = 'SUPER'\n\nif word == 'super' or word == 'SUPER':\n print('Object found')\n\n### Output:\nword = input('Enter word: ')\n\nif word.lower() == 'super':\n print('Object found')"}
{"instruction":"Develop a Python program to check if a number is divisible by 3.","input":"","output":"def is_divisible_by_3(num):\n if num % 3 == 0:\n return True\n return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to check if a number is divisible by 3.\n\n### Input:\n\n\n### Output:\ndef is_divisible_by_3(num):\n if num % 3 == 0:\n return True\n return False"}
{"instruction":"Evaluate a given mathematical expression using Python.","input":"2 + (3 * 5)","output":"def eval_expr(expr):\n  return eval(expr)\n\nprint(eval_expr(\"2 + (3 * 5)\"))\n\n# Output\n# 17","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEvaluate a given mathematical expression using Python.\n\n### Input:\n2 + (3 * 5)\n\n### Output:\ndef eval_expr(expr):\n  return eval(expr)\n\nprint(eval_expr(\"2 + (3 * 5)\"))\n\n# Output\n# 17"}
{"instruction":"This code is a Python program that scrapes the ESPN FC website for content. To run the program, you need to import the necessary libraries, set the output path for Windows or Mac environments, and define the team URLs. The program will then parse the team news for each team URL and output the results to a text file. To download images, use the downloadImage function.","input":"","output":"# -*- coding: utf-8 -*-\n'''\nCreated on Jan 30, 2015\nModified on Jan 30, 2015\n@author: rainier.madruga@gmail.com\nA simple Python Program to scrape the ESPN FC website for content.\n'''\n'''\nVersion Number of Script\n'''\nversion = '0.01.a'\n\n# Import Libraries needed for Scraping the various web pages\nfrom bs4 import BeautifulSoup\nimport urllib2\nimport datetime\nimport requests\nimport os\nimport platform\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n\n# Establish the process Date & Time Stamp\nts = datetime.datetime.now().strftime(\"%H:%M:%S\")\nds = datetime.datetime.now().strftime(\"%Y-%m-%d\")\ndate = datetime.datetime.now().strftime(\"%Y%m%d\")\n\n# Updates the Time Stamp\ndef updateTS():\n    update = datetime.datetime.now().strftime(\"%H:%M:%S\")\n    return update\n\n# Download Image\ndef downloadImage(imageURL, localFileName):\n    response = requests.get(imageURL)\n    if response.status_code == 200:\n        print 'Downloading %s...' % (localFileName)\n    with open(localFileName, 'wb') as fo:\n        for chunk in response.iter_content(4096):\n            fo.write(chunk)\n    return True\n\n# Program Version & System Variables\nparseVersion = 'ESPN Premier League Team News ' + version\nprint ds + ' :: ' + ts + ' :: ' + parseVersion\n\n# Set Output Path for Windows or Mac environments\nos_System = platform.system()\nwin_BasePath = \"C:\/Users\/Rainier\/Documents\/GitHub\/python-soccer\"\n\nif os_System == \"Windows\":\n    outputPath = win_BasePath + \"\/PL-Data\/\"\n    outputImgPath = win_BasePath + \"\/PL-Data\/imgs\/\"\n    outputTeamPath = win_BasePath + \"\/PL-Data\/teams\/\"\n    outputMatchPath = win_BasePath + \"\/PL-Data\/match\/\"\nelse:\n    outputPath = 'PL-Data\/'\n    outputImgPath = 'PL-Data\/imgs\/'\n    outputTeamPath = 'PL-Data\/teams\/'\n    outputMatchPath = 'PL-Data\/match\/'\n\nhr = \" >>> *** ====================================================== *** <<<\"\nshr = \" >>> *** ==================== *** <<<\"\n\nprefixBBC = \"http:\/\/www.bbc.com\"\nprefixESPN = \"http:\/\/www.espnfc.us\"\n\nteamURLs = ['\/club\/arsenal\/359\/index','\/club\/aston-villa\/362\/index','\/club\/burnley\/379\/index','\/club\/chelsea\/363\/index','\/club\/crystal-palace\/384\/index','\/club\/everton\/368\/index','\/club\/hull-city\/306\/index','\/club\/leicester-city\/375\/index','\/club\/liverpool\/364\/index','\/club\/manchester-city\/382\/index','\/club\/manchester-united\/360\/index','\/club\/newcastle-united\/361\/index','\/club\/queens-park-rangers\/334\/index','\/club\/southampton\/376\/index','\/club\/stoke-city\/336\/index','\/club\/sunderland\/366\/index','\/club\/swansea-city\/318\/index','\/club\/tottenham-hotspur\/367\/index','\/club\/west-bromwich-albion\/383\/index','\/club\/west-ham-united\/371\/index']\n\ndef teamNews(x):\n\tteamURL = x\n\tteamName = x\n\tteamName = teamName[6:len(teamName)-10]\n\tteamURL = prefixESPN + teamURL\n\tteamHTML = urllib2.urlopen(teamURL)\n\tteamSoup = BeautifulSoup(teamHTML)\t\n\trecentNews = teamSoup.find(\"div\", {\"id\":\"feed\"})\n\trecentNewsItems = recentNews.find_all(\"div\", {\"class\":\"feed-item-content\"})\n\trecapOutput = []\n\tprint \"Team News Parsed :: \" + teamName\n\tfor i in recentNewsItems:\n\t\trecapPhotoItem = i.find(\"div\", {\"class\":\"thumbnail picture\"})\n\n\t\tif len(i) > 3:\n\t\t\t# recapPhotoItem = recapPhotoItem.find(\"img\")\n\t\t\t# print recapPhotoItem[\"src\"]\n\t\t\t# with open(outputTxt, \"a\") as f:\n\t\t\t#\tf.write('\\n' + shr + '\\n')\n\t\t\t#\tf.write(i.prettify())\n\t\t\t#\tf.write('\\n' + shr + '\\n')\n\t\t\t#\tf.close()\n\t\t\t# print shr\n\t\t\trecapHeadline = i.find(\"h2\")\n\t\t\trecapHeadlineDetails = recapHeadline.find(\"a\")\n\t\t\trecapHeadlineDetails = recapHeadlineDetails[\"href\"]\n\t\t\trecapHeadline = recapHeadline.get_text(strip=True)\n\t\t\trecapAge = i.find(\"span\", {\"class\":\"age\"})\n\t\t\trecapAge = recapAge.get_text(strip=True)\n\t\t\trecapOutput.append(date + \"|\" + teamName + \"|\" + recapHeadline + \"|\" + recapHeadlineDetails + \"|\" + recapAge)\n\t\t\t#print shr\n\t\t\t# print i.prettify()\n\t\t\t#print recapHeadlineDetails \n\t\t\t#print shr\n\t\t\t#recapDetails = recapHeadline.find(\"a\")\n\t\t\t#recapDetails = recapDetails[\"href\"]\n\t\t\t#print recapDetails\n\t\t\t# print recapAge.get_text(strip=True)\n\t\t\t\n\t\t\t#print updateTS()\n\t\t\t#print shr\n\t\t\t# print i\n\t\telse:\n\t\t\t#print i\n\t\t\t#print shr\n\t\t\trecapGameOpponents = i.find_all(\"div\", {\"class\":\"team-name\"})\n\t\t\trecapGameScore = i.find_all(\"div\", {\"class\":\"team-score\"})\n\t\t\trecapGameStatus = i.find(\"div\", {\"class\":\"game-info\"})\n\t\t\trecapGameHome = recapGameOpponents[0].get_text(strip=True)\n\t\t\trecapGameAway = recapGameOpponents[1].get_text(strip=True)\n\t\t\trecapHomeScore = recapGameScore[0].get_text(strip=True)\n\t\t\trecapAwayScore = recapGameScore[1].get_text(strip=True)\n\t\t\t#recapGameInfo = i.find(\"div\", {\"clas=\":\"game-info\"})\n\t\t\trecapOutput.append(date + \"|\" + teamName + \"|\" + recapGameHome + \" \" + recapHomeScore +  \" v. \" + recapAwayScore + \" \"+ recapGameAway + \"||\")\n\t\t\t# print i\n\tfor i in recapOutput:\n\t\tprint i\n\tprint hr \n\treturn recapOutput\n\nteamNewstxt = 'teamNews.txt'\nwith open(teamNewstxt, \"w\") as f:\n   \tf.write(ds + \" :: \" + updateTS() + \" :: \" + parseVersion + '\\n' )\n   \tf.close()\n\nfor i in teamURLs:\n\tfor x in teamNews(i):\n\t\twith open(teamNewstxt, \"a\") as f:\n\t\t\tf.write(x + '\\n')\n\t\t\tf.close()\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a Python program that scrapes the ESPN FC website for content. To run the program, you need to import the necessary libraries, set the output path for Windows or Mac environments, and define the team URLs. The program will then parse the team news for each team URL and output the results to a text file. To download images, use the downloadImage function.\n\n### Input:\n\n\n### Output:\n# -*- coding: utf-8 -*-\n'''\nCreated on Jan 30, 2015\nModified on Jan 30, 2015\n@author: rainier.madruga@gmail.com\nA simple Python Program to scrape the ESPN FC website for content.\n'''\n'''\nVersion Number of Script\n'''\nversion = '0.01.a'\n\n# Import Libraries needed for Scraping the various web pages\nfrom bs4 import BeautifulSoup\nimport urllib2\nimport datetime\nimport requests\nimport os\nimport platform\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n\n# Establish the process Date & Time Stamp\nts = datetime.datetime.now().strftime(\"%H:%M:%S\")\nds = datetime.datetime.now().strftime(\"%Y-%m-%d\")\ndate = datetime.datetime.now().strftime(\"%Y%m%d\")\n\n# Updates the Time Stamp\ndef updateTS():\n    update = datetime.datetime.now().strftime(\"%H:%M:%S\")\n    return update\n\n# Download Image\ndef downloadImage(imageURL, localFileName):\n    response = requests.get(imageURL)\n    if response.status_code == 200:\n        print 'Downloading %s...' % (localFileName)\n    with open(localFileName, 'wb') as fo:\n        for chunk in response.iter_content(4096):\n            fo.write(chunk)\n    return True\n\n# Program Version & System Variables\nparseVersion = 'ESPN Premier League Team News ' + version\nprint ds + ' :: ' + ts + ' :: ' + parseVersion\n\n# Set Output Path for Windows or Mac environments\nos_System = platform.system()\nwin_BasePath = \"C:\/Users\/Rainier\/Documents\/GitHub\/python-soccer\"\n\nif os_System == \"Windows\":\n    outputPath = win_BasePath + \"\/PL-Data\/\"\n    outputImgPath = win_BasePath + \"\/PL-Data\/imgs\/\"\n    outputTeamPath = win_BasePath + \"\/PL-Data\/teams\/\"\n    outputMatchPath = win_BasePath + \"\/PL-Data\/match\/\"\nelse:\n    outputPath = 'PL-Data\/'\n    outputImgPath = 'PL-Data\/imgs\/'\n    outputTeamPath = 'PL-Data\/teams\/'\n    outputMatchPath = 'PL-Data\/match\/'\n\nhr = \" >>> *** ====================================================== *** <<<\"\nshr = \" >>> *** ==================== *** <<<\"\n\nprefixBBC = \"http:\/\/www.bbc.com\"\nprefixESPN = \"http:\/\/www.espnfc.us\"\n\nteamURLs = ['\/club\/arsenal\/359\/index','\/club\/aston-villa\/362\/index','\/club\/burnley\/379\/index','\/club\/chelsea\/363\/index','\/club\/crystal-palace\/384\/index','\/club\/everton\/368\/index','\/club\/hull-city\/306\/index','\/club\/leicester-city\/375\/index','\/club\/liverpool\/364\/index','\/club\/manchester-city\/382\/index','\/club\/manchester-united\/360\/index','\/club\/newcastle-united\/361\/index','\/club\/queens-park-rangers\/334\/index','\/club\/southampton\/376\/index','\/club\/stoke-city\/336\/index','\/club\/sunderland\/366\/index','\/club\/swansea-city\/318\/index','\/club\/tottenham-hotspur\/367\/index','\/club\/west-bromwich-albion\/383\/index','\/club\/west-ham-united\/371\/index']\n\ndef teamNews(x):\n\tteamURL = x\n\tteamName = x\n\tteamName = teamName[6:len(teamName)-10]\n\tteamURL = prefixESPN + teamURL\n\tteamHTML = urllib2.urlopen(teamURL)\n\tteamSoup = BeautifulSoup(teamHTML)\t\n\trecentNews = teamSoup.find(\"div\", {\"id\":\"feed\"})\n\trecentNewsItems = recentNews.find_all(\"div\", {\"class\":\"feed-item-content\"})\n\trecapOutput = []\n\tprint \"Team News Parsed :: \" + teamName\n\tfor i in recentNewsItems:\n\t\trecapPhotoItem = i.find(\"div\", {\"class\":\"thumbnail picture\"})\n\n\t\tif len(i) > 3:\n\t\t\t# recapPhotoItem = recapPhotoItem.find(\"img\")\n\t\t\t# print recapPhotoItem[\"src\"]\n\t\t\t# with open(outputTxt, \"a\") as f:\n\t\t\t#\tf.write('\\n' + shr + '\\n')\n\t\t\t#\tf.write(i.prettify())\n\t\t\t#\tf.write('\\n' + shr + '\\n')\n\t\t\t#\tf.close()\n\t\t\t# print shr\n\t\t\trecapHeadline = i.find(\"h2\")\n\t\t\trecapHeadlineDetails = recapHeadline.find(\"a\")\n\t\t\trecapHeadlineDetails = recapHeadlineDetails[\"href\"]\n\t\t\trecapHeadline = recapHeadline.get_text(strip=True)\n\t\t\trecapAge = i.find(\"span\", {\"class\":\"age\"})\n\t\t\trecapAge = recapAge.get_text(strip=True)\n\t\t\trecapOutput.append(date + \"|\" + teamName + \"|\" + recapHeadline + \"|\" + recapHeadlineDetails + \"|\" + recapAge)\n\t\t\t#print shr\n\t\t\t# print i.prettify()\n\t\t\t#print recapHeadlineDetails \n\t\t\t#print shr\n\t\t\t#recapDetails = recapHeadline.find(\"a\")\n\t\t\t#recapDetails = recapDetails[\"href\"]\n\t\t\t#print recapDetails\n\t\t\t# print recapAge.get_text(strip=True)\n\t\t\t\n\t\t\t#print updateTS()\n\t\t\t#print shr\n\t\t\t# print i\n\t\telse:\n\t\t\t#print i\n\t\t\t#print shr\n\t\t\trecapGameOpponents = i.find_all(\"div\", {\"class\":\"team-name\"})\n\t\t\trecapGameScore = i.find_all(\"div\", {\"class\":\"team-score\"})\n\t\t\trecapGameStatus = i.find(\"div\", {\"class\":\"game-info\"})\n\t\t\trecapGameHome = recapGameOpponents[0].get_text(strip=True)\n\t\t\trecapGameAway = recapGameOpponents[1].get_text(strip=True)\n\t\t\trecapHomeScore = recapGameScore[0].get_text(strip=True)\n\t\t\trecapAwayScore = recapGameScore[1].get_text(strip=True)\n\t\t\t#recapGameInfo = i.find(\"div\", {\"clas=\":\"game-info\"})\n\t\t\trecapOutput.append(date + \"|\" + teamName + \"|\" + recapGameHome + \" \" + recapHomeScore +  \" v. \" + recapAwayScore + \" \"+ recapGameAway + \"||\")\n\t\t\t# print i\n\tfor i in recapOutput:\n\t\tprint i\n\tprint hr \n\treturn recapOutput\n\nteamNewstxt = 'teamNews.txt'\nwith open(teamNewstxt, \"w\") as f:\n   \tf.write(ds + \" :: \" + updateTS() + \" :: \" + parseVersion + '\\n' )\n   \tf.close()\n\nfor i in teamURLs:\n\tfor x in teamNews(i):\n\t\twith open(teamNewstxt, \"a\") as f:\n\t\t\tf.write(x + '\\n')\n\t\t\tf.close()\n"}
{"instruction":"Create an AI chatbot that can answer basic student questions, such as \u201cWhat is the deadline for the assignment?\u201d","input":"Not applicable","output":"import nltk\nimport numpy as np\nimport random\nimport string # to process standard python strings\n\n# Read in the data\nf = open('student_questions.txt','r',errors = 'ignore')\ndata = f.read()\n\nconversationsPoints = data.lower().split(\"\n\n\")\n\n# Create a dictionary that maps each word to its occurrence\nword2count = {}\nfor conversation in conversationsPoints:\n for word in conversation.split():\n if word not in word2count.keys():\n word2count[word] = 1\n else:\n word2count[word] += 1\n\n# Tokenize the words\nwords = sorted(list(word2count.keys()))\n\n# Create the token_to_int dictionary\ntoken2int = {}\nint2token = {}\n\nfor i, word in enumerate(words):\n token2int[word] = i\n int2token[i] = word\n\n# Create input and output datasets\nX = []\nY = []\n\nfor conversation in conversationsPoints:\n sentence = conversation.lower().split()\n for i in range(1,len(sentence)):\n x = token2int[sentence[i-1]]\n y = token2int[sentence[i]]\n X.append(x)\n Y.append(y)\n\n# One hot encode our input and output data\nX_one_hot = np.zeros((len(X), len(words)), dtype=np.int32)\nY_one_hot = np.zeros((len(Y), len(words)), dtype=np.int32)\n\nfor i, x in enumerate(X):\nX_one_hot[i][x] = 1\n\nfor i, y in enumerate(Y):\nY_one_hot[i][y] = 1\n\n\n# Create and train the chatbot model\nmodel = MyChatbot()\nmodel.fit(X_one_hot, Y_one_hot, epochs=500, batch_size=32)\n\n# Define bot response function\ndef bot_response(s):\n sentence = [word.lower() for word in s.split()]\n sentence = [token2int[word] for word in sentence]\n prediction = model.predict_single(sentence)\n int2word[prediction]\n return int2word[prediction]\n\n# Run the app\nwhile True:\n print('User: ', end='')\n s = input()\n response = bot_response(s)\n print('Chatbot: ' + response)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI chatbot that can answer basic student questions, such as \u201cWhat is the deadline for the assignment?\u201d\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\nimport numpy as np\nimport random\nimport string # to process standard python strings\n\n# Read in the data\nf = open('student_questions.txt','r',errors = 'ignore')\ndata = f.read()\n\nconversationsPoints = data.lower().split(\"\n\n\")\n\n# Create a dictionary that maps each word to its occurrence\nword2count = {}\nfor conversation in conversationsPoints:\n for word in conversation.split():\n if word not in word2count.keys():\n word2count[word] = 1\n else:\n word2count[word] += 1\n\n# Tokenize the words\nwords = sorted(list(word2count.keys()))\n\n# Create the token_to_int dictionary\ntoken2int = {}\nint2token = {}\n\nfor i, word in enumerate(words):\n token2int[word] = i\n int2token[i] = word\n\n# Create input and output datasets\nX = []\nY = []\n\nfor conversation in conversationsPoints:\n sentence = conversation.lower().split()\n for i in range(1,len(sentence)):\n x = token2int[sentence[i-1]]\n y = token2int[sentence[i]]\n X.append(x)\n Y.append(y)\n\n# One hot encode our input and output data\nX_one_hot = np.zeros((len(X), len(words)), dtype=np.int32)\nY_one_hot = np.zeros((len(Y), len(words)), dtype=np.int32)\n\nfor i, x in enumerate(X):\nX_one_hot[i][x] = 1\n\nfor i, y in enumerate(Y):\nY_one_hot[i][y] = 1\n\n\n# Create and train the chatbot model\nmodel = MyChatbot()\nmodel.fit(X_one_hot, Y_one_hot, epochs=500, batch_size=32)\n\n# Define bot response function\ndef bot_response(s):\n sentence = [word.lower() for word in s.split()]\n sentence = [token2int[word] for word in sentence]\n prediction = model.predict_single(sentence)\n int2word[prediction]\n return int2word[prediction]\n\n# Run the app\nwhile True:\n print('User: ', end='')\n s = input()\n response = bot_response(s)\n print('Chatbot: ' + response)"}
{"instruction":"Construct an algorithm in Python to print out the first 20 perfect squares.","input":"Not applicable","output":"perfect_squares = []\ni = 1\nwhile len(perfect_squares) < 20:\n perfect_square = i * i \n perfect_squares.append(perfect_square)\n i = i + 1\n\nprint(perfect_squares)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm in Python to print out the first 20 perfect squares.\n\n### Input:\nNot applicable\n\n### Output:\nperfect_squares = []\ni = 1\nwhile len(perfect_squares) < 20:\n perfect_square = i * i \n perfect_squares.append(perfect_square)\n i = i + 1\n\nprint(perfect_squares)"}
{"instruction":"Compose a Python program that takes in a list of strings and returns a list with duplicate strings removed.","input":"[\"Hello\", \"World\", \"Hello\", \"Goodbye\", \"Goodbye\", \"Welcome\"]","output":"def remove_duplicates(strs):\n    new_strs = [] \n    for i in strs: \n        if i not in new_strs: \n            new_strs.append(i) \n    return new_strs\n    \n# Driver Code\nstrs = [\"Hello\", \"World\", \"Hello\", \"Goodbye\", \"Goodbye\", \"Welcome\"]\nprint(remove_duplicates(strs))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python program that takes in a list of strings and returns a list with duplicate strings removed.\n\n### Input:\n[\"Hello\", \"World\", \"Hello\", \"Goodbye\", \"Goodbye\", \"Welcome\"]\n\n### Output:\ndef remove_duplicates(strs):\n    new_strs = [] \n    for i in strs: \n        if i not in new_strs: \n            new_strs.append(i) \n    return new_strs\n    \n# Driver Code\nstrs = [\"Hello\", \"World\", \"Hello\", \"Goodbye\", \"Goodbye\", \"Welcome\"]\nprint(remove_duplicates(strs))"}
{"instruction":"Design an object-oriented class in Python to represent a person's contact information","input":"Not applicable","output":"class Contact: \n    def __init__(self, name, phone, email):\n        self.name = name \n        self.phone = phone\n        self.email = email\n    \n    def get_name(self):\n        return self.name\n    \n    def set_name(self, name):\n        self.name = name\n    \n    def get_phone_number(self):\n        return self.phone\n    \n    def set_phone_number(self, phone):\n        self.phone = phone\n    \n    def get_email(self):\n        return self.email\n    \n    def set_email(self, email):\n        self.email = email","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an object-oriented class in Python to represent a person's contact information\n\n### Input:\nNot applicable\n\n### Output:\nclass Contact: \n    def __init__(self, name, phone, email):\n        self.name = name \n        self.phone = phone\n        self.email = email\n    \n    def get_name(self):\n        return self.name\n    \n    def set_name(self, name):\n        self.name = name\n    \n    def get_phone_number(self):\n        return self.phone\n    \n    def set_phone_number(self, phone):\n        self.phone = phone\n    \n    def get_email(self):\n        return self.email\n    \n    def set_email(self, email):\n        self.email = email"}
{"instruction":"Implement a function in Python to filter out invalid names in a list of strings. The function should take as argument a list of strings. A valid name is a string that contains 3 to 20 alphabetic characters. Invalid names should be filtered out and the remaining names should be present in the output list.","input":"['Alex', 'Mark', 'John21', '12345']","output":"def filter_names(names):\n valid_names = []\n for name in names:\n if re.match('[a-zA-Z]{3,20}', name):\n valid_names.append(name)\n return valid_names\n\nprint(filter_names(['Alex', 'Mark', 'John21', '12345']))\n# Output: ['Alex', 'Mark']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python to filter out invalid names in a list of strings. The function should take as argument a list of strings. A valid name is a string that contains 3 to 20 alphabetic characters. Invalid names should be filtered out and the remaining names should be present in the output list.\n\n### Input:\n['Alex', 'Mark', 'John21', '12345']\n\n### Output:\ndef filter_names(names):\n valid_names = []\n for name in names:\n if re.match('[a-zA-Z]{3,20}', name):\n valid_names.append(name)\n return valid_names\n\nprint(filter_names(['Alex', 'Mark', 'John21', '12345']))\n# Output: ['Alex', 'Mark']"}
{"instruction":"Devise a Python program to check if two strings are a palindrome.","input":"","output":"def palindrome_checker(string1, string2): \n    m = len(string1) \n    n = len(string2) \n  \n    if m != n: \n        return False    \n  \n    string1 = string1.lower() \n    string2 = string2.lower() \n      \n    # create empty 2-D matrix \n    C = [[0] * (n + 1) for i in range(m + 1)] \n  \n    # palindromic substring of length 0 \n    for i in range(m + 1): \n        C[i][0] = 0\n  \n    # palindromic substring of length 1 \n    for j in range(n + 1): \n        C[0][j] = 0\n  \n    # fill the matrix in bottom-up manner \n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            if string1[i - 1] == string2[j - 1]: \n                C[i][j] = C[i - 1][j - 1] + 1\n    return m == n == C[m][n]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevise a Python program to check if two strings are a palindrome.\n\n### Input:\n\n\n### Output:\ndef palindrome_checker(string1, string2): \n    m = len(string1) \n    n = len(string2) \n  \n    if m != n: \n        return False    \n  \n    string1 = string1.lower() \n    string2 = string2.lower() \n      \n    # create empty 2-D matrix \n    C = [[0] * (n + 1) for i in range(m + 1)] \n  \n    # palindromic substring of length 0 \n    for i in range(m + 1): \n        C[i][0] = 0\n  \n    # palindromic substring of length 1 \n    for j in range(n + 1): \n        C[0][j] = 0\n  \n    # fill the matrix in bottom-up manner \n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            if string1[i - 1] == string2[j - 1]: \n                C[i][j] = C[i - 1][j - 1] + 1\n    return m == n == C[m][n]"}
{"instruction":"Suggest a completion of the following Python code to print all perfect squares between 25 and 45.","input":"for n in range():","output":"for n in range(25, 46):\n    if n ** 0.5 == int(n ** 0.5):\n        print(n)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a completion of the following Python code to print all perfect squares between 25 and 45.\n\n### Input:\nfor n in range():\n\n### Output:\nfor n in range(25, 46):\n    if n ** 0.5 == int(n ** 0.5):\n        print(n)"}
{"instruction":"Write an algorithm to implement a bubble sort in Python.","input":"Example array to sort: [4, 2, 9, 12, 3, 5, 7]","output":"def bubble_sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [4, 2, 9, 12, 3, 5, 7] \n  \nbubble_sort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to implement a bubble sort in Python.\n\n### Input:\nExample array to sort: [4, 2, 9, 12, 3, 5, 7]\n\n### Output:\ndef bubble_sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [4, 2, 9, 12, 3, 5, 7] \n  \nbubble_sort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),"}
{"instruction":"Design a Python class to accommodate a stack of characters.","input":"","output":"class Stack():\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def isEmpty(self):\n        return self.items == []\n\n    def peek(self):\n        if not self.isEmpty():\n            return self.items[-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class to accommodate a stack of characters.\n\n### Input:\n\n\n### Output:\nclass Stack():\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def isEmpty(self):\n        return self.items == []\n\n    def peek(self):\n        if not self.isEmpty():\n            return self.items[-1]"}
{"instruction":"Create a Python program to read and parse XML data from a URL.","input":"https:\/\/example.com\/data.xml","output":"import requests\nimport xml.etree.ElementTree as ET\n\nurl = 'https:\/\/example.com\/data.xml'\nr = requests.get(url)\nxml_data = r.text\n\nroot = ET.fromstring(xml_data)\n\nfor child in root:\n print(child.tag, child.attrib)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to read and parse XML data from a URL.\n\n### Input:\nhttps:\/\/example.com\/data.xml\n\n### Output:\nimport requests\nimport xml.etree.ElementTree as ET\n\nurl = 'https:\/\/example.com\/data.xml'\nr = requests.get(url)\nxml_data = r.text\n\nroot = ET.fromstring(xml_data)\n\nfor child in root:\n print(child.tag, child.attrib)"}
{"instruction":"Write a Python function to sort the given list of tuples based on their second elements.","input":"","output":"def sort_tuples_by_second(tuples):\n tuple_order = sorted(tuples, key=lambda x: x[1])\n return tuple_order","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to sort the given list of tuples based on their second elements.\n\n### Input:\n\n\n### Output:\ndef sort_tuples_by_second(tuples):\n tuple_order = sorted(tuples, key=lambda x: x[1])\n return tuple_order"}
{"instruction":"Develop a function in Python which takes an input array of strings and returns a dictionary with the strings stored in their reverse order.","input":"[\"Hello\", \"World\"]","output":"def reverseStrings(arr):\n  revDict = {};\n  for str in arr:\n    revDict[str[::-1]] = str;\n  return revDict;\n\nreverseStrings([\"Hello\", \"World\"]); \/\/ Outputs: {'olleH': 'Hello', 'dlroW': 'World'}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python which takes an input array of strings and returns a dictionary with the strings stored in their reverse order.\n\n### Input:\n[\"Hello\", \"World\"]\n\n### Output:\ndef reverseStrings(arr):\n  revDict = {};\n  for str in arr:\n    revDict[str[::-1]] = str;\n  return revDict;\n\nreverseStrings([\"Hello\", \"World\"]); \/\/ Outputs: {'olleH': 'Hello', 'dlroW': 'World'}"}
{"instruction":"Complete the following Python function to sort a list of numbers in ascending order.","input":"[7, 1, 5, 4]","output":"def sort_list(nums):\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nComplete the following Python function to sort a list of numbers in ascending order.\n\n### Input:\n[7, 1, 5, 4]\n\n### Output:\ndef sort_list(nums):\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums"}
{"instruction":"Consider the following python code. Write a code to modify this such that it generates the output shown.","input":"def get_year_from_date(date):\n    year = date.split('-')[0]\n    return int(year)","output":"def get_year_from_date(date):\n    \"\"\"\n    This function takes a string date in the form of a yyyy-mm-dd and returns the year as an integer\n    \"\"\"\n    year = date.split('-')[0]\n    return int(year)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConsider the following python code. Write a code to modify this such that it generates the output shown.\n\n### Input:\ndef get_year_from_date(date):\n    year = date.split('-')[0]\n    return int(year)\n\n### Output:\ndef get_year_from_date(date):\n    \"\"\"\n    This function takes a string date in the form of a yyyy-mm-dd and returns the year as an integer\n    \"\"\"\n    year = date.split('-')[0]\n    return int(year)"}
{"instruction":"Write a Python program to delete duplicate elements from a list.","input":"[2, 3, 4, 5, 4, 6, 7, 5, 8]","output":"def removeDuplicates(inputList):\n      tempList = [] \n      for elem in inputList: \n          if elem not in tempList: \n              tempList.append(elem)\n      return tempList\n    \noutputList = removeDuplicates([2, 3, 4, 5, 4, 6, 7, 5, 8]) \nprint(outputList)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to delete duplicate elements from a list.\n\n### Input:\n[2, 3, 4, 5, 4, 6, 7, 5, 8]\n\n### Output:\ndef removeDuplicates(inputList):\n      tempList = [] \n      for elem in inputList: \n          if elem not in tempList: \n              tempList.append(elem)\n      return tempList\n    \noutputList = removeDuplicates([2, 3, 4, 5, 4, 6, 7, 5, 8]) \nprint(outputList)"}
{"instruction":"Create a Twitter bot using Python which collects tweets with specific hashtag and puts them in a database.","input":"Not applicable","output":"import tweepy\nimport sqlite3\n\n# Authentication\n# (Replace these credentials with your own)\nconsumer_key = '...'\nconsumer_secret = '...'\naccess_token = '...'\naccess_token_secret = '...'\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\n# Create a database connection\nconn = sqlite3.connect('tweets.db')\n# Create cursor\nc = conn.cursor()\n# Create table\nc.execute(\"CREATE TABLE IF NOT EXISTS tweets (id INTEGER, text TEXT, created_at DATETIME)\")\n\n# Search for tweets with a specific hashtag\n# (Replace this hashtag with your own)\nhashtag = '#python'\nfor tweet in tweepy.Cursor(api.search, hashtag).items(100):\n # Insert row into table\n c.execute(\"INSERT INTO tweets VALUES (?, ?, ?)\",\n (tweet.id, tweet.text, tweet.created_at))\n\n# Commit the changes\nconn.commit()\n# Close the connection\nconn.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Twitter bot using Python which collects tweets with specific hashtag and puts them in a database.\n\n### Input:\nNot applicable\n\n### Output:\nimport tweepy\nimport sqlite3\n\n# Authentication\n# (Replace these credentials with your own)\nconsumer_key = '...'\nconsumer_secret = '...'\naccess_token = '...'\naccess_token_secret = '...'\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\n# Create a database connection\nconn = sqlite3.connect('tweets.db')\n# Create cursor\nc = conn.cursor()\n# Create table\nc.execute(\"CREATE TABLE IF NOT EXISTS tweets (id INTEGER, text TEXT, created_at DATETIME)\")\n\n# Search for tweets with a specific hashtag\n# (Replace this hashtag with your own)\nhashtag = '#python'\nfor tweet in tweepy.Cursor(api.search, hashtag).items(100):\n # Insert row into table\n c.execute(\"INSERT INTO tweets VALUES (?, ?, ?)\",\n (tweet.id, tweet.text, tweet.created_at))\n\n# Commit the changes\nconn.commit()\n# Close the connection\nconn.close()"}
{"instruction":"Create a List of all the alphabet letters in Python.","input":"","output":"alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a List of all the alphabet letters in Python.\n\n### Input:\n\n\n### Output:\nalphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]"}
{"instruction":"Construct a function in Python to reverse the order of the words in a given string.","input":"hello world","output":"def reverse_words(str):\n    words = str.split()\n    reversed_words = words[::-1]\n    reversed_str = ' '.join(reversed_words)\n    return reversed_str\n\nresult = reverse_words('hello world')\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function in Python to reverse the order of the words in a given string.\n\n### Input:\nhello world\n\n### Output:\ndef reverse_words(str):\n    words = str.split()\n    reversed_words = words[::-1]\n    reversed_str = ' '.join(reversed_words)\n    return reversed_str\n\nresult = reverse_words('hello world')\nprint(result)"}
{"instruction":"Create a function in Python that implements the bubble sort algorithm.","input":"","output":"def bubble_sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # Traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nbubble_sort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that implements the bubble sort algorithm.\n\n### Input:\n\n\n### Output:\ndef bubble_sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # Traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nbubble_sort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),"}
{"instruction":"Create a program in Python which takes a list of tuples as an input, and prints true if it contains two elements that sum to 10.","input":"[(2, 8), (4, 6), (7, 3)]","output":"def checkSum(arr):\n    for (a, b) in arr:\n        if a + b == 10:\n            return True\n    return False\n\narr = [(2, 8), (4, 6), (7, 3)]\n\nprint(checkSum(arr)) # True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python which takes a list of tuples as an input, and prints true if it contains two elements that sum to 10.\n\n### Input:\n[(2, 8), (4, 6), (7, 3)]\n\n### Output:\ndef checkSum(arr):\n    for (a, b) in arr:\n        if a + b == 10:\n            return True\n    return False\n\narr = [(2, 8), (4, 6), (7, 3)]\n\nprint(checkSum(arr)) # True"}
{"instruction":"Write a Python script with two arguments, a minimum value and a maximum value, to generate a randomly selected number between them.","input":"","output":"import random\n\ndef generate_random_number(min_value, max_value):\n    return random.randint(min_value, max_value)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script with two arguments, a minimum value and a maximum value, to generate a randomly selected number between them.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_random_number(min_value, max_value):\n    return random.randint(min_value, max_value)"}
{"instruction":"To classify a tweet into a positive, negative or neutral sentiment, develop a Python script that takes the text of a tweet as an input and returns the sentiment of the tweet.","input":"","output":"import re\nimport nltk\n\ndef classify_sentiment(tweet_text):\n    tokens = nltk.word_tokenize(tweet_text)\n    sentiment_scores = 0\n\n    # Calculate sentiment score\n    for token in tokens:\n        if token in POSITIVE_WORDS:\n            sentiment_scores += 1\n        elif token in NEGATIVE_WORDS:\n            sentiment_scores -= 1\n\n    # Classify sentiment\n    if sentiment_scores > 0:\n        return \"positive\"\n    elif sentiment_scores == 0:\n        return \"neutral\"\n    else:\n        return \"negative\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTo classify a tweet into a positive, negative or neutral sentiment, develop a Python script that takes the text of a tweet as an input and returns the sentiment of the tweet.\n\n### Input:\n\n\n### Output:\nimport re\nimport nltk\n\ndef classify_sentiment(tweet_text):\n    tokens = nltk.word_tokenize(tweet_text)\n    sentiment_scores = 0\n\n    # Calculate sentiment score\n    for token in tokens:\n        if token in POSITIVE_WORDS:\n            sentiment_scores += 1\n        elif token in NEGATIVE_WORDS:\n            sentiment_scores -= 1\n\n    # Classify sentiment\n    if sentiment_scores > 0:\n        return \"positive\"\n    elif sentiment_scores == 0:\n        return \"neutral\"\n    else:\n        return \"negative\""}
{"instruction":"Create a Python program to print out the first 20 numbers of the Fibonacci sequence.","input":"","output":"def Fibonacci(n): \n    if n < 0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n == 0: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n == 1: \n        return 1\n    else: \n        return Fibonacci(n-1) + Fibonacci(n-2) \n\n# Driver Program \nprint(\"First 20 Fibonacci numbers:\")\nfor i in range(20): \n    print(Fibonacci(i))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print out the first 20 numbers of the Fibonacci sequence.\n\n### Input:\n\n\n### Output:\ndef Fibonacci(n): \n    if n < 0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n == 0: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n == 1: \n        return 1\n    else: \n        return Fibonacci(n-1) + Fibonacci(n-2) \n\n# Driver Program \nprint(\"First 20 Fibonacci numbers:\")\nfor i in range(20): \n    print(Fibonacci(i))"}
{"instruction":"using the following Json as an example, write a Python program that reads this Json into an object.","input":"{\n   \"id\":1,\n   \"name\":\"Testing\",\n   \"description\":\"This is a test\"\n}","output":"import json\n\n# example data\ndata = '{\"id\":1,\"name\":\"Testing\",\"description\":\"This is a test\"}'\n\n# parse data into a Python object\nobj = json.loads(data)\n\nprint(obj)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nusing the following Json as an example, write a Python program that reads this Json into an object.\n\n### Input:\n{\n   \"id\":1,\n   \"name\":\"Testing\",\n   \"description\":\"This is a test\"\n}\n\n### Output:\nimport json\n\n# example data\ndata = '{\"id\":1,\"name\":\"Testing\",\"description\":\"This is a test\"}'\n\n# parse data into a Python object\nobj = json.loads(data)\n\nprint(obj)"}
{"instruction":"Construct an algorithm in Python to convert a string to uppercase.","input":"hello world","output":"def stringToUpper(str):\n    return str.upper()\n\ninputStr = \"hello world\"\n\noutputStr = stringToUpper(inputStr)\n\nprint(outputStr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm in Python to convert a string to uppercase.\n\n### Input:\nhello world\n\n### Output:\ndef stringToUpper(str):\n    return str.upper()\n\ninputStr = \"hello world\"\n\noutputStr = stringToUpper(inputStr)\n\nprint(outputStr)"}
{"instruction":"Create a Python web interface to facilitate text analysis of a given set of documents.","input":"library used:  NLTK","output":"import nltk\nimport math\n\n# Load the given set of documents\ndocs = [...]\n\n# Tokenize documents\ntokens = [nltk.word_tokenize(doc) for doc in docs]\n\n# Create list of all tokens\nall_tokens = [token for doc in tokens for token in doc]\n\n# Calculate IDF (Inverse Document Frequency) for each token\nidf_scores = {token: math.log(len(docs) \/ len(all_tokens.count(token))) for token in all_tokens}\n\n# Create Web Interface\nfrom flask import Flask\nfrom flask import render_template\n\napp = Flask(__name__)\n\n@app.route('\/')\ndef index():\n     return render_template('index.html', len=len(docs), tokens=tokens, idf_scores=idf_scores)\n    \nif __name__ == \"__main__\":\n    app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python web interface to facilitate text analysis of a given set of documents.\n\n### Input:\nlibrary used:  NLTK\n\n### Output:\nimport nltk\nimport math\n\n# Load the given set of documents\ndocs = [...]\n\n# Tokenize documents\ntokens = [nltk.word_tokenize(doc) for doc in docs]\n\n# Create list of all tokens\nall_tokens = [token for doc in tokens for token in doc]\n\n# Calculate IDF (Inverse Document Frequency) for each token\nidf_scores = {token: math.log(len(docs) \/ len(all_tokens.count(token))) for token in all_tokens}\n\n# Create Web Interface\nfrom flask import Flask\nfrom flask import render_template\n\napp = Flask(__name__)\n\n@app.route('\/')\ndef index():\n     return render_template('index.html', len=len(docs), tokens=tokens, idf_scores=idf_scores)\n    \nif __name__ == \"__main__\":\n    app.run()"}
{"instruction":"Create a function in Python that will take a list of elements and return the sum of their cube.","input":"[2, 3, 4]","output":"def cube_sum(nums): \n  sum = 0 \n  for num in nums: \n    sum += num*num*num \n  return sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that will take a list of elements and return the sum of their cube.\n\n### Input:\n[2, 3, 4]\n\n### Output:\ndef cube_sum(nums): \n  sum = 0 \n  for num in nums: \n    sum += num*num*num \n  return sum"}
{"instruction":"Maximize a given function subject to the given constraints.","input":"f(x) = x1^2 + x2^2\nsubject to: x1 + x2 <= 2","output":"We can maximize the given function by solving the given constraints as a linear programming problem. We can use an optimization library in Python to solve this problem. We can also use the Simplex algorithm to solve this problem. The optimal solution is (1,1), which gives a maximum value of 2.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMaximize a given function subject to the given constraints.\n\n### Input:\nf(x) = x1^2 + x2^2\nsubject to: x1 + x2 <= 2\n\n### Output:\nWe can maximize the given function by solving the given constraints as a linear programming problem. We can use an optimization library in Python to solve this problem. We can also use the Simplex algorithm to solve this problem. The optimal solution is (1,1), which gives a maximum value of 2."}
{"instruction":"Create a function which reverses the characters in a string.","input":"","output":"\"\"\"\nCreate a function which reverses the characters in a string\n\"\"\"\n\ndef reverse_string(string):\n    reversed_string = \"\"\n    for i in range(len(string) -1, -1, -1):\n        reversed_string += string[i]\n    return reversed_string\n\nstring = \"Python\"\nreversed_string = reverse_string(string)\n\nprint(\"The original string is:\", string)\nprint(\"The reversed string is:\", reversed_string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function which reverses the characters in a string.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a function which reverses the characters in a string\n\"\"\"\n\ndef reverse_string(string):\n    reversed_string = \"\"\n    for i in range(len(string) -1, -1, -1):\n        reversed_string += string[i]\n    return reversed_string\n\nstring = \"Python\"\nreversed_string = reverse_string(string)\n\nprint(\"The original string is:\", string)\nprint(\"The reversed string is:\", reversed_string)"}
{"instruction":"Create a function in Python to find the maximum value among five elements.","input":"","output":"def find_max_value(list_of_values): \n    return max(list_of_values) \n  \n# Driver code \nlist_of_values = [1, 5, 9, 4, 8]\nmax_value = find_max_value(list_of_values) \nprint(\"The maximum value is:\", max_value)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to find the maximum value among five elements.\n\n### Input:\n\n\n### Output:\ndef find_max_value(list_of_values): \n    return max(list_of_values) \n  \n# Driver code \nlist_of_values = [1, 5, 9, 4, 8]\nmax_value = find_max_value(list_of_values) \nprint(\"The maximum value is:\", max_value)"}
{"instruction":"Modify this Python program to compute the sum of all elements in a multi-dimensional array.","input":"multi_dim_array = [[1,2], [3,4], [15,16]]","output":"def sum_multi_dim_array(multi_dim_array):\n    # init sum to 0 \n    sum = 0 \n  \n    # iterate over rows \n    for row in multi_dim_array: \n  \n        # iterate over columns \n        for num in row: \n  \n            # add number to sum \n            sum += num \n  \n    return sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify this Python program to compute the sum of all elements in a multi-dimensional array.\n\n### Input:\nmulti_dim_array = [[1,2], [3,4], [15,16]]\n\n### Output:\ndef sum_multi_dim_array(multi_dim_array):\n    # init sum to 0 \n    sum = 0 \n  \n    # iterate over rows \n    for row in multi_dim_array: \n  \n        # iterate over columns \n        for num in row: \n  \n            # add number to sum \n            sum += num \n  \n    return sum"}
{"instruction":"Develop a script in Python to find all numbers in a given string.","input":"This sentence has two numbers: 35 and 347.","output":"import re\n\ns = \"This sentence has two numbers: 35 and 347.\"\nnumlist = []\nfor item in re.findall('\\d+', s):\n    numlist.append(int(item))\n    \nprint(numlist) # prints [35, 347]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a script in Python to find all numbers in a given string.\n\n### Input:\nThis sentence has two numbers: 35 and 347.\n\n### Output:\nimport re\n\ns = \"This sentence has two numbers: 35 and 347.\"\nnumlist = []\nfor item in re.findall('\\d+', s):\n    numlist.append(int(item))\n    \nprint(numlist) # prints [35, 347]"}
{"instruction":"Visualize a dataset containing the exam scores of 3 classes (class A, B, and C) in the form of a bar chart using Matplotlib and Python.","input":"Class A: 85, 75, 95 \nClass B: 89, 73, 72\nClass C: 82, 81, 89","output":"import matplotlib.pyplot as plt\n\nclass_A = [85, 75, 95]\nclass_B = [89, 73, 72]\nclass_C = [82, 81, 89]\n\nclasses = ['Class A', 'Class B', 'Class C']\n\nplt.bar(classes, [sum(class_A) \/ len(class_A), \nsum(class_B) \/ len(class_B), sum(class_C)\/ len(class_C)])\n\nplt.xlabel('Classes')\nplt.ylabel('Average Score')\nplt.title('Exam Scores')\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nVisualize a dataset containing the exam scores of 3 classes (class A, B, and C) in the form of a bar chart using Matplotlib and Python.\n\n### Input:\nClass A: 85, 75, 95 \nClass B: 89, 73, 72\nClass C: 82, 81, 89\n\n### Output:\nimport matplotlib.pyplot as plt\n\nclass_A = [85, 75, 95]\nclass_B = [89, 73, 72]\nclass_C = [82, 81, 89]\n\nclasses = ['Class A', 'Class B', 'Class C']\n\nplt.bar(classes, [sum(class_A) \/ len(class_A), \nsum(class_B) \/ len(class_B), sum(class_C)\/ len(class_C)])\n\nplt.xlabel('Classes')\nplt.ylabel('Average Score')\nplt.title('Exam Scores')\nplt.show()"}
{"instruction":"Produce an algorithm in Python to calculate the total area of a polygon given its side lengths?","input":"[2, 3, 4, 5, 6]","output":"def polygon_area(sides):\n\tx = sum(sides) \/ 2\n\tn = len(sides)\n\t\n\tarea = (x * (x-sides[0]) * (x-sides[1]) * (x-sides[2]) * ... * (x-sides[n-1])) ** 0.5\n\t\n\treturn area\n\ntotal_area = polygon_area([2, 3, 4, 5, 6])\nprint(total_area)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce an algorithm in Python to calculate the total area of a polygon given its side lengths?\n\n### Input:\n[2, 3, 4, 5, 6]\n\n### Output:\ndef polygon_area(sides):\n\tx = sum(sides) \/ 2\n\tn = len(sides)\n\t\n\tarea = (x * (x-sides[0]) * (x-sides[1]) * (x-sides[2]) * ... * (x-sides[n-1])) ** 0.5\n\t\n\treturn area\n\ntotal_area = polygon_area([2, 3, 4, 5, 6])\nprint(total_area)"}
{"instruction":"Implement the Naive Bayes classifier in Python to solve a multi-class classification problem.","input":"","output":"import numpy as np  \nfrom sklearn.naive_bayes import GaussianNB \n\n# declare data  \nX = np.array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]) \nY = np.array([0, 1, 2, 3, 4]) \n  \n# create Gaussian Naive Bayes model object and train it with the data \nclf = GaussianNB() \nclf.fit(X, Y) \n  \n# predict the outcome \npredicted_label = clf.predict([[2, 0]]) \nprint(predicted_label)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement the Naive Bayes classifier in Python to solve a multi-class classification problem.\n\n### Input:\n\n\n### Output:\nimport numpy as np  \nfrom sklearn.naive_bayes import GaussianNB \n\n# declare data  \nX = np.array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]) \nY = np.array([0, 1, 2, 3, 4]) \n  \n# create Gaussian Naive Bayes model object and train it with the data \nclf = GaussianNB() \nclf.fit(X, Y) \n  \n# predict the outcome \npredicted_label = clf.predict([[2, 0]]) \nprint(predicted_label)"}
{"instruction":"Generate a Python program to generate a random name with the given initials.","input":"Initials: \"ABC\"","output":"\"\"\"\nGenerate a Python program to generate a random name with the given initials\n\nimport random\n \ndef generate_name(initials):\n    # Create a list of vowels \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    # Create a list of consonants \n    consonants = [chr(i) for i in range(ord('a'), ord('z')) if chr(i) not in vowels]\n    name = ''\n    \n    # Iterate through the initials \n    for initial in initials.lower():\n    # Get a random consonant for each initial \n        if initial in consonants:\n            name += random.choice(consonants)\n    # Get a random vowel for each initial \n        elif initial in vowels:\n            name += random.choice(vowels)\n\n    # Return the random name \n    return name\n\nif __name__ == '__main__':\n    initials = \"ABC\"\n    print(generate_name(initials))\n\"\"\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to generate a random name with the given initials.\n\n### Input:\nInitials: \"ABC\"\n\n### Output:\n\"\"\"\nGenerate a Python program to generate a random name with the given initials\n\nimport random\n \ndef generate_name(initials):\n    # Create a list of vowels \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    # Create a list of consonants \n    consonants = [chr(i) for i in range(ord('a'), ord('z')) if chr(i) not in vowels]\n    name = ''\n    \n    # Iterate through the initials \n    for initial in initials.lower():\n    # Get a random consonant for each initial \n        if initial in consonants:\n            name += random.choice(consonants)\n    # Get a random vowel for each initial \n        elif initial in vowels:\n            name += random.choice(vowels)\n\n    # Return the random name \n    return name\n\nif __name__ == '__main__':\n    initials = \"ABC\"\n    print(generate_name(initials))\n\"\"\""}
{"instruction":"Write a Python program to complete the implementing of a searching algorithm.","input":"List: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nTarget item: 7","output":"\"\"\"\nWrite a Python program to complete the implementing of a searching algorithm\n\"\"\"\n\n# Function to implement searching algorithm \ndef search(list, item): \n    # traverse through all list elements\n    for i in range(len(list)): \n        if list[i] == item: \n            return i \n      \n    # item not found\n    return -1\n  \n# main \nif __name__ == \"__main__\": \n    # Given list \n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    item = 7\n  \n    # Calling Function \n    index = search(list, item) \n  \n    if index != -1: \n        print(\"Item found at index\", index) \n    else:\n        print(\"Item is not found in list\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to complete the implementing of a searching algorithm.\n\n### Input:\nList: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nTarget item: 7\n\n### Output:\n\"\"\"\nWrite a Python program to complete the implementing of a searching algorithm\n\"\"\"\n\n# Function to implement searching algorithm \ndef search(list, item): \n    # traverse through all list elements\n    for i in range(len(list)): \n        if list[i] == item: \n            return i \n      \n    # item not found\n    return -1\n  \n# main \nif __name__ == \"__main__\": \n    # Given list \n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    item = 7\n  \n    # Calling Function \n    index = search(list, item) \n  \n    if index != -1: \n        print(\"Item found at index\", index) \n    else:\n        print(\"Item is not found in list\")"}
{"instruction":"Modify the Python program provided above to store the extracted data into a database (e.g. PostgreSQL).","input":"<root>\n  <person>\n    <name>John Doe<\/name>\n    <age>30<\/age>\n    <address>\n      <street>123 Easy St<\/street>\n      <city>Boston<\/city>\n      <state>MA<\/state>\n    <\/address>\n  <\/person>\n<\/root>","output":"import xml.etree.ElementTree as ET\nimport psycopg2  # install psycopg2\n\n# parse an XML file\ntree = ET.parse('data.xml')\n\n# get root element\nroot = tree.getroot()\n\n# create a database connection\nconn = psycopg2.connect(\"dbname=my_database user=postgres\")\ncursor = conn.cursor()\n\n# iterate person elements\nfor person in root.findall('person'):\n # get name\n name = person.find('name').text\n\n # get age \n age = person.find('age').text\n\n # get address\n address = person.find('address')\n street = address.find('street').text\n city = address.find('city').text\n state = address.find('state').text\n\n # insert into database\n cursor.execute(\n \"\"\"\n INSERT INTO people (name, age, street, city, state) \n VALUES (%s,%s,%s,%s,%s)\n \"\"\" % (name, age, street, city, state))\n\n# commit\nconn.commit()\n\n# close connection\nconn.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the Python program provided above to store the extracted data into a database (e.g. PostgreSQL).\n\n### Input:\n<root>\n  <person>\n    <name>John Doe<\/name>\n    <age>30<\/age>\n    <address>\n      <street>123 Easy St<\/street>\n      <city>Boston<\/city>\n      <state>MA<\/state>\n    <\/address>\n  <\/person>\n<\/root>\n\n### Output:\nimport xml.etree.ElementTree as ET\nimport psycopg2  # install psycopg2\n\n# parse an XML file\ntree = ET.parse('data.xml')\n\n# get root element\nroot = tree.getroot()\n\n# create a database connection\nconn = psycopg2.connect(\"dbname=my_database user=postgres\")\ncursor = conn.cursor()\n\n# iterate person elements\nfor person in root.findall('person'):\n # get name\n name = person.find('name').text\n\n # get age \n age = person.find('age').text\n\n # get address\n address = person.find('address')\n street = address.find('street').text\n city = address.find('city').text\n state = address.find('state').text\n\n # insert into database\n cursor.execute(\n \"\"\"\n INSERT INTO people (name, age, street, city, state) \n VALUES (%s,%s,%s,%s,%s)\n \"\"\" % (name, age, street, city, state))\n\n# commit\nconn.commit()\n\n# close connection\nconn.close()"}
{"instruction":"Create a python program for identifying if a given number is prime or not.","input":"Use number 10 as an example.","output":"def is_prime(num): \n    if num < 2: \n        return False\n  \n    for i in range(2, num): \n        if num % i == 0: \n            return False\n  \n    return True\n  \n# Example \nnumber = 10\n  \nif is_prime(number): \n    print(number, \"is a prime number\") \nelse: \n    print(number, \"is not a prime number\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program for identifying if a given number is prime or not.\n\n### Input:\nUse number 10 as an example.\n\n### Output:\ndef is_prime(num): \n    if num < 2: \n        return False\n  \n    for i in range(2, num): \n        if num % i == 0: \n            return False\n  \n    return True\n  \n# Example \nnumber = 10\n  \nif is_prime(number): \n    print(number, \"is a prime number\") \nelse: \n    print(number, \"is not a prime number\")"}
{"instruction":"Design a machine learning algorithm in Python that can identify whether a given sentence is an 'affirmative' sentence or a 'negative' sentence.","input":"","output":"import re \nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords \n\n# Function to find the negation words\ndef findNegation(sentence):\n    # save all the negation words\n    negationwords = {'not', 'never', 'no', 'none', 'non', 'neither',\n                     'nobody', 'nowhere', 'cannot', 'couldnt', 'shouldnt', \n                     'wouldnt', 'dont', 'didnt', 'hasnt', 'havent', 'isnt', 'arent'} \n    words = nltk.word_tokenize(sentence)\n    neg = []\n    for word in words:\n        if word in negationwords:\n            neg.append(word)\n    return neg\n\n# Function to check if the sentence is affirmative or negative\ndef isAffirmativeorNegative(sentence):\n     negationwords = findNegation(sentence)\n    if len(negationwords)==0: \n        return \"Affirmative\" \n    else: \n        return \"Negative\"    \n\nsentence = \"He always comes late but I dont mind.\"\nresult = isAffirmativeorNegative(sentence) \nprint(result)  # prints Negative","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a machine learning algorithm in Python that can identify whether a given sentence is an 'affirmative' sentence or a 'negative' sentence.\n\n### Input:\n\n\n### Output:\nimport re \nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords \n\n# Function to find the negation words\ndef findNegation(sentence):\n    # save all the negation words\n    negationwords = {'not', 'never', 'no', 'none', 'non', 'neither',\n                     'nobody', 'nowhere', 'cannot', 'couldnt', 'shouldnt', \n                     'wouldnt', 'dont', 'didnt', 'hasnt', 'havent', 'isnt', 'arent'} \n    words = nltk.word_tokenize(sentence)\n    neg = []\n    for word in words:\n        if word in negationwords:\n            neg.append(word)\n    return neg\n\n# Function to check if the sentence is affirmative or negative\ndef isAffirmativeorNegative(sentence):\n     negationwords = findNegation(sentence)\n    if len(negationwords)==0: \n        return \"Affirmative\" \n    else: \n        return \"Negative\"    \n\nsentence = \"He always comes late but I dont mind.\"\nresult = isAffirmativeorNegative(sentence) \nprint(result)  # prints Negative"}
{"instruction":"Generate a Python program to filter out any words containing a given letter from a list.","input":"words = [\"apple\", \"banana\", \"orange\", \"peach\"]\nletter = \"e\"","output":"def filter_words(words, letter):\n    filtered_words = []\n    \n    for word in words:\n        if letter not in word:\n            filtered_words.append(word)\n    \n    return filtered_words","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to filter out any words containing a given letter from a list.\n\n### Input:\nwords = [\"apple\", \"banana\", \"orange\", \"peach\"]\nletter = \"e\"\n\n### Output:\ndef filter_words(words, letter):\n    filtered_words = []\n    \n    for word in words:\n        if letter not in word:\n            filtered_words.append(word)\n    \n    return filtered_words"}
{"instruction":"Construct a function in Python that will take a list as an argument and prompt the user to delete elements from that list.","input":"my_list = [1, 2, 3, 4, 5]","output":"def delete_element(list): \n    print(\"Original list: \" + str(list)) \n    element = int(input(\"Please enter the element which you want to delete: \"))\n    list.remove(element) \n    print(\"List after deletion of element: \" + str(list))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function in Python that will take a list as an argument and prompt the user to delete elements from that list.\n\n### Input:\nmy_list = [1, 2, 3, 4, 5]\n\n### Output:\ndef delete_element(list): \n    print(\"Original list: \" + str(list)) \n    element = int(input(\"Please enter the element which you want to delete: \"))\n    list.remove(element) \n    print(\"List after deletion of element: \" + str(list))"}
{"instruction":"Implement an algorithm in Python to sort a list of integers.","input":"List: [3, 9, 8, 5, 6, 4, 2, 1, 10, 7]","output":"def sort(arr):\n for i in range(len(arr)):\n min_idx = i\n for j in range(i+1, len(arr)):\n if arr[min_idx] > arr[j]:\n min_idx = j\n arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\nlist = [3, 9, 8, 5, 6, 4, 2, 1, 10, 7]\nsort(list)\nprint(list) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm in Python to sort a list of integers.\n\n### Input:\nList: [3, 9, 8, 5, 6, 4, 2, 1, 10, 7]\n\n### Output:\ndef sort(arr):\n for i in range(len(arr)):\n min_idx = i\n for j in range(i+1, len(arr)):\n if arr[min_idx] > arr[j]:\n min_idx = j\n arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\nlist = [3, 9, 8, 5, 6, 4, 2, 1, 10, 7]\nsort(list)\nprint(list) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}
{"instruction":"Design a class to represent a book in Python.","input":"","output":"class Book:\n    # Attributes\n    title = \"\"\n    author = \"\"\n    pages = 0\n\n    # Constructor\n    def __init__(self, title, author, pages):\n        self.title = title\n        self.author = author\n        self.pages = pages\n\n# Create a book object\nbook = Book(\"The Catcher in the Rye\", \"JD Salinger\", 277)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class to represent a book in Python.\n\n### Input:\n\n\n### Output:\nclass Book:\n    # Attributes\n    title = \"\"\n    author = \"\"\n    pages = 0\n\n    # Constructor\n    def __init__(self, title, author, pages):\n        self.title = title\n        self.author = author\n        self.pages = pages\n\n# Create a book object\nbook = Book(\"The Catcher in the Rye\", \"JD Salinger\", 277)"}
{"instruction":"Write a Python script to find the maximum and the minimum value in a given list.","input":"","output":"def find_max_min(lst):\n max_val = max(lst)\n min_val = min(lst)\n return max_val, min_val","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to find the maximum and the minimum value in a given list.\n\n### Input:\n\n\n### Output:\ndef find_max_min(lst):\n max_val = max(lst)\n min_val = min(lst)\n return max_val, min_val"}
{"instruction":"Create a Python program that generates a histogram from a list of integers.","input":"","output":"import matplotlib.pyplot as plt \n  \ndef plot_histogram(data): \n    plt.hist(data) \n    plt.title(\"Histogram\") \n    plt.xlabel(\"Values\") \n    plt.ylabel(\"Frequency\") \n    plt.show() \n\nif __name__ == \"__main__\": \n    data = [1, 2, 5, 7, 9, 4, 5, 9, 10, 12] \n    plot_histogram(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that generates a histogram from a list of integers.\n\n### Input:\n\n\n### Output:\nimport matplotlib.pyplot as plt \n  \ndef plot_histogram(data): \n    plt.hist(data) \n    plt.title(\"Histogram\") \n    plt.xlabel(\"Values\") \n    plt.ylabel(\"Frequency\") \n    plt.show() \n\nif __name__ == \"__main__\": \n    data = [1, 2, 5, 7, 9, 4, 5, 9, 10, 12] \n    plot_histogram(data)"}
{"instruction":"Develop a web service using Python Flask to handle POST requests.","input":"Not applicable","output":"from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('\/api', methods=['POST'])\ndef api():\n if (request.method == 'POST'):\n  # All code for handling POST requests\n  return 'Handling POST requests'\n else:\n  return 'Method Not Allowed'\n\nif __name__=='__main__':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a web service using Python Flask to handle POST requests.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('\/api', methods=['POST'])\ndef api():\n if (request.method == 'POST'):\n  # All code for handling POST requests\n  return 'Handling POST requests'\n else:\n  return 'Method Not Allowed'\n\nif __name__=='__main__':\n app.run(debug=True)"}
{"instruction":"Create a algorithm in Python that will predict the outcome of a dice roll.","input":"","output":"import random\n\ndef dice_predict(sides):\n    '''Returns a random outcome of dice roll between 1 and specified number of sides.'''\n    return random.randint(1, sides)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a algorithm in Python that will predict the outcome of a dice roll.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef dice_predict(sides):\n    '''Returns a random outcome of dice roll between 1 and specified number of sides.'''\n    return random.randint(1, sides)"}
{"instruction":"Hack a Python program to apply a filter to a list of numbers and output the numbers greater than 5.","input":"List of numbers: [1, 5, 6, 3, 8]","output":"numbers = [1, 5, 6, 3, 8]\n\nfiltered_numbers = []\n\nfor number in numbers:\n  if number > 5:\n    filtered_numbers.append(number)\n\nprint(filtered_numbers) # output: [6, 8]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHack a Python program to apply a filter to a list of numbers and output the numbers greater than 5.\n\n### Input:\nList of numbers: [1, 5, 6, 3, 8]\n\n### Output:\nnumbers = [1, 5, 6, 3, 8]\n\nfiltered_numbers = []\n\nfor number in numbers:\n  if number > 5:\n    filtered_numbers.append(number)\n\nprint(filtered_numbers) # output: [6, 8]"}
{"instruction":"Create an HTML page for a directory of Engineers that displays their name, organization, and skills.","input":"data = [\n {name: 'John Doe', organization: 'Acme Co.', skills: ['JavaScript', 'Python']},\n {name: 'Jane Doe', organization: 'Acme Co.', skills: ['JavaScript', 'Node.js']},\n {name: 'Bob Doe', organization: 'ABC Co.', skills:['GoLang', 'PHP']},\n]","output":"<!DOCTYPE html>\n<html>\n<head>\n <title>Engineers Directory<\/title>\n<\/head>\n<body>\n <p>Directory of Engineers and their skills<\/p>\n <ul>\n <li>\n <span>Name: <\/span><span>John Doe<\/span>, \n <span>Organization: <\/span><span>Acme Co.<\/span>, \n <span>Skills: <\/span><span>JavaScript, Python<\/span>\n <\/li>\n <li>\n <span>Name: <\/span><span>Jane Doe<\/span>, \n <span>Organization: <\/span><span>Acme Co.<\/span>, \n <span>Skills: <\/span><span>JavaScript, Node.js<\/span>\n <\/li>\n <li>\n <span>Name: <\/span><span>Bob Doe<\/span>, \n <span>Organization: <\/span><span>ABC Co.<\/span>, \n <span>Skills: <\/span><span>GoLang, PHP<\/span>\n <\/li>\n <\/ul>\n<\/body>\n<\/html>","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an HTML page for a directory of Engineers that displays their name, organization, and skills.\n\n### Input:\ndata = [\n {name: 'John Doe', organization: 'Acme Co.', skills: ['JavaScript', 'Python']},\n {name: 'Jane Doe', organization: 'Acme Co.', skills: ['JavaScript', 'Node.js']},\n {name: 'Bob Doe', organization: 'ABC Co.', skills:['GoLang', 'PHP']},\n]\n\n### Output:\n<!DOCTYPE html>\n<html>\n<head>\n <title>Engineers Directory<\/title>\n<\/head>\n<body>\n <p>Directory of Engineers and their skills<\/p>\n <ul>\n <li>\n <span>Name: <\/span><span>John Doe<\/span>, \n <span>Organization: <\/span><span>Acme Co.<\/span>, \n <span>Skills: <\/span><span>JavaScript, Python<\/span>\n <\/li>\n <li>\n <span>Name: <\/span><span>Jane Doe<\/span>, \n <span>Organization: <\/span><span>Acme Co.<\/span>, \n <span>Skills: <\/span><span>JavaScript, Node.js<\/span>\n <\/li>\n <li>\n <span>Name: <\/span><span>Bob Doe<\/span>, \n <span>Organization: <\/span><span>ABC Co.<\/span>, \n <span>Skills: <\/span><span>GoLang, PHP<\/span>\n <\/li>\n <\/ul>\n<\/body>\n<\/html>"}
{"instruction":"Create a program to sort a list of numbers in Python. The program should perform an efficient sorting algorithm like Quick Sort or Merge Sort, and return the sorted list.","input":"[1,4,5,2,8,6]","output":"def quicksort(array):\n if len(array) < 2:\n return array\n else:\n pivot = array[0]\n less = [i for i in array[1:] if i <= pivot]\n greater = [i for i in array[1:] if i > pivot]\n return quicksort(less) + [pivot] + quicksort(greater)\n\narray = [1, 4, 5, 2, 8, 6]\nresult = quicksort(array)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to sort a list of numbers in Python. The program should perform an efficient sorting algorithm like Quick Sort or Merge Sort, and return the sorted list.\n\n### Input:\n[1,4,5,2,8,6]\n\n### Output:\ndef quicksort(array):\n if len(array) < 2:\n return array\n else:\n pivot = array[0]\n less = [i for i in array[1:] if i <= pivot]\n greater = [i for i in array[1:] if i > pivot]\n return quicksort(less) + [pivot] + quicksort(greater)\n\narray = [1, 4, 5, 2, 8, 6]\nresult = quicksort(array)\nprint(result)"}
{"instruction":"Generate a code template for a class in Python.","input":"","output":"class ClassName:\n def __init__(self, parameters):\n\t # initialization code\n \n def some_method(self):\n\t # method code\n \n # additional methods and class variables","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code template for a class in Python.\n\n### Input:\n\n\n### Output:\nclass ClassName:\n def __init__(self, parameters):\n\t # initialization code\n \n def some_method(self):\n\t # method code\n \n # additional methods and class variables"}
{"instruction":"Write a method in Python to display the contents of a dictionary.","input":"","output":"def display_dict(dictionary):\n    for key, value in dictionary.items():\n        print(f'{key}: {value}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a method in Python to display the contents of a dictionary.\n\n### Input:\n\n\n### Output:\ndef display_dict(dictionary):\n    for key, value in dictionary.items():\n        print(f'{key}: {value}')"}
{"instruction":"Create a Python script to calculate the mode of an integer list.","input":"[1,1,2,2,2]","output":"def get_mode(nums):\n    # create a dictionary to store count of each number\n    counts = {}\n    # loop through the list\n    for num in nums:\n        # add the number to the count if not present\n        if num not in counts:\n            counts[num] = 1\n        # else increment the count\n        else:\n            counts[num] += 1\n    \n    # sort the dictionary by count\n    sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n    \n    # get the most frequently occurring number\n    mode = sorted_counts[0][0]\n    return mode\n\n# test\nnums = [1,1,2,2,2]\nprint(get_mode(nums)) # prints 2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to calculate the mode of an integer list.\n\n### Input:\n[1,1,2,2,2]\n\n### Output:\ndef get_mode(nums):\n    # create a dictionary to store count of each number\n    counts = {}\n    # loop through the list\n    for num in nums:\n        # add the number to the count if not present\n        if num not in counts:\n            counts[num] = 1\n        # else increment the count\n        else:\n            counts[num] += 1\n    \n    # sort the dictionary by count\n    sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n    \n    # get the most frequently occurring number\n    mode = sorted_counts[0][0]\n    return mode\n\n# test\nnums = [1,1,2,2,2]\nprint(get_mode(nums)) # prints 2"}
{"instruction":"Write a Python program to generate random passwords from a list of strings.","input":"strings = [\"random\",\"password\",\"security\",\"codes\",\"aaa\",\"bbb\",\"ccc\", \"ddd\"]","output":"import random\n\nstrings = [\"random\",\"password\",\"security\",\"codes\",\"aaa\",\"bbb\",\"ccc\", \"ddd\"]\npassword = \"\"\n\nfor i in range(len(strings)):\n randomIndex = random.randint(0,len(strings) -1)\n password += strings[randomIndex]\n\nprint(\"Generated Password:\", password)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate random passwords from a list of strings.\n\n### Input:\nstrings = [\"random\",\"password\",\"security\",\"codes\",\"aaa\",\"bbb\",\"ccc\", \"ddd\"]\n\n### Output:\nimport random\n\nstrings = [\"random\",\"password\",\"security\",\"codes\",\"aaa\",\"bbb\",\"ccc\", \"ddd\"]\npassword = \"\"\n\nfor i in range(len(strings)):\n randomIndex = random.randint(0,len(strings) -1)\n password += strings[randomIndex]\n\nprint(\"Generated Password:\", password)"}
{"instruction":"Write a Python closure that prints the sum of two numbers when called.","input":"","output":"def create_add_closure():\n    def adder(a, b):\n        return a + b\n    return adder\n\nadd_func = create_add_closure()\nprint(add_func(2, 3)) # Output: 5","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python closure that prints the sum of two numbers when called.\n\n### Input:\n\n\n### Output:\ndef create_add_closure():\n    def adder(a, b):\n        return a + b\n    return adder\n\nadd_func = create_add_closure()\nprint(add_func(2, 3)) # Output: 5"}
{"instruction":"Use the Twitter API to develop a sentiment analysis program in Python.","input":"Not applicable","output":"import tweepy\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n#Twitter credentials\nconsumer_key = 'your_key'\nconsumer_secret = 'your_secret'\naccess_token = 'your_token'\naccess_token_secret = 'your_secret'\n\n#Create OAuth authentication\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\n#Create API object\napi = tweepy.API(auth)\n\n#initialize sentiment analyzer\nanalyzer = SentimentIntensityAnalyzer()\n\n#Search query\nsearch_query = '#sad'\n\n#Search results\nsearch_results = api.search(search_query)\n\n#Loop through search results\nfor tweet in search_results:\n    #Analyze sentiment\n    sentiment = analyzer.polarity_scores(tweet.text)\n    #Print sentiment\n    print(f\"{tweet.text} - {sentiment}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the Twitter API to develop a sentiment analysis program in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport tweepy\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n#Twitter credentials\nconsumer_key = 'your_key'\nconsumer_secret = 'your_secret'\naccess_token = 'your_token'\naccess_token_secret = 'your_secret'\n\n#Create OAuth authentication\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\n#Create API object\napi = tweepy.API(auth)\n\n#initialize sentiment analyzer\nanalyzer = SentimentIntensityAnalyzer()\n\n#Search query\nsearch_query = '#sad'\n\n#Search results\nsearch_results = api.search(search_query)\n\n#Loop through search results\nfor tweet in search_results:\n    #Analyze sentiment\n    sentiment = analyzer.polarity_scores(tweet.text)\n    #Print sentiment\n    print(f\"{tweet.text} - {sentiment}\")"}
{"instruction":"Design a class in Python that stores information about three sides of a triangle.","input":"","output":"class Triangle:\ndef __init__(self, side1, side2, side3):\n self.side1 = side1\n self.side2 = side2\n self.side3 = side3\n \ndef get_area(self):\n s = (self.side1 + self.side2 + self.side3) \/ 2\n return (s*(s-self.side1)*(s-self.side2)*(s-self.side3)) ** 0.5\n \ndef is_equilateral(self):\n return self.side1 == self.side2 == self.side3","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python that stores information about three sides of a triangle.\n\n### Input:\n\n\n### Output:\nclass Triangle:\ndef __init__(self, side1, side2, side3):\n self.side1 = side1\n self.side2 = side2\n self.side3 = side3\n \ndef get_area(self):\n s = (self.side1 + self.side2 + self.side3) \/ 2\n return (s*(s-self.side1)*(s-self.side2)*(s-self.side3)) ** 0.5\n \ndef is_equilateral(self):\n return self.side1 == self.side2 == self.side3"}
{"instruction":"Create a Python program to parse a JSON object and create a SQL table with the data.","input":"{\n \"id\": 1,\n \"name\": \"John Doe\",\n \"age\": 25\n}","output":"import json\nimport sqlite3\n\n# Parse the JSON object\ndata = json.loads(data)\n\n# Connect to the database\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# Create the SQL table\nc.execute(\"CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)\")\n\n# Insert the data\nc.execute(\"INSERT INTO users (id, name, age) VALUES (?,?,?)\", (data[\"id\"], data[\"name\"], data[\"age\"]))\n\n# Commit the changes\nconn.commit()\n\n# Close the connection\nconn.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to parse a JSON object and create a SQL table with the data.\n\n### Input:\n{\n \"id\": 1,\n \"name\": \"John Doe\",\n \"age\": 25\n}\n\n### Output:\nimport json\nimport sqlite3\n\n# Parse the JSON object\ndata = json.loads(data)\n\n# Connect to the database\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# Create the SQL table\nc.execute(\"CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)\")\n\n# Insert the data\nc.execute(\"INSERT INTO users (id, name, age) VALUES (?,?,?)\", (data[\"id\"], data[\"name\"], data[\"age\"]))\n\n# Commit the changes\nconn.commit()\n\n# Close the connection\nconn.close()"}
{"instruction":"Create a command line tool in Python that takes a numerical input (e.g. from user input) and prints out all prime numbers up to that number.","input":"50","output":"import sys\n\ndef main():\n try:\n number = int(sys.argv[1])\n except (IndexError, ValueError):\n number = int(input('Please enter a number: '))\n\n prime_list = []\n for num in range(2, number + 1):\n for i in prime_list:\n if num % i == 0:\n break\n else:\n prime_list.append(num)\n\nprint(prime_list)\n\nif __name__ == '__main__':\n main()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a command line tool in Python that takes a numerical input (e.g. from user input) and prints out all prime numbers up to that number.\n\n### Input:\n50\n\n### Output:\nimport sys\n\ndef main():\n try:\n number = int(sys.argv[1])\n except (IndexError, ValueError):\n number = int(input('Please enter a number: '))\n\n prime_list = []\n for num in range(2, number + 1):\n for i in prime_list:\n if num % i == 0:\n break\n else:\n prime_list.append(num)\n\nprint(prime_list)\n\nif __name__ == '__main__':\n main()"}
{"instruction":"Optimize this while loop in the given Python code.","input":"i = 0\nwhile i < 5:\n    i += 1\n    print(i)","output":"i = 0\nwhile i < 5:\n    print(i)\n    i += 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize this while loop in the given Python code.\n\n### Input:\ni = 0\nwhile i < 5:\n    i += 1\n    print(i)\n\n### Output:\ni = 0\nwhile i < 5:\n    print(i)\n    i += 1"}
{"instruction":"This code generates a GNU Radio Python Flow Graph for an output window. To use it, import the necessary libraries and create an instance of the Output_window class. Set the desired threshold, sample rate, frequency, and FFT size using the provided methods. Then start the flow graph using the Start() method and wait for it to finish using the Wait() method.","input":"","output":"#!\/usr\/bin\/env python2\n##################################################\n# GNU Radio Python Flow Graph\n# Title: Output Window\n# Generated: Sat Apr 30 16:45:27 2016\n##################################################\n\nif __name__ == '__main__':\n    import ctypes\n    import sys\n    if sys.platform.startswith('linux'):\n        try:\n            x11 = ctypes.cdll.LoadLibrary('libX11.so')\n            x11.XInitThreads()\n        except:\n            print \"Warning: failed to XInitThreads()\"\n\nfrom gnuradio import analog\nfrom gnuradio import blocks\nfrom gnuradio import eng_notation\nfrom gnuradio import fft\nfrom gnuradio import gr\nfrom gnuradio import wxgui\nfrom gnuradio.eng_option import eng_option\nfrom gnuradio.fft import window\nfrom gnuradio.filter import firdes\nfrom gnuradio.wxgui import fftsink2\nfrom gnuradio.wxgui import forms\nfrom gnuradio.wxgui import numbersink2\nfrom grc_gnuradio import wxgui as grc_wxgui\nfrom optparse import OptionParser\nimport osmosdr\nimport time\nimport wx\n\n\nclass Output_window(grc_wxgui.top_block_gui):\n\n    def __init__(self):\n        grc_wxgui.top_block_gui.__init__(self, title=\"Output Window\")\n        _icon_path = \"\/usr\/share\/icons\/hicolor\/32x32\/apps\/gnuradio-grc.png\"\n        self.SetIcon(wx.Icon(_icon_path, wx.BITMAP_TYPE_ANY))\n\n        ##################################################\n        # Variables\n        ##################################################\n        self.threshold = threshold = -55\n        self.samp_rate = samp_rate = 2.048e6\n        self.freq = freq = 658e6\n        self.fft_size = fft_size = 1.024e3\n\n        ##################################################\n        # Blocks\n        ##################################################\n        self.notebook = self.notebook = wx.Notebook(self.GetWin(), style=wx.NB_TOP)\n        self.notebook.AddPage(grc_wxgui.Panel(self.notebook), \"Spectrum\")\n        self.notebook.AddPage(grc_wxgui.Panel(self.notebook), \"Output\")\n        self.notebook.AddPage(grc_wxgui.Panel(self.notebook), \"Stream\")\n        self.Add(self.notebook)\n        _threshold_sizer = wx.BoxSizer(wx.VERTICAL)\n        self._threshold_text_box = forms.text_box(\n        \tparent=self.notebook.GetPage(1).GetWin(),\n        \tsizer=_threshold_sizer,\n        \tvalue=self.threshold,\n        \tcallback=self.set_threshold,\n        \tlabel=\"Threshold\",\n        \tconverter=forms.float_converter(),\n        \tproportion=0,\n        )\n        self._threshold_slider = forms.slider(\n        \tparent=self.notebook.GetPage(1).GetWin(),\n        \tsizer=_threshold_sizer,\n        \tvalue=self.threshold,\n        \tcallback=self.set_threshold,\n        \tminimum=-100,\n        \tmaximum=0,\n        \tnum_steps=100,\n        \tstyle=wx.SL_HORIZONTAL,\n        \tcast=float,\n        \tproportion=1,\n        )\n        self.notebook.GetPage(1).Add(_threshold_sizer)\n        _freq_sizer = wx.BoxSizer(wx.VERTICAL)\n        self._freq_text_box = forms.text_box(\n        \tparent=self.notebook.GetPage(0).GetWin(),\n        \tsizer=_freq_sizer,\n        \tvalue=self.freq,\n        \tcallback=self.set_freq,\n        \tlabel=\"freq\",\n        \tconverter=forms.float_converter(),\n        \tproportion=0,\n        )\n        self._freq_slider = forms.slider(\n        \tparent=self.notebook.GetPage(0).GetWin(),\n        \tsizer=_freq_sizer,\n        \tvalue=self.freq,\n        \tcallback=self.set_freq,\n        \tminimum=10e6,\n        \tmaximum=10e9,\n        \tnum_steps=100,\n        \tstyle=wx.SL_HORIZONTAL,\n        \tcast=float,\n        \tproportion=1,\n        )\n        self.notebook.GetPage(0).Add(_freq_sizer)\n        self.wxgui_numbersink2_1 = numbersink2.number_sink_f(\n        \tself.notebook.GetPage(1).GetWin(),\n        \tunit=\"signal present\",\n        \tminval=0,\n        \tmaxval=1,\n        \tfactor=1,\n        \tdecimal_places=0,\n        \tref_level=0,\n        \tsample_rate=samp_rate,\n        \tnumber_rate=15,\n        \taverage=False,\n        \tavg_alpha=None,\n        \tlabel=\"Signal Detection\",\n        \tpeak_hold=False,\n        \tshow_gauge=True,\n        )\n        self.notebook.GetPage(1).Add(self.wxgui_numbersink2_1.win)\n        self.wxgui_numbersink2_0 = numbersink2.number_sink_f(\n        \tself.notebook.GetPage(1).GetWin(),\n        \tunit=\"dB\",\n        \tminval=-120,\n        \tmaxval=0,\n        \tfactor=1.0,\n        \tdecimal_places=10,\n        \tref_level=0,\n        \tsample_rate=samp_rate,\n        \tnumber_rate=15,\n        \taverage=False,\n        \tavg_alpha=30e-3,\n        \tlabel=\"level\",\n        \tpeak_hold=False,\n        \tshow_gauge=False,\n        )\n        self.notebook.GetPage(1).Add(self.wxgui_numbersink2_0.win)\n        self.wxgui_fftsink2_0 = fftsink2.fft_sink_c(\n        \tself.notebook.GetPage(0).GetWin(),\n        \tbaseband_freq=freq,\n        \ty_per_div=5,\n        \ty_divs=10,\n        \tref_level=0,\n        \tref_scale=2.0,\n        \tsample_rate=samp_rate,\n        \tfft_size=1024,\n        \tfft_rate=15,\n        \taverage=True,\n        \tavg_alpha=30e-3,\n        \ttitle=\"Spectrum\",\n        \tpeak_hold=False,\n        \twin=window.rectangular,\n        )\n        self.notebook.GetPage(0).Add(self.wxgui_fftsink2_0.win)\n        self.rtlsdr_source_0 = osmosdr.source( args=\"numchan=\" + str(1) + \" \" + \"\" )\n        self.rtlsdr_source_0.set_sample_rate(samp_rate)\n        self.rtlsdr_source_0.set_center_freq(freq, 0)\n        self.rtlsdr_source_0.set_freq_corr(0, 0)\n        self.rtlsdr_source_0.set_dc_offset_mode(0, 0)\n        self.rtlsdr_source_0.set_iq_balance_mode(0, 0)\n        self.rtlsdr_source_0.set_gain_mode(False, 0)\n        self.rtlsdr_source_0.set_gain(20, 0)\n        self.rtlsdr_source_0.set_if_gain(10, 0)\n        self.rtlsdr_source_0.set_bb_gain(5, 0)\n        self.rtlsdr_source_0.set_antenna(\"\", 0)\n        self.rtlsdr_source_0.set_bandwidth(0, 0)\n          \n        self.fft_1 = fft.fft_vcc(1024, True, (window.rectangular(1024)), True, 1)\n        self.blocks_vector_to_stream_0 = blocks.vector_to_stream(gr.sizeof_float*1, 1024)\n        self.blocks_threshold_ff_0 = blocks.threshold_ff(-100, threshold, 0)\n        self.blocks_stream_to_vector_0 = blocks.stream_to_vector(gr.sizeof_gr_complex*1, 1024)\n        self.blocks_nlog10_ff_0 = blocks.nlog10_ff(10, 1, 0)\n        self.blocks_file_sink_0 = blocks.file_sink(gr.sizeof_float*1, \"\/media\/shashwat\/DATA\/Q3\/Wireless Networking\/gnu codes\/Outputs\/db_498\", False)\n        self.blocks_file_sink_0.set_unbuffered(False)\n        self.blocks_divide_xx_0 = blocks.divide_ff(1)\n        self.blocks_complex_to_mag_squared_0 = blocks.complex_to_mag_squared(1024)\n        self.analog_const_source_x_0 = analog.sig_source_f(0, analog.GR_CONST_WAVE, 0, 0, 1.04858e6)\n\n        ##################################################\n        # Connections\n        ##################################################\n        self.connect((self.analog_const_source_x_0, 0), (self.blocks_divide_xx_0, 1))    \n        self.connect((self.blocks_complex_to_mag_squared_0, 0), (self.blocks_vector_to_stream_0, 0))    \n        self.connect((self.blocks_divide_xx_0, 0), (self.blocks_nlog10_ff_0, 0))    \n        self.connect((self.blocks_nlog10_ff_0, 0), (self.blocks_file_sink_0, 0))    \n        self.connect((self.blocks_nlog10_ff_0, 0), (self.blocks_threshold_ff_0, 0))    \n        self.connect((self.blocks_nlog10_ff_0, 0), (self.wxgui_numbersink2_0, 0))    \n        self.connect((self.blocks_stream_to_vector_0, 0), (self.fft_1, 0))    \n        self.connect((self.blocks_threshold_ff_0, 0), (self.wxgui_numbersink2_1, 0))    \n        self.connect((self.blocks_vector_to_stream_0, 0), (self.blocks_divide_xx_0, 0))    \n        self.connect((self.fft_1, 0), (self.blocks_complex_to_mag_squared_0, 0))    \n        self.connect((self.rtlsdr_source_0, 0), (self.blocks_stream_to_vector_0, 0))    \n        self.connect((self.rtlsdr_source_0, 0), (self.wxgui_fftsink2_0, 0))    \n\n\n    def get_threshold(self):\n        return self.threshold\n\n    def set_threshold(self, threshold):\n        self.threshold = threshold\n        self._threshold_slider.set_value(self.threshold)\n        self._threshold_text_box.set_value(self.threshold)\n        self.blocks_threshold_ff_0.set_hi(self.threshold)\n\n    def get_samp_rate(self):\n        return self.samp_rate\n\n    def set_samp_rate(self, samp_rate):\n        self.samp_rate = samp_rate\n        self.rtlsdr_source_0.set_sample_rate(self.samp_rate)\n        self.wxgui_fftsink2_0.set_sample_rate(self.samp_rate)\n\n    def get_freq(self):\n        return self.freq\n\n    def set_freq(self, freq):\n        self.freq = freq\n        self._freq_slider.set_value(self.freq)\n        self._freq_text_box.set_value(self.freq)\n        self.rtlsdr_source_0.set_center_freq(self.freq, 0)\n        self.wxgui_fftsink2_0.set_baseband_freq(self.freq)\n\n    def get_fft_size(self):\n        return self.fft_size\n\n    def set_fft_size(self, fft_size):\n        self.fft_size = fft_size\n\n\nif __name__ == '__main__':\n    parser = OptionParser(option_class=eng_option, usage=\"%prog: [options]\")\n    (options, args) = parser.parse_args()\n    tb = Output_window()\n    tb.Start(True)\n    tb.Wait()\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code generates a GNU Radio Python Flow Graph for an output window. To use it, import the necessary libraries and create an instance of the Output_window class. Set the desired threshold, sample rate, frequency, and FFT size using the provided methods. Then start the flow graph using the Start() method and wait for it to finish using the Wait() method.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python2\n##################################################\n# GNU Radio Python Flow Graph\n# Title: Output Window\n# Generated: Sat Apr 30 16:45:27 2016\n##################################################\n\nif __name__ == '__main__':\n    import ctypes\n    import sys\n    if sys.platform.startswith('linux'):\n        try:\n            x11 = ctypes.cdll.LoadLibrary('libX11.so')\n            x11.XInitThreads()\n        except:\n            print \"Warning: failed to XInitThreads()\"\n\nfrom gnuradio import analog\nfrom gnuradio import blocks\nfrom gnuradio import eng_notation\nfrom gnuradio import fft\nfrom gnuradio import gr\nfrom gnuradio import wxgui\nfrom gnuradio.eng_option import eng_option\nfrom gnuradio.fft import window\nfrom gnuradio.filter import firdes\nfrom gnuradio.wxgui import fftsink2\nfrom gnuradio.wxgui import forms\nfrom gnuradio.wxgui import numbersink2\nfrom grc_gnuradio import wxgui as grc_wxgui\nfrom optparse import OptionParser\nimport osmosdr\nimport time\nimport wx\n\n\nclass Output_window(grc_wxgui.top_block_gui):\n\n    def __init__(self):\n        grc_wxgui.top_block_gui.__init__(self, title=\"Output Window\")\n        _icon_path = \"\/usr\/share\/icons\/hicolor\/32x32\/apps\/gnuradio-grc.png\"\n        self.SetIcon(wx.Icon(_icon_path, wx.BITMAP_TYPE_ANY))\n\n        ##################################################\n        # Variables\n        ##################################################\n        self.threshold = threshold = -55\n        self.samp_rate = samp_rate = 2.048e6\n        self.freq = freq = 658e6\n        self.fft_size = fft_size = 1.024e3\n\n        ##################################################\n        # Blocks\n        ##################################################\n        self.notebook = self.notebook = wx.Notebook(self.GetWin(), style=wx.NB_TOP)\n        self.notebook.AddPage(grc_wxgui.Panel(self.notebook), \"Spectrum\")\n        self.notebook.AddPage(grc_wxgui.Panel(self.notebook), \"Output\")\n        self.notebook.AddPage(grc_wxgui.Panel(self.notebook), \"Stream\")\n        self.Add(self.notebook)\n        _threshold_sizer = wx.BoxSizer(wx.VERTICAL)\n        self._threshold_text_box = forms.text_box(\n        \tparent=self.notebook.GetPage(1).GetWin(),\n        \tsizer=_threshold_sizer,\n        \tvalue=self.threshold,\n        \tcallback=self.set_threshold,\n        \tlabel=\"Threshold\",\n        \tconverter=forms.float_converter(),\n        \tproportion=0,\n        )\n        self._threshold_slider = forms.slider(\n        \tparent=self.notebook.GetPage(1).GetWin(),\n        \tsizer=_threshold_sizer,\n        \tvalue=self.threshold,\n        \tcallback=self.set_threshold,\n        \tminimum=-100,\n        \tmaximum=0,\n        \tnum_steps=100,\n        \tstyle=wx.SL_HORIZONTAL,\n        \tcast=float,\n        \tproportion=1,\n        )\n        self.notebook.GetPage(1).Add(_threshold_sizer)\n        _freq_sizer = wx.BoxSizer(wx.VERTICAL)\n        self._freq_text_box = forms.text_box(\n        \tparent=self.notebook.GetPage(0).GetWin(),\n        \tsizer=_freq_sizer,\n        \tvalue=self.freq,\n        \tcallback=self.set_freq,\n        \tlabel=\"freq\",\n        \tconverter=forms.float_converter(),\n        \tproportion=0,\n        )\n        self._freq_slider = forms.slider(\n        \tparent=self.notebook.GetPage(0).GetWin(),\n        \tsizer=_freq_sizer,\n        \tvalue=self.freq,\n        \tcallback=self.set_freq,\n        \tminimum=10e6,\n        \tmaximum=10e9,\n        \tnum_steps=100,\n        \tstyle=wx.SL_HORIZONTAL,\n        \tcast=float,\n        \tproportion=1,\n        )\n        self.notebook.GetPage(0).Add(_freq_sizer)\n        self.wxgui_numbersink2_1 = numbersink2.number_sink_f(\n        \tself.notebook.GetPage(1).GetWin(),\n        \tunit=\"signal present\",\n        \tminval=0,\n        \tmaxval=1,\n        \tfactor=1,\n        \tdecimal_places=0,\n        \tref_level=0,\n        \tsample_rate=samp_rate,\n        \tnumber_rate=15,\n        \taverage=False,\n        \tavg_alpha=None,\n        \tlabel=\"Signal Detection\",\n        \tpeak_hold=False,\n        \tshow_gauge=True,\n        )\n        self.notebook.GetPage(1).Add(self.wxgui_numbersink2_1.win)\n        self.wxgui_numbersink2_0 = numbersink2.number_sink_f(\n        \tself.notebook.GetPage(1).GetWin(),\n        \tunit=\"dB\",\n        \tminval=-120,\n        \tmaxval=0,\n        \tfactor=1.0,\n        \tdecimal_places=10,\n        \tref_level=0,\n        \tsample_rate=samp_rate,\n        \tnumber_rate=15,\n        \taverage=False,\n        \tavg_alpha=30e-3,\n        \tlabel=\"level\",\n        \tpeak_hold=False,\n        \tshow_gauge=False,\n        )\n        self.notebook.GetPage(1).Add(self.wxgui_numbersink2_0.win)\n        self.wxgui_fftsink2_0 = fftsink2.fft_sink_c(\n        \tself.notebook.GetPage(0).GetWin(),\n        \tbaseband_freq=freq,\n        \ty_per_div=5,\n        \ty_divs=10,\n        \tref_level=0,\n        \tref_scale=2.0,\n        \tsample_rate=samp_rate,\n        \tfft_size=1024,\n        \tfft_rate=15,\n        \taverage=True,\n        \tavg_alpha=30e-3,\n        \ttitle=\"Spectrum\",\n        \tpeak_hold=False,\n        \twin=window.rectangular,\n        )\n        self.notebook.GetPage(0).Add(self.wxgui_fftsink2_0.win)\n        self.rtlsdr_source_0 = osmosdr.source( args=\"numchan=\" + str(1) + \" \" + \"\" )\n        self.rtlsdr_source_0.set_sample_rate(samp_rate)\n        self.rtlsdr_source_0.set_center_freq(freq, 0)\n        self.rtlsdr_source_0.set_freq_corr(0, 0)\n        self.rtlsdr_source_0.set_dc_offset_mode(0, 0)\n        self.rtlsdr_source_0.set_iq_balance_mode(0, 0)\n        self.rtlsdr_source_0.set_gain_mode(False, 0)\n        self.rtlsdr_source_0.set_gain(20, 0)\n        self.rtlsdr_source_0.set_if_gain(10, 0)\n        self.rtlsdr_source_0.set_bb_gain(5, 0)\n        self.rtlsdr_source_0.set_antenna(\"\", 0)\n        self.rtlsdr_source_0.set_bandwidth(0, 0)\n          \n        self.fft_1 = fft.fft_vcc(1024, True, (window.rectangular(1024)), True, 1)\n        self.blocks_vector_to_stream_0 = blocks.vector_to_stream(gr.sizeof_float*1, 1024)\n        self.blocks_threshold_ff_0 = blocks.threshold_ff(-100, threshold, 0)\n        self.blocks_stream_to_vector_0 = blocks.stream_to_vector(gr.sizeof_gr_complex*1, 1024)\n        self.blocks_nlog10_ff_0 = blocks.nlog10_ff(10, 1, 0)\n        self.blocks_file_sink_0 = blocks.file_sink(gr.sizeof_float*1, \"\/media\/shashwat\/DATA\/Q3\/Wireless Networking\/gnu codes\/Outputs\/db_498\", False)\n        self.blocks_file_sink_0.set_unbuffered(False)\n        self.blocks_divide_xx_0 = blocks.divide_ff(1)\n        self.blocks_complex_to_mag_squared_0 = blocks.complex_to_mag_squared(1024)\n        self.analog_const_source_x_0 = analog.sig_source_f(0, analog.GR_CONST_WAVE, 0, 0, 1.04858e6)\n\n        ##################################################\n        # Connections\n        ##################################################\n        self.connect((self.analog_const_source_x_0, 0), (self.blocks_divide_xx_0, 1))    \n        self.connect((self.blocks_complex_to_mag_squared_0, 0), (self.blocks_vector_to_stream_0, 0))    \n        self.connect((self.blocks_divide_xx_0, 0), (self.blocks_nlog10_ff_0, 0))    \n        self.connect((self.blocks_nlog10_ff_0, 0), (self.blocks_file_sink_0, 0))    \n        self.connect((self.blocks_nlog10_ff_0, 0), (self.blocks_threshold_ff_0, 0))    \n        self.connect((self.blocks_nlog10_ff_0, 0), (self.wxgui_numbersink2_0, 0))    \n        self.connect((self.blocks_stream_to_vector_0, 0), (self.fft_1, 0))    \n        self.connect((self.blocks_threshold_ff_0, 0), (self.wxgui_numbersink2_1, 0))    \n        self.connect((self.blocks_vector_to_stream_0, 0), (self.blocks_divide_xx_0, 0))    \n        self.connect((self.fft_1, 0), (self.blocks_complex_to_mag_squared_0, 0))    \n        self.connect((self.rtlsdr_source_0, 0), (self.blocks_stream_to_vector_0, 0))    \n        self.connect((self.rtlsdr_source_0, 0), (self.wxgui_fftsink2_0, 0))    \n\n\n    def get_threshold(self):\n        return self.threshold\n\n    def set_threshold(self, threshold):\n        self.threshold = threshold\n        self._threshold_slider.set_value(self.threshold)\n        self._threshold_text_box.set_value(self.threshold)\n        self.blocks_threshold_ff_0.set_hi(self.threshold)\n\n    def get_samp_rate(self):\n        return self.samp_rate\n\n    def set_samp_rate(self, samp_rate):\n        self.samp_rate = samp_rate\n        self.rtlsdr_source_0.set_sample_rate(self.samp_rate)\n        self.wxgui_fftsink2_0.set_sample_rate(self.samp_rate)\n\n    def get_freq(self):\n        return self.freq\n\n    def set_freq(self, freq):\n        self.freq = freq\n        self._freq_slider.set_value(self.freq)\n        self._freq_text_box.set_value(self.freq)\n        self.rtlsdr_source_0.set_center_freq(self.freq, 0)\n        self.wxgui_fftsink2_0.set_baseband_freq(self.freq)\n\n    def get_fft_size(self):\n        return self.fft_size\n\n    def set_fft_size(self, fft_size):\n        self.fft_size = fft_size\n\n\nif __name__ == '__main__':\n    parser = OptionParser(option_class=eng_option, usage=\"%prog: [options]\")\n    (options, args) = parser.parse_args()\n    tb = Output_window()\n    tb.Start(True)\n    tb.Wait()\n"}
{"instruction":"Summarize the text given below in 2 to 3 sentences.","input":"The Python programming language is a powerful, general-purpose, open-source language. It is a scripting language that supports object-oriented programming and procedural styles. It has a design philosophy which emphasizes code readability and a syntax that allows programmers to express concepts in fewer lines of code.","output":"Python is a powerful, open-source programming language that is both object-oriented and procedural in nature. It focuses on readability of code and simplicity of syntax, enabling developers to quickly and efficiently express concepts with fewer lines of code. It is free to use and popularly used for scripting and automation.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSummarize the text given below in 2 to 3 sentences.\n\n### Input:\nThe Python programming language is a powerful, general-purpose, open-source language. It is a scripting language that supports object-oriented programming and procedural styles. It has a design philosophy which emphasizes code readability and a syntax that allows programmers to express concepts in fewer lines of code.\n\n### Output:\nPython is a powerful, open-source programming language that is both object-oriented and procedural in nature. It focuses on readability of code and simplicity of syntax, enabling developers to quickly and efficiently express concepts with fewer lines of code. It is free to use and popularly used for scripting and automation."}
{"instruction":"The code is a Python class called FileSystem that provides methods for saving, deleting, and finding task data. To use this class, import it and create an instance with a parameter dictionary that includes a 'taskDir' key specifying the directory where task data should be stored. Then call the methods on the instance as needed:\n\n- To save task data, call the save_task method with a dictionary containing the data. If the dictionary does not already include an 'id' key, one will be generated and added to the dictionary. The task data will be stored in a file in a subdirectory of the taskDir directory named after the task ID.\n- To delete task data, call the delete_task method with the ID of the task to delete. This will remove the subdirectory containing the task data.\n- To find task data by ID, call the find_by_id method with the ID of the task to find. This will return the task data as a dictionary.\n- To find task data for multiple IDs, call the find_by_ids method with a list of IDs. This will return a list of task data dictionaries.\n- To find all task data, call the all_task_data method. This will return a list of all task data dictionaries, sorted by ID in ascending order by default (or descending order if the 'order' parameter is set to 'desc').\n- To get task data for a specific ID without raising an error if the data is not found, call the task_data method with the ID of the task to find. This will return the task data as a dictionary, or None if the task data is not found.","input":"","output":"import os\nimport json\nimport logging\nimport fcntl\n\nfrom jsub.util  import safe_mkdir\nfrom jsub.util  import safe_rmdir\nfrom jsub.error import RepoReadError\nfrom jsub.error import TaskNotFoundError\n\nID_FILENAME = 'id'\n\nclass FileSystem(object):\n\tdef __init__(self, param):\n\t\tself.__jsub_dir = os.path.expanduser(param.get('taskDir', '~\/jsub\/'))\n#\t\tself.__id_file  = os.path.join(self.__jsub_dir, ID_FILENAME)\n\n\t\tself.__logger = logging.getLogger('JSUB')\n\n#\t\tself.__create_repo_dir()\n\n\t\tself.__json_format = param.get('format', 'compact')\n\n\tdef save_task(self, data):\n\t\tif 'id' not in data:\n\t\t\tsafe_mkdir(self.__jsub_dir)\n\t\t\tdata['id'] = self.__new_task_id()\n\t\tsafe_mkdir(os.path.join(self.__jsub_dir,str(data['id']),'taskInfo'))\n\t\ttask_path = os.path.join(self.__jsub_dir, str(data['id']),'taskInfo','repo')\n\n\t\tdata_str = self.__json_str(data)\n\t\twith open(task_path, 'a+') as f:\n\t\t\tfcntl.flock(f, fcntl.LOCK_EX)\n\t\t\tf.seek(0)\n\t\t\tf.truncate()\n\t\t\tf.write(data_str)\n\n\tdef delete_task(self, task_id):\n\t\tsafe_rmdir(os.path.join(self.__jsub_dir,str(task_id)))\n\n\tdef find_by_id(self, task_id):\n\t\treturn self.task_data(task_id)\n\n\tdef find_by_ids(self, task_ids):\n\t\tall_data = []\n\t\tfor task_id in task_ids:\n\t\t\ttry:\n\t\t\t\ttd = self.task_data(task_id)\n\t\t\t\tall_data.append(td)\n\t\t\texcept RepoReadError as e:\n\t\t\t\tself.__logger.debug(e)\n\t\treturn all_data\n\n\tdef all_task_data(self, order='asc'):\n\t\ttask_ids =[d for d in os.listdir(self.__jsub_dir) if os.path.isdir(os.path.join(self.__jsub_dir,d))]\n\t\ttask_ids.sort(key=int, reverse=(order=='desc'))\n\t\treturn self.find_by_ids(task_ids)\n\n\tdef task_data(self, task_id):\n\t\tsafe_mkdir(os.path.join(self.__jsub_dir,str(task_id),'taskInfo'))\n\t\ttask_path = os.path.join(self.__jsub_dir,str(task_id),'taskInfo','repo')\n\t\twith open(task_path, 'a+') as f:\n\t\t\tfcntl.flock(f, fcntl.LOCK_EX)\n\t\t\tf.seek(0)\n\t\t\tdata_str = f.read()\n\n\t\ttry:\n\t\t\treturn json.loads(data_str)\n\t\texcept ValueError as e:\n\t\t\traise RepoReadError('JSON decode error on task %s: %s' % (task_id, e))\n\n#\tdef __create_repo_dir(self):\n#\t\tsafe_mkdir(self.__jsub_dir)\n\n\tdef __new_task_id(self):\n\t\ttask_ids =[int(d) for d in os.listdir(self.__jsub_dir) if os.path.isdir(os.path.join(self.__jsub_dir,d))]\n\t\tif not task_ids:\n\t\t\treturn 1\n\t\ttask_ids.sort(key=int, reverse=True)\n\t\treturn(task_ids[0]+1)\n\n\tdef __json_str(self, data):\n\t\tif self.__json_format == 'pretty':\n\t\t\treturn json.dumps(data, indent=2)\n\t\treturn json.dumps(data, separators=(',', ':'))\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe code is a Python class called FileSystem that provides methods for saving, deleting, and finding task data. To use this class, import it and create an instance with a parameter dictionary that includes a 'taskDir' key specifying the directory where task data should be stored. Then call the methods on the instance as needed:\n\n- To save task data, call the save_task method with a dictionary containing the data. If the dictionary does not already include an 'id' key, one will be generated and added to the dictionary. The task data will be stored in a file in a subdirectory of the taskDir directory named after the task ID.\n- To delete task data, call the delete_task method with the ID of the task to delete. This will remove the subdirectory containing the task data.\n- To find task data by ID, call the find_by_id method with the ID of the task to find. This will return the task data as a dictionary.\n- To find task data for multiple IDs, call the find_by_ids method with a list of IDs. This will return a list of task data dictionaries.\n- To find all task data, call the all_task_data method. This will return a list of all task data dictionaries, sorted by ID in ascending order by default (or descending order if the 'order' parameter is set to 'desc').\n- To get task data for a specific ID without raising an error if the data is not found, call the task_data method with the ID of the task to find. This will return the task data as a dictionary, or None if the task data is not found.\n\n### Input:\n\n\n### Output:\nimport os\nimport json\nimport logging\nimport fcntl\n\nfrom jsub.util  import safe_mkdir\nfrom jsub.util  import safe_rmdir\nfrom jsub.error import RepoReadError\nfrom jsub.error import TaskNotFoundError\n\nID_FILENAME = 'id'\n\nclass FileSystem(object):\n\tdef __init__(self, param):\n\t\tself.__jsub_dir = os.path.expanduser(param.get('taskDir', '~\/jsub\/'))\n#\t\tself.__id_file  = os.path.join(self.__jsub_dir, ID_FILENAME)\n\n\t\tself.__logger = logging.getLogger('JSUB')\n\n#\t\tself.__create_repo_dir()\n\n\t\tself.__json_format = param.get('format', 'compact')\n\n\tdef save_task(self, data):\n\t\tif 'id' not in data:\n\t\t\tsafe_mkdir(self.__jsub_dir)\n\t\t\tdata['id'] = self.__new_task_id()\n\t\tsafe_mkdir(os.path.join(self.__jsub_dir,str(data['id']),'taskInfo'))\n\t\ttask_path = os.path.join(self.__jsub_dir, str(data['id']),'taskInfo','repo')\n\n\t\tdata_str = self.__json_str(data)\n\t\twith open(task_path, 'a+') as f:\n\t\t\tfcntl.flock(f, fcntl.LOCK_EX)\n\t\t\tf.seek(0)\n\t\t\tf.truncate()\n\t\t\tf.write(data_str)\n\n\tdef delete_task(self, task_id):\n\t\tsafe_rmdir(os.path.join(self.__jsub_dir,str(task_id)))\n\n\tdef find_by_id(self, task_id):\n\t\treturn self.task_data(task_id)\n\n\tdef find_by_ids(self, task_ids):\n\t\tall_data = []\n\t\tfor task_id in task_ids:\n\t\t\ttry:\n\t\t\t\ttd = self.task_data(task_id)\n\t\t\t\tall_data.append(td)\n\t\t\texcept RepoReadError as e:\n\t\t\t\tself.__logger.debug(e)\n\t\treturn all_data\n\n\tdef all_task_data(self, order='asc'):\n\t\ttask_ids =[d for d in os.listdir(self.__jsub_dir) if os.path.isdir(os.path.join(self.__jsub_dir,d))]\n\t\ttask_ids.sort(key=int, reverse=(order=='desc'))\n\t\treturn self.find_by_ids(task_ids)\n\n\tdef task_data(self, task_id):\n\t\tsafe_mkdir(os.path.join(self.__jsub_dir,str(task_id),'taskInfo'))\n\t\ttask_path = os.path.join(self.__jsub_dir,str(task_id),'taskInfo','repo')\n\t\twith open(task_path, 'a+') as f:\n\t\t\tfcntl.flock(f, fcntl.LOCK_EX)\n\t\t\tf.seek(0)\n\t\t\tdata_str = f.read()\n\n\t\ttry:\n\t\t\treturn json.loads(data_str)\n\t\texcept ValueError as e:\n\t\t\traise RepoReadError('JSON decode error on task %s: %s' % (task_id, e))\n\n#\tdef __create_repo_dir(self):\n#\t\tsafe_mkdir(self.__jsub_dir)\n\n\tdef __new_task_id(self):\n\t\ttask_ids =[int(d) for d in os.listdir(self.__jsub_dir) if os.path.isdir(os.path.join(self.__jsub_dir,d))]\n\t\tif not task_ids:\n\t\t\treturn 1\n\t\ttask_ids.sort(key=int, reverse=True)\n\t\treturn(task_ids[0]+1)\n\n\tdef __json_str(self, data):\n\t\tif self.__json_format == 'pretty':\n\t\t\treturn json.dumps(data, indent=2)\n\t\treturn json.dumps(data, separators=(',', ':'))\n"}
{"instruction":"Can you build an algorithm in Python to sort an array with the Bubble Sort technique?","input":"[2, 7, 4, 1, 5, 3]","output":"def bubble_sort(arr): \n \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [2, 7, 4, 1, 5, 3] \n  \nbubble_sort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you build an algorithm in Python to sort an array with the Bubble Sort technique?\n\n### Input:\n[2, 7, 4, 1, 5, 3]\n\n### Output:\ndef bubble_sort(arr): \n \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [2, 7, 4, 1, 5, 3] \n  \nbubble_sort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),"}
{"instruction":"Create a loop using Python to print the numbers 1 to 10.","input":"","output":"for i in range(1,11):\n    print(i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a loop using Python to print the numbers 1 to 10.\n\n### Input:\n\n\n### Output:\nfor i in range(1,11):\n    print(i)"}
{"instruction":"Write a python loop to print all the numbers from 1 to 10.","input":"","output":"for i in range(1,11):\n    print(i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python loop to print all the numbers from 1 to 10.\n\n### Input:\n\n\n### Output:\nfor i in range(1,11):\n    print(i)"}
{"instruction":"Generate Python code to sum up all numbers up to a given number n","input":"","output":"def sum_to_n(n):\n\n    #edge cases\n    if n < 0: \n        return 0\n    if n == 0:\n        return 0\n\n    #binominal sum formula \n    return (n * (n+1)) \/ 2 \n\nprint(sum_to_n(10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to sum up all numbers up to a given number n\n\n### Input:\n\n\n### Output:\ndef sum_to_n(n):\n\n    #edge cases\n    if n < 0: \n        return 0\n    if n == 0:\n        return 0\n\n    #binominal sum formula \n    return (n * (n+1)) \/ 2 \n\nprint(sum_to_n(10))"}
{"instruction":"Create a Python program to convert a comma-separated string into a list.","input":"\"1,2,3,4,5\"","output":"string = \"1,2,3,4,5\"\nlist = string.split(\",\")\nprint(list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to convert a comma-separated string into a list.\n\n### Input:\n\"1,2,3,4,5\"\n\n### Output:\nstring = \"1,2,3,4,5\"\nlist = string.split(\",\")\nprint(list)"}
{"instruction":"Write a python program that takes a list of numbers as input and identifies the minimum, maximum and the mode value.","input":"[1, 2, 3, 4, 5, 5, 6]","output":"def get_min_max_mode(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    count_dict = dict()\n    for number in numbers:\n        if number in count_dict:\n            count_dict[number] += 1\n        else:\n            count_dict[number] = 1\n    \n    max_count = 0\n    mode_value = min_val\n    for k, v in count_dict.items():\n        if v > max_count:\n            max_count = v\n            mode_value = k\n    \n    return min_val, max_val, mode_value\n\nprint(get_min_max_mode([1, 2, 3, 4, 5, 5, 6]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that takes a list of numbers as input and identifies the minimum, maximum and the mode value.\n\n### Input:\n[1, 2, 3, 4, 5, 5, 6]\n\n### Output:\ndef get_min_max_mode(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    count_dict = dict()\n    for number in numbers:\n        if number in count_dict:\n            count_dict[number] += 1\n        else:\n            count_dict[number] = 1\n    \n    max_count = 0\n    mode_value = min_val\n    for k, v in count_dict.items():\n        if v > max_count:\n            max_count = v\n            mode_value = k\n    \n    return min_val, max_val, mode_value\n\nprint(get_min_max_mode([1, 2, 3, 4, 5, 5, 6]))"}
{"instruction":"Design a Python program to generate a set of Fibonacci numbers up to a given value.","input":"n = 10","output":"def fibonacci(n): \n fib = [] \n \n a, b = 0, 1\n while a < n: \n  fib.append(a) \n  a, b = b, a + b \n \n return fib\n\nn = 10\nprint(fibonacci(n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to generate a set of Fibonacci numbers up to a given value.\n\n### Input:\nn = 10\n\n### Output:\ndef fibonacci(n): \n fib = [] \n \n a, b = 0, 1\n while a < n: \n  fib.append(a) \n  a, b = b, a + b \n \n return fib\n\nn = 10\nprint(fibonacci(n))"}
{"instruction":"This code generates rooted trees and writes their adjacency and gamma matrices to files. To use it, run the script with the maximum number of nodes as the first argument and the maximum branching factor (optional) as the second argument. The code will output the number of trees for each number of nodes and write the matrices to files in the GammaAdjMatrices directory. If the number of trees is greater than 100,000, the code will abort.","input":"","output":"\nimport sys\n\n# G is the gamma matrix\n# par is the parent array\n# n is the number of nodes\ndef writeGammaMatrix(gammaFile, G, par, n):\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tG[i][j] = 0\n\n\tfor i in range(n):\n\t\tG[i][i] = 1\n\t\tj = par[i]-1\n\t\twhile j > -1:\n\t\t\tG[j][i] = 1\n\t\t\tj = par[j]-1\n\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tgammaFile.write(str(G[i][j]) + ' ')\n\t\tgammaFile.write('\\n')\n\n\tgammaFile.write('\\n')\n\n\n# par is the parent array\n# n is the number of nodes\ndef writeAdjMatrix(adjFile, par, n):\n\tadjFile.write(str(n-1)) # number of edges\n\tfor i in range(1, n):\n\t\tadjFile.write('  ' + str(par[i]-1) + '  ' + str(i) + '  ')\n\tadjFile.write('\\n');\n\n\n# writes a dot file to be processed with Graphviz\ndef writeDotFile(par, n, num):\n\tdotFile = open('.\/GammaAdjMatrices\/dotFile' + str(n) + '_' + str(num-1) + '.dot', 'w')\n\tdotFile.write('digraph G { \\n')\n\tfor i in range(1, n):\n\t\tdotFile.write(str(par[i]-1) + ' -> ' + str(i) + ';\\n')\n\tdotFile.write('}\\n')\n\tdotFile.close()\n\n\n# n is the number of nodes\n# k is the max number of children allowed per node\ndef getRootedTrees(adjFile, gammaFile, n, k, writeDots):\n\tnum = 0\n\tL = []\n\tpar = []\n\tlevels = []\n\tchildren = []\n\tG = []\n\n\tp = n-1\n\tq = 0\n\n\tfor i in range(n):\n\t\tL.append(i)\n\t\tpar.append(i)\n\t\tlevels.append(i+1)\n\t\tchildren.append(0)\n\t\tG.append([])\n\t\tfor j in range(n):\n\t\t\tG[i].append(0)\n\n\twhile (p > 0):\n\t\tfor i in range(n):\n\t\t\tchildren[i] = 0\n\t\tfor i in range(n):\n\t\t\tchildren[par[i]] += 1\n\n\t\tif max(children) <= k:\n\t\t\tnum += 1\n\t\t\twriteAdjMatrix(adjFile, par, n)\n\t\t\twriteGammaMatrix(gammaFile, G, par, n)\n\t\t\tif writeDots:\n\t\t\t\twriteDotFile(par, n, num)\n\n\t\tp = 0\n\t\tfor i in range(n-1, -1, -1):\n\t\t\tif L[i] > 1:\n\t\t\t\tp = i\n\t\t\t\tbreak\n\n\t\tif p == 0:\n\t\t\tbreak\n\n\t\tfor i in range(p-1, -1, -1):\n\t\t\tif L[i] == L[p] - 1:\n\t\t\t\tq = i\n\t\t\t\tbreak\n\n\t\tfor i in range(p, n):\n\t\t\tL[i] = L[i-p+q]\n\n\t\tfor i in range(1, n):\n\t\t\tx = L[i]\n\t\t\tpar[i] = levels[x-1]\n\t\t\tlevels[x] = i+1\n\n\n# n is the number of nodes\n# k is the max number of children allowed per node\ndef getNumTrees(n, k):\n\tnum = 0\n\tL = []\n\tpar = []\n\tlevels = []\n\tchildren = []\n\n\tp = n-1\n\tq = 0\n\n\tfor i in range(n):\n\t\tL.append(i)\n\t\tpar.append(i)\n\t\tlevels.append(i+1)\n\t\tchildren.append(0)\n\n\twhile (p > 0):\n\t\tfor i in range(n):\n\t\t\tchildren[i] = 0\n\t\tfor i in range(n):\n\t\t\tchildren[par[i]] += 1\n\n\t\tif max(children) <= k:\n\t\t\tnum += 1\n\n\t\tp = 0\n\t\tfor i in range(n-1, -1, -1):\n\t\t\tif L[i] > 1:\n\t\t\t\tp = i\n\t\t\t\tbreak\n\n\t\tif p == 0:\n\t\t\tbreak\n\n\t\tfor i in range(p-1, -1, -1):\n\t\t\tif L[i] == L[p] - 1:\n\t\t\t\tq = i\n\t\t\t\tbreak\n\n\t\tfor i in range(p, n):\n\t\t\tL[i] = L[i-p+q]\n\n\t\tfor i in range(1, n):\n\t\t\tx = L[i]\n\t\t\tpar[i] = levels[x-1]\n\t\t\tlevels[x] = i+1\n\n\treturn num\n\n\nif __name__ == \"__main__\":\n\t\n\tif len(sys.argv) < 2:\n\t\tprint 'Usage: python', sys.argv[0], '<max_num_nodes> [<max_branching_factor>]'\n\t\tsys.exit(0)\n\t\t\n\tmaxNumNodes = 1 + int(sys.argv[1])\n\tk = maxNumNodes\n\n\tif len(sys.argv) == 3:\n\t\tk = int(sys.argv[2])\n\n\tfor i in range(2, maxNumNodes):\n\t\tx = getNumTrees(i, k)\n\t\tprint 'Number of trees with ', i, ' nodes: ', x\n\t\tif x > 100000:\n\t\t\tprint 'Sorry, that is too many trees to write on file. Aborting now, already written files are ok to use.'\n\t\t\tsys.exit(3)\n\t\t\t\n\t\tadjFile = open('.\/GammaAdjMatrices\/AdjacencyMatrix' + str(i) + '.txt', 'w')\n\t\tgammaFile = open('.\/GammaAdjMatrices\/GammaMatrix' + str(i) + '.txt', 'w')\n\t\t\n\t\tadjFile.write(str(i) + ' ' + str(x) + '\\n\\n')\n\t\tgammaFile.write(str(i) + ' ' + str(x) + '\\n')\n\t\tgetRootedTrees(adjFile, gammaFile, i, k, False)\n\t\t\n\t\tadjFile.close()\n\t\tgammaFile.close()\n\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code generates rooted trees and writes their adjacency and gamma matrices to files. To use it, run the script with the maximum number of nodes as the first argument and the maximum branching factor (optional) as the second argument. The code will output the number of trees for each number of nodes and write the matrices to files in the GammaAdjMatrices directory. If the number of trees is greater than 100,000, the code will abort.\n\n### Input:\n\n\n### Output:\n\nimport sys\n\n# G is the gamma matrix\n# par is the parent array\n# n is the number of nodes\ndef writeGammaMatrix(gammaFile, G, par, n):\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tG[i][j] = 0\n\n\tfor i in range(n):\n\t\tG[i][i] = 1\n\t\tj = par[i]-1\n\t\twhile j > -1:\n\t\t\tG[j][i] = 1\n\t\t\tj = par[j]-1\n\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tgammaFile.write(str(G[i][j]) + ' ')\n\t\tgammaFile.write('\\n')\n\n\tgammaFile.write('\\n')\n\n\n# par is the parent array\n# n is the number of nodes\ndef writeAdjMatrix(adjFile, par, n):\n\tadjFile.write(str(n-1)) # number of edges\n\tfor i in range(1, n):\n\t\tadjFile.write('  ' + str(par[i]-1) + '  ' + str(i) + '  ')\n\tadjFile.write('\\n');\n\n\n# writes a dot file to be processed with Graphviz\ndef writeDotFile(par, n, num):\n\tdotFile = open('.\/GammaAdjMatrices\/dotFile' + str(n) + '_' + str(num-1) + '.dot', 'w')\n\tdotFile.write('digraph G { \\n')\n\tfor i in range(1, n):\n\t\tdotFile.write(str(par[i]-1) + ' -> ' + str(i) + ';\\n')\n\tdotFile.write('}\\n')\n\tdotFile.close()\n\n\n# n is the number of nodes\n# k is the max number of children allowed per node\ndef getRootedTrees(adjFile, gammaFile, n, k, writeDots):\n\tnum = 0\n\tL = []\n\tpar = []\n\tlevels = []\n\tchildren = []\n\tG = []\n\n\tp = n-1\n\tq = 0\n\n\tfor i in range(n):\n\t\tL.append(i)\n\t\tpar.append(i)\n\t\tlevels.append(i+1)\n\t\tchildren.append(0)\n\t\tG.append([])\n\t\tfor j in range(n):\n\t\t\tG[i].append(0)\n\n\twhile (p > 0):\n\t\tfor i in range(n):\n\t\t\tchildren[i] = 0\n\t\tfor i in range(n):\n\t\t\tchildren[par[i]] += 1\n\n\t\tif max(children) <= k:\n\t\t\tnum += 1\n\t\t\twriteAdjMatrix(adjFile, par, n)\n\t\t\twriteGammaMatrix(gammaFile, G, par, n)\n\t\t\tif writeDots:\n\t\t\t\twriteDotFile(par, n, num)\n\n\t\tp = 0\n\t\tfor i in range(n-1, -1, -1):\n\t\t\tif L[i] > 1:\n\t\t\t\tp = i\n\t\t\t\tbreak\n\n\t\tif p == 0:\n\t\t\tbreak\n\n\t\tfor i in range(p-1, -1, -1):\n\t\t\tif L[i] == L[p] - 1:\n\t\t\t\tq = i\n\t\t\t\tbreak\n\n\t\tfor i in range(p, n):\n\t\t\tL[i] = L[i-p+q]\n\n\t\tfor i in range(1, n):\n\t\t\tx = L[i]\n\t\t\tpar[i] = levels[x-1]\n\t\t\tlevels[x] = i+1\n\n\n# n is the number of nodes\n# k is the max number of children allowed per node\ndef getNumTrees(n, k):\n\tnum = 0\n\tL = []\n\tpar = []\n\tlevels = []\n\tchildren = []\n\n\tp = n-1\n\tq = 0\n\n\tfor i in range(n):\n\t\tL.append(i)\n\t\tpar.append(i)\n\t\tlevels.append(i+1)\n\t\tchildren.append(0)\n\n\twhile (p > 0):\n\t\tfor i in range(n):\n\t\t\tchildren[i] = 0\n\t\tfor i in range(n):\n\t\t\tchildren[par[i]] += 1\n\n\t\tif max(children) <= k:\n\t\t\tnum += 1\n\n\t\tp = 0\n\t\tfor i in range(n-1, -1, -1):\n\t\t\tif L[i] > 1:\n\t\t\t\tp = i\n\t\t\t\tbreak\n\n\t\tif p == 0:\n\t\t\tbreak\n\n\t\tfor i in range(p-1, -1, -1):\n\t\t\tif L[i] == L[p] - 1:\n\t\t\t\tq = i\n\t\t\t\tbreak\n\n\t\tfor i in range(p, n):\n\t\t\tL[i] = L[i-p+q]\n\n\t\tfor i in range(1, n):\n\t\t\tx = L[i]\n\t\t\tpar[i] = levels[x-1]\n\t\t\tlevels[x] = i+1\n\n\treturn num\n\n\nif __name__ == \"__main__\":\n\t\n\tif len(sys.argv) < 2:\n\t\tprint 'Usage: python', sys.argv[0], '<max_num_nodes> [<max_branching_factor>]'\n\t\tsys.exit(0)\n\t\t\n\tmaxNumNodes = 1 + int(sys.argv[1])\n\tk = maxNumNodes\n\n\tif len(sys.argv) == 3:\n\t\tk = int(sys.argv[2])\n\n\tfor i in range(2, maxNumNodes):\n\t\tx = getNumTrees(i, k)\n\t\tprint 'Number of trees with ', i, ' nodes: ', x\n\t\tif x > 100000:\n\t\t\tprint 'Sorry, that is too many trees to write on file. Aborting now, already written files are ok to use.'\n\t\t\tsys.exit(3)\n\t\t\t\n\t\tadjFile = open('.\/GammaAdjMatrices\/AdjacencyMatrix' + str(i) + '.txt', 'w')\n\t\tgammaFile = open('.\/GammaAdjMatrices\/GammaMatrix' + str(i) + '.txt', 'w')\n\t\t\n\t\tadjFile.write(str(i) + ' ' + str(x) + '\\n\\n')\n\t\tgammaFile.write(str(i) + ' ' + str(x) + '\\n')\n\t\tgetRootedTrees(adjFile, gammaFile, i, k, False)\n\t\t\n\t\tadjFile.close()\n\t\tgammaFile.close()\n\n"}
{"instruction":"Construct a python program to keep track of the total number of times each word in an input string has been encountered.","input":"\"This is a test string and this is a test string again\"","output":"# Defining a function to keep track of the total number of times each word in an input string has been encountered\ndef count_words(input_string):\n    words_dict = dict()\n\n    for word in input_string.split():\n        if word not in words_dict:\n            words_dict[word] = 1\n        else:\n            words_dict[word] += 1\n\n    return words_dict\n\n# Testing the count_words() function\ninput_string = \"This is a test string and this is a test string again\"\nprint(count_words(input_string)) # {'This': 2, 'is': 2, 'a': 2, 'test': 2, 'string': 2, 'and': 1, 'again': 1}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a python program to keep track of the total number of times each word in an input string has been encountered.\n\n### Input:\n\"This is a test string and this is a test string again\"\n\n### Output:\n# Defining a function to keep track of the total number of times each word in an input string has been encountered\ndef count_words(input_string):\n    words_dict = dict()\n\n    for word in input_string.split():\n        if word not in words_dict:\n            words_dict[word] = 1\n        else:\n            words_dict[word] += 1\n\n    return words_dict\n\n# Testing the count_words() function\ninput_string = \"This is a test string and this is a test string again\"\nprint(count_words(input_string)) # {'This': 2, 'is': 2, 'a': 2, 'test': 2, 'string': 2, 'and': 1, 'again': 1}"}
{"instruction":"Use the BeautifulSoup library in Python to parse HTML from a website.","input":"Example website: https:\/\/www.example.com","output":"import requests\nfrom bs4 import BeautifulSoup\n\n#make a GET request\nresponse = requests.get('https:\/\/www.example.com')\n\n#parse HTML\nsoup = BeautifulSoup(response.text, 'html.parser')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the BeautifulSoup library in Python to parse HTML from a website.\n\n### Input:\nExample website: https:\/\/www.example.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n#make a GET request\nresponse = requests.get('https:\/\/www.example.com')\n\n#parse HTML\nsoup = BeautifulSoup(response.text, 'html.parser')"}
{"instruction":"Create a Python program that uses the NLTK package to classify a sentence as negative or positive.","input":"Sentence: The flight was really terrible.","output":"import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentence = 'The flight was really terrible.'\n\n# Initialize the sentiment analyzer\nsia = SentimentIntensityAnalyzer()\n\n# Use the sentiment analyzer to classify the sentence\nscores = sia.polarity_scores(sentence)\n\n# Print the result\nprint(scores[\"compound\"] > 0.0)\n# Output: False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses the NLTK package to classify a sentence as negative or positive.\n\n### Input:\nSentence: The flight was really terrible.\n\n### Output:\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentence = 'The flight was really terrible.'\n\n# Initialize the sentiment analyzer\nsia = SentimentIntensityAnalyzer()\n\n# Use the sentiment analyzer to classify the sentence\nscores = sia.polarity_scores(sentence)\n\n# Print the result\nprint(scores[\"compound\"] > 0.0)\n# Output: False"}
{"instruction":"Using the provided Python code, optimize the code to be as efficient as possible.","input":"x = 0\ny = 0\n\ndef func():\nglobal x\nglobal y\nx += 1\ny += 2\n\nfor i in range(10000):\nfunc()","output":"x = 0\ny = 0\n\ndef func():\nglobal x, y\nx, y = x+1, y+2\n\nfunc()\nx += 9999\ny += 19998","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the provided Python code, optimize the code to be as efficient as possible.\n\n### Input:\nx = 0\ny = 0\n\ndef func():\nglobal x\nglobal y\nx += 1\ny += 2\n\nfor i in range(10000):\nfunc()\n\n### Output:\nx = 0\ny = 0\n\ndef func():\nglobal x, y\nx, y = x+1, y+2\n\nfunc()\nx += 9999\ny += 19998"}
{"instruction":"Generate an array of random numbers in Python.","input":"size: 10","output":"import numpy as np\n\nsize = 10\nrandom_array = np.random.randint(0, 100, size)\nprint(random_array)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an array of random numbers in Python.\n\n### Input:\nsize: 10\n\n### Output:\nimport numpy as np\n\nsize = 10\nrandom_array = np.random.randint(0, 100, size)\nprint(random_array)"}
{"instruction":"Create a program to generate unique 5-digit IDs in Python.","input":"Not applicable","output":"import random\n\ndef generate_id():\n # Generate a list of 5 random integers between 0-9\n digits = [random.randint(0, 9) for i in range(5)]\n \n # Convert the list of numbers to a string\n unique_id = \"\".join(str(digit) for digit in digits)\n \n # Return the unique ID\n return unique_id\n\n# Generate a unique ID\nunique_id = generate_id()\nprint(unique_id)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to generate unique 5-digit IDs in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\ndef generate_id():\n # Generate a list of 5 random integers between 0-9\n digits = [random.randint(0, 9) for i in range(5)]\n \n # Convert the list of numbers to a string\n unique_id = \"\".join(str(digit) for digit in digits)\n \n # Return the unique ID\n return unique_id\n\n# Generate a unique ID\nunique_id = generate_id()\nprint(unique_id)"}
{"instruction":"Convert a given python data structure into a json string using json package","input":"data = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"location\": \"Greece\"\n}","output":"import json\n\n# convert python data structure to json\ndata = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"location\": \"Greece\"\n}\n\ndata_string = json.dumps(data)\n\nprint(data_string) # '{\"name\": \"John\", \"age\": 30, \"location\": \"Greece\"}'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a given python data structure into a json string using json package\n\n### Input:\ndata = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"location\": \"Greece\"\n}\n\n### Output:\nimport json\n\n# convert python data structure to json\ndata = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"location\": \"Greece\"\n}\n\ndata_string = json.dumps(data)\n\nprint(data_string) # '{\"name\": \"John\", \"age\": 30, \"location\": \"Greece\"}'"}
{"instruction":"Write a Python code to print the Fibonacci series between those two numbers.","input":"Start: 1\nEnd: 10","output":"def fibonacci_series(start, end): \n    series_list = [] \n    for n in range(0, end): \n        if (start <= n): \n            series_list.append(n) \n\n    n1, n2 = 0, 1\n    for i in range(2,end): \n        nth = n1 + n2 \n        n1 = n2 \n        n2 = nth \n        if (start <= nth): \n            series_list.append(nth) \n    return series_list \n\nstart = int(input(\"Start: \"))\nend = int(input(\"End: \"))\n\nprint(\"Fibonacci Series:\",fibonacci_series(start, end))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to print the Fibonacci series between those two numbers.\n\n### Input:\nStart: 1\nEnd: 10\n\n### Output:\ndef fibonacci_series(start, end): \n    series_list = [] \n    for n in range(0, end): \n        if (start <= n): \n            series_list.append(n) \n\n    n1, n2 = 0, 1\n    for i in range(2,end): \n        nth = n1 + n2 \n        n1 = n2 \n        n2 = nth \n        if (start <= nth): \n            series_list.append(nth) \n    return series_list \n\nstart = int(input(\"Start: \"))\nend = int(input(\"End: \"))\n\nprint(\"Fibonacci Series:\",fibonacci_series(start, end))"}
{"instruction":"Design a chatbot in Python to help a customer find the best product for them.","input":"The customer requirement is for an energy efficient appliance.","output":"products = [\n {'name': ' microwave', 'energy_efficiency': 'high'},\n {'name': 'air conditioner', 'energy_efficiency': 'medium'},\n {'name': 'refrigerator', 'energy_efficiency': 'high'},\n {'name': 'washing machine', 'energy_efficiency': 'low'},\n]\n\ndef find_product(customer_req):\n best_product = None\n best_efficiency = 0\n for product in products:\n  if product['energy_efficiency'] > best_efficiency and customer_req in product['name']:\n    best_product = product\n    best_efficiency = product['energy_efficiency']\n if best_product:\n    print('The best product for you is the ' + best_product['name'])\n else:\n    print('Sorry, we do not have any products matching your requirements.')\n\n#Chatbot \n\nprint('Hi, what are you looking for?')\ncustomer_req = input()\n\nfind_product(customer_req)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a chatbot in Python to help a customer find the best product for them.\n\n### Input:\nThe customer requirement is for an energy efficient appliance.\n\n### Output:\nproducts = [\n {'name': ' microwave', 'energy_efficiency': 'high'},\n {'name': 'air conditioner', 'energy_efficiency': 'medium'},\n {'name': 'refrigerator', 'energy_efficiency': 'high'},\n {'name': 'washing machine', 'energy_efficiency': 'low'},\n]\n\ndef find_product(customer_req):\n best_product = None\n best_efficiency = 0\n for product in products:\n  if product['energy_efficiency'] > best_efficiency and customer_req in product['name']:\n    best_product = product\n    best_efficiency = product['energy_efficiency']\n if best_product:\n    print('The best product for you is the ' + best_product['name'])\n else:\n    print('Sorry, we do not have any products matching your requirements.')\n\n#Chatbot \n\nprint('Hi, what are you looking for?')\ncustomer_req = input()\n\nfind_product(customer_req)"}
{"instruction":"Create a Python program that implements the insertion sort algorithm.","input":"","output":"def insertion_sort(list_):\n    for i in range(1, len(list_)):\n        temp = list_[i]\n\n        j = i-1\n        while j >= 0 and temp < list_[j]:\n            list_[j+1] = list_[j]\n            j -= 1\n        list_[j+1] = temp\n\n    return list_","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that implements the insertion sort algorithm.\n\n### Input:\n\n\n### Output:\ndef insertion_sort(list_):\n    for i in range(1, len(list_)):\n        temp = list_[i]\n\n        j = i-1\n        while j >= 0 and temp < list_[j]:\n            list_[j+1] = list_[j]\n            j -= 1\n        list_[j+1] = temp\n\n    return list_"}
{"instruction":"Write a Python program to compute the average of the numbers in the list.","input":"numbers = [1, 3, 5, 7, 9]","output":"def compute_average(numbers):\nsum = 0\nfor num in numbers:\n sum += num\nreturn sum\/len(numbers)\n\nnumbers = [1, 3, 5, 7, 9]\naverage = compute_average(numbers)\nprint(\"Average is \" + str(average))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compute the average of the numbers in the list.\n\n### Input:\nnumbers = [1, 3, 5, 7, 9]\n\n### Output:\ndef compute_average(numbers):\nsum = 0\nfor num in numbers:\n sum += num\nreturn sum\/len(numbers)\n\nnumbers = [1, 3, 5, 7, 9]\naverage = compute_average(numbers)\nprint(\"Average is \" + str(average))"}
{"instruction":"Compose a basic blockchain system in Python.","input":"","output":"import hashlib\nimport json\n\n# We will use SHA256 as our hashing function\ndef sha256(data):\n    hash_function = hashlib.sha256()\n    hash_function.update(data.encode('utf-8'))\n    return hash_function.hexdigest()\n\n# Create a class for each block\nclass Block:\n    def __init__(self, index, timestamp, data, previous_hash):\n        self.index = index\n        self.timestamp = timestamp\n        self.data = data\n        self.previous_hash = previous_hash\n        self.hash = sha256(f'{self.index}{self.timestamp}{self.data}{self.previous_hash}')\n\n# Create a class for the blockchain\nclass Blockchain:\n    def __init__(self):\n        self.chain = []\n\n    def add_block(self, data):\n        previous_hash = self.chain[-1].hash if len(self.chain) > 0 else None\n        block = Block(len(self.chain), data['timestamp'], data['data'], previous_hash)\n        self.chain.append(block)\n\n    # This method will return the entire blockchain in JSON format\n    def get_chain(self):\n        return json.dumps([b.__dict__ for b in self.chain], indent=2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a basic blockchain system in Python.\n\n### Input:\n\n\n### Output:\nimport hashlib\nimport json\n\n# We will use SHA256 as our hashing function\ndef sha256(data):\n    hash_function = hashlib.sha256()\n    hash_function.update(data.encode('utf-8'))\n    return hash_function.hexdigest()\n\n# Create a class for each block\nclass Block:\n    def __init__(self, index, timestamp, data, previous_hash):\n        self.index = index\n        self.timestamp = timestamp\n        self.data = data\n        self.previous_hash = previous_hash\n        self.hash = sha256(f'{self.index}{self.timestamp}{self.data}{self.previous_hash}')\n\n# Create a class for the blockchain\nclass Blockchain:\n    def __init__(self):\n        self.chain = []\n\n    def add_block(self, data):\n        previous_hash = self.chain[-1].hash if len(self.chain) > 0 else None\n        block = Block(len(self.chain), data['timestamp'], data['data'], previous_hash)\n        self.chain.append(block)\n\n    # This method will return the entire blockchain in JSON format\n    def get_chain(self):\n        return json.dumps([b.__dict__ for b in self.chain], indent=2)"}
{"instruction":"Generate a Python program to create a game loop.","input":"","output":"import pygame\n\n# Game constants \nWIDTH = 800\nHEIGHT = 600\nFPS = 30\n\n# Initialize pygame\npygame.init()\n\n# Create window\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\n\n# Game loop\nrunning = True\nwhile running:\n    # Process events\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n            \n    # Logic \n\n    # Rendering\n    screen.fill(0, 0, 0)\n    pygame.display.flip()\n\n# Terminates the game\npygame.quit()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to create a game loop.\n\n### Input:\n\n\n### Output:\nimport pygame\n\n# Game constants \nWIDTH = 800\nHEIGHT = 600\nFPS = 30\n\n# Initialize pygame\npygame.init()\n\n# Create window\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\n\n# Game loop\nrunning = True\nwhile running:\n    # Process events\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n            \n    # Logic \n\n    # Rendering\n    screen.fill(0, 0, 0)\n    pygame.display.flip()\n\n# Terminates the game\npygame.quit()"}
{"instruction":"Compose a python program to find the sum of the digits of a given number.","input":"","output":"def sum_of_digits(num):\n    sum = 0\n    while(num > 0):\n        d = num % 10\n        num = num \/\/ 10\n        sum += d\n    return sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a python program to find the sum of the digits of a given number.\n\n### Input:\n\n\n### Output:\ndef sum_of_digits(num):\n    sum = 0\n    while(num > 0):\n        d = num % 10\n        num = num \/\/ 10\n        sum += d\n    return sum"}
{"instruction":"Create an object from a class in Python.","input":"class Employee: def __init__ (self, name, age): self.name = name self.age = age","output":"john = Employee(\"John\", 25)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an object from a class in Python.\n\n### Input:\nclass Employee: def __init__ (self, name, age): self.name = name self.age = age\n\n### Output:\njohn = Employee(\"John\", 25)"}
{"instruction":"Create a table in python using a dictionary","input":"","output":"table = {\n    \"Column1\": [1, 2, 3],\n    \"Column2\": [\"A\", \"B\", \"C\"],\n    \"Column3\": [True, False, False]\n    }","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a table in python using a dictionary\n\n### Input:\n\n\n### Output:\ntable = {\n    \"Column1\": [1, 2, 3],\n    \"Column2\": [\"A\", \"B\", \"C\"],\n    \"Column3\": [True, False, False]\n    }"}
{"instruction":"Classify a list of words into their corresponding part of speech using Python.","input":"[\"happy\", \"run\", \"went\", \"like\"]","output":"pos_tags = nltk.pos_tag([\"happy\", \"run\", \"went\", \"like\"])\nfor tag in pos_tags:\n    print(f'{tag[0]}: {tag[1]}')\n\n# Output \n# happy: JJ\n# run: VB\n# went: VBD\n# like: IN","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nClassify a list of words into their corresponding part of speech using Python.\n\n### Input:\n[\"happy\", \"run\", \"went\", \"like\"]\n\n### Output:\npos_tags = nltk.pos_tag([\"happy\", \"run\", \"went\", \"like\"])\nfor tag in pos_tags:\n    print(f'{tag[0]}: {tag[1]}')\n\n# Output \n# happy: JJ\n# run: VB\n# went: VBD\n# like: IN"}
{"instruction":"Design a Python program that prints out the first 10 prime numbers.","input":"","output":"\"\"\"\nDesign a Python program to print out the first 10 prime numbers\n\"\"\"\n\ndef get_prime_numbers(n):\n    prime_numbers = []\n    x = 2\n    while len(prime_numbers) < n:\n        is_prime = True\n        for num in prime_numbers:\n            if x % num == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            prime_numbers.append(x)\n\n        x += 1\n\n    return prime_numbers\n\nif __name__ == '__main__':\n    result = get_prime_numbers(10)\n    print(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program that prints out the first 10 prime numbers.\n\n### Input:\n\n\n### Output:\n\"\"\"\nDesign a Python program to print out the first 10 prime numbers\n\"\"\"\n\ndef get_prime_numbers(n):\n    prime_numbers = []\n    x = 2\n    while len(prime_numbers) < n:\n        is_prime = True\n        for num in prime_numbers:\n            if x % num == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            prime_numbers.append(x)\n\n        x += 1\n\n    return prime_numbers\n\nif __name__ == '__main__':\n    result = get_prime_numbers(10)\n    print(result)"}
{"instruction":"Develop a Python program that takes in an URL and extracts all the text content from the page.","input":"'https:\/\/www.example.com\/'","output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.example.com\/'\n\npage = requests.get(url)\nhtml = BeautifulSoup(page.content, 'html.parser')\n\ntexts = []\nfor txt in  html.find_all('p'):\n    texts.append(txt.text)\n\nprint(texts)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that takes in an URL and extracts all the text content from the page.\n\n### Input:\n'https:\/\/www.example.com\/'\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.example.com\/'\n\npage = requests.get(url)\nhtml = BeautifulSoup(page.content, 'html.parser')\n\ntexts = []\nfor txt in  html.find_all('p'):\n    texts.append(txt.text)\n\nprint(texts)"}
{"instruction":"Create a function in Python to print a number pyramid given a height.","input":"3","output":"def pyramid(h): \n    \n    for i in range(0, h): \n        for j in range(0, h-i-1): \n            print(end=\" \") \n        for j in range(0, i+1): \n            print(\"* \", end=\"\") \n        print(\"\\r\") \n\npyramid(3)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to print a number pyramid given a height.\n\n### Input:\n3\n\n### Output:\ndef pyramid(h): \n    \n    for i in range(0, h): \n        for j in range(0, h-i-1): \n            print(end=\" \") \n        for j in range(0, i+1): \n            print(\"* \", end=\"\") \n        print(\"\\r\") \n\npyramid(3)"}
{"instruction":"Generate a Python script to convert a given address into its equivalent latitude and longitude coordinates.","input":"Tokyo Tower, Tokyo","output":"import requests\nimport json\n\ndef get_lat_long_from_address(address):\n    \"\"\"\n    Converting a given address into its equivalent latitude and longitude coordinates.\n    \"\"\"\n    try:\n        url = 'https:\/\/maps.googleapis.com\/maps\/api\/geocode\/json?address=%s' % address\n        response = requests.get(url).json()\n\n        geography = response['results'][0]['geometry']\n        latitude = geography['location']['lat']\n        longitude = geography['location']['lng']\n        return latitude, longitude\n    except:\n        return None\n\nlat, lng = get_lat_long_from_address(\"Tokyo Tower, Tokyo\")\nprint(\"Latitude: %.06f \\t Longitude: %.06f\" % (lat, lng))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to convert a given address into its equivalent latitude and longitude coordinates.\n\n### Input:\nTokyo Tower, Tokyo\n\n### Output:\nimport requests\nimport json\n\ndef get_lat_long_from_address(address):\n    \"\"\"\n    Converting a given address into its equivalent latitude and longitude coordinates.\n    \"\"\"\n    try:\n        url = 'https:\/\/maps.googleapis.com\/maps\/api\/geocode\/json?address=%s' % address\n        response = requests.get(url).json()\n\n        geography = response['results'][0]['geometry']\n        latitude = geography['location']['lat']\n        longitude = geography['location']['lng']\n        return latitude, longitude\n    except:\n        return None\n\nlat, lng = get_lat_long_from_address(\"Tokyo Tower, Tokyo\")\nprint(\"Latitude: %.06f \\t Longitude: %.06f\" % (lat, lng))"}
{"instruction":"Create a Python program that takes a given list and returns a new list without any duplicates.","input":"[1, 2, 2, 3, 4, 5, 5, 6]","output":"def remove_duplicates(lst):\n    new_list = []\n    for i in lst:\n        if i not in new_list:\n            new_list.append(i)\n    \n    return new_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a given list and returns a new list without any duplicates.\n\n### Input:\n[1, 2, 2, 3, 4, 5, 5, 6]\n\n### Output:\ndef remove_duplicates(lst):\n    new_list = []\n    for i in lst:\n        if i not in new_list:\n            new_list.append(i)\n    \n    return new_list"}
{"instruction":"Write Python code to get the difference between two lists.","input":"[1, 2, 3, 4]\n[1, 2, 5, 6]","output":"def difference(list1, list2):\n    difference_list = []\n    for num1 in list1:\n        if num1 not in list2:\n            difference_list.append(num1)\n    for num2 in list2:\n        if num2 not in list1:\n            difference_list.append(num2)\n    return difference_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to get the difference between two lists.\n\n### Input:\n[1, 2, 3, 4]\n[1, 2, 5, 6]\n\n### Output:\ndef difference(list1, list2):\n    difference_list = []\n    for num1 in list1:\n        if num1 not in list2:\n            difference_list.append(num1)\n    for num2 in list2:\n        if num2 not in list1:\n            difference_list.append(num2)\n    return difference_list"}
{"instruction":"This code is used to interact with the wpa_supplicant1 service through the D-Bus interface. To use it, import the necessary modules and define the D-Bus service, interface, and object paths. Then, define functions to handle various signals and properties changes, such as listing available interfaces, showing BSS information, and scanning for networks. Finally, set up the D-Bus signal receivers and start the main loop.","input":"","output":"#!\/usr\/bin\/python\r\n\r\nimport dbus\r\nimport sys, os\r\nimport time\r\nimport gobject\r\nfrom dbus.mainloop.glib import DBusGMainLoop\r\n\r\nWPAS_DBUS_SERVICE = \"fi.w1.wpa_supplicant1\"\r\nWPAS_DBUS_INTERFACE = \"fi.w1.wpa_supplicant1\"\r\nWPAS_DBUS_OPATH = \"\/fi\/w1\/wpa_supplicant1\"\r\n\r\nWPAS_DBUS_INTERFACES_INTERFACE = \"fi.w1.wpa_supplicant1.Interface\"\r\nWPAS_DBUS_INTERFACES_OPATH = \"\/fi\/w1\/wpa_supplicant1\/Interfaces\"\r\nWPAS_DBUS_BSS_INTERFACE = \"fi.w1.wpa_supplicant1.BSS\"\r\nWPAS_DBUS_NETWORK_INTERFACE = \"fi.w1.wpa_supplicant1.Network\"\r\n\r\ndef byte_array_to_string(s):\r\n\timport urllib\r\n\tr = \"\"    \r\n\tfor c in s:\r\n\t\tif c >= 32 and c < 127:\r\n\t\t\tr += \"%c\" % c\r\n\t\telse:\r\n\t\t\tr += urllib.quote(chr(c))\r\n\treturn r\r\n\r\ndef list_interfaces(wpas_obj):\r\n\tifaces = wpas_obj.Get(WPAS_DBUS_INTERFACE, 'Interfaces',\r\n\t\t\t      dbus_interface=dbus.PROPERTIES_IFACE)\r\n\tfor path in ifaces:\r\n\t\tif_obj = bus.get_object(WPAS_DBUS_SERVICE, path)\r\n\t\tifname = if_obj.Get(WPAS_DBUS_INTERFACES_INTERFACE, 'Ifname',\r\n\t\t\t      dbus_interface=dbus.PROPERTIES_IFACE)\r\n\t\tprint ifname\r\n\r\ndef interfaceAdded(interface, properties):\r\n\tprint \"InterfaceAdded(%s): Ifname=%s\" % (interface, properties['Ifname'])\r\n\r\ndef interfaceRemoved(interface):\r\n\tprint \"InterfaceRemoved(%s)\" % (interface)\r\n\r\ndef propertiesChanged(properties):\r\n\tfor i in properties:\r\n\t\tprint \"PropertiesChanged: %s=%s\" % (i, properties[i])\r\n\r\ndef showBss(bss):\r\n\tnet_obj = bus.get_object(WPAS_DBUS_SERVICE, bss)\r\n\tnet = dbus.Interface(net_obj, WPAS_DBUS_BSS_INTERFACE)\r\n\r\n\t# Convert the byte-array for SSID and BSSID to printable strings\r\n\tval = net_obj.Get(WPAS_DBUS_BSS_INTERFACE, 'BSSID',\r\n\t\t\t  dbus_interface=dbus.PROPERTIES_IFACE)\r\n\tbssid = \"\"\r\n\tfor item in val:\r\n\t\tbssid = bssid + \":%02x\" % item\r\n\tbssid = bssid[1:]\r\n\tval = net_obj.Get(WPAS_DBUS_BSS_INTERFACE, 'SSID',\r\n\t\t\t  dbus_interface=dbus.PROPERTIES_IFACE)\r\n\tssid = byte_array_to_string(val)\r\n\r\n\tval = net_obj.Get(WPAS_DBUS_BSS_INTERFACE, 'WPAIE',\r\n\t\t\t  dbus_interface=dbus.PROPERTIES_IFACE)\r\n\twpa = \"no\"\r\n\tif val != None:\r\n\t\twpa = \"yes\"\r\n\tval = net_obj.Get(WPAS_DBUS_BSS_INTERFACE, 'RSNIE',\r\n\t\t\t  dbus_interface=dbus.PROPERTIES_IFACE)\r\n\twpa2 = \"no\"\r\n\tif val != None:\r\n\t\twpa2 = \"yes\"\r\n\tfreq = net_obj.Get(WPAS_DBUS_BSS_INTERFACE, 'Frequency',\r\n\t\t\t   dbus_interface=dbus.PROPERTIES_IFACE)\r\n\tsignal = net_obj.Get(WPAS_DBUS_BSS_INTERFACE, 'Signal',\r\n\t\t\t     dbus_interface=dbus.PROPERTIES_IFACE)\r\n\tval = net_obj.Get(WPAS_DBUS_BSS_INTERFACE, 'Rates',\r\n\t\t\t  dbus_interface=dbus.PROPERTIES_IFACE)\r\n\tif len(val) > 0:\r\n\t\tmaxrate = val[0] \/ 1000000\r\n\telse:\r\n\t\tmaxrate = 0\r\n\r\n\tprint \"  %s  ::  ssid='%s'  wpa=%s  wpa2=%s  signal=%d  rate=%d  freq=%d\" % (bssid, ssid, wpa, wpa2, signal, maxrate, freq)\r\n\r\ndef scanDone(success):\r\n\tgobject.MainLoop().quit()\r\n\tprint \"Scan done: success=%s\" % success\r\n\r\ndef scanDone2(success, path=None):\r\n\tprint \"Scan done: success=%s [path=%s]\" % (success, path)\r\n\r\ndef bssAdded(bss, properties):\r\n\tprint \"BSS added: %s\" % (bss)\r\n\tshowBss(bss)\r\n\r\ndef bssRemoved(bss):\r\n\tprint \"BSS removed: %s\" % (bss)\r\n\r\ndef blobAdded(blob):\r\n\tprint \"BlobAdded(%s)\" % (blob)\r\n\r\ndef blobRemoved(blob):\r\n\tprint \"BlobRemoved(%s)\" % (blob)\r\n\r\ndef networkAdded(network, properties):\r\n\tprint \"NetworkAdded(%s)\" % (network)\r\n\r\ndef networkRemoved(network):\r\n\tprint \"NetworkRemoved(%s)\" % (network)\r\n\r\ndef networkSelected(network):\r\n\tprint \"NetworkSelected(%s)\" % (network)\r\n\r\ndef propertiesChangedInterface(properties):\r\n\tfor i in properties:\r\n\t\tprint \"PropertiesChanged(interface): %s=%s\" % (i, properties[i])\r\n\r\ndef propertiesChangedBss(properties):\r\n\tfor i in properties:\r\n\t\tprint \"PropertiesChanged(BSS): %s=%s\" % (i, properties[i])\r\n\r\ndef propertiesChangedNetwork(properties):\r\n\tfor i in properties:\r\n\t\tprint \"PropertiesChanged(Network): %s=%s\" % (i, properties[i])\r\n\r\ndef main():\r\n\tdbus.mainloop.glib.DBusGMainLoop(set_as_default=True)\r\n\tglobal bus\r\n\tbus = dbus.SystemBus()\r\n\twpas_obj = bus.get_object(WPAS_DBUS_SERVICE, WPAS_DBUS_OPATH)\r\n\r\n\tif len(sys.argv) != 2:\r\n\t\tlist_interfaces(wpas_obj)\r\n\t\tos._exit(1)\r\n\r\n\twpas = dbus.Interface(wpas_obj, WPAS_DBUS_INTERFACE)\r\n\tbus.add_signal_receiver(interfaceAdded,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACE,\r\n\t\t\t\tsignal_name=\"InterfaceAdded\")\r\n\tbus.add_signal_receiver(interfaceRemoved,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACE,\r\n\t\t\t\tsignal_name=\"InterfaceRemoved\")\r\n\tbus.add_signal_receiver(propertiesChanged,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACE,\r\n\t\t\t\tsignal_name=\"PropertiesChanged\")\r\n\r\n\tifname = sys.argv[1]\r\n\tpath = wpas.GetInterface(ifname)\r\n\tif_obj = bus.get_object(WPAS_DBUS_SERVICE, path)\r\n\tiface = dbus.Interface(if_obj, WPAS_DBUS_INTERFACES_INTERFACE)\r\n\tiface.connect_to_signal(\"ScanDone\", scanDone2,\r\n\t\t\t\tpath_keyword='path')\r\n\r\n\tbus.add_signal_receiver(scanDone,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACES_INTERFACE,\r\n\t\t\t\tsignal_name=\"ScanDone\",\r\n\t\t\t\tpath=path)\r\n\tbus.add_signal_receiver(bssAdded,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACES_INTERFACE,\r\n\t\t\t\tsignal_name=\"BSSAdded\",\r\n\t\t\t\tpath=path)\r\n\tbus.add_signal_receiver(bssRemoved,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACES_INTERFACE,\r\n\t\t\t\tsignal_name=\"BSSRemoved\",\r\n\t\t\t\tpath=path)\r\n\tbus.add_signal_receiver(blobAdded,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACES_INTERFACE,\r\n\t\t\t\tsignal_name=\"BlobAdded\",\r\n\t\t\t\tpath=path)\r\n\tbus.add_signal_receiver(blobRemoved,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACES_INTERFACE,\r\n\t\t\t\tsignal_name=\"BlobRemoved\",\r\n\t\t\t\tpath=path)\r\n\tbus.add_signal_receiver(networkAdded,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACES_INTERFACE,\r\n\t\t\t\tsignal_name=\"NetworkAdded\",\r\n\t\t\t\tpath=path)\r\n\tbus.add_signal_receiver(networkRemoved,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACES_INTERFACE,\r\n\t\t\t\tsignal_name=\"NetworkRemoved\",\r\n\t\t\t\tpath=path)\r\n\tbus.add_signal_receiver(networkSelected,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACES_INTERFACE,\r\n\t\t\t\tsignal_name=\"NetworkSelected\",\r\n\t\t\t\tpath=path)\r\n\tbus.add_signal_receiver(propertiesChangedInterface,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACES_INTERFACE,\r\n\t\t\t\tsignal_name=\"PropertiesChanged\",\r\n\t\t\t\tpath=path)\r\n\r\n\tbus.add_signal_receiver(propertiesChangedBss,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_BSS_INTERFACE,\r\n\t\t\t\tsignal_name=\"PropertiesChanged\")\r\n\r\n\tbus.add_signal_receiver(propertiesChangedNetwork,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_NETWORK_INTERFACE,\r\n\t\t\t\tsignal_name=\"PropertiesChanged\")\r\n\r\n\tgobject.MainLoop().run()\r\n\r\nif __name__ == \"__main__\":\r\n\tmain()\r\n\r\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is used to interact with the wpa_supplicant1 service through the D-Bus interface. To use it, import the necessary modules and define the D-Bus service, interface, and object paths. Then, define functions to handle various signals and properties changes, such as listing available interfaces, showing BSS information, and scanning for networks. Finally, set up the D-Bus signal receivers and start the main loop.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/python\r\n\r\nimport dbus\r\nimport sys, os\r\nimport time\r\nimport gobject\r\nfrom dbus.mainloop.glib import DBusGMainLoop\r\n\r\nWPAS_DBUS_SERVICE = \"fi.w1.wpa_supplicant1\"\r\nWPAS_DBUS_INTERFACE = \"fi.w1.wpa_supplicant1\"\r\nWPAS_DBUS_OPATH = \"\/fi\/w1\/wpa_supplicant1\"\r\n\r\nWPAS_DBUS_INTERFACES_INTERFACE = \"fi.w1.wpa_supplicant1.Interface\"\r\nWPAS_DBUS_INTERFACES_OPATH = \"\/fi\/w1\/wpa_supplicant1\/Interfaces\"\r\nWPAS_DBUS_BSS_INTERFACE = \"fi.w1.wpa_supplicant1.BSS\"\r\nWPAS_DBUS_NETWORK_INTERFACE = \"fi.w1.wpa_supplicant1.Network\"\r\n\r\ndef byte_array_to_string(s):\r\n\timport urllib\r\n\tr = \"\"    \r\n\tfor c in s:\r\n\t\tif c >= 32 and c < 127:\r\n\t\t\tr += \"%c\" % c\r\n\t\telse:\r\n\t\t\tr += urllib.quote(chr(c))\r\n\treturn r\r\n\r\ndef list_interfaces(wpas_obj):\r\n\tifaces = wpas_obj.Get(WPAS_DBUS_INTERFACE, 'Interfaces',\r\n\t\t\t      dbus_interface=dbus.PROPERTIES_IFACE)\r\n\tfor path in ifaces:\r\n\t\tif_obj = bus.get_object(WPAS_DBUS_SERVICE, path)\r\n\t\tifname = if_obj.Get(WPAS_DBUS_INTERFACES_INTERFACE, 'Ifname',\r\n\t\t\t      dbus_interface=dbus.PROPERTIES_IFACE)\r\n\t\tprint ifname\r\n\r\ndef interfaceAdded(interface, properties):\r\n\tprint \"InterfaceAdded(%s): Ifname=%s\" % (interface, properties['Ifname'])\r\n\r\ndef interfaceRemoved(interface):\r\n\tprint \"InterfaceRemoved(%s)\" % (interface)\r\n\r\ndef propertiesChanged(properties):\r\n\tfor i in properties:\r\n\t\tprint \"PropertiesChanged: %s=%s\" % (i, properties[i])\r\n\r\ndef showBss(bss):\r\n\tnet_obj = bus.get_object(WPAS_DBUS_SERVICE, bss)\r\n\tnet = dbus.Interface(net_obj, WPAS_DBUS_BSS_INTERFACE)\r\n\r\n\t# Convert the byte-array for SSID and BSSID to printable strings\r\n\tval = net_obj.Get(WPAS_DBUS_BSS_INTERFACE, 'BSSID',\r\n\t\t\t  dbus_interface=dbus.PROPERTIES_IFACE)\r\n\tbssid = \"\"\r\n\tfor item in val:\r\n\t\tbssid = bssid + \":%02x\" % item\r\n\tbssid = bssid[1:]\r\n\tval = net_obj.Get(WPAS_DBUS_BSS_INTERFACE, 'SSID',\r\n\t\t\t  dbus_interface=dbus.PROPERTIES_IFACE)\r\n\tssid = byte_array_to_string(val)\r\n\r\n\tval = net_obj.Get(WPAS_DBUS_BSS_INTERFACE, 'WPAIE',\r\n\t\t\t  dbus_interface=dbus.PROPERTIES_IFACE)\r\n\twpa = \"no\"\r\n\tif val != None:\r\n\t\twpa = \"yes\"\r\n\tval = net_obj.Get(WPAS_DBUS_BSS_INTERFACE, 'RSNIE',\r\n\t\t\t  dbus_interface=dbus.PROPERTIES_IFACE)\r\n\twpa2 = \"no\"\r\n\tif val != None:\r\n\t\twpa2 = \"yes\"\r\n\tfreq = net_obj.Get(WPAS_DBUS_BSS_INTERFACE, 'Frequency',\r\n\t\t\t   dbus_interface=dbus.PROPERTIES_IFACE)\r\n\tsignal = net_obj.Get(WPAS_DBUS_BSS_INTERFACE, 'Signal',\r\n\t\t\t     dbus_interface=dbus.PROPERTIES_IFACE)\r\n\tval = net_obj.Get(WPAS_DBUS_BSS_INTERFACE, 'Rates',\r\n\t\t\t  dbus_interface=dbus.PROPERTIES_IFACE)\r\n\tif len(val) > 0:\r\n\t\tmaxrate = val[0] \/ 1000000\r\n\telse:\r\n\t\tmaxrate = 0\r\n\r\n\tprint \"  %s  ::  ssid='%s'  wpa=%s  wpa2=%s  signal=%d  rate=%d  freq=%d\" % (bssid, ssid, wpa, wpa2, signal, maxrate, freq)\r\n\r\ndef scanDone(success):\r\n\tgobject.MainLoop().quit()\r\n\tprint \"Scan done: success=%s\" % success\r\n\r\ndef scanDone2(success, path=None):\r\n\tprint \"Scan done: success=%s [path=%s]\" % (success, path)\r\n\r\ndef bssAdded(bss, properties):\r\n\tprint \"BSS added: %s\" % (bss)\r\n\tshowBss(bss)\r\n\r\ndef bssRemoved(bss):\r\n\tprint \"BSS removed: %s\" % (bss)\r\n\r\ndef blobAdded(blob):\r\n\tprint \"BlobAdded(%s)\" % (blob)\r\n\r\ndef blobRemoved(blob):\r\n\tprint \"BlobRemoved(%s)\" % (blob)\r\n\r\ndef networkAdded(network, properties):\r\n\tprint \"NetworkAdded(%s)\" % (network)\r\n\r\ndef networkRemoved(network):\r\n\tprint \"NetworkRemoved(%s)\" % (network)\r\n\r\ndef networkSelected(network):\r\n\tprint \"NetworkSelected(%s)\" % (network)\r\n\r\ndef propertiesChangedInterface(properties):\r\n\tfor i in properties:\r\n\t\tprint \"PropertiesChanged(interface): %s=%s\" % (i, properties[i])\r\n\r\ndef propertiesChangedBss(properties):\r\n\tfor i in properties:\r\n\t\tprint \"PropertiesChanged(BSS): %s=%s\" % (i, properties[i])\r\n\r\ndef propertiesChangedNetwork(properties):\r\n\tfor i in properties:\r\n\t\tprint \"PropertiesChanged(Network): %s=%s\" % (i, properties[i])\r\n\r\ndef main():\r\n\tdbus.mainloop.glib.DBusGMainLoop(set_as_default=True)\r\n\tglobal bus\r\n\tbus = dbus.SystemBus()\r\n\twpas_obj = bus.get_object(WPAS_DBUS_SERVICE, WPAS_DBUS_OPATH)\r\n\r\n\tif len(sys.argv) != 2:\r\n\t\tlist_interfaces(wpas_obj)\r\n\t\tos._exit(1)\r\n\r\n\twpas = dbus.Interface(wpas_obj, WPAS_DBUS_INTERFACE)\r\n\tbus.add_signal_receiver(interfaceAdded,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACE,\r\n\t\t\t\tsignal_name=\"InterfaceAdded\")\r\n\tbus.add_signal_receiver(interfaceRemoved,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACE,\r\n\t\t\t\tsignal_name=\"InterfaceRemoved\")\r\n\tbus.add_signal_receiver(propertiesChanged,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACE,\r\n\t\t\t\tsignal_name=\"PropertiesChanged\")\r\n\r\n\tifname = sys.argv[1]\r\n\tpath = wpas.GetInterface(ifname)\r\n\tif_obj = bus.get_object(WPAS_DBUS_SERVICE, path)\r\n\tiface = dbus.Interface(if_obj, WPAS_DBUS_INTERFACES_INTERFACE)\r\n\tiface.connect_to_signal(\"ScanDone\", scanDone2,\r\n\t\t\t\tpath_keyword='path')\r\n\r\n\tbus.add_signal_receiver(scanDone,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACES_INTERFACE,\r\n\t\t\t\tsignal_name=\"ScanDone\",\r\n\t\t\t\tpath=path)\r\n\tbus.add_signal_receiver(bssAdded,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACES_INTERFACE,\r\n\t\t\t\tsignal_name=\"BSSAdded\",\r\n\t\t\t\tpath=path)\r\n\tbus.add_signal_receiver(bssRemoved,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACES_INTERFACE,\r\n\t\t\t\tsignal_name=\"BSSRemoved\",\r\n\t\t\t\tpath=path)\r\n\tbus.add_signal_receiver(blobAdded,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACES_INTERFACE,\r\n\t\t\t\tsignal_name=\"BlobAdded\",\r\n\t\t\t\tpath=path)\r\n\tbus.add_signal_receiver(blobRemoved,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACES_INTERFACE,\r\n\t\t\t\tsignal_name=\"BlobRemoved\",\r\n\t\t\t\tpath=path)\r\n\tbus.add_signal_receiver(networkAdded,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACES_INTERFACE,\r\n\t\t\t\tsignal_name=\"NetworkAdded\",\r\n\t\t\t\tpath=path)\r\n\tbus.add_signal_receiver(networkRemoved,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACES_INTERFACE,\r\n\t\t\t\tsignal_name=\"NetworkRemoved\",\r\n\t\t\t\tpath=path)\r\n\tbus.add_signal_receiver(networkSelected,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACES_INTERFACE,\r\n\t\t\t\tsignal_name=\"NetworkSelected\",\r\n\t\t\t\tpath=path)\r\n\tbus.add_signal_receiver(propertiesChangedInterface,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_INTERFACES_INTERFACE,\r\n\t\t\t\tsignal_name=\"PropertiesChanged\",\r\n\t\t\t\tpath=path)\r\n\r\n\tbus.add_signal_receiver(propertiesChangedBss,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_BSS_INTERFACE,\r\n\t\t\t\tsignal_name=\"PropertiesChanged\")\r\n\r\n\tbus.add_signal_receiver(propertiesChangedNetwork,\r\n\t\t\t\tdbus_interface=WPAS_DBUS_NETWORK_INTERFACE,\r\n\t\t\t\tsignal_name=\"PropertiesChanged\")\r\n\r\n\tgobject.MainLoop().run()\r\n\r\nif __name__ == \"__main__\":\r\n\tmain()\r\n\r\n"}
{"instruction":"Create a Python library to identify whether a movie or a series belongs to the genre of action, romance or comedy.","input":"genre_list = [\"Action\", \"Romance\", \"Comedy\"]\n\nsample_movie=\"The Dark Knight\"","output":"def identify_movie_genre(movie, genre_list):\n    movie_genre = None\n  \n    for genre in genre_list:\n        search_terms = genre.lower().split()\n        if all(term in movie.lower() for term in search_terms):\n            movie_genre = genre\n            break\n  \n    return movie_genre\n  \nprint(identify_movie_genre(sample_movie, genre_list))\n# Output: 'Action'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python library to identify whether a movie or a series belongs to the genre of action, romance or comedy.\n\n### Input:\ngenre_list = [\"Action\", \"Romance\", \"Comedy\"]\n\nsample_movie=\"The Dark Knight\"\n\n### Output:\ndef identify_movie_genre(movie, genre_list):\n    movie_genre = None\n  \n    for genre in genre_list:\n        search_terms = genre.lower().split()\n        if all(term in movie.lower() for term in search_terms):\n            movie_genre = genre\n            break\n  \n    return movie_genre\n  \nprint(identify_movie_genre(sample_movie, genre_list))\n# Output: 'Action'"}
{"instruction":"Create a web service in Python that takes in a temperature value as input in Celsius and returns the equivalent value in Fahrenheit.","input":"celsius = 21","output":"import flask\n\napp = flask.Flask(__name__)\n\n@app.route('\/celsius-to-fahrenheit\/<int:celsius>', methods=['GET'])\ndef celsius_to_fahrenheit(celsius):\n fahrenheit = celsius * 9\/5 + 32\n return flask.jsonify({'celsius': celsius, 'fahrenheit': fahrenheit})\n \nif __name__ == '__main__':\n app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web service in Python that takes in a temperature value as input in Celsius and returns the equivalent value in Fahrenheit.\n\n### Input:\ncelsius = 21\n\n### Output:\nimport flask\n\napp = flask.Flask(__name__)\n\n@app.route('\/celsius-to-fahrenheit\/<int:celsius>', methods=['GET'])\ndef celsius_to_fahrenheit(celsius):\n fahrenheit = celsius * 9\/5 + 32\n return flask.jsonify({'celsius': celsius, 'fahrenheit': fahrenheit})\n \nif __name__ == '__main__':\n app.run()"}
{"instruction":"Create a Python class that provides an interface for a Stack data structure.","input":"Not applicable","output":"class Stack:\n def __init__(self):\n  self.stack = []\n\n def push(self, item):\n  self.stack.append(item)\n\n def pop(self):\n  if self.stack:\n   return self.stack.pop()\n  else: \n   return None\n\n def is_empty(self):\n  return len(self.stack) == 0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that provides an interface for a Stack data structure.\n\n### Input:\nNot applicable\n\n### Output:\nclass Stack:\n def __init__(self):\n  self.stack = []\n\n def push(self, item):\n  self.stack.append(item)\n\n def pop(self):\n  if self.stack:\n   return self.stack.pop()\n  else: \n   return None\n\n def is_empty(self):\n  return len(self.stack) == 0"}
{"instruction":"Can you write a Python code that can sort dictionaries based on the values","input":"","output":"def sort_dict_by_values(dict):\n  return sorted(dict.items(), key=lambda kv: kv[1])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you write a Python code that can sort dictionaries based on the values\n\n### Input:\n\n\n### Output:\ndef sort_dict_by_values(dict):\n  return sorted(dict.items(), key=lambda kv: kv[1])"}
{"instruction":"How do you make a Python program to traverse a tree and print the paths from root to leaf?","input":"","output":"class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef traverseTree(root):\n    res = []\n    helper(root, \"\", res)\n    \ndef helper(node, path, res):\n    if not node:\n        return\n    path += str(node.val)\n    if not node.left and not node.right:\n        res.append(path)\n    helper(node.left, path, res)\n    helper(node.right, path, res)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow do you make a Python program to traverse a tree and print the paths from root to leaf?\n\n### Input:\n\n\n### Output:\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef traverseTree(root):\n    res = []\n    helper(root, \"\", res)\n    \ndef helper(node, path, res):\n    if not node:\n        return\n    path += str(node.val)\n    if not node.left and not node.right:\n        res.append(path)\n    helper(node.left, path, res)\n    helper(node.right, path, res)"}
{"instruction":"Create a script in Python that automatically generates an emial address for a given name.","input":"Name: John Doe","output":"import random\n\ndef generate_email(name):\n name_words = name.split()\n first_name = name_words[0]\n last_name = name_words[1]\n random_numbers = str(random.randint(1,99))\n \n email = first_name + last_name + random_numbers + \"@example.com\"\n return email\n \n print(generate_email(\"John Doe\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a script in Python that automatically generates an emial address for a given name.\n\n### Input:\nName: John Doe\n\n### Output:\nimport random\n\ndef generate_email(name):\n name_words = name.split()\n first_name = name_words[0]\n last_name = name_words[1]\n random_numbers = str(random.randint(1,99))\n \n email = first_name + last_name + random_numbers + \"@example.com\"\n return email\n \n print(generate_email(\"John Doe\"))"}
{"instruction":"Write a Python script to classify a sentence as positive or negative.","input":"","output":"import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef classify_sentiment(sentence):\n    sid = SentimentIntensityAnalyzer()\n    score = sid.polarity_scores(sentence)\n    if score['compound'] >= 0.05:\n        return 'positive'\n    elif score['compound'] <= -0.05:\n        return 'negative'\n    else:\n        return 'neutral'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to classify a sentence as positive or negative.\n\n### Input:\n\n\n### Output:\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef classify_sentiment(sentence):\n    sid = SentimentIntensityAnalyzer()\n    score = sid.polarity_scores(sentence)\n    if score['compound'] >= 0.05:\n        return 'positive'\n    elif score['compound'] <= -0.05:\n        return 'negative'\n    else:\n        return 'neutral'"}
{"instruction":"Develop an algorithm in Python to check if an array contains a given number.","input":"array = [2, 4, 6, 8], number = 8","output":"def checkNumber(array, number):\n    for i in array:\n        if i == number:\n            return True\n    return False\n\ncheckNumber([2, 4, 6, 8], 8)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to check if an array contains a given number.\n\n### Input:\narray = [2, 4, 6, 8], number = 8\n\n### Output:\ndef checkNumber(array, number):\n    for i in array:\n        if i == number:\n            return True\n    return False\n\ncheckNumber([2, 4, 6, 8], 8)"}
{"instruction":"Write a Python program to sort a given list in ascending order of the length of each element.","input":"numbers = [4, 8, 1, 16, 9, 7]","output":"def sortList(numbers): \n    numbers.sort(key = len) \n    return numbers \n\nnumbers = sortList(numbers) \nprint(numbers)\n\n# Output: [4, 8, 1, 7, 9, 16]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a given list in ascending order of the length of each element.\n\n### Input:\nnumbers = [4, 8, 1, 16, 9, 7]\n\n### Output:\ndef sortList(numbers): \n    numbers.sort(key = len) \n    return numbers \n\nnumbers = sortList(numbers) \nprint(numbers)\n\n# Output: [4, 8, 1, 7, 9, 16]"}
{"instruction":"Generate a Python function that takes in a number as a parameter and finds its Fibonacci number.","input":"5","output":"def fibonacci(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    \n    return a\n\nfibonacci_number = fibonacci(5)\nprint(fibonacci_number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that takes in a number as a parameter and finds its Fibonacci number.\n\n### Input:\n5\n\n### Output:\ndef fibonacci(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    \n    return a\n\nfibonacci_number = fibonacci(5)\nprint(fibonacci_number)"}
{"instruction":"Develop a Python function for calculating the sum of two numbers.","input":"","output":"def sum_of_numbers(num1, num2):\n    return num1 + num2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function for calculating the sum of two numbers.\n\n### Input:\n\n\n### Output:\ndef sum_of_numbers(num1, num2):\n    return num1 + num2"}
{"instruction":"Generate a function that increments a given input by one in Python.","input":"","output":"def increment(x): \n    return x + 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function that increments a given input by one in Python.\n\n### Input:\n\n\n### Output:\ndef increment(x): \n    return x + 1"}
{"instruction":"Create a program in Python that takes two lists and checks for common elements between them.","input":"list1 = [1,2,3,4]\nlist2 = [3,4,5,6]","output":"list1 = [1,2,3,4]\nlist2 = [3,4,5,6] \n\ndef check_common(list1, list2): \n    result = False\n    for x in list1: \n        for y in list2: \n            if x == y: \n                result = True\n                return result  \n    return result \n  \nprint(check_common(list1, list2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes two lists and checks for common elements between them.\n\n### Input:\nlist1 = [1,2,3,4]\nlist2 = [3,4,5,6]\n\n### Output:\nlist1 = [1,2,3,4]\nlist2 = [3,4,5,6] \n\ndef check_common(list1, list2): \n    result = False\n    for x in list1: \n        for y in list2: \n            if x == y: \n                result = True\n                return result  \n    return result \n  \nprint(check_common(list1, list2))"}
{"instruction":"Write a Python program to generate algebraic equations with randomly generated coefficients.","input":"","output":"import random\n\ndef generate_equation():\n  a = random.randint(-10, 10)\n  b = random.randint(-10, 10)\n  c = random.randint(-10, 10)\n\n  equation = f'{a}x^2 + {b}x + {c} = 0'\n  return equation\n\nresult = generate_equation()\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate algebraic equations with randomly generated coefficients.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_equation():\n  a = random.randint(-10, 10)\n  b = random.randint(-10, 10)\n  c = random.randint(-10, 10)\n\n  equation = f'{a}x^2 + {b}x + {c} = 0'\n  return equation\n\nresult = generate_equation()\nprint(result)"}
{"instruction":"Create a Python script for cleaning up text and removing non-alphabetic characters.","input":"This text contains some non-alphabetic characters, like \"%.","output":"import re\n\ntext = \"This text contains some non-alphabetic characters, like \u201c%.\u201d\"\n\nclean_text = re.sub(r'[^a-zA-Z ]', '', text)\n\nprint(clean_text)\n\n# Output: This text contains some alphabetic characters","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for cleaning up text and removing non-alphabetic characters.\n\n### Input:\nThis text contains some non-alphabetic characters, like \"%.\n\n### Output:\nimport re\n\ntext = \"This text contains some non-alphabetic characters, like \u201c%.\u201d\"\n\nclean_text = re.sub(r'[^a-zA-Z ]', '', text)\n\nprint(clean_text)\n\n# Output: This text contains some alphabetic characters"}
{"instruction":"Create a function in Python to delete an element from a linked list given its position.","input":"","output":"def deleteNode(head, position):\n  # If linked list is empty \n  if head == None: \n    return\n\n  # Store head node  \n  temp = head \n \n  # If head needs to be removed  \n  if position == 0: \n    head = temp.next\n    temp = None\n    return head \n\n  # Find previous node of the node to be deleted  \n  for i in range(position-1): \n    temp = temp.next\n    if temp is None: \n        break\n\n  # if position is more than number of nodes  \n  if temp is None: \n    return\n\n  # Node temp.next is the node to be deleted  \n  # store pointer to the next of node to be deleted  \n  next = temp.next.next\n\n  # Unlink the node from linked list  \n  temp.next = None\n\n  temp.next = next\n\n  return head","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to delete an element from a linked list given its position.\n\n### Input:\n\n\n### Output:\ndef deleteNode(head, position):\n  # If linked list is empty \n  if head == None: \n    return\n\n  # Store head node  \n  temp = head \n \n  # If head needs to be removed  \n  if position == 0: \n    head = temp.next\n    temp = None\n    return head \n\n  # Find previous node of the node to be deleted  \n  for i in range(position-1): \n    temp = temp.next\n    if temp is None: \n        break\n\n  # if position is more than number of nodes  \n  if temp is None: \n    return\n\n  # Node temp.next is the node to be deleted  \n  # store pointer to the next of node to be deleted  \n  next = temp.next.next\n\n  # Unlink the node from linked list  \n  temp.next = None\n\n  temp.next = next\n\n  return head"}
{"instruction":"Create a Python program to convert weights from pounds to kilograms.","input":"Not applicable","output":"def pounds_to_kilos(pounds):\n  return pounds * 0.453592\n\nwhile True:\n  pounds = float(input(\"Enter a weight in pounds: \"))\n  print(f\"{pounds} lbs = {pounds_to_kilos(pounds)} kgs\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to convert weights from pounds to kilograms.\n\n### Input:\nNot applicable\n\n### Output:\ndef pounds_to_kilos(pounds):\n  return pounds * 0.453592\n\nwhile True:\n  pounds = float(input(\"Enter a weight in pounds: \"))\n  print(f\"{pounds} lbs = {pounds_to_kilos(pounds)} kgs\")"}
{"instruction":"How do we use recursion to solve a given problem in Python?","input":"","output":"Recursion is a powerful technique for solving problems. It involves defining a problem in terms of itself. A recursion problem is solved by breaking it down into smaller problems, until the problem is small enough to be solved directly. The result from a smaller problem can then be combined with the result from the larger problem, until the original problem is solved. In Python, a recursive function is one that calls itself.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow do we use recursion to solve a given problem in Python?\n\n### Input:\n\n\n### Output:\nRecursion is a powerful technique for solving problems. It involves defining a problem in terms of itself. A recursion problem is solved by breaking it down into smaller problems, until the problem is small enough to be solved directly. The result from a smaller problem can then be combined with the result from the larger problem, until the original problem is solved. In Python, a recursive function is one that calls itself."}
{"instruction":"Create a Python program to calculate the cost of an order given the items ordered, the tax rate and the shipping cost.","input":"items = [('apple', 0.5, 2), ('pear', 0.75, 5), ('orange', 1.2, 3)] \ntax rate = 0.2\nshipping cost = 5","output":"def calculate_cost(items, tax_rate, shipping_cost):\n    total_cost = 0\n    for item in items:\n        total_cost += item[1] * item[2]\n    \n    total_cost *= (1 + tax_rate)\n    total_cost += shipping_cost\n    return total_cost","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the cost of an order given the items ordered, the tax rate and the shipping cost.\n\n### Input:\nitems = [('apple', 0.5, 2), ('pear', 0.75, 5), ('orange', 1.2, 3)] \ntax rate = 0.2\nshipping cost = 5\n\n### Output:\ndef calculate_cost(items, tax_rate, shipping_cost):\n    total_cost = 0\n    for item in items:\n        total_cost += item[1] * item[2]\n    \n    total_cost *= (1 + tax_rate)\n    total_cost += shipping_cost\n    return total_cost"}
{"instruction":"Implement a function in Python that prints out the contents of a given list with even indices only.","input":"my_list = [1, 5, 10, 15, 20]","output":"def print_even_indices(my_list):\n    for i in range(len(my_list)):\n        if i % 2 == 0:\n            print(my_list[i])\n            \nprint_even_indices(my_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that prints out the contents of a given list with even indices only.\n\n### Input:\nmy_list = [1, 5, 10, 15, 20]\n\n### Output:\ndef print_even_indices(my_list):\n    for i in range(len(my_list)):\n        if i % 2 == 0:\n            print(my_list[i])\n            \nprint_even_indices(my_list)"}
{"instruction":"Create an algorithm in Python to check if two words are a sudoku valid pair.","input":"word1 = \u201cready\u201d, word2 = \u201csteady\u201d","output":"def is_sudoku_valid_pair(word1, word2):\n    is_valid = True\n\n    for i in range(len (word1)):\n        if word1[i] == word2[i]:\n            is_valid = False\n            break \n\n    for i in range (len(word1)):\n        for j in range(len(word2)):\n            if word1[i] == word2[j]:\n                is_valid = False\n                break\n\n    return is_valid \n\nword1 = \u201cready\u201d\nword2 = \u201csteady\u201d\n\nprint(is_sudoku_valid_pair(word1, word2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to check if two words are a sudoku valid pair.\n\n### Input:\nword1 = \u201cready\u201d, word2 = \u201csteady\u201d\n\n### Output:\ndef is_sudoku_valid_pair(word1, word2):\n    is_valid = True\n\n    for i in range(len (word1)):\n        if word1[i] == word2[i]:\n            is_valid = False\n            break \n\n    for i in range (len(word1)):\n        for j in range(len(word2)):\n            if word1[i] == word2[j]:\n                is_valid = False\n                break\n\n    return is_valid \n\nword1 = \u201cready\u201d\nword2 = \u201csteady\u201d\n\nprint(is_sudoku_valid_pair(word1, word2))"}
{"instruction":"Create a program in Python for generating a Fibonacci sequence.","input":"","output":"# Generate a Fibonacci sequence\n\n# Function to generate Fibonacci sequence\ndef Fibonacci(n):\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return Fibonacci(n-1) + Fibonacci(n-2)\n\n# Print the sequence upto n terms\nterms = 10\nprint(\"Fibonacci sequence:\")\nfor num in range(1, terms + 1):\n    print(Fibonacci(num))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python for generating a Fibonacci sequence.\n\n### Input:\n\n\n### Output:\n# Generate a Fibonacci sequence\n\n# Function to generate Fibonacci sequence\ndef Fibonacci(n):\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return Fibonacci(n-1) + Fibonacci(n-2)\n\n# Print the sequence upto n terms\nterms = 10\nprint(\"Fibonacci sequence:\")\nfor num in range(1, terms + 1):\n    print(Fibonacci(num))"}
{"instruction":"Re-write the following code snippet in Python:","input":"let nums = [1, 2, 3, 4, 5];\nlet squaredNums = nums.map(num => num * num);","output":"nums = [1, 2, 3, 4, 5]\nsquared_nums = list(map(lambda num: num * num, nums))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRe-write the following code snippet in Python:\n\n### Input:\nlet nums = [1, 2, 3, 4, 5];\nlet squaredNums = nums.map(num => num * num);\n\n### Output:\nnums = [1, 2, 3, 4, 5]\nsquared_nums = list(map(lambda num: num * num, nums))"}
{"instruction":"Create a function in Python to calculate the sum of 1 to n numbers.","input":"n = 10","output":"def sum_nums(n):\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n\nprint(sum_nums(10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to calculate the sum of 1 to n numbers.\n\n### Input:\nn = 10\n\n### Output:\ndef sum_nums(n):\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n\nprint(sum_nums(10))"}
{"instruction":"Implement cross-validation in a Machine Learning model using Python's Scikit-Learn module.","input":"Not applicable","output":"import numpy as np\nfrom sklearn.model_selection import KFold\n\n# Define model and data\nmodel = Model()\nX = data\n\n# 10-fold cross-validation\nkf = KFold(n_splits=10)\nscores = []\n\n# Iterate through group and train model\nfor train_index, test_index in kf.split(X):\n X_train, X_test = X[train_index], X[test_index]\n model.fit(X_train)\n scores.append(model.score(X_test))\n\n# Calculate average score across all folds\navg_score = np.mean(scores)\nprint(f'Average Score: {avg_score}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement cross-validation in a Machine Learning model using Python's Scikit-Learn module.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nfrom sklearn.model_selection import KFold\n\n# Define model and data\nmodel = Model()\nX = data\n\n# 10-fold cross-validation\nkf = KFold(n_splits=10)\nscores = []\n\n# Iterate through group and train model\nfor train_index, test_index in kf.split(X):\n X_train, X_test = X[train_index], X[test_index]\n model.fit(X_train)\n scores.append(model.score(X_test))\n\n# Calculate average score across all folds\navg_score = np.mean(scores)\nprint(f'Average Score: {avg_score}')"}
{"instruction":"Reformat a collection of list into a dictionary in Python.","input":"[['a', 1], ['b', 2], ['c', 3], ['d', 4]]","output":"data = [['a', 1], ['b', 2], ['c', 3], ['d', 4]]\n\nmy_dict = dict(data)\nprint(my_dict) # {'a': 1, 'b': 2, 'c': 3, 'd': 4}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nReformat a collection of list into a dictionary in Python.\n\n### Input:\n[['a', 1], ['b', 2], ['c', 3], ['d', 4]]\n\n### Output:\ndata = [['a', 1], ['b', 2], ['c', 3], ['d', 4]]\n\nmy_dict = dict(data)\nprint(my_dict) # {'a': 1, 'b': 2, 'c': 3, 'd': 4}"}
{"instruction":"Create a basic Python script for a calculator that takes user input and performs a calculation based on the input.","input":"Not applicable","output":"def calculator():\n    operator = input(\"Please enter an operator: \")\n    num1 = float(input(\"Please enter your first number: \"))\n    num2 = float(input(\"Please enter your second number: \"))\n\n    if operator == \"+\":\n        print(num1 + num2)\n    elif operator == \"-\":\n        print(num1 - num2)\n    elif operator == \"*\":\n        print(num1 * num2)\n    elif operator == \"\/\":\n        print(num1 \/ num2)\n    else:\n        print(\"Invalid operator\")\n\ncalculator()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Python script for a calculator that takes user input and performs a calculation based on the input.\n\n### Input:\nNot applicable\n\n### Output:\ndef calculator():\n    operator = input(\"Please enter an operator: \")\n    num1 = float(input(\"Please enter your first number: \"))\n    num2 = float(input(\"Please enter your second number: \"))\n\n    if operator == \"+\":\n        print(num1 + num2)\n    elif operator == \"-\":\n        print(num1 - num2)\n    elif operator == \"*\":\n        print(num1 * num2)\n    elif operator == \"\/\":\n        print(num1 \/ num2)\n    else:\n        print(\"Invalid operator\")\n\ncalculator()"}
{"instruction":"This code reads images from a directory, averages their pixel intensities, and saves the resulting image in an output directory. To use this code, run the script with the command-line arguments \"-d\" or \"--directory\" followed by the path to the directory of images to average, and \"-o\" or \"--outdir\" followed by the path to the output directory.","input":"","output":"#!\/usr\/bin\/env python\n\nimport argparse\nimport numpy as np\nimport sys, os\nfrom os import listdir\nimport plantcv as pcv\nimport datetime\n\n### Parse command-line arguments\ndef options():\n  parser = argparse.ArgumentParser(description=\"Get images from an SQLite database and some input information\")\n  parser.add_argument(\"-d\", \"--directory\", help=\"path to directory of images to average.\")\n  parser.add_argument(\"-o\", \"--outdir\", help=\"Output directory.\", required=False)\n  args = parser.parse_args()\n  return args\n\n\n### Functions\n\ndef average_all_img(directory,outdir):\n    allfiles=os.listdir(directory)\n    \n    path=str(directory)\n    \n    allpaths=[]\n    \n    for files in allfiles:\n        p=path+str(files)\n        allpaths.append(p)\n    \n    img, path, filename = pcv.readimage(allpaths[0])\n    n=len(allpaths)\n\n    \n    if len(np.shape(img))==3:\n        ix,iy,iz=np.shape(img)\n        arr=np.zeros((ix,iy,iz),np.float)\n    else:\n        ix,iy=np.shape(img)\n        arr=np.zeros((ix,iy,iz),np.float)\n\n    # Build up average pixel intensities, casting each image as an array of floats\n    for i,paths in enumerate(allpaths):\n        img,path,filename=pcv.readimage(allpaths[i])\n        imarr=np.array(img,dtype=np.float)\n        arr=arr+imarr\/n\n\n    #Round values in array and cast as 8-bit integer\n    arr=np.array(np.round(arr),dtype=np.uint8)\n\n    pcv.print_image(arr, (str(outdir)+\"average_\"+str(allfiles[0])))\n\n\n\n### Main pipeline\n\ndef main():\n    \n  # Get options\n  args = options()\n  \n  average_all_img(args.directory, args.outdir)\n\nif __name__ == '__main__':\n  main()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code reads images from a directory, averages their pixel intensities, and saves the resulting image in an output directory. To use this code, run the script with the command-line arguments \"-d\" or \"--directory\" followed by the path to the directory of images to average, and \"-o\" or \"--outdir\" followed by the path to the output directory.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n\nimport argparse\nimport numpy as np\nimport sys, os\nfrom os import listdir\nimport plantcv as pcv\nimport datetime\n\n### Parse command-line arguments\ndef options():\n  parser = argparse.ArgumentParser(description=\"Get images from an SQLite database and some input information\")\n  parser.add_argument(\"-d\", \"--directory\", help=\"path to directory of images to average.\")\n  parser.add_argument(\"-o\", \"--outdir\", help=\"Output directory.\", required=False)\n  args = parser.parse_args()\n  return args\n\n\n### Functions\n\ndef average_all_img(directory,outdir):\n    allfiles=os.listdir(directory)\n    \n    path=str(directory)\n    \n    allpaths=[]\n    \n    for files in allfiles:\n        p=path+str(files)\n        allpaths.append(p)\n    \n    img, path, filename = pcv.readimage(allpaths[0])\n    n=len(allpaths)\n\n    \n    if len(np.shape(img))==3:\n        ix,iy,iz=np.shape(img)\n        arr=np.zeros((ix,iy,iz),np.float)\n    else:\n        ix,iy=np.shape(img)\n        arr=np.zeros((ix,iy,iz),np.float)\n\n    # Build up average pixel intensities, casting each image as an array of floats\n    for i,paths in enumerate(allpaths):\n        img,path,filename=pcv.readimage(allpaths[i])\n        imarr=np.array(img,dtype=np.float)\n        arr=arr+imarr\/n\n\n    #Round values in array and cast as 8-bit integer\n    arr=np.array(np.round(arr),dtype=np.uint8)\n\n    pcv.print_image(arr, (str(outdir)+\"average_\"+str(allfiles[0])))\n\n\n\n### Main pipeline\n\ndef main():\n    \n  # Get options\n  args = options()\n  \n  average_all_img(args.directory, args.outdir)\n\nif __name__ == '__main__':\n  main()"}
{"instruction":"Translate this code from JavaScript to Python","input":"const helloWorld = () =>  console.log(\"Hello World!\")","output":"def hello_world():\n    print(\"Hello World!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTranslate this code from JavaScript to Python\n\n### Input:\nconst helloWorld = () =>  console.log(\"Hello World!\")\n\n### Output:\ndef hello_world():\n    print(\"Hello World!\")"}
{"instruction":"Generate a python code to find the sum of the n terms of a series given the first term and the common ratio","input":"[a, r], n","output":"def find_sum_series(a, r, n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + a*(r**(i - 1))\n    return sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python code to find the sum of the n terms of a series given the first term and the common ratio\n\n### Input:\n[a, r], n\n\n### Output:\ndef find_sum_series(a, r, n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + a*(r**(i - 1))\n    return sum"}
{"instruction":"Transform a Gradient Descent algorithm in Python to work with First Order Updates instead.","input":"def gradient_descent(x, y, iters=1000, lr=0.01):\n    m = b = 0\n    n = len(x)\n\n    for i in range(iters):\n        y_pred = m * x + b\n        dm = -(2\/n) * sum([x[i] * (y[i] - y_pred[i]) for i in range(n)])\n        db = -(2\/n) * sum([y[i] - y_pred[i] for i in range(n)])\n        m -= lr * dm\n        b -= lr * db","output":"def gradient_descent(x, y, iters=1000, lr=0.01):\n    m = b = 0\n    n = len(x)\n\n    # First-order Update\n    m_update = 0\n    b_update = 0\n\n    for i in range(iters):\n        y_pred = m * x + b\n\n        # Gradient\n        dm = -(2\/n) * sum([x[i] * (y[i] - y_pred[i]) for i in range(n)])\n        db = -(2\/n) * sum([y[i] - y_pred[i] for i in range(n)])\n\n        # Updates\n        m_update -= lr * dm\n        b_update -= lr * db\n\n        # Update the parameters\n        m += m_update\n        b += b_update","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTransform a Gradient Descent algorithm in Python to work with First Order Updates instead.\n\n### Input:\ndef gradient_descent(x, y, iters=1000, lr=0.01):\n    m = b = 0\n    n = len(x)\n\n    for i in range(iters):\n        y_pred = m * x + b\n        dm = -(2\/n) * sum([x[i] * (y[i] - y_pred[i]) for i in range(n)])\n        db = -(2\/n) * sum([y[i] - y_pred[i] for i in range(n)])\n        m -= lr * dm\n        b -= lr * db\n\n### Output:\ndef gradient_descent(x, y, iters=1000, lr=0.01):\n    m = b = 0\n    n = len(x)\n\n    # First-order Update\n    m_update = 0\n    b_update = 0\n\n    for i in range(iters):\n        y_pred = m * x + b\n\n        # Gradient\n        dm = -(2\/n) * sum([x[i] * (y[i] - y_pred[i]) for i in range(n)])\n        db = -(2\/n) * sum([y[i] - y_pred[i] for i in range(n)])\n\n        # Updates\n        m_update -= lr * dm\n        b_update -= lr * db\n\n        # Update the parameters\n        m += m_update\n        b += b_update"}
{"instruction":"Create a Python script to match parts of speech of two given sentences.","input":"Sentence 1: She is the best player.\nSentence 2: He is the worst player.","output":"from nltk import word_tokenize, pos_tag\n \ndef match_pos(sent1, sent2):\n    sent1_tokens, sent2_tokens = word_tokenize(sent1), word_tokenize(sent2)\n    sent1_pos, sent2_pos = pos_tag(sent1_tokens), pos_tag(sent2_tokens)\n    matches = []\n    for i in range(min(len(sent1_pos),len(sent2_pos))):\n        if sent1_pos[i][1] == sent2_pos[i][1]:\n            matches.append(sent1_pos[i][0] + ':' + sent2_pos[i][0])\n    return matches\n \nsent1 = 'She is the best player.'\nsent2 = 'He is the worst player.'\n \nprint(match_pos(sent1,sent2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to match parts of speech of two given sentences.\n\n### Input:\nSentence 1: She is the best player.\nSentence 2: He is the worst player.\n\n### Output:\nfrom nltk import word_tokenize, pos_tag\n \ndef match_pos(sent1, sent2):\n    sent1_tokens, sent2_tokens = word_tokenize(sent1), word_tokenize(sent2)\n    sent1_pos, sent2_pos = pos_tag(sent1_tokens), pos_tag(sent2_tokens)\n    matches = []\n    for i in range(min(len(sent1_pos),len(sent2_pos))):\n        if sent1_pos[i][1] == sent2_pos[i][1]:\n            matches.append(sent1_pos[i][0] + ':' + sent2_pos[i][0])\n    return matches\n \nsent1 = 'She is the best player.'\nsent2 = 'He is the worst player.'\n \nprint(match_pos(sent1,sent2))"}
{"instruction":"Construct a code to sum all the numbers in a list in Python.","input":"[3, 4, 7, 1]","output":"sum = 0\nfor num in [3, 4, 7, 1]:\n  sum += num\n\nprint(sum) # Output is 15","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a code to sum all the numbers in a list in Python.\n\n### Input:\n[3, 4, 7, 1]\n\n### Output:\nsum = 0\nfor num in [3, 4, 7, 1]:\n  sum += num\n\nprint(sum) # Output is 15"}
{"instruction":"Write a function in Python to check if a given array of numbers is in ascending order.","input":"[3, 5, 7, 9, 16, 19]","output":"def isSorted(arr):\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\nprint(isSorted([3, 5, 7, 9, 16, 19]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to check if a given array of numbers is in ascending order.\n\n### Input:\n[3, 5, 7, 9, 16, 19]\n\n### Output:\ndef isSorted(arr):\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\nprint(isSorted([3, 5, 7, 9, 16, 19]))"}
{"instruction":"Create a dictionary in python from a comma-separated value string.","input":"s = \"name,age,city,country\"","output":"def csv_to_dict(s):\n    data_dict = {}\n    # split the string into list of elements\n    elements = s.split(',')\n    \n    # iterate through the list\n    for i in range(0, len(elements), 2):\n        # add each element as a key to the dictionary\n        data_dict[elements[i]] = elements[i+1]\n    \n    # return the dictionary\n    return data_dict","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a dictionary in python from a comma-separated value string.\n\n### Input:\ns = \"name,age,city,country\"\n\n### Output:\ndef csv_to_dict(s):\n    data_dict = {}\n    # split the string into list of elements\n    elements = s.split(',')\n    \n    # iterate through the list\n    for i in range(0, len(elements), 2):\n        # add each element as a key to the dictionary\n        data_dict[elements[i]] = elements[i+1]\n    \n    # return the dictionary\n    return data_dict"}
{"instruction":"Use a Python print function to write a statement that takes an input message and prints the message in all uppercase letters.","input":"\"Hello world!\"","output":"message = 'Hello world!'\n\nprint(message.upper()) \/\/ HELLO WORLD!","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse a Python print function to write a statement that takes an input message and prints the message in all uppercase letters.\n\n### Input:\n\"Hello world!\"\n\n### Output:\nmessage = 'Hello world!'\n\nprint(message.upper()) \/\/ HELLO WORLD!"}
{"instruction":"Implement a decision tree classifier in Python.","input":"Dataset:\nName, Age, Pet\nJohn, 20, Cat\nJill, 30, Dog\nKyle, 22, Fish","output":"import pandas as pd\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\ndata = pd.read_csv(\"data.csv\")\n\nX = data[['Name', 'Age', 'Pet']]\ny = data['Label']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=0)\n\ndtree_model=DecisionTreeClassifier(max_depth=2).fit(X_train,y_train)\ndtree_predictions=dtree_model.predict(X_test)\n\naccuracy_score=accuracy_score(y_test,dtree_predictions)\nprint(accuracy_score)\nconf_matrix = confusion_matrix(y_test,dtree_predictions)\nprint(conf_matrix)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a decision tree classifier in Python.\n\n### Input:\nDataset:\nName, Age, Pet\nJohn, 20, Cat\nJill, 30, Dog\nKyle, 22, Fish\n\n### Output:\nimport pandas as pd\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\ndata = pd.read_csv(\"data.csv\")\n\nX = data[['Name', 'Age', 'Pet']]\ny = data['Label']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=0)\n\ndtree_model=DecisionTreeClassifier(max_depth=2).fit(X_train,y_train)\ndtree_predictions=dtree_model.predict(X_test)\n\naccuracy_score=accuracy_score(y_test,dtree_predictions)\nprint(accuracy_score)\nconf_matrix = confusion_matrix(y_test,dtree_predictions)\nprint(conf_matrix)"}
{"instruction":"Rewrite the code snippet below in Python so that it takes advantage of list comprehension.","input":"items = [1, 2, 3, 4, 5]\nnew_items = []\nfor item in items:\n    new_items.append(item**2)","output":"items = [1, 2, 3, 4, 5]\nnew_items = [item**2 for item in items]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the code snippet below in Python so that it takes advantage of list comprehension.\n\n### Input:\nitems = [1, 2, 3, 4, 5]\nnew_items = []\nfor item in items:\n    new_items.append(item**2)\n\n### Output:\nitems = [1, 2, 3, 4, 5]\nnew_items = [item**2 for item in items]"}
{"instruction":"Write a Python function to implement an algorithm.","input":"Algorithm: Given an array of positive and negative numbers, find the largest subarray with sum less than or equal to 0.","output":"def largestSubarray(arr):\n    max_len = 0\n    curr_sum = 0\n    max_sum = 0\n    start = 0\n    end = 0\n\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if max_sum < curr_sum:\n            max_sum = curr_sum\n            end = i\n        if curr_sum < 0:\n            curr_sum = 0\n            start = i + 1\n        if max_sum <= 0:\n            curr_len = end - start + 1\n            if curr_len > max_len:\n                max_len = curr_len\n    return max_len","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to implement an algorithm.\n\n### Input:\nAlgorithm: Given an array of positive and negative numbers, find the largest subarray with sum less than or equal to 0.\n\n### Output:\ndef largestSubarray(arr):\n    max_len = 0\n    curr_sum = 0\n    max_sum = 0\n    start = 0\n    end = 0\n\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if max_sum < curr_sum:\n            max_sum = curr_sum\n            end = i\n        if curr_sum < 0:\n            curr_sum = 0\n            start = i + 1\n        if max_sum <= 0:\n            curr_len = end - start + 1\n            if curr_len > max_len:\n                max_len = curr_len\n    return max_len"}
{"instruction":"Write a function for converting a series of hex values into a decimal integer in Python.","input":"hexvals = \"7a 0d 72\"","output":"def convert_hexvals_to_decimal(hexvals):\n    # Split hexvals on whitespace\n    hexvals_list = hexvals.split()\n    # Reverse hexvals list\n    hexvals_list.reverse()\n    decimal_val = 0\n    # Loop through hexvals list\n    for index, hexval in enumerate(hexvals_list):\n        # Multiply hexval by 16^index to calculate decimal value\n        decimal_val += int(hexval, 16)*(16**index)\n    # Return decimal value\n    return decimal_val\n    \ndecimal = convert_hexvals_to_decimal(\"7a 0d 72\")\nprint(decimal)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function for converting a series of hex values into a decimal integer in Python.\n\n### Input:\nhexvals = \"7a 0d 72\"\n\n### Output:\ndef convert_hexvals_to_decimal(hexvals):\n    # Split hexvals on whitespace\n    hexvals_list = hexvals.split()\n    # Reverse hexvals list\n    hexvals_list.reverse()\n    decimal_val = 0\n    # Loop through hexvals list\n    for index, hexval in enumerate(hexvals_list):\n        # Multiply hexval by 16^index to calculate decimal value\n        decimal_val += int(hexval, 16)*(16**index)\n    # Return decimal value\n    return decimal_val\n    \ndecimal = convert_hexvals_to_decimal(\"7a 0d 72\")\nprint(decimal)"}
{"instruction":"Create a Python script which receives an array of integers and returns an array which contains only the prime numbers from the input array.","input":"[2, 3, 4, 5, 6, 7, 8, 9]","output":"def get_primes(arr):\n  prime_numbers = []\n  for i in arr:\n    if is_prime(i):\n      prime_numbers.append(i)\n  return prime_numbers\n\ndef is_prime(num):\n  if num == 1:\n    return False\n  elif num == 2:\n    return True\n  else:\n    for i in range(2,num):\n      if num % i == 0:\n        return False\n    return True\n\narr = [2, 3, 4, 5, 6, 7, 8, 9]\nprint(get_primes(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script which receives an array of integers and returns an array which contains only the prime numbers from the input array.\n\n### Input:\n[2, 3, 4, 5, 6, 7, 8, 9]\n\n### Output:\ndef get_primes(arr):\n  prime_numbers = []\n  for i in arr:\n    if is_prime(i):\n      prime_numbers.append(i)\n  return prime_numbers\n\ndef is_prime(num):\n  if num == 1:\n    return False\n  elif num == 2:\n    return True\n  else:\n    for i in range(2,num):\n      if num % i == 0:\n        return False\n    return True\n\narr = [2, 3, 4, 5, 6, 7, 8, 9]\nprint(get_primes(arr))"}
{"instruction":"Create a Python class for a \"Student\" with fields for \"name\" and \"age\".","input":"","output":"class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for a \"Student\" with fields for \"name\" and \"age\".\n\n### Input:\n\n\n### Output:\nclass Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age"}
{"instruction":"Design a function to print the Pascal's triangle in Python.","input":"rows = 6","output":"def print_pascal_triangle(rows):\n    \"\"\"Print the Pascal's triangle.\"\"\"\n    for line in range(1, rows + 1):\n        # Print the leading spaces\n        for _ in range(rows - line):\n            print(end=\"  \")\n        # Print the numbers in the current row\n        for i in range(line):\n            print(binomial_coefficient(line-1, i), end=\"  \")\n        # Go to the new line\n        print()\n\ndef binomial_coefficient(n, k):\n    \"\"\"Calculate the binomial coefficient of n, k\"\"\"\n    result = 1\n    for i in range(1, k + 1):\n        result = result * (n - i + 1) \/ i\n    return result\n\n# Output\nprint_pascal_triangle(rows)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function to print the Pascal's triangle in Python.\n\n### Input:\nrows = 6\n\n### Output:\ndef print_pascal_triangle(rows):\n    \"\"\"Print the Pascal's triangle.\"\"\"\n    for line in range(1, rows + 1):\n        # Print the leading spaces\n        for _ in range(rows - line):\n            print(end=\"  \")\n        # Print the numbers in the current row\n        for i in range(line):\n            print(binomial_coefficient(line-1, i), end=\"  \")\n        # Go to the new line\n        print()\n\ndef binomial_coefficient(n, k):\n    \"\"\"Calculate the binomial coefficient of n, k\"\"\"\n    result = 1\n    for i in range(1, k + 1):\n        result = result * (n - i + 1) \/ i\n    return result\n\n# Output\nprint_pascal_triangle(rows)"}
{"instruction":"Optimize a Python program to print the sum of the 10 smallest even numbers larger than a user-defined number.","input":"num = 20","output":"num = int(input(\"Enter a number: \"))\n\n# Find the 10 smallest even numbers larger than the user-defined number\nnumbers = []\ntotal = 0\nfor i in range(num+1, num+21):\n if i%2 == 0:\n  numbers.append(i)\n  total += i\n  \nprint('The sum is', total)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Python program to print the sum of the 10 smallest even numbers larger than a user-defined number.\n\n### Input:\nnum = 20\n\n### Output:\nnum = int(input(\"Enter a number: \"))\n\n# Find the 10 smallest even numbers larger than the user-defined number\nnumbers = []\ntotal = 0\nfor i in range(num+1, num+21):\n if i%2 == 0:\n  numbers.append(i)\n  total += i\n  \nprint('The sum is', total)"}
{"instruction":"Write an algorithm in Python to sort an array of integers using selection sort.","input":"","output":"def selection_sort(array):\n    for i in range(len(array)):\n        # Find the minimum element in remaining unsorted array \n        min_idx = i \n        for j in range(i+1, len(array)): \n            if array[min_idx] > array[j]: \n                min_idx = j\n\n        # Swap the found minimum element with the first element         \n        array[i], array[min_idx] = array[min_idx], array[i]\n    return array","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to sort an array of integers using selection sort.\n\n### Input:\n\n\n### Output:\ndef selection_sort(array):\n    for i in range(len(array)):\n        # Find the minimum element in remaining unsorted array \n        min_idx = i \n        for j in range(i+1, len(array)): \n            if array[min_idx] > array[j]: \n                min_idx = j\n\n        # Swap the found minimum element with the first element         \n        array[i], array[min_idx] = array[min_idx], array[i]\n    return array"}
{"instruction":"Create a Python class Person, which has the properties first_name, last_name and age.","input":"","output":"class Person:\n    def __init__(self, first_name, last_name, age):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n\n    def full_name(self):\n        return self.first_name + \" \" + self.last_name","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class Person, which has the properties first_name, last_name and age.\n\n### Input:\n\n\n### Output:\nclass Person:\n    def __init__(self, first_name, last_name, age):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n\n    def full_name(self):\n        return self.first_name + \" \" + self.last_name"}
{"instruction":"Write a Python program to create a list of tuples from two lists of equal length with each element in the tuple being the sum of the two corresponding elements in the lists.","input":"list1 = [1, 2, 3, 4]\nlist2 = [4, 3, 2, 1]","output":"tuple_list = list(zip(list1, list2)) \nsum_list = [(x + y) for (x, y) in tuple_list]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a list of tuples from two lists of equal length with each element in the tuple being the sum of the two corresponding elements in the lists.\n\n### Input:\nlist1 = [1, 2, 3, 4]\nlist2 = [4, 3, 2, 1]\n\n### Output:\ntuple_list = list(zip(list1, list2)) \nsum_list = [(x + y) for (x, y) in tuple_list]"}
{"instruction":"Generate a python statement to print a descriptive message about a given string.","input":"string = \"Hello World!\"","output":"print(f\"Given string is {string}, and its length is {len(string)}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python statement to print a descriptive message about a given string.\n\n### Input:\nstring = \"Hello World!\"\n\n### Output:\nprint(f\"Given string is {string}, and its length is {len(string)}\")"}
{"instruction":"Create a web API in Python Flask to compare two numerical values and return the greater one.","input":"value1 = 10\nvalue2 = 20","output":"from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('\/compare', methods=['POST'])\ndef compare():\n    data = request.get_json()\n    value1 = data['value1']\n    value2 = data['value2']\n\n    greater_value = max(value1, value2)\n\n    return jsonify({'greater_value': greater_value})\n\nif __name__ == '__main__':\n    app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web API in Python Flask to compare two numerical values and return the greater one.\n\n### Input:\nvalue1 = 10\nvalue2 = 20\n\n### Output:\nfrom flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('\/compare', methods=['POST'])\ndef compare():\n    data = request.get_json()\n    value1 = data['value1']\n    value2 = data['value2']\n\n    greater_value = max(value1, value2)\n\n    return jsonify({'greater_value': greater_value})\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"instruction":"Generate a code snippet to print a pattern of stars in Python.","input":"rows = 5","output":"# Use two for loops to print pattern\nfor i in range(0, rows):\n    for j in range(0, i + 1):\n        print(\"* \", end=\"\")\n    print(\"\\r\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code snippet to print a pattern of stars in Python.\n\n### Input:\nrows = 5\n\n### Output:\n# Use two for loops to print pattern\nfor i in range(0, rows):\n    for j in range(0, i + 1):\n        print(\"* \", end=\"\")\n    print(\"\\r\")"}
{"instruction":"To move the robot arm with impedance control, use the moveImpedance(k, t) function with the desired stiffness (k) and duration (t). To move the wrist, use the moveWrist(wrist_frame, tool_frame, t, max_wrench) function with the desired wrist and tool frame, duration (t), and maximum wrench constraint. To move the tool, use the moveTool(tool_frame, t) function with the desired tool frame and duration (t). The code assumes a specific robot arm prefix, so make sure to specify the correct prefix in the command line argument.","input":"","output":"#!\/usr\/bin\/env python\n\n# Copyright (c) 2014, Robot Control and Pattern Recognition Group, Warsaw University of Technology\n# All rights reserved.\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#     * Redistributions of source code must retain the above copyright\n#       notice, this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and\/or other materials provided with the distribution.\n#     * Neither the name of the Warsaw University of Technology nor the\n#       names of its contributors may be used to endorse or promote products\n#       derived from this software without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL <COPYright HOLDER> BE LIABLE FOR ANY\n# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport roslib\nroslib.load_manifest('velma_controller')\n\nimport rospy\n\nfrom geometry_msgs.msg import *\nfrom cartesian_trajectory_msgs.msg import *\nimport actionlib\nfrom actionlib_msgs.msg import *\nimport tf\nimport tf_conversions.posemath as pm\nimport PyKDL\n\ndef moveImpedance(k, t):\n    global action_impedance_client\n    action_impedance_goal = CartesianImpedanceGoal()\n    action_impedance_goal.trajectory.header.stamp = rospy.Time.now() + rospy.Duration(0.2)\n    action_impedance_goal.trajectory.points.append(CartesianImpedanceTrajectoryPoint(\n    rospy.Duration(t),\n    CartesianImpedance(k,Wrench(Vector3(0.7, 0.7, 0.7),Vector3(0.7, 0.7, 0.7)))))\n    action_impedance_client.send_goal(action_impedance_goal)\n\ndef moveWrist( wrist_frame, tool_frame, t, max_wrench):\n    global action_trajectory_client\n    # we are moving the tool, so: T_B_Wd*T_W_T\n    wrist_pose = pm.toMsg(wrist_frame*tool_frame)\n\n    action_trajectory_goal = CartesianTrajectoryGoal()\n    action_trajectory_goal.trajectory.header.stamp = rospy.Time.now() + rospy.Duration(0.01)\n    action_trajectory_goal.trajectory.points.append(CartesianTrajectoryPoint(\n    rospy.Duration(t),\n    wrist_pose,\n    Twist()))\n    action_trajectory_goal.wrench_constraint = max_wrench\n    action_trajectory_client.send_goal(action_trajectory_goal)\n\ndef moveTool(tool_frame, t):\n    global action_tool_client\n    tool_pose = pm.toMsg(tool_frame)\n    action_tool_goal = CartesianTrajectoryGoal()\n    action_tool_goal.trajectory.header.stamp = rospy.Time.now()\n    action_tool_goal.trajectory.points.append(CartesianTrajectoryPoint(\n    rospy.Duration(t),\n    tool_pose,\n    Twist()))\n    action_tool_client.send_goal(action_tool_goal)\n\n\nif __name__ == '__main__':\n\n    a = []\n    for arg in sys.argv:\n        a.append(arg)\n\n    if (len(a) > 1) and ((a[1]==\"left\") or (\"right\")):\n        prefix = a[1]\n    else:\n        print \"Usage: %s prefix\"%a[0]\n        exit(0)\n\n    rospy.init_node('impedance_riser')\n\n    listener = tf.TransformListener();\n\n    action_impedance_client = actionlib.SimpleActionClient(\"\/\" + prefix + \"_arm\/cartesian_impedance\", CartesianImpedanceAction)\n    action_impedance_client.wait_for_server()\n\n    action_trajectory_client = actionlib.SimpleActionClient(\"\/\" + prefix + \"_arm\/cartesian_trajectory\", CartesianTrajectoryAction)\n    action_trajectory_client.wait_for_server()\n\n    action_tool_client = actionlib.SimpleActionClient(\"\/\" + prefix + \"_arm\/tool_trajectory\", CartesianTrajectoryAction)\n    action_tool_client.wait_for_server()\n\n    rospy.sleep(1.0)\n\n    # save current wrist position\n    time_now = rospy.Time.now() - rospy.Duration(1.0)\n    listener.waitForTransform('torso_base', prefix+'_arm_7_link', time_now, rospy.Duration(4.0))\n    pose = listener.lookupTransform('torso_base', prefix+'_arm_7_link', time_now)\n    T_B_W = pm.fromTf(pose)\n\n    T_W_T = PyKDL.Frame()    # tool transformation\n    print \"setting the tool to %s relative to wrist frame\"%(T_W_T)\n    # move both tool position and wrist position - the gripper holds its position\n    print \"moving wrist\"\n    # we assume that during the initialization there are no contact forces, so we limit the wrench\n    moveWrist( T_B_W, T_W_T, 2.0, Wrench(Vector3(20, 20, 20), Vector3(4, 4, 4)) )\n    print \"moving tool\"\n    moveTool( T_W_T, 2.0 )\n    rospy.sleep(2.0)\n\n    # change the stiffness\n    print \"changing stiffness for door approach\"\n    moveImpedance(Wrench(Vector3(1200.0, 1200.0, 1200.0), Vector3(300.0, 300.0, 300.0)), 4.0)\n    rospy.sleep(4.0)\n\n\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTo move the robot arm with impedance control, use the moveImpedance(k, t) function with the desired stiffness (k) and duration (t). To move the wrist, use the moveWrist(wrist_frame, tool_frame, t, max_wrench) function with the desired wrist and tool frame, duration (t), and maximum wrench constraint. To move the tool, use the moveTool(tool_frame, t) function with the desired tool frame and duration (t). The code assumes a specific robot arm prefix, so make sure to specify the correct prefix in the command line argument.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n\n# Copyright (c) 2014, Robot Control and Pattern Recognition Group, Warsaw University of Technology\n# All rights reserved.\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#     * Redistributions of source code must retain the above copyright\n#       notice, this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and\/or other materials provided with the distribution.\n#     * Neither the name of the Warsaw University of Technology nor the\n#       names of its contributors may be used to endorse or promote products\n#       derived from this software without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL <COPYright HOLDER> BE LIABLE FOR ANY\n# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport roslib\nroslib.load_manifest('velma_controller')\n\nimport rospy\n\nfrom geometry_msgs.msg import *\nfrom cartesian_trajectory_msgs.msg import *\nimport actionlib\nfrom actionlib_msgs.msg import *\nimport tf\nimport tf_conversions.posemath as pm\nimport PyKDL\n\ndef moveImpedance(k, t):\n    global action_impedance_client\n    action_impedance_goal = CartesianImpedanceGoal()\n    action_impedance_goal.trajectory.header.stamp = rospy.Time.now() + rospy.Duration(0.2)\n    action_impedance_goal.trajectory.points.append(CartesianImpedanceTrajectoryPoint(\n    rospy.Duration(t),\n    CartesianImpedance(k,Wrench(Vector3(0.7, 0.7, 0.7),Vector3(0.7, 0.7, 0.7)))))\n    action_impedance_client.send_goal(action_impedance_goal)\n\ndef moveWrist( wrist_frame, tool_frame, t, max_wrench):\n    global action_trajectory_client\n    # we are moving the tool, so: T_B_Wd*T_W_T\n    wrist_pose = pm.toMsg(wrist_frame*tool_frame)\n\n    action_trajectory_goal = CartesianTrajectoryGoal()\n    action_trajectory_goal.trajectory.header.stamp = rospy.Time.now() + rospy.Duration(0.01)\n    action_trajectory_goal.trajectory.points.append(CartesianTrajectoryPoint(\n    rospy.Duration(t),\n    wrist_pose,\n    Twist()))\n    action_trajectory_goal.wrench_constraint = max_wrench\n    action_trajectory_client.send_goal(action_trajectory_goal)\n\ndef moveTool(tool_frame, t):\n    global action_tool_client\n    tool_pose = pm.toMsg(tool_frame)\n    action_tool_goal = CartesianTrajectoryGoal()\n    action_tool_goal.trajectory.header.stamp = rospy.Time.now()\n    action_tool_goal.trajectory.points.append(CartesianTrajectoryPoint(\n    rospy.Duration(t),\n    tool_pose,\n    Twist()))\n    action_tool_client.send_goal(action_tool_goal)\n\n\nif __name__ == '__main__':\n\n    a = []\n    for arg in sys.argv:\n        a.append(arg)\n\n    if (len(a) > 1) and ((a[1]==\"left\") or (\"right\")):\n        prefix = a[1]\n    else:\n        print \"Usage: %s prefix\"%a[0]\n        exit(0)\n\n    rospy.init_node('impedance_riser')\n\n    listener = tf.TransformListener();\n\n    action_impedance_client = actionlib.SimpleActionClient(\"\/\" + prefix + \"_arm\/cartesian_impedance\", CartesianImpedanceAction)\n    action_impedance_client.wait_for_server()\n\n    action_trajectory_client = actionlib.SimpleActionClient(\"\/\" + prefix + \"_arm\/cartesian_trajectory\", CartesianTrajectoryAction)\n    action_trajectory_client.wait_for_server()\n\n    action_tool_client = actionlib.SimpleActionClient(\"\/\" + prefix + \"_arm\/tool_trajectory\", CartesianTrajectoryAction)\n    action_tool_client.wait_for_server()\n\n    rospy.sleep(1.0)\n\n    # save current wrist position\n    time_now = rospy.Time.now() - rospy.Duration(1.0)\n    listener.waitForTransform('torso_base', prefix+'_arm_7_link', time_now, rospy.Duration(4.0))\n    pose = listener.lookupTransform('torso_base', prefix+'_arm_7_link', time_now)\n    T_B_W = pm.fromTf(pose)\n\n    T_W_T = PyKDL.Frame()    # tool transformation\n    print \"setting the tool to %s relative to wrist frame\"%(T_W_T)\n    # move both tool position and wrist position - the gripper holds its position\n    print \"moving wrist\"\n    # we assume that during the initialization there are no contact forces, so we limit the wrench\n    moveWrist( T_B_W, T_W_T, 2.0, Wrench(Vector3(20, 20, 20), Vector3(4, 4, 4)) )\n    print \"moving tool\"\n    moveTool( T_W_T, 2.0 )\n    rospy.sleep(2.0)\n\n    # change the stiffness\n    print \"changing stiffness for door approach\"\n    moveImpedance(Wrench(Vector3(1200.0, 1200.0, 1200.0), Vector3(300.0, 300.0, 300.0)), 4.0)\n    rospy.sleep(4.0)\n\n\n"}
{"instruction":"Make a function in Python which takes a string of any length, reverses it, and then returns the reversed string.","input":"String to be reversed","output":"def reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a function in Python which takes a string of any length, reverses it, and then returns the reversed string.\n\n### Input:\nString to be reversed\n\n### Output:\ndef reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string"}
{"instruction":"Optimize a code snippet in Python. The code snippet is a function for computing the factorial of a number.","input":"def factorial(n):\n if n < 1:\n  return 1\n else:\n  return n*factorial(n-1)","output":"def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a code snippet in Python. The code snippet is a function for computing the factorial of a number.\n\n### Input:\ndef factorial(n):\n if n < 1:\n  return 1\n else:\n  return n*factorial(n-1)\n\n### Output:\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result"}
{"instruction":"Generate a bar chart in Python to compare the given 2 datasets.","input":"Dataset 1: 12, 4, 8, 10\n\nDataset 2: 6, 12, 14, 8","output":"import matplotlib.pyplot as plt\n\nd1 = [12, 4, 8, 10]\nd2 = [6, 12, 14, 8]\n\n# set width of bar\nbarWidth = 0.4\n\n# set height of bar\nbars1 = d1\nbars2 = d2\n\n# Set position of bar on X axis\nr1 = np.arange(len(d1))\nr2 = [x + barWidth for x in r1]\n\n# Make the plot\nplt.bar(r1, bars1, width=barWidth, color='#7f6d5f', label='Dataset 1')\nplt.bar(r2, bars2, width=barWidth, color='#557f2d', label='Dataset 2')\n\n# Add xticks on the middle of the group bars\nplt.xlabel('Groups', fontweight='bold')\nplt.xticks([r + barWidth for r in range(len(d1))], ['A', 'B', 'C', 'D'])\n\n# Create legend & Show graphic\nplt.legend()\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a bar chart in Python to compare the given 2 datasets.\n\n### Input:\nDataset 1: 12, 4, 8, 10\n\nDataset 2: 6, 12, 14, 8\n\n### Output:\nimport matplotlib.pyplot as plt\n\nd1 = [12, 4, 8, 10]\nd2 = [6, 12, 14, 8]\n\n# set width of bar\nbarWidth = 0.4\n\n# set height of bar\nbars1 = d1\nbars2 = d2\n\n# Set position of bar on X axis\nr1 = np.arange(len(d1))\nr2 = [x + barWidth for x in r1]\n\n# Make the plot\nplt.bar(r1, bars1, width=barWidth, color='#7f6d5f', label='Dataset 1')\nplt.bar(r2, bars2, width=barWidth, color='#557f2d', label='Dataset 2')\n\n# Add xticks on the middle of the group bars\nplt.xlabel('Groups', fontweight='bold')\nplt.xticks([r + barWidth for r in range(len(d1))], ['A', 'B', 'C', 'D'])\n\n# Create legend & Show graphic\nplt.legend()\nplt.show()"}
{"instruction":"Create a program to remove all the duplicate elements from the given array in Python.","input":"[3, 5, 7, 9, 3, 5, 7]","output":"def remove_duplicates(arr):\n    result = []\n    seen = set()\n\n    for item in arr:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n\n    return result\n\nprint(remove_duplicates([3, 5, 7, 9, 3, 5, 7]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to remove all the duplicate elements from the given array in Python.\n\n### Input:\n[3, 5, 7, 9, 3, 5, 7]\n\n### Output:\ndef remove_duplicates(arr):\n    result = []\n    seen = set()\n\n    for item in arr:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n\n    return result\n\nprint(remove_duplicates([3, 5, 7, 9, 3, 5, 7]))"}
{"instruction":"Create a program in Python that evaluates a postfix expression. The input to the program should be a string with the postfix expression. The output should be the evaluated value of the expression.","input":"\"2 3 + 4 5 * *\"","output":"def evaluate(expression): \n  \n    # split expression into list  \n    expression = expression.split() \n  \n    # stack to store integer values. \n    stack = []  \n  \n    # do for every element of expression. \n    for element in expression: \n  \n        # If element is an operand push \n        # into stack it's a number only \n        if element.isdigit(): \n            stack.append(element) \n  \n        # if element is an operator, \n        # pop two elements from stack \n        # perform respective operations \n        else:  \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + element + val1))) \n  \n    # return the value  \n    return (int(stack[0])) \n  \n# Driver Code  \nexpression = \"2 3 + 4 5 * *\"\n  \nprint(evaluate(expression)) \n\nOutput: 46","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that evaluates a postfix expression. The input to the program should be a string with the postfix expression. The output should be the evaluated value of the expression.\n\n### Input:\n\"2 3 + 4 5 * *\"\n\n### Output:\ndef evaluate(expression): \n  \n    # split expression into list  \n    expression = expression.split() \n  \n    # stack to store integer values. \n    stack = []  \n  \n    # do for every element of expression. \n    for element in expression: \n  \n        # If element is an operand push \n        # into stack it's a number only \n        if element.isdigit(): \n            stack.append(element) \n  \n        # if element is an operator, \n        # pop two elements from stack \n        # perform respective operations \n        else:  \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + element + val1))) \n  \n    # return the value  \n    return (int(stack[0])) \n  \n# Driver Code  \nexpression = \"2 3 + 4 5 * *\"\n  \nprint(evaluate(expression)) \n\nOutput: 46"}
{"instruction":"Design a rule-based system in Python to generate natural language questions.","input":"","output":"import re\n\ndef generate_question(sentence):\n tokens = re.findall('\\w+', sentence)\n if tokens[0] == 'The':\n  question = 'What is' + ' ' + ' '.join(tokens[1:]) + '?'\n else:\n  question = 'What is the' + ' ' + ' '.join(tokens) + '?'\n  \n return question","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a rule-based system in Python to generate natural language questions.\n\n### Input:\n\n\n### Output:\nimport re\n\ndef generate_question(sentence):\n tokens = re.findall('\\w+', sentence)\n if tokens[0] == 'The':\n  question = 'What is' + ' ' + ' '.join(tokens[1:]) + '?'\n else:\n  question = 'What is the' + ' ' + ' '.join(tokens) + '?'\n  \n return question"}
{"instruction":"Write a Python function to check if a number is perfect or not. A perfect number is a positive integer which is equal to the sum of its positive divisors.","input":"","output":"def is_perfect(n):\n  sum = 0\n  for i in range(1, n): \n    if (n % i == 0): \n      sum += i \n  return sum == n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to check if a number is perfect or not. A perfect number is a positive integer which is equal to the sum of its positive divisors.\n\n### Input:\n\n\n### Output:\ndef is_perfect(n):\n  sum = 0\n  for i in range(1, n): \n    if (n % i == 0): \n      sum += i \n  return sum == n"}
{"instruction":"In Python, create a loop that takes a user input and appends it to a list until the user types \"stop\".","input":"","output":"my_list = []\n\nwhile True:\n    user_input = input('Type something: ')\n    if user_input == 'stop':\n        break\n    my_list.append(user_input)\n\nprint(my_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, create a loop that takes a user input and appends it to a list until the user types \"stop\".\n\n### Input:\n\n\n### Output:\nmy_list = []\n\nwhile True:\n    user_input = input('Type something: ')\n    if user_input == 'stop':\n        break\n    my_list.append(user_input)\n\nprint(my_list)"}
{"instruction":"Generate a Python program to create a histogram from a data set.","input":"[2, 4, 5, 3, 5, 6, 8, 2]","output":"import matplotlib.pyplot as plt\n \ndata = [2, 4, 5, 3, 5, 6, 8, 2]\nplt.hist(data, bins = 5) \n \nplt.title(\"Histogram\") \nplt.xlabel(\"Values\")\nplt.ylabel(\"Frequency\")\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to create a histogram from a data set.\n\n### Input:\n[2, 4, 5, 3, 5, 6, 8, 2]\n\n### Output:\nimport matplotlib.pyplot as plt\n \ndata = [2, 4, 5, 3, 5, 6, 8, 2]\nplt.hist(data, bins = 5) \n \nplt.title(\"Histogram\") \nplt.xlabel(\"Values\")\nplt.ylabel(\"Frequency\")\nplt.show()"}
{"instruction":"The given code is a Python implementation of kNN algorithm for classification. It includes functions for reading data from a file, normalizing the data, and implementing the kNN algorithm. To use this code, call the \"datingClassTest\" function, which reads data from a file, normalizes it, and tests the kNN algorithm on the data. The function prints the classifier's results and the true classification for each test case, as well as the total error rate.","input":"","output":"#-*- coding: utf-8 -*-\n\nfrom numpy import *\nimport operator\n\n# \u8bfb\u53d6\u6570\u636e\u5230\u77e9\u9635\ndef file2matrix(filename):\n\n    # \u6253\u5f00\u6570\u636e\u6587\u4ef6\uff0c\u8bfb\u53d6\u6bcf\u884c\u5185\u5bb9\n    fr = open(filename)\n    arrayOLines = fr.readlines()\n\n    # \u521d\u59cb\u5316\u77e9\u9635\n    numberOfLines = len(arrayOLines)\n    returnMat = zeros((numberOfLines,3))\n\n    # \u521d\u59cb\u5316\u7c7b\u6807\u7b7e\u5411\u91cf\n    classLabelVector = []\n\n    # \u5faa\u73af\u8bfb\u53d6\u6bcf\u4e00\u884c\u6570\u636e\n    index = 0\n    for line in arrayOLines:\n        # \u53bb\u6389\u56de\u8f66\u7b26\n        line = line.strip()\n        # \u63d0\u53d64\u4e2a\u6570\u636e\u9879\n        listFromLine = line.split('\\t')\n        # \u5c06\u524d\u4e09\u9879\u6570\u636e\u5b58\u5165\u77e9\u9635\n        returnMat[index,:] = listFromLine[0:3]\n        # \u5c06\u7b2c\u56db\u9879\u6570\u636e\u5b58\u5165\u5411\u91cf\n        classLabelVector.append(int(listFromLine[-1]))\n        index += 1\n    return returnMat,classLabelVector\n\n\n# \u6570\u636e\u5f52\u4e00\u5316\ndef autoNorm(dataSet):\n    # \u8bfb\u53d6\u77e9\u9635\u4e2d\u6570\u636e\u9879\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c\n    minVals = dataSet.min(0)\n    maxVals = dataSet.max(0)\n\n    # \u83b7\u5f97\u6700\u5927\u548c\u6700\u5c0f\u503c\u95f4\u5dee\u503c\n    ranges = maxVals - minVals\n\n    # \u521d\u59cb\u5316\u8f93\u51fa\u7ed3\u679c\n    normDataSet = zeros(shape(dataSet))\n\n    # \u83b7\u53d6\u77e9\u9635\u7684\u884c\u6570\n    m = dataSet.shape[0]\n\n    # \u77e9\u9635\u8fd0\u7b97\uff1a\u5b9e\u73b0\u5f52\u4e00\u5316\u516c\u5f0f\u4e2d\u7684 oldValue - min \u4e00\u6b65\n    normDataSet = dataSet - tile(minVals, (m,1))\n\n    # \u77e9\u9635\u9664\u6cd5\uff1a\u5b9e\u73b0\u5f52\u4e00\u5316\u516c\u5f0f\u4e2d\u7684\u9664\u6cd5\n    normDataSet = normDataSet\/tile(ranges, (m,1))\n\n    # \u8fd4\u56de\u5f52\u4e00\u5316\u540e\u7684\u6570\u636e\uff0c\u6570\u636e\u8303\u56f4\u53ca\u6700\u5c0f\u503c\u77e9\u9635\n    return normDataSet, ranges, minVals\n\n\n# kNN\u7b97\u6cd5\u5b9e\u73b0\ndef classify0(inX, dataSet, labels, k):\n    # \u83b7\u53d6\u6837\u672c\u6570\u636e\u6570\u91cf\n    dataSetSize = dataSet.shape[0]\n\n    # \u77e9\u9635\u8fd0\u7b97\uff0c\u8ba1\u7b97\u6d4b\u8bd5\u6570\u636e\u4e0e\u6bcf\u4e2a\u6837\u672c\u6570\u636e\u5bf9\u5e94\u6570\u636e\u9879\u7684\u5dee\u503c\n    diffMat = tile(inX, (dataSetSize,1)) - dataSet\n\n    # sqDistances \u4e0a\u4e00\u6b65\u9aa4\u7ed3\u679c\u5e73\u65b9\u548c\n    sqDiffMat = diffMat**2\n    sqDistances = sqDiffMat.sum(axis=1)\n\n    # \u53d6\u5e73\u65b9\u6839\uff0c\u5f97\u5230\u8ddd\u79bb\u5411\u91cf\n    distances = sqDistances**0.5\n\n    # \u6309\u7167\u8ddd\u79bb\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f\n    sortedDistIndicies = distances.argsort()\n    classCount={}\n\n    # \u4f9d\u6b21\u53d6\u51fa\u6700\u8fd1\u7684\u6837\u672c\u6570\u636e\n    for i in range(k):\n        # \u8bb0\u5f55\u8be5\u6837\u672c\u6570\u636e\u6240\u5c5e\u7684\u7c7b\u522b\n        voteIlabel = labels[sortedDistIndicies[i]]\n        classCount[voteIlabel] = classCount.get(voteIlabel,0) + 1\n\n    # \u5bf9\u7c7b\u522b\u51fa\u73b0\u7684\u9891\u6b21\u8fdb\u884c\u6392\u5e8f\uff0c\u4ece\u9ad8\u5230\u4f4e\n    sortedClassCount = sorted(classCount.iteritems(), key=operator.itemgetter(1), reverse=True)\n\n    # \u8fd4\u56de\u51fa\u73b0\u9891\u6b21\u6700\u9ad8\u7684\u7c7b\u522b\n    return sortedClassCount[0][0]\n\n# \u7b97\u6cd5\u6d4b\u8bd5\ndef datingClassTest():\n    # \u8bbe\u5b9a\u6d4b\u8bd5\u6570\u636e\u7684\u6bd4\u4f8b\n    hoRatio = 0.10\n\n    # \u8bfb\u53d6\u6570\u636e\n    datingDataMat,datingLabels = file2matrix('datingTestSet2.txt')\n\n    # \u5f52\u4e00\u5316\u6570\u636e\n    normMat, ranges, minVals = autoNorm(datingDataMat)\n\n    # \u6570\u636e\u603b\u884c\u6570\n    m = normMat.shape[0]\n\n    # \u6d4b\u8bd5\u6570\u636e\u884c\u6570\n    numTestVecs = int(m*hoRatio)\n\n    # \u521d\u59cb\u5316\u9519\u8bef\u7387\n    errorCount = 0.0\n\n    # \u5faa\u73af\u8bfb\u53d6\u6bcf\u884c\u6d4b\u8bd5\u6570\u636e\n    for i in range(numTestVecs):\n\n        # \u5bf9\u8be5\u6d4b\u8bd5\u4eba\u5458\u8fdb\u884c\u5206\u7c7b\n        classifierResult = classify0(normMat[i,:],normMat[numTestVecs:m,:],datingLabels[numTestVecs:m],3)\n\n        # \u6253\u5370KNN\u7b97\u6cd5\u5206\u7c7b\u7ed3\u679c\u548c\u771f\u5b9e\u7684\u5206\u7c7b\n        print \"the classifier came back with: %d, the real answer is: %d\" % (classifierResult, datingLabels[i])\n\n        # \u5224\u65adKNN\u7b97\u6cd5\u7ed3\u679c\u662f\u5426\u51c6\u786e\n        if (classifierResult != datingLabels[i]): errorCount += 1.0\n\n    # \u6253\u5370\u9519\u8bef\u7387\n    print \"the total error rate is: %f\" % (errorCount\/float(numTestVecs))\n\n# \u6267\u884c\u7b97\u6cd5\u6d4b\u8bd5\ndatingClassTest()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python implementation of kNN algorithm for classification. It includes functions for reading data from a file, normalizing the data, and implementing the kNN algorithm. To use this code, call the \"datingClassTest\" function, which reads data from a file, normalizes it, and tests the kNN algorithm on the data. The function prints the classifier's results and the true classification for each test case, as well as the total error rate.\n\n### Input:\n\n\n### Output:\n#-*- coding: utf-8 -*-\n\nfrom numpy import *\nimport operator\n\n# \u8bfb\u53d6\u6570\u636e\u5230\u77e9\u9635\ndef file2matrix(filename):\n\n    # \u6253\u5f00\u6570\u636e\u6587\u4ef6\uff0c\u8bfb\u53d6\u6bcf\u884c\u5185\u5bb9\n    fr = open(filename)\n    arrayOLines = fr.readlines()\n\n    # \u521d\u59cb\u5316\u77e9\u9635\n    numberOfLines = len(arrayOLines)\n    returnMat = zeros((numberOfLines,3))\n\n    # \u521d\u59cb\u5316\u7c7b\u6807\u7b7e\u5411\u91cf\n    classLabelVector = []\n\n    # \u5faa\u73af\u8bfb\u53d6\u6bcf\u4e00\u884c\u6570\u636e\n    index = 0\n    for line in arrayOLines:\n        # \u53bb\u6389\u56de\u8f66\u7b26\n        line = line.strip()\n        # \u63d0\u53d64\u4e2a\u6570\u636e\u9879\n        listFromLine = line.split('\\t')\n        # \u5c06\u524d\u4e09\u9879\u6570\u636e\u5b58\u5165\u77e9\u9635\n        returnMat[index,:] = listFromLine[0:3]\n        # \u5c06\u7b2c\u56db\u9879\u6570\u636e\u5b58\u5165\u5411\u91cf\n        classLabelVector.append(int(listFromLine[-1]))\n        index += 1\n    return returnMat,classLabelVector\n\n\n# \u6570\u636e\u5f52\u4e00\u5316\ndef autoNorm(dataSet):\n    # \u8bfb\u53d6\u77e9\u9635\u4e2d\u6570\u636e\u9879\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c\n    minVals = dataSet.min(0)\n    maxVals = dataSet.max(0)\n\n    # \u83b7\u5f97\u6700\u5927\u548c\u6700\u5c0f\u503c\u95f4\u5dee\u503c\n    ranges = maxVals - minVals\n\n    # \u521d\u59cb\u5316\u8f93\u51fa\u7ed3\u679c\n    normDataSet = zeros(shape(dataSet))\n\n    # \u83b7\u53d6\u77e9\u9635\u7684\u884c\u6570\n    m = dataSet.shape[0]\n\n    # \u77e9\u9635\u8fd0\u7b97\uff1a\u5b9e\u73b0\u5f52\u4e00\u5316\u516c\u5f0f\u4e2d\u7684 oldValue - min \u4e00\u6b65\n    normDataSet = dataSet - tile(minVals, (m,1))\n\n    # \u77e9\u9635\u9664\u6cd5\uff1a\u5b9e\u73b0\u5f52\u4e00\u5316\u516c\u5f0f\u4e2d\u7684\u9664\u6cd5\n    normDataSet = normDataSet\/tile(ranges, (m,1))\n\n    # \u8fd4\u56de\u5f52\u4e00\u5316\u540e\u7684\u6570\u636e\uff0c\u6570\u636e\u8303\u56f4\u53ca\u6700\u5c0f\u503c\u77e9\u9635\n    return normDataSet, ranges, minVals\n\n\n# kNN\u7b97\u6cd5\u5b9e\u73b0\ndef classify0(inX, dataSet, labels, k):\n    # \u83b7\u53d6\u6837\u672c\u6570\u636e\u6570\u91cf\n    dataSetSize = dataSet.shape[0]\n\n    # \u77e9\u9635\u8fd0\u7b97\uff0c\u8ba1\u7b97\u6d4b\u8bd5\u6570\u636e\u4e0e\u6bcf\u4e2a\u6837\u672c\u6570\u636e\u5bf9\u5e94\u6570\u636e\u9879\u7684\u5dee\u503c\n    diffMat = tile(inX, (dataSetSize,1)) - dataSet\n\n    # sqDistances \u4e0a\u4e00\u6b65\u9aa4\u7ed3\u679c\u5e73\u65b9\u548c\n    sqDiffMat = diffMat**2\n    sqDistances = sqDiffMat.sum(axis=1)\n\n    # \u53d6\u5e73\u65b9\u6839\uff0c\u5f97\u5230\u8ddd\u79bb\u5411\u91cf\n    distances = sqDistances**0.5\n\n    # \u6309\u7167\u8ddd\u79bb\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f\n    sortedDistIndicies = distances.argsort()\n    classCount={}\n\n    # \u4f9d\u6b21\u53d6\u51fa\u6700\u8fd1\u7684\u6837\u672c\u6570\u636e\n    for i in range(k):\n        # \u8bb0\u5f55\u8be5\u6837\u672c\u6570\u636e\u6240\u5c5e\u7684\u7c7b\u522b\n        voteIlabel = labels[sortedDistIndicies[i]]\n        classCount[voteIlabel] = classCount.get(voteIlabel,0) + 1\n\n    # \u5bf9\u7c7b\u522b\u51fa\u73b0\u7684\u9891\u6b21\u8fdb\u884c\u6392\u5e8f\uff0c\u4ece\u9ad8\u5230\u4f4e\n    sortedClassCount = sorted(classCount.iteritems(), key=operator.itemgetter(1), reverse=True)\n\n    # \u8fd4\u56de\u51fa\u73b0\u9891\u6b21\u6700\u9ad8\u7684\u7c7b\u522b\n    return sortedClassCount[0][0]\n\n# \u7b97\u6cd5\u6d4b\u8bd5\ndef datingClassTest():\n    # \u8bbe\u5b9a\u6d4b\u8bd5\u6570\u636e\u7684\u6bd4\u4f8b\n    hoRatio = 0.10\n\n    # \u8bfb\u53d6\u6570\u636e\n    datingDataMat,datingLabels = file2matrix('datingTestSet2.txt')\n\n    # \u5f52\u4e00\u5316\u6570\u636e\n    normMat, ranges, minVals = autoNorm(datingDataMat)\n\n    # \u6570\u636e\u603b\u884c\u6570\n    m = normMat.shape[0]\n\n    # \u6d4b\u8bd5\u6570\u636e\u884c\u6570\n    numTestVecs = int(m*hoRatio)\n\n    # \u521d\u59cb\u5316\u9519\u8bef\u7387\n    errorCount = 0.0\n\n    # \u5faa\u73af\u8bfb\u53d6\u6bcf\u884c\u6d4b\u8bd5\u6570\u636e\n    for i in range(numTestVecs):\n\n        # \u5bf9\u8be5\u6d4b\u8bd5\u4eba\u5458\u8fdb\u884c\u5206\u7c7b\n        classifierResult = classify0(normMat[i,:],normMat[numTestVecs:m,:],datingLabels[numTestVecs:m],3)\n\n        # \u6253\u5370KNN\u7b97\u6cd5\u5206\u7c7b\u7ed3\u679c\u548c\u771f\u5b9e\u7684\u5206\u7c7b\n        print \"the classifier came back with: %d, the real answer is: %d\" % (classifierResult, datingLabels[i])\n\n        # \u5224\u65adKNN\u7b97\u6cd5\u7ed3\u679c\u662f\u5426\u51c6\u786e\n        if (classifierResult != datingLabels[i]): errorCount += 1.0\n\n    # \u6253\u5370\u9519\u8bef\u7387\n    print \"the total error rate is: %f\" % (errorCount\/float(numTestVecs))\n\n# \u6267\u884c\u7b97\u6cd5\u6d4b\u8bd5\ndatingClassTest()"}
{"instruction":"Write a python program that takes a sentence as input and returns the reverse of it.","input":"sentence = \"hello world\"","output":"\"\"\"\nReverse given sentence\n\"\"\"\n\ndef reverse_sentence(sentence):\n    words = sentence.split(\" \")\n    reverse_words = words[::-1]\n    reverse_sentence = \" \".join(reverse_words)\n    return reverse_sentence\n\nif __name__==\"__main__\":\n    sentence = \"hello world\"\n    reverse_sentence = reverse_sentence(sentence)\n    print(\"Reverse of sentence '\"+sentence+\"' is '\"+reverse_sentence+\"'\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that takes a sentence as input and returns the reverse of it.\n\n### Input:\nsentence = \"hello world\"\n\n### Output:\n\"\"\"\nReverse given sentence\n\"\"\"\n\ndef reverse_sentence(sentence):\n    words = sentence.split(\" \")\n    reverse_words = words[::-1]\n    reverse_sentence = \" \".join(reverse_words)\n    return reverse_sentence\n\nif __name__==\"__main__\":\n    sentence = \"hello world\"\n    reverse_sentence = reverse_sentence(sentence)\n    print(\"Reverse of sentence '\"+sentence+\"' is '\"+reverse_sentence+\"'\")"}
{"instruction":"Generate a random password of 8 characters in Python.","input":"","output":"\"\"\"\nGenerate a random password of 8 characters in Python\n\"\"\"\n\n# Import necessary modules\nimport random \nimport string\n\n# Create an empty string\npassword = \"\"\n\n# Define a function to generate a random password\ndef random_password(length = 8):\n    # A list of characters\n    chars = string.ascii_lowercase + string.digits + string.ascii_uppercase\n\n    # Iterate over length to fill the password string\n    for i in range(length):\n        # Choose a random character out of the list\n        char = random.choice(chars)\n\n        # Append the chosen character to the password\n        global password\n        password += char\n    \n    return password\n\n# Call the password generator\npassword = random_password()\n\n# Print the password\nprint(password)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random password of 8 characters in Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nGenerate a random password of 8 characters in Python\n\"\"\"\n\n# Import necessary modules\nimport random \nimport string\n\n# Create an empty string\npassword = \"\"\n\n# Define a function to generate a random password\ndef random_password(length = 8):\n    # A list of characters\n    chars = string.ascii_lowercase + string.digits + string.ascii_uppercase\n\n    # Iterate over length to fill the password string\n    for i in range(length):\n        # Choose a random character out of the list\n        char = random.choice(chars)\n\n        # Append the chosen character to the password\n        global password\n        password += char\n    \n    return password\n\n# Call the password generator\npassword = random_password()\n\n# Print the password\nprint(password)"}
{"instruction":"Generate a Python code to calculate average temperatures from a list of temperatures.","input":"[22.5, 18.7, 30.1]","output":"def get_average(temps):\n    sum = 0\n    for temp in temps:\n        sum += temp\n    avg = sum \/ len(temps)\n    return avg\n    \ntemperatures = [22.5, 18.7, 30.1]\naverage_temp = get_average(temperatures)\nprint(\"Average temperature:\", average_temp)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code to calculate average temperatures from a list of temperatures.\n\n### Input:\n[22.5, 18.7, 30.1]\n\n### Output:\ndef get_average(temps):\n    sum = 0\n    for temp in temps:\n        sum += temp\n    avg = sum \/ len(temps)\n    return avg\n    \ntemperatures = [22.5, 18.7, 30.1]\naverage_temp = get_average(temperatures)\nprint(\"Average temperature:\", average_temp)"}
{"instruction":"Implement an algorithm in Python to convert a binary tree to a linked list.","input":"","output":"def binary_tree_to_linked_list(root): \n    if root is None:\n        return None\n    \n    linked_list_head, linked_list_tail = None, None \n  \n    queue = [root] \n  \n    while queue: \n        node = queue.pop(0)\n    \n        #If linked_list_head element is None, insert node to it \n        if linked_list_head is None: \n            linked_list_head = node; \n            linked_list_tail = node \n  \n        # Insert all the child nodes to the queue \n        if node.left: \n            queue.append(node.left) \n        if node.right: \n            queue.append(node.right) \n\n        # Link the node with the previous  \n        # node created in linked list \n        if linked_list_tail: \n            linked_list_tail.next = node \n            linked_list_tail = node \n  \n    return linked_list_head","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm in Python to convert a binary tree to a linked list.\n\n### Input:\n\n\n### Output:\ndef binary_tree_to_linked_list(root): \n    if root is None:\n        return None\n    \n    linked_list_head, linked_list_tail = None, None \n  \n    queue = [root] \n  \n    while queue: \n        node = queue.pop(0)\n    \n        #If linked_list_head element is None, insert node to it \n        if linked_list_head is None: \n            linked_list_head = node; \n            linked_list_tail = node \n  \n        # Insert all the child nodes to the queue \n        if node.left: \n            queue.append(node.left) \n        if node.right: \n            queue.append(node.right) \n\n        # Link the node with the previous  \n        # node created in linked list \n        if linked_list_tail: \n            linked_list_tail.next = node \n            linked_list_tail = node \n  \n    return linked_list_head"}
{"instruction":"Create a program to simulate a 3 body orbital system in Python.","input":"","output":"import numpy as np\n\ndef simulateSystem(x1, v1, x2, v2, x3, v3, time):\n    G = 6.67 * 10**-11\n    m1, m2, m3 = 10, 5, 15 # mass of each body (in kilograms)\n    dt = time \/ 500.0 # time step\n    X = []\n    Y = []\n\n    for t in range(time):\n        # Compute forces\n        r12 = np.sqrt( (x2[0]-x1[0])**2 + (x2[1]-x1[1])**2 )\n        r23 = np.sqrt( (x3[0]-x2[0])**2 + (x3[1]-x2[1])**2 )\n        r13 = np.sqrt( (x3[0]-x1[0])**2 + (x3[1]-x1[1])**2 )\n\n        F12x = G * m1 * m2 * (x2[0] - x1[0]) \/ r12**3\n        F12y = G * m1 * m2 * (x2[1] - x1[1]) \/ r12**3\n\n        F23x = G * m2 * m3 * (x3[0] - x2[0]) \/ r23**3\n        F23y = G * m2 * m3 * (x3[1] - x2[1]) \/ r23**3\n\n        F31x = G * m3 * m1 * (x3[0] - x1[0]) \/ r13**3\n        F31y = G * m3 * m1 * (x3[1] - x1[1]) \/ r13**3\n\n        # Update position\n        x1[0] += v1[0] * dt\n        x1[1] += v1[1] * dt\n\n        x2[0] += v2[0] * dt\n        x2[1] += v2[1] * dt\n\n        x3[0] += v3[0] * dt\n        x3[1] += v3[1] * dt\n\n        # Update velocity\n        v1[0] += (F12x + F31x) * dt \/ m1\n        v1[1] += (F12y + F31y) * dt \/ m1\n\n        v2[0] += (F12x + F23x) * dt \/ m2\n        v2[1] += (F12y + F23y) * dt \/ m2\n\n        v3[0] += (F23x + F31x) * dt \/ m3\n        v3[1] += (F23y + F31y) * dt \/ m3\n\n        # Store trajectory\n        X.append(x1[0])\n        Y.append(x1[1])\n\n    return X, Y","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to simulate a 3 body orbital system in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\ndef simulateSystem(x1, v1, x2, v2, x3, v3, time):\n    G = 6.67 * 10**-11\n    m1, m2, m3 = 10, 5, 15 # mass of each body (in kilograms)\n    dt = time \/ 500.0 # time step\n    X = []\n    Y = []\n\n    for t in range(time):\n        # Compute forces\n        r12 = np.sqrt( (x2[0]-x1[0])**2 + (x2[1]-x1[1])**2 )\n        r23 = np.sqrt( (x3[0]-x2[0])**2 + (x3[1]-x2[1])**2 )\n        r13 = np.sqrt( (x3[0]-x1[0])**2 + (x3[1]-x1[1])**2 )\n\n        F12x = G * m1 * m2 * (x2[0] - x1[0]) \/ r12**3\n        F12y = G * m1 * m2 * (x2[1] - x1[1]) \/ r12**3\n\n        F23x = G * m2 * m3 * (x3[0] - x2[0]) \/ r23**3\n        F23y = G * m2 * m3 * (x3[1] - x2[1]) \/ r23**3\n\n        F31x = G * m3 * m1 * (x3[0] - x1[0]) \/ r13**3\n        F31y = G * m3 * m1 * (x3[1] - x1[1]) \/ r13**3\n\n        # Update position\n        x1[0] += v1[0] * dt\n        x1[1] += v1[1] * dt\n\n        x2[0] += v2[0] * dt\n        x2[1] += v2[1] * dt\n\n        x3[0] += v3[0] * dt\n        x3[1] += v3[1] * dt\n\n        # Update velocity\n        v1[0] += (F12x + F31x) * dt \/ m1\n        v1[1] += (F12y + F31y) * dt \/ m1\n\n        v2[0] += (F12x + F23x) * dt \/ m2\n        v2[1] += (F12y + F23y) * dt \/ m2\n\n        v3[0] += (F23x + F31x) * dt \/ m3\n        v3[1] += (F23y + F31y) * dt \/ m3\n\n        # Store trajectory\n        X.append(x1[0])\n        Y.append(x1[1])\n\n    return X, Y"}
{"instruction":"Write an algorithm in Python to merge two sorted lists into one.","input":"list1 = [2, 3, 5, 7]\nlist2 = [4, 6, 8, 10]","output":"def mergeSortedLists(list1, list2):\n    merged_list = []\n\n    while len(list1) and len(list2):\n        if list1[0] < list2[0]:\n            merged_list.append(list1.pop(0))\n        else: \n            merged_list.append(list2.pop(0))\n\n    if len(list1):\n        merged_list += list1\n    if len(list2):\n        merged_list += list2\n   \n    return merged_list\n\nlist1 = [2, 3, 5, 7]\nlist2 = [4, 6, 8, 10]\n\nprint(mergeSortedLists(list1, list2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to merge two sorted lists into one.\n\n### Input:\nlist1 = [2, 3, 5, 7]\nlist2 = [4, 6, 8, 10]\n\n### Output:\ndef mergeSortedLists(list1, list2):\n    merged_list = []\n\n    while len(list1) and len(list2):\n        if list1[0] < list2[0]:\n            merged_list.append(list1.pop(0))\n        else: \n            merged_list.append(list2.pop(0))\n\n    if len(list1):\n        merged_list += list1\n    if len(list2):\n        merged_list += list2\n   \n    return merged_list\n\nlist1 = [2, 3, 5, 7]\nlist2 = [4, 6, 8, 10]\n\nprint(mergeSortedLists(list1, list2))"}
{"instruction":"Use the following data to create a graphical representation in Python.","input":"x = [1,2,3,4,5]\ny = [2,4,6,8,10]","output":"import matplotlib.pyplot as plt\n\nx = [1,2,3,4,5]\ny = [2,4,6,8,10]\n\nplt.plot(x,y)\nplt.title('Graph title')\nplt.xlabel('X-axis Label')\nplt.ylabel('Y-axis Label')\n\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the following data to create a graphical representation in Python.\n\n### Input:\nx = [1,2,3,4,5]\ny = [2,4,6,8,10]\n\n### Output:\nimport matplotlib.pyplot as plt\n\nx = [1,2,3,4,5]\ny = [2,4,6,8,10]\n\nplt.plot(x,y)\nplt.title('Graph title')\nplt.xlabel('X-axis Label')\nplt.ylabel('Y-axis Label')\n\nplt.show()"}
{"instruction":"Write a Python program to optimize a list of numbers such that each value is equal to the mean of its neighboring values.","input":"[3, 8, 8, 9, 5]","output":"def optimize_list(numbers):\n    optimized_list = []\n    for i, n in enumerate(numbers):\n        if i == 0:  # first element\n            optimized_list.append(numbers[1]\/2)\n        elif i == len(numbers)-1:  # last element\n            optimized_list.append(numbers[-2]\/2)\n        else:  # any other element\n            optimized_list.append(sum(numbers[i-1:i+2])\/3)\n    return optimized_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize a list of numbers such that each value is equal to the mean of its neighboring values.\n\n### Input:\n[3, 8, 8, 9, 5]\n\n### Output:\ndef optimize_list(numbers):\n    optimized_list = []\n    for i, n in enumerate(numbers):\n        if i == 0:  # first element\n            optimized_list.append(numbers[1]\/2)\n        elif i == len(numbers)-1:  # last element\n            optimized_list.append(numbers[-2]\/2)\n        else:  # any other element\n            optimized_list.append(sum(numbers[i-1:i+2])\/3)\n    return optimized_list"}
{"instruction":"Write a Python code to sort a dictionary by values","input":"dictionary = {\n  \"red\": 5,\n  \"blue\": 6,\n  \"yellow\": 9\n}","output":"sorted_dictionary = sorted(dictionary.items(), key=lambda x: x[1])\nprint(sorted_dictionary)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to sort a dictionary by values\n\n### Input:\ndictionary = {\n  \"red\": 5,\n  \"blue\": 6,\n  \"yellow\": 9\n}\n\n### Output:\nsorted_dictionary = sorted(dictionary.items(), key=lambda x: x[1])\nprint(sorted_dictionary)"}
{"instruction":"Optimize the given code in Python.","input":"def fibonacci(num):\n    a = 0\n    b = 1\n    for i in range(0, num):\n        temp = a\n        a = b\n        b = temp + b\n    return a","output":"def fibonacci(num):\n a, b = 0, 1\n for _ in range(num):\n  a, b = b, a + b\n return a","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the given code in Python.\n\n### Input:\ndef fibonacci(num):\n    a = 0\n    b = 1\n    for i in range(0, num):\n        temp = a\n        a = b\n        b = temp + b\n    return a\n\n### Output:\ndef fibonacci(num):\n a, b = 0, 1\n for _ in range(num):\n  a, b = b, a + b\n return a"}
{"instruction":"Write a Python program that simulates a coin flip game. The program should randomize a value between 0 and 1 and return \"Heads\" for values less than .5 and \"Tails\" for values greather than .5","input":"Not applicable","output":"import random\n\ndef coin_flip():\n\tif random.random() < 0.5:\n\t\treturn \"Heads\"\n\telse:\n\t\treturn \"Tails\"\n\nprint(coin_flip())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that simulates a coin flip game. The program should randomize a value between 0 and 1 and return \"Heads\" for values less than .5 and \"Tails\" for values greather than .5\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\ndef coin_flip():\n\tif random.random() < 0.5:\n\t\treturn \"Heads\"\n\telse:\n\t\treturn \"Tails\"\n\nprint(coin_flip())"}
{"instruction":"Write a Python program to detect and remove loop in a linked list.","input":"","output":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None\n\ndef detect_loop(head):\n  fast_ptr = head\n  slow_ptr = head\n\n  while (slow_ptr and fast_ptr and fast_ptr.next):\n      slow_ptr = slow_ptr.next\n      fast_ptr = fast_ptr.next.next\n      if slow_ptr == fast_ptr:\n          return slow_ptr\n\n  return None\n\ndef remove_loop(head, loop_ptr):\n  slow_ptr = head\n  fast_ptr = loop_ptr\n\n  while (slow_ptr != fast_ptr):\n      slow_ptr = slow_ptr.next\n      fast_ptr = fast_ptr.next\n\n  prev_slow_ptr = None\n  while (slow_ptr != fast_ptr):\n    prev_slow_ptr = slow_ptr\n    slow_ptr = slow_ptr.next\n    fast_ptr = fast_ptr.next\n\n  prev_slow_ptr.next = None","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to detect and remove loop in a linked list.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None\n\ndef detect_loop(head):\n  fast_ptr = head\n  slow_ptr = head\n\n  while (slow_ptr and fast_ptr and fast_ptr.next):\n      slow_ptr = slow_ptr.next\n      fast_ptr = fast_ptr.next.next\n      if slow_ptr == fast_ptr:\n          return slow_ptr\n\n  return None\n\ndef remove_loop(head, loop_ptr):\n  slow_ptr = head\n  fast_ptr = loop_ptr\n\n  while (slow_ptr != fast_ptr):\n      slow_ptr = slow_ptr.next\n      fast_ptr = fast_ptr.next\n\n  prev_slow_ptr = None\n  while (slow_ptr != fast_ptr):\n    prev_slow_ptr = slow_ptr\n    slow_ptr = slow_ptr.next\n    fast_ptr = fast_ptr.next\n\n  prev_slow_ptr.next = None"}
{"instruction":"Create a linked list structure in Python.","input":"","output":"class Node:\n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n    def __init__(self): \n        self.head = None\n  \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n  \n    def printList(self): \n        temp = self.head \n        while (temp): \n            print(temp.data) \n            temp = temp.next","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a linked list structure in Python.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n    def __init__(self): \n        self.head = None\n  \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n  \n    def printList(self): \n        temp = self.head \n        while (temp): \n            print(temp.data) \n            temp = temp.next"}
{"instruction":"Write a python script which reformats the json string below","input":"data = '{\"name\":\"Jason\",\"age\":42,\"favorite_food\":\"Lasagna\"}'","output":"import json\n\ndef reformat_json(data):\n    data = json.loads(data)\n    return json.dumps(data, indent=4)\n\ndata = '{\"name\":\"Jason\",\"age\":42,\"favorite_food\":\"Lasagna\"}'\nupdated_data = reformat_json(data)\n\nprint(updated_data)\n# {\"name\": \"Jason\",\n#  \"age\": 42,\n#  \"favorite_food\": \"Lasagna\"}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script which reformats the json string below\n\n### Input:\ndata = '{\"name\":\"Jason\",\"age\":42,\"favorite_food\":\"Lasagna\"}'\n\n### Output:\nimport json\n\ndef reformat_json(data):\n    data = json.loads(data)\n    return json.dumps(data, indent=4)\n\ndata = '{\"name\":\"Jason\",\"age\":42,\"favorite_food\":\"Lasagna\"}'\nupdated_data = reformat_json(data)\n\nprint(updated_data)\n# {\"name\": \"Jason\",\n#  \"age\": 42,\n#  \"favorite_food\": \"Lasagna\"}"}
{"instruction":"Create a method in Python to sort all the elements in the given dictionary in descending order of the values.","input":"dictionary = {\"A\": 30, \"B\": 40, \"C\": 20}","output":"def sortByValue(dictionary):\n    sorted_dict = dict(sorted(dictionary.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict\n\ndictionary = {\"A\": 30, \"B\": 40, \"C\": 20}\nresult = sortByValue(dictionary)\nprint(result) # prints {'B': 40, 'A': 30, 'C': 20}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a method in Python to sort all the elements in the given dictionary in descending order of the values.\n\n### Input:\ndictionary = {\"A\": 30, \"B\": 40, \"C\": 20}\n\n### Output:\ndef sortByValue(dictionary):\n    sorted_dict = dict(sorted(dictionary.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict\n\ndictionary = {\"A\": 30, \"B\": 40, \"C\": 20}\nresult = sortByValue(dictionary)\nprint(result) # prints {'B': 40, 'A': 30, 'C': 20}"}
{"instruction":"Write a Python program that prints all unique pairs that sum up to a given number.","input":"Number: 8","output":"def unique_pairs(number):\n    pairs = set()\n    for i in range(number + 1):\n    \tfor j in range(number + 1):\n            if i + j == number and (j, i) not in pairs:\n                pairs.add((i, j))\n    return pairs","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that prints all unique pairs that sum up to a given number.\n\n### Input:\nNumber: 8\n\n### Output:\ndef unique_pairs(number):\n    pairs = set()\n    for i in range(number + 1):\n    \tfor j in range(number + 1):\n            if i + j == number and (j, i) not in pairs:\n                pairs.add((i, j))\n    return pairs"}
{"instruction":"create a function in Python to add 10 to any given number.","input":"","output":"def add_ten(number):\n    \"\"\"\n    This function takes a number as an argument and adds 10 to it.\n    \"\"\"\n    return number + 10\n\n\nif __name__ == '__main__':\n    print(add_ten(5)) # Output: 15","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ncreate a function in Python to add 10 to any given number.\n\n### Input:\n\n\n### Output:\ndef add_ten(number):\n    \"\"\"\n    This function takes a number as an argument and adds 10 to it.\n    \"\"\"\n    return number + 10\n\n\nif __name__ == '__main__':\n    print(add_ten(5)) # Output: 15"}
{"instruction":"This code is an entry point for a CLI tool. It defines a main function that takes command-line arguments using the argparse module. The function parses the arguments and performs some meaningful action based on the arguments. To use this code, define a CLI tool and call the main function with appropriate arguments.","input":"","output":"#!\/usr\/bin\/env python3\n#\n# Copyright {{ cookiecutter.author_name }}, {{ cookiecutter.initial_year_to_release }}\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"\n{{ cookiecutter.package_name }}.cli\n-----------------------------------\n\nEntry for the `{{ cookiecutter.package_name }}` CLI.\n\n\"\"\"\n\nimport sys\nimport argparse\n\nfrom {{ cookiecutter.package_name }} import __version__\n\nfrom {{ cookiecutter.package_name }}.utils.environment import python_version\n\nfrom {{ cookiecutter.package_name }}.api.greetings import Greetings\nfrom {{ cookiecutter.package_name }}.api.greetings import howdy_greeting\n\n\ndef main(argv=sys.argv):\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"-V, --version\", help=\"show the version and exit\", action=\"version\",\n        version=\"%(prog)s: version {version} (Python {pyversion})\".format(version=__version__, pyversion=python_version()))\n\n    parser.add_argument(\n        \"-c, --cowboy\", help=\"cowboy greeting\",\n        action=\"store_true\", dest=\"iscowboy\",\n        default=False)\n\n    args = parser.parse_args()\n\n    # Do some meaningful ...\n    if args.iscowboy:\n        print(howdy_greeting())\n    else:\n        greetings = Greetings()\n        print(greetings)\n\n    return 0\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is an entry point for a CLI tool. It defines a main function that takes command-line arguments using the argparse module. The function parses the arguments and performs some meaningful action based on the arguments. To use this code, define a CLI tool and call the main function with appropriate arguments.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python3\n#\n# Copyright {{ cookiecutter.author_name }}, {{ cookiecutter.initial_year_to_release }}\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"\n{{ cookiecutter.package_name }}.cli\n-----------------------------------\n\nEntry for the `{{ cookiecutter.package_name }}` CLI.\n\n\"\"\"\n\nimport sys\nimport argparse\n\nfrom {{ cookiecutter.package_name }} import __version__\n\nfrom {{ cookiecutter.package_name }}.utils.environment import python_version\n\nfrom {{ cookiecutter.package_name }}.api.greetings import Greetings\nfrom {{ cookiecutter.package_name }}.api.greetings import howdy_greeting\n\n\ndef main(argv=sys.argv):\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"-V, --version\", help=\"show the version and exit\", action=\"version\",\n        version=\"%(prog)s: version {version} (Python {pyversion})\".format(version=__version__, pyversion=python_version()))\n\n    parser.add_argument(\n        \"-c, --cowboy\", help=\"cowboy greeting\",\n        action=\"store_true\", dest=\"iscowboy\",\n        default=False)\n\n    args = parser.parse_args()\n\n    # Do some meaningful ...\n    if args.iscowboy:\n        print(howdy_greeting())\n    else:\n        greetings = Greetings()\n        print(greetings)\n\n    return 0\n"}
{"instruction":"Write a python script that sorts a list of strings by length.","input":"['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']","output":"def sort_strings_by_length(strings):\n    # Sort strings by length in ascending order\n    strings.sort(key=len)\n    return strings","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script that sorts a list of strings by length.\n\n### Input:\n['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']\n\n### Output:\ndef sort_strings_by_length(strings):\n    # Sort strings by length in ascending order\n    strings.sort(key=len)\n    return strings"}
{"instruction":"Generate a Python script to create a list of numbers between a given range.","input":"start = 5, end = 10","output":"def generate_list(start, end):\n    result = []\n    for num in range(start, end+1):\n        result.append(num)\n    return result\n\nlist = generate_list(5, 10)\nprint(list)  # Output: [5, 6, 7, 8, 9, 10]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to create a list of numbers between a given range.\n\n### Input:\nstart = 5, end = 10\n\n### Output:\ndef generate_list(start, end):\n    result = []\n    for num in range(start, end+1):\n        result.append(num)\n    return result\n\nlist = generate_list(5, 10)\nprint(list)  # Output: [5, 6, 7, 8, 9, 10]"}
{"instruction":"Write a Python script to generate a multiplication table with a given number of rows and columns.","input":"rows = 6\ncolumns = 8","output":"def multiplicationTable(x, y):\n table = [[ 0 for j in range(x)] for i in range(y)]\n for row in range(x):\n for col in range(y):\n table[row][col] = (row + 1) * (col + 1)\n return table\n\nprint(multiplicationTable(rows, columns))\n\nOutput:\n[[1, 2, 3, 4, 5, 6, 7, 8], \n[2, 4, 6, 8, 10, 12, 14, 16], \n[3, 6, 9, 12, 15, 18, 21, 24], \n[4, 8, 12, 16, 20, 24, 28, 32], \n[5, 10, 15, 20, 25, 30, 35, 40], \n[6, 12, 18, 24, 30, 36, 42, 48]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate a multiplication table with a given number of rows and columns.\n\n### Input:\nrows = 6\ncolumns = 8\n\n### Output:\ndef multiplicationTable(x, y):\n table = [[ 0 for j in range(x)] for i in range(y)]\n for row in range(x):\n for col in range(y):\n table[row][col] = (row + 1) * (col + 1)\n return table\n\nprint(multiplicationTable(rows, columns))\n\nOutput:\n[[1, 2, 3, 4, 5, 6, 7, 8], \n[2, 4, 6, 8, 10, 12, 14, 16], \n[3, 6, 9, 12, 15, 18, 21, 24], \n[4, 8, 12, 16, 20, 24, 28, 32], \n[5, 10, 15, 20, 25, 30, 35, 40], \n[6, 12, 18, 24, 30, 36, 42, 48]]"}
{"instruction":"Can you write a Python3 program to calculate the number of times a character appears in a given string?","input":"\"Hello World!\"","output":"str1 = \"Hello World!\"\n\nchar = 'l'\ncount = 0\n\nfor i in str1:\n     if i == char:\n          count = count + 1\n\n# Print the result \nprint (f'The character {char} appears {count} times in the string {str1}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you write a Python3 program to calculate the number of times a character appears in a given string?\n\n### Input:\n\"Hello World!\"\n\n### Output:\nstr1 = \"Hello World!\"\n\nchar = 'l'\ncount = 0\n\nfor i in str1:\n     if i == char:\n          count = count + 1\n\n# Print the result \nprint (f'The character {char} appears {count} times in the string {str1}')"}
{"instruction":"Create a class in Python for creating a currency converter that can convert between any currencies.","input":"Not applicable","output":"import requests\n\nclass CurrencyConverter:\n    def __init__(self, source_currency, target_currency, amount):\n        self.source_currency = source_currency\n        self.target_currency = target_currency\n        self.amount = amount\n\n    def convert(self):\n        \"\"\"\n        This method returns the converted amount\n        \"\"\"\n        url = f\"https:\/\/api.exchangeratesapi.io\/latest?base={self.source_currency}&symbols={self.target_currency}\"\n        response = requests.get(url)\n        data = response.json()\n        rate = data[\"rates\"][self.target_currency]\n\n        return rate * self.amount\n\n\n# Usage sample\nconverter = CurrencyConverter(\"USD\", \"EUR\", 100)\nprint(converter.convert())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python for creating a currency converter that can convert between any currencies.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\n\nclass CurrencyConverter:\n    def __init__(self, source_currency, target_currency, amount):\n        self.source_currency = source_currency\n        self.target_currency = target_currency\n        self.amount = amount\n\n    def convert(self):\n        \"\"\"\n        This method returns the converted amount\n        \"\"\"\n        url = f\"https:\/\/api.exchangeratesapi.io\/latest?base={self.source_currency}&symbols={self.target_currency}\"\n        response = requests.get(url)\n        data = response.json()\n        rate = data[\"rates\"][self.target_currency]\n\n        return rate * self.amount\n\n\n# Usage sample\nconverter = CurrencyConverter(\"USD\", \"EUR\", 100)\nprint(converter.convert())"}
{"instruction":"Generate a new Python List containing all of the even numbers from a given list.","input":"my_list = [2, 3, 4, 5, 6, 7, 8, 9]","output":"my_list = [2, 3, 4, 5, 6, 7, 8, 9]\n\neven_list = [x for x in my_list if x % 2 == 0]\nprint(even_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a new Python List containing all of the even numbers from a given list.\n\n### Input:\nmy_list = [2, 3, 4, 5, 6, 7, 8, 9]\n\n### Output:\nmy_list = [2, 3, 4, 5, 6, 7, 8, 9]\n\neven_list = [x for x in my_list if x % 2 == 0]\nprint(even_list)"}
{"instruction":"Given a JSON object containing a list of key\/value pairs, write a Python function to sort the list by value.","input":"{\n  \"a\": 23,\n  \"b\": 42,\n  \"c\": 16\n}","output":"def sort_by_value(data):\n sorted_list = sorted(data.items(), key=lambda kv: kv[1])\n return sorted_list\n \nprint(sort_by_value({\"a\": 23, \"b\": 42, \"c\": 16}))\n# Output -> [('c', 16), ('a', 23), ('b', 42)]  # sorted by value","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a JSON object containing a list of key\/value pairs, write a Python function to sort the list by value.\n\n### Input:\n{\n  \"a\": 23,\n  \"b\": 42,\n  \"c\": 16\n}\n\n### Output:\ndef sort_by_value(data):\n sorted_list = sorted(data.items(), key=lambda kv: kv[1])\n return sorted_list\n \nprint(sort_by_value({\"a\": 23, \"b\": 42, \"c\": 16}))\n# Output -> [('c', 16), ('a', 23), ('b', 42)]  # sorted by value"}
{"instruction":"Write a Python program to determine the maximum value in a dictionary.","input":"{\n  \"Potato\": 1,\n  \"Onion\": 3,\n  \"Carrot\": 2\n}","output":"def get_max_value(dictionary):\n    max_value = 0\n    for k, v in dictionary.items():\n        if v > max_value:\n            max_value = v\n    return max_value\n\nprint(get_max_value({\n  \"Potato\": 1,\n  \"Onion\": 3,\n  \"Carrot\": 2\n})) \n#prints 3","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to determine the maximum value in a dictionary.\n\n### Input:\n{\n  \"Potato\": 1,\n  \"Onion\": 3,\n  \"Carrot\": 2\n}\n\n### Output:\ndef get_max_value(dictionary):\n    max_value = 0\n    for k, v in dictionary.items():\n        if v > max_value:\n            max_value = v\n    return max_value\n\nprint(get_max_value({\n  \"Potato\": 1,\n  \"Onion\": 3,\n  \"Carrot\": 2\n})) \n#prints 3"}
{"instruction":"Using the comment as a guide, replace all the variables with their corresponding values in the given Python code.","input":"a = 10\nb = 25\n\n# TODO: Replace the variables with their values\nresult = a + b","output":"# TODO: Replace the variables with their values\nresult = 10 + 25","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the comment as a guide, replace all the variables with their corresponding values in the given Python code.\n\n### Input:\na = 10\nb = 25\n\n# TODO: Replace the variables with their values\nresult = a + b\n\n### Output:\n# TODO: Replace the variables with their values\nresult = 10 + 25"}
{"instruction":"Generate Python code to print the first \u2018n\u2019 elements of the Fibonacci series.","input":"7","output":"def print_fibonacci_series(n):\n    a, b = 0, 1\n    for i in range(n):\n        print(a)\n        a, b = b, a + b\n\nprint_fibonacci_series(7)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to print the first \u2018n\u2019 elements of the Fibonacci series.\n\n### Input:\n7\n\n### Output:\ndef print_fibonacci_series(n):\n    a, b = 0, 1\n    for i in range(n):\n        print(a)\n        a, b = b, a + b\n\nprint_fibonacci_series(7)"}
{"instruction":"Create a Python program that takes two arguments in the form of two lists and calculates the dot product of the two arguments.","input":"[1,2], [3,4]","output":"def dot_product(list1, list2):\n  product = 0\n  for i in range(len(list1)):\n    product += (list1[i] * list2[i])\n  return product\n#Example\nlist1 = [1,2]\nlist2 = [3,4]\n\nresult = dot_product(list1, list2)\nprint(result)\n#Output\n11","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes two arguments in the form of two lists and calculates the dot product of the two arguments.\n\n### Input:\n[1,2], [3,4]\n\n### Output:\ndef dot_product(list1, list2):\n  product = 0\n  for i in range(len(list1)):\n    product += (list1[i] * list2[i])\n  return product\n#Example\nlist1 = [1,2]\nlist2 = [3,4]\n\nresult = dot_product(list1, list2)\nprint(result)\n#Output\n11"}
{"instruction":"Generate a python program to find the longest common subsequence.","input":"","output":"def find_longest_common_subsequence(s1, s2):\n    # Create a two dimensional array \n    arr = [[0 for i in range(len(s2) + 1)]  \n           for j in range(len(s1) + 1)] \n    \n    # Iterate over the strings \n    for i in range(1, len(s1) + 1): \n        for j in range(1, len(s2) + 1): \n    \n        # if the characters are same, update the \n        # value at current index by adding 1 to \n        # value at the diagonal left \n            if s1[i - 1] == s2[j - 1]: \n                arr[i][j] = arr[i - 1][j - 1] + 1\n            else: \n        # If not same, take the maximum \n        # value of the cell to the left \n        # and cell above \n                arr[i][j] = max(arr[i - 1][j], \n                                arr[i][j - 1])\n\n    # return the last element of the \n    # table which is our result \n    return arr[len(s1)][len(s2)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to find the longest common subsequence.\n\n### Input:\n\n\n### Output:\ndef find_longest_common_subsequence(s1, s2):\n    # Create a two dimensional array \n    arr = [[0 for i in range(len(s2) + 1)]  \n           for j in range(len(s1) + 1)] \n    \n    # Iterate over the strings \n    for i in range(1, len(s1) + 1): \n        for j in range(1, len(s2) + 1): \n    \n        # if the characters are same, update the \n        # value at current index by adding 1 to \n        # value at the diagonal left \n            if s1[i - 1] == s2[j - 1]: \n                arr[i][j] = arr[i - 1][j - 1] + 1\n            else: \n        # If not same, take the maximum \n        # value of the cell to the left \n        # and cell above \n                arr[i][j] = max(arr[i - 1][j], \n                                arr[i][j - 1])\n\n    # return the last element of the \n    # table which is our result \n    return arr[len(s1)][len(s2)]"}
{"instruction":"Using a Python program, generate a random password of 8 characters, where at least one character is a uppercase letter and one character is a number.","input":"","output":"import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits\n    size = 8\n    \n    while True:\n        password = ''.join(random.choice(chars) for _ in range(size))\n        if any(c.islower() for c in password) and any(c.isupper() for c in password) and any(c.isdigit() for c in password):\n            break\n        \n    return password\n\nprint(generate_password())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing a Python program, generate a random password of 8 characters, where at least one character is a uppercase letter and one character is a number.\n\n### Input:\n\n\n### Output:\nimport string\nimport random\n\ndef generate_password():\n    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits\n    size = 8\n    \n    while True:\n        password = ''.join(random.choice(chars) for _ in range(size))\n        if any(c.islower() for c in password) and any(c.isupper() for c in password) and any(c.isdigit() for c in password):\n            break\n        \n    return password\n\nprint(generate_password())"}
{"instruction":"Can you write a Python script to search an input string for a specific character and return its position in the string?","input":"string = \"Python\"\nsearch_char = 'y'","output":"pos = string.find(search_char) # 2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you write a Python script to search an input string for a specific character and return its position in the string?\n\n### Input:\nstring = \"Python\"\nsearch_char = 'y'\n\n### Output:\npos = string.find(search_char) # 2"}
{"instruction":"Write a function in Python to find an optimal set of parameters (p1,p2,p3) to maximize an evaluation metric.","input":"The training dataset consists of 1000 datapoints. The evaluation metric is the mean squared error of the predictions on a separate test dataset consisting of 500 datapoints.","output":"def findMaximizingParams(X_train,X_test,y_train,y_test):\n    best_score = float(\"-inf\")\n    best_params = None\n    p1s = [0,1,2]\n    p2s = [0.1,0.3,0.5]\n    p3s = [2,4,6]\n    for p1 in p1s:\n        for p2 in p2s:\n            for p3 in p3s:\n                curr_params = (p1,p2,p3)\n                model = Model(p1,p2,p3)\n                model.fit(X_train,y_train)\n                predictions = model.predict(X_test)\n                curr_score = mean_squared_error(y_test, predictions)\n                if curr_score > best_score:\n                    best_score = curr_score\n                    best_params = curr_params\n    return best_params","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to find an optimal set of parameters (p1,p2,p3) to maximize an evaluation metric.\n\n### Input:\nThe training dataset consists of 1000 datapoints. The evaluation metric is the mean squared error of the predictions on a separate test dataset consisting of 500 datapoints.\n\n### Output:\ndef findMaximizingParams(X_train,X_test,y_train,y_test):\n    best_score = float(\"-inf\")\n    best_params = None\n    p1s = [0,1,2]\n    p2s = [0.1,0.3,0.5]\n    p3s = [2,4,6]\n    for p1 in p1s:\n        for p2 in p2s:\n            for p3 in p3s:\n                curr_params = (p1,p2,p3)\n                model = Model(p1,p2,p3)\n                model.fit(X_train,y_train)\n                predictions = model.predict(X_test)\n                curr_score = mean_squared_error(y_test, predictions)\n                if curr_score > best_score:\n                    best_score = curr_score\n                    best_params = curr_params\n    return best_params"}
{"instruction":"Evaluate the accuracy of a machine learning model.","input":"A classification model trained on a dataset of 10000 images.","output":"Create a python script to evaluate the performance of the classification model. The script should measure the accuracy of the model by measuring the accuracy score on a held-out test set. The test should compare the model's predictions to the true labels for the image samples.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEvaluate the accuracy of a machine learning model.\n\n### Input:\nA classification model trained on a dataset of 10000 images.\n\n### Output:\nCreate a python script to evaluate the performance of the classification model. The script should measure the accuracy of the model by measuring the accuracy score on a held-out test set. The test should compare the model's predictions to the true labels for the image samples."}
{"instruction":"Create a Python script to generate all combinations of two integers in a list.","input":"","output":"def generate_combinations(list1):\n    result = []\n    for x in range(len(list1)): \n        for y in range(x + 1, len(list1)): \n            result.append((list1[x], list1[y])) \n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate all combinations of two integers in a list.\n\n### Input:\n\n\n### Output:\ndef generate_combinations(list1):\n    result = []\n    for x in range(len(list1)): \n        for y in range(x + 1, len(list1)): \n            result.append((list1[x], list1[y])) \n    return result"}
{"instruction":"Create a web scraper in Python to get the title and first paragraph of a web page","input":"Web page URL: https:\/\/en.wikipedia.org\/wiki\/Machine_learning","output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/en.wikipedia.org\/wiki\/Machine_learning'\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get(url).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n# Print the title of the web page\nprint(\"Title:\", soup.title.string)\n\n# Find the first paragraph\nfirst_paragraph = soup.find('p').text\nprint(\"First paragraph:\", first_paragraph)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python to get the title and first paragraph of a web page\n\n### Input:\nWeb page URL: https:\/\/en.wikipedia.org\/wiki\/Machine_learning\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/en.wikipedia.org\/wiki\/Machine_learning'\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get(url).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n# Print the title of the web page\nprint(\"Title:\", soup.title.string)\n\n# Find the first paragraph\nfirst_paragraph = soup.find('p').text\nprint(\"First paragraph:\", first_paragraph)"}
{"instruction":"Find the largest number in an array using Python.","input":"Array: [1, 10, 5, 6, 9, 8, 20]","output":"arr = [1, 10, 5, 6, 9, 8, 20]\n\ndef largest_number(arr):\n  largest = arr[0]\n  for num in arr:\n    if num > largest:\n      largest = num\n\n  return largest\n\nlargest = largest_number(arr)\nprint(largest) # 20","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the largest number in an array using Python.\n\n### Input:\nArray: [1, 10, 5, 6, 9, 8, 20]\n\n### Output:\narr = [1, 10, 5, 6, 9, 8, 20]\n\ndef largest_number(arr):\n  largest = arr[0]\n  for num in arr:\n    if num > largest:\n      largest = num\n\n  return largest\n\nlargest = largest_number(arr)\nprint(largest) # 20"}
{"instruction":"Write a Python program for supervised learning that can predict the price of a house given some features of the house.","input":"Not applicable","output":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Read the dataset\ndf = pd.read_csv('data.csv')\n\n# Split the dataset into features and labels\nX = df.drop('price',axis=1)\ny = df['price']\n\n# Split the dataset into train and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Build the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\ntest_score = model.score(X_test, y_test)\nprint('Test Score:', test_score)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Print out some example predictions\nprint('\\nSample Predictions')\nfor i in range(10):\n    print(f'Predicted Price: {y_pred[i]:.2f}, Actual Price: {y_test.values[i]}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program for supervised learning that can predict the price of a house given some features of the house.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Read the dataset\ndf = pd.read_csv('data.csv')\n\n# Split the dataset into features and labels\nX = df.drop('price',axis=1)\ny = df['price']\n\n# Split the dataset into train and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Build the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\ntest_score = model.score(X_test, y_test)\nprint('Test Score:', test_score)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Print out some example predictions\nprint('\\nSample Predictions')\nfor i in range(10):\n    print(f'Predicted Price: {y_pred[i]:.2f}, Actual Price: {y_test.values[i]}')"}
{"instruction":"Write a Python program to encode and decode a given text using Base64 algorithm.","input":"Text to encode: \"Hello World\"","output":"import base64\n\n# Function to encode\ndef encode(text):\n encoded_text = base64.b64encode(text.encode('utf-8'))\n return encoded_text\n\n# Function to decode\ndef decode(text):\n decoded_text = base64.b64decode(text).decode('utf-8')\n return decoded_text\n\n# Main function\ndef main():\n text = \"Hello World!\"\n encoded_text = encode(text)\n print(encoded_text)\n\n decoded_text = decode(encoded_text)\n print(decoded_text)\n\nif __name__ == '__main__':\n main()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to encode and decode a given text using Base64 algorithm.\n\n### Input:\nText to encode: \"Hello World\"\n\n### Output:\nimport base64\n\n# Function to encode\ndef encode(text):\n encoded_text = base64.b64encode(text.encode('utf-8'))\n return encoded_text\n\n# Function to decode\ndef decode(text):\n decoded_text = base64.b64decode(text).decode('utf-8')\n return decoded_text\n\n# Main function\ndef main():\n text = \"Hello World!\"\n encoded_text = encode(text)\n print(encoded_text)\n\n decoded_text = decode(encoded_text)\n print(decoded_text)\n\nif __name__ == '__main__':\n main()"}
{"instruction":"Create a basic Python application to fetch data from an SQL database and display it in the console.","input":"Not applicable","output":"import sqlite3\n\nconn = sqlite3.connect('example.db')\n\ncursor = conn.cursor()\n\ncursor.execute('SELECT * FROM users')\nrows = cursor.fetchall()\n\nfor row in rows:\n print(row)\n\nconn.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Python application to fetch data from an SQL database and display it in the console.\n\n### Input:\nNot applicable\n\n### Output:\nimport sqlite3\n\nconn = sqlite3.connect('example.db')\n\ncursor = conn.cursor()\n\ncursor.execute('SELECT * FROM users')\nrows = cursor.fetchall()\n\nfor row in rows:\n print(row)\n\nconn.close()"}
{"instruction":"Write a Python program that checks for a palindrome.","input":"","output":"def is_palindrome(s):\n    s = s.lower().replace(\" \", \"\")\n    l = len(s)\n    for i in range(l \/\/ 2):\n        if s[i] != s[l-1-i]:\n            return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that checks for a palindrome.\n\n### Input:\n\n\n### Output:\ndef is_palindrome(s):\n    s = s.lower().replace(\" \", \"\")\n    l = len(s)\n    for i in range(l \/\/ 2):\n        if s[i] != s[l-1-i]:\n            return False\n    return True"}
{"instruction":"Suggest a data structure to store a set of student scores in order to sort them quickly by student name.","input":"","output":"A dictionary would be the ideal data structure for this situation. The student names could be used as keys, and the scores can be stored as values. Using Python, the scores can then be sorted by the student names using the built-in sorted() function.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a data structure to store a set of student scores in order to sort them quickly by student name.\n\n### Input:\n\n\n### Output:\nA dictionary would be the ideal data structure for this situation. The student names could be used as keys, and the scores can be stored as values. Using Python, the scores can then be sorted by the student names using the built-in sorted() function."}
{"instruction":"Create a Python function for computing the Factorial of a number.","input":"6","output":"def factorial(n):\n   if n == 0:\n      return 1\n   else:\n      return n * factorial(n-1)\n\nprint(factorial(6))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function for computing the Factorial of a number.\n\n### Input:\n6\n\n### Output:\ndef factorial(n):\n   if n == 0:\n      return 1\n   else:\n      return n * factorial(n-1)\n\nprint(factorial(6))"}
{"instruction":"Create a Python program to compute the greatest common divisor (GCD) for two given numbers.","input":"24 and 32","output":"def gcd(x, y):\n \n    # Using Euclidean algorithm \n    while(y): \n        x, y = y, x % y \n  \n    return x \n  \n# Driver Code \na = 24\nb = 32\n  \ngcd = gcd(a, b) \nprint(\"GCD of\", a, \"and\", b, \"is:\", gcd)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to compute the greatest common divisor (GCD) for two given numbers.\n\n### Input:\n24 and 32\n\n### Output:\ndef gcd(x, y):\n \n    # Using Euclidean algorithm \n    while(y): \n        x, y = y, x % y \n  \n    return x \n  \n# Driver Code \na = 24\nb = 32\n  \ngcd = gcd(a, b) \nprint(\"GCD of\", a, \"and\", b, \"is:\", gcd)"}
{"instruction":"Create a program that will generate random sequence of words.","input":"","output":"import random\n\ndef generate_random_words(n):\n    words = [\"hello\", \"world\", \"foobar\", \"python\", \"code\"]\n    output = \"\"\n\n    for _ in range(n):\n        output += random.choice(words)\n        output += \" \"\n\n    return output[:-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that will generate random sequence of words.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_random_words(n):\n    words = [\"hello\", \"world\", \"foobar\", \"python\", \"code\"]\n    output = \"\"\n\n    for _ in range(n):\n        output += random.choice(words)\n        output += \" \"\n\n    return output[:-1]"}
{"instruction":"Write a function in Python to convert a given list of strings to a list of integers.","input":"","output":"def convert_to_integers(lst):\n    return [int(i) for i in lst]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to convert a given list of strings to a list of integers.\n\n### Input:\n\n\n### Output:\ndef convert_to_integers(lst):\n    return [int(i) for i in lst]"}
{"instruction":"Generate a Python program which reads a string as input and removes all vowels present in the string and print out the revised string.","input":"apple","output":"def removeVowels(string): \n    vowels = ('a', 'e', 'i', 'o', 'u')  \n    revised_string = \"\"\n    for letter in string:\n        if letter.lower() not in vowels:\n            revised_string += letter \n    return revised_string\n    \nstring = \"apple\"\nreviseString = removeVowels(string)\nprint(\"Revised string =\", reviseString)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program which reads a string as input and removes all vowels present in the string and print out the revised string.\n\n### Input:\napple\n\n### Output:\ndef removeVowels(string): \n    vowels = ('a', 'e', 'i', 'o', 'u')  \n    revised_string = \"\"\n    for letter in string:\n        if letter.lower() not in vowels:\n            revised_string += letter \n    return revised_string\n    \nstring = \"apple\"\nreviseString = removeVowels(string)\nprint(\"Revised string =\", reviseString)"}
{"instruction":"Generate a Python program to edit a given string such that it reverses the words in the string.","input":"string = 'This is a string'","output":"def reverse_words(string):\n    words = string.split(' ')\n    reversed_words = words[::-1]\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to edit a given string such that it reverses the words in the string.\n\n### Input:\nstring = 'This is a string'\n\n### Output:\ndef reverse_words(string):\n    words = string.split(' ')\n    reversed_words = words[::-1]\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string"}
{"instruction":"Create and solve a traveling salesman problem using Python.","input":"","output":"import networkx as nx\n\ndef solve_tsp(G):\n    dist_matrix = {frozenset({v,w}):G[v][w]['weight'] for v in G for w in G}    \n    return nx.algorithms.tournament.tsp.solve_tsp(G, dist_matrix)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate and solve a traveling salesman problem using Python.\n\n### Input:\n\n\n### Output:\nimport networkx as nx\n\ndef solve_tsp(G):\n    dist_matrix = {frozenset({v,w}):G[v][w]['weight'] for v in G for w in G}    \n    return nx.algorithms.tournament.tsp.solve_tsp(G, dist_matrix)"}
{"instruction":"Generate a class in Python that contains a dictionary to store student name and their grades.","input":"","output":"class StudentGrades: \n    def __init__(self): \n        self.student_grades = {} \n  \n    def store_grade(self, student_name, grade): \n        self.student_grades[student_name] = grade \n  \n    def get_grade(self, student_name): \n        return self.student_grades.get(student_name)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a class in Python that contains a dictionary to store student name and their grades.\n\n### Input:\n\n\n### Output:\nclass StudentGrades: \n    def __init__(self): \n        self.student_grades = {} \n  \n    def store_grade(self, student_name, grade): \n        self.student_grades[student_name] = grade \n  \n    def get_grade(self, student_name): \n        return self.student_grades.get(student_name)"}
{"instruction":"Create a Python script to generate a report of top 5 companies by total revenue.","input":"List of current companies with their respective revenue and profit information","output":"import pandas as pd\n\n# Read the input data\ndf = pd.read_csv('company_data.csv')\n\n# Select the top 5 companies by total revenue\ntop_5 = df.sort_values(by='revenue', ascending=False).head(5)\n\n# Generate the report\nprint(\"Top 5 Companies by Total Revenue\")\nprint(\"-------------------------------\")\nfor index, row in top_5.iterrows():\n print(\"Company name: {}, Total Revenue: {:.2f}, Total Profit: {:.2f}\".format(\n row['name'], row['revenue'], row['profit']\n ))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate a report of top 5 companies by total revenue.\n\n### Input:\nList of current companies with their respective revenue and profit information\n\n### Output:\nimport pandas as pd\n\n# Read the input data\ndf = pd.read_csv('company_data.csv')\n\n# Select the top 5 companies by total revenue\ntop_5 = df.sort_values(by='revenue', ascending=False).head(5)\n\n# Generate the report\nprint(\"Top 5 Companies by Total Revenue\")\nprint(\"-------------------------------\")\nfor index, row in top_5.iterrows():\n print(\"Company name: {}, Total Revenue: {:.2f}, Total Profit: {:.2f}\".format(\n row['name'], row['revenue'], row['profit']\n ))"}
{"instruction":"Create an optimized sorting alogirthm in Python.","input":"unsorted_list = [5, 2, 3, 1, 4]","output":"def optimized_sort(unsorted_list):\n    length = len(unsorted_list)\n    for i in range(length):\n        min_index = i\n        for j in range(i+1, length):\n            if unsorted_list[j] < unsorted_list[min_index]: \n                min_index = j\n                \n        unsorted_list[i], unsorted_list[min_index] = unsorted_list[min_index], unsorted_list[i] \n    \n    return unsorted_list\n\nsorted_list = optimized_sort(unsorted_list)\nprint(sorted_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an optimized sorting alogirthm in Python.\n\n### Input:\nunsorted_list = [5, 2, 3, 1, 4]\n\n### Output:\ndef optimized_sort(unsorted_list):\n    length = len(unsorted_list)\n    for i in range(length):\n        min_index = i\n        for j in range(i+1, length):\n            if unsorted_list[j] < unsorted_list[min_index]: \n                min_index = j\n                \n        unsorted_list[i], unsorted_list[min_index] = unsorted_list[min_index], unsorted_list[i] \n    \n    return unsorted_list\n\nsorted_list = optimized_sort(unsorted_list)\nprint(sorted_list)"}
{"instruction":"Create a desktop application in Python to store passwords with authentication.","input":"","output":"# Import relevant libraries\nimport tkinter as tk \nimport hashlib\n\n# Create the main window \nroot = tk.Tk()\nroot.title('Password Manager')\n\n# Create a secure password database\npassword_storage = {}\n\n# Create a function for hashing the password\ndef hash_password(password):\n  hashed_password = hashlib.sha256(password.encode('utf-8')).hexdigest()\n  return hashed_password\n\n# Create an authentication system to prompt the user to enter a username and password\ndef authenticate():\n  username_entry = tk.Entry(root) \n  username_entry.pack()\n\n  password_entry = tk.Entry(root, show=\"*\") \n  password_entry.pack()\n\n  def authenticate_user():\n    username = username_entry.get()\n    password = password_entry.get()\n    hashed_password = hash_password(password)\n    if username in password_storage and password_storage[username] == hashed_password:\n      print('Authenticated!')\n    else:\n      print('Incorrect')\n  tk.Button(root, text='Authenticate', command=authenticate_user).pack()\n\n# Call the authenticate function\nauthenticate()\n\nroot.mainloop()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a desktop application in Python to store passwords with authentication.\n\n### Input:\n\n\n### Output:\n# Import relevant libraries\nimport tkinter as tk \nimport hashlib\n\n# Create the main window \nroot = tk.Tk()\nroot.title('Password Manager')\n\n# Create a secure password database\npassword_storage = {}\n\n# Create a function for hashing the password\ndef hash_password(password):\n  hashed_password = hashlib.sha256(password.encode('utf-8')).hexdigest()\n  return hashed_password\n\n# Create an authentication system to prompt the user to enter a username and password\ndef authenticate():\n  username_entry = tk.Entry(root) \n  username_entry.pack()\n\n  password_entry = tk.Entry(root, show=\"*\") \n  password_entry.pack()\n\n  def authenticate_user():\n    username = username_entry.get()\n    password = password_entry.get()\n    hashed_password = hash_password(password)\n    if username in password_storage and password_storage[username] == hashed_password:\n      print('Authenticated!')\n    else:\n      print('Incorrect')\n  tk.Button(root, text='Authenticate', command=authenticate_user).pack()\n\n# Call the authenticate function\nauthenticate()\n\nroot.mainloop()"}
{"instruction":"Create a K-Means Clustering algorithm in Python.","input":"","output":"# Import KMeans\nfrom sklearn.cluster import KMeans\n\n# Create KMeans object\nkmeans = KMeans(n_clusters=3, random_state=0)\n\n# Train the model\nkmeans.fit(X)\n\n# Get the labels\nlabels = kmeans.labels_\n\n# Get the cluster centroids\ncentroids = kmeans.cluster_centers_","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a K-Means Clustering algorithm in Python.\n\n### Input:\n\n\n### Output:\n# Import KMeans\nfrom sklearn.cluster import KMeans\n\n# Create KMeans object\nkmeans = KMeans(n_clusters=3, random_state=0)\n\n# Train the model\nkmeans.fit(X)\n\n# Get the labels\nlabels = kmeans.labels_\n\n# Get the cluster centroids\ncentroids = kmeans.cluster_centers_"}
{"instruction":"Write Python code to print the number present in an inputted string.","input":"string_1 = \"The temperature is 24 degrees Celsius\"","output":"def print_numbers_in_string(string):\n    numbers = [int(s) for s in string.split() if s.isdigit()]\n    print(numbers)\n\nstring_1 = \"The temperature is 24 degrees Celsius\"\nprint_numbers_in_string(string_1)\n\n# Output\n# [24]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to print the number present in an inputted string.\n\n### Input:\nstring_1 = \"The temperature is 24 degrees Celsius\"\n\n### Output:\ndef print_numbers_in_string(string):\n    numbers = [int(s) for s in string.split() if s.isdigit()]\n    print(numbers)\n\nstring_1 = \"The temperature is 24 degrees Celsius\"\nprint_numbers_in_string(string_1)\n\n# Output\n# [24]"}
{"instruction":"Design a data structure in Python to store a sequence of integers that supports deleting the median of the sequence in O(n) time.","input":"","output":"class MedianSequence:\n    def __init__(self):\n        self.nums = []\n        \n    def __len__(self):\n        return len(self.nums)\n        \n    def add(self, num):\n        self.nums.append(num)\n        self.nums.sort()\n        \n    def remove_median(self):\n        mid = len(self.nums) \/\/ 2\n        self.nums.pop(mid)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a data structure in Python to store a sequence of integers that supports deleting the median of the sequence in O(n) time.\n\n### Input:\n\n\n### Output:\nclass MedianSequence:\n    def __init__(self):\n        self.nums = []\n        \n    def __len__(self):\n        return len(self.nums)\n        \n    def add(self, num):\n        self.nums.append(num)\n        self.nums.sort()\n        \n    def remove_median(self):\n        mid = len(self.nums) \/\/ 2\n        self.nums.pop(mid)"}
{"instruction":"Create a Python script that produces a bar chart of the top 10 global languages.","input":"","output":"import matplotlib.pyplot as plt\n \n# Data to plot\nlanguages = ['English', 'Chinese', 'Hindi', 'Spanish', \n             'Arabic', 'Portuguese', 'Russian', 'Japanese', \n             'German', 'French']\ncounts = [1.25, 1.21, 0.558, 0.455, 0.347, 0.336, 0.310, \n          0.282, 0.242, 0.220]\n \n# Generate the bar chart\nplt.bar(languages, counts, align='center', color='green', alpha=0.5)\nplt.title('Top 10 Global Languages')\nplt.xlabel('Language')\nplt.ylabel('Number of Speakers (in billions)')\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that produces a bar chart of the top 10 global languages.\n\n### Input:\n\n\n### Output:\nimport matplotlib.pyplot as plt\n \n# Data to plot\nlanguages = ['English', 'Chinese', 'Hindi', 'Spanish', \n             'Arabic', 'Portuguese', 'Russian', 'Japanese', \n             'German', 'French']\ncounts = [1.25, 1.21, 0.558, 0.455, 0.347, 0.336, 0.310, \n          0.282, 0.242, 0.220]\n \n# Generate the bar chart\nplt.bar(languages, counts, align='center', color='green', alpha=0.5)\nplt.title('Top 10 Global Languages')\nplt.xlabel('Language')\nplt.ylabel('Number of Speakers (in billions)')\nplt.show()"}
{"instruction":"Generate a Python class for a Person that has methods and attributes to work with names and ages.","input":"","output":"class Person:\n def __init__(self, name, age):\n   self.name = name\n   self.age = age\n\n def get_name(self):\n   return self.name\n\n def get_age(self):\n   return self.age\n\n def set_name(self, name):\n   self.name = name\n\n def set_age(self, age):\n   self.age = age","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class for a Person that has methods and attributes to work with names and ages.\n\n### Input:\n\n\n### Output:\nclass Person:\n def __init__(self, name, age):\n   self.name = name\n   self.age = age\n\n def get_name(self):\n   return self.name\n\n def get_age(self):\n   return self.age\n\n def set_name(self, name):\n   self.name = name\n\n def set_age(self, age):\n   self.age = age"}
{"instruction":"Create a Python program which prints the top three elements in a given list","input":"[10, 4, 45, 34, 99, 24, 10]","output":"def top_three(list):\n    sorted_list = sorted(list, reverse = True) \n    return sorted_list[:3]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program which prints the top three elements in a given list\n\n### Input:\n[10, 4, 45, 34, 99, 24, 10]\n\n### Output:\ndef top_three(list):\n    sorted_list = sorted(list, reverse = True) \n    return sorted_list[:3]"}
{"instruction":"Design a Python program to classify text data into three groups: Positive, Neutral and Negative based on the sentiment scores.","input":"The following is a text snippet: \n\n\"The conference was an incredible success. All the participants were thrilled and delighted with the outcome.\"","output":"import nltk\n\n# Load the text\ntext = \"The conference was an incredible success. All the participants were thrilled and delighted with the outcome.\"\n\n# Tokenize the text\ntokens = nltk.word_tokenize(text)\n\n# Add sentiment scores to each token\nscores = [0.8, 0.7, 0.7, 0.5, 0.6, 0.9, 0.2, 0.3, 0.8, 0.9, 0.9, 0.6]\n\n# Create groups based on the sentiment scores\npositive_words = list(filter(lambda x: x[1] > 0.6, zip(tokens, scores)))\nneutral_words = list(filter(lambda x: 0.3 <= x[1] <= 0.6, zip(tokens, scores)))\nnegative_words = list(filter(lambda x: x[1] < 0.3, zip(tokens, scores)))\n\n# Print the group results\nprint('Positive words:')\nfor word in positive_words:\n print(word[0])\n\nprint('\\nNeutral words:')\nfor word in neutral_words:\n print(word[0])\n\nprint('\\nNegative words:')\nfor word in negative_words:\n print(word[0])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to classify text data into three groups: Positive, Neutral and Negative based on the sentiment scores.\n\n### Input:\nThe following is a text snippet: \n\n\"The conference was an incredible success. All the participants were thrilled and delighted with the outcome.\"\n\n### Output:\nimport nltk\n\n# Load the text\ntext = \"The conference was an incredible success. All the participants were thrilled and delighted with the outcome.\"\n\n# Tokenize the text\ntokens = nltk.word_tokenize(text)\n\n# Add sentiment scores to each token\nscores = [0.8, 0.7, 0.7, 0.5, 0.6, 0.9, 0.2, 0.3, 0.8, 0.9, 0.9, 0.6]\n\n# Create groups based on the sentiment scores\npositive_words = list(filter(lambda x: x[1] > 0.6, zip(tokens, scores)))\nneutral_words = list(filter(lambda x: 0.3 <= x[1] <= 0.6, zip(tokens, scores)))\nnegative_words = list(filter(lambda x: x[1] < 0.3, zip(tokens, scores)))\n\n# Print the group results\nprint('Positive words:')\nfor word in positive_words:\n print(word[0])\n\nprint('\\nNeutral words:')\nfor word in neutral_words:\n print(word[0])\n\nprint('\\nNegative words:')\nfor word in negative_words:\n print(word[0])"}
{"instruction":"Write a code snippet in Python to print Pascal\u2019s triangle for a given value of n.","input":"4","output":"def printPascalTriangle(n) : \n    for line in range(1, n + 1) : \n        C = 1 \n        for i in range(1, line + 1) : \n            print(C, end = \"\") \n            C = int(C * (line - i) \/ i); \n        print(\"\") \n\nn = 4\nprintPascalTriangle(n)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet in Python to print Pascal\u2019s triangle for a given value of n.\n\n### Input:\n4\n\n### Output:\ndef printPascalTriangle(n) : \n    for line in range(1, n + 1) : \n        C = 1 \n        for i in range(1, line + 1) : \n            print(C, end = \"\") \n            C = int(C * (line - i) \/ i); \n        print(\"\") \n\nn = 4\nprintPascalTriangle(n)"}
{"instruction":"Implement a function to merge and sort two given sorted lists in Python.","input":"list_1 = [1, 3, 5, 6, 7]\nlist_2 = [4, 8, 9, 10]","output":"def merge_sort(list_1, list_2):\n    merged_list = list_1 + list_2\n    merged_list.sort()\n    return merged_list\n\nif __name__ == '__main__':\n    list_1 = [1, 3, 5, 6, 7]\n    list_2 = [4, 8, 9, 10]\n    print(merge_sort(list_1, list_2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function to merge and sort two given sorted lists in Python.\n\n### Input:\nlist_1 = [1, 3, 5, 6, 7]\nlist_2 = [4, 8, 9, 10]\n\n### Output:\ndef merge_sort(list_1, list_2):\n    merged_list = list_1 + list_2\n    merged_list.sort()\n    return merged_list\n\nif __name__ == '__main__':\n    list_1 = [1, 3, 5, 6, 7]\n    list_2 = [4, 8, 9, 10]\n    print(merge_sort(list_1, list_2))"}
{"instruction":"Produce a Python program to fill missing values in a given column using a nearest neighbor approach.","input":"Table \u2018users\u2019\n\n+------------+------------+----+\n| username   | first_name | age|\n+------------+------------+----+\n| user1      |  Sarah     | 18 |\n| user2      |  NULL      |NULL|\n+------------+------------+----+","output":"import pandas as pd\nimport numpy as np\n\ndef fill_missing_values(df, colname):\n\n    # get a list of all the users in the dataframe\n    users = df['username'].values.tolist()\n    \n    for i, user in enumerate(users):\n        if df[colname].isnull()[i] == True:\n            closest_neighbors = find_closest_neighbors(df, user, 3)\n            df[colname][i] = np.mean([df[colname][j] for j in closest_neighbors])\n    \n    return df\n\ndef find_closest_neighbors(df, user, k):\n    closest_neighbors = []\n    user_age = df[df.username == user].age.values[0]\n    for v in df.index:\n        if df.username[v] != user and len(closest_neighbors) < k:\n            # compute the Euclidean distance\n            dist = np.sqrt(np.abs(user_age - df.age[v])**2)\n            closest_neighbors.append((v, dist))\n    \n    closest_neighbors.sort(key=lambda x: x[1])\n    return [neighbor[0] for neighbor in closest_neighbors]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a Python program to fill missing values in a given column using a nearest neighbor approach.\n\n### Input:\nTable \u2018users\u2019\n\n+------------+------------+----+\n| username   | first_name | age|\n+------------+------------+----+\n| user1      |  Sarah     | 18 |\n| user2      |  NULL      |NULL|\n+------------+------------+----+\n\n### Output:\nimport pandas as pd\nimport numpy as np\n\ndef fill_missing_values(df, colname):\n\n    # get a list of all the users in the dataframe\n    users = df['username'].values.tolist()\n    \n    for i, user in enumerate(users):\n        if df[colname].isnull()[i] == True:\n            closest_neighbors = find_closest_neighbors(df, user, 3)\n            df[colname][i] = np.mean([df[colname][j] for j in closest_neighbors])\n    \n    return df\n\ndef find_closest_neighbors(df, user, k):\n    closest_neighbors = []\n    user_age = df[df.username == user].age.values[0]\n    for v in df.index:\n        if df.username[v] != user and len(closest_neighbors) < k:\n            # compute the Euclidean distance\n            dist = np.sqrt(np.abs(user_age - df.age[v])**2)\n            closest_neighbors.append((v, dist))\n    \n    closest_neighbors.sort(key=lambda x: x[1])\n    return [neighbor[0] for neighbor in closest_neighbors]"}
{"instruction":"Write a Python program to find the maximum number in an unsorted array without using linear search.","input":"arr = [5, 6, 4, 9, 1, 8, 2, 7, 3]","output":"def find_max_unsorted(arr):\n    max_value = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_value:\n            max_value = arr[i]\n    return max_value","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the maximum number in an unsorted array without using linear search.\n\n### Input:\narr = [5, 6, 4, 9, 1, 8, 2, 7, 3]\n\n### Output:\ndef find_max_unsorted(arr):\n    max_value = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_value:\n            max_value = arr[i]\n    return max_value"}
{"instruction":"Generate a Python program to generate a random number within a given range.","input":"","output":"def random_num(start, end):\n  return random.randint(start, end)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to generate a random number within a given range.\n\n### Input:\n\n\n### Output:\ndef random_num(start, end):\n  return random.randint(start, end)"}
{"instruction":"Generate a Python program to implement the Euclidean algorithm for finding the greatest common divisor.","input":"","output":"def gcd(a, b):\n if b == 0:\n  return a\n return gcd(b, a % b)\n\nresult = gcd(100, 12)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to implement the Euclidean algorithm for finding the greatest common divisor.\n\n### Input:\n\n\n### Output:\ndef gcd(a, b):\n if b == 0:\n  return a\n return gcd(b, a % b)\n\nresult = gcd(100, 12)\nprint(result)"}
{"instruction":"Write a python function to count the number of words in a sentence that are longer than the given length.","input":"sentence = \"This is a sample sentence\"\nlength = 4","output":"def count_long_words(sentence, length):\n    words = sentence.split()\n    count = 0\n    \n    for word in words:\n        if len(word) > length:\n            count += 1\n    return count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python function to count the number of words in a sentence that are longer than the given length.\n\n### Input:\nsentence = \"This is a sample sentence\"\nlength = 4\n\n### Output:\ndef count_long_words(sentence, length):\n    words = sentence.split()\n    count = 0\n    \n    for word in words:\n        if len(word) > length:\n            count += 1\n    return count"}
{"instruction":"Binary search is an efficient algorithm for finding an item in a sorted list of items. Develop an efficient algorithm using Python that implements a binary search.","input":"nums = [3, 4, 5, 6, 7, 8, 9]\nval = 8","output":"def binary_search(nums, val):\n    low = 0\n    high = len(nums) - 1\n    \n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if nums[mid] == val:\n            return mid\n        elif nums[mid] > val:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBinary search is an efficient algorithm for finding an item in a sorted list of items. Develop an efficient algorithm using Python that implements a binary search.\n\n### Input:\nnums = [3, 4, 5, 6, 7, 8, 9]\nval = 8\n\n### Output:\ndef binary_search(nums, val):\n    low = 0\n    high = len(nums) - 1\n    \n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if nums[mid] == val:\n            return mid\n        elif nums[mid] > val:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1"}
{"instruction":"Write a Python program to filter out strings longer than 15 characters from a list of strings.","input":"strings = ['good', 'very good', 'excellent', 'awesome', 'extremely awesome']","output":"new_list = []\nfor string in strings:\n if len(string) <= 15:\n new_list.append(string)\n\nprint(new_list)  # prints ['good', 'very good', 'excellent', 'awesome']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to filter out strings longer than 15 characters from a list of strings.\n\n### Input:\nstrings = ['good', 'very good', 'excellent', 'awesome', 'extremely awesome']\n\n### Output:\nnew_list = []\nfor string in strings:\n if len(string) <= 15:\n new_list.append(string)\n\nprint(new_list)  # prints ['good', 'very good', 'excellent', 'awesome']"}
{"instruction":"Construct a function in Python that takes two integers, a and b, and returns their sum.","input":"","output":"def add_integers(a, b):\n    return a + b","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function in Python that takes two integers, a and b, and returns their sum.\n\n### Input:\n\n\n### Output:\ndef add_integers(a, b):\n    return a + b"}
{"instruction":"This code is a Django migration that adds a new M2M table for the 'projects_relateds' field on the 'New' model and removes the old M2M table for the 'project' field. To apply this migration, run the 'python manage.py migrate' command.","input":"","output":"# encoding: utf-8\nimport datetime\nfrom south.db import db\nfrom south.v2 import SchemaMigration\nfrom django.db import models\n\nclass Migration(SchemaMigration):\n\n    def forwards(self, orm):\n        \n        # Removing M2M table for field project on 'New'\n        db.delete_table('news_new_project')\n\n        # Adding M2M table for field projects_relateds on 'New'\n        db.create_table('news_new_projects_relateds', (\n            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),\n            ('new', models.ForeignKey(orm['news.new'], null=False)),\n            ('project', models.ForeignKey(orm['projects.project'], null=False))\n        ))\n        db.create_unique('news_new_projects_relateds', ['new_id', 'project_id'])\n\n\n    def backwards(self, orm):\n        \n        # Adding M2M table for field project on 'New'\n        db.create_table('news_new_project', (\n            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),\n            ('new', models.ForeignKey(orm['news.new'], null=False)),\n            ('project', models.ForeignKey(orm['projects.project'], null=False))\n        ))\n        db.create_unique('news_new_project', ['new_id', 'project_id'])\n\n        # Removing M2M table for field projects_relateds on 'New'\n        db.delete_table('news_new_projects_relateds')\n\n\n    models = {\n        'auth.group': {\n            'Meta': {'object_name': 'Group'},\n            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),\n            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': \"orm['auth.Permission']\", 'symmetrical': 'False', 'blank': 'True'})\n        },\n        'auth.permission': {\n            'Meta': {'ordering': \"('content_type__app_label', 'content_type__model', 'codename')\", 'unique_together': \"(('content_type', 'codename'),)\", 'object_name': 'Permission'},\n            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),\n            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['contenttypes.ContentType']\"}),\n            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})\n        },\n        'auth.user': {\n            'Meta': {'object_name': 'User'},\n            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),\n            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),\n            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),\n            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': \"orm['auth.Group']\", 'symmetrical': 'False', 'blank': 'True'}),\n            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),\n            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),\n            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),\n            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),\n            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),\n            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),\n            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': \"orm['auth.Permission']\", 'symmetrical': 'False', 'blank': 'True'}),\n            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})\n        },\n        'contenttypes.contenttype': {\n            'Meta': {'ordering': \"('name',)\", 'unique_together': \"(('app_label', 'model'),)\", 'object_name': 'ContentType', 'db_table': \"'django_content_type'\"},\n            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),\n            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),\n            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})\n        },\n        'news.new': {\n            'Meta': {'object_name': 'New'},\n            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\"}),\n            'body': ('django.db.models.fields.TextField', [], {}),\n            'datetime': ('django.db.models.fields.DateTimeField', [], {}),\n            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n            'image': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),\n            'projects_relateds': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': \"orm['projects.Project']\", 'null': 'True', 'blank': 'True'}),\n            'summary': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),\n            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'})\n        },\n        'projects.project': {\n            'Meta': {'object_name': 'Project'},\n            'description': ('django.db.models.fields.TextField', [], {}),\n            'end_date': ('django.db.models.fields.DateField', [], {'null': 'True'}),\n            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n            'logo': ('django.db.models.fields.files.ImageField', [], {'max_length': '100'}),\n            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),\n            'sponsor': ('django.db.models.fields.CharField', [], {'max_length': '100'}),\n            'start_date': ('django.db.models.fields.DateField', [], {}),\n            'status': ('django.db.models.fields.CharField', [], {'max_length': '100'})\n        }\n    }\n\n    complete_apps = ['news']\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a Django migration that adds a new M2M table for the 'projects_relateds' field on the 'New' model and removes the old M2M table for the 'project' field. To apply this migration, run the 'python manage.py migrate' command.\n\n### Input:\n\n\n### Output:\n# encoding: utf-8\nimport datetime\nfrom south.db import db\nfrom south.v2 import SchemaMigration\nfrom django.db import models\n\nclass Migration(SchemaMigration):\n\n    def forwards(self, orm):\n        \n        # Removing M2M table for field project on 'New'\n        db.delete_table('news_new_project')\n\n        # Adding M2M table for field projects_relateds on 'New'\n        db.create_table('news_new_projects_relateds', (\n            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),\n            ('new', models.ForeignKey(orm['news.new'], null=False)),\n            ('project', models.ForeignKey(orm['projects.project'], null=False))\n        ))\n        db.create_unique('news_new_projects_relateds', ['new_id', 'project_id'])\n\n\n    def backwards(self, orm):\n        \n        # Adding M2M table for field project on 'New'\n        db.create_table('news_new_project', (\n            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),\n            ('new', models.ForeignKey(orm['news.new'], null=False)),\n            ('project', models.ForeignKey(orm['projects.project'], null=False))\n        ))\n        db.create_unique('news_new_project', ['new_id', 'project_id'])\n\n        # Removing M2M table for field projects_relateds on 'New'\n        db.delete_table('news_new_projects_relateds')\n\n\n    models = {\n        'auth.group': {\n            'Meta': {'object_name': 'Group'},\n            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),\n            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': \"orm['auth.Permission']\", 'symmetrical': 'False', 'blank': 'True'})\n        },\n        'auth.permission': {\n            'Meta': {'ordering': \"('content_type__app_label', 'content_type__model', 'codename')\", 'unique_together': \"(('content_type', 'codename'),)\", 'object_name': 'Permission'},\n            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),\n            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['contenttypes.ContentType']\"}),\n            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})\n        },\n        'auth.user': {\n            'Meta': {'object_name': 'User'},\n            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),\n            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),\n            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),\n            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': \"orm['auth.Group']\", 'symmetrical': 'False', 'blank': 'True'}),\n            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),\n            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),\n            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),\n            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),\n            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),\n            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),\n            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': \"orm['auth.Permission']\", 'symmetrical': 'False', 'blank': 'True'}),\n            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})\n        },\n        'contenttypes.contenttype': {\n            'Meta': {'ordering': \"('name',)\", 'unique_together': \"(('app_label', 'model'),)\", 'object_name': 'ContentType', 'db_table': \"'django_content_type'\"},\n            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),\n            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),\n            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})\n        },\n        'news.new': {\n            'Meta': {'object_name': 'New'},\n            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['auth.User']\"}),\n            'body': ('django.db.models.fields.TextField', [], {}),\n            'datetime': ('django.db.models.fields.DateTimeField', [], {}),\n            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n            'image': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),\n            'projects_relateds': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': \"orm['projects.Project']\", 'null': 'True', 'blank': 'True'}),\n            'summary': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),\n            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'})\n        },\n        'projects.project': {\n            'Meta': {'object_name': 'Project'},\n            'description': ('django.db.models.fields.TextField', [], {}),\n            'end_date': ('django.db.models.fields.DateField', [], {'null': 'True'}),\n            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n            'logo': ('django.db.models.fields.files.ImageField', [], {'max_length': '100'}),\n            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),\n            'sponsor': ('django.db.models.fields.CharField', [], {'max_length': '100'}),\n            'start_date': ('django.db.models.fields.DateField', [], {}),\n            'status': ('django.db.models.fields.CharField', [], {'max_length': '100'})\n        }\n    }\n\n    complete_apps = ['news']\n"}
{"instruction":"Python Script to normalize a list of numbers.","input":"[-1, 0.2, 5.66, -2.344, 0]","output":"def normalize(numbers):\n  min_num = min(numbers)\n  max_num = max(numbers)\n\n  for i in range(0, len(numbers)):\n    numbers[i] = (numbers[i] - min_num) \/ (max_num - min_num)\n\n  return numbers\n\nprint(normalize([-1, 0.2, 5.66, -2.344, 0]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPython Script to normalize a list of numbers.\n\n### Input:\n[-1, 0.2, 5.66, -2.344, 0]\n\n### Output:\ndef normalize(numbers):\n  min_num = min(numbers)\n  max_num = max(numbers)\n\n  for i in range(0, len(numbers)):\n    numbers[i] = (numbers[i] - min_num) \/ (max_num - min_num)\n\n  return numbers\n\nprint(normalize([-1, 0.2, 5.66, -2.344, 0]))"}
{"instruction":"Write Python code to wrap words that exceed a maximum line length of 15 characters.","input":"This is a string with some long words.","output":"def wrap_words(text):\n    words = text.split(' ')\n    line_length = 15\n    new_text = ''\n    line = ''\n    for word in words:\n        if len(line + word) > line_length:\n            new_text += line + '\\n'\n            line = word + ' '\n        else:\n            line += word + ' '\n    new_text += line\n    return new_text\n\noriginal_text = 'This is a string with some long words.'\nwrapped_text = wrap_words(original_text)\nprint(wrapped_text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to wrap words that exceed a maximum line length of 15 characters.\n\n### Input:\nThis is a string with some long words.\n\n### Output:\ndef wrap_words(text):\n    words = text.split(' ')\n    line_length = 15\n    new_text = ''\n    line = ''\n    for word in words:\n        if len(line + word) > line_length:\n            new_text += line + '\\n'\n            line = word + ' '\n        else:\n            line += word + ' '\n    new_text += line\n    return new_text\n\noriginal_text = 'This is a string with some long words.'\nwrapped_text = wrap_words(original_text)\nprint(wrapped_text)"}
{"instruction":"Generate a Python program using a list comprehension that takes a 2D list of integers and computes the sum of integers at each row.","input":"[[1, 2, 3], [4, 5, 6], [7, 8, 9]]","output":"total_row_sum = [sum(row) for row in [[1, 2, 3], [4, 5, 6], [7, 8, 9]]]\n\nprint(total_row_sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program using a list comprehension that takes a 2D list of integers and computes the sum of integers at each row.\n\n### Input:\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n### Output:\ntotal_row_sum = [sum(row) for row in [[1, 2, 3], [4, 5, 6], [7, 8, 9]]]\n\nprint(total_row_sum)"}
{"instruction":"Develop an algorithm in Python for predicting the motion of a particle.","input":"Not applicable","output":"import numpy as np\n\ndef predict_motion(pos, vel, acc, dt):\n  # predict position\n  pos_pred = pos + vel * dt + 0.5 * acc * dt ** 2 \n  \n  #predict velocity\n  vel_pred = vel + acc * dt\n  \n  return pos_pred, vel_pred\n\n# test code\npos = np.array([0.0, 0.0])\nvel = np.array([1.0, 1.0])\nacc = np.array([1.0, 0.0])\ndt = 0.1\npos_pred, vel_pred = predict_motion(pos, vel, acc, dt)\nprint(pos_pred, vel_pred)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python for predicting the motion of a particle.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\n\ndef predict_motion(pos, vel, acc, dt):\n  # predict position\n  pos_pred = pos + vel * dt + 0.5 * acc * dt ** 2 \n  \n  #predict velocity\n  vel_pred = vel + acc * dt\n  \n  return pos_pred, vel_pred\n\n# test code\npos = np.array([0.0, 0.0])\nvel = np.array([1.0, 1.0])\nacc = np.array([1.0, 0.0])\ndt = 0.1\npos_pred, vel_pred = predict_motion(pos, vel, acc, dt)\nprint(pos_pred, vel_pred)"}
{"instruction":"Edit this python code to remove all even numbers from a given list.","input":"my_list = [1,2,3,4,5,6,7,8,9,10]","output":"\"\"\"\nEdit this python code to remove all even numbers from a given list.\n\"\"\"\n\nmy_list = [1,2,3,4,5,6,7,8,9,10]\n\n# Use a list comprehension to remove even numbers\nmy_list = [i for i in my_list if i % 2 != 0]\n \nprint(my_list) # [1, 3, 5, 7, 9]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit this python code to remove all even numbers from a given list.\n\n### Input:\nmy_list = [1,2,3,4,5,6,7,8,9,10]\n\n### Output:\n\"\"\"\nEdit this python code to remove all even numbers from a given list.\n\"\"\"\n\nmy_list = [1,2,3,4,5,6,7,8,9,10]\n\n# Use a list comprehension to remove even numbers\nmy_list = [i for i in my_list if i % 2 != 0]\n \nprint(my_list) # [1, 3, 5, 7, 9]"}
{"instruction":"Create a Python program to check if a list is sorted in ascending order.","input":"listA = [1, 5, 9, 10]","output":"def isListAscending(listA): \n    return all(listA[i] <= listA[i+1] for i in range(len(listA)-1)) \n\n# Driver code \nlistA = [1, 5, 9, 10] \n# listA = [10, 9, 5, 1] \n\n# Print result \nprint(isListAscending(listA))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to check if a list is sorted in ascending order.\n\n### Input:\nlistA = [1, 5, 9, 10]\n\n### Output:\ndef isListAscending(listA): \n    return all(listA[i] <= listA[i+1] for i in range(len(listA)-1)) \n\n# Driver code \nlistA = [1, 5, 9, 10] \n# listA = [10, 9, 5, 1] \n\n# Print result \nprint(isListAscending(listA))"}
{"instruction":"Implement an algorithm in Python that can calculate the maximum path sum from the given tree.","input":"# tree structure\nroot = BinaryTreeNode(10)\nroot.left = BinaryTreeNode(5)\nroot.right = BinaryTreeNode(20)\nroot.left.left = BinaryTreeNode(2)\nroot.left.right = BinaryTreeNode(11)\nroot.right.left = BinaryTreeNode(15)\nroot.right.right = BinaryTreeNode(40)","output":"def max_path_sum(root):\n    if not root:\n        return 0\n\n    left_sum = max_path_sum(root.left)\n    right_sum = max_path_sum(root.right)\n\n    max_single_val = max(max(left_sum, right_sum) + root.data, root.data)\n\n    max_top = max(max_single_val, left_sum + root.data + right_sum)\n\n    max_path_sum.res = max(max_path_sum.res, max_top)\n\n    return max_single_val\n\nmax_path_sum.res = float('-inf')\nmax_path_sum(root)\nprint (max_path_sum.res)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm in Python that can calculate the maximum path sum from the given tree.\n\n### Input:\n# tree structure\nroot = BinaryTreeNode(10)\nroot.left = BinaryTreeNode(5)\nroot.right = BinaryTreeNode(20)\nroot.left.left = BinaryTreeNode(2)\nroot.left.right = BinaryTreeNode(11)\nroot.right.left = BinaryTreeNode(15)\nroot.right.right = BinaryTreeNode(40)\n\n### Output:\ndef max_path_sum(root):\n    if not root:\n        return 0\n\n    left_sum = max_path_sum(root.left)\n    right_sum = max_path_sum(root.right)\n\n    max_single_val = max(max(left_sum, right_sum) + root.data, root.data)\n\n    max_top = max(max_single_val, left_sum + root.data + right_sum)\n\n    max_path_sum.res = max(max_path_sum.res, max_top)\n\n    return max_single_val\n\nmax_path_sum.res = float('-inf')\nmax_path_sum(root)\nprint (max_path_sum.res)"}
{"instruction":"Create a machine learning algorithm in Python to classify a given dataset.","input":"Dataset for classification","output":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.20)\n\nfrom sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(x_train, y_train)\npredictions = clf.predict(x_test)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning algorithm in Python to classify a given dataset.\n\n### Input:\nDataset for classification\n\n### Output:\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.20)\n\nfrom sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(x_train, y_train)\npredictions = clf.predict(x_test)"}
{"instruction":"Create a python function that takes a string of characters as input and checks if it is a valid identifier.","input":"name = \"myVar\"","output":"import string\n\ndef isValidIdentifier(name):\n    validChar = string.ascii_letters + \"_\"\n    if name[0] not in string.ascii_letters:\n        return False\n    for char in name[1:]:\n        if char not in validChar:\n            return False\n            \n    return True\n\nvalidResult = isValidIdentifier(name)\nprint(validResult)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function that takes a string of characters as input and checks if it is a valid identifier.\n\n### Input:\nname = \"myVar\"\n\n### Output:\nimport string\n\ndef isValidIdentifier(name):\n    validChar = string.ascii_letters + \"_\"\n    if name[0] not in string.ascii_letters:\n        return False\n    for char in name[1:]:\n        if char not in validChar:\n            return False\n            \n    return True\n\nvalidResult = isValidIdentifier(name)\nprint(validResult)"}
{"instruction":"Given a list of integers, write a Python program to print the latest 3 largest numbers.","input":"[5, 1, 10, 25, 74, 17, 2]","output":"def print_largest_three_numbers(numbers): \n    numbers.sort(reverse=True) \n    print(*numbers[:3], sep = \", \") \n\nprint_largest_three_numbers([5, 1, 10, 25, 74, 17, 2])\n\nOutput:\n74, 25, 17","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integers, write a Python program to print the latest 3 largest numbers.\n\n### Input:\n[5, 1, 10, 25, 74, 17, 2]\n\n### Output:\ndef print_largest_three_numbers(numbers): \n    numbers.sort(reverse=True) \n    print(*numbers[:3], sep = \", \") \n\nprint_largest_three_numbers([5, 1, 10, 25, 74, 17, 2])\n\nOutput:\n74, 25, 17"}
{"instruction":"Create a hashmap data structure in Python that stores keys and values.","input":"","output":"my_dict = {}\n\n# Adding key-value pairs\nmy_dict['a'] = 'apple'\nmy_dict['b'] = 'banana'\nmy_dict['c'] = 'cat'\n\n# Retrieving values\napple = my_dict['a']\nbanana = my_dict['b']\ncat = my_dict['c']\n\nprint(apple, banana, cat)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a hashmap data structure in Python that stores keys and values.\n\n### Input:\n\n\n### Output:\nmy_dict = {}\n\n# Adding key-value pairs\nmy_dict['a'] = 'apple'\nmy_dict['b'] = 'banana'\nmy_dict['c'] = 'cat'\n\n# Retrieving values\napple = my_dict['a']\nbanana = my_dict['b']\ncat = my_dict['c']\n\nprint(apple, banana, cat)"}
{"instruction":"Create a Python program that classifies a given sentence as positive, neutral, or negative.","input":"The movie was really terrible.","output":"def predict_sentiment(sentence): \n    pred = model.predict([sentence])\n    if pred[0] == 0:\n        print(\"Negative sentiment\")\n    elif pred[0] == 1: \n        print(\"Neutral sentiment\")\n    else:\n        print(\"Positive sentiment\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that classifies a given sentence as positive, neutral, or negative.\n\n### Input:\nThe movie was really terrible.\n\n### Output:\ndef predict_sentiment(sentence): \n    pred = model.predict([sentence])\n    if pred[0] == 0:\n        print(\"Negative sentiment\")\n    elif pred[0] == 1: \n        print(\"Neutral sentiment\")\n    else:\n        print(\"Positive sentiment\")"}
{"instruction":"Generate a Python program to transform a given list of integers into a dictionary with each list element as the key and its square root as the value.","input":"[4, 9, 16, 25]","output":"def to_dict(lst): \n    # Initialize a new dictionary \n    new_dict = {}\n      \n    # Iterate over the list and assign the square root of each element as value  \n    for item in lst:\n        new_dict[item] = item**0.5\n      \n    # Return the dictionary  \n    return new_dict","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to transform a given list of integers into a dictionary with each list element as the key and its square root as the value.\n\n### Input:\n[4, 9, 16, 25]\n\n### Output:\ndef to_dict(lst): \n    # Initialize a new dictionary \n    new_dict = {}\n      \n    # Iterate over the list and assign the square root of each element as value  \n    for item in lst:\n        new_dict[item] = item**0.5\n      \n    # Return the dictionary  \n    return new_dict"}
{"instruction":"Create a program in Python to generate a Random Password of length 8 characters, which contains at least one of each character type (lowercase, uppercase, digits, special characters).","input":"Not applicable","output":"import string\nimport random\n\n# length of password\nlength = 8\n\n# special characters\nspecial_characters = \"!#$%&'()*+,-.\/:;<=>?@[\\]^_`{|}~\"\n\n# generating password\npassword = random.choice(string.ascii_lowercase)\npassword += random.choice(string.ascii_uppercase)\npassword += random.choice(string.digits)\npassword += random.choice(special_characters)\n\nfor i in range(length):\n   password += random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits + special_characters)\n\npassword  = ''.join(random.sample(password,len(password)))\n\nprint (\"Password is: \", password)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to generate a Random Password of length 8 characters, which contains at least one of each character type (lowercase, uppercase, digits, special characters).\n\n### Input:\nNot applicable\n\n### Output:\nimport string\nimport random\n\n# length of password\nlength = 8\n\n# special characters\nspecial_characters = \"!#$%&'()*+,-.\/:;<=>?@[\\]^_`{|}~\"\n\n# generating password\npassword = random.choice(string.ascii_lowercase)\npassword += random.choice(string.ascii_uppercase)\npassword += random.choice(string.digits)\npassword += random.choice(special_characters)\n\nfor i in range(length):\n   password += random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits + special_characters)\n\npassword  = ''.join(random.sample(password,len(password)))\n\nprint (\"Password is: \", password)"}
{"instruction":"Write a Bash script for automating the process of deploying a Django app to an AWS EC2 instance.","input":"Not applicable","output":"#!\/bin\/bash\n\n# SSH to EC2 instance\nssh -i <KeyPair>.pem ubuntu@<EC2_Public_IP>\n\n# Update the packages installed\nsudo apt-get update\n\n# Install docker\nsudo apt-get install docker.io docker-compose\n\n# Clone the source code\ngit clone <Git_Repo_URL> app\n\n# Build docker image\ncd app\ndocker-compose up -d --build\n\n# Migrate database\ndocker-compose run web python manage.py migrate\n\n# Run the Django server\ndocker-compose run web python manage.py runserver 0.0.0.0:8000","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Bash script for automating the process of deploying a Django app to an AWS EC2 instance.\n\n### Input:\nNot applicable\n\n### Output:\n#!\/bin\/bash\n\n# SSH to EC2 instance\nssh -i <KeyPair>.pem ubuntu@<EC2_Public_IP>\n\n# Update the packages installed\nsudo apt-get update\n\n# Install docker\nsudo apt-get install docker.io docker-compose\n\n# Clone the source code\ngit clone <Git_Repo_URL> app\n\n# Build docker image\ncd app\ndocker-compose up -d --build\n\n# Migrate database\ndocker-compose run web python manage.py migrate\n\n# Run the Django server\ndocker-compose run web python manage.py runserver 0.0.0.0:8000"}
{"instruction":"Find the Fibonacci sequence of a given number using a Python program.","input":"var n = 10;","output":"def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\")\n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2) \n\n# Driver Program \nprint(Fibonacci(n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the Fibonacci sequence of a given number using a Python program.\n\n### Input:\nvar n = 10;\n\n### Output:\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\")\n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2) \n\n# Driver Program \nprint(Fibonacci(n))"}
{"instruction":"Build a Python class to represent a math vector in 3D space.","input":"","output":"class Vector3D: \n    def __init__(self, x, y, z): \n        self.x = x \n        self.y = y \n        self.z = z \n\n    def magnitude(self): \n        return (self.x**2 + self.y**2 + self.z**2)**0.5 \n  \n    def normalize(self): \n        magnitude = self.magnitude() \n        self.x \/= magnitude \n        self.y \/= magnitude \n        self.z \/= magnitude","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python class to represent a math vector in 3D space.\n\n### Input:\n\n\n### Output:\nclass Vector3D: \n    def __init__(self, x, y, z): \n        self.x = x \n        self.y = y \n        self.z = z \n\n    def magnitude(self): \n        return (self.x**2 + self.y**2 + self.z**2)**0.5 \n  \n    def normalize(self): \n        magnitude = self.magnitude() \n        self.x \/= magnitude \n        self.y \/= magnitude \n        self.z \/= magnitude"}
{"instruction":"Generate a list of integers from 1 to 10 using a for loop in Python.","input":"","output":"nums = []\nfor i in range(1, 11): \n    nums.append(i)\nprint(nums)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of integers from 1 to 10 using a for loop in Python.\n\n### Input:\n\n\n### Output:\nnums = []\nfor i in range(1, 11): \n    nums.append(i)\nprint(nums)"}
{"instruction":"Create an algorithm in Python to generate the first n elements of the Sierpinski triangle.","input":"n = 6","output":"def sierpinski_triangle(n): \n    # Drawing lines for first row \n    for i in range(2**n): \n        print(' ', end=\" \") \n    \n    # loop for printing n rows \n    for i in range(1, n+1): \n        # bit pattern for first and \n        # last line of each row \n        for j in range(2**(i-1), 2**i): \n            print('1', end=\" \") \n        print() \n        \n        # inner rows have opposite bit pattern \n        if i > 1: \n            for j in range(2**(i-1)+1, 2**i-1):  \n                print('0', end=\" \") \n            print() \n       \nsierpinski_triangle(6)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to generate the first n elements of the Sierpinski triangle.\n\n### Input:\nn = 6\n\n### Output:\ndef sierpinski_triangle(n): \n    # Drawing lines for first row \n    for i in range(2**n): \n        print(' ', end=\" \") \n    \n    # loop for printing n rows \n    for i in range(1, n+1): \n        # bit pattern for first and \n        # last line of each row \n        for j in range(2**(i-1), 2**i): \n            print('1', end=\" \") \n        print() \n        \n        # inner rows have opposite bit pattern \n        if i > 1: \n            for j in range(2**(i-1)+1, 2**i-1):  \n                print('0', end=\" \") \n            print() \n       \nsierpinski_triangle(6)"}
{"instruction":"Design a genetic algorithm in Python to find the optimal configuration of a neural network.","input":"Number of layers : 3\nNeurons per layer : [8, 16, 32]\nOptimizer : Adam","output":"# Import modules\nimport random\nimport numpy as np\nimport tensorflow as tf\n\n# Configure the neural network\nNUM_LAYERS = 3\nNEURONS_PER_LAYER = np.array([8, 16, 32])\nOPTIMIZER = tf.keras.optimizers.Adam()\n\n# Create a neural network\nmodel = tf.keras.Sequential()\n\n# Add layers\nfor l in range(NUM_LAYERS):\n model.add(tf.keras.layers.Dense(units=NEURONS_PER_LAYER[l], activation=\"relu\"))\n\n# Output layer\nmodel.add(tf.keras.layers.Dense(units=1))\n\n# Compile the model\nmodel.compile(optimizer=OPTIMIZER, loss=\"binary_crossentropy\",\n metrics=[\"accuracy\"])\n\n# The fitness function\ndef calculate_fitness(genome):\n # Configure the model\n model.set_weights(genome)\n\n # Compute the fitness (e.g. accuracy)\n loss, accuracy = model.evaluate(x_test, y_test)\n\n return accuracy\n\n# Genetic algorithm\nPOPULATION_SIZE = 50 # number of individuals in a population\nNUM_GENERATIONS = 20 # number of generations\n\n# Create the initial population\npopulation = [np.random.randn(model.count_params()) for _ in range(POPULATION_SIZE)]\n\n# Run the genetic algorithm\nfor generation in range(NUM_GENERATIONS):\n # Calculate the fitness of each individual\n fitnesses = [calculate_fitness(genome) for genome in population]\n\n # Find the best individual\n best_index = np.argmax(fitnesses)\n best_individual = population[best_index]\n\n # Print the best fitness\n print(\"Best fitness in generation {}: {:.2f}\".format(generation, fitnesses[best_index]))\n\n # Create the next generation\n new_population = []\nfor genome in population:\n # Perform crossover\n if random.uniform(0,1) < 0.7:\n new_genome = best_individual + np.random.randn(*genome.shape) * 0.1\n else:\n new_genome = genome\n\n # Mutate\n if random.uniform(0,1) < 0.1:\n new_genome *= np.random.randint(0,2, size=new_genome.shape)\n\n # Add to the next generation\n new_population.append(new_genome)\n\n# Make the new population the current population\n population = new_population","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a genetic algorithm in Python to find the optimal configuration of a neural network.\n\n### Input:\nNumber of layers : 3\nNeurons per layer : [8, 16, 32]\nOptimizer : Adam\n\n### Output:\n# Import modules\nimport random\nimport numpy as np\nimport tensorflow as tf\n\n# Configure the neural network\nNUM_LAYERS = 3\nNEURONS_PER_LAYER = np.array([8, 16, 32])\nOPTIMIZER = tf.keras.optimizers.Adam()\n\n# Create a neural network\nmodel = tf.keras.Sequential()\n\n# Add layers\nfor l in range(NUM_LAYERS):\n model.add(tf.keras.layers.Dense(units=NEURONS_PER_LAYER[l], activation=\"relu\"))\n\n# Output layer\nmodel.add(tf.keras.layers.Dense(units=1))\n\n# Compile the model\nmodel.compile(optimizer=OPTIMIZER, loss=\"binary_crossentropy\",\n metrics=[\"accuracy\"])\n\n# The fitness function\ndef calculate_fitness(genome):\n # Configure the model\n model.set_weights(genome)\n\n # Compute the fitness (e.g. accuracy)\n loss, accuracy = model.evaluate(x_test, y_test)\n\n return accuracy\n\n# Genetic algorithm\nPOPULATION_SIZE = 50 # number of individuals in a population\nNUM_GENERATIONS = 20 # number of generations\n\n# Create the initial population\npopulation = [np.random.randn(model.count_params()) for _ in range(POPULATION_SIZE)]\n\n# Run the genetic algorithm\nfor generation in range(NUM_GENERATIONS):\n # Calculate the fitness of each individual\n fitnesses = [calculate_fitness(genome) for genome in population]\n\n # Find the best individual\n best_index = np.argmax(fitnesses)\n best_individual = population[best_index]\n\n # Print the best fitness\n print(\"Best fitness in generation {}: {:.2f}\".format(generation, fitnesses[best_index]))\n\n # Create the next generation\n new_population = []\nfor genome in population:\n # Perform crossover\n if random.uniform(0,1) < 0.7:\n new_genome = best_individual + np.random.randn(*genome.shape) * 0.1\n else:\n new_genome = genome\n\n # Mutate\n if random.uniform(0,1) < 0.1:\n new_genome *= np.random.randint(0,2, size=new_genome.shape)\n\n # Add to the next generation\n new_population.append(new_genome)\n\n# Make the new population the current population\n population = new_population"}
{"instruction":"Develop a logic in Python to encode a sentence into pig latin.","input":"","output":"def latin_encode(string): \n    encoded_string = \"\" \n    for word in string.split(): \n  \n        if word[0] not in \"aeiou\": \n            word = word[1:]+word[0] \n        word+=\"ay\" \n  \n        encoded_string += word+\" \"\n    return encoded_string","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a logic in Python to encode a sentence into pig latin.\n\n### Input:\n\n\n### Output:\ndef latin_encode(string): \n    encoded_string = \"\" \n    for word in string.split(): \n  \n        if word[0] not in \"aeiou\": \n            word = word[1:]+word[0] \n        word+=\"ay\" \n  \n        encoded_string += word+\" \"\n    return encoded_string"}
{"instruction":"To use the PttWebCrawler, create an instance of the class and provide a board name and either a start and end index or an article ID. Then call the parse_articles method to crawl through the specified range of pages or parse_article method to parse a single article. The output will be stored in a JSON file with the format BOARD_NAME-START_INDEX-END_INDEX.json or BOARD_NAME-ID.json.","input":"","output":"# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import print_function\n\nimport os\nimport re\nimport sys\nimport json\nimport requests\nimport argparse\nimport time\nimport codecs\nfrom bs4 import BeautifulSoup\nfrom six import u\n\n__version__ = '1.0'\n\n# if python 2, disable verify flag in requests.get()\nVERIFY = True\nif sys.version_info[0] < 3:\n    VERIFY = False\n    requests.packages.urllib3.disable_warnings()\n\n\nclass PttWebCrawler(object):\n\n    PTT_URL = 'https:\/\/www.ptt.cc'\n\n    \"\"\"docstring for PttWebCrawler\"\"\"\n    def __init__(self, cmdline=None, as_lib=False):\n        parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description='''\n            A crawler for the web version of PTT, the largest online community in Taiwan.\n            Input: board name and page indices (or articla ID)\n            Output: BOARD_NAME-START_INDEX-END_INDEX.json (or BOARD_NAME-ID.json)\n        ''')\n        parser.add_argument('-b', metavar='BOARD_NAME', help='Board name', required=True)\n        group = parser.add_mutually_exclusive_group(required=True)\n        group.add_argument('-i', metavar=('START_INDEX', 'END_INDEX'), type=int, nargs=2, help=\"Start and end index\")\n        group.add_argument('-a', metavar='ARTICLE_ID', help=\"Article ID\")\n        parser.add_argument('-v', '--version', action='version', version='%(prog)s ' + __version__)\n\n        if not as_lib:\n            if cmdline:\n                args = parser.parse_args(cmdline)\n            else:\n                args = parser.parse_args()\n            board = args.b\n            if args.i:\n                start = args.i[0]\n                if args.i[1] == -1:\n                    end = self.getLastPage(board)\n                else:\n                    end = args.i[1]\n                self.parse_articles(start, end, board)\n            else:  # args.a\n                article_id = args.a\n                self.parse_article(article_id, board)\n\n    def parse_articles(self, start, end, board, path='.', timeout=3):\n            filename = board + '-' + str(start) + '-' + str(end) + '.json'\n            filename = os.path.join(path, filename)\n            self.store(filename, u'{\"articles\": [', 'w')\n            for i in range(end-start+1):\n                index = start + i\n                print('Processing index:', str(index))\n                resp = requests.get(\n                    url = self.PTT_URL + '\/bbs\/' + board + '\/index' + str(index) + '.html',\n                    cookies={'over18': '1'}, verify=VERIFY, timeout=timeout\n                )\n                if resp.status_code != 200:\n                    print('invalid url:', resp.url)\n                    continue\n                soup = BeautifulSoup(resp.text, 'html.parser')\n                divs = soup.find_all(\"div\", \"r-ent\")\n                for div in divs:\n                    try:\n                        # ex. link would be <a href=\"\/bbs\/PublicServan\/M.1127742013.A.240.html\">Re: [\u554f\u984c] \u8077\u7b49<\/a>\n                        href = div.find('a')['href']\n                        link = self.PTT_URL + href\n                        article_id = re.sub('\\.html', '', href.split('\/')[-1])\n                        if div == divs[-1] and i == end-start:  # last div of last page\n                            self.store(filename, self.parse(link, article_id, board), 'a')\n                        else:\n                            self.store(filename, self.parse(link, article_id, board) + ',\\n', 'a')\n                    except:\n                        pass\n                time.sleep(0.1)\n            self.store(filename, u']}', 'a')\n            return filename\n\n    def parse_article(self, article_id, board, path='.'):\n        link = self.PTT_URL + '\/bbs\/' + board + '\/' + article_id + '.html'\n        filename = board + '-' + article_id + '.json'\n        filename = os.path.join(path, filename)\n        self.store(filename, self.parse(link, article_id, board), 'w')\n        return filename\n\n    @staticmethod\n    def parse(link, article_id, board, timeout=3):\n        print('Processing article:', article_id)\n        resp = requests.get(url=link, cookies={'over18': '1'}, verify=VERIFY, timeout=timeout)\n        if resp.status_code != 200:\n            print('invalid url:', resp.url)\n            return json.dumps({\"error\": \"invalid url\"}, sort_keys=True, ensure_ascii=False)\n        soup = BeautifulSoup(resp.text, 'html.parser')\n        main_content = soup.find(id=\"main-content\")\n        metas = main_content.select('div.article-metaline')\n        author = ''\n        title = ''\n        date = ''\n        if metas:\n            author = metas[0].select('span.article-meta-value')[0].string if metas[0].select('span.article-meta-value')[0] else author\n            title = metas[1].select('span.article-meta-value')[0].string if metas[1].select('span.article-meta-value')[0] else title\n            date = metas[2].select('span.article-meta-value')[0].string if metas[2].select('span.article-meta-value')[0] else date\n\n            # remove meta nodes\n            for meta in metas:\n                meta.extract()\n            for meta in main_content.select('div.article-metaline-right'):\n                meta.extract()\n\n        # remove and keep push nodes\n        pushes = main_content.find_all('div', class_='push')\n        for push in pushes:\n            push.extract()\n\n        try:\n            ip = main_content.find(text=re.compile(u'\u203b \u767c\u4fe1\u7ad9:'))\n            ip = re.search('[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*', ip).group()\n        except:\n            ip = \"None\"\n\n        # \u79fb\u9664 '\u203b \u767c\u4fe1\u7ad9:' (starts with u'\\u203b'), '\u25c6 From:' (starts with u'\\u25c6'), \u7a7a\u884c\u53ca\u591a\u9918\u7a7a\u767d\n        # \u4fdd\u7559\u82f1\u6578\u5b57, \u4e2d\u6587\u53ca\u4e2d\u6587\u6a19\u9ede, \u7db2\u5740, \u90e8\u5206\u7279\u6b8a\u7b26\u865f\n        filtered = [ v for v in main_content.stripped_strings if v[0] not in [u'\u203b', u'\u25c6'] and v[:2] not in [u'--'] ]\n        expr = re.compile(u(r'[^\\u4e00-\\u9fa5\\u3002\\uff1b\\uff0c\\uff1a\\u201c\\u201d\\uff08\\uff09\\u3001\\uff1f\\u300a\\u300b\\s\\w:\/-_.?~%()]'))\n        for i in range(len(filtered)):\n            filtered[i] = re.sub(expr, '', filtered[i])\n\n        filtered = [_f for _f in filtered if _f]  # remove empty strings\n        filtered = [x for x in filtered if article_id not in x]  # remove last line containing the url of the article\n        content = ' '.join(filtered)\n        content = re.sub(r'(\\s)+', ' ', content)\n        # print 'content', content\n\n        # push messages\n        p, b, n = 0, 0, 0\n        messages = []\n        for push in pushes:\n            if not push.find('span', 'push-tag'):\n                continue\n            push_tag = push.find('span', 'push-tag').string.strip(' \\t\\n\\r')\n            push_userid = push.find('span', 'push-userid').string.strip(' \\t\\n\\r')\n            # if find is None: find().strings -> list -> ' '.join; else the current way\n            push_content = push.find('span', 'push-content').strings\n            push_content = ' '.join(push_content)[1:].strip(' \\t\\n\\r')  # remove ':'\n            push_ipdatetime = push.find('span', 'push-ipdatetime').string.strip(' \\t\\n\\r')\n            messages.append( {'push_tag': push_tag, 'push_userid': push_userid, 'push_content': push_content, 'push_ipdatetime': push_ipdatetime} )\n            if push_tag == u'\u63a8':\n                p += 1\n            elif push_tag == u'\u5653':\n                b += 1\n            else:\n                n += 1\n\n        # count: \u63a8\u5653\u6587\u76f8\u62b5\u5f8c\u7684\u6578\u91cf; all: \u63a8\u6587\u7e3d\u6578\n        message_count = {'all': p+b+n, 'count': p-b, 'push': p, 'boo': b, \"neutral\": n}\n\n        # print 'msgs', messages\n        # print 'mscounts', message_count\n\n        # json data\n        data = {\n            'url': link,\n            'board': board,\n            'article_id': article_id,\n            'article_title': title,\n            'author': author,\n            'date': date,\n            'content': content,\n            'ip': ip,\n            'message_conut': message_count,\n            'messages': messages\n        }\n        # print 'original:', d\n        return json.dumps(data, sort_keys=True, ensure_ascii=False)\n\n    @staticmethod\n    def getLastPage(board, timeout=3):\n        content = requests.get(\n            url= 'https:\/\/www.ptt.cc\/bbs\/' + board + '\/index.html',\n            cookies={'over18': '1'}, timeout=timeout\n        ).content.decode('utf-8')\n        first_page = re.search(r'href=\"\/bbs\/' + board + '\/index(\\d+).html\">&lsaquo;', content)\n        if first_page is None:\n            return 1\n        return int(first_page.group(1)) + 1\n\n    @staticmethod\n    def store(filename, data, mode):\n        with codecs.open(filename, mode, encoding='utf-8') as f:\n            f.write(data)\n\n    @staticmethod\n    def get(filename, mode='r'):\n        with codecs.open(filename, mode, encoding='utf-8') as f:\n            return json.load(f)\n\nif __name__ == '__main__':\n    c = PttWebCrawler()\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTo use the PttWebCrawler, create an instance of the class and provide a board name and either a start and end index or an article ID. Then call the parse_articles method to crawl through the specified range of pages or parse_article method to parse a single article. The output will be stored in a JSON file with the format BOARD_NAME-START_INDEX-END_INDEX.json or BOARD_NAME-ID.json.\n\n### Input:\n\n\n### Output:\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import print_function\n\nimport os\nimport re\nimport sys\nimport json\nimport requests\nimport argparse\nimport time\nimport codecs\nfrom bs4 import BeautifulSoup\nfrom six import u\n\n__version__ = '1.0'\n\n# if python 2, disable verify flag in requests.get()\nVERIFY = True\nif sys.version_info[0] < 3:\n    VERIFY = False\n    requests.packages.urllib3.disable_warnings()\n\n\nclass PttWebCrawler(object):\n\n    PTT_URL = 'https:\/\/www.ptt.cc'\n\n    \"\"\"docstring for PttWebCrawler\"\"\"\n    def __init__(self, cmdline=None, as_lib=False):\n        parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description='''\n            A crawler for the web version of PTT, the largest online community in Taiwan.\n            Input: board name and page indices (or articla ID)\n            Output: BOARD_NAME-START_INDEX-END_INDEX.json (or BOARD_NAME-ID.json)\n        ''')\n        parser.add_argument('-b', metavar='BOARD_NAME', help='Board name', required=True)\n        group = parser.add_mutually_exclusive_group(required=True)\n        group.add_argument('-i', metavar=('START_INDEX', 'END_INDEX'), type=int, nargs=2, help=\"Start and end index\")\n        group.add_argument('-a', metavar='ARTICLE_ID', help=\"Article ID\")\n        parser.add_argument('-v', '--version', action='version', version='%(prog)s ' + __version__)\n\n        if not as_lib:\n            if cmdline:\n                args = parser.parse_args(cmdline)\n            else:\n                args = parser.parse_args()\n            board = args.b\n            if args.i:\n                start = args.i[0]\n                if args.i[1] == -1:\n                    end = self.getLastPage(board)\n                else:\n                    end = args.i[1]\n                self.parse_articles(start, end, board)\n            else:  # args.a\n                article_id = args.a\n                self.parse_article(article_id, board)\n\n    def parse_articles(self, start, end, board, path='.', timeout=3):\n            filename = board + '-' + str(start) + '-' + str(end) + '.json'\n            filename = os.path.join(path, filename)\n            self.store(filename, u'{\"articles\": [', 'w')\n            for i in range(end-start+1):\n                index = start + i\n                print('Processing index:', str(index))\n                resp = requests.get(\n                    url = self.PTT_URL + '\/bbs\/' + board + '\/index' + str(index) + '.html',\n                    cookies={'over18': '1'}, verify=VERIFY, timeout=timeout\n                )\n                if resp.status_code != 200:\n                    print('invalid url:', resp.url)\n                    continue\n                soup = BeautifulSoup(resp.text, 'html.parser')\n                divs = soup.find_all(\"div\", \"r-ent\")\n                for div in divs:\n                    try:\n                        # ex. link would be <a href=\"\/bbs\/PublicServan\/M.1127742013.A.240.html\">Re: [\u554f\u984c] \u8077\u7b49<\/a>\n                        href = div.find('a')['href']\n                        link = self.PTT_URL + href\n                        article_id = re.sub('\\.html', '', href.split('\/')[-1])\n                        if div == divs[-1] and i == end-start:  # last div of last page\n                            self.store(filename, self.parse(link, article_id, board), 'a')\n                        else:\n                            self.store(filename, self.parse(link, article_id, board) + ',\\n', 'a')\n                    except:\n                        pass\n                time.sleep(0.1)\n            self.store(filename, u']}', 'a')\n            return filename\n\n    def parse_article(self, article_id, board, path='.'):\n        link = self.PTT_URL + '\/bbs\/' + board + '\/' + article_id + '.html'\n        filename = board + '-' + article_id + '.json'\n        filename = os.path.join(path, filename)\n        self.store(filename, self.parse(link, article_id, board), 'w')\n        return filename\n\n    @staticmethod\n    def parse(link, article_id, board, timeout=3):\n        print('Processing article:', article_id)\n        resp = requests.get(url=link, cookies={'over18': '1'}, verify=VERIFY, timeout=timeout)\n        if resp.status_code != 200:\n            print('invalid url:', resp.url)\n            return json.dumps({\"error\": \"invalid url\"}, sort_keys=True, ensure_ascii=False)\n        soup = BeautifulSoup(resp.text, 'html.parser')\n        main_content = soup.find(id=\"main-content\")\n        metas = main_content.select('div.article-metaline')\n        author = ''\n        title = ''\n        date = ''\n        if metas:\n            author = metas[0].select('span.article-meta-value')[0].string if metas[0].select('span.article-meta-value')[0] else author\n            title = metas[1].select('span.article-meta-value')[0].string if metas[1].select('span.article-meta-value')[0] else title\n            date = metas[2].select('span.article-meta-value')[0].string if metas[2].select('span.article-meta-value')[0] else date\n\n            # remove meta nodes\n            for meta in metas:\n                meta.extract()\n            for meta in main_content.select('div.article-metaline-right'):\n                meta.extract()\n\n        # remove and keep push nodes\n        pushes = main_content.find_all('div', class_='push')\n        for push in pushes:\n            push.extract()\n\n        try:\n            ip = main_content.find(text=re.compile(u'\u203b \u767c\u4fe1\u7ad9:'))\n            ip = re.search('[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*', ip).group()\n        except:\n            ip = \"None\"\n\n        # \u79fb\u9664 '\u203b \u767c\u4fe1\u7ad9:' (starts with u'\\u203b'), '\u25c6 From:' (starts with u'\\u25c6'), \u7a7a\u884c\u53ca\u591a\u9918\u7a7a\u767d\n        # \u4fdd\u7559\u82f1\u6578\u5b57, \u4e2d\u6587\u53ca\u4e2d\u6587\u6a19\u9ede, \u7db2\u5740, \u90e8\u5206\u7279\u6b8a\u7b26\u865f\n        filtered = [ v for v in main_content.stripped_strings if v[0] not in [u'\u203b', u'\u25c6'] and v[:2] not in [u'--'] ]\n        expr = re.compile(u(r'[^\\u4e00-\\u9fa5\\u3002\\uff1b\\uff0c\\uff1a\\u201c\\u201d\\uff08\\uff09\\u3001\\uff1f\\u300a\\u300b\\s\\w:\/-_.?~%()]'))\n        for i in range(len(filtered)):\n            filtered[i] = re.sub(expr, '', filtered[i])\n\n        filtered = [_f for _f in filtered if _f]  # remove empty strings\n        filtered = [x for x in filtered if article_id not in x]  # remove last line containing the url of the article\n        content = ' '.join(filtered)\n        content = re.sub(r'(\\s)+', ' ', content)\n        # print 'content', content\n\n        # push messages\n        p, b, n = 0, 0, 0\n        messages = []\n        for push in pushes:\n            if not push.find('span', 'push-tag'):\n                continue\n            push_tag = push.find('span', 'push-tag').string.strip(' \\t\\n\\r')\n            push_userid = push.find('span', 'push-userid').string.strip(' \\t\\n\\r')\n            # if find is None: find().strings -> list -> ' '.join; else the current way\n            push_content = push.find('span', 'push-content').strings\n            push_content = ' '.join(push_content)[1:].strip(' \\t\\n\\r')  # remove ':'\n            push_ipdatetime = push.find('span', 'push-ipdatetime').string.strip(' \\t\\n\\r')\n            messages.append( {'push_tag': push_tag, 'push_userid': push_userid, 'push_content': push_content, 'push_ipdatetime': push_ipdatetime} )\n            if push_tag == u'\u63a8':\n                p += 1\n            elif push_tag == u'\u5653':\n                b += 1\n            else:\n                n += 1\n\n        # count: \u63a8\u5653\u6587\u76f8\u62b5\u5f8c\u7684\u6578\u91cf; all: \u63a8\u6587\u7e3d\u6578\n        message_count = {'all': p+b+n, 'count': p-b, 'push': p, 'boo': b, \"neutral\": n}\n\n        # print 'msgs', messages\n        # print 'mscounts', message_count\n\n        # json data\n        data = {\n            'url': link,\n            'board': board,\n            'article_id': article_id,\n            'article_title': title,\n            'author': author,\n            'date': date,\n            'content': content,\n            'ip': ip,\n            'message_conut': message_count,\n            'messages': messages\n        }\n        # print 'original:', d\n        return json.dumps(data, sort_keys=True, ensure_ascii=False)\n\n    @staticmethod\n    def getLastPage(board, timeout=3):\n        content = requests.get(\n            url= 'https:\/\/www.ptt.cc\/bbs\/' + board + '\/index.html',\n            cookies={'over18': '1'}, timeout=timeout\n        ).content.decode('utf-8')\n        first_page = re.search(r'href=\"\/bbs\/' + board + '\/index(\\d+).html\">&lsaquo;', content)\n        if first_page is None:\n            return 1\n        return int(first_page.group(1)) + 1\n\n    @staticmethod\n    def store(filename, data, mode):\n        with codecs.open(filename, mode, encoding='utf-8') as f:\n            f.write(data)\n\n    @staticmethod\n    def get(filename, mode='r'):\n        with codecs.open(filename, mode, encoding='utf-8') as f:\n            return json.load(f)\n\nif __name__ == '__main__':\n    c = PttWebCrawler()\n"}
{"instruction":"Write a Python function to find all possible permutations of a given list of items.","input":"[1, 2, 3]","output":"def find_permutations(items):\n permutations = []\n \n if not items:\n  return permutations\n \n if len(items) == 1:\n  permutations.append(items)\n  return permutations\n  \n for i in range(len(items)):\n  item = items[i]\n  remaining_items = items[:i] + items[i+1:]\n\n  for permutation in find_permutations(remaining_items):\n   permutations.append([item] + permutation)\n   \n return permutations\n\n# example\nprint(find_permutations([1, 2, 3]))\n# [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to find all possible permutations of a given list of items.\n\n### Input:\n[1, 2, 3]\n\n### Output:\ndef find_permutations(items):\n permutations = []\n \n if not items:\n  return permutations\n \n if len(items) == 1:\n  permutations.append(items)\n  return permutations\n  \n for i in range(len(items)):\n  item = items[i]\n  remaining_items = items[:i] + items[i+1:]\n\n  for permutation in find_permutations(remaining_items):\n   permutations.append([item] + permutation)\n   \n return permutations\n\n# example\nprint(find_permutations([1, 2, 3]))\n# [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]"}
{"instruction":"Write a Python program to make a web crawler that fetches all the links on a webpage.","input":"","output":"import requests\nfrom bs4 import BeautifulSoup \n\ndef get_all_links(url):\n  # make a GET request to fetch the raw HTML content\n  html_content = requests.get(url).text\n  \n  # parse the html content\n  soup = BeautifulSoup(html_content, \"lxml\")\n  \n  # fetch all anchors\n  links = soup.find_all(\"a\")\n\n  for link in links:\n    print(link.get(\"href\"))\n\nget_all_links(\"https:\/\/www.example.com\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to make a web crawler that fetches all the links on a webpage.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup \n\ndef get_all_links(url):\n  # make a GET request to fetch the raw HTML content\n  html_content = requests.get(url).text\n  \n  # parse the html content\n  soup = BeautifulSoup(html_content, \"lxml\")\n  \n  # fetch all anchors\n  links = soup.find_all(\"a\")\n\n  for link in links:\n    print(link.get(\"href\"))\n\nget_all_links(\"https:\/\/www.example.com\")"}
{"instruction":"Write a Python program that can generate random passwords of a given length and complexity.","input":"Not applicable","output":"import random\nimport string\n\ndef generate_password(length, complexity):\n    # minimum 8 characters\n    if length < 8:\n        length = 8\n    # maximum complexity 5\n    if complexity > 5:\n        complexity = 5\n\n    char = string.ascii_letters + string.digits + string.punctuation\n    pwd = []\n    while len(pwd) < length:\n        char_rand = random.choice(char)\n        if char_rand not in pwd:\n            pwd.append(char_rand)\n\n    random.shuffle(pwd)\n    return ''.join(pwd[:length])\n\nprint(generate_password(20,5))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that can generate random passwords of a given length and complexity.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\nimport string\n\ndef generate_password(length, complexity):\n    # minimum 8 characters\n    if length < 8:\n        length = 8\n    # maximum complexity 5\n    if complexity > 5:\n        complexity = 5\n\n    char = string.ascii_letters + string.digits + string.punctuation\n    pwd = []\n    while len(pwd) < length:\n        char_rand = random.choice(char)\n        if char_rand not in pwd:\n            pwd.append(char_rand)\n\n    random.shuffle(pwd)\n    return ''.join(pwd[:length])\n\nprint(generate_password(20,5))"}
{"instruction":"Create a Python program which takes a list of numbers as an input, counts the number of negative numbers in the list, and returns the sum.","input":"[-2, 4, 3, -3, -4, 5]","output":"def sumNegatives(list): \n    count = 0\n    total = 0\n    for number in list:\n        if number < 0:\n            count += 1\n            total += number\n    return count, total\n\nnumList = [-2, 4, 3, -3, -4, 5]\nnegativeCount, negativeSum = sumNegatives(numList)\n\nprint('Number of Negative Numbers:', negativeCount) \nprint('Sum of Negative Numbers:', negativeSum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program which takes a list of numbers as an input, counts the number of negative numbers in the list, and returns the sum.\n\n### Input:\n[-2, 4, 3, -3, -4, 5]\n\n### Output:\ndef sumNegatives(list): \n    count = 0\n    total = 0\n    for number in list:\n        if number < 0:\n            count += 1\n            total += number\n    return count, total\n\nnumList = [-2, 4, 3, -3, -4, 5]\nnegativeCount, negativeSum = sumNegatives(numList)\n\nprint('Number of Negative Numbers:', negativeCount) \nprint('Sum of Negative Numbers:', negativeSum)"}
{"instruction":"Write a python program to convert a string to the list of words.","input":"\"Hello, World!\"","output":"def string_to_list(string):\n    return string.split()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to convert a string to the list of words.\n\n### Input:\n\"Hello, World!\"\n\n### Output:\ndef string_to_list(string):\n    return string.split()"}
{"instruction":"Write a Python program to search a database and generate a report based on the results.","input":"The database contains information on employee records including name, salary, and department.","output":"import sqlite3\n\n# Connect Database\nconn = sqlite3.connect('employee_records.db')\n\n# Create Cursor\ncursor = conn.cursor()\n\n# Query Database\ncursor.execute(\"SELECT name, salary, department FROM employees\")\nrows = cursor.fetchall()\n\n# Generate Report\nfor row in rows:\n name = row[0]\n salary = row[1]\n department = row[2]\n print(f'{name} earns ${salary} in {department}')\n\n# Close Connection\nconn.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to search a database and generate a report based on the results.\n\n### Input:\nThe database contains information on employee records including name, salary, and department.\n\n### Output:\nimport sqlite3\n\n# Connect Database\nconn = sqlite3.connect('employee_records.db')\n\n# Create Cursor\ncursor = conn.cursor()\n\n# Query Database\ncursor.execute(\"SELECT name, salary, department FROM employees\")\nrows = cursor.fetchall()\n\n# Generate Report\nfor row in rows:\n name = row[0]\n salary = row[1]\n department = row[2]\n print(f'{name} earns ${salary} in {department}')\n\n# Close Connection\nconn.close()"}
{"instruction":"Build a Python program to take a given list and create a dictionary with the elements and their corresponding indices.","input":"L=[\"a\",\"b\",\"c\"]","output":"def create_dict(L):\n    dict = {}\n    for i in range(len(L)): \n        dict[L[i]] = i\n    return dict\n\ndict_list = dict(create_dict([\"a\",\"b\",\"c\"]))\nprint(dict_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python program to take a given list and create a dictionary with the elements and their corresponding indices.\n\n### Input:\nL=[\"a\",\"b\",\"c\"]\n\n### Output:\ndef create_dict(L):\n    dict = {}\n    for i in range(len(L)): \n        dict[L[i]] = i\n    return dict\n\ndict_list = dict(create_dict([\"a\",\"b\",\"c\"]))\nprint(dict_list)"}
{"instruction":"Design a python program that takes an integer as input and returns the sum of all multiples of 3 and 5 up to (but not including) the given integer.","input":"15","output":"def calculate_sum(n):\n sum = 0\n for i in range(n):\n  if i % 3 == 0 or i % 5 == 0:\n   sum += i\n return sum\n \nprint(calculate_sum(15)) # 42","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program that takes an integer as input and returns the sum of all multiples of 3 and 5 up to (but not including) the given integer.\n\n### Input:\n15\n\n### Output:\ndef calculate_sum(n):\n sum = 0\n for i in range(n):\n  if i % 3 == 0 or i % 5 == 0:\n   sum += i\n return sum\n \nprint(calculate_sum(15)) # 42"}
{"instruction":"Write a Python program to create a Fibonacci series until nth term using recursion.","input":"","output":"def fibonacci_series(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci_series(n-1)+fibonacci_series(n-2) \n\nprint(fibonacci_series(10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a Fibonacci series until nth term using recursion.\n\n### Input:\n\n\n### Output:\ndef fibonacci_series(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci_series(n-1)+fibonacci_series(n-2) \n\nprint(fibonacci_series(10))"}
{"instruction":"Create a Python program to group a list of numbers into two lists according to their parity (even\/odd) in the most efficient way.","input":"[1, 4, 5, 3, 2, 6, 7]","output":"even_list = []\nodd_list = []\n\nfor num in input_list:\n if num % 2 == 0:\n even_list.append(num)\n else:\n odd_list.append(num)\n\nprint('Even list:', even_list)\nprint('Odd list:', odd_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to group a list of numbers into two lists according to their parity (even\/odd) in the most efficient way.\n\n### Input:\n[1, 4, 5, 3, 2, 6, 7]\n\n### Output:\neven_list = []\nodd_list = []\n\nfor num in input_list:\n if num % 2 == 0:\n even_list.append(num)\n else:\n odd_list.append(num)\n\nprint('Even list:', even_list)\nprint('Odd list:', odd_list)"}
{"instruction":"Create a program in Python to find the sum of all even numbers between a given range.","input":"","output":"#Input range\nstart = int(input(\"Enter start of range: \"))\nend = int(input(\"Enter end of range: \"))\n\n#Initialize sum to 0\nsum = 0\n\n#Loop to find the sum of even numbers\nfor num in range(start,end+1):\n  if num % 2 == 0:\n    sum += num\n\n#Print the result\nprint(\"Sum of even numbers between\",start,\"and\",end,\"=\",sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to find the sum of all even numbers between a given range.\n\n### Input:\n\n\n### Output:\n#Input range\nstart = int(input(\"Enter start of range: \"))\nend = int(input(\"Enter end of range: \"))\n\n#Initialize sum to 0\nsum = 0\n\n#Loop to find the sum of even numbers\nfor num in range(start,end+1):\n  if num % 2 == 0:\n    sum += num\n\n#Print the result\nprint(\"Sum of even numbers between\",start,\"and\",end,\"=\",sum)"}
{"instruction":"Create a Python program that takes a list of numbers, and finds a pair of numbers in the list whose sum equals the given number","input":"[2, 3, 4, 5], 5","output":"def find_pair_with_sum(nums, target):\n  seen = set()\n  for num in nums:\n    if target - num in seen:\n      return [target - num, num]\n    seen.add(num)\n\nprint(find_pair_with_sum([2, 3, 4, 5], 5))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a list of numbers, and finds a pair of numbers in the list whose sum equals the given number\n\n### Input:\n[2, 3, 4, 5], 5\n\n### Output:\ndef find_pair_with_sum(nums, target):\n  seen = set()\n  for num in nums:\n    if target - num in seen:\n      return [target - num, num]\n    seen.add(num)\n\nprint(find_pair_with_sum([2, 3, 4, 5], 5))"}
{"instruction":"In Python, how would you return the last N elements from a list?","input":"","output":"def last_elements(lst, n):\n    return lst[-n:]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, how would you return the last N elements from a list?\n\n### Input:\n\n\n### Output:\ndef last_elements(lst, n):\n    return lst[-n:]"}
{"instruction":"Use this code to remove \\n and \\t from island_list and commodity_list respectively and print the updated lists:\n\n```\nisland_list = ['Armstrong Island', 'Atchafalaya Island', 'Immokalee Island', 'Moultrie Island', 'Sho-ke Island', 'Sirius Island',\n               'Tumult Island', 'The Beaufort Islands', \"Messier's Crown\", 'Nunataq Island', 'Paollu Island', 'Qaniit Island',\n               'Ancoraggio Island', 'Fluke Island', 'Kakraphoon Island', 'Eagle Archipelago', 'Cambium Island', \"Hubble's Eye\",\n               'Ilha da Aguia', 'Ix Chel', 'Manu Island', 'Admiral Island', 'Basset Island', 'Bryher Island', 'Cromwell Island',\n               'Hook Shelf', 'Isle of Kent', 'Lincoln Island', 'Wensleydale', 'Anegada Island', 'Barnard Island', 'The Lowland Hundred',\n               'Lyonesse Island', 'Myvatn Island', 'Arakoua Island', 'Aten Island', 'Barbary Island', 'Caravanserai Island',\n               'Kasidim Island', 'Kiwara Island', 'Terjit Island', 'Tichka Plateau', 'Aimuari Island', 'Chachapoya Island',\n               'Matariki Island', 'Pukru Island', 'Quetzal Island', 'Saiph Island', 'Toba Island', 'Albatross Island', 'Ambush Island',\n               'Deadlight Dunes', 'Gauntlet Island', \"Jack's Last Gift\", 'Mirage Island', 'Scurvy Reef', 'Blackthorpe Island', 'Cook Island',\n               'Descartes Isle', 'Fowler Island', 'Greenwich Island', 'Halley Island', 'Spaniel Island', 'Starfish Island', 'Ventress Island',\n               'Accompong Island', 'Gallows Island', 'Iocane Island', 'Maia Island', 'Morgana Island', 'Paihia Island', 'Umbarten Island',\n               'Auk Island', 'Cryo Island', 'Hoarfrost Island', 'Amity Island', 'Bowditch Island', 'Hinga Island', 'Penobscot Island', 'Rowes Island',\n               'Scrimshaw Island', 'Squibnocket Island', 'Wissahickon Island', 'Ashkelon Arch', 'Kashgar Island', 'Morannon Island', 'Alkaid Island',\n               'Doyle Island', \"Edgar's Choice\", 'Isle of Keris', 'Marlowe Island', \"McGuffin's Isle\", 'Sayers Rock']\n\n\ncommodity_list = [['Hemp', 'Hemp oil', 'Iron', \"Kraken's ink\", 'Lacquer', 'Stone', 'Sugar cane', 'Varnish', 'Wood', '', 'Broom flower', 'Butterfly weed',\n                   'Cowslip', 'Elderberries', 'Indigo', 'Iris root', 'Lily of the valley', 'Lobelia', 'Madder', 'Nettle', \"Old man's beard\", 'Pokeweed berries',\n                   'Sassafras', 'Weld', 'Yarrow', '', 'Chalcocite', 'Cubanite', 'Gold nugget', 'Lorandite', 'Leushite', 'Masuyite', 'Papagoite',\n                   'Serandite', 'Sincosite', 'Tellurium', 'Thorianite', '', 'Bananas', 'Carambolas', 'Coconuts', 'Durians', 'Limes', 'Mangos',\n                   'Passion fruit', 'Pineapples', 'Pomegranates', 'Rambutan', 'Amber gems', 'Amethyst gems', 'Beryl gems', 'Coral gems',\n                   'Diamonds', 'Emeralds', 'Jade gems', 'Jasper gems', 'Jet gems', 'Lapis lazuli gems', '  ', 'Moonstones', 'Opals', 'Pearls',\n                   'Quartz gems', 'Rubies', 'Sapphires', 'Tigereye gems', 'Topaz gems', 'Gold nuggets (mineral)', '', 'Swill', 'Grog', 'Fine rum',\n                   'Small, medium, and large cannon balls', 'Lifeboats', '', 'Aqua cloth', 'Black cloth', 'Blue cloth', 'Brown cloth', 'Gold cloth',\n                   'Green cloth', 'Grey cloth', 'Lavender cloth', 'Light green cloth', 'Lime cloth', 'Magenta cloth', 'Maroon cloth', 'Mint cloth',\n                   'Navy cloth', 'Orange cloth', 'Pink cloth', 'Purple cloth', 'Red cloth', 'Rose cloth', 'Tan cloth', 'Violet cloth', 'White cloth',\n                   'Yellow cloth', 'Fine aqua cloth', 'Fine black cloth', 'Fine blue cloth', 'Fine brown cloth', 'Fine gold cloth', 'Fine green cloth',\n                   'Fine grey cloth', 'Fine lavender cloth', 'Fine light green cloth', 'Fine lime cloth', 'Fine magenta cloth', 'Fine maroon cloth',\n                   'Fine mint cloth', '    ', 'Fine navy cloth', 'Fine orange cloth', 'Fine pink cloth', 'Fine purple cloth', 'Fine red cloth', 'Fine rose cloth',\n                   'Fine tan cloth', 'Fine violet cloth', 'Fine white cloth', 'Fine yellow cloth', 'Sail cloth', '', 'Blue dye', 'Green dye',\n                   \"Kraken's blood\", 'Red dye', 'Yellow dye', '', 'Aqua enamel', 'Black enamel', 'Blue enamel', 'Brown enamel', 'Gold enamel',\n                   'Green enamel', 'Grey enamel', 'Lavender enamel', 'Light green enamel', 'Lime enamel', 'Magenta enamel', 'Maroon enamel', 'Mint enamel',\n                   'Navy enamel', 'Orange enamel', 'Pink enamel', 'Purple enamel', 'Red enamel', 'Rose enamel', 'Tan enamel', 'Violet enamel', 'White enamel',\n                   'Yellow enamel', '', 'Aqua paint', 'Black paint', 'Blue paint', 'Brown paint', 'Gold paint', 'Green paint', 'Grey paint', 'Lavender paint',\n                   'Light green paint', 'Lime paint', 'Magenta paint', 'Maroon paint', 'Mint paint', 'Navy paint', 'Orange paint', 'Pink paint',\n                   'Purple paint', 'Red paint', 'Rose paint', 'Tan paint', 'Violet paint', 'White paint', 'Yellow paint']]\n\nnewi_list = [each_item.strip(\"\\n\").strip(\"\\t\") for each_item in island_list]\nnewc_list = [[item.strip(\"\\n\").strip(\"\\t\") for item in sublist] for sublist in commodity_list]\n\nprint(newi_list)\nprint(\"\\n\")\nprint(newc_list)\n```","input":"","output":"#!\/usr\/bin\/python\n\n\"\"\"\nThis code uses .strip formatting once to remove the \\n and another time to remove the \\t from the below lists.\nFor readability, the script uses a print(\"\\n\") to add a new line between the two lists\n\"\"\"\n\nisland_list = ['Armstrong Island', 'Atchafalaya Island', 'Immokalee Island', 'Moultrie Island', 'Sho-ke Island', 'Sirius Island',\n               'Tumult Island', 'The Beaufort Islands', \"Messier's Crown\", 'Nunataq Island', 'Paollu Island', 'Qaniit Island',\n               'Ancoraggio Island', 'Fluke Island', 'Kakraphoon Island', 'Eagle Archipelago', 'Cambium Island', \"Hubble's Eye\",\n               'Ilha da Aguia', 'Ix Chel', 'Manu Island', 'Admiral Island', 'Basset Island', 'Bryher Island', 'Cromwell Island',\n               'Hook Shelf', 'Isle of Kent', 'Lincoln Island', 'Wensleydale', 'Anegada Island', 'Barnard Island', 'The Lowland Hundred',\n               'Lyonesse Island', 'Myvatn Island', 'Arakoua Island', 'Aten Island', 'Barbary Island', 'Caravanserai Island',\n               'Kasidim Island', 'Kiwara Island', 'Terjit Island', 'Tichka Plateau', 'Aimuari Island', 'Chachapoya Island',\n               'Matariki Island', 'Pukru Island', 'Quetzal Island', 'Saiph Island', 'Toba Island', 'Albatross Island', 'Ambush Island',\n               'Deadlight Dunes', 'Gauntlet Island', \"Jack's Last Gift\", 'Mirage Island', 'Scurvy Reef', 'Blackthorpe Island', 'Cook Island',\n               'Descartes Isle', 'Fowler Island', 'Greenwich Island', 'Halley Island', 'Spaniel Island', 'Starfish Island', 'Ventress Island',\n               'Accompong Island', 'Gallows Island', 'Iocane Island', 'Maia Island', 'Morgana Island', 'Paihia Island', 'Umbarten Island',\n               'Auk Island', 'Cryo Island', 'Hoarfrost Island', 'Amity Island', 'Bowditch Island', 'Hinga Island', 'Penobscot Island', 'Rowes Island',\n               'Scrimshaw Island', 'Squibnocket Island', 'Wissahickon Island', 'Ashkelon Arch', 'Kashgar Island', 'Morannon Island', 'Alkaid Island',\n               'Doyle Island', \"Edgar's Choice\", 'Isle of Keris', 'Marlowe Island', \"McGuffin's Isle\", 'Sayers Rock']\n\n\ncommodity_list = [['Hemp', 'Hemp oil', 'Iron', \"Kraken's ink\", 'Lacquer', 'Stone', 'Sugar cane', 'Varnish', 'Wood', '', 'Broom flower', 'Butterfly weed',\n                   'Cowslip', 'Elderberries', 'Indigo', 'Iris root', 'Lily of the valley', 'Lobelia', 'Madder', 'Nettle', \"Old man's beard\", 'Pokeweed berries',\n                   'Sassafras', 'Weld', 'Yarrow', '', 'Chalcocite', 'Cubanite', 'Gold nugget', 'Lorandite', 'Leushite', 'Masuyite', 'Papagoite',\n                   'Serandite', 'Sincosite', 'Tellurium', 'Thorianite', '', 'Bananas', 'Carambolas', 'Coconuts', 'Durians', 'Limes', 'Mangos',\n                   'Passion fruit', 'Pineapples', 'Pomegranates', 'Rambutan', 'Amber gems', 'Amethyst gems', 'Beryl gems', 'Coral gems',\n                   'Diamonds', 'Emeralds', 'Jade gems', 'Jasper gems', 'Jet gems', 'Lapis lazuli gems', '  ', 'Moonstones', 'Opals', 'Pearls',\n                   'Quartz gems', 'Rubies', 'Sapphires', 'Tigereye gems', 'Topaz gems', 'Gold nuggets (mineral)', '', 'Swill', 'Grog', 'Fine rum',\n                   'Small, medium, and large cannon balls', 'Lifeboats', '', 'Aqua cloth', 'Black cloth', 'Blue cloth', 'Brown cloth', 'Gold cloth',\n                   'Green cloth', 'Grey cloth', 'Lavender cloth', 'Light green cloth', 'Lime cloth', 'Magenta cloth', 'Maroon cloth', 'Mint cloth',\n                   'Navy cloth', 'Orange cloth', 'Pink cloth', 'Purple cloth', 'Red cloth', 'Rose cloth', 'Tan cloth', 'Violet cloth', 'White cloth',\n                   'Yellow cloth', 'Fine aqua cloth', 'Fine black cloth', 'Fine blue cloth', 'Fine brown cloth', 'Fine gold cloth', 'Fine green cloth',\n                   'Fine grey cloth', 'Fine lavender cloth', 'Fine light green cloth', 'Fine lime cloth', 'Fine magenta cloth', 'Fine maroon cloth',\n                   'Fine mint cloth', '    ', 'Fine navy cloth', 'Fine orange cloth', 'Fine pink cloth', 'Fine purple cloth', 'Fine red cloth', 'Fine rose cloth',\n                   'Fine tan cloth', 'Fine violet cloth', 'Fine white cloth', 'Fine yellow cloth', 'Sail cloth', '', 'Blue dye', 'Green dye',\n                   \"Kraken's blood\", 'Red dye', 'Yellow dye', '', 'Aqua enamel', 'Black enamel', 'Blue enamel', 'Brown enamel', 'Gold enamel',\n                   'Green enamel', 'Grey enamel', 'Lavender enamel', 'Light green enamel', 'Lime enamel', 'Magenta enamel', 'Maroon enamel', 'Mint enamel',\n                   'Navy enamel', 'Orange enamel', 'Pink enamel', 'Purple enamel', 'Red enamel', 'Rose enamel', 'Tan enamel', 'Violet enamel', 'White enamel',\n                   'Yellow enamel', '', 'Aqua paint', 'Black paint', 'Blue paint', 'Brown paint', 'Gold paint', 'Green paint', 'Grey paint', 'Lavender paint',\n                   'Light green paint', 'Lime paint', 'Magenta paint', 'Maroon paint', 'Mint paint', 'Navy paint', 'Orange paint', 'Pink paint',\n                   'Purple paint', 'Red paint', 'Rose paint', 'Tan paint', 'Violet paint', 'White paint', 'Yellow paint']]\nnewi_list = []\nnewc_list = []\n\nfor each_item in island_list:\n    b = each_item.strip(\"\\n\")\n    c = b.strip(\"\\t\")\n    newi_list.append(c)\nfor each_item in commodity_list:\n    b = each_item.strip(\"\\n\")\n    c = b.strip(\"\\t\")\n    newc_list.append(c)\n\nprint(newi_list)\nprint(\"\\n\")\nprint(newc_list)\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse this code to remove \\n and \\t from island_list and commodity_list respectively and print the updated lists:\n\n```\nisland_list = ['Armstrong Island', 'Atchafalaya Island', 'Immokalee Island', 'Moultrie Island', 'Sho-ke Island', 'Sirius Island',\n               'Tumult Island', 'The Beaufort Islands', \"Messier's Crown\", 'Nunataq Island', 'Paollu Island', 'Qaniit Island',\n               'Ancoraggio Island', 'Fluke Island', 'Kakraphoon Island', 'Eagle Archipelago', 'Cambium Island', \"Hubble's Eye\",\n               'Ilha da Aguia', 'Ix Chel', 'Manu Island', 'Admiral Island', 'Basset Island', 'Bryher Island', 'Cromwell Island',\n               'Hook Shelf', 'Isle of Kent', 'Lincoln Island', 'Wensleydale', 'Anegada Island', 'Barnard Island', 'The Lowland Hundred',\n               'Lyonesse Island', 'Myvatn Island', 'Arakoua Island', 'Aten Island', 'Barbary Island', 'Caravanserai Island',\n               'Kasidim Island', 'Kiwara Island', 'Terjit Island', 'Tichka Plateau', 'Aimuari Island', 'Chachapoya Island',\n               'Matariki Island', 'Pukru Island', 'Quetzal Island', 'Saiph Island', 'Toba Island', 'Albatross Island', 'Ambush Island',\n               'Deadlight Dunes', 'Gauntlet Island', \"Jack's Last Gift\", 'Mirage Island', 'Scurvy Reef', 'Blackthorpe Island', 'Cook Island',\n               'Descartes Isle', 'Fowler Island', 'Greenwich Island', 'Halley Island', 'Spaniel Island', 'Starfish Island', 'Ventress Island',\n               'Accompong Island', 'Gallows Island', 'Iocane Island', 'Maia Island', 'Morgana Island', 'Paihia Island', 'Umbarten Island',\n               'Auk Island', 'Cryo Island', 'Hoarfrost Island', 'Amity Island', 'Bowditch Island', 'Hinga Island', 'Penobscot Island', 'Rowes Island',\n               'Scrimshaw Island', 'Squibnocket Island', 'Wissahickon Island', 'Ashkelon Arch', 'Kashgar Island', 'Morannon Island', 'Alkaid Island',\n               'Doyle Island', \"Edgar's Choice\", 'Isle of Keris', 'Marlowe Island', \"McGuffin's Isle\", 'Sayers Rock']\n\n\ncommodity_list = [['Hemp', 'Hemp oil', 'Iron', \"Kraken's ink\", 'Lacquer', 'Stone', 'Sugar cane', 'Varnish', 'Wood', '', 'Broom flower', 'Butterfly weed',\n                   'Cowslip', 'Elderberries', 'Indigo', 'Iris root', 'Lily of the valley', 'Lobelia', 'Madder', 'Nettle', \"Old man's beard\", 'Pokeweed berries',\n                   'Sassafras', 'Weld', 'Yarrow', '', 'Chalcocite', 'Cubanite', 'Gold nugget', 'Lorandite', 'Leushite', 'Masuyite', 'Papagoite',\n                   'Serandite', 'Sincosite', 'Tellurium', 'Thorianite', '', 'Bananas', 'Carambolas', 'Coconuts', 'Durians', 'Limes', 'Mangos',\n                   'Passion fruit', 'Pineapples', 'Pomegranates', 'Rambutan', 'Amber gems', 'Amethyst gems', 'Beryl gems', 'Coral gems',\n                   'Diamonds', 'Emeralds', 'Jade gems', 'Jasper gems', 'Jet gems', 'Lapis lazuli gems', '  ', 'Moonstones', 'Opals', 'Pearls',\n                   'Quartz gems', 'Rubies', 'Sapphires', 'Tigereye gems', 'Topaz gems', 'Gold nuggets (mineral)', '', 'Swill', 'Grog', 'Fine rum',\n                   'Small, medium, and large cannon balls', 'Lifeboats', '', 'Aqua cloth', 'Black cloth', 'Blue cloth', 'Brown cloth', 'Gold cloth',\n                   'Green cloth', 'Grey cloth', 'Lavender cloth', 'Light green cloth', 'Lime cloth', 'Magenta cloth', 'Maroon cloth', 'Mint cloth',\n                   'Navy cloth', 'Orange cloth', 'Pink cloth', 'Purple cloth', 'Red cloth', 'Rose cloth', 'Tan cloth', 'Violet cloth', 'White cloth',\n                   'Yellow cloth', 'Fine aqua cloth', 'Fine black cloth', 'Fine blue cloth', 'Fine brown cloth', 'Fine gold cloth', 'Fine green cloth',\n                   'Fine grey cloth', 'Fine lavender cloth', 'Fine light green cloth', 'Fine lime cloth', 'Fine magenta cloth', 'Fine maroon cloth',\n                   'Fine mint cloth', '    ', 'Fine navy cloth', 'Fine orange cloth', 'Fine pink cloth', 'Fine purple cloth', 'Fine red cloth', 'Fine rose cloth',\n                   'Fine tan cloth', 'Fine violet cloth', 'Fine white cloth', 'Fine yellow cloth', 'Sail cloth', '', 'Blue dye', 'Green dye',\n                   \"Kraken's blood\", 'Red dye', 'Yellow dye', '', 'Aqua enamel', 'Black enamel', 'Blue enamel', 'Brown enamel', 'Gold enamel',\n                   'Green enamel', 'Grey enamel', 'Lavender enamel', 'Light green enamel', 'Lime enamel', 'Magenta enamel', 'Maroon enamel', 'Mint enamel',\n                   'Navy enamel', 'Orange enamel', 'Pink enamel', 'Purple enamel', 'Red enamel', 'Rose enamel', 'Tan enamel', 'Violet enamel', 'White enamel',\n                   'Yellow enamel', '', 'Aqua paint', 'Black paint', 'Blue paint', 'Brown paint', 'Gold paint', 'Green paint', 'Grey paint', 'Lavender paint',\n                   'Light green paint', 'Lime paint', 'Magenta paint', 'Maroon paint', 'Mint paint', 'Navy paint', 'Orange paint', 'Pink paint',\n                   'Purple paint', 'Red paint', 'Rose paint', 'Tan paint', 'Violet paint', 'White paint', 'Yellow paint']]\n\nnewi_list = [each_item.strip(\"\\n\").strip(\"\\t\") for each_item in island_list]\nnewc_list = [[item.strip(\"\\n\").strip(\"\\t\") for item in sublist] for sublist in commodity_list]\n\nprint(newi_list)\nprint(\"\\n\")\nprint(newc_list)\n```\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/python\n\n\"\"\"\nThis code uses .strip formatting once to remove the \\n and another time to remove the \\t from the below lists.\nFor readability, the script uses a print(\"\\n\") to add a new line between the two lists\n\"\"\"\n\nisland_list = ['Armstrong Island', 'Atchafalaya Island', 'Immokalee Island', 'Moultrie Island', 'Sho-ke Island', 'Sirius Island',\n               'Tumult Island', 'The Beaufort Islands', \"Messier's Crown\", 'Nunataq Island', 'Paollu Island', 'Qaniit Island',\n               'Ancoraggio Island', 'Fluke Island', 'Kakraphoon Island', 'Eagle Archipelago', 'Cambium Island', \"Hubble's Eye\",\n               'Ilha da Aguia', 'Ix Chel', 'Manu Island', 'Admiral Island', 'Basset Island', 'Bryher Island', 'Cromwell Island',\n               'Hook Shelf', 'Isle of Kent', 'Lincoln Island', 'Wensleydale', 'Anegada Island', 'Barnard Island', 'The Lowland Hundred',\n               'Lyonesse Island', 'Myvatn Island', 'Arakoua Island', 'Aten Island', 'Barbary Island', 'Caravanserai Island',\n               'Kasidim Island', 'Kiwara Island', 'Terjit Island', 'Tichka Plateau', 'Aimuari Island', 'Chachapoya Island',\n               'Matariki Island', 'Pukru Island', 'Quetzal Island', 'Saiph Island', 'Toba Island', 'Albatross Island', 'Ambush Island',\n               'Deadlight Dunes', 'Gauntlet Island', \"Jack's Last Gift\", 'Mirage Island', 'Scurvy Reef', 'Blackthorpe Island', 'Cook Island',\n               'Descartes Isle', 'Fowler Island', 'Greenwich Island', 'Halley Island', 'Spaniel Island', 'Starfish Island', 'Ventress Island',\n               'Accompong Island', 'Gallows Island', 'Iocane Island', 'Maia Island', 'Morgana Island', 'Paihia Island', 'Umbarten Island',\n               'Auk Island', 'Cryo Island', 'Hoarfrost Island', 'Amity Island', 'Bowditch Island', 'Hinga Island', 'Penobscot Island', 'Rowes Island',\n               'Scrimshaw Island', 'Squibnocket Island', 'Wissahickon Island', 'Ashkelon Arch', 'Kashgar Island', 'Morannon Island', 'Alkaid Island',\n               'Doyle Island', \"Edgar's Choice\", 'Isle of Keris', 'Marlowe Island', \"McGuffin's Isle\", 'Sayers Rock']\n\n\ncommodity_list = [['Hemp', 'Hemp oil', 'Iron', \"Kraken's ink\", 'Lacquer', 'Stone', 'Sugar cane', 'Varnish', 'Wood', '', 'Broom flower', 'Butterfly weed',\n                   'Cowslip', 'Elderberries', 'Indigo', 'Iris root', 'Lily of the valley', 'Lobelia', 'Madder', 'Nettle', \"Old man's beard\", 'Pokeweed berries',\n                   'Sassafras', 'Weld', 'Yarrow', '', 'Chalcocite', 'Cubanite', 'Gold nugget', 'Lorandite', 'Leushite', 'Masuyite', 'Papagoite',\n                   'Serandite', 'Sincosite', 'Tellurium', 'Thorianite', '', 'Bananas', 'Carambolas', 'Coconuts', 'Durians', 'Limes', 'Mangos',\n                   'Passion fruit', 'Pineapples', 'Pomegranates', 'Rambutan', 'Amber gems', 'Amethyst gems', 'Beryl gems', 'Coral gems',\n                   'Diamonds', 'Emeralds', 'Jade gems', 'Jasper gems', 'Jet gems', 'Lapis lazuli gems', '  ', 'Moonstones', 'Opals', 'Pearls',\n                   'Quartz gems', 'Rubies', 'Sapphires', 'Tigereye gems', 'Topaz gems', 'Gold nuggets (mineral)', '', 'Swill', 'Grog', 'Fine rum',\n                   'Small, medium, and large cannon balls', 'Lifeboats', '', 'Aqua cloth', 'Black cloth', 'Blue cloth', 'Brown cloth', 'Gold cloth',\n                   'Green cloth', 'Grey cloth', 'Lavender cloth', 'Light green cloth', 'Lime cloth', 'Magenta cloth', 'Maroon cloth', 'Mint cloth',\n                   'Navy cloth', 'Orange cloth', 'Pink cloth', 'Purple cloth', 'Red cloth', 'Rose cloth', 'Tan cloth', 'Violet cloth', 'White cloth',\n                   'Yellow cloth', 'Fine aqua cloth', 'Fine black cloth', 'Fine blue cloth', 'Fine brown cloth', 'Fine gold cloth', 'Fine green cloth',\n                   'Fine grey cloth', 'Fine lavender cloth', 'Fine light green cloth', 'Fine lime cloth', 'Fine magenta cloth', 'Fine maroon cloth',\n                   'Fine mint cloth', '    ', 'Fine navy cloth', 'Fine orange cloth', 'Fine pink cloth', 'Fine purple cloth', 'Fine red cloth', 'Fine rose cloth',\n                   'Fine tan cloth', 'Fine violet cloth', 'Fine white cloth', 'Fine yellow cloth', 'Sail cloth', '', 'Blue dye', 'Green dye',\n                   \"Kraken's blood\", 'Red dye', 'Yellow dye', '', 'Aqua enamel', 'Black enamel', 'Blue enamel', 'Brown enamel', 'Gold enamel',\n                   'Green enamel', 'Grey enamel', 'Lavender enamel', 'Light green enamel', 'Lime enamel', 'Magenta enamel', 'Maroon enamel', 'Mint enamel',\n                   'Navy enamel', 'Orange enamel', 'Pink enamel', 'Purple enamel', 'Red enamel', 'Rose enamel', 'Tan enamel', 'Violet enamel', 'White enamel',\n                   'Yellow enamel', '', 'Aqua paint', 'Black paint', 'Blue paint', 'Brown paint', 'Gold paint', 'Green paint', 'Grey paint', 'Lavender paint',\n                   'Light green paint', 'Lime paint', 'Magenta paint', 'Maroon paint', 'Mint paint', 'Navy paint', 'Orange paint', 'Pink paint',\n                   'Purple paint', 'Red paint', 'Rose paint', 'Tan paint', 'Violet paint', 'White paint', 'Yellow paint']]\nnewi_list = []\nnewc_list = []\n\nfor each_item in island_list:\n    b = each_item.strip(\"\\n\")\n    c = b.strip(\"\\t\")\n    newi_list.append(c)\nfor each_item in commodity_list:\n    b = each_item.strip(\"\\n\")\n    c = b.strip(\"\\t\")\n    newc_list.append(c)\n\nprint(newi_list)\nprint(\"\\n\")\nprint(newc_list)\n"}
{"instruction":"Use Python to modify a JSON object for specific key-value pairs.","input":"Object: {name: Tom, age: 25, occupation: Data Scientist, hobbies: [Reading, Badminton]}","output":"# Modify a JSON object\n\nimport json\n\nobject = {'name': 'Tom', 'age': 25, 'occupation': 'Data Scientist', 'hobbies': ['Reading', 'Badminton']}\n\nif 'occupation' in object:\n    object['occupation'] = 'AI Engineer'\n\nif 'hobbies' in object:\n    object['hobbies'].append('Cycling')\n\nprint(json.dumps(object,indent=2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse Python to modify a JSON object for specific key-value pairs.\n\n### Input:\nObject: {name: Tom, age: 25, occupation: Data Scientist, hobbies: [Reading, Badminton]}\n\n### Output:\n# Modify a JSON object\n\nimport json\n\nobject = {'name': 'Tom', 'age': 25, 'occupation': 'Data Scientist', 'hobbies': ['Reading', 'Badminton']}\n\nif 'occupation' in object:\n    object['occupation'] = 'AI Engineer'\n\nif 'hobbies' in object:\n    object['hobbies'].append('Cycling')\n\nprint(json.dumps(object,indent=2))"}
{"instruction":"Design a Python class to represent a 3D vector (x, y, z).","input":"","output":"class Vector3:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n        \n    def __str__(self):\n        return \"x = {}, y = {}, z = {}\".format(self.x, self.y, self.z)\n        \n    def __add__(self, vector): \n        x = self.x + vector.x \n        y = self.y + vector.y \n        z = self.z + vector.z\n        return Vector3(x, y, z)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class to represent a 3D vector (x, y, z).\n\n### Input:\n\n\n### Output:\nclass Vector3:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n        \n    def __str__(self):\n        return \"x = {}, y = {}, z = {}\".format(self.x, self.y, self.z)\n        \n    def __add__(self, vector): \n        x = self.x + vector.x \n        y = self.y + vector.y \n        z = self.z + vector.z\n        return Vector3(x, y, z)"}
{"instruction":"Create a hashtable using python dictionary.","input":"","output":"class HashTable:\n    def __init__(self):\n        self.table = {}\n\n    def put(self, key, value):\n        # Get the hash for the given key\n        hash_value = self._hash(key)\n        # If the hash value is not in the table, create an empty list\n        if hash_value not in self.table:\n            self.table[hash_value] = []\n        # Append the value to the list\n        self.table[hash_value].append((key, value))\n\n    def get(self, key):\n        # Get the hash for the given key\n        hash_value = self._hash(key)\n        # If the hash is not in the table, return None\n        if hash_value not in self.table:\n            return None\n        # Search the list of (key, value) pairs for a matching key\n        for k, v in self.table[hash_value]:\n            if key == k:\n                return v\n        # If no matching key is found, return None\n        return None\n\n    def _hash(self, key):\n        # Generate a simple hash of the given key\n        return hash(key) % 1000","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a hashtable using python dictionary.\n\n### Input:\n\n\n### Output:\nclass HashTable:\n    def __init__(self):\n        self.table = {}\n\n    def put(self, key, value):\n        # Get the hash for the given key\n        hash_value = self._hash(key)\n        # If the hash value is not in the table, create an empty list\n        if hash_value not in self.table:\n            self.table[hash_value] = []\n        # Append the value to the list\n        self.table[hash_value].append((key, value))\n\n    def get(self, key):\n        # Get the hash for the given key\n        hash_value = self._hash(key)\n        # If the hash is not in the table, return None\n        if hash_value not in self.table:\n            return None\n        # Search the list of (key, value) pairs for a matching key\n        for k, v in self.table[hash_value]:\n            if key == k:\n                return v\n        # If no matching key is found, return None\n        return None\n\n    def _hash(self, key):\n        # Generate a simple hash of the given key\n        return hash(key) % 1000"}
{"instruction":"Rewrite the following Python code snippet to use list comprehension:\n\nitems = []\nfor item in range(10):\n items.append(item)","input":"Not applicable","output":"items = [item for item in range(10)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following Python code snippet to use list comprehension:\n\nitems = []\nfor item in range(10):\n items.append(item)\n\n### Input:\nNot applicable\n\n### Output:\nitems = [item for item in range(10)]"}
{"instruction":"Convert the following pseudocode into a Python program: \n\n<Set X to be the sum of the cubes of all numbers from 1 to 10>","input":"","output":"x = 0\n\nfor i in range(1,11):\n    x += i**3\n\nprint(x)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following pseudocode into a Python program: \n\n<Set X to be the sum of the cubes of all numbers from 1 to 10>\n\n### Input:\n\n\n### Output:\nx = 0\n\nfor i in range(1,11):\n    x += i**3\n\nprint(x)"}
{"instruction":"Generate a sentence in Python that uses a for loop to iterate over a list of strings.","input":"strings = ['apple', 'banana', 'cherry']","output":"for s in strings:\n    print(f'I like to eat {s}!')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a sentence in Python that uses a for loop to iterate over a list of strings.\n\n### Input:\nstrings = ['apple', 'banana', 'cherry']\n\n### Output:\nfor s in strings:\n    print(f'I like to eat {s}!')"}
{"instruction":"Using the library Requests, write a Python code to download a webpage.","input":"","output":"import requests\n\ndef download_webpage(url):\n    '''\n    Function to download a webpage using Requests library\n    '''\n    response = requests.get(url)\n    #response.raise_for_status()\n    return response.text\n\nurl = 'http:\/\/example.com'\nwebpage = download_webpage(url)\nprint(webpage)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the library Requests, write a Python code to download a webpage.\n\n### Input:\n\n\n### Output:\nimport requests\n\ndef download_webpage(url):\n    '''\n    Function to download a webpage using Requests library\n    '''\n    response = requests.get(url)\n    #response.raise_for_status()\n    return response.text\n\nurl = 'http:\/\/example.com'\nwebpage = download_webpage(url)\nprint(webpage)"}
{"instruction":"Design a function in Python that takes in a string and returns a list of words from the string in reverse order.","input":"The quick brown fox.","output":"def reverseString(userString):\n wordList = userString.split(\" \")\n reversedStringList = list(reversed(wordList))\n\n return reversedStringList\n\nprint(reverseString(\"The quick brown fox.\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python that takes in a string and returns a list of words from the string in reverse order.\n\n### Input:\nThe quick brown fox.\n\n### Output:\ndef reverseString(userString):\n wordList = userString.split(\" \")\n reversedStringList = list(reversed(wordList))\n\n return reversedStringList\n\nprint(reverseString(\"The quick brown fox.\"))"}
{"instruction":"Write an algorithm in Python to take a list of numbers and find the two numbers with the greatest difference (the smallest number subtracted from the largest number).","input":"[1, 2, 5, 4, 10, 8]","output":"def get_largest_diff(list_of_numbers):\n  max_number = list_of_numbers[0]\n  min_number = list_of_numbers[0]\n  \n  for num in list_of_numbers:\n    if num > max_number:\n      max_number = num\n    if num < min_number:\n      min_number = num\n  \n  return (max_number - min_number)\n  \nlist_of_numbers = [1,2,5,4,10,8]\nprint(get_largest_diff(list_of_numbers)) # 9","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to take a list of numbers and find the two numbers with the greatest difference (the smallest number subtracted from the largest number).\n\n### Input:\n[1, 2, 5, 4, 10, 8]\n\n### Output:\ndef get_largest_diff(list_of_numbers):\n  max_number = list_of_numbers[0]\n  min_number = list_of_numbers[0]\n  \n  for num in list_of_numbers:\n    if num > max_number:\n      max_number = num\n    if num < min_number:\n      min_number = num\n  \n  return (max_number - min_number)\n  \nlist_of_numbers = [1,2,5,4,10,8]\nprint(get_largest_diff(list_of_numbers)) # 9"}
{"instruction":"Given a Python list of integers, write a function to find the sum of the elements in the list.","input":"nums = [1, 2, 3, 4, 5]","output":"def findSum(nums):\n total = 0\n for num in nums:\n total += num\n return total","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a Python list of integers, write a function to find the sum of the elements in the list.\n\n### Input:\nnums = [1, 2, 3, 4, 5]\n\n### Output:\ndef findSum(nums):\n total = 0\n for num in nums:\n total += num\n return total"}
{"instruction":"Can you create a function in python code to flatten a nested dictionary?","input":"","output":"def flatten_dict(d):\n    def items():\n        for key, value in d.items():\n            if isinstance(value, dict):\n                for subkey, subvalue in flatten_dict(value).items():\n                    yield key + '.' + subkey, subvalue\n            else:\n                yield key, value\n\n    return dict(items())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you create a function in python code to flatten a nested dictionary?\n\n### Input:\n\n\n### Output:\ndef flatten_dict(d):\n    def items():\n        for key, value in d.items():\n            if isinstance(value, dict):\n                for subkey, subvalue in flatten_dict(value).items():\n                    yield key + '.' + subkey, subvalue\n            else:\n                yield key, value\n\n    return dict(items())"}
{"instruction":"Generate a code snippet in Python to tokenize a given string.","input":"","output":"def tokenize(s):\n  tokens = []\n  current_token = \"\"\n  for c in s:\n    if c.isspace():\n      tokens.append(current_token)\n      current_token = \"\"\n    else:\n      current_token += c\n  if current_token:\n    tokens.append(current_token)\n  return tokens","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code snippet in Python to tokenize a given string.\n\n### Input:\n\n\n### Output:\ndef tokenize(s):\n  tokens = []\n  current_token = \"\"\n  for c in s:\n    if c.isspace():\n      tokens.append(current_token)\n      current_token = \"\"\n    else:\n      current_token += c\n  if current_token:\n    tokens.append(current_token)\n  return tokens"}
{"instruction":"Construct a python program to calculate the average of the numbers in a given list","input":"given_list = [1, 2, 3, 4]","output":"def calculate_average(given_list):\n    # Initialize a variable to store the sum of the numbers\n    list_sum = 0\n    # Loop over the list\n    for num in given_list:\n        list_sum += num\n    # Get the average\n    list_average = list_sum \/ len(given_list)\n    return list_average\n\n# Test \ngiven_list = [1, 2, 3, 4]\nresult = calculate_average(given_list)\nprint(f\"The average of {given_list} is {result}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a python program to calculate the average of the numbers in a given list\n\n### Input:\ngiven_list = [1, 2, 3, 4]\n\n### Output:\ndef calculate_average(given_list):\n    # Initialize a variable to store the sum of the numbers\n    list_sum = 0\n    # Loop over the list\n    for num in given_list:\n        list_sum += num\n    # Get the average\n    list_average = list_sum \/ len(given_list)\n    return list_average\n\n# Test \ngiven_list = [1, 2, 3, 4]\nresult = calculate_average(given_list)\nprint(f\"The average of {given_list} is {result}\")"}
{"instruction":"Write a Python script that finds the most common element of a given list.","input":"list = [3, 5, 6, 3, 7, 8, 3, 4]","output":"def find_most_frequent_element(list):\n count_map = {}\n max_element= list[0]\n max_count = 1\n for num in list:\n  if num in count_map:\n   count_map[num] += 1\n  else:\n   count_map[num] = 1\n for num in count_map:\n  if count_map[num] > max_count:\n   max_element = num\n   max_count = count_map[num]\n return max_element","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that finds the most common element of a given list.\n\n### Input:\nlist = [3, 5, 6, 3, 7, 8, 3, 4]\n\n### Output:\ndef find_most_frequent_element(list):\n count_map = {}\n max_element= list[0]\n max_count = 1\n for num in list:\n  if num in count_map:\n   count_map[num] += 1\n  else:\n   count_map[num] = 1\n for num in count_map:\n  if count_map[num] > max_count:\n   max_element = num\n   max_count = count_map[num]\n return max_element"}
{"instruction":"Create a Python script that divides a list of numbers into two subsets whose sum is as close as possible.","input":"numbers = [1, 4, 8, 10, 5, 9]","output":"def divide_list(numbers):\n # find the sum of the list\n list_sum = sum(numbers)\n # try all possible combinations of dividing the list\n best_difference = float('inf')\n best_subset_1 = None\n best_subset_2 = None\n for i in range(2**len(numbers)):\n # get the binary representation of i\n bit_string = '{:0b}'.format(i).zfill(len(numbers))\n subset_1 = []\n subset_2 = []\n for j, bit in enumerate(bit_string):\n  if bit == '0':\n   subset_1.append(numbers[j])\n  else:\n   subset_2.append(numbers[j])\n # check if the difference between the two subsets is the lowest\n difference = abs(sum(subset_1) - sum(subset_2))\n if difference < best_difference:\n best_difference = difference\n best_subset_1 = subset_1\n best_subset_2 = subset_2\n return best_subset_1, best_subset_2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that divides a list of numbers into two subsets whose sum is as close as possible.\n\n### Input:\nnumbers = [1, 4, 8, 10, 5, 9]\n\n### Output:\ndef divide_list(numbers):\n # find the sum of the list\n list_sum = sum(numbers)\n # try all possible combinations of dividing the list\n best_difference = float('inf')\n best_subset_1 = None\n best_subset_2 = None\n for i in range(2**len(numbers)):\n # get the binary representation of i\n bit_string = '{:0b}'.format(i).zfill(len(numbers))\n subset_1 = []\n subset_2 = []\n for j, bit in enumerate(bit_string):\n  if bit == '0':\n   subset_1.append(numbers[j])\n  else:\n   subset_2.append(numbers[j])\n # check if the difference between the two subsets is the lowest\n difference = abs(sum(subset_1) - sum(subset_2))\n if difference < best_difference:\n best_difference = difference\n best_subset_1 = subset_1\n best_subset_2 = subset_2\n return best_subset_1, best_subset_2"}
{"instruction":"Design a Python program to find all the palindromes in a given list of words.","input":"[\"apple\", \"eye\", \"ball\", \"abba\"]","output":"mylist = [\"apple\", \"eye\", \"ball\", \"abba\"]\n\npalindromes = [word for word in mylist if word == word[::-1]]\nprint(palindromes)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to find all the palindromes in a given list of words.\n\n### Input:\n[\"apple\", \"eye\", \"ball\", \"abba\"]\n\n### Output:\nmylist = [\"apple\", \"eye\", \"ball\", \"abba\"]\n\npalindromes = [word for word in mylist if word == word[::-1]]\nprint(palindromes)"}
{"instruction":"Create a Python program to calculate the intersection points between two circles.","input":"Circle 1: Center (0, 0) and Radius 3\nCircle 2: Center (3, 3) and Radius 6","output":"\"\"\"\nCreate a Python program to calculate the intersection points between two circles\n\"\"\"\nimport math\n\ndef get_intersection(c1, c2):\n    # Calculate center distance between two circles\n    dist = math.sqrt((c1[0] - c2[0]) ** 2 + (c1[1] - c2[1]) ** 2)\n    # Check if distances between centers is equal to or greater than sum of radius\n    if dist >= (c1[2] + c2[2]):\n        return None\n    # Calculate the angle between two circles\n    angle = math.acos(((c1[2] ** 2 + dist ** 2) - c2[2] ** 2) \/ (2 * c1[2] * dist))\n    # Calculates the point P on the line segment which connects both the circles centers\n    point_p = (\n        c1[0] + c1[2] * math.cos(angle),\n        c1[1] + c1[2] * math.sin(angle)\n    )\n    # Calculates the distance from point P to both circles intersection points\n    dist_2 = math.sqrt((c1[2] ** 2) - (dist ** 2))\n    # Calculates the intersection point\n    intersection1 = (\n        point_p[0] - dist_2 * (c2[1] - c1[1]) \/ dist,\n        point_p[1] + dist_2 * (c2[0] - c1[0]) \/ dist\n    )\n    intersection2 = (\n        point_p[0] + dist_2 * (c2[1] - c1[1]) \/ dist,\n        point_p[1] - dist_2 * (c2[0] - c1[0]) \/ dist\n    )\n    return intersection1, intersection2\n\nif __name__ == \"__main__\":\n    c1 = (0, 0, 3)  # center 1 (x, y), radius\n    c2 = (3, 3, 6)  # center 2 (x, y), radius\n    intersection = get_intersection(c1, c2)\n    print(\"Intersection points: \", intersection)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the intersection points between two circles.\n\n### Input:\nCircle 1: Center (0, 0) and Radius 3\nCircle 2: Center (3, 3) and Radius 6\n\n### Output:\n\"\"\"\nCreate a Python program to calculate the intersection points between two circles\n\"\"\"\nimport math\n\ndef get_intersection(c1, c2):\n    # Calculate center distance between two circles\n    dist = math.sqrt((c1[0] - c2[0]) ** 2 + (c1[1] - c2[1]) ** 2)\n    # Check if distances between centers is equal to or greater than sum of radius\n    if dist >= (c1[2] + c2[2]):\n        return None\n    # Calculate the angle between two circles\n    angle = math.acos(((c1[2] ** 2 + dist ** 2) - c2[2] ** 2) \/ (2 * c1[2] * dist))\n    # Calculates the point P on the line segment which connects both the circles centers\n    point_p = (\n        c1[0] + c1[2] * math.cos(angle),\n        c1[1] + c1[2] * math.sin(angle)\n    )\n    # Calculates the distance from point P to both circles intersection points\n    dist_2 = math.sqrt((c1[2] ** 2) - (dist ** 2))\n    # Calculates the intersection point\n    intersection1 = (\n        point_p[0] - dist_2 * (c2[1] - c1[1]) \/ dist,\n        point_p[1] + dist_2 * (c2[0] - c1[0]) \/ dist\n    )\n    intersection2 = (\n        point_p[0] + dist_2 * (c2[1] - c1[1]) \/ dist,\n        point_p[1] - dist_2 * (c2[0] - c1[0]) \/ dist\n    )\n    return intersection1, intersection2\n\nif __name__ == \"__main__\":\n    c1 = (0, 0, 3)  # center 1 (x, y), radius\n    c2 = (3, 3, 6)  # center 2 (x, y), radius\n    intersection = get_intersection(c1, c2)\n    print(\"Intersection points: \", intersection)"}
{"instruction":"In Python, create an algorithm for efficiently sorting a list of numbers in ascending order.","input":"[4,7,2,1,11,0,29]","output":"def sort_list(numbers):\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] > numbers[j]:\n                numbers[i], numbers[j] = numbers[j], numbers[i]\n    return numbers","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, create an algorithm for efficiently sorting a list of numbers in ascending order.\n\n### Input:\n[4,7,2,1,11,0,29]\n\n### Output:\ndef sort_list(numbers):\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] > numbers[j]:\n                numbers[i], numbers[j] = numbers[j], numbers[i]\n    return numbers"}
{"instruction":"Create a program in Python that takes two strings as input from the user and returns True if a substring is found within the first string or False otherwise.","input":"Not applicable","output":"first_string = input('Enter the main string: ')\nsecond_string = input('Enter the substring: ')\n\nif second_string in first_string:\n print(True)\nelse:\n print(False)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes two strings as input from the user and returns True if a substring is found within the first string or False otherwise.\n\n### Input:\nNot applicable\n\n### Output:\nfirst_string = input('Enter the main string: ')\nsecond_string = input('Enter the substring: ')\n\nif second_string in first_string:\n print(True)\nelse:\n print(False)"}
{"instruction":"Design an algorithm in Python that will allow a user to input 1 or more numbers and then returns the smallest number.","input":"12, 24, 9","output":"# define the algorithm \ndef find_min_num(nums):\n # declare a variable to hold the minimum number\n min_num = float('inf')\n\n # iterate over the numbers \n for num in nums: \n # if the number is smaller than the current minimum \n if num < min_num: \n # replace it \n min_num = num\n \n # once out of the loop, return the minimum number \n return min_num\n\n# call the algorithm \nmin_num = find_min_num([12, 24, 9]) \nprint(min_num) # output: 9","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that will allow a user to input 1 or more numbers and then returns the smallest number.\n\n### Input:\n12, 24, 9\n\n### Output:\n# define the algorithm \ndef find_min_num(nums):\n # declare a variable to hold the minimum number\n min_num = float('inf')\n\n # iterate over the numbers \n for num in nums: \n # if the number is smaller than the current minimum \n if num < min_num: \n # replace it \n min_num = num\n \n # once out of the loop, return the minimum number \n return min_num\n\n# call the algorithm \nmin_num = find_min_num([12, 24, 9]) \nprint(min_num) # output: 9"}
{"instruction":"Create a python class which will contain all the necessary methods to implement the str method.","input":"","output":"class MyClass:\n    \n    def __init__(self, *args):\n        self.args = args\n        \n    def __str__(self):\n        return 'MyClass({})'.format(', '.join(str(arg) for arg in self.args))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python class which will contain all the necessary methods to implement the str method.\n\n### Input:\n\n\n### Output:\nclass MyClass:\n    \n    def __init__(self, *args):\n        self.args = args\n        \n    def __str__(self):\n        return 'MyClass({})'.format(', '.join(str(arg) for arg in self.args))"}
{"instruction":"Design a Python class named \"Animal\" that has three instance variables: species, color and age.","input":"","output":"class Animal:\n    def __init__(self, species, color, age):\n        self.species = species\n        self.color = color\n        self.age = age","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class named \"Animal\" that has three instance variables: species, color and age.\n\n### Input:\n\n\n### Output:\nclass Animal:\n    def __init__(self, species, color, age):\n        self.species = species\n        self.color = color\n        self.age = age"}
{"instruction":"Can you provide a Python program to generate all possible combinations of a given list of numbers?","input":"\"list = [1, 2, 3]\"","output":"import itertools\n\n# list of numbers\nlist_of_nums = [1, 2, 3]\n\n# get all possible combinations of numbers\ncombinations = itertools.combinations(list_of_nums, 3)\n\n# print all possible combinations\nfor combination in combinations:\n    print(combination)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you provide a Python program to generate all possible combinations of a given list of numbers?\n\n### Input:\n\"list = [1, 2, 3]\"\n\n### Output:\nimport itertools\n\n# list of numbers\nlist_of_nums = [1, 2, 3]\n\n# get all possible combinations of numbers\ncombinations = itertools.combinations(list_of_nums, 3)\n\n# print all possible combinations\nfor combination in combinations:\n    print(combination)"}
{"instruction":"Translate the following Python code into Java.","input":"def multi_sum(nums):\n    \"\"\"This function returns the sum of elements in a list\"\"\"\n    result = 0\n    for num in nums:\n        result += num\n    return result","output":"public static int multi_sum(int[] nums) {\n    int result = 0;\n    for (int num : nums) {\n        result += num;\n    }\n    return result;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTranslate the following Python code into Java.\n\n### Input:\ndef multi_sum(nums):\n    \"\"\"This function returns the sum of elements in a list\"\"\"\n    result = 0\n    for num in nums:\n        result += num\n    return result\n\n### Output:\npublic static int multi_sum(int[] nums) {\n    int result = 0;\n    for (int num : nums) {\n        result += num;\n    }\n    return result;\n}"}
{"instruction":"Write a Python program to find the longest substring in a given string that contains a given set of characters.","input":"String: \"abcdabcefg\"\nCharacters: \"abc\"","output":"def find_longest_substring(s, characters):\n    longest_length = 0\n    longest_substring = \"\"\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if set(substring).issubset(characters):\n                if len(substring) > longest_length:\n                    longest_length = len(substring)\n                    longest_substring = substring\n\n    return longest_substring","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the longest substring in a given string that contains a given set of characters.\n\n### Input:\nString: \"abcdabcefg\"\nCharacters: \"abc\"\n\n### Output:\ndef find_longest_substring(s, characters):\n    longest_length = 0\n    longest_substring = \"\"\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if set(substring).issubset(characters):\n                if len(substring) > longest_length:\n                    longest_length = len(substring)\n                    longest_substring = substring\n\n    return longest_substring"}
{"instruction":"Write a Python program to optimize a given machine learning model using hyperparameter tuning.","input":"Model: Random Forest Classifier","output":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start=100, stop=700, num=7)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 60, num=6)]\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]\n\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\n\n# Use the random grid to search for best hyperparameters\n# First create the base model to tune\nrf = RandomForestClassifier()\n# Random search of parameters, using 3 fold cross validation, \n# search across 100 different combinations, and use all available cores\nrf_random = RandomizedSearchCV(estimator=rf, param_distributions=random_grid,\n                              n_iter=100, cv=3, verbose=2, random_state=0, n_jobs=-1)\n# Fit the random search model\nrf_random.fit(X_train, y_train)\n\n# Print best hyperparameters\nprint(\"Best hyperparameters:\", rf_random.best_params_)\n \u00a7\u00a7 COM","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize a given machine learning model using hyperparameter tuning.\n\n### Input:\nModel: Random Forest Classifier\n\n### Output:\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start=100, stop=700, num=7)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 60, num=6)]\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]\n\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\n\n# Use the random grid to search for best hyperparameters\n# First create the base model to tune\nrf = RandomForestClassifier()\n# Random search of parameters, using 3 fold cross validation, \n# search across 100 different combinations, and use all available cores\nrf_random = RandomizedSearchCV(estimator=rf, param_distributions=random_grid,\n                              n_iter=100, cv=3, verbose=2, random_state=0, n_jobs=-1)\n# Fit the random search model\nrf_random.fit(X_train, y_train)\n\n# Print best hyperparameters\nprint(\"Best hyperparameters:\", rf_random.best_params_)\n \u00a7\u00a7 COM"}
{"instruction":"Design a data structure in Python to store flight information related to an airline.","input":"Not applicable","output":"class Flight:\n def __init__(self, airline, origin, destination, num_passengers, departure_time, arrival_time, flight_number):\n  self.airline = airline\n  self.origin = origin\n  self.destination = destination\n  self.num_passengers = num_passengers\n  self.departure_time = departure_time\n  self.arrival_time = arrival_time\n  self.flight_number = flight_number\n  \n \ndef main():\n # Create flight object\n flight1 = Flight(\"Delta\", \"New York\", \"Los Angeles\", 20, \"4:00PM\", \"10:00PM\", \"DL123\")\n \n\nif __name__== \"__main__\":\n  main()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a data structure in Python to store flight information related to an airline.\n\n### Input:\nNot applicable\n\n### Output:\nclass Flight:\n def __init__(self, airline, origin, destination, num_passengers, departure_time, arrival_time, flight_number):\n  self.airline = airline\n  self.origin = origin\n  self.destination = destination\n  self.num_passengers = num_passengers\n  self.departure_time = departure_time\n  self.arrival_time = arrival_time\n  self.flight_number = flight_number\n  \n \ndef main():\n # Create flight object\n flight1 = Flight(\"Delta\", \"New York\", \"Los Angeles\", 20, \"4:00PM\", \"10:00PM\", \"DL123\")\n \n\nif __name__== \"__main__\":\n  main()"}
{"instruction":"Design a program in Python to separate a list of numbers into even and odd numbers.","input":"[2, 3, 5, 6, 8, 9, 10]","output":"def separate_numbers(list):\n    even_numbers = []\n    odd_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n        else:\n            odd_numbers.append(num)\n    return even_numbers, odd_numbers\n\nlist = [2, 3, 5, 6, 8, 9, 10]\neven_numbers, odd_numbers = separate_numbers(list)\nprint(\"Even numbers in the list:\", even_numbers)\nprint(\"Odd numbers in the list:\", odd_numbers)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to separate a list of numbers into even and odd numbers.\n\n### Input:\n[2, 3, 5, 6, 8, 9, 10]\n\n### Output:\ndef separate_numbers(list):\n    even_numbers = []\n    odd_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n        else:\n            odd_numbers.append(num)\n    return even_numbers, odd_numbers\n\nlist = [2, 3, 5, 6, 8, 9, 10]\neven_numbers, odd_numbers = separate_numbers(list)\nprint(\"Even numbers in the list:\", even_numbers)\nprint(\"Odd numbers in the list:\", odd_numbers)"}
{"instruction":"Write a Python code to detect the Odd or Even numbers in a given list.","input":"list = [1, 2, 3, 4, 5]","output":"for num in list: \n    if num % 2 == 0: \n        print(num, \"is an even number\") \n    else: \n        print(num, \"is an odd number\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to detect the Odd or Even numbers in a given list.\n\n### Input:\nlist = [1, 2, 3, 4, 5]\n\n### Output:\nfor num in list: \n    if num % 2 == 0: \n        print(num, \"is an even number\") \n    else: \n        print(num, \"is an odd number\")"}
{"instruction":"Write a python program which will show the number of even numbers in a list.","input":"[1, 2, 3, 4, 5, 6]","output":"def count_even_numbers(list):\n    count = 0\n    for num in list:\n        if num % 2 == 0:\n            count += 1\n    return count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program which will show the number of even numbers in a list.\n\n### Input:\n[1, 2, 3, 4, 5, 6]\n\n### Output:\ndef count_even_numbers(list):\n    count = 0\n    for num in list:\n        if num % 2 == 0:\n            count += 1\n    return count"}
{"instruction":"Write a python program that takes in a given list of string and then prints out a list of all the anagrams of those strings.","input":"strings = [\"dear\", \"read\", \"dare\"]","output":"def find_anagrams(strings):\n    anagrams = []\n\n    for string in strings:\n        temp = [string]\n        for s in strings:\n            if sorted(string) == sorted(s) and string != s:\n                temp.append(s)\n        anagrams.append(temp)\n \n    return anagrams","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that takes in a given list of string and then prints out a list of all the anagrams of those strings.\n\n### Input:\nstrings = [\"dear\", \"read\", \"dare\"]\n\n### Output:\ndef find_anagrams(strings):\n    anagrams = []\n\n    for string in strings:\n        temp = [string]\n        for s in strings:\n            if sorted(string) == sorted(s) and string != s:\n                temp.append(s)\n        anagrams.append(temp)\n \n    return anagrams"}
{"instruction":"Write a code snippet to generate a random number from 1 to 10 in Python.","input":"","output":"import random\n\ndef randNumber():\n    return random.randint(1, 10)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet to generate a random number from 1 to 10 in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef randNumber():\n    return random.randint(1, 10)"}
{"instruction":"Can you construct a python program to generate the Fibonacci series of size 10?","input":"","output":"def generateFibonacciSeries(n): \n  \n    # Create an array with 0 and 1\n    fibArray =[0, 1] \n  \n    counter = 2\n    while counter < n: \n        fibArray.append(fibArray[counter-1] + fibArray[counter-2]) \n        counter+=1\n  \n    return fibArray\n\nn = 10\nprint(generateFibonacciSeries(n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you construct a python program to generate the Fibonacci series of size 10?\n\n### Input:\n\n\n### Output:\ndef generateFibonacciSeries(n): \n  \n    # Create an array with 0 and 1\n    fibArray =[0, 1] \n  \n    counter = 2\n    while counter < n: \n        fibArray.append(fibArray[counter-1] + fibArray[counter-2]) \n        counter+=1\n  \n    return fibArray\n\nn = 10\nprint(generateFibonacciSeries(n))"}
{"instruction":"Generate a Python program to solve the Tower of Hanoi puzzle.","input":"","output":"def hanoi(n, source, helper, target):\n    if n > 0:\n        # move tower of size n - 1 to helper:\n        hanoi(n - 1, source, target, helper)\n        # move disk from source peg to target peg\n        if source:\n            target.append(source.pop())\n        # move tower of size n-1 from helper to target\n        hanoi(n - 1, helper, source, target)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to solve the Tower of Hanoi puzzle.\n\n### Input:\n\n\n### Output:\ndef hanoi(n, source, helper, target):\n    if n > 0:\n        # move tower of size n - 1 to helper:\n        hanoi(n - 1, source, target, helper)\n        # move disk from source peg to target peg\n        if source:\n            target.append(source.pop())\n        # move tower of size n-1 from helper to target\n        hanoi(n - 1, helper, source, target)"}
{"instruction":"Implement a function in Python to convert a pascal triangle to a 2D list.","input":"","output":"\"\"\"\nImplement a function in Python to convert a pascal triangle to a 2D list\n\"\"\"\ndef pascal_to_list(pascal):\n    lines = pascal.split('\\n')\n    # convert list of strings to list of lists\n    table = [[int(i) for i in line.split()] for line in lines]\n    return table\n\nif __name__ == \"__main__\":\n    pascal = \"\"\"\n    1 \n    1 1\n    1 2 1\n    1 3 3 1\n    1 4 6 4 1\n    \"\"\"\n    print(pascal_to_list(pascal))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python to convert a pascal triangle to a 2D list.\n\n### Input:\n\n\n### Output:\n\"\"\"\nImplement a function in Python to convert a pascal triangle to a 2D list\n\"\"\"\ndef pascal_to_list(pascal):\n    lines = pascal.split('\\n')\n    # convert list of strings to list of lists\n    table = [[int(i) for i in line.split()] for line in lines]\n    return table\n\nif __name__ == \"__main__\":\n    pascal = \"\"\"\n    1 \n    1 1\n    1 2 1\n    1 3 3 1\n    1 4 6 4 1\n    \"\"\"\n    print(pascal_to_list(pascal))"}
{"instruction":"Use Python loops to generate a new list containing the square of all numbers in the following list.","input":"list = [1,2,3,4,5]","output":"\"\"\"\nGenerate a new list containing the square of all numbers in a list\n\"\"\"\n# input list\nin_list = [1,2,3,4,5]\n\n# output list\nout_list = []\n\n# loop over the input list\nfor i in in_list:\n    # calculate the square of the element and append it to output list\n    out_list.append(i**2)\n\n# print the output list\nprint(out_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse Python loops to generate a new list containing the square of all numbers in the following list.\n\n### Input:\nlist = [1,2,3,4,5]\n\n### Output:\n\"\"\"\nGenerate a new list containing the square of all numbers in a list\n\"\"\"\n# input list\nin_list = [1,2,3,4,5]\n\n# output list\nout_list = []\n\n# loop over the input list\nfor i in in_list:\n    # calculate the square of the element and append it to output list\n    out_list.append(i**2)\n\n# print the output list\nprint(out_list)"}
{"instruction":"Create a GUI program in Python that takes a string as input and outputs the reverse of the given string.","input":"","output":"from tkinter import *\n\nroot = Tk()\n\ndef reverse_string():\n\tstring = entry.get()\n\treversed_string = string[::-1]\n\n\tlabel_text.set(reversed_string)\n\nlabel_text= StringVar()\n\nentry = Entry(root, width=40)\nentry.pack()\n\nreverse_button = Button(root, text=\"Reverse String\", command=reverse_string)\nreverse_button.pack()\n\nlabel = Label(root, textvariable=label_text)\nlabel.pack()\n\nmainloop()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a GUI program in Python that takes a string as input and outputs the reverse of the given string.\n\n### Input:\n\n\n### Output:\nfrom tkinter import *\n\nroot = Tk()\n\ndef reverse_string():\n\tstring = entry.get()\n\treversed_string = string[::-1]\n\n\tlabel_text.set(reversed_string)\n\nlabel_text= StringVar()\n\nentry = Entry(root, width=40)\nentry.pack()\n\nreverse_button = Button(root, text=\"Reverse String\", command=reverse_string)\nreverse_button.pack()\n\nlabel = Label(root, textvariable=label_text)\nlabel.pack()\n\nmainloop()"}
{"instruction":"Implement a Python script which encodes a given string using #Base64.","input":"Not applicable","output":"import base64\n \n#encode\ndef encode(string):\n    string_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(string_bytes)\n    base64_string = base64_bytes.decode('ascii')\n    return base64_string\n \nstring = 'This is a test string'\nprint('Encoded string: ', encode(string))\n\n\/\/ Output: Encoded string: VGhpcyBpcyBhIHRlc3Qgc3RyaW5n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python script which encodes a given string using #Base64.\n\n### Input:\nNot applicable\n\n### Output:\nimport base64\n \n#encode\ndef encode(string):\n    string_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(string_bytes)\n    base64_string = base64_bytes.decode('ascii')\n    return base64_string\n \nstring = 'This is a test string'\nprint('Encoded string: ', encode(string))\n\n\/\/ Output: Encoded string: VGhpcyBpcyBhIHRlc3Qgc3RyaW5n"}
{"instruction":"Develop an algorithm in Python to find the numbers that are divisible by 3 and 5 from a given array.","input":"[5, 15, 20, 7, 10]","output":"def divisible_by_3_5(array):\n    result = []\n    for num in array:\n        if (num % 3 == 0) and (num % 5 == 0):\n            result.append(num)\n    return result\n\nprint(divisible_by_3_5([5, 15, 20, 7, 10])) # [15]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to find the numbers that are divisible by 3 and 5 from a given array.\n\n### Input:\n[5, 15, 20, 7, 10]\n\n### Output:\ndef divisible_by_3_5(array):\n    result = []\n    for num in array:\n        if (num % 3 == 0) and (num % 5 == 0):\n            result.append(num)\n    return result\n\nprint(divisible_by_3_5([5, 15, 20, 7, 10])) # [15]"}
{"instruction":"Construct a program to automate the task of sending email","input":"","output":"import smtplib\n \n# Sender email address and password\nsender_email = \"example@gmail.com\"\npassword = \"your_password\"\n \n# Receiver email address\nrec_email = \"example@gmail.com\"\n \n# Message to send\nmessage = \"This is a message from Python\"\n \n# Email subject\nsubject = \"Automated Email from Python\"\n \n# Email body\nbody = \"Subject: {}\\n\\n{}\".format(subject, message)\n \n# Initialize the server\nserver = smtplib.SMTP(\"smtp.gmail.com\", 587)\nserver.starttls()\n \n# Login with sender email and password\nserver.login(sender_email, password)\n \n# Send the email\nserver.sendmail(sender_email, rec_email, body)\n \n# Quit the server\nserver.quit()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program to automate the task of sending email\n\n### Input:\n\n\n### Output:\nimport smtplib\n \n# Sender email address and password\nsender_email = \"example@gmail.com\"\npassword = \"your_password\"\n \n# Receiver email address\nrec_email = \"example@gmail.com\"\n \n# Message to send\nmessage = \"This is a message from Python\"\n \n# Email subject\nsubject = \"Automated Email from Python\"\n \n# Email body\nbody = \"Subject: {}\\n\\n{}\".format(subject, message)\n \n# Initialize the server\nserver = smtplib.SMTP(\"smtp.gmail.com\", 587)\nserver.starttls()\n \n# Login with sender email and password\nserver.login(sender_email, password)\n \n# Send the email\nserver.sendmail(sender_email, rec_email, body)\n \n# Quit the server\nserver.quit()"}
{"instruction":"Create a web application in Python to display current weather information for a given city.","input":"Paris, France","output":"# import libraries\nimport requests, json \n  \n# api-endpoint \nurl = \"http:\/\/api.openweathermap.org\/data\/2.5\/weather?q={city}&units=metric&APPID=","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application in Python to display current weather information for a given city.\n\n### Input:\nParis, France\n\n### Output:\n# import libraries\nimport requests, json \n  \n# api-endpoint \nurl = \"http:\/\/api.openweathermap.org\/data\/2.5\/weather?q={city}&units=metric&APPID="}
{"instruction":"Edit the following Python code pasted and return the output.","input":"def print_message(name):\n    print(\"Hello \"+name)\n\nprint(\"Matthew\")","output":"def print_message(name):\n    print(\"Hello \"+name)\n\nname = \"Matthew\"\nprint_message(name)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code pasted and return the output.\n\n### Input:\ndef print_message(name):\n    print(\"Hello \"+name)\n\nprint(\"Matthew\")\n\n### Output:\ndef print_message(name):\n    print(\"Hello \"+name)\n\nname = \"Matthew\"\nprint_message(name)"}
{"instruction":"Generate a Python program that reads in a list of words and sorts them alphabetically.","input":"List of words: ['apple', 'banana', 'cat', 'zebra']","output":"words = ['apple', 'banana', 'cat', 'zebra']\nwords.sort()\n\nfor word in words:\n print(word)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that reads in a list of words and sorts them alphabetically.\n\n### Input:\nList of words: ['apple', 'banana', 'cat', 'zebra']\n\n### Output:\nwords = ['apple', 'banana', 'cat', 'zebra']\nwords.sort()\n\nfor word in words:\n print(word)"}
{"instruction":"Write a function in Python that calculates the average of two numeric values.","input":"Not applicable","output":"def avg(x, y):\n\"\"\"\nCalculates the average of two numbers\n\nArgs:\n x (float): The first number\n y (float): The second number\n\nReturns:\n avg (float): The average of the two numbers\n\"\"\"\n return (x + y) \/ 2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that calculates the average of two numeric values.\n\n### Input:\nNot applicable\n\n### Output:\ndef avg(x, y):\n\"\"\"\nCalculates the average of two numbers\n\nArgs:\n x (float): The first number\n y (float): The second number\n\nReturns:\n avg (float): The average of the two numbers\n\"\"\"\n return (x + y) \/ 2"}
{"instruction":"Create a basic graphical user interface (GUI) using the Tkinter library in Python. The application should have basic widgets like Label, Entry, and Button which when clicked displays a message.","input":"Not applicable","output":"import tkinter\n\n# Create the main window \nwindow = tkinter.Tk() \n\n# Set window title \nwindow.title('My Application') \n\n# Create a Label \nlbl = tkinter.Label(window, text =\"Hello World!\") \n\n# Set the position of Label \nlbl.grid(column = 0, row = 0) \n\n# Create a button \nbtn = tkinter.Button(window, text =\"Click Me\") \n\n# Set the position of button \nbtn.grid(column = 1, row = 0) \n\n# Create an event handler for button click \ndef btn_clicked(): \n    lbl.configure(text =\"You clicked the button!\") \n\n# Add event handler for button click \nbtn.configure(command =btn_clicked) \n\n# Just to keep window open \nwindow.mainloop()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic graphical user interface (GUI) using the Tkinter library in Python. The application should have basic widgets like Label, Entry, and Button which when clicked displays a message.\n\n### Input:\nNot applicable\n\n### Output:\nimport tkinter\n\n# Create the main window \nwindow = tkinter.Tk() \n\n# Set window title \nwindow.title('My Application') \n\n# Create a Label \nlbl = tkinter.Label(window, text =\"Hello World!\") \n\n# Set the position of Label \nlbl.grid(column = 0, row = 0) \n\n# Create a button \nbtn = tkinter.Button(window, text =\"Click Me\") \n\n# Set the position of button \nbtn.grid(column = 1, row = 0) \n\n# Create an event handler for button click \ndef btn_clicked(): \n    lbl.configure(text =\"You clicked the button!\") \n\n# Add event handler for button click \nbtn.configure(command =btn_clicked) \n\n# Just to keep window open \nwindow.mainloop()"}
{"instruction":"Generate a function in Python using the input argument side-effect free function to calculate the square root of a number.","input":"25","output":"def get_sqrt(x):\n    return x**0.5","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python using the input argument side-effect free function to calculate the square root of a number.\n\n### Input:\n25\n\n### Output:\ndef get_sqrt(x):\n    return x**0.5"}
{"instruction":"Design a Python class for a 'Movie' object that contains a movie title, release year, and rating.","input":"","output":"class Movie:\n    def __init__(self, title, year, rating):\n        self.title = title\n        self.year = year\n        self.rating = rating","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class for a 'Movie' object that contains a movie title, release year, and rating.\n\n### Input:\n\n\n### Output:\nclass Movie:\n    def __init__(self, title, year, rating):\n        self.title = title\n        self.year = year\n        self.rating = rating"}
{"instruction":"Develop a Python program to find the most common word in a sentence","input":"","output":"def frequency(sentence):\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    \n    most_common_word, frequency = max(frequency.items(), key=lambda x: x[1])\n    return most_common_word, frequency","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to find the most common word in a sentence\n\n### Input:\n\n\n### Output:\ndef frequency(sentence):\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    \n    most_common_word, frequency = max(frequency.items(), key=lambda x: x[1])\n    return most_common_word, frequency"}
{"instruction":"Write Python code to shuffle a given list.","input":"","output":"def shuffle_list(given_list):\n    temp_list = given_list[:]\n    random.shuffle(temp_list)\n    return temp_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to shuffle a given list.\n\n### Input:\n\n\n### Output:\ndef shuffle_list(given_list):\n    temp_list = given_list[:]\n    random.shuffle(temp_list)\n    return temp_list"}
{"instruction":"Write a Python program to clean a text corpus, transforming it into a bag of words.","input":"The cat in the hat.","output":"corpus = \"the cat in the hat\"\n\nwords = corpus.lower().split()\nbag_of_words = set(words)\n\nprint(bag_of_words)\n# Output: {'the', 'in', 'cat', 'hat'}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to clean a text corpus, transforming it into a bag of words.\n\n### Input:\nThe cat in the hat.\n\n### Output:\ncorpus = \"the cat in the hat\"\n\nwords = corpus.lower().split()\nbag_of_words = set(words)\n\nprint(bag_of_words)\n# Output: {'the', 'in', 'cat', 'hat'}"}
{"instruction":"Create a python script that takes in a string and prints the string reversed","input":"","output":"def reverse_str(str):\n    return str[::-1]\n\n# Example\nprint(reverse_str(\"Hello World!\"))  # Prints !dlroW olleH","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script that takes in a string and prints the string reversed\n\n### Input:\n\n\n### Output:\ndef reverse_str(str):\n    return str[::-1]\n\n# Example\nprint(reverse_str(\"Hello World!\"))  # Prints !dlroW olleH"}
{"instruction":"Create a for loop in python to search for a word in a given list.","input":"The list is ['cat', 'dog', 'bird', 'tiger']","output":"def find_word(my_list, word):\n    for i in my_list:\n        if i == word:\n            return True\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a for loop in python to search for a word in a given list.\n\n### Input:\nThe list is ['cat', 'dog', 'bird', 'tiger']\n\n### Output:\ndef find_word(my_list, word):\n    for i in my_list:\n        if i == word:\n            return True\n    return False"}
{"instruction":"Generate an object-oriented Python code to create a Guitar class with properties.","input":"","output":"class Guitar:\n \n    # initialise the class\n    def __init__(self, brand=None, wood=None, strings=None, pickups=None):\n        self.brand = brand\n        self.wood = wood\n        self.strings = strings\n        self.pickups = pickups\n \n    # define getter and setter methods\n    def set_brand(self, brand):\n        self.brand = brand\n \n    def get_brand(self):\n        return self.brand\n \n    def set_wood(self, wood):\n        self.wood = wood\n \n    def get_wood(self):\n        return self.wood\n \n    def set_strings(self, strings):\n        self.strings = strings\n \n    def get_strings(self):\n        return self.strings\n \n    def set_pickups(self, pickups):\n        self.pickups = pickups\n \n    def get_pickups(self):\n        return self.pickups","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an object-oriented Python code to create a Guitar class with properties.\n\n### Input:\n\n\n### Output:\nclass Guitar:\n \n    # initialise the class\n    def __init__(self, brand=None, wood=None, strings=None, pickups=None):\n        self.brand = brand\n        self.wood = wood\n        self.strings = strings\n        self.pickups = pickups\n \n    # define getter and setter methods\n    def set_brand(self, brand):\n        self.brand = brand\n \n    def get_brand(self):\n        return self.brand\n \n    def set_wood(self, wood):\n        self.wood = wood\n \n    def get_wood(self):\n        return self.wood\n \n    def set_strings(self, strings):\n        self.strings = strings\n \n    def get_strings(self):\n        return self.strings\n \n    def set_pickups(self, pickups):\n        self.pickups = pickups\n \n    def get_pickups(self):\n        return self.pickups"}
{"instruction":"Create a Python program to calculate the sum of all odd numbers between 1 and a given number.","input":"","output":"def calculate_sum_of_odd_numbers(max_number):\n    \n    sum_of_odd_numbers = 0\n    for num in range(1, max_number + 1):\n        if num % 2 != 0:\n            sum_of_odd_numbers += num\n    return sum_of_odd_numbers\n\nprint(calculate_sum_of_odd_numbers(15))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the sum of all odd numbers between 1 and a given number.\n\n### Input:\n\n\n### Output:\ndef calculate_sum_of_odd_numbers(max_number):\n    \n    sum_of_odd_numbers = 0\n    for num in range(1, max_number + 1):\n        if num % 2 != 0:\n            sum_of_odd_numbers += num\n    return sum_of_odd_numbers\n\nprint(calculate_sum_of_odd_numbers(15))"}
{"instruction":"Can you develop a function in Python to check if two given strings are isomorphic?","input":"","output":"def isIsomorphic(s1, s2):\n    # Create a dictionary to map character from one string to another\n    map_dict = {}\n\n    if len(s1) != len(s2):\n        return False\n\n    for i in range(len(s1)):\n        if s1[i] not in map_dict:\n            # Check if the mapped character already occurs in target string\n            if s2[i] in map_dict.values():\n                return False\n            # Store the mapping  \n            map_dict[s1[i]] = s2[i]\n        elif map_dict[s1[i]] != s2[i]:\n            return False\n\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you develop a function in Python to check if two given strings are isomorphic?\n\n### Input:\n\n\n### Output:\ndef isIsomorphic(s1, s2):\n    # Create a dictionary to map character from one string to another\n    map_dict = {}\n\n    if len(s1) != len(s2):\n        return False\n\n    for i in range(len(s1)):\n        if s1[i] not in map_dict:\n            # Check if the mapped character already occurs in target string\n            if s2[i] in map_dict.values():\n                return False\n            # Store the mapping  \n            map_dict[s1[i]] = s2[i]\n        elif map_dict[s1[i]] != s2[i]:\n            return False\n\n    return True"}
{"instruction":"Create a program in Python to optimize an equation using the gradient descent algorithm.","input":"","output":"import numpy as np\n\ndef optimize(f, x_init, lr, n_iter): \n    # initialize\n    x = x_init\n    \n    # gradient descent algorithm \n    for i in range(n_iter): \n        # calculate gradient \n        grad = np.gradient(f(x))\n        # update x with learning rate \n        x -= lr * grad \n       \n    return x","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to optimize an equation using the gradient descent algorithm.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\ndef optimize(f, x_init, lr, n_iter): \n    # initialize\n    x = x_init\n    \n    # gradient descent algorithm \n    for i in range(n_iter): \n        # calculate gradient \n        grad = np.gradient(f(x))\n        # update x with learning rate \n        x -= lr * grad \n       \n    return x"}
{"instruction":"Create a Python program to generate a list from two given lists using a list comprehension.","input":"list1 = [1, 2, 3]\nlist2 = [4, 5, 6]","output":"list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\nresult = [x + y for x in list1 for y in list2]\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a list from two given lists using a list comprehension.\n\n### Input:\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n### Output:\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\nresult = [x + y for x in list1 for y in list2]\nprint(result)"}
{"instruction":"Write a Python program to search an element in a list using linear search.","input":"","output":"def linear_search(lst, x):\n    for i in range(len(lst)):\n        if lst[i] == x:\n            return i\n \n    return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to search an element in a list using linear search.\n\n### Input:\n\n\n### Output:\ndef linear_search(lst, x):\n    for i in range(len(lst)):\n        if lst[i] == x:\n            return i\n \n    return -1"}
{"instruction":"Generate a Python script to scrub a list of emails for invalid entries.","input":"","output":"\"\"\"\nGenerate a Python script to scrub a list of emails for invalid entries\n\"\"\"\n\nimport re\n\ndef validate_email(email):\n    # Create the regex\n    email_regex = re.compile(r'[\\w\\.-]+@[\\w\\.-]+\\.\\w+')\n    # Check whether the email is valid\n    is_valid = email_regex.match(email)\n    # Return the result\n    return is_valid\n    \ndef scrub_emails(emails):\n    # Initialize a list for valid emails\n    valid_emails = []\n    # Loop over the emails and validate them\n    for email in emails:\n        # Check if the email is valid\n        is_valid = validate_email(email)\n        # If valid, append to the list\n        if is_valid:\n            valid_emails.append(email)\n    # Return the list of valid emails\n    return valid_emails","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to scrub a list of emails for invalid entries.\n\n### Input:\n\n\n### Output:\n\"\"\"\nGenerate a Python script to scrub a list of emails for invalid entries\n\"\"\"\n\nimport re\n\ndef validate_email(email):\n    # Create the regex\n    email_regex = re.compile(r'[\\w\\.-]+@[\\w\\.-]+\\.\\w+')\n    # Check whether the email is valid\n    is_valid = email_regex.match(email)\n    # Return the result\n    return is_valid\n    \ndef scrub_emails(emails):\n    # Initialize a list for valid emails\n    valid_emails = []\n    # Loop over the emails and validate them\n    for email in emails:\n        # Check if the email is valid\n        is_valid = validate_email(email)\n        # If valid, append to the list\n        if is_valid:\n            valid_emails.append(email)\n    # Return the list of valid emails\n    return valid_emails"}
{"instruction":"Produce a Python code section to calculate the average value for all elements of a given array.","input":"[2, 7, 5, 4]","output":"array = [2, 7, 5, 4]\n\ntotal = 0\nfor num in array:\n total += num\naverage = total\/len(array)\n\nprint(\"The average of the array is:\", average)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a Python code section to calculate the average value for all elements of a given array.\n\n### Input:\n[2, 7, 5, 4]\n\n### Output:\narray = [2, 7, 5, 4]\n\ntotal = 0\nfor num in array:\n total += num\naverage = total\/len(array)\n\nprint(\"The average of the array is:\", average)"}
{"instruction":"Generate a machine learning program in Python using scikit-learn to classify the Iris flower species based on sepal length, sepal width, petal length and petal width.","input":"Not applicable","output":"# import necessary libraries\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n \n# Load the data\niris = datasets.load_iris()\n \n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(iris.data, \niris.target, random_state=0)\n \n# Initialize the model\nknn = KNeighborsClassifier(n_neighbors=1)\n \n# Train the model\nknn.fit(X_train, y_train)\n \n# Generate predictions\ny_pred = knn.predict(X_test)\n \n# Compute accuracy\naccuracy = knn.score(X_test, y_test)\n \n# Print accuracy\nprint(\"Accuracy: {}\".format(accuracy))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a machine learning program in Python using scikit-learn to classify the Iris flower species based on sepal length, sepal width, petal length and petal width.\n\n### Input:\nNot applicable\n\n### Output:\n# import necessary libraries\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n \n# Load the data\niris = datasets.load_iris()\n \n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(iris.data, \niris.target, random_state=0)\n \n# Initialize the model\nknn = KNeighborsClassifier(n_neighbors=1)\n \n# Train the model\nknn.fit(X_train, y_train)\n \n# Generate predictions\ny_pred = knn.predict(X_test)\n \n# Compute accuracy\naccuracy = knn.score(X_test, y_test)\n \n# Print accuracy\nprint(\"Accuracy: {}\".format(accuracy))"}
{"instruction":"Create a web crawler in Python to get all web page URLs from a given website.","input":"https:\/\/en.wikipedia.org\/wiki\/Web_crawler","output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/en.wikipedia.org\/wiki\/Web_crawler'\nrequest = requests.get(url)\nsoup = BeautifulSoup(request.content, 'html.parser')\nfor link in soup.find_all('a', href=True):\n  print(link['href'])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web crawler in Python to get all web page URLs from a given website.\n\n### Input:\nhttps:\/\/en.wikipedia.org\/wiki\/Web_crawler\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/en.wikipedia.org\/wiki\/Web_crawler'\nrequest = requests.get(url)\nsoup = BeautifulSoup(request.content, 'html.parser')\nfor link in soup.find_all('a', href=True):\n  print(link['href'])"}
{"instruction":"Create a Python code to expand a given integer range.","input":"3-11","output":"def expand_range(value):\n  return [x for x in range(int(value[0]), int(value[2]) + 1)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code to expand a given integer range.\n\n### Input:\n3-11\n\n### Output:\ndef expand_range(value):\n  return [x for x in range(int(value[0]), int(value[2]) + 1)]"}
{"instruction":"Write a python program to flatten a list of lists","input":"","output":"def flatten(lst):\n    flattened = []\n    for elem in lst:\n        if isinstance(elem, list):\n            flattened += flatten(elem)\n        else:\n            flattened.append(elem)\n    return flattened\n\nif __name__ == '__main__':\n    lst = [[1,2,3], [4,5], [6]]\n    print(flatten(lst))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to flatten a list of lists\n\n### Input:\n\n\n### Output:\ndef flatten(lst):\n    flattened = []\n    for elem in lst:\n        if isinstance(elem, list):\n            flattened += flatten(elem)\n        else:\n            flattened.append(elem)\n    return flattened\n\nif __name__ == '__main__':\n    lst = [[1,2,3], [4,5], [6]]\n    print(flatten(lst))"}
{"instruction":"Create a confidence-based voting system in Python.","input":"The input is a list of 5 different classifiers with numeric predictions: [classifier1: 0.6, classifier2: 0.3, classifier3: 0.2, classifier4: 0.9, classifier5: 0.1]","output":"def confidence_voting(predictions):\n classifier_sum = 0\n total_confidence = 0\n for classifier, prediction in predictions.items(): \n     classifier_sum += prediction \n     total_confidence += (classifier_sum * prediction)\n return total_confidence\/classifier_sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a confidence-based voting system in Python.\n\n### Input:\nThe input is a list of 5 different classifiers with numeric predictions: [classifier1: 0.6, classifier2: 0.3, classifier3: 0.2, classifier4: 0.9, classifier5: 0.1]\n\n### Output:\ndef confidence_voting(predictions):\n classifier_sum = 0\n total_confidence = 0\n for classifier, prediction in predictions.items(): \n     classifier_sum += prediction \n     total_confidence += (classifier_sum * prediction)\n return total_confidence\/classifier_sum"}
{"instruction":"Create a function in Python that takes a name and age and prints a greeting like \"Hi, my name is <name> and I'm <age> years old.\"","input":"\"John\", 28","output":"def greeting(name, age):\n \u00a0 \u00a0print(\"Hi, my name is \", name, \"and I'm\", age, \"years old.\")\n\ngreeting(\"John\", 28)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes a name and age and prints a greeting like \"Hi, my name is <name> and I'm <age> years old.\"\n\n### Input:\n\"John\", 28\n\n### Output:\ndef greeting(name, age):\n \u00a0 \u00a0print(\"Hi, my name is \", name, \"and I'm\", age, \"years old.\")\n\ngreeting(\"John\", 28)"}
{"instruction":"Develop a Python class that reads and stores a list of integers.","input":"[1, 2, 3, 4, 5]","output":"class ListOfInts:\n    def __init__(self, numbers):\n        self.numbers = numbers\n    \n    def get_list(self):\n        return self.numbers","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python class that reads and stores a list of integers.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\nclass ListOfInts:\n    def __init__(self, numbers):\n        self.numbers = numbers\n    \n    def get_list(self):\n        return self.numbers"}
{"instruction":"Implement a simple python program to split a string on a punctuation symbol.","input":"'Hello,World!'","output":"def split_on_punctuation(s):\n    #Using re module\n    import re\n    out = re.split('[,]',s)\n    return out\n\nprint(split_on_punctuation('Hello,World!'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a simple python program to split a string on a punctuation symbol.\n\n### Input:\n'Hello,World!'\n\n### Output:\ndef split_on_punctuation(s):\n    #Using re module\n    import re\n    out = re.split('[,]',s)\n    return out\n\nprint(split_on_punctuation('Hello,World!'))"}
{"instruction":"Generate a Python code which takes a list of strings as input and return a string which contain the first letter of each string concatenated.","input":"[\"Hello\", \"World\", \"This\", \"Is\", \"A\", \"Test\"]","output":"def first_letter_concat(l):\n    '''This function takes a list of strings as input and return a string which contain the first letter of each string concatenated.'''\n    result = ''\n    for s in l:\n        result += s[0]\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code which takes a list of strings as input and return a string which contain the first letter of each string concatenated.\n\n### Input:\n[\"Hello\", \"World\", \"This\", \"Is\", \"A\", \"Test\"]\n\n### Output:\ndef first_letter_concat(l):\n    '''This function takes a list of strings as input and return a string which contain the first letter of each string concatenated.'''\n    result = ''\n    for s in l:\n        result += s[0]\n    return result"}
{"instruction":"Write a Python program to generate a Haiku poem using a pre-existing dataset of words.","input":"Not applicable","output":"import random\n\ndef generate_haiku():\n with open('words.txt') as f:\n words = f.read().splitlines()\n first_line = random.choices(words, k=5)\n second_line = random.choices(words, k=7)\n third_line = random.choices(words, k=5)\n return f'{first_line[0].title()} {first_line[1]} {first_line[2]} \\n{second_line[0]} {second_line[1]} {second_line[2]} {second_line[3]} {second_line[4]} {second_line[5]} {second_line[6]} \\n {third_line[0]} {third_line[1]} {third_line[2]} {third_line[3]} {third_line[4]}'\n\nprint(generate_haiku())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a Haiku poem using a pre-existing dataset of words.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\ndef generate_haiku():\n with open('words.txt') as f:\n words = f.read().splitlines()\n first_line = random.choices(words, k=5)\n second_line = random.choices(words, k=7)\n third_line = random.choices(words, k=5)\n return f'{first_line[0].title()} {first_line[1]} {first_line[2]} \\n{second_line[0]} {second_line[1]} {second_line[2]} {second_line[3]} {second_line[4]} {second_line[5]} {second_line[6]} \\n {third_line[0]} {third_line[1]} {third_line[2]} {third_line[3]} {third_line[4]}'\n\nprint(generate_haiku())"}
{"instruction":"Write a Python function to take a text string as an input, and generate a table of the frequencies of each letter in the string.","input":"sample_string = \"HelloWorld\"","output":"def find_frequencies(sample_string):\n   frequency_table = dict()\n   for char in sample_string:\n      if char in frequency_table:\n         frequency_table[char] += 1\n      else:\n         frequency_table[char] = 1\n   return frequency_table\n\nresult = find_frequencies(\"HelloWorld\")\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to take a text string as an input, and generate a table of the frequencies of each letter in the string.\n\n### Input:\nsample_string = \"HelloWorld\"\n\n### Output:\ndef find_frequencies(sample_string):\n   frequency_table = dict()\n   for char in sample_string:\n      if char in frequency_table:\n         frequency_table[char] += 1\n      else:\n         frequency_table[char] = 1\n   return frequency_table\n\nresult = find_frequencies(\"HelloWorld\")\nprint(result)"}
{"instruction":"Create a Python script to scrape data from a website. The script should take a URL as an argument and return the extracted data as a list of tuples (title, URL) for links on the webpage.","input":"Example url: https:\/\/en.wikipedia.org\/wiki\/Web_scraping","output":"import requests\nfrom bs4 import BeautifulSoup\n\n\ndef extract_site_information(url):\n result = requests.get(url)\n soup = BeautifulSoup(result.text, 'html.parser')\n data = []\n for link in soup.find_all('a'):\n if link.get('href'):\n data.append((link.text, link.get('href')))\n return data\n\n\nif __name__ == '__main__':\n url = 'https:\/\/en.wikipedia.org\/wiki\/Web_scraping'\n print(extract_site_information(url))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to scrape data from a website. The script should take a URL as an argument and return the extracted data as a list of tuples (title, URL) for links on the webpage.\n\n### Input:\nExample url: https:\/\/en.wikipedia.org\/wiki\/Web_scraping\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n\ndef extract_site_information(url):\n result = requests.get(url)\n soup = BeautifulSoup(result.text, 'html.parser')\n data = []\n for link in soup.find_all('a'):\n if link.get('href'):\n data.append((link.text, link.get('href')))\n return data\n\n\nif __name__ == '__main__':\n url = 'https:\/\/en.wikipedia.org\/wiki\/Web_scraping'\n print(extract_site_information(url))"}
{"instruction":"Edit the following Python code to include a while loop:","input":"a = 0\nb = 0","output":"a = 0\nb = 0\n\nwhile a < 10:\n    a += 1\n    b = b + a\n\nprint(b)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code to include a while loop:\n\n### Input:\na = 0\nb = 0\n\n### Output:\na = 0\nb = 0\n\nwhile a < 10:\n    a += 1\n    b = b + a\n\nprint(b)"}
{"instruction":"Implement a Python module that converts a given date to ISO format","input":"25 December 2024","output":"import datetime\n\ndef convertToISO(dateString):\n date = datetime.datetime.strptime(dateString, \"%d %B %Y\").isoformat()\n return date\n\n# test\ndateString = '25 December 2024'\nprint(convertToISO(dateString))\n\n# Output: 2024-12-25T00:00:00","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python module that converts a given date to ISO format\n\n### Input:\n25 December 2024\n\n### Output:\nimport datetime\n\ndef convertToISO(dateString):\n date = datetime.datetime.strptime(dateString, \"%d %B %Y\").isoformat()\n return date\n\n# test\ndateString = '25 December 2024'\nprint(convertToISO(dateString))\n\n# Output: 2024-12-25T00:00:00"}
{"instruction":"Generate a Python program to reverse the order of words in a given string.","input":"","output":"def reverse_words(str):\n    return \" \".join(str.split()[::-1])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to reverse the order of words in a given string.\n\n### Input:\n\n\n### Output:\ndef reverse_words(str):\n    return \" \".join(str.split()[::-1])"}
{"instruction":"Create an animation in Python that displays an expanding circle across the screen.","input":"","output":"import turtle\n \ndef drawCircle(x, y, r):\n    turtle.penup()\n    turtle.goto(x, y)\n    turtle.pendown()\n    turtle.circle(r)\n \nfor r in range(20, 100, 10):\n    drawCircle(0, 0, r)\n\nturtle.done()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an animation in Python that displays an expanding circle across the screen.\n\n### Input:\n\n\n### Output:\nimport turtle\n \ndef drawCircle(x, y, r):\n    turtle.penup()\n    turtle.goto(x, y)\n    turtle.pendown()\n    turtle.circle(r)\n \nfor r in range(20, 100, 10):\n    drawCircle(0, 0, r)\n\nturtle.done()"}
{"instruction":"Suggest a program to convert Celsius to Fahrenheit and vice versa using Python.","input":"","output":"def celsius_to_fahrenheit(celsius):\n    return celsius * 9 \/ 5 + 32 \n\ndef fahrenheit_to_celsius(fahrenheit):\n    return (fahrenheit - 32) * 5 \/ 9","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a program to convert Celsius to Fahrenheit and vice versa using Python.\n\n### Input:\n\n\n### Output:\ndef celsius_to_fahrenheit(celsius):\n    return celsius * 9 \/ 5 + 32 \n\ndef fahrenheit_to_celsius(fahrenheit):\n    return (fahrenheit - 32) * 5 \/ 9"}
{"instruction":"Write a Python program to update a dictionary with the its key's length as the value.","input":"mydict = {\"Model\": \"Tesla\", \"Car\": \"Tesla Roadster\"}","output":"mydict = {k: len(k) for k in mydict.keys()}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to update a dictionary with the its key's length as the value.\n\n### Input:\nmydict = {\"Model\": \"Tesla\", \"Car\": \"Tesla Roadster\"}\n\n### Output:\nmydict = {k: len(k) for k in mydict.keys()}"}
{"instruction":"Design and write a Python code for finding out the longest common substring in two given strings.","input":"String1: \"apple pie\"\nString2: \"maple syrup\"","output":"def LongestCommonSubstring(str1, str2): \n    m = len(str1)\n    n = len(str2)\n    table = [[0 for x in range(n+1)] for x in range(m+1)] \n    length = 0\n    row = 0\n    col = 0   \n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            if (str1[i-1] == str2[j-1]): \n                table[i][j] = table[i-1][j-1]+1 \n                if (table[i][j] > length): \n                    length = table[i][j] \n                    row = i \n                    col = j \n            else: \n                table[i][j] = 0\n    result = \"\"\n    for k in range(row - length + 1, row + 1): \n        result = result + str1[k-1] \n    print(result) \n\n# Executing the function\nString1 = \"apple pie\"\nString2 = \"maple syrup\"  \nLongestCommonSubstring(String1, String2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and write a Python code for finding out the longest common substring in two given strings.\n\n### Input:\nString1: \"apple pie\"\nString2: \"maple syrup\"\n\n### Output:\ndef LongestCommonSubstring(str1, str2): \n    m = len(str1)\n    n = len(str2)\n    table = [[0 for x in range(n+1)] for x in range(m+1)] \n    length = 0\n    row = 0\n    col = 0   \n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            if (str1[i-1] == str2[j-1]): \n                table[i][j] = table[i-1][j-1]+1 \n                if (table[i][j] > length): \n                    length = table[i][j] \n                    row = i \n                    col = j \n            else: \n                table[i][j] = 0\n    result = \"\"\n    for k in range(row - length + 1, row + 1): \n        result = result + str1[k-1] \n    print(result) \n\n# Executing the function\nString1 = \"apple pie\"\nString2 = \"maple syrup\"  \nLongestCommonSubstring(String1, String2)"}
{"instruction":"Write a Python program that retrieves the weather data from a given city.","input":"City=\"Tokyo\"","output":"import requests\n\n# Fill in your OpenWeatherMap API Key\napi_key = \"xxxxxxxxxxxxxxxxxxxxx\"\n\n# Base URL for OpenWeatherMap API\nbase_url = \"http:\/\/api.openweathermap.org\/data\/2.5\/weather?\"\n\n# City for which we want to retrieve weather data\ncity = \"Tokyo\"\n\n# Complete URL used to retrieve weather data\nurl = base_url + \"appid=\" + api_key + \"&q=\" + city \n\n# Retrieve response in json format \nresponse = requests.get(url) \n\n# Parse the response and retrieve data\n# Store the weather data in a variable\nweather_data = response.json()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that retrieves the weather data from a given city.\n\n### Input:\nCity=\"Tokyo\"\n\n### Output:\nimport requests\n\n# Fill in your OpenWeatherMap API Key\napi_key = \"xxxxxxxxxxxxxxxxxxxxx\"\n\n# Base URL for OpenWeatherMap API\nbase_url = \"http:\/\/api.openweathermap.org\/data\/2.5\/weather?\"\n\n# City for which we want to retrieve weather data\ncity = \"Tokyo\"\n\n# Complete URL used to retrieve weather data\nurl = base_url + \"appid=\" + api_key + \"&q=\" + city \n\n# Retrieve response in json format \nresponse = requests.get(url) \n\n# Parse the response and retrieve data\n# Store the weather data in a variable\nweather_data = response.json()"}
{"instruction":"Create a web scraper in Python to extract the product name, price, and availability from an online store website.","input":"","output":"\"\"\"\nA web scraper to extract the product name, price, and availability from an online store website\n\"\"\"\n\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_products(url):\n    # Get the html content of the website\n    response = requests.get(url)\n    # Parse the html content\n    soup = BeautifulSoup(response.text, 'html.parser')\n    # Get the products using the appropriate css class\n    products = soup.find_all(class_='product')\n    # Initialize an empty list for storing the product details\n    product_list = []\n    # Iterate over the products\n    for product in products:\n        product_details = {}\n        # Get the product name\n        product_details['name'] = product.find('h3').text\n        # Get the product price \n        product_details['price'] = product.find(class_='price').text\n        # Get the availability \n        product_details['availability'] = product.find(class_='stock').text\n        # Add the product details to the list\n        product_list.append(product_details)\n    return product_list\n\nif __name__ == '__main__':\n    print(scrape_products('https:\/\/www.example.com'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python to extract the product name, price, and availability from an online store website.\n\n### Input:\n\n\n### Output:\n\"\"\"\nA web scraper to extract the product name, price, and availability from an online store website\n\"\"\"\n\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_products(url):\n    # Get the html content of the website\n    response = requests.get(url)\n    # Parse the html content\n    soup = BeautifulSoup(response.text, 'html.parser')\n    # Get the products using the appropriate css class\n    products = soup.find_all(class_='product')\n    # Initialize an empty list for storing the product details\n    product_list = []\n    # Iterate over the products\n    for product in products:\n        product_details = {}\n        # Get the product name\n        product_details['name'] = product.find('h3').text\n        # Get the product price \n        product_details['price'] = product.find(class_='price').text\n        # Get the availability \n        product_details['availability'] = product.find(class_='stock').text\n        # Add the product details to the list\n        product_list.append(product_details)\n    return product_list\n\nif __name__ == '__main__':\n    print(scrape_products('https:\/\/www.example.com'))"}
{"instruction":"Write a function in Python that counts the number of words in a given sentence.","input":"","output":"def word_count(sentence):\n    count = 0\n    for word in sentence.split(' '):\n        count += 1\n    return count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that counts the number of words in a given sentence.\n\n### Input:\n\n\n### Output:\ndef word_count(sentence):\n    count = 0\n    for word in sentence.split(' '):\n        count += 1\n    return count"}
{"instruction":"Write a python program to calculate maximum revenue.","input":"prices = [10, 7, 5, 8, 11, 9]","output":"def max_revenue(prices):\n    diff = [prices[i + 1] - prices[i] for i in range(len(prices) - 1)] \n    max_diff = 0\n    for i in range(len(diff)): \n        for j in range(i + 1, len(diff) + 1): \n            current_diff = sum(diff[i:j]) \n            if current_diff > max_diff: \n                max_diff = current_diff \n \n    return max_diff","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to calculate maximum revenue.\n\n### Input:\nprices = [10, 7, 5, 8, 11, 9]\n\n### Output:\ndef max_revenue(prices):\n    diff = [prices[i + 1] - prices[i] for i in range(len(prices) - 1)] \n    max_diff = 0\n    for i in range(len(diff)): \n        for j in range(i + 1, len(diff) + 1): \n            current_diff = sum(diff[i:j]) \n            if current_diff > max_diff: \n                max_diff = current_diff \n \n    return max_diff"}
{"instruction":"Create a function in Python that takes two strings as input. The first string should be a sentence and the second should be a word. The function should return the number of times the given word appears in the given sentence.","input":"sentence = \"This is an example sentence\"\nword = \"example\"","output":"def countWordOccurrences(sentence, word):\n count = 0\n \n sentenceArray = sentence.split(' ')\n \n for s in sentenceArray:\n if s == word:\n count += 1\n \n return count\n \nsentence = \"This is an example sentence\"\nword = \"example\"\n\ncount = countWordOccurrences(sentence, word)\n\nprint(count)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two strings as input. The first string should be a sentence and the second should be a word. The function should return the number of times the given word appears in the given sentence.\n\n### Input:\nsentence = \"This is an example sentence\"\nword = \"example\"\n\n### Output:\ndef countWordOccurrences(sentence, word):\n count = 0\n \n sentenceArray = sentence.split(' ')\n \n for s in sentenceArray:\n if s == word:\n count += 1\n \n return count\n \nsentence = \"This is an example sentence\"\nword = \"example\"\n\ncount = countWordOccurrences(sentence, word)\n\nprint(count)"}
{"instruction":"Create a machine learning model in Python that predicts the price of a house. The model should use a linear regression algorithm and the input data should include square footage, number of bedrooms, and number of bathrooms.","input":"Not applicable","output":"import numpy as np \nimport pandas as pd \nfrom sklearn.linear_model import LinearRegression \n  \n#read the dataset\ndata = pd.read_csv('house_data.csv') \n  \n#split features and target\nX = data.iloc[:, :-1].values \ny = data.iloc[:, 3].values \n  \n#initialize the linear regression model  \nmodel = LinearRegression() \n  \n# fit the model with the data \nmodel.fit(X, y) \n  \n#make predictions on the test set\npredicted_price = model.predict([[square_footage, num_bedrooms, num_bathrooms]]) \n  \nprint('The expected price for the house is: $',predicted_price)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python that predicts the price of a house. The model should use a linear regression algorithm and the input data should include square footage, number of bedrooms, and number of bathrooms.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np \nimport pandas as pd \nfrom sklearn.linear_model import LinearRegression \n  \n#read the dataset\ndata = pd.read_csv('house_data.csv') \n  \n#split features and target\nX = data.iloc[:, :-1].values \ny = data.iloc[:, 3].values \n  \n#initialize the linear regression model  \nmodel = LinearRegression() \n  \n# fit the model with the data \nmodel.fit(X, y) \n  \n#make predictions on the test set\npredicted_price = model.predict([[square_footage, num_bedrooms, num_bathrooms]]) \n  \nprint('The expected price for the house is: $',predicted_price)"}
{"instruction":"Use the machine learning model XGBoost to create a classifier in Python.","input":"","output":"import xgboost as xgb\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\n \n# Load the data\ndata = load_breast_cancer()\nX = data.data\ny = data.target\n \n# Split the data into training and testing sets  \nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n \n# Instantiate the XGBoost model  \nxg_cls = xgb.XGBClassifier(objective=\"binary:logistic\", n_estimators=10, seed=123)\n \n# Fit the model\nxg_cls.fit(X_train, y_train)\n \n# Predict the labels of the test set\nprediction = xg_cls.predict(X_test)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the machine learning model XGBoost to create a classifier in Python.\n\n### Input:\n\n\n### Output:\nimport xgboost as xgb\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\n \n# Load the data\ndata = load_breast_cancer()\nX = data.data\ny = data.target\n \n# Split the data into training and testing sets  \nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n \n# Instantiate the XGBoost model  \nxg_cls = xgb.XGBClassifier(objective=\"binary:logistic\", n_estimators=10, seed=123)\n \n# Fit the model\nxg_cls.fit(X_train, y_train)\n \n# Predict the labels of the test set\nprediction = xg_cls.predict(X_test)"}
{"instruction":"Create a web page that lists out the top five programming languages by market share and their respective features.","input":"","output":"<!DOCTYPE html>\n<html>\n    <head>\n        <title>Programming Languages by Market Share<\/title>\n        <style type=\"text\/css\">\n            table {\n                font-family: verdana, arial, sans-serif;\n                border-collapse: collapse;\n                width: 100%;\n            }\n        \n            td, th {\n                border: 1px solid #dddddd;\n                text-align: left;\n                padding: 8px;\n            }\n        <\/style>\n    <\/head>\n    <body>\n        <table>\n            <caption>Programming Languages by Market Share<\/caption>\n            <tr>\n                <th>Programming Language<\/th>\n                <th>Market Share<\/th>\n                <th>Features<\/th>\n            <\/tr>\n            <tr>\n                <td>Java<\/td>\n                <td>27.2%<\/td>\n                <td>Platform independence, wide support from the development community, good scalability<\/td>\n            <\/tr>\n            <tr>\n                <td>C<\/td>\n                <td>15.2%<\/td>\n                <td>Widely used among developers, efficiency, well-used in embedded systems<\/td>\n            <\/tr>\n            <tr>\n                <td>C++<\/td>\n                <td>9.2%<\/td>\n                <td>Object-oriented features, used in various industries, platform independent<\/td>\n            <\/tr>\n            <tr>\n                <td>Python<\/td>\n                <td>8.2%<\/td>\n                <td>Easy to learn and use, dynamic programming language, good scalability<\/td>\n            <\/tr>\n            <tr>\n                <td>C#<\/td>\n                <td>7.4%<\/td>\n                <td>Object-oriented, popular for enterprise development, reliable memory management<\/td>\n            <\/tr>\n        <\/table>\n    <\/body>\n<\/html>","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web page that lists out the top five programming languages by market share and their respective features.\n\n### Input:\n\n\n### Output:\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Programming Languages by Market Share<\/title>\n        <style type=\"text\/css\">\n            table {\n                font-family: verdana, arial, sans-serif;\n                border-collapse: collapse;\n                width: 100%;\n            }\n        \n            td, th {\n                border: 1px solid #dddddd;\n                text-align: left;\n                padding: 8px;\n            }\n        <\/style>\n    <\/head>\n    <body>\n        <table>\n            <caption>Programming Languages by Market Share<\/caption>\n            <tr>\n                <th>Programming Language<\/th>\n                <th>Market Share<\/th>\n                <th>Features<\/th>\n            <\/tr>\n            <tr>\n                <td>Java<\/td>\n                <td>27.2%<\/td>\n                <td>Platform independence, wide support from the development community, good scalability<\/td>\n            <\/tr>\n            <tr>\n                <td>C<\/td>\n                <td>15.2%<\/td>\n                <td>Widely used among developers, efficiency, well-used in embedded systems<\/td>\n            <\/tr>\n            <tr>\n                <td>C++<\/td>\n                <td>9.2%<\/td>\n                <td>Object-oriented features, used in various industries, platform independent<\/td>\n            <\/tr>\n            <tr>\n                <td>Python<\/td>\n                <td>8.2%<\/td>\n                <td>Easy to learn and use, dynamic programming language, good scalability<\/td>\n            <\/tr>\n            <tr>\n                <td>C#<\/td>\n                <td>7.4%<\/td>\n                <td>Object-oriented, popular for enterprise development, reliable memory management<\/td>\n            <\/tr>\n        <\/table>\n    <\/body>\n<\/html>"}
{"instruction":"Create a Python function to classify a given string as either a palindrome or not.","input":"string=\"kayak\"","output":"def is_palindrome(string):\n    string_temp = string.lower()\n    reverse_string = string_temp[::-1]\n    if string_temp == reverse_string:\n        print(\"yes, this is a palindrome\")\n    else:\n        print(\"no, this is not a palindrome\")\n\nis_palindrome(string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to classify a given string as either a palindrome or not.\n\n### Input:\nstring=\"kayak\"\n\n### Output:\ndef is_palindrome(string):\n    string_temp = string.lower()\n    reverse_string = string_temp[::-1]\n    if string_temp == reverse_string:\n        print(\"yes, this is a palindrome\")\n    else:\n        print(\"no, this is not a palindrome\")\n\nis_palindrome(string)"}
{"instruction":"Create a visualization in Python using Matplotlib that displays the top 5 most popular programming languages.","input":"x_values = [\"Python\", \"Java\", \"C++\", \"Javascript\", \"C#\"]\ny_values = [45, 25, 15, 10, 5]","output":"import matplotlib.pyplot as plt\n\nx_values = [\"Python\", \"Java\", \"C++\", \"Javascript\", \"C#\"]\ny_values = [45, 25, 15, 10, 5]\n\nplt.bar(x_values, y_values)\n\nplt.title(\"Popular Programming Languages\")\nplt.ylabel(\"Percentage of Use\")\nplt.xlabel(\"Languages\")\n\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a visualization in Python using Matplotlib that displays the top 5 most popular programming languages.\n\n### Input:\nx_values = [\"Python\", \"Java\", \"C++\", \"Javascript\", \"C#\"]\ny_values = [45, 25, 15, 10, 5]\n\n### Output:\nimport matplotlib.pyplot as plt\n\nx_values = [\"Python\", \"Java\", \"C++\", \"Javascript\", \"C#\"]\ny_values = [45, 25, 15, 10, 5]\n\nplt.bar(x_values, y_values)\n\nplt.title(\"Popular Programming Languages\")\nplt.ylabel(\"Percentage of Use\")\nplt.xlabel(\"Languages\")\n\nplt.show()"}
{"instruction":"Construct an AI algorithm to identify the sentiment of a given set of comments in Python.","input":"comments = [\"I love the product!\",\n            \"I'm not a fan of this product\"]","output":"import nltk \nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \n\nsid_obj = SentimentIntensityAnalyzer() \n\nfor comment in comments:\n    sentiment_dict = sid_obj.polarity_scores(comment)\n    print(comment, sentiment_dict)\n    \n    \n# Output\nI love the product! {'neg': 0.0, 'neu': 0.424, 'pos': 0.576, 'compound': 0.6369}\nI'm not a fan of this product {'neg': 0.396, 'neu': 0.604, 'pos': 0.0, 'compound': -0.5574}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an AI algorithm to identify the sentiment of a given set of comments in Python.\n\n### Input:\ncomments = [\"I love the product!\",\n            \"I'm not a fan of this product\"]\n\n### Output:\nimport nltk \nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \n\nsid_obj = SentimentIntensityAnalyzer() \n\nfor comment in comments:\n    sentiment_dict = sid_obj.polarity_scores(comment)\n    print(comment, sentiment_dict)\n    \n    \n# Output\nI love the product! {'neg': 0.0, 'neu': 0.424, 'pos': 0.576, 'compound': 0.6369}\nI'm not a fan of this product {'neg': 0.396, 'neu': 0.604, 'pos': 0.0, 'compound': -0.5574}"}
{"instruction":"Write a Python program to split a list into different variables","input":"my_list = [\"Hello\", \"World\", 42]","output":"value1, value2, value3 = my_list\nprint(value1)\nprint(value2)\nprint(value3)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to split a list into different variables\n\n### Input:\nmy_list = [\"Hello\", \"World\", 42]\n\n### Output:\nvalue1, value2, value3 = my_list\nprint(value1)\nprint(value2)\nprint(value3)"}
{"instruction":"Write a function in Python to count how many words are in the given string.","input":"\"Do not stand at my grave and weep\"","output":"def count_words(string):\n    words = string.split(' ')\n    return len(words)\n\nsentence = \"Do not stand at my grave and weep\"\ncount = count_words(sentence)\nprint(\"The given string has {} words.\".format(count))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to count how many words are in the given string.\n\n### Input:\n\"Do not stand at my grave and weep\"\n\n### Output:\ndef count_words(string):\n    words = string.split(' ')\n    return len(words)\n\nsentence = \"Do not stand at my grave and weep\"\ncount = count_words(sentence)\nprint(\"The given string has {} words.\".format(count))"}
{"instruction":"Create a Python program to determine the category of a given number based on predefined criteria.","input":"28\ncriteria = {\n    \"low\": [0,15],\n    \"medium\": [16,30],\n    \"high\": [31,99]\n}","output":"def define_category(num, criteria):\n    if num >= criteria[\"low\"][0] and num <= criteria[\"low\"][1]:\n        return \"low\"\n    elif num >= criteria[\"medium\"][0] and num <= criteria[\"medium\"][1]:\n        return \"medium\"\n    elif num >= criteria[\"high\"][0] and num <= criteria[\"high\"][1]:\n        return \"high\"\n    else:\n        return \"not found\"\n\nnum = 28 \ncriteria = {\n    \"low\": [0,15],\n    \"medium\": [16,30],\n    \"high\": [31,99]\n}\n\ncategory = define_category(num, criteria)\n\nprint(category)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to determine the category of a given number based on predefined criteria.\n\n### Input:\n28\ncriteria = {\n    \"low\": [0,15],\n    \"medium\": [16,30],\n    \"high\": [31,99]\n}\n\n### Output:\ndef define_category(num, criteria):\n    if num >= criteria[\"low\"][0] and num <= criteria[\"low\"][1]:\n        return \"low\"\n    elif num >= criteria[\"medium\"][0] and num <= criteria[\"medium\"][1]:\n        return \"medium\"\n    elif num >= criteria[\"high\"][0] and num <= criteria[\"high\"][1]:\n        return \"high\"\n    else:\n        return \"not found\"\n\nnum = 28 \ncriteria = {\n    \"low\": [0,15],\n    \"medium\": [16,30],\n    \"high\": [31,99]\n}\n\ncategory = define_category(num, criteria)\n\nprint(category)"}
{"instruction":"Write a function to remove a given item from a python list.","input":"[1, 4, 8, 2], 8","output":"def remove_item(lst, item):\n    while item in lst:\n        lst.remove(item)\n    return lst\n\nprint(remove_item([1, 4, 8, 2], 8)) # prints [1, 4, 2]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to remove a given item from a python list.\n\n### Input:\n[1, 4, 8, 2], 8\n\n### Output:\ndef remove_item(lst, item):\n    while item in lst:\n        lst.remove(item)\n    return lst\n\nprint(remove_item([1, 4, 8, 2], 8)) # prints [1, 4, 2]"}
{"instruction":"Write a function in Python that takes an input list, multiplies each item in the list by two, and returns the resulting list.","input":"","output":"def double_list(lst):\n    return [x * 2 for x in lst]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes an input list, multiplies each item in the list by two, and returns the resulting list.\n\n### Input:\n\n\n### Output:\ndef double_list(lst):\n    return [x * 2 for x in lst]"}
{"instruction":"Generate an XOR neural network in Python that has two input nodes and one output layer.","input":"","output":"import numpy as np\n\ndef generate_xor_nn(): \n    model = tf.keras.models.Sequential()\n    model.add(tf.keras.layers.Dense(2, activation=\"relu\", input_dim=2))\n    model.add(tf.keras.layers.Dense(1, activation=\"sigmoid\"))\n    model.compile(optimizer='rmsprop', loss='binary_crossentropy',\n                      metrics=['accuracy'])\n    return model","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an XOR neural network in Python that has two input nodes and one output layer.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\ndef generate_xor_nn(): \n    model = tf.keras.models.Sequential()\n    model.add(tf.keras.layers.Dense(2, activation=\"relu\", input_dim=2))\n    model.add(tf.keras.layers.Dense(1, activation=\"sigmoid\"))\n    model.compile(optimizer='rmsprop', loss='binary_crossentropy',\n                      metrics=['accuracy'])\n    return model"}
{"instruction":"Design a data structure in Python to store integer values.","input":"","output":"class IntList:\n    def __init__(self):\n        self.values = []\n   \n    def add_value(self, value):\n        self.values.append(value)\n    \n    def find_min(self):\n        return min(self.values)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a data structure in Python to store integer values.\n\n### Input:\n\n\n### Output:\nclass IntList:\n    def __init__(self):\n        self.values = []\n   \n    def add_value(self, value):\n        self.values.append(value)\n    \n    def find_min(self):\n        return min(self.values)"}
{"instruction":"Write a python program to find the top 5 most expensive items in the given list of products.","input":"[{\"id\":1, \"name\":\"iPad\", \"price\":500},\n {\"id\":2, \"name\":\"Headphones\", \"price\":200},\n {\"id\":3, \"name\":\"Laptop\", \"price\":1000},\n {\"id\":4, \"name\":\"iPhone\", \"price\":700},\n {\"id\":5, \"name\":\"TV\", \"price\":800}]","output":"import operator\n\nproducts = [{\"id\":1,\"name\":\"iPad\",\"price\":500},{\"id\":2,\"name\":\"Headphones\",\"price\":200},{\"id\":3,\"name\":\"Laptop\",\"price\":1000},{\"id\":4,\"name\":\"iPhone\",\"price\":700},{\"id\":5,\"name\":\"TV\",\"price\":800}]\n\nsorted_products = sorted(products, key=operator.itemgetter('price'), reverse=True)\n\ntop_5_expensive_items = sorted_products[:5]\n\nfor item in top_5_expensive_items:\n    print(\"The most expensive item is \" + item['name'] + \" with a price of \" + str(item['price']) + \".\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to find the top 5 most expensive items in the given list of products.\n\n### Input:\n[{\"id\":1, \"name\":\"iPad\", \"price\":500},\n {\"id\":2, \"name\":\"Headphones\", \"price\":200},\n {\"id\":3, \"name\":\"Laptop\", \"price\":1000},\n {\"id\":4, \"name\":\"iPhone\", \"price\":700},\n {\"id\":5, \"name\":\"TV\", \"price\":800}]\n\n### Output:\nimport operator\n\nproducts = [{\"id\":1,\"name\":\"iPad\",\"price\":500},{\"id\":2,\"name\":\"Headphones\",\"price\":200},{\"id\":3,\"name\":\"Laptop\",\"price\":1000},{\"id\":4,\"name\":\"iPhone\",\"price\":700},{\"id\":5,\"name\":\"TV\",\"price\":800}]\n\nsorted_products = sorted(products, key=operator.itemgetter('price'), reverse=True)\n\ntop_5_expensive_items = sorted_products[:5]\n\nfor item in top_5_expensive_items:\n    print(\"The most expensive item is \" + item['name'] + \" with a price of \" + str(item['price']) + \".\")"}
{"instruction":"Construct a tree data structure in Python to represent a given binary search tree.","input":"","output":"class Node(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef construct_tree(vals):\n    root = Node(vals[0])\n    for val in vals[1:]:\n        node = Node(val)\n        tmp_node = root\n        while True:\n            if node.val > tmp_node.val:\n                if tmp_node.right is None:\n                    tmp_node.right = node\n                    break\n                else:\n                    tmp_node = tmp_node.right\n            else:\n                if tmp_node.left is None:\n                    tmp_node.left = node\n                    break\n                else:\n                    tmp_node = tmp_node.left\n    return root","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a tree data structure in Python to represent a given binary search tree.\n\n### Input:\n\n\n### Output:\nclass Node(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef construct_tree(vals):\n    root = Node(vals[0])\n    for val in vals[1:]:\n        node = Node(val)\n        tmp_node = root\n        while True:\n            if node.val > tmp_node.val:\n                if tmp_node.right is None:\n                    tmp_node.right = node\n                    break\n                else:\n                    tmp_node = tmp_node.right\n            else:\n                if tmp_node.left is None:\n                    tmp_node.left = node\n                    break\n                else:\n                    tmp_node = tmp_node.left\n    return root"}
{"instruction":"Create a software application in Python for predicting heart failure from cardiac data.","input":"Not applicable.","output":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# Load the data\ndata = pd.read_csv('heart_data.csv')\n\n# Split the data into features (X) and the labels (Y)\nX = data.drop('chd', axis=1)\nY = data['chd']\n\n# Split the data into training and testing sets\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=0)\n\n# Create a logistic regression model and train it\nmodel = LogisticRegression()\nmodel.fit(X_train, Y_train)\n\n# Test the model\nY_pred = model.predict(X_test)\nacc = accuracy_score(Y_test, Y_pred)\nprint(acc) # Prints accuracy score","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a software application in Python for predicting heart failure from cardiac data.\n\n### Input:\nNot applicable.\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# Load the data\ndata = pd.read_csv('heart_data.csv')\n\n# Split the data into features (X) and the labels (Y)\nX = data.drop('chd', axis=1)\nY = data['chd']\n\n# Split the data into training and testing sets\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=0)\n\n# Create a logistic regression model and train it\nmodel = LogisticRegression()\nmodel.fit(X_train, Y_train)\n\n# Test the model\nY_pred = model.predict(X_test)\nacc = accuracy_score(Y_test, Y_pred)\nprint(acc) # Prints accuracy score"}
{"instruction":"Debug this python code to find and fix any issues it contains.","input":"def check_anagrams(s1, s2):\n    s1 = s1.lower()\n    s2 = s2.lower()\n    return sorted(s1) == sorted(s2)","output":"def check_anagrams(s1, s2):\n    s1 = s1.lower().replace(\" \", \"\")\n    s2 = s2.lower().replace(\" \", \"\")\n    return sorted(s1) == sorted(s2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDebug this python code to find and fix any issues it contains.\n\n### Input:\ndef check_anagrams(s1, s2):\n    s1 = s1.lower()\n    s2 = s2.lower()\n    return sorted(s1) == sorted(s2)\n\n### Output:\ndef check_anagrams(s1, s2):\n    s1 = s1.lower().replace(\" \", \"\")\n    s2 = s2.lower().replace(\" \", \"\")\n    return sorted(s1) == sorted(s2)"}
{"instruction":"This code defines four models: Event, Rule, Blacklist, and Script. Each model has its own fields and methods. The models are stored in a database table with the specified names. The code also includes the necessary imports and license information.","input":"","output":"#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n#\n#  models.py\n#  \n#  Copyright 2012 Thomas Grainger <tagrain@gmail.com>\n#  \n#  This program is free software; you can redistribute it and\/or modify\n#  it under the terms of the GNU Affero General Public License as\n#  published by the Free Software Foundation; version 3.\n#  \n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU Affero General Public License for more details.\n#  \n#  You should have received a copy of the GNU Affero General Public\n#  License along with this program; if not, write to the Free Software\n#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n#  MA 02110-1301, USA.\n#  \n#\n\nfrom django.db import models\n\nclass Event(models.Model):\n    id = models.BigIntegerField(db_column= \"event_id\", primary_key=True)\n    username = models.CharField(max_length=765)\n    radius_account_id = models.CharField(max_length=765)\n    radius_session_id = models.CharField(max_length=765)\n    radius_info = models.TextField()\n    ip_src = models.CharField(max_length=765)\n    ip_dst = models.CharField(max_length=765)\n    start = models.DateTimeField()\n    finish = models.DateTimeField()\n    alerts = models.BigIntegerField()\n    blacklist = models.ForeignKey(\"Blacklist\", db_column = \"blacklist\")\n    rule = models.ForeignKey(\"Rule\", db_column = \"rule\")\n    rule_class = models.CharField(max_length=93)\n    \n    def __unicode__(self):\n        return \"{username}@{ip_src} accessed {ip_dst} from {start} till {finish}. Rule class: {rule_class}\".format(\n            username = self.username,\n            ip_src = self.ip_src,\n            ip_dst = self.ip_dst,\n            start = self.start,\n            finish = self.finish,\n            rule_class = self.rule_class\n        )\n    \n    class Meta:\n        db_table = u'event'\n        unique_together = (\"username\", \"ip_src\", \"ip_dst\", \"start\", \"finish\")\n\nclass Rule(models.Model):\n    id = models.BigIntegerField(primary_key=True, db_column=\"rule_id\", editable=False)\n    name = models.CharField(max_length=765, db_column = \"rule_name\")\n    hide = models.BooleanField()\n    \n    @models.permalink\n    def get_absolute_url(self):\n        return ('rule', (), {\"pk\":str(self.pk)});\n    \n    \n    def __unicode__(self):\n        return \"{name}[{pk}]\".format(name=self.name, pk=self.pk)\n    \n    class Meta:\n        db_table = u'rules'\n        \nclass Blacklist(models.Model):\n    id = models.BigIntegerField(primary_key=True, db_column=\"bl_id\", editable=False)\n    name = models.CharField(max_length=765, editable=False)\n    url = models.CharField(max_length=765, editable=False)\n    serialized = models.TextField(editable=False)\n    updated = models.DateTimeField(editable=False)\n    hide = models.BooleanField()\n    \n    @models.permalink\n    def get_absolute_url(self):\n        return ('blacklist', (), {\"pk\":str(self.pk)});\n    \n    def __unicode__(self):\n        return self.name\n    \n    class Meta:\n        db_table = u'blacklists'\n\nclass Script(models.Model):\n    id = models.AutoField(primary_key=True, db_column = \"script_id\", editable=False)\n    name = models.CharField(max_length=765)\n    updated = models.DateTimeField(db_column=\"lastupdated\", editable=False)\n    \n    @models.permalink\n    def get_absolute_url(self):\n        return ('script', (), {\"pk\":str(self.pk)});\n    \n    def __unicode__(self):\n        return \"{name}[{pk}]\".format(\n            name=self.name,\n            pk=self.pk\n        ) \n    \n    class Meta:\n        db_table = u'scripts'\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code defines four models: Event, Rule, Blacklist, and Script. Each model has its own fields and methods. The models are stored in a database table with the specified names. The code also includes the necessary imports and license information.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n#\n#  models.py\n#  \n#  Copyright 2012 Thomas Grainger <tagrain@gmail.com>\n#  \n#  This program is free software; you can redistribute it and\/or modify\n#  it under the terms of the GNU Affero General Public License as\n#  published by the Free Software Foundation; version 3.\n#  \n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU Affero General Public License for more details.\n#  \n#  You should have received a copy of the GNU Affero General Public\n#  License along with this program; if not, write to the Free Software\n#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n#  MA 02110-1301, USA.\n#  \n#\n\nfrom django.db import models\n\nclass Event(models.Model):\n    id = models.BigIntegerField(db_column= \"event_id\", primary_key=True)\n    username = models.CharField(max_length=765)\n    radius_account_id = models.CharField(max_length=765)\n    radius_session_id = models.CharField(max_length=765)\n    radius_info = models.TextField()\n    ip_src = models.CharField(max_length=765)\n    ip_dst = models.CharField(max_length=765)\n    start = models.DateTimeField()\n    finish = models.DateTimeField()\n    alerts = models.BigIntegerField()\n    blacklist = models.ForeignKey(\"Blacklist\", db_column = \"blacklist\")\n    rule = models.ForeignKey(\"Rule\", db_column = \"rule\")\n    rule_class = models.CharField(max_length=93)\n    \n    def __unicode__(self):\n        return \"{username}@{ip_src} accessed {ip_dst} from {start} till {finish}. Rule class: {rule_class}\".format(\n            username = self.username,\n            ip_src = self.ip_src,\n            ip_dst = self.ip_dst,\n            start = self.start,\n            finish = self.finish,\n            rule_class = self.rule_class\n        )\n    \n    class Meta:\n        db_table = u'event'\n        unique_together = (\"username\", \"ip_src\", \"ip_dst\", \"start\", \"finish\")\n\nclass Rule(models.Model):\n    id = models.BigIntegerField(primary_key=True, db_column=\"rule_id\", editable=False)\n    name = models.CharField(max_length=765, db_column = \"rule_name\")\n    hide = models.BooleanField()\n    \n    @models.permalink\n    def get_absolute_url(self):\n        return ('rule', (), {\"pk\":str(self.pk)});\n    \n    \n    def __unicode__(self):\n        return \"{name}[{pk}]\".format(name=self.name, pk=self.pk)\n    \n    class Meta:\n        db_table = u'rules'\n        \nclass Blacklist(models.Model):\n    id = models.BigIntegerField(primary_key=True, db_column=\"bl_id\", editable=False)\n    name = models.CharField(max_length=765, editable=False)\n    url = models.CharField(max_length=765, editable=False)\n    serialized = models.TextField(editable=False)\n    updated = models.DateTimeField(editable=False)\n    hide = models.BooleanField()\n    \n    @models.permalink\n    def get_absolute_url(self):\n        return ('blacklist', (), {\"pk\":str(self.pk)});\n    \n    def __unicode__(self):\n        return self.name\n    \n    class Meta:\n        db_table = u'blacklists'\n\nclass Script(models.Model):\n    id = models.AutoField(primary_key=True, db_column = \"script_id\", editable=False)\n    name = models.CharField(max_length=765)\n    updated = models.DateTimeField(db_column=\"lastupdated\", editable=False)\n    \n    @models.permalink\n    def get_absolute_url(self):\n        return ('script', (), {\"pk\":str(self.pk)});\n    \n    def __unicode__(self):\n        return \"{name}[{pk}]\".format(\n            name=self.name,\n            pk=self.pk\n        ) \n    \n    class Meta:\n        db_table = u'scripts'\n"}
{"instruction":"Create a Python program which takes two lists as input and outputs all the elements which appear in both lists.","input":"list1 = [1, 2, 3] \nlist2 = [3, 4, 5]","output":"def list_intersection(list1, list2):\n  return [item for item in list1 if item in list2]\n\nlist1 = [1, 2, 3] \nlist2 = [3, 4, 5]\n\nintersectedList = list_intersection(list1, list2)\n\nprint(intersectedList)\n\n# Output: [3]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program which takes two lists as input and outputs all the elements which appear in both lists.\n\n### Input:\nlist1 = [1, 2, 3] \nlist2 = [3, 4, 5]\n\n### Output:\ndef list_intersection(list1, list2):\n  return [item for item in list1 if item in list2]\n\nlist1 = [1, 2, 3] \nlist2 = [3, 4, 5]\n\nintersectedList = list_intersection(list1, list2)\n\nprint(intersectedList)\n\n# Output: [3]"}
{"instruction":"Write a Python program to convert a given binary number to decimal.","input":"","output":"def binary_to_decimal(binary):\n    decimal, i = 0, 0\n    while binary != 0: \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary\/\/10\n        i += 1\n    return decimal","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a given binary number to decimal.\n\n### Input:\n\n\n### Output:\ndef binary_to_decimal(binary):\n    decimal, i = 0, 0\n    while binary != 0: \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary\/\/10\n        i += 1\n    return decimal"}
{"instruction":"Create a Python script to print the sum of all numbers divisible by 3 or 7 in a list.","input":"[1, 2, 3, 4, 5, 6, 7, 8, 9 ,10, 11, 12, 13, 14]","output":"nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n\ntotal = 0\n\nfor num in nums:\n    if (num % 3 == 0) or (num % 7 == 0):\n        total += num\n\nprint(total)   # Output: 42","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to print the sum of all numbers divisible by 3 or 7 in a list.\n\n### Input:\n[1, 2, 3, 4, 5, 6, 7, 8, 9 ,10, 11, 12, 13, 14]\n\n### Output:\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n\ntotal = 0\n\nfor num in nums:\n    if (num % 3 == 0) or (num % 7 == 0):\n        total += num\n\nprint(total)   # Output: 42"}
{"instruction":"Create a python code to extract the first name from a given full name.","input":"full_name = 'John Smith'","output":"def extractFirstName(full_name):\n    first_name = full_name.split()[0]\n    return first_name\n\n# Input\nfull_name = 'John Smith'\n\n# Output\nresult = extractFirstName(full_name)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python code to extract the first name from a given full name.\n\n### Input:\nfull_name = 'John Smith'\n\n### Output:\ndef extractFirstName(full_name):\n    first_name = full_name.split()[0]\n    return first_name\n\n# Input\nfull_name = 'John Smith'\n\n# Output\nresult = extractFirstName(full_name)\nprint(result)"}
{"instruction":"Implement a Python program to check if a given number is an Armstrong Number","input":"","output":"def checkArmstrong(num):\n    temp = num \n    res = 0\n    while temp > 0: \n       digit = temp % 10\n       res = res + digit ** 3\n       temp = temp \/\/ 10\n    \n    if num == res: \n        return f'{num} is an Armstrong Number'\n    else:\n        return f'{num} is not an Armstrong Number'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python program to check if a given number is an Armstrong Number\n\n### Input:\n\n\n### Output:\ndef checkArmstrong(num):\n    temp = num \n    res = 0\n    while temp > 0: \n       digit = temp % 10\n       res = res + digit ** 3\n       temp = temp \/\/ 10\n    \n    if num == res: \n        return f'{num} is an Armstrong Number'\n    else:\n        return f'{num} is not an Armstrong Number'"}
{"instruction":"Generate a Python program that takes an input string and reverse it.","input":"string = \"Hello world!\"","output":"def reverse(string):\n  return string[::-1]\n  \nstring = \"Hello world!\"\nprint(reverse(string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that takes an input string and reverse it.\n\n### Input:\nstring = \"Hello world!\"\n\n### Output:\ndef reverse(string):\n  return string[::-1]\n  \nstring = \"Hello world!\"\nprint(reverse(string))"}
{"instruction":"Write a Python program to count the number of elements which are greater than the given number?","input":"list1 = [1, 2, 3, 4, 5], number = 3","output":"list1 = [1, 2, 3, 4, 5] \nnumber = 3\n\n#initialize a count\ncount = 0\n\n#iterate through the list and count the elements that are greater than the given number\nfor num in list1:\n    if num > number:\n        count += 1\n\nprint(\"Number of elements greater than the given number:\", count)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to count the number of elements which are greater than the given number?\n\n### Input:\nlist1 = [1, 2, 3, 4, 5], number = 3\n\n### Output:\nlist1 = [1, 2, 3, 4, 5] \nnumber = 3\n\n#initialize a count\ncount = 0\n\n#iterate through the list and count the elements that are greater than the given number\nfor num in list1:\n    if num > number:\n        count += 1\n\nprint(\"Number of elements greater than the given number:\", count)"}
{"instruction":"Write a Python program to remove the vowels from a given sentence.","input":"A beautiful sun rises in the morning.","output":"def removeVowels(my_string): \n    vowels = 'aeiouAEIOU'\n    no_vowels = \"\"\n    for char in my_string:\n        if char not in vowels:\n            no_vowels += char\n    return no_vowels\n\nsentence = \"A beautiful sun rises in the morning.\"\nprint(removeVowels(sentence))\n\nOutput:\nA btfll sn rs s n th mrnn.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to remove the vowels from a given sentence.\n\n### Input:\nA beautiful sun rises in the morning.\n\n### Output:\ndef removeVowels(my_string): \n    vowels = 'aeiouAEIOU'\n    no_vowels = \"\"\n    for char in my_string:\n        if char not in vowels:\n            no_vowels += char\n    return no_vowels\n\nsentence = \"A beautiful sun rises in the morning.\"\nprint(removeVowels(sentence))\n\nOutput:\nA btfll sn rs s n th mrnn."}
{"instruction":"Create a python program to ask the user to enter three numbers and add the two smallest of them","input":"","output":"# Take three numbers from the user \nNum1 = int(input(\"Enter first number: \"))\nNum2 = int(input(\"Enter second number: \"))\nNum3 = int(input(\"Enter third number: \"))\n\n# Find the two smallest numbers \ndef two_smallest_nums(Num1, Num2, Num3):\n  smallest_num = min(Num1, Num2, Num3)\n  mid_num = max( min( Num1, Num2 ), min( Num2, Num3 ) )\n  largest_num = max(Num1, Num2, Num3)\n  \n  # Add the two smallest numbers\n  result = smallest_num + mid_num\n  return result\n\nsum_result = two_smallest_nums(Num1, Num2, Num3)\nprint(\"sum of two smallest numbers = \", sum_result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to ask the user to enter three numbers and add the two smallest of them\n\n### Input:\n\n\n### Output:\n# Take three numbers from the user \nNum1 = int(input(\"Enter first number: \"))\nNum2 = int(input(\"Enter second number: \"))\nNum3 = int(input(\"Enter third number: \"))\n\n# Find the two smallest numbers \ndef two_smallest_nums(Num1, Num2, Num3):\n  smallest_num = min(Num1, Num2, Num3)\n  mid_num = max( min( Num1, Num2 ), min( Num2, Num3 ) )\n  largest_num = max(Num1, Num2, Num3)\n  \n  # Add the two smallest numbers\n  result = smallest_num + mid_num\n  return result\n\nsum_result = two_smallest_nums(Num1, Num2, Num3)\nprint(\"sum of two smallest numbers = \", sum_result)"}
{"instruction":"Generate a Python program that determines whether a given array is a palindrome or not.","input":"[3,2,1,1,2,3]","output":"def is_palindrome(arr):\n    if arr == arr[::-1]:\n        return True\n    return False\n\nresult = is_palindrome([3, 2, 1, 1, 2, 3])\nprint(result) # Output: True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that determines whether a given array is a palindrome or not.\n\n### Input:\n[3,2,1,1,2,3]\n\n### Output:\ndef is_palindrome(arr):\n    if arr == arr[::-1]:\n        return True\n    return False\n\nresult = is_palindrome([3, 2, 1, 1, 2, 3])\nprint(result) # Output: True"}
{"instruction":"Write some Python code to detect bias in text using the Gender Bias Detection software?","input":"The software requires a text string to query.","output":"from gender_bias_detection import detect_bias\n\ntext = \"The software requires a text string to query.\"\n\nbias_signal = detect_bias(text)\n\n# Checking is the detected bias is positive\nif bias_signal > 0:\n  print(\"The text contains gender bias.\")\nelse:\n  print(\"The text does not contain gender bias.\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite some Python code to detect bias in text using the Gender Bias Detection software?\n\n### Input:\nThe software requires a text string to query.\n\n### Output:\nfrom gender_bias_detection import detect_bias\n\ntext = \"The software requires a text string to query.\"\n\nbias_signal = detect_bias(text)\n\n# Checking is the detected bias is positive\nif bias_signal > 0:\n  print(\"The text contains gender bias.\")\nelse:\n  print(\"The text does not contain gender bias.\")"}
{"instruction":"Create a Python program to calculate the 10th Fibonacci number. The program should use a recursive approach to calculate the Fibonacci number.","input":"Not applicable","output":"def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2) \n  \n# Driver Program \n    print(fibonacci(10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the 10th Fibonacci number. The program should use a recursive approach to calculate the Fibonacci number.\n\n### Input:\nNot applicable\n\n### Output:\ndef fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2) \n  \n# Driver Program \n    print(fibonacci(10))"}
{"instruction":"Design a Python class to store information about student records.","input":"","output":"class StudentRecord:\n    def __init__(self, name, age, gender, gpa):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.gpa = gpa\n    def get_name(self):\n        return self.name\n    def get_age(self):\n        return self.age\n    def get_gender(self):\n        return self.gender\n    def get_gpa(self):\n        return self.gpa","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class to store information about student records.\n\n### Input:\n\n\n### Output:\nclass StudentRecord:\n    def __init__(self, name, age, gender, gpa):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.gpa = gpa\n    def get_name(self):\n        return self.name\n    def get_age(self):\n        return self.age\n    def get_gender(self):\n        return self.gender\n    def get_gpa(self):\n        return self.gpa"}
{"instruction":"Create a simple Python web server that responds to requests with a static page. The page should display the current date and time.","input":"Not applicable","output":"import http.server\nimport datetime\n\nport = 8888\n\nclass MyHandler(http.server.BaseHTTPRequestHandler):\n def do_GET(self):\n self.send_response(200)\n self.send_header('Content-type', 'text\/html')\n self.end_headers()\n self.wfile.write((\"\"\"\n<html>\n <head>\n <title>Static page<\/title>\n <\/head>\n <body>\n <p>The time is: {}<\/p>\n <\/body>\n<\/html>\n\"\"\".format(datetime.datetime.now())).encode())\n\ntry:\n server = http.server.HTTPServer(('', port), MyHandler)\n print('Server running at localhost:{}'.format(port))\n server.serve_forever()\nexcept KeyboardInterrupt:\n print('\\nServer stopped')\n server.socket.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple Python web server that responds to requests with a static page. The page should display the current date and time.\n\n### Input:\nNot applicable\n\n### Output:\nimport http.server\nimport datetime\n\nport = 8888\n\nclass MyHandler(http.server.BaseHTTPRequestHandler):\n def do_GET(self):\n self.send_response(200)\n self.send_header('Content-type', 'text\/html')\n self.end_headers()\n self.wfile.write((\"\"\"\n<html>\n <head>\n <title>Static page<\/title>\n <\/head>\n <body>\n <p>The time is: {}<\/p>\n <\/body>\n<\/html>\n\"\"\".format(datetime.datetime.now())).encode())\n\ntry:\n server = http.server.HTTPServer(('', port), MyHandler)\n print('Server running at localhost:{}'.format(port))\n server.serve_forever()\nexcept KeyboardInterrupt:\n print('\\nServer stopped')\n server.socket.close()"}
{"instruction":"Create a machine learning model in Python to predict whether a stock will rise or fall based on its previous day close price.","input":"```\nsample_input_data = [#Previous day close values\n\t\t\t\t\t\t803.14, \n\t\t\t\t\t\t671.3, \n\t\t\t\t\t\t772.53, \n\t\t\t\t\t\t662.16, \n\t\t\t\t\t\t707.08\n\t\t\t\t\t\t]\n```","output":"import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Prepare data\ndf = pd.DataFrame(sample_input_data)\ndf['Target'] = np.where(df.shift(-1) > df, 'Increase', 'Decrease')\n\nX = df.iloc[:, 0:-1]\ny = df.iloc[:, -1]\n\n# Train model\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(X, y)\n\n# Predict stock change\npredictions = clf.predict(X)\nprint(predictions)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python to predict whether a stock will rise or fall based on its previous day close price.\n\n### Input:\n```\nsample_input_data = [#Previous day close values\n\t\t\t\t\t\t803.14, \n\t\t\t\t\t\t671.3, \n\t\t\t\t\t\t772.53, \n\t\t\t\t\t\t662.16, \n\t\t\t\t\t\t707.08\n\t\t\t\t\t\t]\n```\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Prepare data\ndf = pd.DataFrame(sample_input_data)\ndf['Target'] = np.where(df.shift(-1) > df, 'Increase', 'Decrease')\n\nX = df.iloc[:, 0:-1]\ny = df.iloc[:, -1]\n\n# Train model\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(X, y)\n\n# Predict stock change\npredictions = clf.predict(X)\nprint(predictions)"}
{"instruction":"Generate a Python program that takes a number as input and calculates its sum of digits.","input":"Number: 123","output":"n = 123\nsum_of_digits = 0\n\nwhile n > 0:\n    digit = n % 10\n    sum_of_digits += digit\n    n \/\/= 10\n\nprint(\"Sum of digits in 123 is:\", sum_of_digits)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that takes a number as input and calculates its sum of digits.\n\n### Input:\nNumber: 123\n\n### Output:\nn = 123\nsum_of_digits = 0\n\nwhile n > 0:\n    digit = n % 10\n    sum_of_digits += digit\n    n \/\/= 10\n\nprint(\"Sum of digits in 123 is:\", sum_of_digits)"}
{"instruction":"Create an Algorithm in Python for implementing a Binary Search Tree.","input":"Not applicable","output":"class TreeNode:\n \n def __init__(self, val):\n  self.val = val\n  self.left = None\n  self.right = None\n\nclass BST:\n \n def __init__(self):\n  self.root = None\n \n def insert(self, val):\n  node = TreeNode(val)\n  if self.root is None:\n   self.root = node\n  else:\n   self.__insert_helper(self.root, node)\n \n def __insert_helper(self, root, node):\n  if node.val < root.val:\n   if root.left is None:\n    root.left = node\n   else:\n    self.__insert_helper(root.left, node)\n  else:\n   if root.right is None:\n    root.right = node\n   else:\n    self.__insert_helper(root.right, node)\n    \ndef search(self, val):\n node = self.__search_helper(self.root, val)\n return node is not None\n\ndef __search_helper(self, root, val):\n if root is None:\n  return None\n if root.val == val:\n  return root\n if val < root.val:\n  return self.__search_helper(root.left, val)\n else:\n  return self.__search_helper(root.right, val)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an Algorithm in Python for implementing a Binary Search Tree.\n\n### Input:\nNot applicable\n\n### Output:\nclass TreeNode:\n \n def __init__(self, val):\n  self.val = val\n  self.left = None\n  self.right = None\n\nclass BST:\n \n def __init__(self):\n  self.root = None\n \n def insert(self, val):\n  node = TreeNode(val)\n  if self.root is None:\n   self.root = node\n  else:\n   self.__insert_helper(self.root, node)\n \n def __insert_helper(self, root, node):\n  if node.val < root.val:\n   if root.left is None:\n    root.left = node\n   else:\n    self.__insert_helper(root.left, node)\n  else:\n   if root.right is None:\n    root.right = node\n   else:\n    self.__insert_helper(root.right, node)\n    \ndef search(self, val):\n node = self.__search_helper(self.root, val)\n return node is not None\n\ndef __search_helper(self, root, val):\n if root is None:\n  return None\n if root.val == val:\n  return root\n if val < root.val:\n  return self.__search_helper(root.left, val)\n else:\n  return self.__search_helper(root.right, val)"}
{"instruction":"Create a basic implementation of a linked list using Python.","input":"","output":"class Node: \n    def __init__(self, data): \n        self.data = data  \n        self.next = None \n  \nclass LinkedList: \n    def __init__(self):  \n        self.head = None\n  \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head  \n        self.head = new_node  \n  \n    def print_list(self): \n        temp = self.head  \n        while (temp): \n            print (temp.data) \n            temp = temp.next\n  \n # Driver code \nllist = LinkedList() \nllist.push(1) \nllist.push(3) \nllist.push(11) \nllist.push(5) \nllist.push(9) \n  \nllist.print_list()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic implementation of a linked list using Python.\n\n### Input:\n\n\n### Output:\nclass Node: \n    def __init__(self, data): \n        self.data = data  \n        self.next = None \n  \nclass LinkedList: \n    def __init__(self):  \n        self.head = None\n  \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head  \n        self.head = new_node  \n  \n    def print_list(self): \n        temp = self.head  \n        while (temp): \n            print (temp.data) \n            temp = temp.next\n  \n # Driver code \nllist = LinkedList() \nllist.push(1) \nllist.push(3) \nllist.push(11) \nllist.push(5) \nllist.push(9) \n  \nllist.print_list()"}
{"instruction":"Write a Python program to return the greatest common divisor between two numbers.","input":"num1 = 15\nnum2 = 25","output":"def gcd(num1, num2):\nwhile num2 != 0:\n   temp = num1\n   num1 = num2\n   num2 = temp % num2\nreturn num1\n\nprint(gcd(num1,num2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to return the greatest common divisor between two numbers.\n\n### Input:\nnum1 = 15\nnum2 = 25\n\n### Output:\ndef gcd(num1, num2):\nwhile num2 != 0:\n   temp = num1\n   num1 = num2\n   num2 = temp % num2\nreturn num1\n\nprint(gcd(num1,num2))"}
{"instruction":"Write a function in Python that takes a list of integers and returns a new list containing only odd numbers.","input":"[3, 8, 6, 10, 17]","output":"def odd_numbers_list(numbers):\n    return [num for num in numbers if num % 2 != 0]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes a list of integers and returns a new list containing only odd numbers.\n\n### Input:\n[3, 8, 6, 10, 17]\n\n### Output:\ndef odd_numbers_list(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"instruction":"Review this code and make any necessary changes in Python to make it more efficient.","input":"def add_items(items): \n    total = 0 \n    for item in items: \n        total += item \n    return total","output":"def add_items(items): \n    return sum(items)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nReview this code and make any necessary changes in Python to make it more efficient.\n\n### Input:\ndef add_items(items): \n    total = 0 \n    for item in items: \n        total += item \n    return total\n\n### Output:\ndef add_items(items): \n    return sum(items)"}
{"instruction":"Write a Python function to take two input strings, and return the longest common substring of those strings.","input":"input_string1 = \"Hello world\"\ninput_string2 = \"Hello world of coding\"","output":"def longest_substring(input_string1, input_string2): \n    \n     # Create empty list to store all substrings \n    substr = [] \n      \n    # we will find the length of strings \n    len1 = len(input_string1) \n    len2 = len(input_string2) \n      \n    # Iterate through the string \n    for i in range(len1): \n        tmp = \"\" \n        for j in range(len2): \n            if (i + j < len1 and input_string1[i + j] == input_string2[j]): \n                tmp += input_string2[j] \n            else: \n                if (len(tmp) > len(substr)): \n                    substr = tmp  \n                tmp = \"\" \n      \n    # check for lastest substring  \n    if len(tmp) > len(substr): \n        substr = tmp \n          \n    # return longest substring  \n    return substr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to take two input strings, and return the longest common substring of those strings.\n\n### Input:\ninput_string1 = \"Hello world\"\ninput_string2 = \"Hello world of coding\"\n\n### Output:\ndef longest_substring(input_string1, input_string2): \n    \n     # Create empty list to store all substrings \n    substr = [] \n      \n    # we will find the length of strings \n    len1 = len(input_string1) \n    len2 = len(input_string2) \n      \n    # Iterate through the string \n    for i in range(len1): \n        tmp = \"\" \n        for j in range(len2): \n            if (i + j < len1 and input_string1[i + j] == input_string2[j]): \n                tmp += input_string2[j] \n            else: \n                if (len(tmp) > len(substr)): \n                    substr = tmp  \n                tmp = \"\" \n      \n    # check for lastest substring  \n    if len(tmp) > len(substr): \n        substr = tmp \n          \n    # return longest substring  \n    return substr"}
{"instruction":"Create an algorithm in Python to find the largest element in an unsorted list of numbers.","input":"[10, 5, 20, 8, 9, 12]","output":"def find_large_element(lst):\n  largest_number = lst[0]\n  for i in range(1, len(lst)):\n    if lst[i] > largest_number:\n      largest_number = lst[i]\n  return largest_number\n\nmy_list = [10, 5, 20, 8, 9, 12]\nprint(find_large_element(my_list)) # 20","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to find the largest element in an unsorted list of numbers.\n\n### Input:\n[10, 5, 20, 8, 9, 12]\n\n### Output:\ndef find_large_element(lst):\n  largest_number = lst[0]\n  for i in range(1, len(lst)):\n    if lst[i] > largest_number:\n      largest_number = lst[i]\n  return largest_number\n\nmy_list = [10, 5, 20, 8, 9, 12]\nprint(find_large_element(my_list)) # 20"}
{"instruction":"Create a simple neural network using TensorFlow in Python.","input":"","output":"import tensorflow as tf\n\n# declaring the model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(4, activation='relu', input_shape=(2,)),\n    tf.keras.layers.Dense(4, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\n# compiling the model\nmodel.compile(\n    optimizer='adam', \n    loss='binary_crossentropy',\n    metrics=['accuracy']\n)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple neural network using TensorFlow in Python.\n\n### Input:\n\n\n### Output:\nimport tensorflow as tf\n\n# declaring the model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(4, activation='relu', input_shape=(2,)),\n    tf.keras.layers.Dense(4, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\n# compiling the model\nmodel.compile(\n    optimizer='adam', \n    loss='binary_crossentropy',\n    metrics=['accuracy']\n)"}
{"instruction":"Identify the bug in the following Python code snippet and suggestion a fix.","input":"def updateList(myList):\n myList = myList + [1]\n\nmyList = [1, 2, 3]\nupdateList(myList)\nprint(myList)","output":"def updateList(myList):\n myList.append(1)\n \nmyList = [1, 2, 3]\nupdateList(myList)\nprint(myList)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIdentify the bug in the following Python code snippet and suggestion a fix.\n\n### Input:\ndef updateList(myList):\n myList = myList + [1]\n\nmyList = [1, 2, 3]\nupdateList(myList)\nprint(myList)\n\n### Output:\ndef updateList(myList):\n myList.append(1)\n \nmyList = [1, 2, 3]\nupdateList(myList)\nprint(myList)"}
{"instruction":"Create a Python program to calculate the average cost of a meal for a given restaurant.","input":"Menu: Burger, Fries, Soda - $6.50; Pizza, Salad, Soda - $10.00.","output":"# Calculate average cost of a meal\n\n# List of meals. Each meal is represented as a tuple (name, cost)\nmeals = [('Burger', 6.50), ('Fries', 2.50), ('Soda', 1.00),\n ('Pizza', 8.00), ('Salad', 3.00), ('Soda', 1.00)]\n\n# Calculate the total cost of all meals\ntotal_cost = sum(cost for _, cost in meals)\n\n# Calculate the average cost of a meal\naverage_cost = total_cost \/ len(meals)\n\nprint('Average cost of a meal: $' + str(average_cost)) # Output: Average cost of a meal: $5.083333333333334","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the average cost of a meal for a given restaurant.\n\n### Input:\nMenu: Burger, Fries, Soda - $6.50; Pizza, Salad, Soda - $10.00.\n\n### Output:\n# Calculate average cost of a meal\n\n# List of meals. Each meal is represented as a tuple (name, cost)\nmeals = [('Burger', 6.50), ('Fries', 2.50), ('Soda', 1.00),\n ('Pizza', 8.00), ('Salad', 3.00), ('Soda', 1.00)]\n\n# Calculate the total cost of all meals\ntotal_cost = sum(cost for _, cost in meals)\n\n# Calculate the average cost of a meal\naverage_cost = total_cost \/ len(meals)\n\nprint('Average cost of a meal: $' + str(average_cost)) # Output: Average cost of a meal: $5.083333333333334"}
{"instruction":"Develop a Python function to calculate mean, median and mode of a dataset.","input":"[1, 2, 2, 3, 5, 8, 10]","output":"def calculateMeanMedianMode(lst):\n    lst.sort()\n    length = len(lst)\n    mean = sum(lst) \/ length\n    if length % 2 == 0:\n        idx1 = (length \/ 2) - 1\n        idx2 = length \/ 2\n        median = (lst[int(idx1)] + lst[int(idx2)]) \/ 2\n    else:\n        median = lst[int(length \/ 2)]\n\n    count = 0\n    max_occurance = 0\n    for i in range(length):\n        if lst[i] == lst[i + 1]:\n            count += 1\n            if count > max_occurance:\n                max_occurance = count\n                mode = lst[i]\n        else:\n            count = 0\n    return mean, median, mode\n\nmean, median, mode = calculateMeanMedianMode([1, 2, 2, 3, 5, 8, 10])\nprint(\"Mean: \", mean)\nprint(\"Median: \", median)\nprint(\"Mode: \", mode)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function to calculate mean, median and mode of a dataset.\n\n### Input:\n[1, 2, 2, 3, 5, 8, 10]\n\n### Output:\ndef calculateMeanMedianMode(lst):\n    lst.sort()\n    length = len(lst)\n    mean = sum(lst) \/ length\n    if length % 2 == 0:\n        idx1 = (length \/ 2) - 1\n        idx2 = length \/ 2\n        median = (lst[int(idx1)] + lst[int(idx2)]) \/ 2\n    else:\n        median = lst[int(length \/ 2)]\n\n    count = 0\n    max_occurance = 0\n    for i in range(length):\n        if lst[i] == lst[i + 1]:\n            count += 1\n            if count > max_occurance:\n                max_occurance = count\n                mode = lst[i]\n        else:\n            count = 0\n    return mean, median, mode\n\nmean, median, mode = calculateMeanMedianMode([1, 2, 2, 3, 5, 8, 10])\nprint(\"Mean: \", mean)\nprint(\"Median: \", median)\nprint(\"Mode: \", mode)"}
{"instruction":"Construct a Python dictionary that has the value \"hello\" assigned to the key \"word\".","input":"","output":"my_dict = {\n    \"word\": \"hello\"\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python dictionary that has the value \"hello\" assigned to the key \"word\".\n\n### Input:\n\n\n### Output:\nmy_dict = {\n    \"word\": \"hello\"\n}"}
{"instruction":"Write a Python program to count the number of digits in an integer.","input":"number = 9923","output":"def count_digits(number):\n    count = 0\n    while (number != 0): \n        count=count+1\n        number = number\/\/10\n    return count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to count the number of digits in an integer.\n\n### Input:\nnumber = 9923\n\n### Output:\ndef count_digits(number):\n    count = 0\n    while (number != 0): \n        count=count+1\n        number = number\/\/10\n    return count"}
{"instruction":"Develop a Python script to extract some text from a website.","input":"Website URL: http:\/\/example.com","output":"import requests\nfrom bs4 import BeautifulSoup\n \nresponse = requests.get(\"http:\/\/example.com\")\n \nsoup = BeautifulSoup(response.content, \"html.parser\")\n \ntext = soup.get_text()\nprint(text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to extract some text from a website.\n\n### Input:\nWebsite URL: http:\/\/example.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n \nresponse = requests.get(\"http:\/\/example.com\")\n \nsoup = BeautifulSoup(response.content, \"html.parser\")\n \ntext = soup.get_text()\nprint(text)"}
{"instruction":"Implement a logistic regression classifier in python to classify handwritten digits from the MNIST dataset.","input":"MNIST dataset","output":"import numpy as np\nimport matplotlib.pyplot as plt\nimport gzip\nimport pickle\n\n# load training data\nwith gzip.open('.\/mnist_dataset\/mnist.pkl.gz', 'rb') as f:\n    train_data,valid_data,test_data  = pickle.load(f, encoding='latin1')\n\n# prepare logistic regression\nX_train, y_train = train_data[0], train_data[1]\nX_valid, y_valid = valid_data[0], valid_data[1]\nX_test, y_test = test_data[0], test_data[1]\n\nX_train = np.hstack([np.ones([X_train.shape[0],1]), X_train])\nX_valid = np.hstack([np.ones([X_valid.shape[0],1]), X_valid])\nX_test = np.hstack([np.ones([X_test.shape[0],1]), X_test])\n\ndef sigmoid(z):\n    return 1.0\/(1.0+np.exp(-z))\n\ndef LogisticRegression(X, y, max_iter, alpha):\n    m, n = X.shape\n    weights = np.zeros(n)\n    \n    for _ in range(max_iter):\n        weights = weights - alpha * (1\/m) * (X.T @ (sigmoid(X @ weights) - y))\n\n    return weights\n\nweights = LogisticRegression(X_train, y_train, 1000, 0.001)\n\n# accuracy on training set\npredictions = np.round(sigmoid(X_train @ weights))\ntrain_accuracy = np.mean(predictions == y_train)\n\n# accuracy on validation set\npredictions = np.round(sigmoid(X_valid @ weights))\nvalid_accuracy = np.mean(predictions == y_valid)\n\n# accuracy on test set\npredictions = np.round(sigmoid(X_test @ weights))\ntest_accuracy = np.mean(predictions == y_test)\n\nprint('Train accuracy = ', train_accuracy)\nprint('Validation accuracy = ', valid_accuracy)\nprint('Test accuracy = ', test_accuracy)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a logistic regression classifier in python to classify handwritten digits from the MNIST dataset.\n\n### Input:\nMNIST dataset\n\n### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport gzip\nimport pickle\n\n# load training data\nwith gzip.open('.\/mnist_dataset\/mnist.pkl.gz', 'rb') as f:\n    train_data,valid_data,test_data  = pickle.load(f, encoding='latin1')\n\n# prepare logistic regression\nX_train, y_train = train_data[0], train_data[1]\nX_valid, y_valid = valid_data[0], valid_data[1]\nX_test, y_test = test_data[0], test_data[1]\n\nX_train = np.hstack([np.ones([X_train.shape[0],1]), X_train])\nX_valid = np.hstack([np.ones([X_valid.shape[0],1]), X_valid])\nX_test = np.hstack([np.ones([X_test.shape[0],1]), X_test])\n\ndef sigmoid(z):\n    return 1.0\/(1.0+np.exp(-z))\n\ndef LogisticRegression(X, y, max_iter, alpha):\n    m, n = X.shape\n    weights = np.zeros(n)\n    \n    for _ in range(max_iter):\n        weights = weights - alpha * (1\/m) * (X.T @ (sigmoid(X @ weights) - y))\n\n    return weights\n\nweights = LogisticRegression(X_train, y_train, 1000, 0.001)\n\n# accuracy on training set\npredictions = np.round(sigmoid(X_train @ weights))\ntrain_accuracy = np.mean(predictions == y_train)\n\n# accuracy on validation set\npredictions = np.round(sigmoid(X_valid @ weights))\nvalid_accuracy = np.mean(predictions == y_valid)\n\n# accuracy on test set\npredictions = np.round(sigmoid(X_test @ weights))\ntest_accuracy = np.mean(predictions == y_test)\n\nprint('Train accuracy = ', train_accuracy)\nprint('Validation accuracy = ', valid_accuracy)\nprint('Test accuracy = ', test_accuracy)"}
{"instruction":"Create a text analysis library in Python that utilizes a Transformer model to tokenize words and labels the sentiment of each token","input":"text = \"This was a great experience.\"","output":"# Import the required packages\nimport nltk\nfrom transformers import *\n\n# Load the pretrained model\nmodel = BertTokenizer.from_pretrained('bert-base-cased')\n\n# Tokenize the input text\ninput_ids = model.encode(text)\n\n# Construct the text analysis library\ntext_analysis = {\n    'tokens': model.convert_ids_to_tokens(input_ids),\n    'sentiments': model.polarity_scores(input_ids)\n}\n\n# Print the library\nprint(text_analysis)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a text analysis library in Python that utilizes a Transformer model to tokenize words and labels the sentiment of each token\n\n### Input:\ntext = \"This was a great experience.\"\n\n### Output:\n# Import the required packages\nimport nltk\nfrom transformers import *\n\n# Load the pretrained model\nmodel = BertTokenizer.from_pretrained('bert-base-cased')\n\n# Tokenize the input text\ninput_ids = model.encode(text)\n\n# Construct the text analysis library\ntext_analysis = {\n    'tokens': model.convert_ids_to_tokens(input_ids),\n    'sentiments': model.polarity_scores(input_ids)\n}\n\n# Print the library\nprint(text_analysis)"}
{"instruction":"In Jupyter notebook, create a customized menu for quick access to all necessary resources, such as loading data, processing text, or visualizing data.","input":"Not applicable","output":"from IPython.utils.traitlets import \n\nclass CustomMenu(IPython.config.configurable.Configurable):\n    \"\"\"A customizable menu container\n    \"\"\"\n    def __init__(self):\n        super(CustomMenu, self).__init__(config=None)\n        self._buttons = []\n \n    def add_button(self, label, action):\n        \"\"\"Add a new button to the menu\n        \"\"\"\n        self._buttons.append((label,action))\n \n    def _render_menu(self):\n        \"\"\"Renders the button\n        \"\"\"\n        html = []\n        for label, action in self._buttons:\n            html.append('<a href=\"javascript:{}\">{}<\/a>'.format(action,label))\n        return '&nbsp;'.join(html)\n \n    def _ipython_display_(self):\n        \"\"\"Renders the menubar\n        \"\"\"\n        display(IPython.core.display.HTML(self._render_menu()))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Jupyter notebook, create a customized menu for quick access to all necessary resources, such as loading data, processing text, or visualizing data.\n\n### Input:\nNot applicable\n\n### Output:\nfrom IPython.utils.traitlets import \n\nclass CustomMenu(IPython.config.configurable.Configurable):\n    \"\"\"A customizable menu container\n    \"\"\"\n    def __init__(self):\n        super(CustomMenu, self).__init__(config=None)\n        self._buttons = []\n \n    def add_button(self, label, action):\n        \"\"\"Add a new button to the menu\n        \"\"\"\n        self._buttons.append((label,action))\n \n    def _render_menu(self):\n        \"\"\"Renders the button\n        \"\"\"\n        html = []\n        for label, action in self._buttons:\n            html.append('<a href=\"javascript:{}\">{}<\/a>'.format(action,label))\n        return '&nbsp;'.join(html)\n \n    def _ipython_display_(self):\n        \"\"\"Renders the menubar\n        \"\"\"\n        display(IPython.core.display.HTML(self._render_menu()))"}
{"instruction":"Make a program in Python that takes a list of integers as input and prints the average, maximum, and minimum.","input":"[1, 7, 4, 6]","output":"def calculate_avg_max_min(list_of_int):\n    avg = sum(list_of_int) \/ len(list_of_int)\n    maximum = max(list_of_int)\n    minimum = min(list_of_int)\n    return avg, maximum, minimum\n\nlist_of_int = [1, 7, 4, 6]\navg, max_int, min_int = calculate_avg_max_min(list_of_int)\nprint(\"Average =\", avg)\nprint(\"Maximum =\", max_int)\nprint(\"Minimum =\", min_int)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a program in Python that takes a list of integers as input and prints the average, maximum, and minimum.\n\n### Input:\n[1, 7, 4, 6]\n\n### Output:\ndef calculate_avg_max_min(list_of_int):\n    avg = sum(list_of_int) \/ len(list_of_int)\n    maximum = max(list_of_int)\n    minimum = min(list_of_int)\n    return avg, maximum, minimum\n\nlist_of_int = [1, 7, 4, 6]\navg, max_int, min_int = calculate_avg_max_min(list_of_int)\nprint(\"Average =\", avg)\nprint(\"Maximum =\", max_int)\nprint(\"Minimum =\", min_int)"}
{"instruction":"Rewrite the following Javascript code as a Python code that solves the same problem.\n\nGiven an array of numbers, find the square root of each number and print it.","input":"[2, 3, 4, 5]","output":"import math\n\nnumbers = [2, 3, 4, 5]\n\nfor number in numbers:\n print(math.sqrt(number))\n\n# Output\n# 1.414\n# 1.732\n# 2.000\n# 2.236","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following Javascript code as a Python code that solves the same problem.\n\nGiven an array of numbers, find the square root of each number and print it.\n\n### Input:\n[2, 3, 4, 5]\n\n### Output:\nimport math\n\nnumbers = [2, 3, 4, 5]\n\nfor number in numbers:\n print(math.sqrt(number))\n\n# Output\n# 1.414\n# 1.732\n# 2.000\n# 2.236"}
{"instruction":"Create a solution that detects the presence of a character in a string.","input":"Python","output":"def detect_character(string, char):\n    for ch in string:\n        if ch == char:\n            return True\n    return False\n\nstring = 'Python'\nchar = 'y'\nprint(detect_character(string, char))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a solution that detects the presence of a character in a string.\n\n### Input:\nPython\n\n### Output:\ndef detect_character(string, char):\n    for ch in string:\n        if ch == char:\n            return True\n    return False\n\nstring = 'Python'\nchar = 'y'\nprint(detect_character(string, char))"}
{"instruction":"Write an efficient Python program to search for an element in a list of integers.","input":"","output":"def search_element(l, x):\n    for i in range(len(l)):\n        if l[i] == x:\n            return i\n    return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an efficient Python program to search for an element in a list of integers.\n\n### Input:\n\n\n### Output:\ndef search_element(l, x):\n    for i in range(len(l)):\n        if l[i] == x:\n            return i\n    return -1"}
{"instruction":"Create a code solution in Python to generate a random grid of characters.","input":"Not applicable","output":"import random\n\n# Generate grid of characters\ngrid_rows = 3\ngrid_cols = 5\n\ngrid = []\nfor row in range(grid_rows):\n row_data = []\n\nfor col in range(grid_cols):\n row_data.append(random.choice(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n\ngrid.append(row_data)\n\nprint(grid)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code solution in Python to generate a random grid of characters.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\n# Generate grid of characters\ngrid_rows = 3\ngrid_cols = 5\n\ngrid = []\nfor row in range(grid_rows):\n row_data = []\n\nfor col in range(grid_cols):\n row_data.append(random.choice(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n\ngrid.append(row_data)\n\nprint(grid)"}
{"instruction":"Create a Caesar Cipher encryption method in Python.","input":"","output":"def caesar_cipher_encrypt(plain_text, shift): \n    cipher_text = \"\" \n\n    for char in plain_text: \n        if char == ' ': \n            cipher_text += char \n        elif  char.isupper(): \n            cipher_text += chr((ord(char) + shift - 65) % 26 + 65) \n        else: \n            cipher_text += chr((ord(char) + shift - 97) % 26 + 97) \n  \n    return cipher_text","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Caesar Cipher encryption method in Python.\n\n### Input:\n\n\n### Output:\ndef caesar_cipher_encrypt(plain_text, shift): \n    cipher_text = \"\" \n\n    for char in plain_text: \n        if char == ' ': \n            cipher_text += char \n        elif  char.isupper(): \n            cipher_text += chr((ord(char) + shift - 65) % 26 + 65) \n        else: \n            cipher_text += chr((ord(char) + shift - 97) % 26 + 97) \n  \n    return cipher_text"}
{"instruction":"Write a function to display a given number of random items from a list in Python.","input":"<List: [\"dog\", \"cat\", \"bird\", \"fish\"]\nNumber of items: 3>","output":"import random\n\ndef display_random_items(lst, num):\n random.shuffle(lst)\n return lst[:num]\n\nlst = [\"dog\", \"cat\", \"bird\", \"fish\"]\nnum = 3\n\nrandom_items = display_random_items(lst, num)\nprint(random_items)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to display a given number of random items from a list in Python.\n\n### Input:\n<List: [\"dog\", \"cat\", \"bird\", \"fish\"]\nNumber of items: 3>\n\n### Output:\nimport random\n\ndef display_random_items(lst, num):\n random.shuffle(lst)\n return lst[:num]\n\nlst = [\"dog\", \"cat\", \"bird\", \"fish\"]\nnum = 3\n\nrandom_items = display_random_items(lst, num)\nprint(random_items)"}
{"instruction":"Build a Python program to print out the 3 largest odd numbers in a given list.","input":"[4, 7, -1, 2, 8, 5]","output":"list_of_nums = [4, 7, -1, 2, 8, 5]\n\nlargest_odd_numbers = []\n\nfor num in list_of_nums:\n    if num % 2 != 0 and len(largest_odd_numbers) < 3:\n        largest_odd_numbers.append(num)\n\nlargest_odd_numbers.sort()\nprint (largest_odd_numbers)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python program to print out the 3 largest odd numbers in a given list.\n\n### Input:\n[4, 7, -1, 2, 8, 5]\n\n### Output:\nlist_of_nums = [4, 7, -1, 2, 8, 5]\n\nlargest_odd_numbers = []\n\nfor num in list_of_nums:\n    if num % 2 != 0 and len(largest_odd_numbers) < 3:\n        largest_odd_numbers.append(num)\n\nlargest_odd_numbers.sort()\nprint (largest_odd_numbers)"}
{"instruction":"Visualize the number of sales a retail shop has made over the last 3 months in Python.","input":"Quantity of Sales in each Month","output":"import matplotlib.pyplot as plt\n\n# Data for plotting\nmonth1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsales1 = [10, 40, 20, 30, 45, 55, 36, 27, 28, 20]\n\nmonth2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsales2 = [2, 32, 15, 12, 18, 50, 46, 34, 28, 25]\n\nmonth3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsales3 = [20, 15, 18, 17, 33, 55, 65, 64, 45, 35]\n\n# Visualizing data\nfig, ax = plt.subplots(1, 1)\n\nax.plot(month1, sales1, color='blue', label='Month 1')\nax.plot(month2, sales2, color='red', label='Month 2')\nax.plot(month3, sales3, color='green', label='Month 3')\n\nplt.title('Retail Shop Sales Data')\nplt.xlabel('Month')\nplt.ylabel('Quantity of Sales')\nplt.legend()\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nVisualize the number of sales a retail shop has made over the last 3 months in Python.\n\n### Input:\nQuantity of Sales in each Month\n\n### Output:\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nmonth1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsales1 = [10, 40, 20, 30, 45, 55, 36, 27, 28, 20]\n\nmonth2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsales2 = [2, 32, 15, 12, 18, 50, 46, 34, 28, 25]\n\nmonth3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsales3 = [20, 15, 18, 17, 33, 55, 65, 64, 45, 35]\n\n# Visualizing data\nfig, ax = plt.subplots(1, 1)\n\nax.plot(month1, sales1, color='blue', label='Month 1')\nax.plot(month2, sales2, color='red', label='Month 2')\nax.plot(month3, sales3, color='green', label='Month 3')\n\nplt.title('Retail Shop Sales Data')\nplt.xlabel('Month')\nplt.ylabel('Quantity of Sales')\nplt.legend()\nplt.show()"}
{"instruction":"Write a Python program to print a Welcome message for the user.","input":"Username: John","output":"print(\"Welcome John!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print a Welcome message for the user.\n\n### Input:\nUsername: John\n\n### Output:\nprint(\"Welcome John!\")"}
{"instruction":"Construct a python program to create a dictionary encryption for a user-inputted string and display the encrypted text","input":"","output":"def encrypt_string(string):\n    letters = {}\n    for i in range(len(string)):\n        letters[string[i]] = i\n    encrypted_text = \"\"\n    for char in string:\n        encrypted_text += str(letters[char])\n    return encrypted_text","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a python program to create a dictionary encryption for a user-inputted string and display the encrypted text\n\n### Input:\n\n\n### Output:\ndef encrypt_string(string):\n    letters = {}\n    for i in range(len(string)):\n        letters[string[i]] = i\n    encrypted_text = \"\"\n    for char in string:\n        encrypted_text += str(letters[char])\n    return encrypted_text"}
{"instruction":"Develop a Python Program for the following task:","input":"Given an array of integers, count the number of subarrays where all elements are odd","output":"def count_odd_subarrays(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            is_all_odd = True\n            for k in range(i, j + 1):\n                if nums[k] % 2 == 0:\n                    is_all_odd = False\n                    break\n            if is_all_odd:\n                count += 1\n    return count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python Program for the following task:\n\n### Input:\nGiven an array of integers, count the number of subarrays where all elements are odd\n\n### Output:\ndef count_odd_subarrays(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            is_all_odd = True\n            for k in range(i, j + 1):\n                if nums[k] % 2 == 0:\n                    is_all_odd = False\n                    break\n            if is_all_odd:\n                count += 1\n    return count"}
{"instruction":"Generate a python program for validating a phone number.","input":"Phone numbers should be in 10-digit format (no dashes, hyphens, etc.).","output":"def valid_phone_number(phone):\n    phone = str(phone)\n    return len(phone) == 10 and phone.isdigit()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program for validating a phone number.\n\n### Input:\nPhone numbers should be in 10-digit format (no dashes, hyphens, etc.).\n\n### Output:\ndef valid_phone_number(phone):\n    phone = str(phone)\n    return len(phone) == 10 and phone.isdigit()"}
{"instruction":"Write a Python program to generate random numbers in a specified range.","input":"Range: 0 to 1000","output":"import random \n  \n# Generates a random integer between 0 and 1000 \nx = random.randint(0,1000) \n  \nprint(x)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate random numbers in a specified range.\n\n### Input:\nRange: 0 to 1000\n\n### Output:\nimport random \n  \n# Generates a random integer between 0 and 1000 \nx = random.randint(0,1000) \n  \nprint(x)"}
{"instruction":"Write a function in Python that takes an array of integer values and reverses the order of the values.","input":"[1, 2, 3, 4, 5]","output":"def reverse_array(arr):\n  return arr[::-1]  # Returns a slice of the list in reverse order","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes an array of integer values and reverses the order of the values.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef reverse_array(arr):\n  return arr[::-1]  # Returns a slice of the list in reverse order"}
{"instruction":"Create a python program to return the element most frequently occurring in a list?","input":"","output":"def most_frequent(lst):\n    count = 0\n    max_element = 0\n    for element in lst:\n        curr_count = lst.count(element)\n        if curr_count > count:\n            count = curr_count\n            max_element = element\n    return max_element","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to return the element most frequently occurring in a list?\n\n### Input:\n\n\n### Output:\ndef most_frequent(lst):\n    count = 0\n    max_element = 0\n    for element in lst:\n        curr_count = lst.count(element)\n        if curr_count > count:\n            count = curr_count\n            max_element = element\n    return max_element"}
{"instruction":"Write a Python program to calculate the difference between the lowest and highest value for an array of integers.","input":"[12, 24, 3, 8, -1]","output":"def diffHighestLowest(arr):\n    lowest = min(arr)\n    highest = max(arr)\n    return highest - lowest\n\narr = [12, 24, 3, 8, -1]\ndifference = diffHighestLowest(arr)\nprint(difference)  # 25","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the difference between the lowest and highest value for an array of integers.\n\n### Input:\n[12, 24, 3, 8, -1]\n\n### Output:\ndef diffHighestLowest(arr):\n    lowest = min(arr)\n    highest = max(arr)\n    return highest - lowest\n\narr = [12, 24, 3, 8, -1]\ndifference = diffHighestLowest(arr)\nprint(difference)  # 25"}
{"instruction":"Develop a linear regression model in Python to predict housing prices.","input":"","output":"import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Create feature and target vector\nX=np.array([num_bedrooms, size_sqft, num_bathrooms, age]).T\ny=np.array([price]).T\n\n# Create and train the model\nmodel = LinearRegression().fit(X, y)\n\n# Output the result\nprint('Coefficients:', model.coef_)\nprint('Intercept:', model.intercept_)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a linear regression model in Python to predict housing prices.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Create feature and target vector\nX=np.array([num_bedrooms, size_sqft, num_bathrooms, age]).T\ny=np.array([price]).T\n\n# Create and train the model\nmodel = LinearRegression().fit(X, y)\n\n# Output the result\nprint('Coefficients:', model.coef_)\nprint('Intercept:', model.intercept_)"}
{"instruction":"Design a GUI in Python to display data in tabular format and the ability to sort by column.","input":"","output":"import tkinter as tk\n \n# Set up the root window\nroot = tk.Tk()\n \n# Create the table\ntable = tk.Frame(root)\ntable.grid(row=0, column=0)\n \n# Set the row and column numbers\nrows = 5\ncolumns = 5\n \n# Create the label for column 0\nfor i in range(rows):\n    for j in range(1, columns):\n        b = tk.Entry(table, text=\"\") \n        b.grid(row=i, column=j, sticky=\"nsew\")\n \n# Sort by column\ndef sortByColumn(col):\n    list = table.grid_slaves()\n    sortlist = []\n    for l in list:\n        if int(l.grid_info()[\"column\"]) == col:\n            sortlist.append(l.get())\n    sortlist = sorted(sortlist)\n \n    i = 0\n    for l in list:\n        if int(l.grid_info()[\"column\"]) == col:\n            l.delete(0, \"end\")\n            l.insert(0, sortlist[i])\n            i += 1\n \n# Create the button to initiate the sort\nfor c in range(1, columns):\n    tk.Button(table, text=\"Sort\", command=lambda c=c: sortByColumn(c)).grid(row=rows, column=c)\n \n# Diplay the root window \nroot.mainloop()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a GUI in Python to display data in tabular format and the ability to sort by column.\n\n### Input:\n\n\n### Output:\nimport tkinter as tk\n \n# Set up the root window\nroot = tk.Tk()\n \n# Create the table\ntable = tk.Frame(root)\ntable.grid(row=0, column=0)\n \n# Set the row and column numbers\nrows = 5\ncolumns = 5\n \n# Create the label for column 0\nfor i in range(rows):\n    for j in range(1, columns):\n        b = tk.Entry(table, text=\"\") \n        b.grid(row=i, column=j, sticky=\"nsew\")\n \n# Sort by column\ndef sortByColumn(col):\n    list = table.grid_slaves()\n    sortlist = []\n    for l in list:\n        if int(l.grid_info()[\"column\"]) == col:\n            sortlist.append(l.get())\n    sortlist = sorted(sortlist)\n \n    i = 0\n    for l in list:\n        if int(l.grid_info()[\"column\"]) == col:\n            l.delete(0, \"end\")\n            l.insert(0, sortlist[i])\n            i += 1\n \n# Create the button to initiate the sort\nfor c in range(1, columns):\n    tk.Button(table, text=\"Sort\", command=lambda c=c: sortByColumn(c)).grid(row=rows, column=c)\n \n# Diplay the root window \nroot.mainloop()"}
{"instruction":"Write a Python program to print the key of the element in a dictionary that has the maximum value.","input":"{'a': 3, 'b': 6, 'c': 9, 'd': 12}","output":"dictionary = {'a': 3, 'b': 6, 'c': 9, 'd': 12}\n\nmax_value = max(dictionary.values())\nfor key, value in dictionary.items():\n if value == max_value:\n print(key)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print the key of the element in a dictionary that has the maximum value.\n\n### Input:\n{'a': 3, 'b': 6, 'c': 9, 'd': 12}\n\n### Output:\ndictionary = {'a': 3, 'b': 6, 'c': 9, 'd': 12}\n\nmax_value = max(dictionary.values())\nfor key, value in dictionary.items():\n if value == max_value:\n print(key)"}
{"instruction":"Write a Python program to update the values in a nested dictionary based on a given value.","input":"my_dict = {\n    'list1': {\n        'list1_1': 10,\n        'list1_2': 20\n    },\n    'list2': {\n        'list2_1': {\n            'list2_1_1': 30\n        }\n        'list2_2': 40\n    }\n}\nvalue = 25","output":"my_dict = {\n    'list1': {\n        'list1_1': 25,\n        'list1_2': 25\n    },\n    'list2': {\n        'list2_1': {\n            'list2_1_1': 25\n        }\n        'list2_2': 25\n    }\n}\n\ndef update_values(dictionary, value):\n for key, value in dictionary.items():\n if isinstance(value, dict):\n update_values(value, value)\n else:\n dictionary[key] = value\n\nupdate_values(my_dict, value)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to update the values in a nested dictionary based on a given value.\n\n### Input:\nmy_dict = {\n    'list1': {\n        'list1_1': 10,\n        'list1_2': 20\n    },\n    'list2': {\n        'list2_1': {\n            'list2_1_1': 30\n        }\n        'list2_2': 40\n    }\n}\nvalue = 25\n\n### Output:\nmy_dict = {\n    'list1': {\n        'list1_1': 25,\n        'list1_2': 25\n    },\n    'list2': {\n        'list2_1': {\n            'list2_1_1': 25\n        }\n        'list2_2': 25\n    }\n}\n\ndef update_values(dictionary, value):\n for key, value in dictionary.items():\n if isinstance(value, dict):\n update_values(value, value)\n else:\n dictionary[key] = value\n\nupdate_values(my_dict, value)"}
{"instruction":"Create an algorithm in Python that receives an array of integers and returns an array with the unique values of the input array.","input":"","output":"def unique(arr): \n    uniq_arr = []\n    for x in arr:\n        if x not in uniq_arr: \n            uniq_arr.append(x) \n    return uniq_arr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that receives an array of integers and returns an array with the unique values of the input array.\n\n### Input:\n\n\n### Output:\ndef unique(arr): \n    uniq_arr = []\n    for x in arr:\n        if x not in uniq_arr: \n            uniq_arr.append(x) \n    return uniq_arr"}
{"instruction":"Write a python program to perform sentiment analysis on a dataset of customer comments.","input":"","output":"# Import libraries\nimport pandas as pd\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nnltk.download('vader_lexicon')\n\n# Read the customer comments into a dataframe \ndf = pd.read_csv('customer_comments.csv')\ndf.head()\n\n# Create an instance of the SentimentIntensityAnalyzer\nsia = SentimentIntensityAnalyzer()\n\n# Loop over comments in the dataframe and compute sentiment scores\nfor comment in df[\"comment\"]:\n    sentiment=sia.polarity_scores(comment)['compound']\n    df.loc[df[\"comment\"]==comment,\"sentiment\"]=sentiment\n    \n# Print the results\nprint(df.head())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to perform sentiment analysis on a dataset of customer comments.\n\n### Input:\n\n\n### Output:\n# Import libraries\nimport pandas as pd\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nnltk.download('vader_lexicon')\n\n# Read the customer comments into a dataframe \ndf = pd.read_csv('customer_comments.csv')\ndf.head()\n\n# Create an instance of the SentimentIntensityAnalyzer\nsia = SentimentIntensityAnalyzer()\n\n# Loop over comments in the dataframe and compute sentiment scores\nfor comment in df[\"comment\"]:\n    sentiment=sia.polarity_scores(comment)['compound']\n    df.loc[df[\"comment\"]==comment,\"sentiment\"]=sentiment\n    \n# Print the results\nprint(df.head())"}
{"instruction":"Create a web scraper in Python that retrieves the titles of all posts of a given web page, and prints them on the screen.","input":"https:\/\/example.com\/blog","output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https:\/\/example.com\/blog\"\n\nr = requests.get(url)\nhtml = r.text\n\nsoup = BeautifulSoup(html, 'html.parser')\ntitles = soup.find_all('h2')\n\nfor title in titles:\n print(title.text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python that retrieves the titles of all posts of a given web page, and prints them on the screen.\n\n### Input:\nhttps:\/\/example.com\/blog\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https:\/\/example.com\/blog\"\n\nr = requests.get(url)\nhtml = r.text\n\nsoup = BeautifulSoup(html, 'html.parser')\ntitles = soup.find_all('h2')\n\nfor title in titles:\n print(title.text)"}
{"instruction":"Create a python script that parses a CSV and generates a new CSV that adds the total number of rows, total number of columns, and total amount of the data for each attribute.","input":"","output":"\"\"\"\nParses a CSV and generates a new CSV that adds the total number of rows, total \nnumber of columns, and total amount of data for each attribute.\n\"\"\"\n\nimport csv\n\ndef parse_csv(filename):\n    with open(filename) as csv_file:\n        reader = csv.DictReader(csv_file)\n        rows =0\n        cols = 0\n        data_totals = []\n        for row in reader:\n            rows += 1\n            cols = len(row)\n            for col in row:\n                if len(data_totals) < cols:\n                    data_totals.append([row[col],1])\n                else:\n                    existing_total = data_totals[cols - 1]\n                    new_total = [existing_total[0] + float(row[col]), existing_total[1] + 1]\n                    data_totals.append(new_total)\n        #write to new csv\n        with open('new_csv.csv', mode='w') as new_csv_file:\n            writer = csv.writer(new_csv_file, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n            writer.writerow(['Rows', 'Columns', 'Data Totals'])\n            writer.writerow([rows, cols, data_totals])\n\nif __name__ == '__main__':\n    filename = 'test.csv'\n    parse_csv(filename)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script that parses a CSV and generates a new CSV that adds the total number of rows, total number of columns, and total amount of the data for each attribute.\n\n### Input:\n\n\n### Output:\n\"\"\"\nParses a CSV and generates a new CSV that adds the total number of rows, total \nnumber of columns, and total amount of data for each attribute.\n\"\"\"\n\nimport csv\n\ndef parse_csv(filename):\n    with open(filename) as csv_file:\n        reader = csv.DictReader(csv_file)\n        rows =0\n        cols = 0\n        data_totals = []\n        for row in reader:\n            rows += 1\n            cols = len(row)\n            for col in row:\n                if len(data_totals) < cols:\n                    data_totals.append([row[col],1])\n                else:\n                    existing_total = data_totals[cols - 1]\n                    new_total = [existing_total[0] + float(row[col]), existing_total[1] + 1]\n                    data_totals.append(new_total)\n        #write to new csv\n        with open('new_csv.csv', mode='w') as new_csv_file:\n            writer = csv.writer(new_csv_file, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n            writer.writerow(['Rows', 'Columns', 'Data Totals'])\n            writer.writerow([rows, cols, data_totals])\n\nif __name__ == '__main__':\n    filename = 'test.csv'\n    parse_csv(filename)"}
{"instruction":"Generate a Python script that prints the sum of the numbers in the given range.","input":"Start: 10 End: 19","output":"# Initialize one variable to store result\nresult = 0\n\n# Use a loop to iterate through the given range\nfor num in range(10, 20):\n    result += num\n\n# Print the result\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script that prints the sum of the numbers in the given range.\n\n### Input:\nStart: 10 End: 19\n\n### Output:\n# Initialize one variable to store result\nresult = 0\n\n# Use a loop to iterate through the given range\nfor num in range(10, 20):\n    result += num\n\n# Print the result\nprint(result)"}
{"instruction":"Write a python program to calculate the sum of the given numbers and return the result.","input":"[1, 2, 3, 4, 5]","output":"def sum_numbers(arr):\n    result = 0\n    for num in arr:\n        result += num\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to calculate the sum of the given numbers and return the result.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef sum_numbers(arr):\n    result = 0\n    for num in arr:\n        result += num\n    return result"}
{"instruction":"Create a function in Python to find all the indices of a given item in a list.","input":"list = [1,2,3,4,5,2]\nitem = 2","output":"def find_all_indices(list, item):\n    result = []\n    for index, i in enumerate(list):\n        if i == item: result.append(index)\n    return result\n\nlist = [1,2,3,4,5,2]\nitem = 2\n\n#find all indices of the item\nindices = find_all_indices(list, item)\n\n#print the indices\nprint(indices) # [1, 5]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to find all the indices of a given item in a list.\n\n### Input:\nlist = [1,2,3,4,5,2]\nitem = 2\n\n### Output:\ndef find_all_indices(list, item):\n    result = []\n    for index, i in enumerate(list):\n        if i == item: result.append(index)\n    return result\n\nlist = [1,2,3,4,5,2]\nitem = 2\n\n#find all indices of the item\nindices = find_all_indices(list, item)\n\n#print the indices\nprint(indices) # [1, 5]"}
{"instruction":"Given a Python dictionary, write a function that prints out the key-value pairs in alphabetical order.","input":"{\n 'Mark': '68',\n 'Carol': '35',\n 'John': '42'\n}","output":"def print_dict_alphabetically(dictionary):\n    sorted_keys = sorted(dictionary.keys())\n    for key in sorted_keys:\n        print(f\"{key}: {dictionary[key]}\")\n\nprint_dict_alphabetically({\n 'Mark': '68',\n 'Carol': '35',\n 'John': '42'\n})","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a Python dictionary, write a function that prints out the key-value pairs in alphabetical order.\n\n### Input:\n{\n 'Mark': '68',\n 'Carol': '35',\n 'John': '42'\n}\n\n### Output:\ndef print_dict_alphabetically(dictionary):\n    sorted_keys = sorted(dictionary.keys())\n    for key in sorted_keys:\n        print(f\"{key}: {dictionary[key]}\")\n\nprint_dict_alphabetically({\n 'Mark': '68',\n 'Carol': '35',\n 'John': '42'\n})"}
{"instruction":"Develop a linear regression model in Python to predict the closing price of stock X.","input":"","output":"import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Read in data\ndata = pd.read_csv('[path\/to\/file]')\n\n# Split into features and target\nX = np.array(data[['feature1', 'feature2', ... , 'featureN']]) \ny = np.array(data['target'])\n\n# Create linear regression object\nmodel = LinearRegression()\n\n# Train the model\nmodel.fit(X, y)\n\n# Make prediction\nprediction = model.predict(X)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a linear regression model in Python to predict the closing price of stock X.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Read in data\ndata = pd.read_csv('[path\/to\/file]')\n\n# Split into features and target\nX = np.array(data[['feature1', 'feature2', ... , 'featureN']]) \ny = np.array(data['target'])\n\n# Create linear regression object\nmodel = LinearRegression()\n\n# Train the model\nmodel.fit(X, y)\n\n# Make prediction\nprediction = model.predict(X)"}
{"instruction":"Create a basic machine learning classification model in Python SciKit Learn to distinguish between two sets of data.","input":"We have two sets of data\u2013one is a set of images of cars and the other is a set of images of non-cars.","output":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Load the data\ndata1 = pd.read_csv('car_images.csv')\ndata2 = pd.read_csv('noncar_images.csv')\n\n# create labels\ndata1['label'] = 1\ndata2['label'] = 0\n\n# merge two datasets\ndata = data1.append(data2, ignore_index=True)\n\n#Split the data\nx = data.drop('label', axis=1)\ny = data['label']\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state=42)\n\n# Create and Train the Classifier\nmodel = RandomForestClassifier(n_estimators= 100, max_depth = 3, random_state=42)\nmodel.fit(x_train, y_train)\n\n# Predict\npredictions = model.predict(x_test)\n\n# Evaluate the model\naccuracy = accuracy_score(y_test, predictions)\nprint('Accuracy of the model: ', accuracy)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic machine learning classification model in Python SciKit Learn to distinguish between two sets of data.\n\n### Input:\nWe have two sets of data\u2013one is a set of images of cars and the other is a set of images of non-cars.\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Load the data\ndata1 = pd.read_csv('car_images.csv')\ndata2 = pd.read_csv('noncar_images.csv')\n\n# create labels\ndata1['label'] = 1\ndata2['label'] = 0\n\n# merge two datasets\ndata = data1.append(data2, ignore_index=True)\n\n#Split the data\nx = data.drop('label', axis=1)\ny = data['label']\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state=42)\n\n# Create and Train the Classifier\nmodel = RandomForestClassifier(n_estimators= 100, max_depth = 3, random_state=42)\nmodel.fit(x_train, y_train)\n\n# Predict\npredictions = model.predict(x_test)\n\n# Evaluate the model\naccuracy = accuracy_score(y_test, predictions)\nprint('Accuracy of the model: ', accuracy)"}
{"instruction":"Build a mini classifier model in Python to predict whether a given string is palindrome or not.","input":"'level'","output":"class Palindrome:\n\ndef __init__(self, str):\n    self.str = str\n\ndef is_palindrome(self):\n    return self.str == self.str[::-1]\n\npalindrome = Palindrome(\"level\")\nif palindrome.is_palindrome():\n    print(\"The string is a palindrome\")\nelse:\n    print(\"The string is not a palindrome\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a mini classifier model in Python to predict whether a given string is palindrome or not.\n\n### Input:\n'level'\n\n### Output:\nclass Palindrome:\n\ndef __init__(self, str):\n    self.str = str\n\ndef is_palindrome(self):\n    return self.str == self.str[::-1]\n\npalindrome = Palindrome(\"level\")\nif palindrome.is_palindrome():\n    print(\"The string is a palindrome\")\nelse:\n    print(\"The string is not a palindrome\")"}
{"instruction":"Can you implement a Python algorithm that takes two strings as input, and determines the edit distance between them?","input":"str1: \"kitten\", str2: \"sitting\"","output":"def editDistance(str1, str2): \n    m = len(str1)\n    n = len(str2)\n  \n    dp = [[0 for x in range(n+1)] for x in range(m+1)] \n  \n    for i in range(m+1): \n        for j in range(n+1): \n            \n            if i == 0: \n                dp[i][j] = j \n            elif j == 0: \n                dp[i][j] = i \n            elif str1[i-1] == str2[j-1]: \n                dp[i][j] = dp[i-1][j-1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j-1],    # Insert \n                                   dp[i-1][j],    # Remove \n                                   dp[i-1][j-1])  # Replace\n  \n    return dp[m][n]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you implement a Python algorithm that takes two strings as input, and determines the edit distance between them?\n\n### Input:\nstr1: \"kitten\", str2: \"sitting\"\n\n### Output:\ndef editDistance(str1, str2): \n    m = len(str1)\n    n = len(str2)\n  \n    dp = [[0 for x in range(n+1)] for x in range(m+1)] \n  \n    for i in range(m+1): \n        for j in range(n+1): \n            \n            if i == 0: \n                dp[i][j] = j \n            elif j == 0: \n                dp[i][j] = i \n            elif str1[i-1] == str2[j-1]: \n                dp[i][j] = dp[i-1][j-1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j-1],    # Insert \n                                   dp[i-1][j],    # Remove \n                                   dp[i-1][j-1])  # Replace\n  \n    return dp[m][n]"}
{"instruction":"Create a Python script to scrape the title and link of news articles from a given page.","input":"","output":"from bs4 import BeautifulSoup\nimport requests\n\ndef get_news_articles(url):\n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    articles = []\n    for article in soup.find_all('article'):\n        link = article.find('a', class_=\"shop-now-option\")['href']\n        title = article.find('h2').get_text()\n        articles.append({'title': title, 'link': link})\n    return articles","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to scrape the title and link of news articles from a given page.\n\n### Input:\n\n\n### Output:\nfrom bs4 import BeautifulSoup\nimport requests\n\ndef get_news_articles(url):\n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    articles = []\n    for article in soup.find_all('article'):\n        link = article.find('a', class_=\"shop-now-option\")['href']\n        title = article.find('h2').get_text()\n        articles.append({'title': title, 'link': link})\n    return articles"}
{"instruction":"Write a Python program to predict the probability of an employee leaving the company given their age.","input":"","output":"def predict_probability(age):\n    # Fit your model and get predicted probabilities\n    probabilities = model.predict_proba(age)\n    # Return probability for leaving class\n    return probabilities[0][1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to predict the probability of an employee leaving the company given their age.\n\n### Input:\n\n\n### Output:\ndef predict_probability(age):\n    # Fit your model and get predicted probabilities\n    probabilities = model.predict_proba(age)\n    # Return probability for leaving class\n    return probabilities[0][1]"}
{"instruction":"Design a function in Python to delete duplicate characters from a given string.","input":"String: python","output":"def delete_duplicate(str):\n    temp_str = \"\"\n    for i in range(0, len(str)):\n        if str[i] not in temp_str:\n            temp_str += str[i]\n    return temp_str\n\ninput_string = \"w3python\"\nresult = delete_duplicate(input_string)\n\nprint(\"After deleting duplicate character, string is:\", result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to delete duplicate characters from a given string.\n\n### Input:\nString: python\n\n### Output:\ndef delete_duplicate(str):\n    temp_str = \"\"\n    for i in range(0, len(str)):\n        if str[i] not in temp_str:\n            temp_str += str[i]\n    return temp_str\n\ninput_string = \"w3python\"\nresult = delete_duplicate(input_string)\n\nprint(\"After deleting duplicate character, string is:\", result)"}
{"instruction":"Develop a Python routine that takes a string, separates words and prints the first word.","input":"\"Hello, World!\"","output":"def print_first_word(sentence):\n    words = sentence.split(' ')\n    print(words[0])\n\nsentence = \"Hello, World!\"\nprint_first_word(sentence)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python routine that takes a string, separates words and prints the first word.\n\n### Input:\n\"Hello, World!\"\n\n### Output:\ndef print_first_word(sentence):\n    words = sentence.split(' ')\n    print(words[0])\n\nsentence = \"Hello, World!\"\nprint_first_word(sentence)"}
{"instruction":"Construct a Python algorithm to find the largest palindrome from the given array.","input":"[12, 521, 1212, 84561, 91332]","output":"def largest_palindrome(arr):\n    max_palindrome = 0\n    for item in arr:\n        temp = str(item)\n        if temp == temp[::-1] and max_palindrome < item:\n            max_palindrome = item\n    return max_palindrome\n\nprint(largest_palindrome([12, 521, 1212, 84561, 91332]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python algorithm to find the largest palindrome from the given array.\n\n### Input:\n[12, 521, 1212, 84561, 91332]\n\n### Output:\ndef largest_palindrome(arr):\n    max_palindrome = 0\n    for item in arr:\n        temp = str(item)\n        if temp == temp[::-1] and max_palindrome < item:\n            max_palindrome = item\n    return max_palindrome\n\nprint(largest_palindrome([12, 521, 1212, 84561, 91332]))"}
{"instruction":"Write a code in Python to find out how long a given string is.","input":"\"Hello\"","output":"def get_length(string):\n    return len(string)\n\nlength = get_length(\"Hello\")\nprint(length)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python to find out how long a given string is.\n\n### Input:\n\"Hello\"\n\n### Output:\ndef get_length(string):\n    return len(string)\n\nlength = get_length(\"Hello\")\nprint(length)"}
{"instruction":"Generate a function in Python that takes an array of numbers and returns an array of the squares of the numbers.","input":"[1,2,3]","output":"\"\"\"\nA function to return the squares of an array in Python \n\"\"\"\n\ndef square_array(input_array): \n  squared_array = []\n  for i in input_array: \n    squared_array.append(i*i)\n  return squared_array","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python that takes an array of numbers and returns an array of the squares of the numbers.\n\n### Input:\n[1,2,3]\n\n### Output:\n\"\"\"\nA function to return the squares of an array in Python \n\"\"\"\n\ndef square_array(input_array): \n  squared_array = []\n  for i in input_array: \n    squared_array.append(i*i)\n  return squared_array"}
{"instruction":"Design a Python program to extract the duplicate elements from an integer array.","input":"[1, 2, 3, 2, 4, 5, 5]","output":"def extractDuplicates(nums): \n    result = [] \n\n    for i in range(len(nums)): \n        k = i + 1 \n        for j in range(k, len(nums)): \n            if nums[i] == nums[j] and nums[i] not in result: \n                result.append(nums[i]) \n  \n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to extract the duplicate elements from an integer array.\n\n### Input:\n[1, 2, 3, 2, 4, 5, 5]\n\n### Output:\ndef extractDuplicates(nums): \n    result = [] \n\n    for i in range(len(nums)): \n        k = i + 1 \n        for j in range(k, len(nums)): \n            if nums[i] == nums[j] and nums[i] not in result: \n                result.append(nums[i]) \n  \n    return result"}
{"instruction":"Write a Python program to print the largest number from a given list.","input":"my_list = [1, 5, 10, 20, 8]","output":"my_list = [1, 5, 10, 20, 8]\n\nlargest = max(my_list)\nprint(\"The largest number from the given list is: \" + str(largest))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print the largest number from a given list.\n\n### Input:\nmy_list = [1, 5, 10, 20, 8]\n\n### Output:\nmy_list = [1, 5, 10, 20, 8]\n\nlargest = max(my_list)\nprint(\"The largest number from the given list is: \" + str(largest))"}
{"instruction":"Generate a structured array from a given dictionary in Python.","input":"dictionary = {\n  \"name\": \"John\",\n  \"age\": 24,\n  \"nationality\": \"American\"\n}","output":"import numpy as np\ndata = np.array(list(dictionary.values()),\n      dtype=[('name','U20'),('age','i4'),('nationality','U10')]\n)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a structured array from a given dictionary in Python.\n\n### Input:\ndictionary = {\n  \"name\": \"John\",\n  \"age\": 24,\n  \"nationality\": \"American\"\n}\n\n### Output:\nimport numpy as np\ndata = np.array(list(dictionary.values()),\n      dtype=[('name','U20'),('age','i4'),('nationality','U10')]\n)"}
{"instruction":"Write a Python function to sort a list of dictionaries by a given key.","input":"[{'first_name': 'John', 'last_name': 'Doe', 'age': 20}, {'first_name': 'Jane', 'last_name': 'Doe', 'age': 30}], 'age'","output":"def sort_by_key(dict_list, key):\n    # Sort a list of dictionaries by the given key  \n    sorted_list = sorted(dict_list, key=lambda x: x[key])\n    return sorted_list\n \ndict_list = [{'first_name': 'John', 'last_name': 'Doe', 'age': 20}, {'first_name': 'Jane', 'last_name': 'Doe', 'age': 30}]\n \nresult = sort_by_key(dict_list, 'age')\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to sort a list of dictionaries by a given key.\n\n### Input:\n[{'first_name': 'John', 'last_name': 'Doe', 'age': 20}, {'first_name': 'Jane', 'last_name': 'Doe', 'age': 30}], 'age'\n\n### Output:\ndef sort_by_key(dict_list, key):\n    # Sort a list of dictionaries by the given key  \n    sorted_list = sorted(dict_list, key=lambda x: x[key])\n    return sorted_list\n \ndict_list = [{'first_name': 'John', 'last_name': 'Doe', 'age': 20}, {'first_name': 'Jane', 'last_name': 'Doe', 'age': 30}]\n \nresult = sort_by_key(dict_list, 'age')\nprint(result)"}
{"instruction":"Create a Python program to detect anomalies in a time series.","input":"","output":"import numpy as np \nimport matplotlib.pyplot as plt\n\ndef detect_anomalies(data):\n    '''This function detects anomalies in a time series.'''\n    # calculate rolling mean and rolling standard deviation\n    rolling_mean = np.mean(data, axis=0)\n    rolling_std = np.std(data, axis=0)\n\n    # create an empty dataframe\n    anomalies_df = []\n\n    # detect anomalies\n    for i in range(len(data)): \n        z_score = (data[i] - rolling_mean) \/ rolling_std\n        if np.abs(z_score) > 3:\n            anomalies_df.append(data[i])\n\n    # plot the anomalies\n    plt.plot(data, color='blue', label='Original data')\n    plt.scatter(range(len(data)), anomalies_df, color='red', label='Anomalies')\n    plt.legend()\n    plt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to detect anomalies in a time series.\n\n### Input:\n\n\n### Output:\nimport numpy as np \nimport matplotlib.pyplot as plt\n\ndef detect_anomalies(data):\n    '''This function detects anomalies in a time series.'''\n    # calculate rolling mean and rolling standard deviation\n    rolling_mean = np.mean(data, axis=0)\n    rolling_std = np.std(data, axis=0)\n\n    # create an empty dataframe\n    anomalies_df = []\n\n    # detect anomalies\n    for i in range(len(data)): \n        z_score = (data[i] - rolling_mean) \/ rolling_std\n        if np.abs(z_score) > 3:\n            anomalies_df.append(data[i])\n\n    # plot the anomalies\n    plt.plot(data, color='blue', label='Original data')\n    plt.scatter(range(len(data)), anomalies_df, color='red', label='Anomalies')\n    plt.legend()\n    plt.show()"}
{"instruction":"Can you build a Python program which calculates the sum of digits of an inputted number?","input":"","output":"def sumDigits(num): \n    sum = 0\n    while(num): \n        sum += num % 10\n        num = num\/\/10\n    return sum\n\n# main function\nnum = 12345\nprint(\"Sum of digits of specified number is: \", \n      sumDigits(num))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you build a Python program which calculates the sum of digits of an inputted number?\n\n### Input:\n\n\n### Output:\ndef sumDigits(num): \n    sum = 0\n    while(num): \n        sum += num % 10\n        num = num\/\/10\n    return sum\n\n# main function\nnum = 12345\nprint(\"Sum of digits of specified number is: \", \n      sumDigits(num))"}
{"instruction":"Create a Python script to check whether a given number is an even number or an odd number.","input":"","output":"def is_even(n):\n if n % 2 == 0:\n return True\n else:\n return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to check whether a given number is an even number or an odd number.\n\n### Input:\n\n\n### Output:\ndef is_even(n):\n if n % 2 == 0:\n return True\n else:\n return False"}
{"instruction":"Write a Python program to find the maximum of a given array.","input":"arr = [10, 9, 11, 12, 5]","output":"def find_max(arr):\n    max = arr[0]\n    for i in arr: \n        if i > max: \n            max = i \n  \n    return max\n  \n# Driver Code  \narr = [10, 9, 11, 12, 5]\nmaximum = find_max(arr) \nprint(\"Maximum element is:\", maximum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the maximum of a given array.\n\n### Input:\narr = [10, 9, 11, 12, 5]\n\n### Output:\ndef find_max(arr):\n    max = arr[0]\n    for i in arr: \n        if i > max: \n            max = i \n  \n    return max\n  \n# Driver Code  \narr = [10, 9, 11, 12, 5]\nmaximum = find_max(arr) \nprint(\"Maximum element is:\", maximum)"}
{"instruction":"Generate a code snippet in Python to convert a given number to its binary format.","input":"245","output":"def toBinary(num):\n   result = \"\"\n   while num > 0:\n      result = str(num % 2) + result\n      num = num \/\/ 2\n   return result\n\nprint(toBinary(245))  # output: 11110101","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code snippet in Python to convert a given number to its binary format.\n\n### Input:\n245\n\n### Output:\ndef toBinary(num):\n   result = \"\"\n   while num > 0:\n      result = str(num % 2) + result\n      num = num \/\/ 2\n   return result\n\nprint(toBinary(245))  # output: 11110101"}
{"instruction":"Generate Python code to filter a given list of numbers such that only the odd numbers are removed.","input":"[1, 2, 3, 4, 5]","output":"def filter_odd(list):\n    return [num for num in list if num % 2 == 0]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to filter a given list of numbers such that only the odd numbers are removed.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef filter_odd(list):\n    return [num for num in list if num % 2 == 0]"}
{"instruction":"Create a unique list of items from a given list in Python.","input":"given_list = [2, 2, 4, 5, 5, 6, 8, 8]","output":"# Unique list\nunq_list = list(set(given_list))\n\n#Print unique list\nprint(unq_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a unique list of items from a given list in Python.\n\n### Input:\ngiven_list = [2, 2, 4, 5, 5, 6, 8, 8]\n\n### Output:\n# Unique list\nunq_list = list(set(given_list))\n\n#Print unique list\nprint(unq_list)"}
{"instruction":"Create a Python program to convert a Celsius temperature to Fahrenheit","input":"","output":"def celsius_to_fahrenheit(celsius):\n\tfahrenheit = celsius * 9\/5 + 32\n\treturn fahrenheit","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to convert a Celsius temperature to Fahrenheit\n\n### Input:\n\n\n### Output:\ndef celsius_to_fahrenheit(celsius):\n\tfahrenheit = celsius * 9\/5 + 32\n\treturn fahrenheit"}
{"instruction":"Use an if-else statement in Python to determine if a number is even or odd.","input":"n = 7","output":"if n % 2 == 0:\n    print(n, 'is an even number')\nelse:\n    print(n, 'is an odd number')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse an if-else statement in Python to determine if a number is even or odd.\n\n### Input:\nn = 7\n\n### Output:\nif n % 2 == 0:\n    print(n, 'is an even number')\nelse:\n    print(n, 'is an odd number')"}
{"instruction":"Write code in Python to generate all the possible permutations of a given list.","input":"list = [1,2,3]","output":"import itertools\n\ndef permute(list):\n    return list(itertools.permutations(list))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code in Python to generate all the possible permutations of a given list.\n\n### Input:\nlist = [1,2,3]\n\n### Output:\nimport itertools\n\ndef permute(list):\n    return list(itertools.permutations(list))"}
{"instruction":"Compose a Python program to train a neural network using a given dataset.","input":"The dataset contains 10,000 examples and 5 features.","output":"import numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# define the model\nmodel = Sequential()\nmodel.add(Dense(5, activation='relu', input_dim=5))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# compile the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# load the data\nX = np.loadtxt('data.txt', delimiter=',')\n\n# fit the model with input data\nmodel.fit(X, y, epochs=50)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python program to train a neural network using a given dataset.\n\n### Input:\nThe dataset contains 10,000 examples and 5 features.\n\n### Output:\nimport numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# define the model\nmodel = Sequential()\nmodel.add(Dense(5, activation='relu', input_dim=5))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# compile the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# load the data\nX = np.loadtxt('data.txt', delimiter=',')\n\n# fit the model with input data\nmodel.fit(X, y, epochs=50)"}
{"instruction":"Create a Python program that takes in a list of numbers and outputs the sum of itself and all its previous numbers (including the number itself).","input":"[2, 3, 4, 5, 6]","output":"def sum_of_all(nums):\n    sum = 0\n    for i in range(len(nums)):\n        sum += sum(nums[:i+1])\n    return sum\n\n#Test\nprint(sum_of_all([2, 3, 4, 5, 6])) # Output: 20","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes in a list of numbers and outputs the sum of itself and all its previous numbers (including the number itself).\n\n### Input:\n[2, 3, 4, 5, 6]\n\n### Output:\ndef sum_of_all(nums):\n    sum = 0\n    for i in range(len(nums)):\n        sum += sum(nums[:i+1])\n    return sum\n\n#Test\nprint(sum_of_all([2, 3, 4, 5, 6])) # Output: 20"}
{"instruction":"Write a Python code that finds the sum of the two largest numbers in a given list.","input":"[1,2,3,4,5]","output":"def find_largest_sum(list):\n    largestNum = max(list)\n    list.remove(largestNum)\n    secondLargestNum = max(list)\n    return largestNum+secondLargestNum\n\nprint(find_largest_sum([1,2,3,4,5])) # 9","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code that finds the sum of the two largest numbers in a given list.\n\n### Input:\n[1,2,3,4,5]\n\n### Output:\ndef find_largest_sum(list):\n    largestNum = max(list)\n    list.remove(largestNum)\n    secondLargestNum = max(list)\n    return largestNum+secondLargestNum\n\nprint(find_largest_sum([1,2,3,4,5])) # 9"}
{"instruction":"Using Python, make a program which will generate a random password of a given length.","input":"7","output":"import string\nimport random\n\ndef get_password(length):\n    alphabet = string.ascii_letters + string.digits\n    password = ''.join(random.choice(alphabet) for i in range(length))\n    print (password)\n\nget_password(7)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, make a program which will generate a random password of a given length.\n\n### Input:\n7\n\n### Output:\nimport string\nimport random\n\ndef get_password(length):\n    alphabet = string.ascii_letters + string.digits\n    password = ''.join(random.choice(alphabet) for i in range(length))\n    print (password)\n\nget_password(7)"}
{"instruction":"Create a Web Scraper in Python to Scrape the Wikipedia page of a given musician and extract the discography.","input":"","output":"import requests\nfrom bs4 import BeautifulSoup\n\ndef get_discography(artist):\n  base_url = \"https:\/\/en.wikipedia.org\/wiki\/\"  # Wikipedia base URL\n  artist_name = artist.replace(\" \", \"_\")  # Format URL parameter\n  url = base_url + artist_name\n  response = requests.get(url)\n  if response.status_code == 200:\n    html = response.content\n    soup = BeautifulSoup(html, \"html.parser\")\n    discography = soup.find(\"span\",{\"id\":\"Discography\"}).find_next_sibling().text.strip().replace(\"\\n\", \",\").replace(\")\",\"\").replace(\"(\",\"\")\n    return discography.split(\",\")\n  else:\n    print(\"Error in response.\")\n    return None","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Web Scraper in Python to Scrape the Wikipedia page of a given musician and extract the discography.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef get_discography(artist):\n  base_url = \"https:\/\/en.wikipedia.org\/wiki\/\"  # Wikipedia base URL\n  artist_name = artist.replace(\" \", \"_\")  # Format URL parameter\n  url = base_url + artist_name\n  response = requests.get(url)\n  if response.status_code == 200:\n    html = response.content\n    soup = BeautifulSoup(html, \"html.parser\")\n    discography = soup.find(\"span\",{\"id\":\"Discography\"}).find_next_sibling().text.strip().replace(\"\\n\", \",\").replace(\")\",\"\").replace(\"(\",\"\")\n    return discography.split(\",\")\n  else:\n    print(\"Error in response.\")\n    return None"}
{"instruction":"Create a Python function to generate random numbers between a given range of numbers.","input":"","output":"def random_number_generator(lhs, rhs):\n    '''This function generates a random number between given range (lhs, rhs)'''\n    import random\n    return random.randint(lhs, rhs)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to generate random numbers between a given range of numbers.\n\n### Input:\n\n\n### Output:\ndef random_number_generator(lhs, rhs):\n    '''This function generates a random number between given range (lhs, rhs)'''\n    import random\n    return random.randint(lhs, rhs)"}
{"instruction":"Design a Python program that sorts the elements in the array from largest to smallest.","input":"[3, 8, 5, 2, 6, 4]","output":"def selection_sort(arr):\n    # Iterate through the array\n    for pos in range(len(arr)):\n        # Find the index of the maximum number\n        max_pos = pos\n        for i in range(pos + 1, len(arr)):\n            if arr[i] > arr[max_pos]:\n                max_pos = i\n        # Swap the numbers\n        temp = arr[pos]\n        arr[pos] = arr[max_pos]\n        arr[max_pos] = temp\n    return arr\n\n# Test\narr = [3, 8, 5, 2, 6, 4]\nsorted_arr = selection_sort(arr)\n\nprint(sorted_arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program that sorts the elements in the array from largest to smallest.\n\n### Input:\n[3, 8, 5, 2, 6, 4]\n\n### Output:\ndef selection_sort(arr):\n    # Iterate through the array\n    for pos in range(len(arr)):\n        # Find the index of the maximum number\n        max_pos = pos\n        for i in range(pos + 1, len(arr)):\n            if arr[i] > arr[max_pos]:\n                max_pos = i\n        # Swap the numbers\n        temp = arr[pos]\n        arr[pos] = arr[max_pos]\n        arr[max_pos] = temp\n    return arr\n\n# Test\narr = [3, 8, 5, 2, 6, 4]\nsorted_arr = selection_sort(arr)\n\nprint(sorted_arr)"}
{"instruction":"Create a Python code snippet to print the current time in the format `hh:mm:ss`.","input":"","output":"# Import datetime module\nimport datetime\n\n# Get the current time\nnow = datetime.datetime.now()\n\n# Print the current time in the format hh:mm:ss\nprint(now.strftime(\"%H:%M:%S\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code snippet to print the current time in the format `hh:mm:ss`.\n\n### Input:\n\n\n### Output:\n# Import datetime module\nimport datetime\n\n# Get the current time\nnow = datetime.datetime.now()\n\n# Print the current time in the format hh:mm:ss\nprint(now.strftime(\"%H:%M:%S\"))"}
{"instruction":"Design an efficient algorithm in Python for calculating the Fibonacci sequence.","input":"","output":"\"\"\"\nDesign an efficient algorithm in Python for calculating the Fibonacci sequence \n\"\"\"\n\n\ndef fib(n):\n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return 1\n    else:\n        f1 = 0\n        f2 = 1\n        for x in range(2, n+1):\n            f = f1+f2\n            f1 = f2\n            f2 = f\n        return f\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter number of terms:\"))\n    print(\"Fibonacci sequence:\")\n    for i in range(n):\n        print(fib(i))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an efficient algorithm in Python for calculating the Fibonacci sequence.\n\n### Input:\n\n\n### Output:\n\"\"\"\nDesign an efficient algorithm in Python for calculating the Fibonacci sequence \n\"\"\"\n\n\ndef fib(n):\n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return 1\n    else:\n        f1 = 0\n        f2 = 1\n        for x in range(2, n+1):\n            f = f1+f2\n            f1 = f2\n            f2 = f\n        return f\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter number of terms:\"))\n    print(\"Fibonacci sequence:\")\n    for i in range(n):\n        print(fib(i))"}
{"instruction":"To download bioformats, run the script and pass 'download_bioformats' as an argument. The downloaded file will be saved as 'bioformats_package.jar' in the same directory as the script.","input":"","output":"# PyDIP 3.0, Python bindings for DIPlib 3.0\n# This file contains functionality to download bioformats\n#\n# (c)2020, Wouter Caarls\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport sys, os, urllib.request\n\ndef progress(blocks, bs, size):\n    barsize = 52\n    pct = blocks*bs \/ float(size)\n    bardone = int(pct*barsize)\n    print('[{0}{1}] {2: >3}%'.format('=' * bardone, '.'*(barsize-bardone), int(pct*100)), end='\\r', flush=True)\n\nif __name__ == '__main__':\n    if 'download_bioformats' in sys.argv:\n        url = 'https:\/\/downloads.openmicroscopy.org\/bio-formats\/6.5.0\/artifacts\/bioformats_package.jar'\n        filename = os.path.join(os.path.dirname(__file__), 'bioformats_package.jar')\n        print('Retrieving', url)\n        urllib.request.urlretrieve(url, filename, progress)\n        print()\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTo download bioformats, run the script and pass 'download_bioformats' as an argument. The downloaded file will be saved as 'bioformats_package.jar' in the same directory as the script.\n\n### Input:\n\n\n### Output:\n# PyDIP 3.0, Python bindings for DIPlib 3.0\n# This file contains functionality to download bioformats\n#\n# (c)2020, Wouter Caarls\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport sys, os, urllib.request\n\ndef progress(blocks, bs, size):\n    barsize = 52\n    pct = blocks*bs \/ float(size)\n    bardone = int(pct*barsize)\n    print('[{0}{1}] {2: >3}%'.format('=' * bardone, '.'*(barsize-bardone), int(pct*100)), end='\\r', flush=True)\n\nif __name__ == '__main__':\n    if 'download_bioformats' in sys.argv:\n        url = 'https:\/\/downloads.openmicroscopy.org\/bio-formats\/6.5.0\/artifacts\/bioformats_package.jar'\n        filename = os.path.join(os.path.dirname(__file__), 'bioformats_package.jar')\n        print('Retrieving', url)\n        urllib.request.urlretrieve(url, filename, progress)\n        print()\n"}
{"instruction":"Write a python program that takes a string as input and check if it is palindrome or not","input":"","output":"\"\"\"\nWrite a python program that takes a string as input and check if it is palindrome or not\n\"\"\"\n\ndef is_palindrome(string):\n    # Reverse the string \n    rev_string = string[::-1]\n    # Compare both strings \n    if string == rev_string:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    string = 'malayalam'\n    print(is_palindrome(string))  # Output: True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that takes a string as input and check if it is palindrome or not\n\n### Input:\n\n\n### Output:\n\"\"\"\nWrite a python program that takes a string as input and check if it is palindrome or not\n\"\"\"\n\ndef is_palindrome(string):\n    # Reverse the string \n    rev_string = string[::-1]\n    # Compare both strings \n    if string == rev_string:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    string = 'malayalam'\n    print(is_palindrome(string))  # Output: True"}
{"instruction":"Optimize the following Python function that returns the sum of all the elements in a given list.","input":"","output":"def sum_list(numbers):\n  total = 0\n  for number in numbers:\n    total += number\n  return total","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python function that returns the sum of all the elements in a given list.\n\n### Input:\n\n\n### Output:\ndef sum_list(numbers):\n  total = 0\n  for number in numbers:\n    total += number\n  return total"}
{"instruction":"Find the index of a given element from a list in Python","input":"[1,2,3,4]","output":"def index_of(arr, ele):\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return i\n    return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the index of a given element from a list in Python\n\n### Input:\n[1,2,3,4]\n\n### Output:\ndef index_of(arr, ele):\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return i\n    return -1"}
{"instruction":"Generate a Python class to represent a car. The class should include attributes for make, model, year, and color.","input":"Not applicable","output":"class Car:\n def __init__(self, make, model, year, color):\n  self.make = make\n  self.model = model\n  self.year = year\n  self.color = color\n  \n def get_info(self):\n  return f'This car is a {self.color} {self.year} {self.make} {self.model}.'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class to represent a car. The class should include attributes for make, model, year, and color.\n\n### Input:\nNot applicable\n\n### Output:\nclass Car:\n def __init__(self, make, model, year, color):\n  self.make = make\n  self.model = model\n  self.year = year\n  self.color = color\n  \n def get_info(self):\n  return f'This car is a {self.color} {self.year} {self.make} {self.model}.'"}
{"instruction":"Generate a python class which has two methods to convert a number to string and vice-versa.","input":"","output":"class NumStringConverter:\n    def int_to_str(self, number):\n        return str(number)\n    \n    def str_to_int(self, string):\n        return int(string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python class which has two methods to convert a number to string and vice-versa.\n\n### Input:\n\n\n### Output:\nclass NumStringConverter:\n    def int_to_str(self, number):\n        return str(number)\n    \n    def str_to_int(self, string):\n        return int(string)"}
{"instruction":"Generate a Python class that uses Bubble Sort to sort a list of numbers.","input":"[4, 3, 6, 2, 8, 1, 5]","output":"class BubbleSort:\n    def __init__(self, arr):\n        self.arr = arr\n    \n    def sort(self):\n        for num in range(len(self.arr)-1,0,-1):\n            for i in range(num):\n                if self.arr[i] > self.arr[i+1]:\n                    self.arr[i], self.arr[i+1] = self.arr[i+1], self.arr[i]\n        return self.arr\n\narr = [4,3,6,2,8,1,5]\nsorted_arr = BubbleSort(arr).sort()\nprint(sorted_arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class that uses Bubble Sort to sort a list of numbers.\n\n### Input:\n[4, 3, 6, 2, 8, 1, 5]\n\n### Output:\nclass BubbleSort:\n    def __init__(self, arr):\n        self.arr = arr\n    \n    def sort(self):\n        for num in range(len(self.arr)-1,0,-1):\n            for i in range(num):\n                if self.arr[i] > self.arr[i+1]:\n                    self.arr[i], self.arr[i+1] = self.arr[i+1], self.arr[i]\n        return self.arr\n\narr = [4,3,6,2,8,1,5]\nsorted_arr = BubbleSort(arr).sort()\nprint(sorted_arr)"}
{"instruction":"Create a Python program that takes in a string and returns a string with the characters in reversed order.","input":"String: \"Hello World\"","output":"def reverse(str):\n    return str[::-1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes in a string and returns a string with the characters in reversed order.\n\n### Input:\nString: \"Hello World\"\n\n### Output:\ndef reverse(str):\n    return str[::-1]"}
{"instruction":"Given a dictionary, create a program to find the longest word in Python.","input":"{\"hello\": 5, \"world\": 5, \"welcome\": 7, \"to\": 2, \"programming\": 11}","output":"def longest_word(dictionary): \n    longest = \"\"\n    for word in dictionary: \n        if len(word) > len(longest): \n            longest = word \n    return longest","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a dictionary, create a program to find the longest word in Python.\n\n### Input:\n{\"hello\": 5, \"world\": 5, \"welcome\": 7, \"to\": 2, \"programming\": 11}\n\n### Output:\ndef longest_word(dictionary): \n    longest = \"\"\n    for word in dictionary: \n        if len(word) > len(longest): \n            longest = word \n    return longest"}
{"instruction":"Using the Python language, complete a binary search algorithm to search for a target item in a given list.","input":"target = 4\nlist = [1,2,3,4,5,6,7]","output":"# Binary Search \n\ndef binary_search(list, target): \n    low = 0\n    high = len(list) - 1\n    while low <= high: \n        mid = (low + high) \/\/ 2\n        if list[mid] == target: \n            return mid \n        elif list[mid] > target: \n            high = mid - 1\n        else: \n            low = mid + 1\n    return -1\n\n# Test array \nlist = [1,2,3,4,5,6,7]\ntarget = 4\n\n# Function Call \nresult = binary_search(list, target) \nif result != -1: \n    print(\"Element is present at index\", str(result)) \nelse: \n    print(\"Element is not present in array\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the Python language, complete a binary search algorithm to search for a target item in a given list.\n\n### Input:\ntarget = 4\nlist = [1,2,3,4,5,6,7]\n\n### Output:\n# Binary Search \n\ndef binary_search(list, target): \n    low = 0\n    high = len(list) - 1\n    while low <= high: \n        mid = (low + high) \/\/ 2\n        if list[mid] == target: \n            return mid \n        elif list[mid] > target: \n            high = mid - 1\n        else: \n            low = mid + 1\n    return -1\n\n# Test array \nlist = [1,2,3,4,5,6,7]\ntarget = 4\n\n# Function Call \nresult = binary_search(list, target) \nif result != -1: \n    print(\"Element is present at index\", str(result)) \nelse: \n    print(\"Element is not present in array\")"}
{"instruction":"Generate an object-oriented program in Python to read data from an Excel spreadsheet and store it into a list of objects.","input":"Example spreadsheet: \n\nname | GPA\nMary | 3.00\nDavid | 3.50\nJohn | 4.00","output":"class Student:\n    def __init__(self, name, gpa):\n        self.name = name\n        self.gpa = gpa\n\ndef read_excel(filename):\n    excel_file = open(filename, 'r')\n    lines = excel_file.readlines()\n    students = list()\n    for line in lines[1:]:\n        name, gpa = line.split(\",\")\n        students.append(Student(name, float(gpa)))\n    return students","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an object-oriented program in Python to read data from an Excel spreadsheet and store it into a list of objects.\n\n### Input:\nExample spreadsheet: \n\nname | GPA\nMary | 3.00\nDavid | 3.50\nJohn | 4.00\n\n### Output:\nclass Student:\n    def __init__(self, name, gpa):\n        self.name = name\n        self.gpa = gpa\n\ndef read_excel(filename):\n    excel_file = open(filename, 'r')\n    lines = excel_file.readlines()\n    students = list()\n    for line in lines[1:]:\n        name, gpa = line.split(\",\")\n        students.append(Student(name, float(gpa)))\n    return students"}
{"instruction":"Using OOP principles, create a Python class vehicle that has 3 attributes: \"make\", \"year\", \"model\"","input":"class Vehicle:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model= model\n        self.year = year","output":"class Vehicle():\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n\n    def get_make(self):\n        return self.make\n\n    def get_model(self):\n        return self.model\n\n    def get_year(self):\n        return self.year","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing OOP principles, create a Python class vehicle that has 3 attributes: \"make\", \"year\", \"model\"\n\n### Input:\nclass Vehicle:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model= model\n        self.year = year\n\n### Output:\nclass Vehicle():\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n\n    def get_make(self):\n        return self.make\n\n    def get_model(self):\n        return self.model\n\n    def get_year(self):\n        return self.year"}
{"instruction":"Design a sorting algorithm for strings in Python.","input":"","output":"def string_sort(strings):\n    # Bubble sort algorithm\n    for i in range(len(strings)-1):\n        for j in range(i+1, len(strings)):\n            if strings[i] > strings[j]:\n                temp = strings[i]\n                strings[i] = strings[j]\n                strings[j] = temp\n    return strings\n\n# example usage\nstrings = [\"cat\", \"dog\", \"elephant\", \"apple\"]\nprint(string_sort(strings))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a sorting algorithm for strings in Python.\n\n### Input:\n\n\n### Output:\ndef string_sort(strings):\n    # Bubble sort algorithm\n    for i in range(len(strings)-1):\n        for j in range(i+1, len(strings)):\n            if strings[i] > strings[j]:\n                temp = strings[i]\n                strings[i] = strings[j]\n                strings[j] = temp\n    return strings\n\n# example usage\nstrings = [\"cat\", \"dog\", \"elephant\", \"apple\"]\nprint(string_sort(strings))"}
{"instruction":"Generate a Python class to construct a linked list.","input":"","output":"class Node:\n def __init__(self, data):\n self.data = data\n self.next = None\n\nclass LinkedList:\n def __init__(self):\n self.head = None\n\ndef append(self, new_data):\n new_node = Node(new_data)\n if self.head == None:\n self.head = new_node\n return\n last = self.head\n while last.next:\n last = last.next\n last.next = new_node","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class to construct a linked list.\n\n### Input:\n\n\n### Output:\nclass Node:\n def __init__(self, data):\n self.data = data\n self.next = None\n\nclass LinkedList:\n def __init__(self):\n self.head = None\n\ndef append(self, new_data):\n new_node = Node(new_data)\n if self.head == None:\n self.head = new_node\n return\n last = self.head\n while last.next:\n last = last.next\n last.next = new_node"}
{"instruction":"Build a python class that takes two parameters and returns the sum of the two numbers.","input":"","output":"class Summation:\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n\n    def get_sum(self):\n        return self.num1 + self.num2\n\ntotal = Summation(5, 10).get_sum()\nprint(total)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a python class that takes two parameters and returns the sum of the two numbers.\n\n### Input:\n\n\n### Output:\nclass Summation:\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n\n    def get_sum(self):\n        return self.num1 + self.num2\n\ntotal = Summation(5, 10).get_sum()\nprint(total)"}
{"instruction":"Generate a Python program to merge two sorted lists into one sorted list.","input":"List 1 = [1, 5, 8, 12] \nList 2 = [2, 3, 5, 6, 11]","output":"def merge(list1, list2): \n    merged_list = [] \n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2): \n        if list1[i] < list2[j]: \n            merged_list.append(list1[i]) \n            i += 1\n  \n        else: \n            merged_list.append(list2[j]) \n            j += 1\n  \n    merged_list += list1[i:] \n    merged_list += list2[j:] \n      \n    return merged_list \n\nlist1 = [1, 5, 8, 12] \nlist2 = [2, 3, 5, 6, 11]\nprint(merge(list1, list2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to merge two sorted lists into one sorted list.\n\n### Input:\nList 1 = [1, 5, 8, 12] \nList 2 = [2, 3, 5, 6, 11]\n\n### Output:\ndef merge(list1, list2): \n    merged_list = [] \n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2): \n        if list1[i] < list2[j]: \n            merged_list.append(list1[i]) \n            i += 1\n  \n        else: \n            merged_list.append(list2[j]) \n            j += 1\n  \n    merged_list += list1[i:] \n    merged_list += list2[j:] \n      \n    return merged_list \n\nlist1 = [1, 5, 8, 12] \nlist2 = [2, 3, 5, 6, 11]\nprint(merge(list1, list2))"}
{"instruction":"Create a function in Python that will take a list as an argument and return the average of the first 3 elements in the list.","input":"[1, 2, 3, 4, 5]","output":"def getAverageOfFirstThree(data):\n    sum = 0\n    for i in range(3):\n        sum += data[i]\n    \n    return sum \/ 3","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that will take a list as an argument and return the average of the first 3 elements in the list.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef getAverageOfFirstThree(data):\n    sum = 0\n    for i in range(3):\n        sum += data[i]\n    \n    return sum \/ 3"}
{"instruction":"Generate a python program that implements the insertion sort algorithm.","input":"Not applicable","output":"def insertionSort(arr): \n    # Traverse through 1 to len(arr) \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key \n\n# Driver code to test above \narr = [12, 11, 13, 5, 6] \ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (str(arr[i]) +\" \")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program that implements the insertion sort algorithm.\n\n### Input:\nNot applicable\n\n### Output:\ndef insertionSort(arr): \n    # Traverse through 1 to len(arr) \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key \n\n# Driver code to test above \narr = [12, 11, 13, 5, 6] \ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (str(arr[i]) +\" \")"}
{"instruction":"Create a web scraper using Python and Selenium to scrape information from IMDB website.","input":"","output":"from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport pandas as pd\n\n# Initialize Webdriver\ndriver = webdriver.Firefox()\n\n# Open the IMDB website\ndriver.get('https:\/\/www.imdb.com\/chart\/top?ref_=ft_250')\n\n# Wait until the elements on the web page are loaded\nWebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.ID, \"chart\")))\n\n# Parse and store the information to a pandas dataframe\ntitles = driver.find_elements_by_class_name('titleColumn')\nratings = driver.find_elements_by_class_name('ratingColumn')\ndf = pd.DataFrame(columns = ['title', 'rating'])\n\nfor title, rating in zip(titles, ratings):\n    df = df.append({'title': title.text, 'rating':rating.text}, ignore_index=True)\n\n# Close the browser\ndriver.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper using Python and Selenium to scrape information from IMDB website.\n\n### Input:\n\n\n### Output:\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport pandas as pd\n\n# Initialize Webdriver\ndriver = webdriver.Firefox()\n\n# Open the IMDB website\ndriver.get('https:\/\/www.imdb.com\/chart\/top?ref_=ft_250')\n\n# Wait until the elements on the web page are loaded\nWebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.ID, \"chart\")))\n\n# Parse and store the information to a pandas dataframe\ntitles = driver.find_elements_by_class_name('titleColumn')\nratings = driver.find_elements_by_class_name('ratingColumn')\ndf = pd.DataFrame(columns = ['title', 'rating'])\n\nfor title, rating in zip(titles, ratings):\n    df = df.append({'title': title.text, 'rating':rating.text}, ignore_index=True)\n\n# Close the browser\ndriver.close()"}
{"instruction":"Create an algorithm to determine if two strings have the same character set in Python.","input":"Strings: \"paris\" and \"sapir\"","output":"def same_charset(str1, str2):\n\t\n\tstr1 = sorted(str1) \n\tstr2 = sorted(str2)\n \n\tif(str1 == str2):\n\t\treturn True\n\telse:\n\t\treturn False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to determine if two strings have the same character set in Python.\n\n### Input:\nStrings: \"paris\" and \"sapir\"\n\n### Output:\ndef same_charset(str1, str2):\n\t\n\tstr1 = sorted(str1) \n\tstr2 = sorted(str2)\n \n\tif(str1 == str2):\n\t\treturn True\n\telse:\n\t\treturn False"}
{"instruction":"Develop a python program to print allPrime Numbers between 1 and 50.","input":"","output":"# Function to check prime or not\ndef isPrime(n): \n    result = True\n  \n    # check if number is divisible from 2 to n-1 or not\n    for i in range(2, n): \n        if n%i == 0: \n            result = False\n            break\n          \n    return result \n  \n# printing prime numbers between 1 to 50\nfor n in range(1, 51):\n    if isPrime(n): \n        print(n)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python program to print allPrime Numbers between 1 and 50.\n\n### Input:\n\n\n### Output:\n# Function to check prime or not\ndef isPrime(n): \n    result = True\n  \n    # check if number is divisible from 2 to n-1 or not\n    for i in range(2, n): \n        if n%i == 0: \n            result = False\n            break\n          \n    return result \n  \n# printing prime numbers between 1 to 50\nfor n in range(1, 51):\n    if isPrime(n): \n        print(n)"}
{"instruction":"Generate code for a Convolutional Neural Network (CNN) model in Python that can recognize handwriting digits from the MNIST dataset.","input":"","output":"# Imports\nimport torch.nn as nn\nimport torch\n\n# CNN Model\nclass CNN(nn.Module):\n    def __init__(self):\n        super(CNN, self).__init__()\n        # Convolutional blocks\n        self.conv1 = nn.Sequential(\n            nn.Conv2d(1, 6, 3, 1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2))\n        self.conv2 = nn.Sequential(\n            nn.Conv2d(6, 16, 3, 1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2))\n        # Fully connected layers\n        self.fc1 = nn.Linear(5 * 5 * 16, 120)\n        self.fc2 = nn.Linear(120, 84)\n        self.fc3 = nn.Linear(84, 10)\n \n    def forward(self, x):\n        # Forward pass through convolutional blocks\n        out = self.conv1(x)\n        out = self.conv2(out)\n        # Flatten the tensor for use in fully connected layers\n        out = out.view(-1, 5 * 5 * 16)\n        # Forward pass through fully connected layers\n        out = self.fc1(out)\n        out = self.fc2(out)\n        out = self.fc3(out)\n        return out\n\n# Create an instance of the model \nmodel = CNN()\n# Move model to GPU if available\nif torch.cuda.is_available():\n  model.cuda()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code for a Convolutional Neural Network (CNN) model in Python that can recognize handwriting digits from the MNIST dataset.\n\n### Input:\n\n\n### Output:\n# Imports\nimport torch.nn as nn\nimport torch\n\n# CNN Model\nclass CNN(nn.Module):\n    def __init__(self):\n        super(CNN, self).__init__()\n        # Convolutional blocks\n        self.conv1 = nn.Sequential(\n            nn.Conv2d(1, 6, 3, 1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2))\n        self.conv2 = nn.Sequential(\n            nn.Conv2d(6, 16, 3, 1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2))\n        # Fully connected layers\n        self.fc1 = nn.Linear(5 * 5 * 16, 120)\n        self.fc2 = nn.Linear(120, 84)\n        self.fc3 = nn.Linear(84, 10)\n \n    def forward(self, x):\n        # Forward pass through convolutional blocks\n        out = self.conv1(x)\n        out = self.conv2(out)\n        # Flatten the tensor for use in fully connected layers\n        out = out.view(-1, 5 * 5 * 16)\n        # Forward pass through fully connected layers\n        out = self.fc1(out)\n        out = self.fc2(out)\n        out = self.fc3(out)\n        return out\n\n# Create an instance of the model \nmodel = CNN()\n# Move model to GPU if available\nif torch.cuda.is_available():\n  model.cuda()"}
{"instruction":"Simplify a fraction using a provided Python code.","input":"def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)","output":"def simplify(numerator, denominator):\n    \n    # find the gcd (greatest common divisor)\n    gcd = gcd(numerator, denominator)\n\n    # divide both numerator and denominator by the gcd\n    simplified_numerator = int(numerator\/gcd)\n    simplified_denominator = int(denominator\/gcd)\n\n    return simplified_numerator, simplified_denominator","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSimplify a fraction using a provided Python code.\n\n### Input:\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n### Output:\ndef simplify(numerator, denominator):\n    \n    # find the gcd (greatest common divisor)\n    gcd = gcd(numerator, denominator)\n\n    # divide both numerator and denominator by the gcd\n    simplified_numerator = int(numerator\/gcd)\n    simplified_denominator = int(denominator\/gcd)\n\n    return simplified_numerator, simplified_denominator"}
{"instruction":"Identify the differences between a static method and a class method in Python","input":"","output":"A static method is a method that is associated with a class, but its definition cannot access the data of individual instances of the class. A static method will always have the same output, no matter what class instance it is called on. \n\nA class method on the other hand is associated with a class and it is able to access the data of individual instances of the class. A class method will change its output depending on the instance of the class that it is called on.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIdentify the differences between a static method and a class method in Python\n\n### Input:\n\n\n### Output:\nA static method is a method that is associated with a class, but its definition cannot access the data of individual instances of the class. A static method will always have the same output, no matter what class instance it is called on. \n\nA class method on the other hand is associated with a class and it is able to access the data of individual instances of the class. A class method will change its output depending on the instance of the class that it is called on."}
{"instruction":"Develop a Python program to perform this operation.","input":"Find the sum of the digits of an integer.\n\nInput: 323","output":"def sum_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n \/\/ 10\n    return sum\n\nresult = sum_digits(323)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to perform this operation.\n\n### Input:\nFind the sum of the digits of an integer.\n\nInput: 323\n\n### Output:\ndef sum_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n \/\/ 10\n    return sum\n\nresult = sum_digits(323)\nprint(result)"}
{"instruction":"Given an email list, write a python program to sort the list alphabetically","input":"['bob@example.com', 'alice@example.com', 'jane@google.com', 'mary@example.com']","output":"def sort_list(list_of_emails):\n    list_of_emails.sort()\n    return list_of_emails\n\nprint(sort_list(['bob@example.com', 'alice@example.com', 'jane@google.com', 'mary@example.com']))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an email list, write a python program to sort the list alphabetically\n\n### Input:\n['bob@example.com', 'alice@example.com', 'jane@google.com', 'mary@example.com']\n\n### Output:\ndef sort_list(list_of_emails):\n    list_of_emails.sort()\n    return list_of_emails\n\nprint(sort_list(['bob@example.com', 'alice@example.com', 'jane@google.com', 'mary@example.com']))"}
{"instruction":"Write a Python program to identify all words in the given paragraph.","input":"paragraph = \"Thomas Jefferson was an American statesman, diplomat, lawyer, architect, philosopher and Founding Father who served as the third president of the United States from 1801 to 1809.\"","output":"paragraph = \"Thomas Jefferson was an American statesman, diplomat, lawyer, architect, philosopher and Founding Father who served as the third president of the United States from 1801 to 1809.\"\n\nwords = paragraph.split() \nprint(words)\n# [\"Thomas\", \"Jefferson\", \"was\", \"an\", \"American\", \"statesman,\", \"diplomat,\", \"lawyer,\", \"architect,\", \"philosopher\", \"and\", \"Founding\", \"Father\", \"who\", \"served\", \"as\", \"the\", \"third\", \"president\", \"of\", \"the\", \"United\", \"States\", \"from\", \"1801\", \"to\", \"1809.\"]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to identify all words in the given paragraph.\n\n### Input:\nparagraph = \"Thomas Jefferson was an American statesman, diplomat, lawyer, architect, philosopher and Founding Father who served as the third president of the United States from 1801 to 1809.\"\n\n### Output:\nparagraph = \"Thomas Jefferson was an American statesman, diplomat, lawyer, architect, philosopher and Founding Father who served as the third president of the United States from 1801 to 1809.\"\n\nwords = paragraph.split() \nprint(words)\n# [\"Thomas\", \"Jefferson\", \"was\", \"an\", \"American\", \"statesman,\", \"diplomat,\", \"lawyer,\", \"architect,\", \"philosopher\", \"and\", \"Founding\", \"Father\", \"who\", \"served\", \"as\", \"the\", \"third\", \"president\", \"of\", \"the\", \"United\", \"States\", \"from\", \"1801\", \"to\", \"1809.\"]"}
{"instruction":"Write a Python program to get the largest number from a list.","input":"nums = [1, 3, 5, 7, 2, 4, 6, 8]","output":"def get_largest_number(nums):\n  return max(nums)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to get the largest number from a list.\n\n### Input:\nnums = [1, 3, 5, 7, 2, 4, 6, 8]\n\n### Output:\ndef get_largest_number(nums):\n  return max(nums)"}
{"instruction":"Develop a Raspberry Pi program in Python to continuously measure humidity and temperature and displays it on an LCD display.","input":"","output":"import Adafruit_DHT\nimport RPi.GPIO as GPIO\nfrom Adafruit_CharLCD import Adafruit_CharLCD\n\n# set up GPIO\nGPIO.setmode(GPIO.BOARD)\n\n#connect the sensor\nsensor = Adafruit_DHT.DHT11\n\n#temporarily use this pin for the sensor\npin = 27\n\n#set up the LCD\nlcd = Adafruit_CharLCD(rs=26, en=19,\n    d4=13, d5=6, d6=5, d7=11,\n    cols=16, lines=2)\n\n#function to measure the humidity and temp\ndef measure_humidity_and_temp():\n    humidity, temperature = Adafruit_DHT.read_retry(sensor, pin)\n\n    if humidity is not None and temperature is not None:\n        lcd.clear()\n        lcd.message('Temp={0:0.1f} Humidity={1:0.1f}'.format(temperature, humidity))\n    else:\n        lcd.message('Failed to get reading.')\n\n#run the program continuously\nwhile True:\n    measure_humidity_and_temp()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Raspberry Pi program in Python to continuously measure humidity and temperature and displays it on an LCD display.\n\n### Input:\n\n\n### Output:\nimport Adafruit_DHT\nimport RPi.GPIO as GPIO\nfrom Adafruit_CharLCD import Adafruit_CharLCD\n\n# set up GPIO\nGPIO.setmode(GPIO.BOARD)\n\n#connect the sensor\nsensor = Adafruit_DHT.DHT11\n\n#temporarily use this pin for the sensor\npin = 27\n\n#set up the LCD\nlcd = Adafruit_CharLCD(rs=26, en=19,\n    d4=13, d5=6, d6=5, d7=11,\n    cols=16, lines=2)\n\n#function to measure the humidity and temp\ndef measure_humidity_and_temp():\n    humidity, temperature = Adafruit_DHT.read_retry(sensor, pin)\n\n    if humidity is not None and temperature is not None:\n        lcd.clear()\n        lcd.message('Temp={0:0.1f} Humidity={1:0.1f}'.format(temperature, humidity))\n    else:\n        lcd.message('Failed to get reading.')\n\n#run the program continuously\nwhile True:\n    measure_humidity_and_temp()"}
{"instruction":"Design a Python program to convert all the lowercase letters to their corresponding uppercase letters in a given string.","input":"","output":"def upper_string(str): \n    res = \"\" \n    for i in range(len(str)): \n        if str[i].isupper(): \n            res += str[i] \n        else: \n            res += chr(ord(str[i])-32) \n    return res","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to convert all the lowercase letters to their corresponding uppercase letters in a given string.\n\n### Input:\n\n\n### Output:\ndef upper_string(str): \n    res = \"\" \n    for i in range(len(str)): \n        if str[i].isupper(): \n            res += str[i] \n        else: \n            res += chr(ord(str[i])-32) \n    return res"}
{"instruction":"Create an AI model in Python to classify emails from the Enron Spam Dataset as either spam or non-spam.","input":"Not applicable","output":"import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm\nfrom sklearn.metrics import precision_score\n\n# Load the dataset\ndf = pd.read_csv(\"spam.csv\", encoding='iso-8859-1')\n# Load label and data\nX = df['EmailText']\ny = df['Label']\n\n# Split data into train-test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n\n# Create bag of words model\ncount_vectorizer = CountVectorizer()\nX_train_counts = count_vectorizer.fit_transform(X_train)\n\n# Train the model\nclf = svm.SVC(kernel='linear')\nclf.fit(X_train_counts, y_train)\n\n# Test the model\nX_test_counts = count_vectorizer.transform(X_test)\npredictions = clf.predict(X_test_counts)\nscore = precision_score(y_test, predictions, average='binary')\n\nprint('Precision score of the model:', score)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI model in Python to classify emails from the Enron Spam Dataset as either spam or non-spam.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm\nfrom sklearn.metrics import precision_score\n\n# Load the dataset\ndf = pd.read_csv(\"spam.csv\", encoding='iso-8859-1')\n# Load label and data\nX = df['EmailText']\ny = df['Label']\n\n# Split data into train-test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n\n# Create bag of words model\ncount_vectorizer = CountVectorizer()\nX_train_counts = count_vectorizer.fit_transform(X_train)\n\n# Train the model\nclf = svm.SVC(kernel='linear')\nclf.fit(X_train_counts, y_train)\n\n# Test the model\nX_test_counts = count_vectorizer.transform(X_test)\npredictions = clf.predict(X_test_counts)\nscore = precision_score(y_test, predictions, average='binary')\n\nprint('Precision score of the model:', score)"}
{"instruction":"Write a Python program that generates a random password of length 10.","input":"","output":"import random\nimport string\n\ndef generate_password():\n    length = 10\n    char_set = string.ascii_letters + string.digits + string.punctuation\n    rand_pwd = ''.join(random.choice(char_set) for i in range(length))\n    return rand_pwd\n\nif __name__ == '__main__':\n    print(generate_password())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that generates a random password of length 10.\n\n### Input:\n\n\n### Output:\nimport random\nimport string\n\ndef generate_password():\n    length = 10\n    char_set = string.ascii_letters + string.digits + string.punctuation\n    rand_pwd = ''.join(random.choice(char_set) for i in range(length))\n    return rand_pwd\n\nif __name__ == '__main__':\n    print(generate_password())"}
{"instruction":"Develop a user interface in python tkinter to add, modify, and delete items from a list.","input":"","output":"# imports \nimport tkinter as tk\n\n# window config\nwin = tk.Tk()\nwin.title(\"list operations\")\n\n# list variable\ndata = []\n\n# functions\ndef add_item():\n    data.append(txt_input.get())\n    refresh_list()\n    \ndef delete_item():\n    data.remove(lst_data.get(tk.ACTIVE))\n    refresh_list()\n\ndef modify_item():\n    data[lst_data.curselection()[0]] = txt_input.get()\n    refresh_list()\n        \ndef refresh_list():\n    lst_data.delete(0, tk.END)\n    for item in data:\n        lst_data.insert(tk.END, item)\n\n# frame\nfrm_list = tk.Frame(win)\nlbl_input = tk.Label(frm_list, text=\"Input\")\ntxt_input = tk.Entry(frm_list, width=15)\n\nlbl_input.grid(row=0, column=0)\ntxt_input.grid(row=0, column=1)\n\n# listbox config\nlst_data = tk.Listbox(frm_list, height=5)\nlst_data.grid(row=1, column=0, columnspan=2)\n\n# button config\nbtn_add = tk.Button(frm_list, text=\"add\", command=add_item)\nbtn_delete = tk.Button(frm_list, text=\"delete\", command=delete_item)\nbtn_modify = tk.Button(frm_list, text=\"modify\", command=modify_item)\nbtn_add.grid(row=2, column=0)\nbtn_delete.grid(row=2, column=1)\nbtn_modify.grid(row=2, column=2)\n\n# frame grid\nfrm_list.grid(row=0, column=0)\n\nwin.mainloop()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a user interface in python tkinter to add, modify, and delete items from a list.\n\n### Input:\n\n\n### Output:\n# imports \nimport tkinter as tk\n\n# window config\nwin = tk.Tk()\nwin.title(\"list operations\")\n\n# list variable\ndata = []\n\n# functions\ndef add_item():\n    data.append(txt_input.get())\n    refresh_list()\n    \ndef delete_item():\n    data.remove(lst_data.get(tk.ACTIVE))\n    refresh_list()\n\ndef modify_item():\n    data[lst_data.curselection()[0]] = txt_input.get()\n    refresh_list()\n        \ndef refresh_list():\n    lst_data.delete(0, tk.END)\n    for item in data:\n        lst_data.insert(tk.END, item)\n\n# frame\nfrm_list = tk.Frame(win)\nlbl_input = tk.Label(frm_list, text=\"Input\")\ntxt_input = tk.Entry(frm_list, width=15)\n\nlbl_input.grid(row=0, column=0)\ntxt_input.grid(row=0, column=1)\n\n# listbox config\nlst_data = tk.Listbox(frm_list, height=5)\nlst_data.grid(row=1, column=0, columnspan=2)\n\n# button config\nbtn_add = tk.Button(frm_list, text=\"add\", command=add_item)\nbtn_delete = tk.Button(frm_list, text=\"delete\", command=delete_item)\nbtn_modify = tk.Button(frm_list, text=\"modify\", command=modify_item)\nbtn_add.grid(row=2, column=0)\nbtn_delete.grid(row=2, column=1)\nbtn_modify.grid(row=2, column=2)\n\n# frame grid\nfrm_list.grid(row=0, column=0)\n\nwin.mainloop()"}
{"instruction":"Design a Palindrome detection algorithm in Python.","input":"","output":"def is_palindrome(input_str):\n  len_input = len(input_str)\n\n  for i in range(len_input \/\/ 2):\n    if input_str[i] != input_str[len_input - i - 1]:\n      return False\n  \n  return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Palindrome detection algorithm in Python.\n\n### Input:\n\n\n### Output:\ndef is_palindrome(input_str):\n  len_input = len(input_str)\n\n  for i in range(len_input \/\/ 2):\n    if input_str[i] != input_str[len_input - i - 1]:\n      return False\n  \n  return True"}
{"instruction":"Develop an algorithm in Python to find the longest common prefix in an array of strings.","input":"array = [\"apple\", \"ape\", \"app\", \"application\"]","output":"def commonPrefix(array):\n    result = \"\"\n    if len(array) > 0:\n        # Find the minimum length of the word in the array.\n        min_length = min([len(i) for i in array])\n        \n        # Iterate through the letters in the word with the minimum length.\n        for i in range(min_length):\n            curr_char = array[0][i]\n            flag = True\n            \n            # For each letter, check if each of the words have that letter.\n            for j in range(len(array)):\n                if array[j][i] != curr_char:\n                    flag = False\n                    break\n            if flag:\n                result += curr_char\n            else:\n                break\n    return result\n\ncommonPrefix([\"apple\", \"ape\", \"app\", \"application\"])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to find the longest common prefix in an array of strings.\n\n### Input:\narray = [\"apple\", \"ape\", \"app\", \"application\"]\n\n### Output:\ndef commonPrefix(array):\n    result = \"\"\n    if len(array) > 0:\n        # Find the minimum length of the word in the array.\n        min_length = min([len(i) for i in array])\n        \n        # Iterate through the letters in the word with the minimum length.\n        for i in range(min_length):\n            curr_char = array[0][i]\n            flag = True\n            \n            # For each letter, check if each of the words have that letter.\n            for j in range(len(array)):\n                if array[j][i] != curr_char:\n                    flag = False\n                    break\n            if flag:\n                result += curr_char\n            else:\n                break\n    return result\n\ncommonPrefix([\"apple\", \"ape\", \"app\", \"application\"])"}
{"instruction":"Generate a Python function to parse a web page from a given URL and identify the phone number on the page.","input":"https:\/\/example.com\/contact","output":"\"\"\"\nGenerate a Python function to parse a web page from a given URL and identify the phone number on the page.\n\"\"\"\n\nimport re\nimport requests\n\ndef find_phone_number(url):\n    response = requests.get(url)\n    html = response.text\n    phone_regex = r\"[\\+\\(]?[1-9][0-9 .\\-\\(\\)]{8,}[0-9]\"\n    matches = re.findall(phone_regex, html)\n    if matches:\n        return matches[0]\n    else:\n        return None\n \nif __name__ == '__main__':\n    print(find_phone_number('https:\/\/example.com\/contact'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to parse a web page from a given URL and identify the phone number on the page.\n\n### Input:\nhttps:\/\/example.com\/contact\n\n### Output:\n\"\"\"\nGenerate a Python function to parse a web page from a given URL and identify the phone number on the page.\n\"\"\"\n\nimport re\nimport requests\n\ndef find_phone_number(url):\n    response = requests.get(url)\n    html = response.text\n    phone_regex = r\"[\\+\\(]?[1-9][0-9 .\\-\\(\\)]{8,}[0-9]\"\n    matches = re.findall(phone_regex, html)\n    if matches:\n        return matches[0]\n    else:\n        return None\n \nif __name__ == '__main__':\n    print(find_phone_number('https:\/\/example.com\/contact'))"}
{"instruction":"Write a Python program to edit a given string to replace each vowel with its following character as defined below.\nVowel-> next character\na->e\ne->i\ni->o\no->u\nu->a","input":"string=\"geeks\"","output":"def edit_vowels(string): \n    vowels = 'aeiou'\n    next_chars = 'eioua'\n    result_string = ''\n    for char in string:\n        if char in vowels:\n            result_string += next_chars[vowels.index(char)]\n        else:\n            result_string += char\n    return result_string","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to edit a given string to replace each vowel with its following character as defined below.\nVowel-> next character\na->e\ne->i\ni->o\no->u\nu->a\n\n### Input:\nstring=\"geeks\"\n\n### Output:\ndef edit_vowels(string): \n    vowels = 'aeiou'\n    next_chars = 'eioua'\n    result_string = ''\n    for char in string:\n        if char in vowels:\n            result_string += next_chars[vowels.index(char)]\n        else:\n            result_string += char\n    return result_string"}
{"instruction":"Write a Python code for extracting numbers from a given text.","input":"","output":"import re\n\ndef extract_numbers(input_string):\n    \"\"\"This function extracts numbers from a given textstring using regular expressions.\"\"\"\n    \n    # Compile the regular expression\n    pattern = re.compile(r'\\d+')\n    \n    # Find all numbers in the string\n    output_list = pattern.findall(input_string)\n    \n    return output_list\n    \n# Sample Input\ninput_string = 'I have 2 cats and 3 dogs'\n    \n# Print the output\nprint(extract_numbers(input_string))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code for extracting numbers from a given text.\n\n### Input:\n\n\n### Output:\nimport re\n\ndef extract_numbers(input_string):\n    \"\"\"This function extracts numbers from a given textstring using regular expressions.\"\"\"\n    \n    # Compile the regular expression\n    pattern = re.compile(r'\\d+')\n    \n    # Find all numbers in the string\n    output_list = pattern.findall(input_string)\n    \n    return output_list\n    \n# Sample Input\ninput_string = 'I have 2 cats and 3 dogs'\n    \n# Print the output\nprint(extract_numbers(input_string))"}
{"instruction":"Create a Python application that predicts the sentiment of a tweet.","input":"tweet = \"I am feeling positive about life today!\"","output":"import nltk\n from nltk.sentiment.vader import SentimentIntensityAnalyzer \n \nsid = SentimentIntensityAnalyzer()\n\ndef predict_sentiment(tweet):\n scores = sid.polarity_scores(tweet)\n if scores['compound'] >= 0.5:\n return 'Positive'\n elif scores['compound'] <= -0.5:\n return 'Negative'\n else:\n return 'Neutral'\n \ntweet = \"I am feeling positive about life today!\"\n\nprint(predict_sentiment(tweet))\n# Output: Positive","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python application that predicts the sentiment of a tweet.\n\n### Input:\ntweet = \"I am feeling positive about life today!\"\n\n### Output:\nimport nltk\n from nltk.sentiment.vader import SentimentIntensityAnalyzer \n \nsid = SentimentIntensityAnalyzer()\n\ndef predict_sentiment(tweet):\n scores = sid.polarity_scores(tweet)\n if scores['compound'] >= 0.5:\n return 'Positive'\n elif scores['compound'] <= -0.5:\n return 'Negative'\n else:\n return 'Neutral'\n \ntweet = \"I am feeling positive about life today!\"\n\nprint(predict_sentiment(tweet))\n# Output: Positive"}
{"instruction":"Create a Python GUI to display the output of the following program in a chart.","input":"import pandas as pd\n\ndata = {\n   'x': [5,6,7,8,9,10],\n   'y': [11,5,5,5,5,5]\n}\n\ndf = pd.DataFrame(data)","output":"import tkinter as tk\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load the data\ndata = {\n   'x': [5,6,7,8,9,10],\n   'y': [11,5,5,5,5,5]\n}\n\ndf = pd.DataFrame(data)\n\n# Create the application window\nroot = tk.Tk()\n\n# Create a figure to display the data\nfig = plt.Figure(figsize=(4,4), dpi=100)\n\nax = fig.add_subplot(111)\n\nax.plot(df['x'], df['y'])\n\ncanvas = FigureCanvasTkAgg(fig, master=root)\ncanvas.get_tk_widget().pack()\n\n# Run the application\nroot.mainloop()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python GUI to display the output of the following program in a chart.\n\n### Input:\nimport pandas as pd\n\ndata = {\n   'x': [5,6,7,8,9,10],\n   'y': [11,5,5,5,5,5]\n}\n\ndf = pd.DataFrame(data)\n\n### Output:\nimport tkinter as tk\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load the data\ndata = {\n   'x': [5,6,7,8,9,10],\n   'y': [11,5,5,5,5,5]\n}\n\ndf = pd.DataFrame(data)\n\n# Create the application window\nroot = tk.Tk()\n\n# Create a figure to display the data\nfig = plt.Figure(figsize=(4,4), dpi=100)\n\nax = fig.add_subplot(111)\n\nax.plot(df['x'], df['y'])\n\ncanvas = FigureCanvasTkAgg(fig, master=root)\ncanvas.get_tk_widget().pack()\n\n# Run the application\nroot.mainloop()"}
{"instruction":"Write a Python program to find the sum of all numbers divisible by 10 between 50 and 200.","input":"Not applicable","output":"# start with a sum of 0\nsum = 0\n\n# set the minimum and maximum numbers\nmin = 50\nmax = 200\n\n# loop from min to max \nfor i in range(min, max+1):\n# check if number is divisible by 10\n if i%10 == 0:\n # add the number to the sum\n sum += i\n\n# print the sum\nprint(sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the sum of all numbers divisible by 10 between 50 and 200.\n\n### Input:\nNot applicable\n\n### Output:\n# start with a sum of 0\nsum = 0\n\n# set the minimum and maximum numbers\nmin = 50\nmax = 200\n\n# loop from min to max \nfor i in range(min, max+1):\n# check if number is divisible by 10\n if i%10 == 0:\n # add the number to the sum\n sum += i\n\n# print the sum\nprint(sum)"}
{"instruction":"Generate a piece of code to demonstrate the usage of for loop in python.","input":"","output":"for i in range(10):\n  print('The value of the variable i is: ', i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a piece of code to demonstrate the usage of for loop in python.\n\n### Input:\n\n\n### Output:\nfor i in range(10):\n  print('The value of the variable i is: ', i)"}
{"instruction":"Vectorize a given Python function using the Numpy library","input":"def add_lists(list1, list2):\n    result = []\n\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n        \n    return result","output":"\"\"\"\nVectorized version of the add_lists function using Numpy library\n\"\"\"\n\nimport numpy as np\n\ndef np_add_lists(list1, list2):\n    # Convert the lists to Numpy arrays\n    array1 = np.array(list1)\n    array2 = np.array(list2)\n\n    # Perform the element-wise addition\n    result = array1 + array2\n    \n    # Return the result as a list\n    return list(result)\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = [4, 5, 6]\n    print(np_add_lists(list1, list2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nVectorize a given Python function using the Numpy library\n\n### Input:\ndef add_lists(list1, list2):\n    result = []\n\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n        \n    return result\n\n### Output:\n\"\"\"\nVectorized version of the add_lists function using Numpy library\n\"\"\"\n\nimport numpy as np\n\ndef np_add_lists(list1, list2):\n    # Convert the lists to Numpy arrays\n    array1 = np.array(list1)\n    array2 = np.array(list2)\n\n    # Perform the element-wise addition\n    result = array1 + array2\n    \n    # Return the result as a list\n    return list(result)\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = [4, 5, 6]\n    print(np_add_lists(list1, list2))"}
{"instruction":"Create a Python program that takes a list of numbers, sorts them in descending order, calculates the average of the numbers, and prints the result.","input":"[3, 7, 9, 4, 5]","output":"# Calculating average of [3, 7, 9, 4, 5]\nsorted_nums = sorted([3, 7, 9, 4, 5], reverse=True)\nsum_nums = sum(sorted_nums)\n\n# Calculating average\naverage = sum_nums\/len(sorted_nums)\n\n# Printing the average\nprint('The average of the list is: ', average)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a list of numbers, sorts them in descending order, calculates the average of the numbers, and prints the result.\n\n### Input:\n[3, 7, 9, 4, 5]\n\n### Output:\n# Calculating average of [3, 7, 9, 4, 5]\nsorted_nums = sorted([3, 7, 9, 4, 5], reverse=True)\nsum_nums = sum(sorted_nums)\n\n# Calculating average\naverage = sum_nums\/len(sorted_nums)\n\n# Printing the average\nprint('The average of the list is: ', average)"}
{"instruction":"Write a Python program to display a list of all the prime numbers between a given range.","input":"Not applicable","output":"def prime_nums_in_range(start, end): \n prime_list = [] \n for num in range(start, end + 1): \n if num > 1: # check for cases greater than 1 \n for i in range(2, num): \n if (num % i) == 0: \n break \n else: \n prime_list.append(num) \n return prime_list \n\nstart = 2 \nend = 20 \nprint(prime_nums_in_range(start, end)) \n# Output: [2, 3, 5, 7, 11, 13, 17, 19]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to display a list of all the prime numbers between a given range.\n\n### Input:\nNot applicable\n\n### Output:\ndef prime_nums_in_range(start, end): \n prime_list = [] \n for num in range(start, end + 1): \n if num > 1: # check for cases greater than 1 \n for i in range(2, num): \n if (num % i) == 0: \n break \n else: \n prime_list.append(num) \n return prime_list \n\nstart = 2 \nend = 20 \nprint(prime_nums_in_range(start, end)) \n# Output: [2, 3, 5, 7, 11, 13, 17, 19]"}
{"instruction":"Write a Python function to sort the given list of strings using the length of the strings instead of alphabetically.","input":"","output":"def sortStringByLength(string_list):\n    string_list.sort(key = lambda x:len(x)) \n    return string_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to sort the given list of strings using the length of the strings instead of alphabetically.\n\n### Input:\n\n\n### Output:\ndef sortStringByLength(string_list):\n    string_list.sort(key = lambda x:len(x)) \n    return string_list"}
{"instruction":"Automate this manual process using Python scripting.","input":"Every day, we manually check the prices of products listed on a specific website.","output":"import requests\nimport pandas as pd\nimport json\n\nurl = 'https:\/\/www.example.com\/'\n\nresponse = requests.get(url)\nproducts = json.loads(response.content)\n\nprice_df = pd.DataFrame(columns=['Product', 'Price'])\n\nfor product in products:\n    product_name = product['name']\n    product_price = product['price']\n    price_df = price_df.append({'Product': product_name, 'Price': product_price}, ignore_index=True)\n\nprice_df.to_csv('product_price.csv', index=False)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAutomate this manual process using Python scripting.\n\n### Input:\nEvery day, we manually check the prices of products listed on a specific website.\n\n### Output:\nimport requests\nimport pandas as pd\nimport json\n\nurl = 'https:\/\/www.example.com\/'\n\nresponse = requests.get(url)\nproducts = json.loads(response.content)\n\nprice_df = pd.DataFrame(columns=['Product', 'Price'])\n\nfor product in products:\n    product_name = product['name']\n    product_price = product['price']\n    price_df = price_df.append({'Product': product_name, 'Price': product_price}, ignore_index=True)\n\nprice_df.to_csv('product_price.csv', index=False)"}
{"instruction":"Given a list of strings, write a Python program to convert each of the strings to lowercase.","input":"[\"My Heart Will Go On\",\"We Are The Champions\",\"Thriller\",\"Welcome To The Jungle\",\"Eye Of The Tiger\",\"Money For Nothing\",\"Billie Jean\",\"Purple Rain\",\"The Show Must Go On\",\"Bohemian Rhapsody\"]","output":"new_list = []\nfor item in [\"My Heart Will Go On\",\"We Are The Champions\",\"Thriller\",\"Welcome To The Jungle\",\"Eye Of The Tiger\",\"Money For Nothing\",\"Billie Jean\",\"Purple Rain\",\"The Show Must Go On\",\"Bohemian Rhapsody\"]:\n    new_list.append(item.lower())\n\nprint(new_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of strings, write a Python program to convert each of the strings to lowercase.\n\n### Input:\n[\"My Heart Will Go On\",\"We Are The Champions\",\"Thriller\",\"Welcome To The Jungle\",\"Eye Of The Tiger\",\"Money For Nothing\",\"Billie Jean\",\"Purple Rain\",\"The Show Must Go On\",\"Bohemian Rhapsody\"]\n\n### Output:\nnew_list = []\nfor item in [\"My Heart Will Go On\",\"We Are The Champions\",\"Thriller\",\"Welcome To The Jungle\",\"Eye Of The Tiger\",\"Money For Nothing\",\"Billie Jean\",\"Purple Rain\",\"The Show Must Go On\",\"Bohemian Rhapsody\"]:\n    new_list.append(item.lower())\n\nprint(new_list)"}
{"instruction":"Determine the type of the following python object.","input":"[1, 2, [3, 4]]","output":"list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDetermine the type of the following python object.\n\n### Input:\n[1, 2, [3, 4]]\n\n### Output:\nlist"}
{"instruction":"Write a python program that prints the number of days in a month.","input":"","output":"# Function to calculate number of days in a month\ndef num_days_in_month(month, year):\n    # List of all months\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \n              \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    \n    # List of all number of days in a month\n    num_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Check if the year is a leap year\n    if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)):\n        num_of_days[1] = 29\n    \n    # Return the number of days\n    return num_of_days[months.index(month)]\n\n# Driver Code \nmonth = \"May\"\nyear = 2020\nprint(\"Number of days in {} {} are {}\".format(month, year, num_days_in_month(month, year)))\n\n# Output:\n# Number of days in May 2020 are 31","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that prints the number of days in a month.\n\n### Input:\n\n\n### Output:\n# Function to calculate number of days in a month\ndef num_days_in_month(month, year):\n    # List of all months\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \n              \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    \n    # List of all number of days in a month\n    num_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Check if the year is a leap year\n    if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)):\n        num_of_days[1] = 29\n    \n    # Return the number of days\n    return num_of_days[months.index(month)]\n\n# Driver Code \nmonth = \"May\"\nyear = 2020\nprint(\"Number of days in {} {} are {}\".format(month, year, num_days_in_month(month, year)))\n\n# Output:\n# Number of days in May 2020 are 31"}
{"instruction":"Suppose a list contains two fields namely name and address. Build a quick-sort algorithm in Python to sort the data on the basis of the name field.","input":"[\n     {\"name\": \"John\", \"address\": \"123 Main Street\"},\n     {\"name\": \"Adam\", \"address\": \"456 First Avenue\"},\n     {\"name\": \"Mike\", \"address\": \"789 Street Street\"}\n]","output":"def swap(list, i, j):\n temp = list[i]\n list[i] = list[j]\n list[j] = temp\n\ndef quickSort(list, key):\n if len(list) <= 1:\n  return list\n\n pivot = len(list) \/\/ 2\n pivotVal = list[pivot][key]\n \n less = [x for x in list if x[key] < pivotVal]\n equal = [x for x in list if x[key] == pivotVal]\n more = [x for x in list if x[key] > pivotVal]\n \n return quickSort(less, key) + equal + quickSort(more, key)\n\nlist = [\n     {\"name\": \"John\", \"address\": \"123 Main Street\"},\n     {\"name\": \"Adam\", \"address\": \"456 First Avenue\"},\n     {\"name\": \"Mike\", \"address\": \"789 Street Street\"}\n]\nsortedList = quickSort(list, \"name\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuppose a list contains two fields namely name and address. Build a quick-sort algorithm in Python to sort the data on the basis of the name field.\n\n### Input:\n[\n     {\"name\": \"John\", \"address\": \"123 Main Street\"},\n     {\"name\": \"Adam\", \"address\": \"456 First Avenue\"},\n     {\"name\": \"Mike\", \"address\": \"789 Street Street\"}\n]\n\n### Output:\ndef swap(list, i, j):\n temp = list[i]\n list[i] = list[j]\n list[j] = temp\n\ndef quickSort(list, key):\n if len(list) <= 1:\n  return list\n\n pivot = len(list) \/\/ 2\n pivotVal = list[pivot][key]\n \n less = [x for x in list if x[key] < pivotVal]\n equal = [x for x in list if x[key] == pivotVal]\n more = [x for x in list if x[key] > pivotVal]\n \n return quickSort(less, key) + equal + quickSort(more, key)\n\nlist = [\n     {\"name\": \"John\", \"address\": \"123 Main Street\"},\n     {\"name\": \"Adam\", \"address\": \"456 First Avenue\"},\n     {\"name\": \"Mike\", \"address\": \"789 Street Street\"}\n]\nsortedList = quickSort(list, \"name\")"}
{"instruction":"Write a Python program to classify items into two categories - 'fruit' and 'vegetable'.","input":"['apple', 'carrot', 'tomato', 'cherry']","output":"# Define set of labels:\nlabels = ['fruit', 'vegetable']\n\n# Read the input data\ninput_data = ['apple', 'carrot', 'tomato', 'cherry']\n\n# Define function to classify the items\ndef classify(data):\n result = []\n\n for item in data:\n  if item in ['apple', 'cherry']:\n   result.append('fruit')\n  else:\n   result.append('vegetable')\n\n return result\n\n# Call the function to classify\nclassified_data = classify(input_data)\n\n# Print the results\nfor item, label in zip(input_data,classified_data):\n print(f'{item} is classified as {label}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify items into two categories - 'fruit' and 'vegetable'.\n\n### Input:\n['apple', 'carrot', 'tomato', 'cherry']\n\n### Output:\n# Define set of labels:\nlabels = ['fruit', 'vegetable']\n\n# Read the input data\ninput_data = ['apple', 'carrot', 'tomato', 'cherry']\n\n# Define function to classify the items\ndef classify(data):\n result = []\n\n for item in data:\n  if item in ['apple', 'cherry']:\n   result.append('fruit')\n  else:\n   result.append('vegetable')\n\n return result\n\n# Call the function to classify\nclassified_data = classify(input_data)\n\n# Print the results\nfor item, label in zip(input_data,classified_data):\n print(f'{item} is classified as {label}')"}
{"instruction":"Develop a Python program that takes a text string as input and displays only those words which contain the letter \u2018a\u2019.","input":"\"This is an example of a string to test.\"","output":"input_text = 'This is an example of a string to test.'\n\nwords = input_text.split()\n\nfor word in words:\n  if 'a' in word:\n    print(word)\n\n# Output: \nan\nexample\na\nstring\ntest.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that takes a text string as input and displays only those words which contain the letter \u2018a\u2019.\n\n### Input:\n\"This is an example of a string to test.\"\n\n### Output:\ninput_text = 'This is an example of a string to test.'\n\nwords = input_text.split()\n\nfor word in words:\n  if 'a' in word:\n    print(word)\n\n# Output: \nan\nexample\na\nstring\ntest."}
{"instruction":"Write a JavaScript program to create a bar chart that displays the number of jobs available for different programming languages.","input":"[\n { language: 'JavaScript', count: 250 },\n { language: 'Python', count: 200 },\n { language: 'C++', count: 150 },\n { language: 'Java', count: 100 }\n]","output":"<html>\n <head>\n  <title>Job Openings By Language<\/title>\n <\/head>\n <body>\n  <canvas id=\"chart\"><\/canvas>\n  <script>\n   const ctx = document.getElementById('chart').getContext('2d');\n   const chart = new Chart(ctx, {\n    type: 'bar',\n    data: {\n     labels: [\"JavaScript\", \"Python\", \"C++\", \"Java\"],\n     datasets: [{\n      label: '# of Openings',\n      data: [250, 200, 150, 100],\n      backgroundColor: [\n       'rgba(255, 99, 132, 0.2)',\n       'rgba(54, 162, 235, 0.2)',\n       'rgba(255, 206, 86, 0.2)',\n       'rgba(75, 192, 192, 0.2)'\n      ],\n      borderColor: [\n       'rgba(255, 99, 132, 1)',\n       'rgba(54, 162, 235, 1)',\n       'rgba(255, 206, 86, 1)',\n       'rgba(75, 192, 192, 1)'\n      ],\n      borderWidth: 1\n     }]\n    },\n    options: {\n     scales: {\n      yAxes: [{\n       ticks: {\n        beginAtZero: true\n       }\n      }]\n     }\n    }\n   });\n  <\/script>\n <\/body>\n<\/html>","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a JavaScript program to create a bar chart that displays the number of jobs available for different programming languages.\n\n### Input:\n[\n { language: 'JavaScript', count: 250 },\n { language: 'Python', count: 200 },\n { language: 'C++', count: 150 },\n { language: 'Java', count: 100 }\n]\n\n### Output:\n<html>\n <head>\n  <title>Job Openings By Language<\/title>\n <\/head>\n <body>\n  <canvas id=\"chart\"><\/canvas>\n  <script>\n   const ctx = document.getElementById('chart').getContext('2d');\n   const chart = new Chart(ctx, {\n    type: 'bar',\n    data: {\n     labels: [\"JavaScript\", \"Python\", \"C++\", \"Java\"],\n     datasets: [{\n      label: '# of Openings',\n      data: [250, 200, 150, 100],\n      backgroundColor: [\n       'rgba(255, 99, 132, 0.2)',\n       'rgba(54, 162, 235, 0.2)',\n       'rgba(255, 206, 86, 0.2)',\n       'rgba(75, 192, 192, 0.2)'\n      ],\n      borderColor: [\n       'rgba(255, 99, 132, 1)',\n       'rgba(54, 162, 235, 1)',\n       'rgba(255, 206, 86, 1)',\n       'rgba(75, 192, 192, 1)'\n      ],\n      borderWidth: 1\n     }]\n    },\n    options: {\n     scales: {\n      yAxes: [{\n       ticks: {\n        beginAtZero: true\n       }\n      }]\n     }\n    }\n   });\n  <\/script>\n <\/body>\n<\/html>"}
{"instruction":"Write a python program to get all possible subset combinations of a given set.","input":"[1,2,3]","output":"def subset_combinations(arr):\n    result = [[]]\n    for ele in arr:\n        for i in range(len(result)):\n            tmp = list(result[i])\n            tmp.append(ele)\n            result.append(tmp)\n\n    return result\n\nif __name__ == '__main__':\n    arr = [1,2,3]\n    print(\"All possible combinations:\", subset_combinations(arr))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to get all possible subset combinations of a given set.\n\n### Input:\n[1,2,3]\n\n### Output:\ndef subset_combinations(arr):\n    result = [[]]\n    for ele in arr:\n        for i in range(len(result)):\n            tmp = list(result[i])\n            tmp.append(ele)\n            result.append(tmp)\n\n    return result\n\nif __name__ == '__main__':\n    arr = [1,2,3]\n    print(\"All possible combinations:\", subset_combinations(arr))"}
{"instruction":"Create a Python program to extract the email and phone numbers within a given string.","input":"String:\n'My email is hello@domain.com and my phone number is +123456789.'","output":"import re\n\ntext = 'My email is hello@domain.com and my phone number is +123456789'\n\nemail = re.findall(\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\", text)\nphone = re.findall(\"\\+(9[976]\\d|8[987530]\\d|6[987]\\d|5[90]\\d|42\\d|3[875]\\d|\n2[98654321]\\d{9}|9[8543210]\\d{8})\\b\", text)\n\nprint(email)\nprint(phone)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to extract the email and phone numbers within a given string.\n\n### Input:\nString:\n'My email is hello@domain.com and my phone number is +123456789.'\n\n### Output:\nimport re\n\ntext = 'My email is hello@domain.com and my phone number is +123456789'\n\nemail = re.findall(\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\", text)\nphone = re.findall(\"\\+(9[976]\\d|8[987530]\\d|6[987]\\d|5[90]\\d|42\\d|3[875]\\d|\n2[98654321]\\d{9}|9[8543210]\\d{8})\\b\", text)\n\nprint(email)\nprint(phone)"}
{"instruction":"Design a python class to store fruit and its quantity in a grocery store.","input":"Banana - 200\nOrange - 300\nGrapes - 500","output":"class FruitGrocery:\n    def __init__(self):\n        self.items = {\n            'Banana': 200,\n            'Orange': 300,\n            'Grapes': 500\n        }\n\n    def get_item_quantity(self, item):\n        return self.items.get(item)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python class to store fruit and its quantity in a grocery store.\n\n### Input:\nBanana - 200\nOrange - 300\nGrapes - 500\n\n### Output:\nclass FruitGrocery:\n    def __init__(self):\n        self.items = {\n            'Banana': 200,\n            'Orange': 300,\n            'Grapes': 500\n        }\n\n    def get_item_quantity(self, item):\n        return self.items.get(item)"}
{"instruction":"Using Python, design an algorithm to summarize a given text.","input":"text = \"This is a piece of text, that needs to be summarized. To summarize, you need to condense the information into a shorter form, while still conveying the main points of the text. You also need to make sure that the summary retains the meaning of the original text.\"","output":"def summarize(text):\n    sentences = text.split('.')\n    \n    # Create a dictionary to store the number of occurrences of each word in the input\n    word_occurrences = {}\n    for sentence in sentences:\n        for word in sentence.split():\n            if word not in word_occurrences:\n                word_occurrences[word] = 0\n            word_occurrences[word] += 1\n    \n    # Sort the words based on their occurrences in the text\n    sorted_words = sorted(word_occurrences.items(), key=lambda x: x[1], reverse=True)\n    \n    # Use the top N most frequent words as the cornerstone of the summary\n    N = min(10, len(sorted_words))\n    cornerstone_words = [word[0] for word in sorted_words[:N]]\n    \n    # Find the sentences that contain the cornerstone words\n    summary = \"\"\n    for sentence in sentences:\n        for word in sentence.split():\n            if word in cornerstone_words:\n                summary += \" \" + sentence\n                break\n    return summary\n\nresult = summarize(text)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, design an algorithm to summarize a given text.\n\n### Input:\ntext = \"This is a piece of text, that needs to be summarized. To summarize, you need to condense the information into a shorter form, while still conveying the main points of the text. You also need to make sure that the summary retains the meaning of the original text.\"\n\n### Output:\ndef summarize(text):\n    sentences = text.split('.')\n    \n    # Create a dictionary to store the number of occurrences of each word in the input\n    word_occurrences = {}\n    for sentence in sentences:\n        for word in sentence.split():\n            if word not in word_occurrences:\n                word_occurrences[word] = 0\n            word_occurrences[word] += 1\n    \n    # Sort the words based on their occurrences in the text\n    sorted_words = sorted(word_occurrences.items(), key=lambda x: x[1], reverse=True)\n    \n    # Use the top N most frequent words as the cornerstone of the summary\n    N = min(10, len(sorted_words))\n    cornerstone_words = [word[0] for word in sorted_words[:N]]\n    \n    # Find the sentences that contain the cornerstone words\n    summary = \"\"\n    for sentence in sentences:\n        for word in sentence.split():\n            if word in cornerstone_words:\n                summary += \" \" + sentence\n                break\n    return summary\n\nresult = summarize(text)\nprint(result)"}
{"instruction":"Write a Python program to create a timeline that shows the date ranges for the given list of events.","input":"Events: \n- Job A:   15 Jan -  1 Feb\n- Job B:   4 May - 30 Jun\n- Job C:   9 Jul - 4 Aug","output":"timeline = {\n    \"Job A\":   {\"start\": datetime.datetime(2020,1,15), \n                \"end\": datetime.datetime(2020,2,1)\n                },\n    \"Job B\":   {\"start\": datetime.datetime(2020,5,4), \n                \"end\": datetime.datetime(2020,6,30)\n                },\n    \"Job C\":   {\"start\": datetime.datetime(2020,7,9), \n                \"end\": datetime.datetime(2020,8,4)\n                }\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a timeline that shows the date ranges for the given list of events.\n\n### Input:\nEvents: \n- Job A:   15 Jan -  1 Feb\n- Job B:   4 May - 30 Jun\n- Job C:   9 Jul - 4 Aug\n\n### Output:\ntimeline = {\n    \"Job A\":   {\"start\": datetime.datetime(2020,1,15), \n                \"end\": datetime.datetime(2020,2,1)\n                },\n    \"Job B\":   {\"start\": datetime.datetime(2020,5,4), \n                \"end\": datetime.datetime(2020,6,30)\n                },\n    \"Job C\":   {\"start\": datetime.datetime(2020,7,9), \n                \"end\": datetime.datetime(2020,8,4)\n                }\n}"}
{"instruction":"Create a REST API endpoint in Python that returns the user with the highest score.","input":"","output":"@app.route(\"\/get_top_user\", methods=[\"GET\"])\ndef get_top_user():\n    user_list = Users.query.order_by(desc(Users.score)).first()\n    return jsonify(user_list.serialize())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API endpoint in Python that returns the user with the highest score.\n\n### Input:\n\n\n### Output:\n@app.route(\"\/get_top_user\", methods=[\"GET\"])\ndef get_top_user():\n    user_list = Users.query.order_by(desc(Users.score)).first()\n    return jsonify(user_list.serialize())"}
{"instruction":"Create a machine learning model in Python that classifies the sentiment in a given sentence.","input":"","output":"# Import the libraries\nimport pandas as pd\nimport numpy as np\nfrom nltk.tokenize import word_tokenize \nfrom nltk.corpus import stopwords \nimport re\nfrom sklearn.naive_bayes import MultinomialNB \nfrom sklearn.feature_extraction.text import CountVectorizer \n\n# Read data\ndata = pd.read_csv(\"data.csv\")\n\n# Preprocessing\nstop_words = set(stopwords.words('english'))\ndata['review'] = data['review'].apply(lambda x: x.lower())\ndata['review'] = data['review'].apply(lambda x: re.sub(r'[^\\w\\s]','',x))\ndata['review'] = data['review'].apply(lambda x: ' '.join([word for word in x.split() if word not in stop_words]))\n\n# Vectorizing\nvectorizer = CountVectorizer(max_features=2000)\nX = vectorizer.fit_transform(data.review).toarray()\ny = data.label\n\n# Training\nclassifier = MultinomialNB()\nclassifier.fit(X, y)\n\n# Testing\ndef sentiment_classifier(sentence):\n  sentence = sentence.lower()\n  sentence = re.sub(r'[^\\w\\s]','',sentence)\n  sentence = [word for word in sentence.split() if word not in stop_words]\n  sentence = ' '.join(sentence)\n\n  data = vectorizer.transform([sentence]).toarray()\n  result = classifier.predict(data)[0]\n  \n  if result == 1:\n    print('positive')\n  else:\n    print('negative')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python that classifies the sentiment in a given sentence.\n\n### Input:\n\n\n### Output:\n# Import the libraries\nimport pandas as pd\nimport numpy as np\nfrom nltk.tokenize import word_tokenize \nfrom nltk.corpus import stopwords \nimport re\nfrom sklearn.naive_bayes import MultinomialNB \nfrom sklearn.feature_extraction.text import CountVectorizer \n\n# Read data\ndata = pd.read_csv(\"data.csv\")\n\n# Preprocessing\nstop_words = set(stopwords.words('english'))\ndata['review'] = data['review'].apply(lambda x: x.lower())\ndata['review'] = data['review'].apply(lambda x: re.sub(r'[^\\w\\s]','',x))\ndata['review'] = data['review'].apply(lambda x: ' '.join([word for word in x.split() if word not in stop_words]))\n\n# Vectorizing\nvectorizer = CountVectorizer(max_features=2000)\nX = vectorizer.fit_transform(data.review).toarray()\ny = data.label\n\n# Training\nclassifier = MultinomialNB()\nclassifier.fit(X, y)\n\n# Testing\ndef sentiment_classifier(sentence):\n  sentence = sentence.lower()\n  sentence = re.sub(r'[^\\w\\s]','',sentence)\n  sentence = [word for word in sentence.split() if word not in stop_words]\n  sentence = ' '.join(sentence)\n\n  data = vectorizer.transform([sentence]).toarray()\n  result = classifier.predict(data)[0]\n  \n  if result == 1:\n    print('positive')\n  else:\n    print('negative')"}
{"instruction":"Create a program in Python that implements a greedy knapsack solution for a given set of items with weights and values.","input":"Item Weight: [5, 4, 3, 2] \nItem Value: [20, 10, 12, 4] \nKnapsack capacity: 6","output":"def knapsack(weights, values, capacity):\n if len(weights) == 0 or len(values) == 0 or capacity == 0:\n return 0\n \n v = [0 for _ in range(len(weights))]\n for i in range(len(weights)):\n if weights[i] <= capacity:\n v[i] = values[i]\n \n for i in range(len(weights)):\n for c in range(capacity, weights[i] - 1, -1):\n v[i] = max(v[i], values[i] + v[c - weights[i]])\n \n return v[capacity]\n \nweights = [5, 4, 3, 2] \nvalues = [20, 10, 12, 4] \ncapacity = 6\n\nprint(knapsack(weights, values, capacity)) # Prints 24","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that implements a greedy knapsack solution for a given set of items with weights and values.\n\n### Input:\nItem Weight: [5, 4, 3, 2] \nItem Value: [20, 10, 12, 4] \nKnapsack capacity: 6\n\n### Output:\ndef knapsack(weights, values, capacity):\n if len(weights) == 0 or len(values) == 0 or capacity == 0:\n return 0\n \n v = [0 for _ in range(len(weights))]\n for i in range(len(weights)):\n if weights[i] <= capacity:\n v[i] = values[i]\n \n for i in range(len(weights)):\n for c in range(capacity, weights[i] - 1, -1):\n v[i] = max(v[i], values[i] + v[c - weights[i]])\n \n return v[capacity]\n \nweights = [5, 4, 3, 2] \nvalues = [20, 10, 12, 4] \ncapacity = 6\n\nprint(knapsack(weights, values, capacity)) # Prints 24"}
{"instruction":"Write a Python program to optimize a given system by choosing the lowest energy configuration.","input":"","output":"def optimize_system(system):\n    min_energy = sys.maxsize\n    for configuration in system:\n        energy = calculate_energy(configuration)\n        if energy < min_energy:\n            min_energy = energy\n            best_configuration = configuration\n    return best_configuration","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize a given system by choosing the lowest energy configuration.\n\n### Input:\n\n\n### Output:\ndef optimize_system(system):\n    min_energy = sys.maxsize\n    for configuration in system:\n        energy = calculate_energy(configuration)\n        if energy < min_energy:\n            min_energy = energy\n            best_configuration = configuration\n    return best_configuration"}
{"instruction":"Write a Python program to print the numbers of a specified list after removing even numbers from it.","input":"data_list = [12, 17, 24, 29, 18, 11, 16]","output":"def remove_even_numbers(data_list):\n    return [x for x in data_list if x%2 != 0]\n\nprint(remove_even_numbers(data_list))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print the numbers of a specified list after removing even numbers from it.\n\n### Input:\ndata_list = [12, 17, 24, 29, 18, 11, 16]\n\n### Output:\ndef remove_even_numbers(data_list):\n    return [x for x in data_list if x%2 != 0]\n\nprint(remove_even_numbers(data_list))"}
{"instruction":"Develop a Python program to validate a password for a given set of conditions","input":"Must contain at least one uppercase letter, one lowercase letter, one special character, and have a min length of 8 characters","output":"import re\n\ndef validate_password(password):\n    if len(password) < 8:\n        return False\n\n    if not any(map(str.isupper, password)):\n        return False\n\n    if not any(map(str.islower, password)):\n        return False\n\n    if not any(map(str.isalnum, password)):\n        return False\n    \n    return True\n\n#Test\npassword = \"Myn@Passw0rd\"\nvalid = validate_password(password)\n\nif valid:\n    print(\"This is a valid password\")\nelse:\n    print(\"This is an invalid password\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to validate a password for a given set of conditions\n\n### Input:\nMust contain at least one uppercase letter, one lowercase letter, one special character, and have a min length of 8 characters\n\n### Output:\nimport re\n\ndef validate_password(password):\n    if len(password) < 8:\n        return False\n\n    if not any(map(str.isupper, password)):\n        return False\n\n    if not any(map(str.islower, password)):\n        return False\n\n    if not any(map(str.isalnum, password)):\n        return False\n    \n    return True\n\n#Test\npassword = \"Myn@Passw0rd\"\nvalid = validate_password(password)\n\nif valid:\n    print(\"This is a valid password\")\nelse:\n    print(\"This is an invalid password\")"}
{"instruction":"Write a Python class for creating a binary tree andfinding the maximum depth of the tree.","input":"","output":"class Node: \n    def __init__(self, data): \n        self.data = data  \n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n \n   def __init__(self):\n       self.root = None\n \n   def add_node(self, data):\n        if self.root is None:\n            self.root = Node(data)\n        else:\n            self._add_to_tree(self.root, data)\n\n    def _add_to_tree(self, node, data):\n        if data < node.data:\n            if node.left is None:\n                node.left = Node(data)\n            else:\n                self._add_to_tree(node.left, data)\n        else:\n            if node.right is None:\n                node.right = Node(data)\n            else:\n                self._add_to_tree(node.right, data)\n\n    def max_depth(self):\n        return self._max_depth(self.root)\n\n    def _max_depth(self, node):\n        if node is None:\n            return 0\n        else:\n            left_depth = self._max_depth(node.left) \n            right_depth = self._max_depth(node.right)\n            return max(left_depth, right_depth) + 1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class for creating a binary tree andfinding the maximum depth of the tree.\n\n### Input:\n\n\n### Output:\nclass Node: \n    def __init__(self, data): \n        self.data = data  \n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n \n   def __init__(self):\n       self.root = None\n \n   def add_node(self, data):\n        if self.root is None:\n            self.root = Node(data)\n        else:\n            self._add_to_tree(self.root, data)\n\n    def _add_to_tree(self, node, data):\n        if data < node.data:\n            if node.left is None:\n                node.left = Node(data)\n            else:\n                self._add_to_tree(node.left, data)\n        else:\n            if node.right is None:\n                node.right = Node(data)\n            else:\n                self._add_to_tree(node.right, data)\n\n    def max_depth(self):\n        return self._max_depth(self.root)\n\n    def _max_depth(self, node):\n        if node is None:\n            return 0\n        else:\n            left_depth = self._max_depth(node.left) \n            right_depth = self._max_depth(node.right)\n            return max(left_depth, right_depth) + 1"}
{"instruction":"Generate a RESTful API in Python which allows users to register, log in\/out, and update user profiles.","input":"Not applicable","output":"import os\nimport uuid\nimport datetime\n\nfrom flask import Flask, jsonify, request\nfrom flask_sqlalchemy import SQLAlchemy\nimport jwt\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\napp = Flask(__name__)\n\n# SQLAlchemy Configuration\n# FIXME: Replace with database URI\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:\/\/\/\/tmp\/test.db'\napp.config['SECRET_KEY'] = 'secret-key'\napp.config['JWT_SECRET_KEY'] = 'jwt-secret-key'\ndb = SQLAlchemy(app)\n\n# Flask-JWT-Extended Configuration\napp.config['JWT_ACCESS_TOKEN_EXPIRES'] = datetime.timedelta(days=1)\napp.config['JWT_REFRESH_TOKEN_EXPIRES'] = datetime.timedelta(days=30)\n\n# User Model\nclass User(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n public_id = db.Column(db.String(50), unique=True)\n username = db.Column(db.String(100), unique=True)\n password = db.Column(db.String(255))\n first_name = db.Column(db.String(100))\n last_name = db.Column(db.String(100))\n\n@app.route('\/register', methods=['POST'])\ndef register():\n data = request.get_json()\n\n# User already exists\nuser = User.query.filter_by(username=data['username']).first()\nif user:\n return jsonify({'message': 'User already exists!'}), 400\n\npublic_id = str(uuid.uuid4())\nhashed_password = generate_password_hash(data['password'], method='sha256')\nuser = User(public_id=public_id, username=data['username'], \n            password=hashed_password, first_name=data['first_name'], \n            last_name=data['last_name'])\ndb.session.add(user)\ndb.session.commit()\n\nreturn jsonify({'public_id': public_id }), 201\n\n@app.route('\/login', methods=['POST'])\ndef login():\n data = request.get_json()\n user = User.query.filter_by(username=data['username']).first()\n\nif not user or not check_password_hash(user.password, data['password']):\n return jsonify({'message': 'Invalid credentials!'}), 400\n\n# JWT Token\naccess_token = jwt.encode({'public_id': user.public_id, \n                           'exp': datetime.datetime.utcnow() + \n                                  datetime.timedelta(minutes=30),\n                          }, \n                         app.config['JWT_SECRET_KEY'])\n\nrefresh_token = jwt.encode({'public_id': user.public_id, \n                            'exp': datetime.datetime.utcnow() + \n                                   datetime.timedelta(days=30),\n                           }, \n                          app.config['JWT_SECRET_KEY'])\n\nreturn jsonify({'access_token': access_token.decode('UTF-8'), \n                'refresh_token': refresh_token.decode('UTF-8')\n               }), 200\n\n@app.route('\/update_profile', methods=['POST'])\ndef update_profile():\n data = request.get_json()\n\npublic_id = jwt.decode(data['access_token'], app.config['JWT_SECRET_KEY'])['public_id']\nuser = User.query.filter_by(public_id=public_id).first()\n\nuser.first_name = data['first_name']\nuser.last_name = data['last_name']\ndb.session.commit()\n\nreturn jsonify({'message': 'Profile updated'})\n\nif __name__ == '__main__':\n db.create_all()\n port = int(os.environ.get('PORT', 5000))\n app.run(host='0.0.0.0', port=port)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a RESTful API in Python which allows users to register, log in\/out, and update user profiles.\n\n### Input:\nNot applicable\n\n### Output:\nimport os\nimport uuid\nimport datetime\n\nfrom flask import Flask, jsonify, request\nfrom flask_sqlalchemy import SQLAlchemy\nimport jwt\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\napp = Flask(__name__)\n\n# SQLAlchemy Configuration\n# FIXME: Replace with database URI\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:\/\/\/\/tmp\/test.db'\napp.config['SECRET_KEY'] = 'secret-key'\napp.config['JWT_SECRET_KEY'] = 'jwt-secret-key'\ndb = SQLAlchemy(app)\n\n# Flask-JWT-Extended Configuration\napp.config['JWT_ACCESS_TOKEN_EXPIRES'] = datetime.timedelta(days=1)\napp.config['JWT_REFRESH_TOKEN_EXPIRES'] = datetime.timedelta(days=30)\n\n# User Model\nclass User(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n public_id = db.Column(db.String(50), unique=True)\n username = db.Column(db.String(100), unique=True)\n password = db.Column(db.String(255))\n first_name = db.Column(db.String(100))\n last_name = db.Column(db.String(100))\n\n@app.route('\/register', methods=['POST'])\ndef register():\n data = request.get_json()\n\n# User already exists\nuser = User.query.filter_by(username=data['username']).first()\nif user:\n return jsonify({'message': 'User already exists!'}), 400\n\npublic_id = str(uuid.uuid4())\nhashed_password = generate_password_hash(data['password'], method='sha256')\nuser = User(public_id=public_id, username=data['username'], \n            password=hashed_password, first_name=data['first_name'], \n            last_name=data['last_name'])\ndb.session.add(user)\ndb.session.commit()\n\nreturn jsonify({'public_id': public_id }), 201\n\n@app.route('\/login', methods=['POST'])\ndef login():\n data = request.get_json()\n user = User.query.filter_by(username=data['username']).first()\n\nif not user or not check_password_hash(user.password, data['password']):\n return jsonify({'message': 'Invalid credentials!'}), 400\n\n# JWT Token\naccess_token = jwt.encode({'public_id': user.public_id, \n                           'exp': datetime.datetime.utcnow() + \n                                  datetime.timedelta(minutes=30),\n                          }, \n                         app.config['JWT_SECRET_KEY'])\n\nrefresh_token = jwt.encode({'public_id': user.public_id, \n                            'exp': datetime.datetime.utcnow() + \n                                   datetime.timedelta(days=30),\n                           }, \n                          app.config['JWT_SECRET_KEY'])\n\nreturn jsonify({'access_token': access_token.decode('UTF-8'), \n                'refresh_token': refresh_token.decode('UTF-8')\n               }), 200\n\n@app.route('\/update_profile', methods=['POST'])\ndef update_profile():\n data = request.get_json()\n\npublic_id = jwt.decode(data['access_token'], app.config['JWT_SECRET_KEY'])['public_id']\nuser = User.query.filter_by(public_id=public_id).first()\n\nuser.first_name = data['first_name']\nuser.last_name = data['last_name']\ndb.session.commit()\n\nreturn jsonify({'message': 'Profile updated'})\n\nif __name__ == '__main__':\n db.create_all()\n port = int(os.environ.get('PORT', 5000))\n app.run(host='0.0.0.0', port=port)"}
{"instruction":"Design a program in python to generate a random string consisting of only lowercase a-z characters.","input":"","output":"import random\nimport string\n\ndef generate_random_string():\n    return ''.join(random.choices(string.ascii_lowercase, k=10))\n\nprint(generate_random_string())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in python to generate a random string consisting of only lowercase a-z characters.\n\n### Input:\n\n\n### Output:\nimport random\nimport string\n\ndef generate_random_string():\n    return ''.join(random.choices(string.ascii_lowercase, k=10))\n\nprint(generate_random_string())"}
{"instruction":"Create a Deep Learning Program in Python to Predict Stock Price.","input":"","output":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\nimport numpy as np\n\n# define constants\ntime_steps = 60\nbatch_size = 32\n\n# build the model\nmodel = Sequential()\nmodel.add(LSTM(units=50, return_sequences=True, input_shape=(time_steps, 1)))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(units=50, return_sequences=True))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(units=50))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(units=1))\n\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n# read the data \ndataset = np.loadtxt('data.csv', delimiter=',')\n\ndata = dataset[:, 0:1]\n\n# create train and test data\nx_train = data[:int(len(data)*0.8)]\nx_test = data[int(len(data)*0.8):]\n\n# reshape the data for input format\nx_train = np.reshape(x_train, (x_train.shape[0], time_steps, 1))\nx_test = np.reshape(x_test, (x_test.shape[0], time_steps, 1))\n\n# train the model\nmodel.fit(x_train, x_train, epochs=50, batch_size=batch_size, validation_data=(x_test, x_test))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Deep Learning Program in Python to Predict Stock Price.\n\n### Input:\n\n\n### Output:\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\nimport numpy as np\n\n# define constants\ntime_steps = 60\nbatch_size = 32\n\n# build the model\nmodel = Sequential()\nmodel.add(LSTM(units=50, return_sequences=True, input_shape=(time_steps, 1)))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(units=50, return_sequences=True))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(units=50))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(units=1))\n\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n# read the data \ndataset = np.loadtxt('data.csv', delimiter=',')\n\ndata = dataset[:, 0:1]\n\n# create train and test data\nx_train = data[:int(len(data)*0.8)]\nx_test = data[int(len(data)*0.8):]\n\n# reshape the data for input format\nx_train = np.reshape(x_train, (x_train.shape[0], time_steps, 1))\nx_test = np.reshape(x_test, (x_test.shape[0], time_steps, 1))\n\n# train the model\nmodel.fit(x_train, x_train, epochs=50, batch_size=batch_size, validation_data=(x_test, x_test))"}
{"instruction":"Generate a Python program that prints out the pattern \"\\    \/\\    \/\\  \".","input":"","output":"for x in range(3):\n    print('\\\\    \/' * x + '\\\\  ')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that prints out the pattern \"\\    \/\\    \/\\  \".\n\n### Input:\n\n\n### Output:\nfor x in range(3):\n    print('\\\\    \/' * x + '\\\\  ')"}
{"instruction":"Create a system for monitoring vehicle usage in Python. The system should run periodic diagnostics and generate a report showing vehicle data like fuel consumption, performance and wear levels.","input":"Not applicable","output":"import time\nimport logging \nimport sched\n\nimport vehicle_data # module for reading vehicle data\n\n# configure logging \nlogging.basicConfig(level=logging.INFO)\n\n# define the scheduler \nscheduler = sched.scheduler(time.time, time.sleep)\n\n# define diagnostics job\ndef job_diagnostics(vehicle_id): \n # reading and processing vehicle data\n data = vehicle_data.read(vehicle_id) \n performance = data['performance']\n fuel_consumption = data['fuel_consumption']\n wear_level = data['wear_level']\n\n # logging diagnostics \n logging.info(f'Vehicle {vehicle_id} diagnostics report: performance={performance} fuel_consumption={fuel_consumption}\n wear_level={wear_level}.')\n\n# define setup for periodic jobs\ndef setup_job(job, vehicle_id, interval): \n scheduler.enter(interval, 1, job, argument=(vehicle_id,))\n\n# setup diagnostics job for a vehicle\nsetup_job(job_diagnostics, vehicle_id, interval=3600) \n\n# start the scheduler\nscheduler.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a system for monitoring vehicle usage in Python. The system should run periodic diagnostics and generate a report showing vehicle data like fuel consumption, performance and wear levels.\n\n### Input:\nNot applicable\n\n### Output:\nimport time\nimport logging \nimport sched\n\nimport vehicle_data # module for reading vehicle data\n\n# configure logging \nlogging.basicConfig(level=logging.INFO)\n\n# define the scheduler \nscheduler = sched.scheduler(time.time, time.sleep)\n\n# define diagnostics job\ndef job_diagnostics(vehicle_id): \n # reading and processing vehicle data\n data = vehicle_data.read(vehicle_id) \n performance = data['performance']\n fuel_consumption = data['fuel_consumption']\n wear_level = data['wear_level']\n\n # logging diagnostics \n logging.info(f'Vehicle {vehicle_id} diagnostics report: performance={performance} fuel_consumption={fuel_consumption}\n wear_level={wear_level}.')\n\n# define setup for periodic jobs\ndef setup_job(job, vehicle_id, interval): \n scheduler.enter(interval, 1, job, argument=(vehicle_id,))\n\n# setup diagnostics job for a vehicle\nsetup_job(job_diagnostics, vehicle_id, interval=3600) \n\n# start the scheduler\nscheduler.run()"}
{"instruction":"Write a function to remove all elements from a Python list that are divisible by a given number.","input":"mylist = [7, 8, 15, 21, 24]\nnum = 3","output":"def remove_divisible(lst, n):\n    new_list = []\n    for item in lst:\n        if item % n != 0:\n            new_list.append(item)\n    return new_list\n\nmylist = [7, 8, 15, 21, 24]\nnum = 3\n\nprint(remove_divisible(mylist, num)) # [7, 8, 21]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to remove all elements from a Python list that are divisible by a given number.\n\n### Input:\nmylist = [7, 8, 15, 21, 24]\nnum = 3\n\n### Output:\ndef remove_divisible(lst, n):\n    new_list = []\n    for item in lst:\n        if item % n != 0:\n            new_list.append(item)\n    return new_list\n\nmylist = [7, 8, 15, 21, 24]\nnum = 3\n\nprint(remove_divisible(mylist, num)) # [7, 8, 21]"}
{"instruction":"Generate a python script to filter the words in a given list of strings.","input":"","output":"def word_filter(words, filter_list):\n    filtered_words = []\n    for word in words:\n        if word not in filter_list:\n            filtered_words.append(word)\n    return filtered_words","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python script to filter the words in a given list of strings.\n\n### Input:\n\n\n### Output:\ndef word_filter(words, filter_list):\n    filtered_words = []\n    for word in words:\n        if word not in filter_list:\n            filtered_words.append(word)\n    return filtered_words"}
{"instruction":"Optimize an existing Python code to reduce the response time.","input":"\"\"\"\nOriginal Python code:\n\nimport time\n\ndef foo():\n    iter = 0\n    for i in range(10000000):\n        iter += i\n    return iter\n\nstart = time.time()\nfoo()\nend = time.time()\nduration = end - start\nprint(\"Time taken: \", duration)\n\"\"\"","output":"\"\"\"\nOptimized Python code:\n\nimport time\n\ndef foo():\n    iter = 0\n    max_val = 10000000\n    i = 0\n    while i < max_val:\n        iter += i\n        i += 1\n    return iter\n\nstart = time.time()\nfoo()\nend = time.time()\nduration = end - start\nprint(\"Time taken: \", duration)\n\"\"\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize an existing Python code to reduce the response time.\n\n### Input:\n\"\"\"\nOriginal Python code:\n\nimport time\n\ndef foo():\n    iter = 0\n    for i in range(10000000):\n        iter += i\n    return iter\n\nstart = time.time()\nfoo()\nend = time.time()\nduration = end - start\nprint(\"Time taken: \", duration)\n\"\"\"\n\n### Output:\n\"\"\"\nOptimized Python code:\n\nimport time\n\ndef foo():\n    iter = 0\n    max_val = 10000000\n    i = 0\n    while i < max_val:\n        iter += i\n        i += 1\n    return iter\n\nstart = time.time()\nfoo()\nend = time.time()\nduration = end - start\nprint(\"Time taken: \", duration)\n\"\"\""}
{"instruction":"Using the input, write a Python function to calculate the average number of items in the list.","input":"list_items = [1, 3, 5, 7, 8, 10]","output":"def average_list_items(list_items):\n  list_length = len(list_items)\n  list_sum = sum(list_items)\n  average = list_sum\/list_length\n  return average","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the input, write a Python function to calculate the average number of items in the list.\n\n### Input:\nlist_items = [1, 3, 5, 7, 8, 10]\n\n### Output:\ndef average_list_items(list_items):\n  list_length = len(list_items)\n  list_sum = sum(list_items)\n  average = list_sum\/list_length\n  return average"}
{"instruction":"Create a Python script to store and manipulate contact information.","input":"","output":"# Create a dictionary to store contact info\ncontacts = {}\n \n# Ask user to enter contact name\nname = input('Enter contact name: ')\n \n# Ask user to enter contact number\nnumber = input('Enter contact number: ')\n \n# Store contact in contacts dictionary\ncontacts[name] = number\n \n# Print out contact info\nfor contact, number in contacts.items():\n    print(f'{contact}: {number}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to store and manipulate contact information.\n\n### Input:\n\n\n### Output:\n# Create a dictionary to store contact info\ncontacts = {}\n \n# Ask user to enter contact name\nname = input('Enter contact name: ')\n \n# Ask user to enter contact number\nnumber = input('Enter contact number: ')\n \n# Store contact in contacts dictionary\ncontacts[name] = number\n \n# Print out contact info\nfor contact, number in contacts.items():\n    print(f'{contact}: {number}')"}
{"instruction":"Suggest a programming language and a library for text classification.","input":"","output":"Python is a great language for text classification tasks and there are several libraries that could be used, including scikit-learn and NLTK. Additionally, pytorch provides a number of utilities for text classification.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a programming language and a library for text classification.\n\n### Input:\n\n\n### Output:\nPython is a great language for text classification tasks and there are several libraries that could be used, including scikit-learn and NLTK. Additionally, pytorch provides a number of utilities for text classification."}
{"instruction":"Develop a Python program to join two given sets.","input":"","output":"def union_sets(set_one, set_two):\n    union_set = set_one | set_two\n    return union_set","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to join two given sets.\n\n### Input:\n\n\n### Output:\ndef union_sets(set_one, set_two):\n    union_set = set_one | set_two\n    return union_set"}
{"instruction":"Write a Python code to count the number of matching elements between two lists","input":"list1 = [1,2,3,4,5]\nlist2 = [1,3,4,7,9]","output":"def count_matches(list1, list2):\n    count = 0\n    for elem in list1:\n        if elem in list2:\n            count += 1 \n    return count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to count the number of matching elements between two lists\n\n### Input:\nlist1 = [1,2,3,4,5]\nlist2 = [1,3,4,7,9]\n\n### Output:\ndef count_matches(list1, list2):\n    count = 0\n    for elem in list1:\n        if elem in list2:\n            count += 1 \n    return count"}
{"instruction":"Create a machine learning classifier in Python for categorizing user input.","input":"","output":"from sklearn.naive_bayes import MultinomialNB \n\n# Assuming an input string is passed to the function as a parameter\n\ndef classify_string(input_string):\n\n  # Feature extraction and transformation from string to numeric\n  features = . . .\n\n  # Create an instance of the classifier \n  model = MultinomialNB()\n\n  # Train the classifier on the data\n  model.fit(data, target)\n\n  # Make a prediction based on the input\n  prediction = model.predict([features])\n\n  # Return the prediction\n  return prediction","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning classifier in Python for categorizing user input.\n\n### Input:\n\n\n### Output:\nfrom sklearn.naive_bayes import MultinomialNB \n\n# Assuming an input string is passed to the function as a parameter\n\ndef classify_string(input_string):\n\n  # Feature extraction and transformation from string to numeric\n  features = . . .\n\n  # Create an instance of the classifier \n  model = MultinomialNB()\n\n  # Train the classifier on the data\n  model.fit(data, target)\n\n  # Make a prediction based on the input\n  prediction = model.predict([features])\n\n  # Return the prediction\n  return prediction"}
{"instruction":"Using the given dataset, create a clustering algorithm in Python for mission planning.","input":"Dataset:\n{\n    'mission_name': 'Space Mission',\n    'mission_details': {\n        'num_of_satellites': 5,\n        'target_region': 'South East Asia',\n        'mission_duration': 24\n    }\n}","output":"\"\"\"\nClustering Algorithm for Mission Planning\n\"\"\"\n\nimport numpy as np\n\ndef create_cluster_matrix(dataset):\n    # Get required data\n    num_satellites = dataset['mission_details']['num_of_satellites']\n    target_region = dataset['mission_details']['target_region']\n    mission_duration = dataset['mission_details']['mission_duration']\n\n    # Create the matrix\n    matrix = np.zeros((num_satellites, mission_duration))\n\n    # Fill the matrix with the target region\n    for i in range(num_satellites):\n        matrix[i]= np.ones((1, mission_duration))*target_region\n\n    return matrix\n\nif __name__ == '__main__':\n    dataset = {\n        'mission_name': 'Space Mission',\n        'mission_details': {\n            'num_of_satellites': 5,\n            'target_region': 'South East Asia',\n            'mission_duration': 24\n        }\n    }\n\n    cluster_matrix = create_cluster_matrix(dataset)\n    print(cluster_matrix)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the given dataset, create a clustering algorithm in Python for mission planning.\n\n### Input:\nDataset:\n{\n    'mission_name': 'Space Mission',\n    'mission_details': {\n        'num_of_satellites': 5,\n        'target_region': 'South East Asia',\n        'mission_duration': 24\n    }\n}\n\n### Output:\n\"\"\"\nClustering Algorithm for Mission Planning\n\"\"\"\n\nimport numpy as np\n\ndef create_cluster_matrix(dataset):\n    # Get required data\n    num_satellites = dataset['mission_details']['num_of_satellites']\n    target_region = dataset['mission_details']['target_region']\n    mission_duration = dataset['mission_details']['mission_duration']\n\n    # Create the matrix\n    matrix = np.zeros((num_satellites, mission_duration))\n\n    # Fill the matrix with the target region\n    for i in range(num_satellites):\n        matrix[i]= np.ones((1, mission_duration))*target_region\n\n    return matrix\n\nif __name__ == '__main__':\n    dataset = {\n        'mission_name': 'Space Mission',\n        'mission_details': {\n            'num_of_satellites': 5,\n            'target_region': 'South East Asia',\n            'mission_duration': 24\n        }\n    }\n\n    cluster_matrix = create_cluster_matrix(dataset)\n    print(cluster_matrix)"}
{"instruction":"Write a Python program to find the sum of all the divisors of a given integer.","input":"90","output":"def calculate_sum_divisors(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total_sum += i\n    return total_sum\n \nprint(calculate_sum_divisors(90))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the sum of all the divisors of a given integer.\n\n### Input:\n90\n\n### Output:\ndef calculate_sum_divisors(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total_sum += i\n    return total_sum\n \nprint(calculate_sum_divisors(90))"}
{"instruction":"Develop an artificial intelligence chatbot in Python. The chatbot should be able to respond to basic queries.","input":"Not applicable","output":"import random\n\ndef respond(message):\n    # Check for a question mark\n    if message.endswith(\"?\"):\n        return random.choice([\"I don't know :(\", \"You tell me!\"])\n\n    # Return a random greeting\n    return random.choice([\"Hi there!\", \"Hello!\", \"Nice to meet you!\"])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an artificial intelligence chatbot in Python. The chatbot should be able to respond to basic queries.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\ndef respond(message):\n    # Check for a question mark\n    if message.endswith(\"?\"):\n        return random.choice([\"I don't know :(\", \"You tell me!\"])\n\n    # Return a random greeting\n    return random.choice([\"Hi there!\", \"Hello!\", \"Nice to meet you!\"])"}
{"instruction":"Using Python, create a program that classifies users into three groups based on their age.","input":"age_list = [20, 21, 32, 37, 48, 59]","output":"group_list = [\"young\", \"middle-aged\", \"elderly\"]\n\nfor age in age_list:\n    if age < 30:\n        print(\"This user is \" + group_list[0] + \".\")\n    elif age > 30 and age < 50:\n        print(\"This user is \" + group_list[1] + \".\")\n    else:\n        print(\"This user is \" + group_list[2] + \".\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, create a program that classifies users into three groups based on their age.\n\n### Input:\nage_list = [20, 21, 32, 37, 48, 59]\n\n### Output:\ngroup_list = [\"young\", \"middle-aged\", \"elderly\"]\n\nfor age in age_list:\n    if age < 30:\n        print(\"This user is \" + group_list[0] + \".\")\n    elif age > 30 and age < 50:\n        print(\"This user is \" + group_list[1] + \".\")\n    else:\n        print(\"This user is \" + group_list[2] + \".\")"}
{"instruction":"Create a translation model in python which takes a sentence as input and returns its translation in Khmer.","input":"\"Hello world\"","output":"import googletrans \nfrom googletrans import Translator \n \ndef translate_sentence(sentence): \n    translator = Translator()\n    translated_sentence = translator.translate(sentence, dest='km')\n    return translated_sentence.text\n\nresult = translate_sentence(\"Hello world\")\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a translation model in python which takes a sentence as input and returns its translation in Khmer.\n\n### Input:\n\"Hello world\"\n\n### Output:\nimport googletrans \nfrom googletrans import Translator \n \ndef translate_sentence(sentence): \n    translator = Translator()\n    translated_sentence = translator.translate(sentence, dest='km')\n    return translated_sentence.text\n\nresult = translate_sentence(\"Hello world\")\nprint(result)"}
{"instruction":"Rewrite the following list comprehension in a more pythonic way.","input":"values = [x*2 for x in range(10)]","output":"values = list(map(lambda x: x*2, range(10)))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following list comprehension in a more pythonic way.\n\n### Input:\nvalues = [x*2 for x in range(10)]\n\n### Output:\nvalues = list(map(lambda x: x*2, range(10)))"}
{"instruction":"Create a Python function that converts an integer into a binary representation as a string.","input":"13","output":"def to_binary(num):\n  result = \"\"\n  while num > 0:\n   remainder = num % 2\n   num = num \/\/ 2\n   result = str(remainder) + result\n  return result\n\nprint(to_binary(13)) # '1101'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that converts an integer into a binary representation as a string.\n\n### Input:\n13\n\n### Output:\ndef to_binary(num):\n  result = \"\"\n  while num > 0:\n   remainder = num % 2\n   num = num \/\/ 2\n   result = str(remainder) + result\n  return result\n\nprint(to_binary(13)) # '1101'"}
{"instruction":"Create a machine learning model in Python to classify sensor readings as anomalous or not.","input":"Not applicable","output":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\ndata = pd.read_csv('sensor_data.csv')\n\n# Separate features and labels\nX = np.array(data.drop(['label'],1))\ny = np.array(data['label'])\n\n# Split dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Create the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\naccuracy = model.score(X_test, y_test)\nprint('Model accuracy is:', accuracy)\n\n# Save the model\nimport pickle\npickle.dump(model, open('model.pkl','wb'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python to classify sensor readings as anomalous or not.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\ndata = pd.read_csv('sensor_data.csv')\n\n# Separate features and labels\nX = np.array(data.drop(['label'],1))\ny = np.array(data['label'])\n\n# Split dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Create the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\naccuracy = model.score(X_test, y_test)\nprint('Model accuracy is:', accuracy)\n\n# Save the model\nimport pickle\npickle.dump(model, open('model.pkl','wb'))"}
{"instruction":"Create a Python class that can be used to represent a user profile.","input":"","output":"class UserProfile:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n\n    def get_username(self):\n        return self.username\n\n    def get_password(self):\n        return self.password\n\nuser = UserProfile('username', 'password')\nprint(user.get_username())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that can be used to represent a user profile.\n\n### Input:\n\n\n### Output:\nclass UserProfile:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n\n    def get_username(self):\n        return self.username\n\n    def get_password(self):\n        return self.password\n\nuser = UserProfile('username', 'password')\nprint(user.get_username())"}
{"instruction":"Create a command-line interface with Python that gets a user's name and prints out a welcome message.","input":"Not applicable","output":"import sys\n\n# Get user's name\nname = input('What is your name? ')\n\n# Print out a welcome message\nprint('Welcome', name, 'to the CLI')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a command-line interface with Python that gets a user's name and prints out a welcome message.\n\n### Input:\nNot applicable\n\n### Output:\nimport sys\n\n# Get user's name\nname = input('What is your name? ')\n\n# Print out a welcome message\nprint('Welcome', name, 'to the CLI')"}
{"instruction":"Create a Python function to convert a list of strings into a dictionary of the form {string: count}.","input":"myList = [\u2018a\u2019, \u2018a\u2019, \u2018b\u2019, \u2018c\u2019]","output":"def list_to_dict(myList):\n dict = {}\n for val in myList:\n  if val in dict:\n   dict[val] += 1\n  else:\n   dict[val] = 1\n return dict\n\nmyList = ['a', 'a', 'b', 'c']\nprint(list_to_dict(myList))\n\n# Output: \n# {'a': 2, 'b': 1, 'c': 1}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to convert a list of strings into a dictionary of the form {string: count}.\n\n### Input:\nmyList = [\u2018a\u2019, \u2018a\u2019, \u2018b\u2019, \u2018c\u2019]\n\n### Output:\ndef list_to_dict(myList):\n dict = {}\n for val in myList:\n  if val in dict:\n   dict[val] += 1\n  else:\n   dict[val] = 1\n return dict\n\nmyList = ['a', 'a', 'b', 'c']\nprint(list_to_dict(myList))\n\n# Output: \n# {'a': 2, 'b': 1, 'c': 1}"}
{"instruction":"Generate a python program that takes input as a string and prints out each word in the string in reverse order.","input":"This is an example.","output":"# Take input\ntext = input('Enter a string: ')\n\n# Split string into words\nwords = text.split(' ') \n\n# Reverse order\nwords.reverse() \n\n# Print\nfor word in words:\n print(word)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program that takes input as a string and prints out each word in the string in reverse order.\n\n### Input:\nThis is an example.\n\n### Output:\n# Take input\ntext = input('Enter a string: ')\n\n# Split string into words\nwords = text.split(' ') \n\n# Reverse order\nwords.reverse() \n\n# Print\nfor word in words:\n print(word)"}
{"instruction":"Write a Python program that takes a word as input and prints out the word in pig latin.","input":"","output":"def pig_latin(word):\n    if len(word) > 0 and word.isalpha():\n        first_letter = word[0]\n        pig_word = word[1:] + first_letter + \"ay\"\n    else:\n        pig_word = \"Please enter a valid word!\"\n    return pig_word\n\nresult = pig_latin(\"word\")\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a word as input and prints out the word in pig latin.\n\n### Input:\n\n\n### Output:\ndef pig_latin(word):\n    if len(word) > 0 and word.isalpha():\n        first_letter = word[0]\n        pig_word = word[1:] + first_letter + \"ay\"\n    else:\n        pig_word = \"Please enter a valid word!\"\n    return pig_word\n\nresult = pig_latin(\"word\")\nprint(result)"}
{"instruction":"Create a Python class to represent a 2D Point that contains an x-coordinate and y-coordinate.","input":"Not applicable","output":"class Point:\n def __init__(self, x, y):\n self.x = x\n self.y = y\n\n def get_x(self):\n return self.x\n\n def get_y(self):\n return self.y","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to represent a 2D Point that contains an x-coordinate and y-coordinate.\n\n### Input:\nNot applicable\n\n### Output:\nclass Point:\n def __init__(self, x, y):\n self.x = x\n self.y = y\n\n def get_x(self):\n return self.x\n\n def get_y(self):\n return self.y"}
{"instruction":"Generate a Python program that creates a 2D array of given dimension and populate the array with random numbers.","input":"\"10 10\"","output":"import random\n\ndef create_2D_array(dims):\n    width = dims[0]\n    height = dims[1]\n    array = []\n    for row in range(height):\n        row_array = []\n        for col in range(width):\n            row_array.append(random.randint(0, 255))\n        array.append(row_array)\n    return array\n\nif __name__ == '__main__':\n    dims = [10, 10]\n    print(create_2D_array(dims))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that creates a 2D array of given dimension and populate the array with random numbers.\n\n### Input:\n\"10 10\"\n\n### Output:\nimport random\n\ndef create_2D_array(dims):\n    width = dims[0]\n    height = dims[1]\n    array = []\n    for row in range(height):\n        row_array = []\n        for col in range(width):\n            row_array.append(random.randint(0, 255))\n        array.append(row_array)\n    return array\n\nif __name__ == '__main__':\n    dims = [10, 10]\n    print(create_2D_array(dims))"}
{"instruction":"Create a Python script that servers a realtime notifications to subscribed users.","input":"Not applicable","output":"import time\nimport websocket\n\n# Server script to send realtime notifications to subscribed users \n# Connect to websocket host\nws = websocket.WebSocket()\nws.connect(\"ws:\/\/localhost:8888\/\")\n\n# handle incoming messages\nwhile True:\n msg = ws.recv()\n print(f\"Notification to users: {msg}\")\n \n# broadcast the message to subscribed users\nws.send(msg)\n\n# wait for 5 seconds \ntime.sleep(5)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that servers a realtime notifications to subscribed users.\n\n### Input:\nNot applicable\n\n### Output:\nimport time\nimport websocket\n\n# Server script to send realtime notifications to subscribed users \n# Connect to websocket host\nws = websocket.WebSocket()\nws.connect(\"ws:\/\/localhost:8888\/\")\n\n# handle incoming messages\nwhile True:\n msg = ws.recv()\n print(f\"Notification to users: {msg}\")\n \n# broadcast the message to subscribed users\nws.send(msg)\n\n# wait for 5 seconds \ntime.sleep(5)"}
{"instruction":"Create a bot that can identify keywords in natural language queries and respond with appropriate answers.","input":"query: \"When will the next Star Wars movie be released?\"","output":"# Python code\n\n# define keywords\nkeywords = {\n    'star wars': ['release date', 'when released'],\n    'next': ['when', 'release date', 'when released'],\n    'movie': ['what', 'when', 'release date', 'when released']\n}\n\n# define answers\nanswers = {\n    'star wars': 'The next Star Wars movie is scheduled to be released on December 16, 2022.',\n    'next': 'The next Star Wars movie is scheduled to be released on December 16, 2022.',\n    'movie': 'The next movie in the Star Wars franchise is scheduled to be released on December 16, 2022.'\n }\n\n# code to identify the query\ndef identify_query(query):\n    words = query.lower().split(' ')\n    for word in words:\n        if word in keywords:\n            return keywords[word]\n    return []\n\n# code to respond to the query\ndef respond(query):\n    for keyword in identify_query(query):\n        if keyword in answers:\n            return answers[keyword]\n\n# Main\t\nquery = input('Ask me anything about Star Wars movies: ')\t\nanswer = respond(query)\t\n\nif answer:\n print(answer)\t\n else:\n print('Sorry, I do not understand your query.')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a bot that can identify keywords in natural language queries and respond with appropriate answers.\n\n### Input:\nquery: \"When will the next Star Wars movie be released?\"\n\n### Output:\n# Python code\n\n# define keywords\nkeywords = {\n    'star wars': ['release date', 'when released'],\n    'next': ['when', 'release date', 'when released'],\n    'movie': ['what', 'when', 'release date', 'when released']\n}\n\n# define answers\nanswers = {\n    'star wars': 'The next Star Wars movie is scheduled to be released on December 16, 2022.',\n    'next': 'The next Star Wars movie is scheduled to be released on December 16, 2022.',\n    'movie': 'The next movie in the Star Wars franchise is scheduled to be released on December 16, 2022.'\n }\n\n# code to identify the query\ndef identify_query(query):\n    words = query.lower().split(' ')\n    for word in words:\n        if word in keywords:\n            return keywords[word]\n    return []\n\n# code to respond to the query\ndef respond(query):\n    for keyword in identify_query(query):\n        if keyword in answers:\n            return answers[keyword]\n\n# Main\t\nquery = input('Ask me anything about Star Wars movies: ')\t\nanswer = respond(query)\t\n\nif answer:\n print(answer)\t\n else:\n print('Sorry, I do not understand your query.')"}
{"instruction":"Create an algorithm in Python to find the first index of an item in an array.","input":"arr = [1,3,7,9,0,4]\nnum = 7","output":"def findIndex(arr, num):\n    for index in range(len(arr)):\n        if arr[index] == num:\n            return index\n    return -1\n\narr = [1,3,7,9,0,4]\nnum = 7\nindex = findIndex(arr, num)\nprint('Index of %d is %d' % (num, index)) # Index of 7 is 2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to find the first index of an item in an array.\n\n### Input:\narr = [1,3,7,9,0,4]\nnum = 7\n\n### Output:\ndef findIndex(arr, num):\n    for index in range(len(arr)):\n        if arr[index] == num:\n            return index\n    return -1\n\narr = [1,3,7,9,0,4]\nnum = 7\nindex = findIndex(arr, num)\nprint('Index of %d is %d' % (num, index)) # Index of 7 is 2"}
{"instruction":"Design a class in Python for storing employee information. The employee information should include name, age, salary and department.","input":"Not applicable","output":"class Employee:\n def __init__(self, name, age, salary, department):\n self.name = name\n self.age = age\n self.salary = salary\n self.department = department\n\n def get_name(self):\n return self.name\n\n def get_age(self):\n return self.age\n\n def get_salary(self):\n return self.salary\n\n def get_department(self):\n return self.department","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python for storing employee information. The employee information should include name, age, salary and department.\n\n### Input:\nNot applicable\n\n### Output:\nclass Employee:\n def __init__(self, name, age, salary, department):\n self.name = name\n self.age = age\n self.salary = salary\n self.department = department\n\n def get_name(self):\n return self.name\n\n def get_age(self):\n return self.age\n\n def get_salary(self):\n return self.salary\n\n def get_department(self):\n return self.department"}
{"instruction":"Write a function in Python to convert a base 10 number to a base 2 number.","input":"72","output":"def base10_to_base2(n):\n    \n    # Create an empty list to hold the binary representation of the number\n    base2 = []\n    \n    # Divide the number by 2 and keep track of the remainder\n    while n > 0:\n        remainder = n % 2\n        n = n \/\/ 2\n        base2.insert(0, remainder)\n    \n    return ''.join([str(x) for x in base2])\n\nnum = 72\n\nbase2_num = base10_to_base2(num)\n\nprint(\"Base 2 Representation: \", base2_num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to convert a base 10 number to a base 2 number.\n\n### Input:\n72\n\n### Output:\ndef base10_to_base2(n):\n    \n    # Create an empty list to hold the binary representation of the number\n    base2 = []\n    \n    # Divide the number by 2 and keep track of the remainder\n    while n > 0:\n        remainder = n % 2\n        n = n \/\/ 2\n        base2.insert(0, remainder)\n    \n    return ''.join([str(x) for x in base2])\n\nnum = 72\n\nbase2_num = base10_to_base2(num)\n\nprint(\"Base 2 Representation: \", base2_num)"}
{"instruction":"Build a machine learning model in Python to predict the price of a house using its size as the independent variable.","input":"","output":"import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndata = pd.read_csv('house_price-data.csv')\n\nX = data[['size']]\ny = data['price']\n\nmodel = LinearRegression()\nmodel.fit(X, y)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a machine learning model in Python to predict the price of a house using its size as the independent variable.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndata = pd.read_csv('house_price-data.csv')\n\nX = data[['size']]\ny = data['price']\n\nmodel = LinearRegression()\nmodel.fit(X, y)"}
{"instruction":"Convert hierarchical xml files to csv using Python. The code takes in an input file or port and converts the xml file to csv format. It only makes sense if the hierarchy has low depth. The output can be split into different files for the first hierarchy level using the -p or --split option. The output file name can be specified using the -o or --output option. The separating character for fields can be specified using the -s or --separator option, and the quoting character for fields can be specified using the -q or --quotechar option. The code also supports schema validation using an xsd schema specified using the -x or --xsd option and the -a or --validation option.","input":"","output":"#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\"\"\"\n@file    xml2csv.py\n@author  Jakob Erdmann\n@author  Michael Behrisch\n@author  Laura Bieker\n@date    2013-12-08\n@version $Id: xml2csv.py 22608 2017-01-17 06:28:54Z behrisch $\n\nConvert hierarchical xml files to csv. This only makes sense if the hierarchy has low depth.\n\nSUMO, Simulation of Urban MObility; see http:\/\/sumo.dlr.de\/\nCopyright (C) 2013-2017 DLR (http:\/\/www.dlr.de\/) and contributors\n\nThis file is part of SUMO.\nSUMO is free software; you can redistribute it and\/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 3 of the License, or\n(at your option) any later version.\n\"\"\"\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nimport os\nimport sys\nimport socket\nimport collections\nfrom optparse import OptionParser\nimport xml.sax\ntry:\n    import lxml.etree\n    import lxml.sax\n    haveLxml = True\nexcept ImportError:\n    haveLxml = False\n\nimport xsd\n\nPY3 = sys.version_info > (3,)\n\n\nclass NestingHandler(xml.sax.handler.ContentHandler):\n\n    \"\"\"A handler which knows the current nesting of tags\"\"\"\n\n    def __init__(self):\n        self.tagstack = []\n\n    def startElement(self, name, attrs):\n        self.tagstack.append(name)\n\n    def endElement(self, name):\n        self.tagstack.pop()\n\n    def depth(self):\n        # do not count the root element\n        return len(self.tagstack) - 1\n\n\nclass AttrFinder(NestingHandler):\n\n    def __init__(self, xsdFile, source, split):\n        NestingHandler.__init__(self)\n        self.tagDepths = {}  # tag -> depth of appearance\n        self.tagAttrs = collections.defaultdict(\n            collections.OrderedDict)  # tag -> set of attrs\n        self.renamedAttrs = {}  # (name, attr) -> renamedAttr\n        self.attrs = {}\n        self.depthTags = {}  # child of root: depth of appearance -> tag list\n        self.rootDepth = 1 if split else 0\n        if xsdFile:\n            self.xsdStruc = xsd.XsdStructure(xsdFile)\n            if split:\n                for ele in self.xsdStruc.root.children:\n                    self.attrs[ele.name] = []\n                    self.depthTags[ele.name] = [[]]\n                    self.recursiveAttrFind(ele, ele, 1)\n            else:\n                self.attrs[self.xsdStruc.root.name] = []\n                self.depthTags[self.xsdStruc.root.name] = []\n                self.recursiveAttrFind(\n                    self.xsdStruc.root, self.xsdStruc.root, 0)\n        else:\n            self.xsdStruc = None\n            xml.sax.parse(source, self)\n\n    def addElement(self, root, name, depth):\n        if name not in self.tagDepths:\n            if len(self.depthTags[root]) == depth:\n                self.tagDepths[name] = depth\n                self.depthTags[root].append([])\n            self.depthTags[root][depth].append(name)\n            return True\n        if name not in self.depthTags[root][depth]:\n            print(\"Ignoring tag %s at depth %s\" %\n                  (name, depth), file=sys.stderr)\n        return False\n\n    def recursiveAttrFind(self, root, currEle, depth):\n        if not self.addElement(root.name, currEle.name, depth):\n            return\n        for a in currEle.attributes:\n            if \":\" not in a.name:  # no namespace support yet\n                self.tagAttrs[currEle.name][a.name] = a\n                anew = \"%s_%s\" % (currEle.name, a.name)\n                self.renamedAttrs[(currEle.name, a.name)] = anew\n                attrList = self.attrs[root.name]\n                if anew in attrList:\n                    del attrList[attrList.index(anew)]\n                attrList.append(anew)\n        for ele in currEle.children:\n            self.recursiveAttrFind(root, ele, depth + 1)\n\n    def startElement(self, name, attrs):\n        NestingHandler.startElement(self, name, attrs)\n        if self.depth() >= self.rootDepth:\n            root = self.tagstack[self.rootDepth]\n            if self.depth() == self.rootDepth and root not in self.attrs:\n                self.attrs[root] = []\n                self.depthTags[root] = [[]] * self.rootDepth\n            if not self.addElement(root, name, self.depth()):\n                return\n            # collect attributes\n            for a in sorted(list(attrs.keys())):\n                if a not in self.tagAttrs[name] and \":\" not in a:\n                    self.tagAttrs[name][a] = xsd.XmlAttribute(a)\n                    if not (name, a) in self.renamedAttrs:\n                        anew = \"%s_%s\" % (name, a)\n                        self.renamedAttrs[(name, a)] = anew\n                        self.attrs[root].append(anew)\n\n\nclass CSVWriter(NestingHandler):\n\n    def __init__(self, attrFinder, options):\n        NestingHandler.__init__(self)\n        self.attrFinder = attrFinder\n        self.options = options\n        self.currentValues = collections.defaultdict(lambda: \"\")\n        self.haveUnsavedValues = False\n        self.outfiles = {}\n        self.rootDepth = 1 if options.split else 0\n        for root in sorted(attrFinder.depthTags):\n            if len(attrFinder.depthTags) == 1:\n                if not options.output:\n                    options.output = os.path.splitext(options.source)[0]\n                if not options.output.isdigit() and not options.output.endswith(\".csv\"):\n                    options.output += \".csv\"\n                self.outfiles[root] = getOutStream(options.output)\n            else:\n                if options.output:\n                    outfilename = options.output + \"%s.csv\" % root\n                else:\n                    outfilename = os.path.splitext(\n                        options.source)[0] + \"%s.csv\" % root\n                self.outfiles[root] = open(outfilename, 'w')\n            if (PY3):\n                self.outfiles[root].write(str.encode(\n                    options.separator.join(map(self.quote, attrFinder.attrs[root])) + \"\\n\"))\n            else:\n                self.outfiles[root].write(\n                    options.separator.join(map(self.quote, attrFinder.attrs[root])) + \"\\n\")\n\n    def quote(self, s):\n        return \"%s%s%s\" % (self.options.quotechar, s, self.options.quotechar)\n\n# the following two are needed for the lxml saxify to work\n    def startElementNS(self, name, qname, attrs):\n        self.startElement(qname, attrs)\n\n    def endElementNS(self, name, qname):\n        self.endElement(qname)\n\n    def startElement(self, name, attrs):\n        NestingHandler.startElement(self, name, attrs)\n        if self.depth() >= self.rootDepth:\n            root = self.tagstack[self.rootDepth]\n#            print(\"start\", name, root, self.depth(), self.attrFinder.depthTags[root][self.depth()])\n            if name in self.attrFinder.depthTags[root][self.depth()]:\n                for a, v in attrs.items():\n                    if isinstance(a, tuple):\n                        a = a[1]\n#                    print(a, dict(self.attrFinder.tagAttrs[name]))\n                    if a in self.attrFinder.tagAttrs[name]:\n                        if self.attrFinder.xsdStruc:\n                            enum = self.attrFinder.xsdStruc.getEnumeration(\n                                self.attrFinder.tagAttrs[name][a].type)\n                            if enum:\n                                v = enum.index(v)\n                        a2 = self.attrFinder.renamedAttrs.get((name, a), a)\n                        self.currentValues[a2] = v\n                        self.haveUnsavedValues = True\n\n    def endElement(self, name):\n        if self.depth() >= self.rootDepth:\n            root = self.tagstack[self.rootDepth]\n#            print(\"end\", name, root, self.depth(), self.attrFinder.depthTags[root][self.depth()], self.haveUnsavedValues)\n            if name in self.attrFinder.depthTags[root][self.depth()]:\n                if self.haveUnsavedValues:\n                    if(PY3):\n                        self.outfiles[root].write(str.encode(self.options.separator.join(\n                            [self.quote(self.currentValues[a]) for a in self.attrFinder.attrs[root]]) + \"\\n\"))\n                    else:\n                        self.outfiles[root].write(self.options.separator.join(\n                            [self.quote(self.currentValues[a]) for a in self.attrFinder.attrs[root]]) + \"\\n\")\n                    self.haveUnsavedValues = False\n                for a in self.attrFinder.tagAttrs[name]:\n                    a2 = self.attrFinder.renamedAttrs.get((name, a), a)\n                    del self.currentValues[a2]\n        NestingHandler.endElement(self, name)\n\n\ndef getSocketStream(port, mode='rb'):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.bind((\"localhost\", port))\n    s.listen(1)\n    conn, addr = s.accept()\n    return conn.makefile(mode)\n\n\ndef getOutStream(output):\n    if output.isdigit():\n        return getSocketStream(int(output), 'wb')\n    return open(output, 'wb')\n\n\ndef get_options():\n    optParser = OptionParser(\n        usage=os.path.basename(sys.argv[0]) + \" [<options>] <input_file_or_port>\")\n    optParser.add_option(\"-s\", \"--separator\", default=\";\",\n                         help=\"separating character for fields\")\n    optParser.add_option(\"-q\", \"--quotechar\", default='',\n                         help=\"quoting character for fields\")\n    optParser.add_option(\"-x\", \"--xsd\", help=\"xsd schema to use\")\n    optParser.add_option(\"-a\", \"--validation\", action=\"store_true\",\n                         default=False, help=\"enable schema validation\")\n    optParser.add_option(\"-p\", \"--split\", action=\"store_true\",\n                         default=False, help=\"split in different files for the first hierarchy level\")\n    optParser.add_option(\"-o\", \"--output\", help=\"base name for output\")\n    options, args = optParser.parse_args()\n    if len(args) != 1:\n        optParser.print_help()\n        sys.exit()\n    if options.validation and not haveLxml:\n        print(\"lxml not available, skipping validation\", file=sys.stderr)\n        options.validation = False\n    if args[0].isdigit():\n        if not options.xsd:\n            print(\"a schema is mandatory for stream parsing\", file=sys.stderr)\n            sys.exit()\n        options.source = getSocketStream(int(args[0]))\n    else:\n        options.source = args[0]\n    if options.output and options.output.isdigit() and options.split:\n        print(\n            \"it is not possible to use splitting together with stream output\", file=sys.stderr)\n        sys.exit()\n    return options\n\n\ndef main():\n    options = get_options()\n    # get attributes\n    attrFinder = AttrFinder(options.xsd, options.source, options.split)\n    # write csv\n    handler = CSVWriter(attrFinder, options)\n    if options.validation:\n        schema = lxml.etree.XMLSchema(file=options.xsd)\n        parser = lxml.etree.XMLParser(schema=schema)\n        tree = lxml.etree.parse(options.source, parser)\n        lxml.sax.saxify(tree, handler)\n    else:\n        xml.sax.parse(options.source, handler)\n\nif __name__ == \"__main__\":\n    main()\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert hierarchical xml files to csv using Python. The code takes in an input file or port and converts the xml file to csv format. It only makes sense if the hierarchy has low depth. The output can be split into different files for the first hierarchy level using the -p or --split option. The output file name can be specified using the -o or --output option. The separating character for fields can be specified using the -s or --separator option, and the quoting character for fields can be specified using the -q or --quotechar option. The code also supports schema validation using an xsd schema specified using the -x or --xsd option and the -a or --validation option.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\"\"\"\n@file    xml2csv.py\n@author  Jakob Erdmann\n@author  Michael Behrisch\n@author  Laura Bieker\n@date    2013-12-08\n@version $Id: xml2csv.py 22608 2017-01-17 06:28:54Z behrisch $\n\nConvert hierarchical xml files to csv. This only makes sense if the hierarchy has low depth.\n\nSUMO, Simulation of Urban MObility; see http:\/\/sumo.dlr.de\/\nCopyright (C) 2013-2017 DLR (http:\/\/www.dlr.de\/) and contributors\n\nThis file is part of SUMO.\nSUMO is free software; you can redistribute it and\/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 3 of the License, or\n(at your option) any later version.\n\"\"\"\n\nfrom __future__ import print_function\nfrom __future__ import absolute_import\nimport os\nimport sys\nimport socket\nimport collections\nfrom optparse import OptionParser\nimport xml.sax\ntry:\n    import lxml.etree\n    import lxml.sax\n    haveLxml = True\nexcept ImportError:\n    haveLxml = False\n\nimport xsd\n\nPY3 = sys.version_info > (3,)\n\n\nclass NestingHandler(xml.sax.handler.ContentHandler):\n\n    \"\"\"A handler which knows the current nesting of tags\"\"\"\n\n    def __init__(self):\n        self.tagstack = []\n\n    def startElement(self, name, attrs):\n        self.tagstack.append(name)\n\n    def endElement(self, name):\n        self.tagstack.pop()\n\n    def depth(self):\n        # do not count the root element\n        return len(self.tagstack) - 1\n\n\nclass AttrFinder(NestingHandler):\n\n    def __init__(self, xsdFile, source, split):\n        NestingHandler.__init__(self)\n        self.tagDepths = {}  # tag -> depth of appearance\n        self.tagAttrs = collections.defaultdict(\n            collections.OrderedDict)  # tag -> set of attrs\n        self.renamedAttrs = {}  # (name, attr) -> renamedAttr\n        self.attrs = {}\n        self.depthTags = {}  # child of root: depth of appearance -> tag list\n        self.rootDepth = 1 if split else 0\n        if xsdFile:\n            self.xsdStruc = xsd.XsdStructure(xsdFile)\n            if split:\n                for ele in self.xsdStruc.root.children:\n                    self.attrs[ele.name] = []\n                    self.depthTags[ele.name] = [[]]\n                    self.recursiveAttrFind(ele, ele, 1)\n            else:\n                self.attrs[self.xsdStruc.root.name] = []\n                self.depthTags[self.xsdStruc.root.name] = []\n                self.recursiveAttrFind(\n                    self.xsdStruc.root, self.xsdStruc.root, 0)\n        else:\n            self.xsdStruc = None\n            xml.sax.parse(source, self)\n\n    def addElement(self, root, name, depth):\n        if name not in self.tagDepths:\n            if len(self.depthTags[root]) == depth:\n                self.tagDepths[name] = depth\n                self.depthTags[root].append([])\n            self.depthTags[root][depth].append(name)\n            return True\n        if name not in self.depthTags[root][depth]:\n            print(\"Ignoring tag %s at depth %s\" %\n                  (name, depth), file=sys.stderr)\n        return False\n\n    def recursiveAttrFind(self, root, currEle, depth):\n        if not self.addElement(root.name, currEle.name, depth):\n            return\n        for a in currEle.attributes:\n            if \":\" not in a.name:  # no namespace support yet\n                self.tagAttrs[currEle.name][a.name] = a\n                anew = \"%s_%s\" % (currEle.name, a.name)\n                self.renamedAttrs[(currEle.name, a.name)] = anew\n                attrList = self.attrs[root.name]\n                if anew in attrList:\n                    del attrList[attrList.index(anew)]\n                attrList.append(anew)\n        for ele in currEle.children:\n            self.recursiveAttrFind(root, ele, depth + 1)\n\n    def startElement(self, name, attrs):\n        NestingHandler.startElement(self, name, attrs)\n        if self.depth() >= self.rootDepth:\n            root = self.tagstack[self.rootDepth]\n            if self.depth() == self.rootDepth and root not in self.attrs:\n                self.attrs[root] = []\n                self.depthTags[root] = [[]] * self.rootDepth\n            if not self.addElement(root, name, self.depth()):\n                return\n            # collect attributes\n            for a in sorted(list(attrs.keys())):\n                if a not in self.tagAttrs[name] and \":\" not in a:\n                    self.tagAttrs[name][a] = xsd.XmlAttribute(a)\n                    if not (name, a) in self.renamedAttrs:\n                        anew = \"%s_%s\" % (name, a)\n                        self.renamedAttrs[(name, a)] = anew\n                        self.attrs[root].append(anew)\n\n\nclass CSVWriter(NestingHandler):\n\n    def __init__(self, attrFinder, options):\n        NestingHandler.__init__(self)\n        self.attrFinder = attrFinder\n        self.options = options\n        self.currentValues = collections.defaultdict(lambda: \"\")\n        self.haveUnsavedValues = False\n        self.outfiles = {}\n        self.rootDepth = 1 if options.split else 0\n        for root in sorted(attrFinder.depthTags):\n            if len(attrFinder.depthTags) == 1:\n                if not options.output:\n                    options.output = os.path.splitext(options.source)[0]\n                if not options.output.isdigit() and not options.output.endswith(\".csv\"):\n                    options.output += \".csv\"\n                self.outfiles[root] = getOutStream(options.output)\n            else:\n                if options.output:\n                    outfilename = options.output + \"%s.csv\" % root\n                else:\n                    outfilename = os.path.splitext(\n                        options.source)[0] + \"%s.csv\" % root\n                self.outfiles[root] = open(outfilename, 'w')\n            if (PY3):\n                self.outfiles[root].write(str.encode(\n                    options.separator.join(map(self.quote, attrFinder.attrs[root])) + \"\\n\"))\n            else:\n                self.outfiles[root].write(\n                    options.separator.join(map(self.quote, attrFinder.attrs[root])) + \"\\n\")\n\n    def quote(self, s):\n        return \"%s%s%s\" % (self.options.quotechar, s, self.options.quotechar)\n\n# the following two are needed for the lxml saxify to work\n    def startElementNS(self, name, qname, attrs):\n        self.startElement(qname, attrs)\n\n    def endElementNS(self, name, qname):\n        self.endElement(qname)\n\n    def startElement(self, name, attrs):\n        NestingHandler.startElement(self, name, attrs)\n        if self.depth() >= self.rootDepth:\n            root = self.tagstack[self.rootDepth]\n#            print(\"start\", name, root, self.depth(), self.attrFinder.depthTags[root][self.depth()])\n            if name in self.attrFinder.depthTags[root][self.depth()]:\n                for a, v in attrs.items():\n                    if isinstance(a, tuple):\n                        a = a[1]\n#                    print(a, dict(self.attrFinder.tagAttrs[name]))\n                    if a in self.attrFinder.tagAttrs[name]:\n                        if self.attrFinder.xsdStruc:\n                            enum = self.attrFinder.xsdStruc.getEnumeration(\n                                self.attrFinder.tagAttrs[name][a].type)\n                            if enum:\n                                v = enum.index(v)\n                        a2 = self.attrFinder.renamedAttrs.get((name, a), a)\n                        self.currentValues[a2] = v\n                        self.haveUnsavedValues = True\n\n    def endElement(self, name):\n        if self.depth() >= self.rootDepth:\n            root = self.tagstack[self.rootDepth]\n#            print(\"end\", name, root, self.depth(), self.attrFinder.depthTags[root][self.depth()], self.haveUnsavedValues)\n            if name in self.attrFinder.depthTags[root][self.depth()]:\n                if self.haveUnsavedValues:\n                    if(PY3):\n                        self.outfiles[root].write(str.encode(self.options.separator.join(\n                            [self.quote(self.currentValues[a]) for a in self.attrFinder.attrs[root]]) + \"\\n\"))\n                    else:\n                        self.outfiles[root].write(self.options.separator.join(\n                            [self.quote(self.currentValues[a]) for a in self.attrFinder.attrs[root]]) + \"\\n\")\n                    self.haveUnsavedValues = False\n                for a in self.attrFinder.tagAttrs[name]:\n                    a2 = self.attrFinder.renamedAttrs.get((name, a), a)\n                    del self.currentValues[a2]\n        NestingHandler.endElement(self, name)\n\n\ndef getSocketStream(port, mode='rb'):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.bind((\"localhost\", port))\n    s.listen(1)\n    conn, addr = s.accept()\n    return conn.makefile(mode)\n\n\ndef getOutStream(output):\n    if output.isdigit():\n        return getSocketStream(int(output), 'wb')\n    return open(output, 'wb')\n\n\ndef get_options():\n    optParser = OptionParser(\n        usage=os.path.basename(sys.argv[0]) + \" [<options>] <input_file_or_port>\")\n    optParser.add_option(\"-s\", \"--separator\", default=\";\",\n                         help=\"separating character for fields\")\n    optParser.add_option(\"-q\", \"--quotechar\", default='',\n                         help=\"quoting character for fields\")\n    optParser.add_option(\"-x\", \"--xsd\", help=\"xsd schema to use\")\n    optParser.add_option(\"-a\", \"--validation\", action=\"store_true\",\n                         default=False, help=\"enable schema validation\")\n    optParser.add_option(\"-p\", \"--split\", action=\"store_true\",\n                         default=False, help=\"split in different files for the first hierarchy level\")\n    optParser.add_option(\"-o\", \"--output\", help=\"base name for output\")\n    options, args = optParser.parse_args()\n    if len(args) != 1:\n        optParser.print_help()\n        sys.exit()\n    if options.validation and not haveLxml:\n        print(\"lxml not available, skipping validation\", file=sys.stderr)\n        options.validation = False\n    if args[0].isdigit():\n        if not options.xsd:\n            print(\"a schema is mandatory for stream parsing\", file=sys.stderr)\n            sys.exit()\n        options.source = getSocketStream(int(args[0]))\n    else:\n        options.source = args[0]\n    if options.output and options.output.isdigit() and options.split:\n        print(\n            \"it is not possible to use splitting together with stream output\", file=sys.stderr)\n        sys.exit()\n    return options\n\n\ndef main():\n    options = get_options()\n    # get attributes\n    attrFinder = AttrFinder(options.xsd, options.source, options.split)\n    # write csv\n    handler = CSVWriter(attrFinder, options)\n    if options.validation:\n        schema = lxml.etree.XMLSchema(file=options.xsd)\n        parser = lxml.etree.XMLParser(schema=schema)\n        tree = lxml.etree.parse(options.source, parser)\n        lxml.sax.saxify(tree, handler)\n    else:\n        xml.sax.parse(options.source, handler)\n\nif __name__ == \"__main__\":\n    main()\n"}
{"instruction":"Develop an AI program in Python which can play the game tic-tac-toe.","input":"","output":"def tic_tac_toe():\n    game_board = [[0,0,0],\n                  [0,0,0],\n                  [0,0,0]]\n    player_1 = True\n    while not game_over():\n        move = get_ai_move()\n        if player_1:\n            game_board[move[0]][move[1]] = 1\n            player_1 = False\n        else:\n            game_board[move[0]][move[1]] = -1\n            player_1 = True\n\ndef get_ai_move():\n    # Use AI algorithms to find the best move\n    best_move = 0\n    # Return the best move\n    return best_move\n\ndef game_over():\n    # Game is over if there's a winner or a tie\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI program in Python which can play the game tic-tac-toe.\n\n### Input:\n\n\n### Output:\ndef tic_tac_toe():\n    game_board = [[0,0,0],\n                  [0,0,0],\n                  [0,0,0]]\n    player_1 = True\n    while not game_over():\n        move = get_ai_move()\n        if player_1:\n            game_board[move[0]][move[1]] = 1\n            player_1 = False\n        else:\n            game_board[move[0]][move[1]] = -1\n            player_1 = True\n\ndef get_ai_move():\n    # Use AI algorithms to find the best move\n    best_move = 0\n    # Return the best move\n    return best_move\n\ndef game_over():\n    # Game is over if there's a winner or a tie\n    return False"}
{"instruction":"Create a Python program to generate a random password of n-length given a character set.","input":"length = 8\nchar_set = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890@#$%^&*'","output":"import random  \n\ndef generatePassword(length, char_set):\n    # empty string to store the generated password\n    password = \"\"\n    # loop n times to generate n character passwords\n    for i in range(length):\n        # add a random character to the password\n        password += random.choice(char_set)\n    # return the generated password\n    return password\n\n# example\nlength = 8\nchar_set = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890@#$%^&*'\n\npassword = generatePassword(length, char_set)\nprint(password)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a random password of n-length given a character set.\n\n### Input:\nlength = 8\nchar_set = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890@#$%^&*'\n\n### Output:\nimport random  \n\ndef generatePassword(length, char_set):\n    # empty string to store the generated password\n    password = \"\"\n    # loop n times to generate n character passwords\n    for i in range(length):\n        # add a random character to the password\n        password += random.choice(char_set)\n    # return the generated password\n    return password\n\n# example\nlength = 8\nchar_set = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890@#$%^&*'\n\npassword = generatePassword(length, char_set)\nprint(password)"}
{"instruction":"Write a Python program to generate a list of prime numbers within a specified range.","input":"","output":"def prime_range(lower, upper):\n    prime_list = []\n    for num in range(lower, upper +1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_list.append(num)\n\n    return prime_list\n\nlower = 1\nupper = 20\nprint(prime_range(lower, upper))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a list of prime numbers within a specified range.\n\n### Input:\n\n\n### Output:\ndef prime_range(lower, upper):\n    prime_list = []\n    for num in range(lower, upper +1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_list.append(num)\n\n    return prime_list\n\nlower = 1\nupper = 20\nprint(prime_range(lower, upper))"}
{"instruction":"Edit an existing Python program to calculate the area of a circle.","input":"import math\ndef area(radius):\n    return math.pi * radius ** 2","output":"import math\ndef area(radius):\n    area = math.pi * radius ** 2\n    return area","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit an existing Python program to calculate the area of a circle.\n\n### Input:\nimport math\ndef area(radius):\n    return math.pi * radius ** 2\n\n### Output:\nimport math\ndef area(radius):\n    area = math.pi * radius ** 2\n    return area"}
{"instruction":"Write a Python script to parse a webpage to extract the weights from a table containing the weights of animals.","input":"Table to scrape:\n\nAnimal | Weight\n-------------\nLion | 200 kg\nTiger | 150 kg\nElephant | 1000 kg","output":"import requests\nfrom bs4 import BeautifulSoup\n \nurl = 'https:\/\/example.com'\n \nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n \nweights = {}\n \nfor row in soup.select('table tr'):\n cells = row.find_all('td')\n if len(cells) == 2:\n  animal = cells[0].text.strip()\n  weight = cells[1].text.strip()\n  weights[animal] = weight\n \nprint(weights)\n# {'Lion': '200 kg', 'Tiger': '150 kg', 'Elephant': '1000 kg'}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to parse a webpage to extract the weights from a table containing the weights of animals.\n\n### Input:\nTable to scrape:\n\nAnimal | Weight\n-------------\nLion | 200 kg\nTiger | 150 kg\nElephant | 1000 kg\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n \nurl = 'https:\/\/example.com'\n \nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n \nweights = {}\n \nfor row in soup.select('table tr'):\n cells = row.find_all('td')\n if len(cells) == 2:\n  animal = cells[0].text.strip()\n  weight = cells[1].text.strip()\n  weights[animal] = weight\n \nprint(weights)\n# {'Lion': '200 kg', 'Tiger': '150 kg', 'Elephant': '1000 kg'}"}
{"instruction":"Develop a Python program to clearly understand the concept of recursion.","input":"","output":"# This program is to understand recursion in Python.\n\n# Define a recursive function to calculate the factorial of a number\ndef factorial(n):\n   if n == 1:\n      return 1\n   else:\n      return n * factorial(n - 1)\n\n# Calculate factorial of number 5\nresult = factorial(5)\nprint(\"Factorial of 5 is \", result) \n\n# Output: Factorial of 5 is 120","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to clearly understand the concept of recursion.\n\n### Input:\n\n\n### Output:\n# This program is to understand recursion in Python.\n\n# Define a recursive function to calculate the factorial of a number\ndef factorial(n):\n   if n == 1:\n      return 1\n   else:\n      return n * factorial(n - 1)\n\n# Calculate factorial of number 5\nresult = factorial(5)\nprint(\"Factorial of 5 is \", result) \n\n# Output: Factorial of 5 is 120"}
{"instruction":"Design a function in Python for encoding a message using ROT13 cipher.","input":"Plaintext:\nattack at dawn\n\nKey:\n13","output":"import string \n  \ndef rot13_encode(plaintext, key): \n    ciphertext = \"\" \n    for char in plaintext: \n        if char in string.ascii_lowercase: \n            ciphertext += chr((ord(char) - key - 97) % 26 + 97)\n        elif char in string.ascii_uppercase: \n            ciphertext += chr((ord(char) - key - 65) % 26 + 65) \n        else: \n            ciphertext += char \n    return ciphertext \n  \nprint(rot13_encode(\"attack at dawn\", 13))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python for encoding a message using ROT13 cipher.\n\n### Input:\nPlaintext:\nattack at dawn\n\nKey:\n13\n\n### Output:\nimport string \n  \ndef rot13_encode(plaintext, key): \n    ciphertext = \"\" \n    for char in plaintext: \n        if char in string.ascii_lowercase: \n            ciphertext += chr((ord(char) - key - 97) % 26 + 97)\n        elif char in string.ascii_uppercase: \n            ciphertext += chr((ord(char) - key - 65) % 26 + 65) \n        else: \n            ciphertext += char \n    return ciphertext \n  \nprint(rot13_encode(\"attack at dawn\", 13))"}
{"instruction":"Develop a Python function to determine the maximum possible sum of two numbers even after swapping.","input":"","output":"\"\"\"\ndef max_sum_swap(a, b): \n    x = max(a, b) \n    y = min(a, b) \n  \n    # swap the numbers \n    x = x + y \n    y = x - y \n    x = x - y \n  \n    return x + y \n\"\"\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function to determine the maximum possible sum of two numbers even after swapping.\n\n### Input:\n\n\n### Output:\n\"\"\"\ndef max_sum_swap(a, b): \n    x = max(a, b) \n    y = min(a, b) \n  \n    # swap the numbers \n    x = x + y \n    y = x - y \n    x = x - y \n  \n    return x + y \n\"\"\""}
{"instruction":"Write a Python program to access a value from a nested dictionary given its keys.","input":"","output":"def nested_dict_value(dictionary, keys): \n for key in keys: \n if key in dictionary.keys(): \n dictionary = dictionary[key] \n else: \n return None\n \n return dictionary\n\ndata = {\n\"first\" : {\n\"second\" : {\n\"third\" : 10\n}\n}\n}\n\nresult = nested_dict_value(data, [\"first\", \"second\", \"third\"])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to access a value from a nested dictionary given its keys.\n\n### Input:\n\n\n### Output:\ndef nested_dict_value(dictionary, keys): \n for key in keys: \n if key in dictionary.keys(): \n dictionary = dictionary[key] \n else: \n return None\n \n return dictionary\n\ndata = {\n\"first\" : {\n\"second\" : {\n\"third\" : 10\n}\n}\n}\n\nresult = nested_dict_value(data, [\"first\", \"second\", \"third\"])\nprint(result)"}
{"instruction":"Write a Python program to search for a given element in a list.","input":"","output":"def search_element(element, list_):\n    for i in range(len(list_)):\n        if element == list_[i]:\n            return i\n    return -1","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to search for a given element in a list.\n\n### Input:\n\n\n### Output:\ndef search_element(element, list_):\n    for i in range(len(list_)):\n        if element == list_[i]:\n            return i\n    return -1"}
{"instruction":"Create a Python function that takes an array of numbers and returns true if the array is sorted in increasing order, and false otherwise","input":"","output":"def is_sorted(array):\n    for i in range(len(array)-1):\n        if array[i] > array[i+1]:\n            return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes an array of numbers and returns true if the array is sorted in increasing order, and false otherwise\n\n### Input:\n\n\n### Output:\ndef is_sorted(array):\n    for i in range(len(array)-1):\n        if array[i] > array[i+1]:\n            return False\n    return True"}
{"instruction":"Write a Python program to parse a JSON string and extract a specific key-value pair.","input":"{\n \"key\": \"value1\",\n \"anotherKey\": \"value2\",\n \"somekey\": \"somevalue\"\n}","output":"import json\n \nmyJSON = '{\"key\": \"value1\", \n           \"anotherKey\": \"value2\", \n           \"somekey\": \"somevalue\"}'\n \n# parse json\nparsedJSON = json.loads(myJSON)\n \n# access data\nkey = parsedJSON['key']\nvalue = parsedJSON['value']\n \n# print key and value\nprint(\"key: \" + key)\nprint(\"value: \" + value)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to parse a JSON string and extract a specific key-value pair.\n\n### Input:\n{\n \"key\": \"value1\",\n \"anotherKey\": \"value2\",\n \"somekey\": \"somevalue\"\n}\n\n### Output:\nimport json\n \nmyJSON = '{\"key\": \"value1\", \n           \"anotherKey\": \"value2\", \n           \"somekey\": \"somevalue\"}'\n \n# parse json\nparsedJSON = json.loads(myJSON)\n \n# access data\nkey = parsedJSON['key']\nvalue = parsedJSON['value']\n \n# print key and value\nprint(\"key: \" + key)\nprint(\"value: \" + value)"}
{"instruction":"Relace a for loop with appropriate list comprehension in a Python program.","input":"list = [1, 2, 3, 4, 5, 6]","output":"list = [x**2 for x in [1, 2, 3, 4, 5, 6]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRelace a for loop with appropriate list comprehension in a Python program.\n\n### Input:\nlist = [1, 2, 3, 4, 5, 6]\n\n### Output:\nlist = [x**2 for x in [1, 2, 3, 4, 5, 6]]"}
{"instruction":"Write a function in Python that prints all the prime numbers between two given numbers inclusive.","input":"Start: 15\nEnd: 25","output":"def printPrimeNumbers(start, end):\n for num in range(start, end+1):\n # base case\n if num > 1: \n for i in range(2, num): \n if (num % i) == 0: \n break\n else: \n print(num) \n\n# Driver Code \nstart = 15\nend = 25\n\nprintPrimeNumbers(start, end) \n\n# Output:\n# 17 \n# 19 \n# 23 \n# 25","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that prints all the prime numbers between two given numbers inclusive.\n\n### Input:\nStart: 15\nEnd: 25\n\n### Output:\ndef printPrimeNumbers(start, end):\n for num in range(start, end+1):\n # base case\n if num > 1: \n for i in range(2, num): \n if (num % i) == 0: \n break\n else: \n print(num) \n\n# Driver Code \nstart = 15\nend = 25\n\nprintPrimeNumbers(start, end) \n\n# Output:\n# 17 \n# 19 \n# 23 \n# 25"}
{"instruction":"Design a Python class to represent a circle with a center and a radius.","input":"","output":"class Circle:\n    def __init__(self, center, radius):\n        self.center = center\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * self.radius * self.radius\n\n    def circumference(self):\n        return 2 * 3.14 * self.radius\n\ncircle = Circle((1, 2), 5)\nprint(f\"Area of the circle: {circle.area()}\")\nprint(f\"Circumference of the circle: {circle.circumference()}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class to represent a circle with a center and a radius.\n\n### Input:\n\n\n### Output:\nclass Circle:\n    def __init__(self, center, radius):\n        self.center = center\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * self.radius * self.radius\n\n    def circumference(self):\n        return 2 * 3.14 * self.radius\n\ncircle = Circle((1, 2), 5)\nprint(f\"Area of the circle: {circle.area()}\")\nprint(f\"Circumference of the circle: {circle.circumference()}\")"}
{"instruction":"Create a list comprehension in Python that takes a list of numbers and squares each number in the list.","input":"[1, 2, 3, 4, 5]","output":"[x**2 for x in [1, 2, 3, 4, 5]]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a list comprehension in Python that takes a list of numbers and squares each number in the list.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\n[x**2 for x in [1, 2, 3, 4, 5]]"}
{"instruction":"Fluently and completely document a quick sort algorithm in Python.","input":"","output":"def quick_sort(arr):\n    \"\"\"\n    Quick sort is a sorting algorithm that uses the divide-and-conquer approach to sort a given array.\n    \n    Parameters\n    ----------\n    arr: List[int]\n        list of integers to be sorted\n    \n    Returns\n    -------\n    List[int]\n        sorted list of integers\n   \n    \"\"\"\n    if arr is None or len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) \/\/ 2]\n    left_arr, right_arr = [], []\n    for i in range(len(arr)):\n        if arr[i] < pivot:\n            left_arr.append(arr[i])\n        elif arr[i] > pivot:\n            right_arr.append(arr[i])\n    return quick_sort(left_arr) + [pivot] + quick_sort(right_arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFluently and completely document a quick sort algorithm in Python.\n\n### Input:\n\n\n### Output:\ndef quick_sort(arr):\n    \"\"\"\n    Quick sort is a sorting algorithm that uses the divide-and-conquer approach to sort a given array.\n    \n    Parameters\n    ----------\n    arr: List[int]\n        list of integers to be sorted\n    \n    Returns\n    -------\n    List[int]\n        sorted list of integers\n   \n    \"\"\"\n    if arr is None or len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) \/\/ 2]\n    left_arr, right_arr = [], []\n    for i in range(len(arr)):\n        if arr[i] < pivot:\n            left_arr.append(arr[i])\n        elif arr[i] > pivot:\n            right_arr.append(arr[i])\n    return quick_sort(left_arr) + [pivot] + quick_sort(right_arr)"}
{"instruction":"Write a python program to classify the given sentence as positive or negative","input":"This machine learning project is quite difficult.","output":"def classify_sentiment(sentence):\n    words = sentence.split()\n    positive_words = [\"good\", \"great\", \"excellent\", \"wonderful\"]\n    negative_words = [\"bad\", \"horrible\", \"terrible\", \"awful\"]\n\n    pos_count, neg_count = 0, 0\n    for word in words:\n        if word in positive_words:\n            pos_count += 1\n        if word in negative_words:\n            neg_count += 1\n    if pos_count > neg_count:\n        sentiment = \"positive\"\n    elif neg_count > pos_count:\n        sentiment = \"negative\"\n    else:\n        sentiment = \"neutral\"\n    return sentiment","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to classify the given sentence as positive or negative\n\n### Input:\nThis machine learning project is quite difficult.\n\n### Output:\ndef classify_sentiment(sentence):\n    words = sentence.split()\n    positive_words = [\"good\", \"great\", \"excellent\", \"wonderful\"]\n    negative_words = [\"bad\", \"horrible\", \"terrible\", \"awful\"]\n\n    pos_count, neg_count = 0, 0\n    for word in words:\n        if word in positive_words:\n            pos_count += 1\n        if word in negative_words:\n            neg_count += 1\n    if pos_count > neg_count:\n        sentiment = \"positive\"\n    elif neg_count > pos_count:\n        sentiment = \"negative\"\n    else:\n        sentiment = \"neutral\"\n    return sentiment"}
{"instruction":"Create an algorithm in Python that uses a greedy approach to scheduling tasks. The algorithm should take in a list of tasks and the corresponding deadlines, and output a list of tasks that can be completed without exceeding any deadlines.","input":"[(\"Task A\", 2), (\"Task B\", 1), (\"Task C\", 3)]","output":"def schedule_tasks(tasks):\n  scheduled_tasks = []\n  tasks.sort(key=lambda x: x[1]) # sort tasks by deadline\n  current_time = 0\n  \n  while len(tasks) > 0:\n    for task in tasks:\n      if current_time + task[1] <= task[2]: # check if the task can be completed before its deadline\n        scheduled_tasks.append(task) # add the task to the list of scheduled tasks\n        current_time += task[1] # update the current time\n        tasks.remove(task) # remove the task from the list of tasks\n        break # move on to the next task\n  \n  return scheduled_tasks\n\nschedule_tasks([(\"Task A\", 2), (\"Task B\", 1), (\"Task C\", 3)]); # returns [(\"Task B\", 1), (\"Task A\", 2)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that uses a greedy approach to scheduling tasks. The algorithm should take in a list of tasks and the corresponding deadlines, and output a list of tasks that can be completed without exceeding any deadlines.\n\n### Input:\n[(\"Task A\", 2), (\"Task B\", 1), (\"Task C\", 3)]\n\n### Output:\ndef schedule_tasks(tasks):\n  scheduled_tasks = []\n  tasks.sort(key=lambda x: x[1]) # sort tasks by deadline\n  current_time = 0\n  \n  while len(tasks) > 0:\n    for task in tasks:\n      if current_time + task[1] <= task[2]: # check if the task can be completed before its deadline\n        scheduled_tasks.append(task) # add the task to the list of scheduled tasks\n        current_time += task[1] # update the current time\n        tasks.remove(task) # remove the task from the list of tasks\n        break # move on to the next task\n  \n  return scheduled_tasks\n\nschedule_tasks([(\"Task A\", 2), (\"Task B\", 1), (\"Task C\", 3)]); # returns [(\"Task B\", 1), (\"Task A\", 2)]"}
{"instruction":"Construct a Python program to perform sentiment analysis on an input string and output the sentiment score.","input":"Example sentence: I had a great day yesterday","output":"import nltk\n\nsentence = \"I had a great day yesterday\"\n\nwords = nltk.word_tokenize(sentence)\n\ntext = nltk.Text(words)\n\npolarity_score = text.polarity_scores()\n\nprint(polarity_score)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to perform sentiment analysis on an input string and output the sentiment score.\n\n### Input:\nExample sentence: I had a great day yesterday\n\n### Output:\nimport nltk\n\nsentence = \"I had a great day yesterday\"\n\nwords = nltk.word_tokenize(sentence)\n\ntext = nltk.Text(words)\n\npolarity_score = text.polarity_scores()\n\nprint(polarity_score)"}
{"instruction":"Create a WebSocket server in Python.","input":"Not applicable","output":"import asyncio\nimport websockets\n\nasync def hello(websocket, path):\n greeting = await websocket.recv()\n print(f\"< {greeting}\")\n\nasync def hello_server():\n server = await websockets.serve(hello, '127.0.0.1', 8765)\n await server.wait_closed()\n\nasyncio.get_event_loop().run_until_complete(hello_server())\nasyncio.get_event_loop().run_forever()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a WebSocket server in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport asyncio\nimport websockets\n\nasync def hello(websocket, path):\n greeting = await websocket.recv()\n print(f\"< {greeting}\")\n\nasync def hello_server():\n server = await websockets.serve(hello, '127.0.0.1', 8765)\n await server.wait_closed()\n\nasyncio.get_event_loop().run_until_complete(hello_server())\nasyncio.get_event_loop().run_forever()"}
{"instruction":"Develop a Python program that enables a user to select two numbers and add them together.","input":"","output":"# define add() function \ndef add(num1, num2): \n    # Adding both the parameters and return them \n    sum = num1 + num2\n    return sum\n\n# Give the two numbers the user wants to add \nnum1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\n# Add and print the result \nprint(\"The sum of {} and {} is {}\".format(num1, num2, add(num1, num2)))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that enables a user to select two numbers and add them together.\n\n### Input:\n\n\n### Output:\n# define add() function \ndef add(num1, num2): \n    # Adding both the parameters and return them \n    sum = num1 + num2\n    return sum\n\n# Give the two numbers the user wants to add \nnum1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\n# Add and print the result \nprint(\"The sum of {} and {} is {}\".format(num1, num2, add(num1, num2)))"}
{"instruction":"Create a code that can be run in both Python and Java to find the sum of all the elements in a given array.","input":"[3, 4, 7, 2, 6]","output":"def sumArray(arr):\n    sum = 0\n    for x in arr:\n        sum += x\n    return sum\n\npublic static int sumArray(int[] arr) {\n    int sum = 0;\n    for(int ele : arr) {\n        sum += ele;\n    }\n    return sum;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code that can be run in both Python and Java to find the sum of all the elements in a given array.\n\n### Input:\n[3, 4, 7, 2, 6]\n\n### Output:\ndef sumArray(arr):\n    sum = 0\n    for x in arr:\n        sum += x\n    return sum\n\npublic static int sumArray(int[] arr) {\n    int sum = 0;\n    for(int ele : arr) {\n        sum += ele;\n    }\n    return sum;\n}"}
{"instruction":"Create a program in Python that takes a list of numbers and sorts them in descending order.","input":"[30, 10, 40, 20]","output":"def sortListInDescendingOrder(list):\n    return sorted(list, reverse=True)\n\nlist1 = [30, 10, 40, 20]\nsortedList = sortListInDescendingOrder(list1)\nprint(sortedList)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes a list of numbers and sorts them in descending order.\n\n### Input:\n[30, 10, 40, 20]\n\n### Output:\ndef sortListInDescendingOrder(list):\n    return sorted(list, reverse=True)\n\nlist1 = [30, 10, 40, 20]\nsortedList = sortListInDescendingOrder(list1)\nprint(sortedList)"}
{"instruction":"Write a Python code to sort the given list of strings using insertion sort.","input":"['tuna', 'apple', 'grapes', 'orange']","output":"def insertion_sort(arr):\n    \"\"\"Sorts the given list of strings using insertion sort\"\"\"\n\n    # traverse through 1 to len(arr) \n    for i in range(1, len(arr)): \n  \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], that are \n        # greater than key, to one position ahead \n        # of their current position \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n  \n# test\narr = ['tuna', 'apple', 'grapes', 'orange'] \ninsertion_sort(arr) \nprint (\"Sorted Array:\") \nprint (arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to sort the given list of strings using insertion sort.\n\n### Input:\n['tuna', 'apple', 'grapes', 'orange']\n\n### Output:\ndef insertion_sort(arr):\n    \"\"\"Sorts the given list of strings using insertion sort\"\"\"\n\n    # traverse through 1 to len(arr) \n    for i in range(1, len(arr)): \n  \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], that are \n        # greater than key, to one position ahead \n        # of their current position \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n  \n# test\narr = ['tuna', 'apple', 'grapes', 'orange'] \ninsertion_sort(arr) \nprint (\"Sorted Array:\") \nprint (arr)"}
{"instruction":"The given code is a Python script that translates a Wikivoyage article from one language to another. The script takes the title of the article and the source and destination languages as input and generates a new article in the destination","input":"","output":"#!\/usr\/bin\/python\n# -*- coding: utf-8 -*-\n#  transvoyage.py\n#  Version 0.3\n#  \n#  Copyright 2014 Gu\u00e9na\u00ebl Muller <contact@inkey-art.net>\n#  \n#  This program is free software; you can redistribute it and\/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation; either version 3 of the License, or\n#  (at your option) any later version.\n#  \n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#  \n#  You should have received a copy of the GNU General Public License\n#  along with this program; if not, write to the Free Software\n#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n#  MA 02110-1301, USA.\n# \n#TODO\n# - se conformer \u00e0 la PEP\u00a08\n# - commentaires et TODO bilingue.\n# - optimisations\n# -\ttraduction invers\u00e9 am\u00e9lior\u00e9\n# - nouveau langages\n# - debugage de certains regex et autres\n\n\nimport sys\nimport os\nimport subprocess \nimport re\nimport urllib\nimport argparse\n\n# traductions des types Articles\n\nlistTypeFr=('Ville','R\u00e9gion continentale','R\u00e9gion','Pays'   ,'Quartier','Itin\u00e9raire','Parc')\nlistTypeEn=('city' ,'continent'          ,'region','country','district','itinerary' ,'park')\n\n\n#Equivalences sections\nlistSectionFr=[\"Comprendre\",\"Aller\" ,\"Circuler\"  ,\"Voir\",\"Faire\",\"Acheter\",\"Manger\",\"Boire un verre \/ Sortir\",\"Se loger\",\"Aux environs\",\"Travailler\",\"Apprendre\",\"G\u00e9rer le Quotidien\",\"S\u00e9curit\u00e9\",\"Communiquer\"]\nlistSectionEn=[\"Understand\",\"Get in\",\"Get around\",\"See\" ,\"Do\"   ,\"Buy\"    ,\"Eat\"   ,\"Drink\"                  ,\"Sleep\"   ,\"Go next\",\"Work\"           ,\"Learn\"     ,\"Cope\"             ,\"Stay safe\", \"Connect\"   ]\n\nlistSectionFr.extend([\"Respecter\",\"Parler\",\"\u00c9l\u00e9ctricit\u00e9\"])\nlistSectionEn.extend([\"Respect\",\"Talk\",\"Electricity\"])\n\nlistSectionFr.extend([\"Se pr\u00e9parer\",\"\u00c9tapes\",\"Autres destinations\",\"Lire\",\"Douanes\",\"En taxi\",\"Sant\u00e9\",\"Monnaie\",\"Villes\",\"R\u00e9gions\",\"Quartiers\",\"Bureaux d'information touristique\"])\nlistSectionEn.extend([\"Prepare\",\"Route\",\"Other destinations\",\"Read\",\"Customs\",\"By taxi\",\"Stay healthy\",\"Currency\",\"Cities\",\"Regions\",\"Districts\",\"Tourist office\"])\n\nlistSectionFr.extend(['Histoire', 'Paysage', 'Flore et faune',\"Climat\",\"Randonn\u00e9e\",\"Droits d'acc\u00e8s\",\"Droits d'acc\u00e8s\",\"Activit\u00e9s\",\"M\u00e9t\u00e9o\",\"Nature\"])\nlistSectionEn.extend(['History', 'Landscape', 'Flora and fauna',\"Climate\",\"Hiking\",\"Fees\/permits\",\"Fees\/Permits\",\"Activities\",\"Weather\",\"Wildlife\"])\n\nlistSectionFr.extend(['\u00c0 pied', 'En train', 'En bus',\"En avion\",\"En ferry\",\"En bateau\",\"En voiture\",\"En v\u00e9lo\",\"En v\u00e9lo\",\"En v\u00e9lo\",\"En motoneige\",\"En stop\"])\nlistSectionEn.extend(['By foot', 'By train', 'By bus',\"By plane\",\"By ferry\",\"By boat\",\"By car\",\"By bicycle\",\"By cycle\",\"By bike\",\"By snowmobile\",\"By thumb\"])\n\nlistSectionFr.extend(['Bon march\u00e9', 'Prix moyen','Prix moyen', 'Luxe','H\u00f4tel','Logements','Dans la nature'])\nlistSectionEn.extend(['Budget', 'Mid-range','Mid range', 'Splurge','Hotel','Lodging','Backcountry'])\n\n#\u00a0\u00c9quivalence image\n\nlistImageFr=[\"[[Fichier:\",\"[[Fichier:\",\"gauche\",\"droite\",\"vignette\",\"vignette\"]\nlistImageEn=[\"[[Image:\",\"[[File:\",\"left\",\"right\",\"thumbnail\",\"thumb\"]\n\n#Equivalence Listings\n\n#titre listings\nlistListingDebFr=[\"Listing\",\"Faire\",\"Voir\",\"Acheter\",\"Manger\",\"Sortir\",\"Se loger\",\"Destination\",\"Aller\",\"Circuler\"]\nlistListingDebEn=[\"listing\",\"do\" ,\"see\",\"buy\",\"eat\",\"drink\",\"sleep\",\"listing\",\"listing\",\"listing\"]\n\n#param\u00e8tres\nlistListingFr=[\"nom=\",\"adresse=\",\"t\u00e9l\u00e9phone\",\"latitude=\",\"longitude=\",\"email=\",\"direction=\",\"num\u00e9ro gratuit=\",\"fax=\",\"prix=\",\"description=<!-- \",\"-->}}\",\"arriv\u00e9e=\",\"d\u00e9part=\",\"horaire=\"]\nlistListingEn=[\"name=\",\"address=\" ,\"phone\",\"lat=\",\"long=\",\"email=\",\"directions=\",\"tollfree=\",\"fax=\",\"price=\",\"content=\",\"}}\",\"checkin=\",\"checkout=\",\"hours=\"]\n\n#Equivalence Itineraires\nlistItineraireFr=[\"Jour \",\": De\",\" \u00e0 \"]\nlistItineraireEn=[\"Day \",\":\",\" to \"]\n\n#Equivalence Dans\nlistDansFr=[\"Dans\"]\nlistDansEn=[\"IsPartOf\"]\n\n#Equivalence Carte\n\n#Debut\nlistMapDebFr=[\"ListeRegions\",\"carte=\",\"taillecarte=\"]\nlistMapDebEn=[\"Regionlist\",\"regionmap=\",\"regionmapsize=\"]\n\n#Param\u00e8tres\nlistMapFr=[\"nomregion0=\",\"couleurregion0=\",\"elementsregion0=\",\"descriptionregion0=\"]\nlistMapEn=[\"region0name=\",\"region0color=\",\"region0items=\",\"region0description=\"]\n\n#\u00a0Tout les regex en string par langue de Destination\nRegSFr=[\"(.*)\\[\\[(Image|Fichier):(.*)\\s*$\",\"(=+)(.*)(=+)(.*)\",\"(.*){{(Listing|Faire|Voir|Acheter|Manger|Boire|Sortir|Se loger|Destination|Aller|Circuler)\\s(.*)\\s*$\",\"(.*)}}[.\\s]*$\",\"{{Dans\\|(.*)}}\\s*$\"]\n#               0                                1                                2                                                            3           4 \nRegSFr.extend([\"^(=+)(.*) \u00e0 (.*)(=+)\\s*$\",\"(.*){{ListeRegions(.*)\",\"(.*)region([0-9]+)=(.*)\",\"{{Avancement\\|statut=(\u00e9bauche|esquisse|utilisable|guide|\u00e9toile)\\|type=0}}(.*)\",\"(.*){{Climat(.*)\",\"(.*){{Repr\u00e9sentation diplomatique\"])\n#                         5                  6                        7                                 8                                9                       10\nRegSEn=[\"(.*)\\[\\[(Image|File):(.*)\\s*$\", \"(=+)(.*)(=+)(.*)\",\"(.*){{(listing|do|see|buy|eat|drink|sleep)\\s(.*)\\s*$\",\"(.*)}}[.\\s]*$\",\"{{IsPartOf\\|(.*)}}\\s*$\"]\n#               0                                1                                2                                 3               4 \nRegSEn.extend([\"^(=+)(.*) to (.*)(=+)\\s*$\",\"(.*){{Regionlist(.*)\",\"(.*)region(.*)name=(.*)\",\"{{(outline|usable|guide|stub|star)0}}(.*)\",\"(.*){{Climate(.*)\",\"(.*){{flag|(.*)}}(.*){{Listing(.*)\"])\n#                         5                  6                        7                                 8                                9                       10\n\n#Avancement\navFr=\"{{Avancement|statut=esquisse|type=0}}\\n\" \navEn=\"{{outline0}}\\n\"\n\n#Equivalence climat\nlistMoisFr=[\"jan\",\"fev\",\"mar\",\"avr\",\"mai\",\"jui\",\"jul\",\"aou\",\"sep\",\"oct\",\"nov\",\"dec\"]\nlistMoisEn=[\"jan\",\"feb\",\"mar\",\"apr\",\"may\",\"jun\",\"jul\",\"aug\",\"sep\",\"oct\",\"nov\",\"dec\"]\n\nlistClimatFr=[\"Climat\",\"description\"]\nlistClimatEn=[\"Climate\",\"description\"]\nfor mois in listMoisFr :\n\tlistClimatFr.append(\"tmin-\"+mois)\n\tlistClimatFr.append(\"tmax-\"+mois)\n\tlistClimatFr.append(\"prec-\"+mois)\nfor mois in listMoisEn :\n\tlistClimatEn.append(mois+\"low\")\n\tlistClimatEn.append(mois+\"high\")\n\tlistClimatEn.append(mois+\"precip\")\n\n\n# Trousse \u00e0 mots par langues\nListFr=(listTypeFr,listSectionFr,listImageFr,listListingDebFr,listListingFr,listItineraireFr,listDansFr,listMapDebFr,listMapFr,RegSFr,avFr,listClimatFr)\nListEn=(listTypeEn,listSectionEn,listImageEn,listListingDebEn,listListingEn,listItineraireEn,listDansEn,listMapDebEn,listMapEn,RegSEn,avEn,listClimatEn)\n#           0         1            2               3           4             5                6              7           8         9    10 \u00a011\n\nListingsSpecialFr={\"Villes\":\"Ville\",\"Autres destinations\":\"Destinations\",\"Aux environs\":\"Destinations\"}\n#lien langage\/trousse\nListLang ={\"fr\":ListFr, \"en\":ListEn}\n\n#Langue source et destination et contenu r\u00e9cup\u00e9rer\n\nsrc=ListEn\ndest=ListFr\nlang=\"en\"\ncontent=\"\"\nsection=\"\"\n# Pour r\u00e9cup\u00e9r\u00e9r le type de l'article (Ville,Itin\u00e9raire,Quartier,etc\u2026)\ndef recupTypeArticle() :\n\ttypeArticle = dest[0][0]\n\tlistRegex = list()\n\tfor mot in src[0] :\n\t\ts=src[9][8].replace(\"0\",mot)\n\t\tlistRegex.append(re.compile(s))\n\n\tbOk=True\n\tfor line in content:\n\t\tif (not bOk) :\n\t\t\tbreak\n\t\tfor i in range (len(listRegex)) :\n\t\t\tif listRegex[i].search(line) :\n\t\t\t\ttypeArticle=dest[0][i]\n\t\t\t\tbOk=False\n\t\t\t\tbreak\n\treturn typeArticle\n\t\n#Pour cr\u00e9er l'ent\u00eate \ndef creationEntete (typeArticle,titre) :\n\ts=\"\"\n\tif dest==ListFr : #\u00a0Si on traduit en fran\u00e7ais\n\t\ts=\"\"\"{{Banni\u00e8re page}}\n{{Info \"\"\"+typeArticle+\"\"\"\n| nom=\n| nom local=\n| r\u00e9gion=\n| image=\n| l\u00e9gende image=\n| rivi\u00e8re=\n| superficie=\n| population=\n| population agglom\u00e9ration=\n| ann\u00e9e population= \n| altitude=\n| latitude=\n| longitude=\n| zoom=\n| code postal=\n| indicatif=\n| adresse OT=\n| horaire OT=\n| t\u00e9l\u00e9phone OT=\n| num\u00e9ro gratuit OT=\n| email OT=\n| facebook OT=\n| twitter OT=\n| URL OT=\n| URL officiel=\n| URL touristique=\n}}\n\"\"\"\n\treturn s\n# Pour r\u00e9cup\u00e9rer les images (et les traduire)\ndef recupImage(line) :\n\ts=line\n\tfor i in range (len(src[2])) :\n\t\ts=s.replace(src[2][i],dest[2][i])\n\treturn s\n#Pour r\u00e9cup\u00e9rer les sections et sous-sections\ndef recupSection(line) :\n\ts=line\n\tfor i in range (len(src[1])) :\n\t\ts=s.replace(src[1][i],dest[1][i])\n\treturn s\n#Pour r\u00e9cup\u00e9rer les listings\ndef recupListing(line,debut)\t:\n\ts=line\n\tif debut :\n\t\tfor i in range (len(src[3])) :\n\t\t\ts=s.replace(src[3][i],dest[3][i])\n\t\t\t\t\t\t\n\tfor i in range (len(src[4])) :\n\t\ts=s.replace(src[4][i],dest[4][i])\n\treturn s\n\t\n#Pour r\u00e9cup\u00e9rer les sections d'\u00e9tapes\ndef recupItineraire(line) :\n\ts=line\n\tfor i in range (len(src[5])) :\n\t\t\ts=s.replace(src[5][i],dest[5][i])\n\treturn s\n\n#Pour r\u00e9cup\u00e9rer la cat\u00e9gorisation\ndef recupDans(line) :\n\ts=line\n\tfor i in range (len(src[6])) :\n\t\t\ts=s.replace(src[6][i],dest[6][i])\n\treturn s\n\n#Pour r\u00e9cup\u00e9rer les cartes avec r\u00e9gions\ndef recupMap(line,numMap) :\n\ts=line\n\tif numMap == 0 :\n\t\tfor i in range (len(src[7])) :\n\t\t\t\ts=s.replace(src[7][i],dest[7][i])\n\tnumPrec=str(numMap-1)\n\tsNumMap=str(numMap)\n\tfor i in range (len(src[8])):\n\t\tsrc[8][i]=src[8][i].replace(numPrec,sNumMap)\n\t\tdest[8][i]=dest[8][i].replace(numPrec,sNumMap)\n\tif numMap > 0 :\n\t\tfor i in range (len(src[8])) :\n\t\t\ts=s.replace(src[8][i],dest[8][i])\n\treturn s\ndef recupClimat(line) :\n\ts=line\n\tfor i in range (len(src[11])):\n\t\ts=s.replace(src[11][i],dest[11][i])\n\treturn s\n\n#Programme en lui m\u00eame\n\nparser = argparse.ArgumentParser()\nparser.add_argument('title',help=\"nom de la page \u00e0 convertir\" )\nparser.add_argument('--src',help=\"langage source : fr,en,\u2026 par d\u00e9fault fr \")\nparser.add_argument('--dest',help=\"langage destination : fr,en,\u2026 par d\u00e9fault en \")\nparser.add_argument('-d','--debug',action='store_true' ,help=\"mode debugage : r\u00e9cup\u00e9ration du fichier source en m\u00eame temps que le r\u00e9sultat\")\nparser.add_argument('-C','--nocomment',action='store_true' ,help=\"commentaires d\u00e9sactiv\u00e9 dans le r\u00e9sultat \")\n\nargs = parser.parse_args()\nbAv=False # Pour savoir si la banni\u00e8re d'avancement \u00e0 \u00e9t\u00e9 plac\u00e9\nresult=\"\" # Pou stock\u00e9 le resultat\n#arguments\ntitle=args.title\nif args.src and args.src.lower() in ListLang.keys() :\n\tsrc=ListLang[args.src.lower()]\n\tlang=args.src.lower()\nif args.dest and args.dest.lower() in ListLang.keys() :\n\tdest=ListLang[args.dest.lower()]\n\t\nurl=\"https:\/\/\"+lang+\".wikivoyage.org\/w\/index.php?title=\"+title+\"&action=raw\"\ncontent=urllib.urlopen(url).readlines()\n# on r\u00e9cup\u00e8re le type de l'article et on cr\u00e9e l'ent\u00eate\nTypeArticle=recupTypeArticle()\nresult        +=creationEntete(TypeArticle,title)\n#\u00a0les diff\u00e9rents regex\nregImg        =re.compile(src[9][0])\nregSection    =re.compile(src[9][1])\nregListing    =re.compile(src[9][2])\nregListingEnd =re.compile(src[9][3])\nregDans       =re.compile(src[9][4])\nregItineraire =re.compile(src[9][5])\nregMap        =re.compile(src[9][6])\nregNomRegion  =re.compile(src[9][7])\nregClimat     =re.compile(src[9][9])\nregDiplomat   =re.compile(src[9][10])\n#\u00a0On ouvre et on lit\ni=0\nnumMap=-1\nbClimat=False\nbListing=False\nfor line in content:\n\ti=i+1\n\tif numMap>-1 :\n\t\tif regNomRegion.search(line) :\n\t\t\tnumMap=numMap+1\n\t\tresult+=recupMap(line,numMap)\n\t\tif regListingEnd.search(line) :\n\t\t\tsNumMap=str(numMap)\n\t\t\tfor i in range (len(src[8])):\n\t\t\t\tsrc[8][i]=src[8][i].replace(sNumMap,\"0\")\n\t\t\t\tdest[8][i]=dest[8][i].replace(sNumMap,\"0\")\n\t\t\tnumMap=-1\n\tif bClimat or regClimat.search(line):\n\t\tresult+=recupClimat(line)\n\t\tbClimat=True\n\t\tif regListingEnd.search(line) :\n\t\t\tbClimat=False\n\telif bListing :\n\t\ts=recupListing(line,False)\n\t\tif regListingEnd.search(line) :\t\t\t\t\t\n\t\t\tbListing=False\n\t\t\tif not regListingEnd.search(s) :\n\t\t\t\ts+=\"}}\"\n\t\tresult+=s\n\telif regDiplomat.search(line) and dest==ListFr :\n\t\ts=\"* {{Repr\u00e9sentation diplomatique\"\n\t\tbListing=True\n\t\tresult+=s\n\telif regMap.search(line) :\n\t\tnumMap=0\n\t\tresult+=recupMap(line,numMap)\n\telif regItineraire.search(line) :\n\t\tresult+=recupItineraire(line)\n\telif regListing.search(line) :\n\t\ts=recupListing(line,True)\n\t\tif dest==ListFr and section in ListingsSpecialFr.keys() :\n\t\t\ts=s.replace('Listing',ListingsSpecialFr[section])\n\t\tresult+=s\n\t\tbListing=True\n\telif regImg.search(line) :\n\t\tresult+=recupImage(line)\n\telif regSection.search(line) :\n\t\ts=recupSection(line)\n\t\tif len(s)>3 and s[2] !=\"=\" :\n\t\t\tsection=s.replace(\"==\",\"\").replace(\"\\n\",\"\")\n\t\tresult+=s\n\telif regDans.search(line) :\n\t\ts=dest[10].replace(\"0\",TypeArticle.lower()) #avancement\n\t\tresult+=s\n\t\tbAv=True\n\t\tresult+=recupDans(line)\nif (not bAv) : # Si la banni\u00e8re avancement n'a toujour pas \u00e9t\u00e9 plac\u00e9\n\ts=dest[10].replace(\"0\",TypeArticle.lower())\n\tresult+=s\n#\u00a0On \u00e9crit les fichiers\ntitle=title.replace(\"\/\",\"-\")\ntitle=title.replace(\".\",\"-\")\nif args.nocomment is True :\n\tresult=re.sub(r'<!--(.*)(.|\\n)(.*)-->',r'\\2',result)\nwith open(\".\/\"+title+\".txt\", \"w\") as fichier:\n\tfichier.write(result)\nif args.debug is True :\n\twith open(\".\/\"+title+\"_src.txt\", \"w\") as fichier:\n\t\tfichier.writelines(content)\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python script that translates a Wikivoyage article from one language to another. The script takes the title of the article and the source and destination languages as input and generates a new article in the destination\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/python\n# -*- coding: utf-8 -*-\n#  transvoyage.py\n#  Version 0.3\n#  \n#  Copyright 2014 Gu\u00e9na\u00ebl Muller <contact@inkey-art.net>\n#  \n#  This program is free software; you can redistribute it and\/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation; either version 3 of the License, or\n#  (at your option) any later version.\n#  \n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#  \n#  You should have received a copy of the GNU General Public License\n#  along with this program; if not, write to the Free Software\n#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n#  MA 02110-1301, USA.\n# \n#TODO\n# - se conformer \u00e0 la PEP\u00a08\n# - commentaires et TODO bilingue.\n# - optimisations\n# -\ttraduction invers\u00e9 am\u00e9lior\u00e9\n# - nouveau langages\n# - debugage de certains regex et autres\n\n\nimport sys\nimport os\nimport subprocess \nimport re\nimport urllib\nimport argparse\n\n# traductions des types Articles\n\nlistTypeFr=('Ville','R\u00e9gion continentale','R\u00e9gion','Pays'   ,'Quartier','Itin\u00e9raire','Parc')\nlistTypeEn=('city' ,'continent'          ,'region','country','district','itinerary' ,'park')\n\n\n#Equivalences sections\nlistSectionFr=[\"Comprendre\",\"Aller\" ,\"Circuler\"  ,\"Voir\",\"Faire\",\"Acheter\",\"Manger\",\"Boire un verre \/ Sortir\",\"Se loger\",\"Aux environs\",\"Travailler\",\"Apprendre\",\"G\u00e9rer le Quotidien\",\"S\u00e9curit\u00e9\",\"Communiquer\"]\nlistSectionEn=[\"Understand\",\"Get in\",\"Get around\",\"See\" ,\"Do\"   ,\"Buy\"    ,\"Eat\"   ,\"Drink\"                  ,\"Sleep\"   ,\"Go next\",\"Work\"           ,\"Learn\"     ,\"Cope\"             ,\"Stay safe\", \"Connect\"   ]\n\nlistSectionFr.extend([\"Respecter\",\"Parler\",\"\u00c9l\u00e9ctricit\u00e9\"])\nlistSectionEn.extend([\"Respect\",\"Talk\",\"Electricity\"])\n\nlistSectionFr.extend([\"Se pr\u00e9parer\",\"\u00c9tapes\",\"Autres destinations\",\"Lire\",\"Douanes\",\"En taxi\",\"Sant\u00e9\",\"Monnaie\",\"Villes\",\"R\u00e9gions\",\"Quartiers\",\"Bureaux d'information touristique\"])\nlistSectionEn.extend([\"Prepare\",\"Route\",\"Other destinations\",\"Read\",\"Customs\",\"By taxi\",\"Stay healthy\",\"Currency\",\"Cities\",\"Regions\",\"Districts\",\"Tourist office\"])\n\nlistSectionFr.extend(['Histoire', 'Paysage', 'Flore et faune',\"Climat\",\"Randonn\u00e9e\",\"Droits d'acc\u00e8s\",\"Droits d'acc\u00e8s\",\"Activit\u00e9s\",\"M\u00e9t\u00e9o\",\"Nature\"])\nlistSectionEn.extend(['History', 'Landscape', 'Flora and fauna',\"Climate\",\"Hiking\",\"Fees\/permits\",\"Fees\/Permits\",\"Activities\",\"Weather\",\"Wildlife\"])\n\nlistSectionFr.extend(['\u00c0 pied', 'En train', 'En bus',\"En avion\",\"En ferry\",\"En bateau\",\"En voiture\",\"En v\u00e9lo\",\"En v\u00e9lo\",\"En v\u00e9lo\",\"En motoneige\",\"En stop\"])\nlistSectionEn.extend(['By foot', 'By train', 'By bus',\"By plane\",\"By ferry\",\"By boat\",\"By car\",\"By bicycle\",\"By cycle\",\"By bike\",\"By snowmobile\",\"By thumb\"])\n\nlistSectionFr.extend(['Bon march\u00e9', 'Prix moyen','Prix moyen', 'Luxe','H\u00f4tel','Logements','Dans la nature'])\nlistSectionEn.extend(['Budget', 'Mid-range','Mid range', 'Splurge','Hotel','Lodging','Backcountry'])\n\n#\u00a0\u00c9quivalence image\n\nlistImageFr=[\"[[Fichier:\",\"[[Fichier:\",\"gauche\",\"droite\",\"vignette\",\"vignette\"]\nlistImageEn=[\"[[Image:\",\"[[File:\",\"left\",\"right\",\"thumbnail\",\"thumb\"]\n\n#Equivalence Listings\n\n#titre listings\nlistListingDebFr=[\"Listing\",\"Faire\",\"Voir\",\"Acheter\",\"Manger\",\"Sortir\",\"Se loger\",\"Destination\",\"Aller\",\"Circuler\"]\nlistListingDebEn=[\"listing\",\"do\" ,\"see\",\"buy\",\"eat\",\"drink\",\"sleep\",\"listing\",\"listing\",\"listing\"]\n\n#param\u00e8tres\nlistListingFr=[\"nom=\",\"adresse=\",\"t\u00e9l\u00e9phone\",\"latitude=\",\"longitude=\",\"email=\",\"direction=\",\"num\u00e9ro gratuit=\",\"fax=\",\"prix=\",\"description=<!-- \",\"-->}}\",\"arriv\u00e9e=\",\"d\u00e9part=\",\"horaire=\"]\nlistListingEn=[\"name=\",\"address=\" ,\"phone\",\"lat=\",\"long=\",\"email=\",\"directions=\",\"tollfree=\",\"fax=\",\"price=\",\"content=\",\"}}\",\"checkin=\",\"checkout=\",\"hours=\"]\n\n#Equivalence Itineraires\nlistItineraireFr=[\"Jour \",\": De\",\" \u00e0 \"]\nlistItineraireEn=[\"Day \",\":\",\" to \"]\n\n#Equivalence Dans\nlistDansFr=[\"Dans\"]\nlistDansEn=[\"IsPartOf\"]\n\n#Equivalence Carte\n\n#Debut\nlistMapDebFr=[\"ListeRegions\",\"carte=\",\"taillecarte=\"]\nlistMapDebEn=[\"Regionlist\",\"regionmap=\",\"regionmapsize=\"]\n\n#Param\u00e8tres\nlistMapFr=[\"nomregion0=\",\"couleurregion0=\",\"elementsregion0=\",\"descriptionregion0=\"]\nlistMapEn=[\"region0name=\",\"region0color=\",\"region0items=\",\"region0description=\"]\n\n#\u00a0Tout les regex en string par langue de Destination\nRegSFr=[\"(.*)\\[\\[(Image|Fichier):(.*)\\s*$\",\"(=+)(.*)(=+)(.*)\",\"(.*){{(Listing|Faire|Voir|Acheter|Manger|Boire|Sortir|Se loger|Destination|Aller|Circuler)\\s(.*)\\s*$\",\"(.*)}}[.\\s]*$\",\"{{Dans\\|(.*)}}\\s*$\"]\n#               0                                1                                2                                                            3           4 \nRegSFr.extend([\"^(=+)(.*) \u00e0 (.*)(=+)\\s*$\",\"(.*){{ListeRegions(.*)\",\"(.*)region([0-9]+)=(.*)\",\"{{Avancement\\|statut=(\u00e9bauche|esquisse|utilisable|guide|\u00e9toile)\\|type=0}}(.*)\",\"(.*){{Climat(.*)\",\"(.*){{Repr\u00e9sentation diplomatique\"])\n#                         5                  6                        7                                 8                                9                       10\nRegSEn=[\"(.*)\\[\\[(Image|File):(.*)\\s*$\", \"(=+)(.*)(=+)(.*)\",\"(.*){{(listing|do|see|buy|eat|drink|sleep)\\s(.*)\\s*$\",\"(.*)}}[.\\s]*$\",\"{{IsPartOf\\|(.*)}}\\s*$\"]\n#               0                                1                                2                                 3               4 \nRegSEn.extend([\"^(=+)(.*) to (.*)(=+)\\s*$\",\"(.*){{Regionlist(.*)\",\"(.*)region(.*)name=(.*)\",\"{{(outline|usable|guide|stub|star)0}}(.*)\",\"(.*){{Climate(.*)\",\"(.*){{flag|(.*)}}(.*){{Listing(.*)\"])\n#                         5                  6                        7                                 8                                9                       10\n\n#Avancement\navFr=\"{{Avancement|statut=esquisse|type=0}}\\n\" \navEn=\"{{outline0}}\\n\"\n\n#Equivalence climat\nlistMoisFr=[\"jan\",\"fev\",\"mar\",\"avr\",\"mai\",\"jui\",\"jul\",\"aou\",\"sep\",\"oct\",\"nov\",\"dec\"]\nlistMoisEn=[\"jan\",\"feb\",\"mar\",\"apr\",\"may\",\"jun\",\"jul\",\"aug\",\"sep\",\"oct\",\"nov\",\"dec\"]\n\nlistClimatFr=[\"Climat\",\"description\"]\nlistClimatEn=[\"Climate\",\"description\"]\nfor mois in listMoisFr :\n\tlistClimatFr.append(\"tmin-\"+mois)\n\tlistClimatFr.append(\"tmax-\"+mois)\n\tlistClimatFr.append(\"prec-\"+mois)\nfor mois in listMoisEn :\n\tlistClimatEn.append(mois+\"low\")\n\tlistClimatEn.append(mois+\"high\")\n\tlistClimatEn.append(mois+\"precip\")\n\n\n# Trousse \u00e0 mots par langues\nListFr=(listTypeFr,listSectionFr,listImageFr,listListingDebFr,listListingFr,listItineraireFr,listDansFr,listMapDebFr,listMapFr,RegSFr,avFr,listClimatFr)\nListEn=(listTypeEn,listSectionEn,listImageEn,listListingDebEn,listListingEn,listItineraireEn,listDansEn,listMapDebEn,listMapEn,RegSEn,avEn,listClimatEn)\n#           0         1            2               3           4             5                6              7           8         9    10 \u00a011\n\nListingsSpecialFr={\"Villes\":\"Ville\",\"Autres destinations\":\"Destinations\",\"Aux environs\":\"Destinations\"}\n#lien langage\/trousse\nListLang ={\"fr\":ListFr, \"en\":ListEn}\n\n#Langue source et destination et contenu r\u00e9cup\u00e9rer\n\nsrc=ListEn\ndest=ListFr\nlang=\"en\"\ncontent=\"\"\nsection=\"\"\n# Pour r\u00e9cup\u00e9r\u00e9r le type de l'article (Ville,Itin\u00e9raire,Quartier,etc\u2026)\ndef recupTypeArticle() :\n\ttypeArticle = dest[0][0]\n\tlistRegex = list()\n\tfor mot in src[0] :\n\t\ts=src[9][8].replace(\"0\",mot)\n\t\tlistRegex.append(re.compile(s))\n\n\tbOk=True\n\tfor line in content:\n\t\tif (not bOk) :\n\t\t\tbreak\n\t\tfor i in range (len(listRegex)) :\n\t\t\tif listRegex[i].search(line) :\n\t\t\t\ttypeArticle=dest[0][i]\n\t\t\t\tbOk=False\n\t\t\t\tbreak\n\treturn typeArticle\n\t\n#Pour cr\u00e9er l'ent\u00eate \ndef creationEntete (typeArticle,titre) :\n\ts=\"\"\n\tif dest==ListFr : #\u00a0Si on traduit en fran\u00e7ais\n\t\ts=\"\"\"{{Banni\u00e8re page}}\n{{Info \"\"\"+typeArticle+\"\"\"\n| nom=\n| nom local=\n| r\u00e9gion=\n| image=\n| l\u00e9gende image=\n| rivi\u00e8re=\n| superficie=\n| population=\n| population agglom\u00e9ration=\n| ann\u00e9e population= \n| altitude=\n| latitude=\n| longitude=\n| zoom=\n| code postal=\n| indicatif=\n| adresse OT=\n| horaire OT=\n| t\u00e9l\u00e9phone OT=\n| num\u00e9ro gratuit OT=\n| email OT=\n| facebook OT=\n| twitter OT=\n| URL OT=\n| URL officiel=\n| URL touristique=\n}}\n\"\"\"\n\treturn s\n# Pour r\u00e9cup\u00e9rer les images (et les traduire)\ndef recupImage(line) :\n\ts=line\n\tfor i in range (len(src[2])) :\n\t\ts=s.replace(src[2][i],dest[2][i])\n\treturn s\n#Pour r\u00e9cup\u00e9rer les sections et sous-sections\ndef recupSection(line) :\n\ts=line\n\tfor i in range (len(src[1])) :\n\t\ts=s.replace(src[1][i],dest[1][i])\n\treturn s\n#Pour r\u00e9cup\u00e9rer les listings\ndef recupListing(line,debut)\t:\n\ts=line\n\tif debut :\n\t\tfor i in range (len(src[3])) :\n\t\t\ts=s.replace(src[3][i],dest[3][i])\n\t\t\t\t\t\t\n\tfor i in range (len(src[4])) :\n\t\ts=s.replace(src[4][i],dest[4][i])\n\treturn s\n\t\n#Pour r\u00e9cup\u00e9rer les sections d'\u00e9tapes\ndef recupItineraire(line) :\n\ts=line\n\tfor i in range (len(src[5])) :\n\t\t\ts=s.replace(src[5][i],dest[5][i])\n\treturn s\n\n#Pour r\u00e9cup\u00e9rer la cat\u00e9gorisation\ndef recupDans(line) :\n\ts=line\n\tfor i in range (len(src[6])) :\n\t\t\ts=s.replace(src[6][i],dest[6][i])\n\treturn s\n\n#Pour r\u00e9cup\u00e9rer les cartes avec r\u00e9gions\ndef recupMap(line,numMap) :\n\ts=line\n\tif numMap == 0 :\n\t\tfor i in range (len(src[7])) :\n\t\t\t\ts=s.replace(src[7][i],dest[7][i])\n\tnumPrec=str(numMap-1)\n\tsNumMap=str(numMap)\n\tfor i in range (len(src[8])):\n\t\tsrc[8][i]=src[8][i].replace(numPrec,sNumMap)\n\t\tdest[8][i]=dest[8][i].replace(numPrec,sNumMap)\n\tif numMap > 0 :\n\t\tfor i in range (len(src[8])) :\n\t\t\ts=s.replace(src[8][i],dest[8][i])\n\treturn s\ndef recupClimat(line) :\n\ts=line\n\tfor i in range (len(src[11])):\n\t\ts=s.replace(src[11][i],dest[11][i])\n\treturn s\n\n#Programme en lui m\u00eame\n\nparser = argparse.ArgumentParser()\nparser.add_argument('title',help=\"nom de la page \u00e0 convertir\" )\nparser.add_argument('--src',help=\"langage source : fr,en,\u2026 par d\u00e9fault fr \")\nparser.add_argument('--dest',help=\"langage destination : fr,en,\u2026 par d\u00e9fault en \")\nparser.add_argument('-d','--debug',action='store_true' ,help=\"mode debugage : r\u00e9cup\u00e9ration du fichier source en m\u00eame temps que le r\u00e9sultat\")\nparser.add_argument('-C','--nocomment',action='store_true' ,help=\"commentaires d\u00e9sactiv\u00e9 dans le r\u00e9sultat \")\n\nargs = parser.parse_args()\nbAv=False # Pour savoir si la banni\u00e8re d'avancement \u00e0 \u00e9t\u00e9 plac\u00e9\nresult=\"\" # Pou stock\u00e9 le resultat\n#arguments\ntitle=args.title\nif args.src and args.src.lower() in ListLang.keys() :\n\tsrc=ListLang[args.src.lower()]\n\tlang=args.src.lower()\nif args.dest and args.dest.lower() in ListLang.keys() :\n\tdest=ListLang[args.dest.lower()]\n\t\nurl=\"https:\/\/\"+lang+\".wikivoyage.org\/w\/index.php?title=\"+title+\"&action=raw\"\ncontent=urllib.urlopen(url).readlines()\n# on r\u00e9cup\u00e8re le type de l'article et on cr\u00e9e l'ent\u00eate\nTypeArticle=recupTypeArticle()\nresult        +=creationEntete(TypeArticle,title)\n#\u00a0les diff\u00e9rents regex\nregImg        =re.compile(src[9][0])\nregSection    =re.compile(src[9][1])\nregListing    =re.compile(src[9][2])\nregListingEnd =re.compile(src[9][3])\nregDans       =re.compile(src[9][4])\nregItineraire =re.compile(src[9][5])\nregMap        =re.compile(src[9][6])\nregNomRegion  =re.compile(src[9][7])\nregClimat     =re.compile(src[9][9])\nregDiplomat   =re.compile(src[9][10])\n#\u00a0On ouvre et on lit\ni=0\nnumMap=-1\nbClimat=False\nbListing=False\nfor line in content:\n\ti=i+1\n\tif numMap>-1 :\n\t\tif regNomRegion.search(line) :\n\t\t\tnumMap=numMap+1\n\t\tresult+=recupMap(line,numMap)\n\t\tif regListingEnd.search(line) :\n\t\t\tsNumMap=str(numMap)\n\t\t\tfor i in range (len(src[8])):\n\t\t\t\tsrc[8][i]=src[8][i].replace(sNumMap,\"0\")\n\t\t\t\tdest[8][i]=dest[8][i].replace(sNumMap,\"0\")\n\t\t\tnumMap=-1\n\tif bClimat or regClimat.search(line):\n\t\tresult+=recupClimat(line)\n\t\tbClimat=True\n\t\tif regListingEnd.search(line) :\n\t\t\tbClimat=False\n\telif bListing :\n\t\ts=recupListing(line,False)\n\t\tif regListingEnd.search(line) :\t\t\t\t\t\n\t\t\tbListing=False\n\t\t\tif not regListingEnd.search(s) :\n\t\t\t\ts+=\"}}\"\n\t\tresult+=s\n\telif regDiplomat.search(line) and dest==ListFr :\n\t\ts=\"* {{Repr\u00e9sentation diplomatique\"\n\t\tbListing=True\n\t\tresult+=s\n\telif regMap.search(line) :\n\t\tnumMap=0\n\t\tresult+=recupMap(line,numMap)\n\telif regItineraire.search(line) :\n\t\tresult+=recupItineraire(line)\n\telif regListing.search(line) :\n\t\ts=recupListing(line,True)\n\t\tif dest==ListFr and section in ListingsSpecialFr.keys() :\n\t\t\ts=s.replace('Listing',ListingsSpecialFr[section])\n\t\tresult+=s\n\t\tbListing=True\n\telif regImg.search(line) :\n\t\tresult+=recupImage(line)\n\telif regSection.search(line) :\n\t\ts=recupSection(line)\n\t\tif len(s)>3 and s[2] !=\"=\" :\n\t\t\tsection=s.replace(\"==\",\"\").replace(\"\\n\",\"\")\n\t\tresult+=s\n\telif regDans.search(line) :\n\t\ts=dest[10].replace(\"0\",TypeArticle.lower()) #avancement\n\t\tresult+=s\n\t\tbAv=True\n\t\tresult+=recupDans(line)\nif (not bAv) : # Si la banni\u00e8re avancement n'a toujour pas \u00e9t\u00e9 plac\u00e9\n\ts=dest[10].replace(\"0\",TypeArticle.lower())\n\tresult+=s\n#\u00a0On \u00e9crit les fichiers\ntitle=title.replace(\"\/\",\"-\")\ntitle=title.replace(\".\",\"-\")\nif args.nocomment is True :\n\tresult=re.sub(r'<!--(.*)(.|\\n)(.*)-->',r'\\2',result)\nwith open(\".\/\"+title+\".txt\", \"w\") as fichier:\n\tfichier.write(result)\nif args.debug is True :\n\twith open(\".\/\"+title+\"_src.txt\", \"w\") as fichier:\n\t\tfichier.writelines(content)\n"}
{"instruction":"Create a program in Python that performs basic functions on a linked list.","input":"","output":"class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    # Function to append a new node at the end\n    def append(self, new_data):\n        new_node = Node(new_data)\n\n        #Check if the linked list is empty\n        if self.head is None:\n            self.head =  new_node\n            return\n\n        # Otherwise, traverse till the last node\n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n\n    # Function to insert a node at a specific position\n    def insert(self, prev_node, new_data):\n        #Check if the given prev_node is valid\n        if prev_node is None:\n            return\n\n        new_node = Node(new_data)\n        new_node.next = prev_node.next\n        prev_node.next = new_node\n\n    # Function to delete a node given the value\n    def delete(self, data):\n        if self.head is None:\n            return\n\n        current = self.head\n        # Special case for head node\n        if current and current.data == data:\n            self.head = current.next\n            current = None\n            return\n\n        # Also traverse the list to find the node we want to delete\n        while current and current.data != data:\n            prev_node = current\n            current = current.next\n        if current is None:\n            return\n        # Unlink the node from the list\n        prev_node.next = current.next\n        current = None","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that performs basic functions on a linked list.\n\n### Input:\n\n\n### Output:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    # Function to append a new node at the end\n    def append(self, new_data):\n        new_node = Node(new_data)\n\n        #Check if the linked list is empty\n        if self.head is None:\n            self.head =  new_node\n            return\n\n        # Otherwise, traverse till the last node\n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n\n    # Function to insert a node at a specific position\n    def insert(self, prev_node, new_data):\n        #Check if the given prev_node is valid\n        if prev_node is None:\n            return\n\n        new_node = Node(new_data)\n        new_node.next = prev_node.next\n        prev_node.next = new_node\n\n    # Function to delete a node given the value\n    def delete(self, data):\n        if self.head is None:\n            return\n\n        current = self.head\n        # Special case for head node\n        if current and current.data == data:\n            self.head = current.next\n            current = None\n            return\n\n        # Also traverse the list to find the node we want to delete\n        while current and current.data != data:\n            prev_node = current\n            current = current.next\n        if current is None:\n            return\n        # Unlink the node from the list\n        prev_node.next = current.next\n        current = None"}
{"instruction":"Write a function in Python that finds all possible substrings of a string and prints them.","input":"String =  \"Hello World\"","output":"def printSubstrings(s): \n    n = len(s) \n      \n    for i in range(n):\n        for j in range(i+1, n+1):\n            print(s[i:j])\n  \n# Driver code \ns = \"Hello World\"\nprintSubstrings(s)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that finds all possible substrings of a string and prints them.\n\n### Input:\nString =  \"Hello World\"\n\n### Output:\ndef printSubstrings(s): \n    n = len(s) \n      \n    for i in range(n):\n        for j in range(i+1, n+1):\n            print(s[i:j])\n  \n# Driver code \ns = \"Hello World\"\nprintSubstrings(s)"}
{"instruction":"Write a python program to validate internet URLs.","input":"Not applicable","output":"import re\n\ndef is_valid_url(url):\n regex = re.compile(\n r'^(?:http|ftp)s?:\/\/' # http:\/\/ or https:\/\/\n r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' # domain...\n r'localhost|' # localhost...\n r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n r'(?::\\d+)?' # optional port\n r'(?:\/?|[\/?]\\S+)$', re.IGNORECASE)\n \n return url is not None and regex.search(url)\n\nprint(is_valid_url('https:\/\/www.google.com')) # Output: True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to validate internet URLs.\n\n### Input:\nNot applicable\n\n### Output:\nimport re\n\ndef is_valid_url(url):\n regex = re.compile(\n r'^(?:http|ftp)s?:\/\/' # http:\/\/ or https:\/\/\n r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' # domain...\n r'localhost|' # localhost...\n r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n r'(?::\\d+)?' # optional port\n r'(?:\/?|[\/?]\\S+)$', re.IGNORECASE)\n \n return url is not None and regex.search(url)\n\nprint(is_valid_url('https:\/\/www.google.com')) # Output: True"}
{"instruction":"Develop a program in Python to delete a directory and all its content.","input":"","output":"import os, shutil\n\ndef delete_directory(path_to_dir):\n    # check if the path is a directory\n    if os.path.isdir(path_to_dir):\n        # delete the directory and all its content\n        shutil.rmtree(path_to_dir)\n        # print a message\n        print('The directory and all its content successfully deleted!')\n    else:\n        # if path is not a directory\n        print('ERROR: The path ' + path_to_dir + ' does not exist')\n\npath_to_dir = 'test_dir'\ndelete_directory(path_to_dir)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python to delete a directory and all its content.\n\n### Input:\n\n\n### Output:\nimport os, shutil\n\ndef delete_directory(path_to_dir):\n    # check if the path is a directory\n    if os.path.isdir(path_to_dir):\n        # delete the directory and all its content\n        shutil.rmtree(path_to_dir)\n        # print a message\n        print('The directory and all its content successfully deleted!')\n    else:\n        # if path is not a directory\n        print('ERROR: The path ' + path_to_dir + ' does not exist')\n\npath_to_dir = 'test_dir'\ndelete_directory(path_to_dir)"}
{"instruction":"Generate a Python program to find the most frequent number in a given array","input":"arr = [10, 8, 8, 9, 10, 11, 12, 12, 11]","output":"# find the most frequent number in a given array\ndef get_most_frequent(arr):\n    freq_map = dict()\n    \n    # build frequency map\n    for num in arr:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n    \n    # find the most frequent number\n    max_freq = -1\n    most_frequent_num = 0\n    for key, value in freq_map.items():\n        if value > max_freq:\n            max_freq = value\n            most_frequent_num = key\n    \n    return most_frequent_num\n\n# Test\narr = [10, 8, 8, 9, 10, 11, 12, 12, 11]\nmost_frequent_num = get_most_frequent(arr)\nprint(most_frequent_num) # Output: 11","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to find the most frequent number in a given array\n\n### Input:\narr = [10, 8, 8, 9, 10, 11, 12, 12, 11]\n\n### Output:\n# find the most frequent number in a given array\ndef get_most_frequent(arr):\n    freq_map = dict()\n    \n    # build frequency map\n    for num in arr:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n    \n    # find the most frequent number\n    max_freq = -1\n    most_frequent_num = 0\n    for key, value in freq_map.items():\n        if value > max_freq:\n            max_freq = value\n            most_frequent_num = key\n    \n    return most_frequent_num\n\n# Test\narr = [10, 8, 8, 9, 10, 11, 12, 12, 11]\nmost_frequent_num = get_most_frequent(arr)\nprint(most_frequent_num) # Output: 11"}
{"instruction":"Use a regular expression to find all emails in a given string in Python.","input":"myString = \"my name is Joe and my email is joe@example.com\"","output":"import re \n\npattern = \"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\"\n\nresult = re.findall(pattern, myString)\n\nprint(result) # Output will be [\"joe@example.com\"]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse a regular expression to find all emails in a given string in Python.\n\n### Input:\nmyString = \"my name is Joe and my email is joe@example.com\"\n\n### Output:\nimport re \n\npattern = \"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\"\n\nresult = re.findall(pattern, myString)\n\nprint(result) # Output will be [\"joe@example.com\"]"}
{"instruction":"Create an expression parser in Python to evaluate basic mathematical expressions.","input":"","output":"# Assume input is a valid mathematical expression with no syntax errors \n\ndef expression_parser(expression): \n    tokens = expression.split() \n    stack = [] \n  \n    for token in tokens: \n        if token == '+' or token == '*' or token == '\/': \n            a = stack.pop() \n            b = stack.pop() \n            if token == '+': \n                c = b + a \n            elif token == '*': \n                c = b * a \n            else: \n                c = b \/ a \n            stack.append(c) \n        else: \n            stack.append(int(token)) \n    return stack.pop()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an expression parser in Python to evaluate basic mathematical expressions.\n\n### Input:\n\n\n### Output:\n# Assume input is a valid mathematical expression with no syntax errors \n\ndef expression_parser(expression): \n    tokens = expression.split() \n    stack = [] \n  \n    for token in tokens: \n        if token == '+' or token == '*' or token == '\/': \n            a = stack.pop() \n            b = stack.pop() \n            if token == '+': \n                c = b + a \n            elif token == '*': \n                c = b * a \n            else: \n                c = b \/ a \n            stack.append(c) \n        else: \n            stack.append(int(token)) \n    return stack.pop()"}
{"instruction":"Write a python program to verify if the given DNA strand is a palindrome or not.","input":"","output":"def is_palindrome_dna(dna):\n    # Step 1: Extract the complementary strand by replacing each nucleotide with its complement in the strand \n    complement = \"\"\n    for letter in dna:\n        if letter == 'A':\n            complement += 'T'\n        elif letter == 'C':\n            complement += 'G'\n        elif letter == 'G':\n            complement += 'C'\n        elif letter == 'T':\n            complement += 'A'\n        else:\n            print(\"Invalid nucleotide detected\")\n    \n    # Step 2: Reverse the strand and compare it to its complementary strand\n    reverse = complement[::-1]\n    return reverse == dna\n\nprint(is_palindrome_dna(\"ATGCTATCG\")) # prints True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to verify if the given DNA strand is a palindrome or not.\n\n### Input:\n\n\n### Output:\ndef is_palindrome_dna(dna):\n    # Step 1: Extract the complementary strand by replacing each nucleotide with its complement in the strand \n    complement = \"\"\n    for letter in dna:\n        if letter == 'A':\n            complement += 'T'\n        elif letter == 'C':\n            complement += 'G'\n        elif letter == 'G':\n            complement += 'C'\n        elif letter == 'T':\n            complement += 'A'\n        else:\n            print(\"Invalid nucleotide detected\")\n    \n    # Step 2: Reverse the strand and compare it to its complementary strand\n    reverse = complement[::-1]\n    return reverse == dna\n\nprint(is_palindrome_dna(\"ATGCTATCG\")) # prints True"}
{"instruction":"Using Python, create a program to classify numbers as positive, negative or zero according to user input","input":"","output":"def classify(num):\n if num > 0:\n return \"positive\"\n elif num < 0:\n return \"negative\"\n else:\n return \"zero\"\n\nn = int(input(\"Please enter a number: \"))\nresult = classify(n)\nprint(result) # Prints \"positive\" if n is positive, \"negative\" if n is negative and \"zero\" if n is zero","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, create a program to classify numbers as positive, negative or zero according to user input\n\n### Input:\n\n\n### Output:\ndef classify(num):\n if num > 0:\n return \"positive\"\n elif num < 0:\n return \"negative\"\n else:\n return \"zero\"\n\nn = int(input(\"Please enter a number: \"))\nresult = classify(n)\nprint(result) # Prints \"positive\" if n is positive, \"negative\" if n is negative and \"zero\" if n is zero"}
{"instruction":"The given code is a Python class named \"DepsGraphBuilder\" that is responsible for computing the dependencies graph DepsGraph. To use it, create an instance of the class and call the \"load_graph\" method with a root node, check_updates, update, remotes, and processed_profile as parameters to load the dependencies graph. To extend build requires, call the \"extend_build_requires\" method with a graph, node, build_requires_refs, check_updates, update, remotes, and processed_profile as parameters. The class also has other methods for resolving ranges, handling requirements, configuring nodes, and creating new nodes.","input":"","output":"import time\nfrom collections import OrderedDict\n\nfrom conans.client.graph.graph import DepsGraph, Node, RECIPE_EDITABLE\nfrom conans.errors import (ConanException, ConanExceptionInUserConanfileMethod,\n                           conanfile_exception_formatter)\nfrom conans.model.conan_file import get_env_context_manager\nfrom conans.model.ref import ConanFileReference\nfrom conans.model.requires import Requirements, Requirement\nfrom conans.util.log import logger\n\n\nclass DepsGraphBuilder(object):\n    \"\"\" Responsible for computing the dependencies graph DepsGraph\n    \"\"\"\n    def __init__(self, proxy, output, loader, resolver, recorder):\n        self._proxy = proxy\n        self._output = output\n        self._loader = loader\n        self._resolver = resolver\n        self._recorder = recorder\n\n    def load_graph(self, root_node, check_updates, update, remotes, processed_profile):\n        check_updates = check_updates or update\n        dep_graph = DepsGraph()\n        # compute the conanfile entry point for this dependency graph\n        name = root_node.name\n        root_node.public_closure = OrderedDict([(name, root_node)])\n        root_node.public_deps = {name: root_node}\n        root_node.ancestors = set()\n        dep_graph.add_node(root_node)\n\n        # enter recursive computation\n        t1 = time.time()\n        self._load_deps(dep_graph, root_node, Requirements(), None, None,\n                        check_updates, update, remotes,\n                        processed_profile)\n        logger.debug(\"GRAPH: Time to load deps %s\" % (time.time() - t1))\n        return dep_graph\n\n    def extend_build_requires(self, graph, node, build_requires_refs, check_updates, update,\n                              remotes, processed_profile):\n\n        # The options that will be defined in the node will be the real options values that have\n        # been already propagated downstream from the dependency graph. This will override any\n        # other possible option in the build_requires dependency graph. This means that in theory\n        # an option conflict while expanding the build_requires is impossible\n        node.conanfile.build_requires_options.clear_unscoped_options()\n        new_options = node.conanfile.build_requires_options._reqs_options\n        new_reqs = Requirements()\n\n        conanfile = node.conanfile\n        scope = conanfile.display_name\n        requires = [Requirement(ref) for ref in build_requires_refs]\n        self._resolve_ranges(graph, requires, scope, update, remotes)\n\n        for require in requires:\n            name = require.ref.name\n            require.build_require = True\n            self._handle_require(name, node, require, graph, check_updates, update,\n                                 remotes, processed_profile, new_reqs, new_options)\n\n        new_nodes = set(n for n in graph.nodes if n.package_id is None)\n        # This is to make sure that build_requires have precedence over the normal requires\n        ordered_closure = list(node.public_closure.items())\n        ordered_closure.sort(key=lambda x: x[1] not in new_nodes)\n        node.public_closure = OrderedDict(ordered_closure)\n\n        subgraph = DepsGraph()\n        subgraph.aliased = graph.aliased\n        subgraph.evaluated = graph.evaluated\n        subgraph.nodes = new_nodes\n        for n in subgraph.nodes:\n            n.build_require = True\n\n        return subgraph\n\n    def _resolve_ranges(self, graph, requires, consumer, update, remotes):\n        for require in requires:\n            self._resolver.resolve(require, consumer, update, remotes)\n            # if the range is resolved, check if it is an alias\n            alias = graph.aliased.get(require.ref)\n            if alias:\n                require.ref = alias\n\n    def _resolve_deps(self, graph, node, update, remote_name):\n        # Resolve possible version ranges of the current node requirements\n        # new_reqs is a shallow copy of what is propagated upstream, so changes done by the\n        # RangeResolver are also done in new_reqs, and then propagated!\n        conanfile = node.conanfile\n        scope = conanfile.display_name\n        self._resolve_ranges(graph, conanfile.requires.values(), scope, update, remote_name)\n\n        if not hasattr(conanfile, \"_conan_evaluated_requires\"):\n            conanfile._conan_evaluated_requires = conanfile.requires.copy()\n        elif conanfile.requires != conanfile._conan_evaluated_requires:\n            raise ConanException(\"%s: Incompatible requirements obtained in different \"\n                                 \"evaluations of 'requirements'\\n\"\n                                 \"    Previous requirements: %s\\n\"\n                                 \"    New requirements: %s\"\n                                 % (scope, list(conanfile._conan_evaluated_requires.values()),\n                                    list(conanfile.requires.values())))\n\n    def _load_deps(self, dep_graph, node, down_reqs, down_ref, down_options,\n                   check_updates, update, remotes, processed_profile):\n        \"\"\" expands the dependencies of the node, recursively\n\n        param node: Node object to be expanded in this step\n        down_reqs: the Requirements as coming from downstream, which can overwrite current\n                    values\n        param down_ref: ConanFileReference of who is depending on current node for this expansion\n        \"\"\"\n        # basic node configuration: calling configure() and requirements()\n        new_reqs, new_options = self._config_node(dep_graph, node, down_reqs, down_ref, down_options)\n\n        # if there are version-ranges, resolve them before expanding each of the requirements\n        self._resolve_deps(dep_graph, node, update, remotes)\n\n        # Expand each one of the current requirements\n        for name, require in node.conanfile.requires.items():\n            if require.override:\n                continue\n            self._handle_require(name, node, require, dep_graph, check_updates, update,\n                                 remotes, processed_profile, new_reqs, new_options)\n\n    def _handle_require(self, name, node, require, dep_graph, check_updates, update,\n                        remotes, processed_profile, new_reqs, new_options):\n        # Handle a requirement of a node. There are 2 possibilities\n        #    node -(require)-> new_node (creates a new node in the graph)\n        #    node -(require)-> previous (creates a diamond with a previously existing node)\n\n        # If the required is found in the node ancestors a loop is being closed\n        # TODO: allow bootstrapping, use references instead of names\n        if name in node.ancestors or name == node.name:\n            raise ConanException(\"Loop detected: '%s' requires '%s' which is an ancestor too\"\n                                 % (node.ref, require.ref))\n\n        # If the requirement is found in the node public dependencies, it is a diamond\n        previous = node.public_deps.get(name)\n        previous_closure = node.public_closure.get(name)\n        # build_requires and private will create a new node if it is not in the current closure\n        if not previous or ((require.build_require or require.private) and not previous_closure):\n            # new node, must be added and expanded (node -> new_node)\n            new_node = self._create_new_node(node, dep_graph, require, name, check_updates, update,\n                                             remotes, processed_profile)\n\n            # The closure of a new node starts with just itself\n            new_node.public_closure = OrderedDict([(new_node.ref.name, new_node)])\n            # The new created node is connected to the parent one\n            node.connect_closure(new_node)\n\n            if require.private or require.build_require:\n                # If the requirement is private (or build_require), a new public_deps is defined\n                # the new_node doesn't propagate downstream the \"node\" consumer, so its public_deps\n                # will be a copy of the node.public_closure, i.e. it can only cause conflicts in the\n                # new_node.public_closure.\n                new_node.public_deps = node.public_closure.copy()\n                new_node.public_deps[name] = new_node\n            else:\n                # Normal requires propagate and can conflict with the parent \"node.public_deps\" too\n                new_node.public_deps = node.public_deps.copy()\n                new_node.public_deps[name] = new_node\n\n                # All the dependents of \"node\" are also connected now to \"new_node\"\n                for dep_node in node.inverse_closure:\n                    dep_node.connect_closure(new_node)\n\n            # RECURSION, keep expanding (depth-first) the new node\n            self._load_deps(dep_graph, new_node, new_reqs, node.ref, new_options, check_updates,\n                            update, remotes, processed_profile)\n        else:  # a public node already exist with this name\n            # This is closing a diamond, the node already exists and is reachable\n            alias_ref = dep_graph.aliased.get(require.ref)\n            # Necessary to make sure that it is pointing to the correct aliased\n            if alias_ref:\n                require.ref = alias_ref\n            # As we are closing a diamond, there can be conflicts. This will raise if conflicts\n            self._conflicting_references(previous.ref, require.ref, node.ref)\n\n            # Add current ancestors to the previous node and upstream deps\n            union = node.ancestors.union([node.name])\n            for n in previous.public_closure.values():\n                n.ancestors.update(union)\n\n            # Even if it was in private scope, if it is reached via a public require\n            # the previous node and its upstream becomes public\n            if previous.private and not require.private:\n                previous.make_public()\n\n            node.connect_closure(previous)\n            dep_graph.add_edge(node, previous, require.private, require.build_require)\n            # All the upstream dependencies (public_closure) of the previously existing node\n            # now will be also connected to the node and to all its dependants\n            for name, n in previous.public_closure.items():\n                if n.build_require or n.private:\n                    continue\n                node.connect_closure(n)\n                for dep_node in node.inverse_closure:\n                    dep_node.connect_closure(n)\n\n            # Recursion is only necessary if the inputs conflict with the current \"previous\"\n            # configuration of upstream versions and options\n            if self._recurse(previous.public_closure, new_reqs, new_options):\n                self._load_deps(dep_graph, previous, new_reqs, node.ref, new_options, check_updates,\n                                update, remotes, processed_profile)\n\n    @staticmethod\n    def _conflicting_references(previous_ref, new_ref, consumer_ref=None):\n        if previous_ref.copy_clear_rev() != new_ref.copy_clear_rev():\n            if consumer_ref:\n                raise ConanException(\"Conflict in %s\\n\"\n                                     \"    Requirement %s conflicts with already defined %s\\n\"\n                                     \"    To change it, override it in your base requirements\"\n                                     % (consumer_ref, new_ref, previous_ref))\n            return True\n        # Computed node, if is Editable, has revision=None\n        # If new_ref.revision is None we cannot assume any conflict, the user hasn't specified\n        # a revision, so it's ok any previous_ref\n        if previous_ref.revision and new_ref.revision and previous_ref.revision != new_ref.revision:\n            if consumer_ref:\n                raise ConanException(\"Conflict in %s\\n\"\n                                     \"    Different revisions of %s has been requested\"\n                                     % (consumer_ref, new_ref))\n            return True\n        return False\n\n    def _recurse(self, closure, new_reqs, new_options):\n        \"\"\" For a given closure, if some requirements or options coming from downstream\n        is incompatible with the current closure, then it is necessary to recurse\n        then, incompatibilities will be raised as usually\"\"\"\n        for req in new_reqs.values():\n            n = closure.get(req.ref.name)\n            if n and self._conflicting_references(n.ref, req.ref):\n                return True\n        for pkg_name, options_values in new_options.items():\n            n = closure.get(pkg_name)\n            if n:\n                options = n.conanfile.options\n                for option, value in options_values.items():\n                    if getattr(options, option) != value:\n                        return True\n        return False\n\n    def _config_node(self, graph, node, down_reqs, down_ref, down_options):\n        \"\"\" update settings and option in the current ConanFile, computing actual\n        requirement values, cause they can be overridden by downstream requires\n        param settings: dict of settings values => {\"os\": \"windows\"}\n        \"\"\"\n        try:\n            conanfile, ref = node.conanfile, node.ref\n            # Avoid extra time manipulating the sys.path for python\n            with get_env_context_manager(conanfile, without_python=True):\n                if hasattr(conanfile, \"config\"):\n                    if not ref:\n                        conanfile.output.warn(\"config() has been deprecated.\"\n                                              \" Use config_options and configure\")\n                    with conanfile_exception_formatter(str(conanfile), \"config\"):\n                        conanfile.config()\n                with conanfile_exception_formatter(str(conanfile), \"config_options\"):\n                    conanfile.config_options()\n                conanfile.options.propagate_upstream(down_options, down_ref, ref)\n                if hasattr(conanfile, \"config\"):\n                    with conanfile_exception_formatter(str(conanfile), \"config\"):\n                        conanfile.config()\n\n                with conanfile_exception_formatter(str(conanfile), \"configure\"):\n                    conanfile.configure()\n\n                conanfile.settings.validate()  # All has to be ok!\n                conanfile.options.validate()\n\n                # Update requirements (overwrites), computing new upstream\n                if hasattr(conanfile, \"requirements\"):\n                    # If re-evaluating the recipe, in a diamond graph, with different options,\n                    # it could happen that one execution path of requirements() defines a package\n                    # and another one a different package raising Duplicate dependency error\n                    # Or the two consecutive calls, adding 2 different dependencies for the two paths\n                    # So it is necessary to save the \"requires\" state and restore it before a second\n                    # execution of requirements(). It is a shallow copy, if first iteration is\n                    # RequireResolve'd or overridden, the inner requirements are modified\n                    if not hasattr(conanfile, \"_conan_original_requires\"):\n                        conanfile._conan_original_requires = conanfile.requires.copy()\n                    else:\n                        conanfile.requires = conanfile._conan_original_requires.copy()\n\n                    with conanfile_exception_formatter(str(conanfile), \"requirements\"):\n                        conanfile.requirements()\n\n                new_options = conanfile.options.deps_package_values\n                if graph.aliased:\n                    for req in conanfile.requires.values():\n                        req.ref = graph.aliased.get(req.ref, req.ref)\n                new_down_reqs = conanfile.requires.update(down_reqs, self._output, ref, down_ref)\n        except ConanExceptionInUserConanfileMethod:\n            raise\n        except ConanException as e:\n            raise ConanException(\"%s: %s\" % (ref or \"Conanfile\", str(e)))\n        except Exception as e:\n            raise ConanException(e)\n\n        return new_down_reqs, new_options\n\n    def _create_new_node(self, current_node, dep_graph, requirement, name_req,\n                         check_updates, update, remotes, processed_profile, alias_ref=None):\n        \"\"\" creates and adds a new node to the dependency graph\n        \"\"\"\n\n        try:\n            result = self._proxy.get_recipe(requirement.ref, check_updates, update,\n                                            remotes, self._recorder)\n        except ConanException as e:\n            if current_node.ref:\n                self._output.error(\"Failed requirement '%s' from '%s'\"\n                                   % (requirement.ref,\n                                      current_node.conanfile.display_name))\n            raise e\n        conanfile_path, recipe_status, remote, new_ref = result\n\n        dep_conanfile = self._loader.load_conanfile(conanfile_path, processed_profile,\n                                                    ref=requirement.ref)\n        if recipe_status == RECIPE_EDITABLE:\n            dep_conanfile.in_local_cache = False\n            dep_conanfile.develop = True\n\n        if getattr(dep_conanfile, \"alias\", None):\n            alias_ref = alias_ref or new_ref.copy_clear_rev()\n            requirement.ref = ConanFileReference.loads(dep_conanfile.alias)\n            dep_graph.aliased[alias_ref] = requirement.ref\n            return self._create_new_node(current_node, dep_graph, requirement,\n                                         name_req, check_updates, update,\n                                         remotes, processed_profile,\n                                         alias_ref=alias_ref)\n\n        logger.debug(\"GRAPH: new_node: %s\" % str(new_ref))\n        new_node = Node(new_ref, dep_conanfile)\n        new_node.revision_pinned = requirement.ref.revision is not None\n        new_node.recipe = recipe_status\n        new_node.remote = remote\n        # Ancestors are a copy of the parent, plus the parent itself\n        new_node.ancestors = current_node.ancestors.copy()\n        new_node.ancestors.add(current_node.name)\n        # build-requires and private affect transitively. If \"node\" is already\n        # a build_require or a private one, its requirements will inherit that property\n        # Or if the require specify that property, then it will get it too\n        new_node.build_require = current_node.build_require or requirement.build_require\n        new_node.private = current_node.private or requirement.private\n\n        dep_graph.add_node(new_node)\n        dep_graph.add_edge(current_node, new_node, requirement.private, requirement.build_require)\n        return new_node\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python class named \"DepsGraphBuilder\" that is responsible for computing the dependencies graph DepsGraph. To use it, create an instance of the class and call the \"load_graph\" method with a root node, check_updates, update, remotes, and processed_profile as parameters to load the dependencies graph. To extend build requires, call the \"extend_build_requires\" method with a graph, node, build_requires_refs, check_updates, update, remotes, and processed_profile as parameters. The class also has other methods for resolving ranges, handling requirements, configuring nodes, and creating new nodes.\n\n### Input:\n\n\n### Output:\nimport time\nfrom collections import OrderedDict\n\nfrom conans.client.graph.graph import DepsGraph, Node, RECIPE_EDITABLE\nfrom conans.errors import (ConanException, ConanExceptionInUserConanfileMethod,\n                           conanfile_exception_formatter)\nfrom conans.model.conan_file import get_env_context_manager\nfrom conans.model.ref import ConanFileReference\nfrom conans.model.requires import Requirements, Requirement\nfrom conans.util.log import logger\n\n\nclass DepsGraphBuilder(object):\n    \"\"\" Responsible for computing the dependencies graph DepsGraph\n    \"\"\"\n    def __init__(self, proxy, output, loader, resolver, recorder):\n        self._proxy = proxy\n        self._output = output\n        self._loader = loader\n        self._resolver = resolver\n        self._recorder = recorder\n\n    def load_graph(self, root_node, check_updates, update, remotes, processed_profile):\n        check_updates = check_updates or update\n        dep_graph = DepsGraph()\n        # compute the conanfile entry point for this dependency graph\n        name = root_node.name\n        root_node.public_closure = OrderedDict([(name, root_node)])\n        root_node.public_deps = {name: root_node}\n        root_node.ancestors = set()\n        dep_graph.add_node(root_node)\n\n        # enter recursive computation\n        t1 = time.time()\n        self._load_deps(dep_graph, root_node, Requirements(), None, None,\n                        check_updates, update, remotes,\n                        processed_profile)\n        logger.debug(\"GRAPH: Time to load deps %s\" % (time.time() - t1))\n        return dep_graph\n\n    def extend_build_requires(self, graph, node, build_requires_refs, check_updates, update,\n                              remotes, processed_profile):\n\n        # The options that will be defined in the node will be the real options values that have\n        # been already propagated downstream from the dependency graph. This will override any\n        # other possible option in the build_requires dependency graph. This means that in theory\n        # an option conflict while expanding the build_requires is impossible\n        node.conanfile.build_requires_options.clear_unscoped_options()\n        new_options = node.conanfile.build_requires_options._reqs_options\n        new_reqs = Requirements()\n\n        conanfile = node.conanfile\n        scope = conanfile.display_name\n        requires = [Requirement(ref) for ref in build_requires_refs]\n        self._resolve_ranges(graph, requires, scope, update, remotes)\n\n        for require in requires:\n            name = require.ref.name\n            require.build_require = True\n            self._handle_require(name, node, require, graph, check_updates, update,\n                                 remotes, processed_profile, new_reqs, new_options)\n\n        new_nodes = set(n for n in graph.nodes if n.package_id is None)\n        # This is to make sure that build_requires have precedence over the normal requires\n        ordered_closure = list(node.public_closure.items())\n        ordered_closure.sort(key=lambda x: x[1] not in new_nodes)\n        node.public_closure = OrderedDict(ordered_closure)\n\n        subgraph = DepsGraph()\n        subgraph.aliased = graph.aliased\n        subgraph.evaluated = graph.evaluated\n        subgraph.nodes = new_nodes\n        for n in subgraph.nodes:\n            n.build_require = True\n\n        return subgraph\n\n    def _resolve_ranges(self, graph, requires, consumer, update, remotes):\n        for require in requires:\n            self._resolver.resolve(require, consumer, update, remotes)\n            # if the range is resolved, check if it is an alias\n            alias = graph.aliased.get(require.ref)\n            if alias:\n                require.ref = alias\n\n    def _resolve_deps(self, graph, node, update, remote_name):\n        # Resolve possible version ranges of the current node requirements\n        # new_reqs is a shallow copy of what is propagated upstream, so changes done by the\n        # RangeResolver are also done in new_reqs, and then propagated!\n        conanfile = node.conanfile\n        scope = conanfile.display_name\n        self._resolve_ranges(graph, conanfile.requires.values(), scope, update, remote_name)\n\n        if not hasattr(conanfile, \"_conan_evaluated_requires\"):\n            conanfile._conan_evaluated_requires = conanfile.requires.copy()\n        elif conanfile.requires != conanfile._conan_evaluated_requires:\n            raise ConanException(\"%s: Incompatible requirements obtained in different \"\n                                 \"evaluations of 'requirements'\\n\"\n                                 \"    Previous requirements: %s\\n\"\n                                 \"    New requirements: %s\"\n                                 % (scope, list(conanfile._conan_evaluated_requires.values()),\n                                    list(conanfile.requires.values())))\n\n    def _load_deps(self, dep_graph, node, down_reqs, down_ref, down_options,\n                   check_updates, update, remotes, processed_profile):\n        \"\"\" expands the dependencies of the node, recursively\n\n        param node: Node object to be expanded in this step\n        down_reqs: the Requirements as coming from downstream, which can overwrite current\n                    values\n        param down_ref: ConanFileReference of who is depending on current node for this expansion\n        \"\"\"\n        # basic node configuration: calling configure() and requirements()\n        new_reqs, new_options = self._config_node(dep_graph, node, down_reqs, down_ref, down_options)\n\n        # if there are version-ranges, resolve them before expanding each of the requirements\n        self._resolve_deps(dep_graph, node, update, remotes)\n\n        # Expand each one of the current requirements\n        for name, require in node.conanfile.requires.items():\n            if require.override:\n                continue\n            self._handle_require(name, node, require, dep_graph, check_updates, update,\n                                 remotes, processed_profile, new_reqs, new_options)\n\n    def _handle_require(self, name, node, require, dep_graph, check_updates, update,\n                        remotes, processed_profile, new_reqs, new_options):\n        # Handle a requirement of a node. There are 2 possibilities\n        #    node -(require)-> new_node (creates a new node in the graph)\n        #    node -(require)-> previous (creates a diamond with a previously existing node)\n\n        # If the required is found in the node ancestors a loop is being closed\n        # TODO: allow bootstrapping, use references instead of names\n        if name in node.ancestors or name == node.name:\n            raise ConanException(\"Loop detected: '%s' requires '%s' which is an ancestor too\"\n                                 % (node.ref, require.ref))\n\n        # If the requirement is found in the node public dependencies, it is a diamond\n        previous = node.public_deps.get(name)\n        previous_closure = node.public_closure.get(name)\n        # build_requires and private will create a new node if it is not in the current closure\n        if not previous or ((require.build_require or require.private) and not previous_closure):\n            # new node, must be added and expanded (node -> new_node)\n            new_node = self._create_new_node(node, dep_graph, require, name, check_updates, update,\n                                             remotes, processed_profile)\n\n            # The closure of a new node starts with just itself\n            new_node.public_closure = OrderedDict([(new_node.ref.name, new_node)])\n            # The new created node is connected to the parent one\n            node.connect_closure(new_node)\n\n            if require.private or require.build_require:\n                # If the requirement is private (or build_require), a new public_deps is defined\n                # the new_node doesn't propagate downstream the \"node\" consumer, so its public_deps\n                # will be a copy of the node.public_closure, i.e. it can only cause conflicts in the\n                # new_node.public_closure.\n                new_node.public_deps = node.public_closure.copy()\n                new_node.public_deps[name] = new_node\n            else:\n                # Normal requires propagate and can conflict with the parent \"node.public_deps\" too\n                new_node.public_deps = node.public_deps.copy()\n                new_node.public_deps[name] = new_node\n\n                # All the dependents of \"node\" are also connected now to \"new_node\"\n                for dep_node in node.inverse_closure:\n                    dep_node.connect_closure(new_node)\n\n            # RECURSION, keep expanding (depth-first) the new node\n            self._load_deps(dep_graph, new_node, new_reqs, node.ref, new_options, check_updates,\n                            update, remotes, processed_profile)\n        else:  # a public node already exist with this name\n            # This is closing a diamond, the node already exists and is reachable\n            alias_ref = dep_graph.aliased.get(require.ref)\n            # Necessary to make sure that it is pointing to the correct aliased\n            if alias_ref:\n                require.ref = alias_ref\n            # As we are closing a diamond, there can be conflicts. This will raise if conflicts\n            self._conflicting_references(previous.ref, require.ref, node.ref)\n\n            # Add current ancestors to the previous node and upstream deps\n            union = node.ancestors.union([node.name])\n            for n in previous.public_closure.values():\n                n.ancestors.update(union)\n\n            # Even if it was in private scope, if it is reached via a public require\n            # the previous node and its upstream becomes public\n            if previous.private and not require.private:\n                previous.make_public()\n\n            node.connect_closure(previous)\n            dep_graph.add_edge(node, previous, require.private, require.build_require)\n            # All the upstream dependencies (public_closure) of the previously existing node\n            # now will be also connected to the node and to all its dependants\n            for name, n in previous.public_closure.items():\n                if n.build_require or n.private:\n                    continue\n                node.connect_closure(n)\n                for dep_node in node.inverse_closure:\n                    dep_node.connect_closure(n)\n\n            # Recursion is only necessary if the inputs conflict with the current \"previous\"\n            # configuration of upstream versions and options\n            if self._recurse(previous.public_closure, new_reqs, new_options):\n                self._load_deps(dep_graph, previous, new_reqs, node.ref, new_options, check_updates,\n                                update, remotes, processed_profile)\n\n    @staticmethod\n    def _conflicting_references(previous_ref, new_ref, consumer_ref=None):\n        if previous_ref.copy_clear_rev() != new_ref.copy_clear_rev():\n            if consumer_ref:\n                raise ConanException(\"Conflict in %s\\n\"\n                                     \"    Requirement %s conflicts with already defined %s\\n\"\n                                     \"    To change it, override it in your base requirements\"\n                                     % (consumer_ref, new_ref, previous_ref))\n            return True\n        # Computed node, if is Editable, has revision=None\n        # If new_ref.revision is None we cannot assume any conflict, the user hasn't specified\n        # a revision, so it's ok any previous_ref\n        if previous_ref.revision and new_ref.revision and previous_ref.revision != new_ref.revision:\n            if consumer_ref:\n                raise ConanException(\"Conflict in %s\\n\"\n                                     \"    Different revisions of %s has been requested\"\n                                     % (consumer_ref, new_ref))\n            return True\n        return False\n\n    def _recurse(self, closure, new_reqs, new_options):\n        \"\"\" For a given closure, if some requirements or options coming from downstream\n        is incompatible with the current closure, then it is necessary to recurse\n        then, incompatibilities will be raised as usually\"\"\"\n        for req in new_reqs.values():\n            n = closure.get(req.ref.name)\n            if n and self._conflicting_references(n.ref, req.ref):\n                return True\n        for pkg_name, options_values in new_options.items():\n            n = closure.get(pkg_name)\n            if n:\n                options = n.conanfile.options\n                for option, value in options_values.items():\n                    if getattr(options, option) != value:\n                        return True\n        return False\n\n    def _config_node(self, graph, node, down_reqs, down_ref, down_options):\n        \"\"\" update settings and option in the current ConanFile, computing actual\n        requirement values, cause they can be overridden by downstream requires\n        param settings: dict of settings values => {\"os\": \"windows\"}\n        \"\"\"\n        try:\n            conanfile, ref = node.conanfile, node.ref\n            # Avoid extra time manipulating the sys.path for python\n            with get_env_context_manager(conanfile, without_python=True):\n                if hasattr(conanfile, \"config\"):\n                    if not ref:\n                        conanfile.output.warn(\"config() has been deprecated.\"\n                                              \" Use config_options and configure\")\n                    with conanfile_exception_formatter(str(conanfile), \"config\"):\n                        conanfile.config()\n                with conanfile_exception_formatter(str(conanfile), \"config_options\"):\n                    conanfile.config_options()\n                conanfile.options.propagate_upstream(down_options, down_ref, ref)\n                if hasattr(conanfile, \"config\"):\n                    with conanfile_exception_formatter(str(conanfile), \"config\"):\n                        conanfile.config()\n\n                with conanfile_exception_formatter(str(conanfile), \"configure\"):\n                    conanfile.configure()\n\n                conanfile.settings.validate()  # All has to be ok!\n                conanfile.options.validate()\n\n                # Update requirements (overwrites), computing new upstream\n                if hasattr(conanfile, \"requirements\"):\n                    # If re-evaluating the recipe, in a diamond graph, with different options,\n                    # it could happen that one execution path of requirements() defines a package\n                    # and another one a different package raising Duplicate dependency error\n                    # Or the two consecutive calls, adding 2 different dependencies for the two paths\n                    # So it is necessary to save the \"requires\" state and restore it before a second\n                    # execution of requirements(). It is a shallow copy, if first iteration is\n                    # RequireResolve'd or overridden, the inner requirements are modified\n                    if not hasattr(conanfile, \"_conan_original_requires\"):\n                        conanfile._conan_original_requires = conanfile.requires.copy()\n                    else:\n                        conanfile.requires = conanfile._conan_original_requires.copy()\n\n                    with conanfile_exception_formatter(str(conanfile), \"requirements\"):\n                        conanfile.requirements()\n\n                new_options = conanfile.options.deps_package_values\n                if graph.aliased:\n                    for req in conanfile.requires.values():\n                        req.ref = graph.aliased.get(req.ref, req.ref)\n                new_down_reqs = conanfile.requires.update(down_reqs, self._output, ref, down_ref)\n        except ConanExceptionInUserConanfileMethod:\n            raise\n        except ConanException as e:\n            raise ConanException(\"%s: %s\" % (ref or \"Conanfile\", str(e)))\n        except Exception as e:\n            raise ConanException(e)\n\n        return new_down_reqs, new_options\n\n    def _create_new_node(self, current_node, dep_graph, requirement, name_req,\n                         check_updates, update, remotes, processed_profile, alias_ref=None):\n        \"\"\" creates and adds a new node to the dependency graph\n        \"\"\"\n\n        try:\n            result = self._proxy.get_recipe(requirement.ref, check_updates, update,\n                                            remotes, self._recorder)\n        except ConanException as e:\n            if current_node.ref:\n                self._output.error(\"Failed requirement '%s' from '%s'\"\n                                   % (requirement.ref,\n                                      current_node.conanfile.display_name))\n            raise e\n        conanfile_path, recipe_status, remote, new_ref = result\n\n        dep_conanfile = self._loader.load_conanfile(conanfile_path, processed_profile,\n                                                    ref=requirement.ref)\n        if recipe_status == RECIPE_EDITABLE:\n            dep_conanfile.in_local_cache = False\n            dep_conanfile.develop = True\n\n        if getattr(dep_conanfile, \"alias\", None):\n            alias_ref = alias_ref or new_ref.copy_clear_rev()\n            requirement.ref = ConanFileReference.loads(dep_conanfile.alias)\n            dep_graph.aliased[alias_ref] = requirement.ref\n            return self._create_new_node(current_node, dep_graph, requirement,\n                                         name_req, check_updates, update,\n                                         remotes, processed_profile,\n                                         alias_ref=alias_ref)\n\n        logger.debug(\"GRAPH: new_node: %s\" % str(new_ref))\n        new_node = Node(new_ref, dep_conanfile)\n        new_node.revision_pinned = requirement.ref.revision is not None\n        new_node.recipe = recipe_status\n        new_node.remote = remote\n        # Ancestors are a copy of the parent, plus the parent itself\n        new_node.ancestors = current_node.ancestors.copy()\n        new_node.ancestors.add(current_node.name)\n        # build-requires and private affect transitively. If \"node\" is already\n        # a build_require or a private one, its requirements will inherit that property\n        # Or if the require specify that property, then it will get it too\n        new_node.build_require = current_node.build_require or requirement.build_require\n        new_node.private = current_node.private or requirement.private\n\n        dep_graph.add_node(new_node)\n        dep_graph.add_edge(current_node, new_node, requirement.private, requirement.build_require)\n        return new_node\n"}
{"instruction":"Design a Python program to count the number of hops that a knight can make from a given square on a chessboard in a single move.","input":"42 (For the chessboard position E3)","output":"def count_knight_moves(position):\n    x = int(position \/ 10)\n    y = position % 10\n    count = 0 \n    \n    # Possible moves the knight can make \n    xmove = [-2, -2, -1, -1,  1, 1,  2, 2] \n    ymove = [-1,  1, -2,  2, -2, 2, -1, 1] \n      \n    # Check if knight is on the boundary \n    if x <= 0 or y <= 0 or x > 8 or y > 8:\n        return 0 \n      \n    for k in range(len(xmove)):\n        if (x + xmove[k] <= 8) and (y + ymove[k] <= 8): \n            count += 1\n             \n    return count \n\nposition = 42\nmoves = count_knight_moves(position)\nprint(\"The knight can make %d moves from E3\" %moves)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to count the number of hops that a knight can make from a given square on a chessboard in a single move.\n\n### Input:\n42 (For the chessboard position E3)\n\n### Output:\ndef count_knight_moves(position):\n    x = int(position \/ 10)\n    y = position % 10\n    count = 0 \n    \n    # Possible moves the knight can make \n    xmove = [-2, -2, -1, -1,  1, 1,  2, 2] \n    ymove = [-1,  1, -2,  2, -2, 2, -1, 1] \n      \n    # Check if knight is on the boundary \n    if x <= 0 or y <= 0 or x > 8 or y > 8:\n        return 0 \n      \n    for k in range(len(xmove)):\n        if (x + xmove[k] <= 8) and (y + ymove[k] <= 8): \n            count += 1\n             \n    return count \n\nposition = 42\nmoves = count_knight_moves(position)\nprint(\"The knight can make %d moves from E3\" %moves)"}
{"instruction":"Create a REST API in Python to retrieve a list of users from a database.","input":"","output":"import flask\nfrom flask_restful import Resource, Api\n\napp = flask.Flask(__name__)\napi = Api(app)\n\nclass Users(Resource):\n    def get(self):\n        conn = sqlite3.connect('users.db')\n        cursor = conn.cursor()\n        cursor.execute('SELECT * FROM users ORDER BY id ASC')\n        users = cursor.fetchall()\n        conn.close()\n        return users\n\napi.add_resource(Users, '\/users')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API in Python to retrieve a list of users from a database.\n\n### Input:\n\n\n### Output:\nimport flask\nfrom flask_restful import Resource, Api\n\napp = flask.Flask(__name__)\napi = Api(app)\n\nclass Users(Resource):\n    def get(self):\n        conn = sqlite3.connect('users.db')\n        cursor = conn.cursor()\n        cursor.execute('SELECT * FROM users ORDER BY id ASC')\n        users = cursor.fetchall()\n        conn.close()\n        return users\n\napi.add_resource(Users, '\/users')"}
{"instruction":"Define a class method in Python to initialize an object's fields.","input":"","output":"class SomeClass:\n\n    def __init__(self, field1, field2):\n        self.field1 = field1\n        self.field2 = field2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDefine a class method in Python to initialize an object's fields.\n\n### Input:\n\n\n### Output:\nclass SomeClass:\n\n    def __init__(self, field1, field2):\n        self.field1 = field1\n        self.field2 = field2"}
{"instruction":"Edit this Python function such that it takes an optional parameter x.","input":"def add_two_numbers(a, b):\n    return a + b","output":"def add_two_numbers(a, b, x=0):\n    return a + b + x","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit this Python function such that it takes an optional parameter x.\n\n### Input:\ndef add_two_numbers(a, b):\n    return a + b\n\n### Output:\ndef add_two_numbers(a, b, x=0):\n    return a + b + x"}
{"instruction":"Create a Python function that takes in an array of integers and returns the maximum value.","input":"[2,3,5,1]","output":"def max_value(int_arr):\n    max_val = int_arr[0]\n    for i in int_arr:\n        if i > max_val:\n            max_val = i\n    return max_val","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes in an array of integers and returns the maximum value.\n\n### Input:\n[2,3,5,1]\n\n### Output:\ndef max_value(int_arr):\n    max_val = int_arr[0]\n    for i in int_arr:\n        if i > max_val:\n            max_val = i\n    return max_val"}
{"instruction":"Create a Python code to implement truncated bubble sort and find out the number of swaps needed to sort the list.","input":"[7, 3, 5, 9]","output":"def truncatedBubbleSort(arr): \n    n = len(arr) \n  \n    # outer loop will run n-2 times \n    for i in range(0, n - 2): \n  \n        swapped = False\n  \n        # inner loop will run n-i-1 times \n        for j in range(0, n - i - 1): \n  \n            # Swap if element found greater \n            # than the next element \n            if arr[j] > arr[j + 1]: \n                arr[j], arr[j + 1] = arr[j + 1], arr[j] \n                swapped = True\n  \n        # If no two elements were swapped \n        # by inner loop, then break \n        if swapped == False: \n            break\n  \n    return arr, i\n\narr = [7, 3, 5, 9]\nres, swaps = truncatedBubbleSort(arr) \nprint(res)\nprint(\"Number of swaps needed: \" + str(swaps))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code to implement truncated bubble sort and find out the number of swaps needed to sort the list.\n\n### Input:\n[7, 3, 5, 9]\n\n### Output:\ndef truncatedBubbleSort(arr): \n    n = len(arr) \n  \n    # outer loop will run n-2 times \n    for i in range(0, n - 2): \n  \n        swapped = False\n  \n        # inner loop will run n-i-1 times \n        for j in range(0, n - i - 1): \n  \n            # Swap if element found greater \n            # than the next element \n            if arr[j] > arr[j + 1]: \n                arr[j], arr[j + 1] = arr[j + 1], arr[j] \n                swapped = True\n  \n        # If no two elements were swapped \n        # by inner loop, then break \n        if swapped == False: \n            break\n  \n    return arr, i\n\narr = [7, 3, 5, 9]\nres, swaps = truncatedBubbleSort(arr) \nprint(res)\nprint(\"Number of swaps needed: \" + str(swaps))"}
{"instruction":"Create a for-loop in Python that prints the numbers from 0 to 10.","input":"","output":"for i in range(11):\n    print(i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a for-loop in Python that prints the numbers from 0 to 10.\n\n### Input:\n\n\n### Output:\nfor i in range(11):\n    print(i)"}
{"instruction":"Create a data pipeline in Python to process customer data. The pipeline should read customer data from a MySQL database and transform it to the desired format before storing it in a MongoDB database.","input":"Not applicable","output":"import mysql.connector\nimport pymongo\nimport json\nimport pandas as pd\n\n# Connect to the MySQL database\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"yourusername\",\n  passwd=\"yourpassword\",\n  database=\"yourdatabase\"\n)\n\n# Connect to the MongoDB database\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\ndb = myclient[\"yourdatabase\"]\n\n# Create a DataFrame to store the customer data\ndf = pd.read_sql(\"SELECT * FROM customers\", con=mydb)\n\n# Transform the DataFrame to the desired format\n# and store it in a json file\ndf_transformed = pd.DataFrame({\n 'id': df['customer_id'],\n 'name': df['name'],\n 'age': df['age']\n})\ndata = df_transformed.to_json(orient='records')\n\n# Load the json data into the MongoDB database\njson_data = json.loads(data)\ndb.customers.insert_many(json_data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a data pipeline in Python to process customer data. The pipeline should read customer data from a MySQL database and transform it to the desired format before storing it in a MongoDB database.\n\n### Input:\nNot applicable\n\n### Output:\nimport mysql.connector\nimport pymongo\nimport json\nimport pandas as pd\n\n# Connect to the MySQL database\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"yourusername\",\n  passwd=\"yourpassword\",\n  database=\"yourdatabase\"\n)\n\n# Connect to the MongoDB database\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\ndb = myclient[\"yourdatabase\"]\n\n# Create a DataFrame to store the customer data\ndf = pd.read_sql(\"SELECT * FROM customers\", con=mydb)\n\n# Transform the DataFrame to the desired format\n# and store it in a json file\ndf_transformed = pd.DataFrame({\n 'id': df['customer_id'],\n 'name': df['name'],\n 'age': df['age']\n})\ndata = df_transformed.to_json(orient='records')\n\n# Load the json data into the MongoDB database\njson_data = json.loads(data)\ndb.customers.insert_many(json_data)"}
{"instruction":"Edit an existing Python code so that it is more efficient and optimized for run time.","input":"def average(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    avg = float(sum) \/ len(arr)\n    return avg","output":"def average(arr):\n    return sum(arr) \/ len(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit an existing Python code so that it is more efficient and optimized for run time.\n\n### Input:\ndef average(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    avg = float(sum) \/ len(arr)\n    return avg\n\n### Output:\ndef average(arr):\n    return sum(arr) \/ len(arr)"}
{"instruction":"Create a web scraper in Python that takes a URL as input and scrapes the page for information about the product that the page is selling. It should return the product name, price, and description as output.","input":"URL: https:\/\/www.example.com\/example-product","output":"#imports\nimport requests\nfrom bs4 import BeautifulSoup\n\n#setup \nurl = 'https:\/\/www.example.com\/example-product'\npage = requests.get(url)\n\n#scraping \nsoup = BeautifulSoup(page.content, 'html.parser')\nname = soup.h1.string\nprice = soup.find('span', class_='example-price').string\ndescription = soup.find('div', class_='example-description').string\n\n#output\nprint(name)\nprint(price)\nprint(description)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python that takes a URL as input and scrapes the page for information about the product that the page is selling. It should return the product name, price, and description as output.\n\n### Input:\nURL: https:\/\/www.example.com\/example-product\n\n### Output:\n#imports\nimport requests\nfrom bs4 import BeautifulSoup\n\n#setup \nurl = 'https:\/\/www.example.com\/example-product'\npage = requests.get(url)\n\n#scraping \nsoup = BeautifulSoup(page.content, 'html.parser')\nname = soup.h1.string\nprice = soup.find('span', class_='example-price').string\ndescription = soup.find('div', class_='example-description').string\n\n#output\nprint(name)\nprint(price)\nprint(description)"}
{"instruction":"Given a list of integers and Boolean values, write a classifier program in Python to predict whether the input is an integer or a Boolean value.","input":"","output":"def classifyValue(value):\n    if isinstance(value, bool):\n        return \"Boolean\"\n    elif isinstance(value, int):\n        return \"Integer\"\n    else:\n        return \"Other\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integers and Boolean values, write a classifier program in Python to predict whether the input is an integer or a Boolean value.\n\n### Input:\n\n\n### Output:\ndef classifyValue(value):\n    if isinstance(value, bool):\n        return \"Boolean\"\n    elif isinstance(value, int):\n        return \"Integer\"\n    else:\n        return \"Other\""}
{"instruction":"Generate a Python function for calculating the probability of two events occurring simultaneously.","input":"","output":"def probability_of_two_events(probability_of_first_event, probability_of_second_event):\n    \"\"\"\n    Calculates the probability of two independent events occurring simultaneously.\n    \n    Args:\n        probability_of_first_event (float): The probability of the first event occuring.\n        probability_of_second_event (float): The probability of the second event occuring.\n    \n    Returns: \n        float: The probability of both events occurring simultaneously.\n    \"\"\"\n       \n    probability = probability_of_first_event * probability_of_second_event\n    \n    return probability","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function for calculating the probability of two events occurring simultaneously.\n\n### Input:\n\n\n### Output:\ndef probability_of_two_events(probability_of_first_event, probability_of_second_event):\n    \"\"\"\n    Calculates the probability of two independent events occurring simultaneously.\n    \n    Args:\n        probability_of_first_event (float): The probability of the first event occuring.\n        probability_of_second_event (float): The probability of the second event occuring.\n    \n    Returns: \n        float: The probability of both events occurring simultaneously.\n    \"\"\"\n       \n    probability = probability_of_first_event * probability_of_second_event\n    \n    return probability"}
{"instruction":"Generate a Python script to detect the number of capitalized words in a sentence.","input":"sentence = \"This is a Sample Sentence\"","output":"def count_capitals(s):\n    count = 0\n    arr = s.split(' ')\n    for word in arr:\n        if word[0].isupper():\n            count += 1\n    return count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to detect the number of capitalized words in a sentence.\n\n### Input:\nsentence = \"This is a Sample Sentence\"\n\n### Output:\ndef count_capitals(s):\n    count = 0\n    arr = s.split(' ')\n    for word in arr:\n        if word[0].isupper():\n            count += 1\n    return count"}
{"instruction":"Create a Pie Chart in Python with the following data","input":"Item\tFrequency\nPen\t4\nPencil\t9\nEraser\t3","output":"import matplotlib.pyplot as plt\n\nitems = ['Pen', 'Pencil', 'Eraser']\nfrequencies = [4, 9, 3]\n\nplt.pie(frequencies, labels=items, autopct='%1.1f%%', shadow=True, startangle=90)\nplt.axis('equal')\nplt.show()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Pie Chart in Python with the following data\n\n### Input:\nItem\tFrequency\nPen\t4\nPencil\t9\nEraser\t3\n\n### Output:\nimport matplotlib.pyplot as plt\n\nitems = ['Pen', 'Pencil', 'Eraser']\nfrequencies = [4, 9, 3]\n\nplt.pie(frequencies, labels=items, autopct='%1.1f%%', shadow=True, startangle=90)\nplt.axis('equal')\nplt.show()"}
{"instruction":"Modify the following code in Python to check if a number is prime or not.","input":"def checkPrime(n):\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True","output":"def checkPrime(n):\n    if n <= 1:\n        return False\n\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    \n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following code in Python to check if a number is prime or not.\n\n### Input:\ndef checkPrime(n):\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n\n### Output:\ndef checkPrime(n):\n    if n <= 1:\n        return False\n\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    \n    return True"}
{"instruction":"Compose a Python program to generate a list of numbers from 1 to 50.","input":"","output":"number_list = [i for i in range(1, 51)]\nprint(number_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python program to generate a list of numbers from 1 to 50.\n\n### Input:\n\n\n### Output:\nnumber_list = [i for i in range(1, 51)]\nprint(number_list)"}
{"instruction":"Implement a lazy evaluation pattern for a function in Python.","input":"Not applicable","output":"class lazy_evaluation:\n def __init__(self, func):\n self.func = func\n\n def __call__(self, *args, **kwargs):\n result = self.func(*args, **kwargs)\n return result\n\n@lazy_evaluation\ndef add(a, b):\n return a + b\n\nresult = add(2, 3)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a lazy evaluation pattern for a function in Python.\n\n### Input:\nNot applicable\n\n### Output:\nclass lazy_evaluation:\n def __init__(self, func):\n self.func = func\n\n def __call__(self, *args, **kwargs):\n result = self.func(*args, **kwargs)\n return result\n\n@lazy_evaluation\ndef add(a, b):\n return a + b\n\nresult = add(2, 3)\nprint(result)"}
{"instruction":"Write a Python program that will create a random destination and print out the coordinates and the country.","input":"Not applicable","output":"import requests\nimport json\n\nurl = 'https:\/\/random-places.p.rapidapi.com\/v1\/get'\n\nquerystring = {'language': 'en-US', 'size': '1', 'types': 'city'}\n\nheaders = {\n'x-rapidapi-host': 'random-places.p.rapidapi.com',\n'x-rapidapi-key': <Your RapidAPI Key>\n}\n\nresponse = requests.request('GET', url, headers=headers, params=querystring)\n\ndata = json.loads(response.text)\n\ndestination = data['data'][0]\n\nprint(f'Destination: {destination[\"name\"]}, {destination[\"country\"]}')\nprint(f'Coordinates: {destination[\"lat\"]}, {destination[\"lng\"]}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that will create a random destination and print out the coordinates and the country.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nimport json\n\nurl = 'https:\/\/random-places.p.rapidapi.com\/v1\/get'\n\nquerystring = {'language': 'en-US', 'size': '1', 'types': 'city'}\n\nheaders = {\n'x-rapidapi-host': 'random-places.p.rapidapi.com',\n'x-rapidapi-key': <Your RapidAPI Key>\n}\n\nresponse = requests.request('GET', url, headers=headers, params=querystring)\n\ndata = json.loads(response.text)\n\ndestination = data['data'][0]\n\nprint(f'Destination: {destination[\"name\"]}, {destination[\"country\"]}')\nprint(f'Coordinates: {destination[\"lat\"]}, {destination[\"lng\"]}')"}
{"instruction":"Create a RESTful API in Python using Flask that can search a dataset of books by title or author.","input":"[\n {\n title: \"The Catcher in the Rye\",\n author: \"JD Salinger\",\n },\n {\n title: \"Lord of the Flies\",\n author: \"William Golding\",\n },\n {\n title: \"1984\",\n author: \"George Orwell\",\n }\n]","output":"from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\nbooks = [\n {\n \"title\": \"The Catcher in the Rye\",\n \"author\": \"JD Salinger\"\n },\n {\n \"title\": \"Lord of the Flies\",\n \"author\": \"William Golding\"\n },\n {\n \"title\": \"1984\",\n \"author\": \"George Orwell\"\n }\n]\n\n@app.route('\/books', methods=['GET'])\ndef get_books():\n args = request.args\n title = args.get('title')\n author = args.get('author')\n\n result = []\n\n for book in books:\n if title and author:\n if book['title'] == title and book['author'] == author:\n result.append(book)\n elif title:\n if book['title'] == title:\n result.append(book)\n elif author:\n if book['author'] == author:\n result.append(book)\n else:\n result.append(book)\n\n return jsonify(result)\n\nif __name__ == '__main__':\n app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a RESTful API in Python using Flask that can search a dataset of books by title or author.\n\n### Input:\n[\n {\n title: \"The Catcher in the Rye\",\n author: \"JD Salinger\",\n },\n {\n title: \"Lord of the Flies\",\n author: \"William Golding\",\n },\n {\n title: \"1984\",\n author: \"George Orwell\",\n }\n]\n\n### Output:\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\nbooks = [\n {\n \"title\": \"The Catcher in the Rye\",\n \"author\": \"JD Salinger\"\n },\n {\n \"title\": \"Lord of the Flies\",\n \"author\": \"William Golding\"\n },\n {\n \"title\": \"1984\",\n \"author\": \"George Orwell\"\n }\n]\n\n@app.route('\/books', methods=['GET'])\ndef get_books():\n args = request.args\n title = args.get('title')\n author = args.get('author')\n\n result = []\n\n for book in books:\n if title and author:\n if book['title'] == title and book['author'] == author:\n result.append(book)\n elif title:\n if book['title'] == title:\n result.append(book)\n elif author:\n if book['author'] == author:\n result.append(book)\n else:\n result.append(book)\n\n return jsonify(result)\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"instruction":"Write an algorithm in Python to (given a list of numbers) find two numbers that add up to the given sum.","input":"[1,9,7,2,8, 3, 4], 10","output":"# Return the pair of numbers that add up to the given sum\ndef two_num_sum(arr, sum):\n  # Store all elements in a set\n  seen = set()\n  \n  # For each element in the array\n  for num in arr:\n    # Calculate the target needed to achieve the sum\n    target = sum - num\n    \n    # if target number exists in the set, return the pair\n    if target in seen:\n      return [num, target]\n      \n    # Add current number to the set\n    seen.add(num)\n\n# Tests \nassert two_num_sum([1,9,7,2,8, 3, 4], 10) == [7,3]\nassert two_num_sum([4,5,6,7,2,3], 16) == [4, 12]\nassert two_num_sum([18,21,5], 6) == None","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to (given a list of numbers) find two numbers that add up to the given sum.\n\n### Input:\n[1,9,7,2,8, 3, 4], 10\n\n### Output:\n# Return the pair of numbers that add up to the given sum\ndef two_num_sum(arr, sum):\n  # Store all elements in a set\n  seen = set()\n  \n  # For each element in the array\n  for num in arr:\n    # Calculate the target needed to achieve the sum\n    target = sum - num\n    \n    # if target number exists in the set, return the pair\n    if target in seen:\n      return [num, target]\n      \n    # Add current number to the set\n    seen.add(num)\n\n# Tests \nassert two_num_sum([1,9,7,2,8, 3, 4], 10) == [7,3]\nassert two_num_sum([4,5,6,7,2,3], 16) == [4, 12]\nassert two_num_sum([18,21,5], 6) == None"}
{"instruction":"Develop a Python function that removes duplicate elements from a given list and returns a list with unique elements.","input":"my_list = [1,2,3,3,4,5,5,5,6,7,7]","output":"def remove_duplicates(my_list):\n new_list = []\n\n for item in my_list:\n if item not in new_list:\n new_list.append(item)\n\n return new_list\n\nmy_list = [1,2,3,3,4,5,5,5,6,7,7]\nmy_list = remove_duplicates(my_list)\nprint(my_list)\n# [1, 2, 3, 4, 5, 6, 7]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function that removes duplicate elements from a given list and returns a list with unique elements.\n\n### Input:\nmy_list = [1,2,3,3,4,5,5,5,6,7,7]\n\n### Output:\ndef remove_duplicates(my_list):\n new_list = []\n\n for item in my_list:\n if item not in new_list:\n new_list.append(item)\n\n return new_list\n\nmy_list = [1,2,3,3,4,5,5,5,6,7,7]\nmy_list = remove_duplicates(my_list)\nprint(my_list)\n# [1, 2, 3, 4, 5, 6, 7]"}
{"instruction":"Optimize the following Python code to print the numbers in reverse.","input":"for i in range(1,11):\n    print(i)","output":"for i in reversed(range(1,11)):\n    print(i)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python code to print the numbers in reverse.\n\n### Input:\nfor i in range(1,11):\n    print(i)\n\n### Output:\nfor i in reversed(range(1,11)):\n    print(i)"}
{"instruction":"Develop a function in Python that takes a list of numbers as an argument and returns the difference between the maximum and minimum value.","input":"[3, 4, 7, 8, 12]","output":"def maxMinDifference(arr):\n    return max(arr)-min(arr)\n\nresult = maxMinDifference([3, 4, 7, 8, 12])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python that takes a list of numbers as an argument and returns the difference between the maximum and minimum value.\n\n### Input:\n[3, 4, 7, 8, 12]\n\n### Output:\ndef maxMinDifference(arr):\n    return max(arr)-min(arr)\n\nresult = maxMinDifference([3, 4, 7, 8, 12])\nprint(result)"}
{"instruction":"Write a Python program that takes a string input representing an arithmetic expression and calculates the result.","input":"\"(20 * 8) + (2 * 4)\"","output":"def evaluate(expression):\n    try:\n        return eval(expression)\n    except SyntaxError:\n        print('Invalid expression.')\n\nprint(evaluate(\"(20 * 8) + (2 * 4)\"))\n\nOutput: 164.0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a string input representing an arithmetic expression and calculates the result.\n\n### Input:\n\"(20 * 8) + (2 * 4)\"\n\n### Output:\ndef evaluate(expression):\n    try:\n        return eval(expression)\n    except SyntaxError:\n        print('Invalid expression.')\n\nprint(evaluate(\"(20 * 8) + (2 * 4)\"))\n\nOutput: 164.0"}
{"instruction":"Create a program in Python to measure the performance of a code snippet. The program should measure the execution time for a piece of code and display the results in milliseconds.","input":"def add(x,y):\n    return x+y","output":"import time\ndef measure_performance(fn, data):\n start = time.perf_counter()\n result = fn(*data)\n elapsed = 1000 * (time.perf_counter() - start) \n return result, elapsed\n\ndef add(x, y):\n return x + y\n\ndata = (3, 5)\nresult, elapsed = measure_performance(add, data)\nprint('Result:', result)\nprint('Elapsed time (ms):', elapsed)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to measure the performance of a code snippet. The program should measure the execution time for a piece of code and display the results in milliseconds.\n\n### Input:\ndef add(x,y):\n    return x+y\n\n### Output:\nimport time\ndef measure_performance(fn, data):\n start = time.perf_counter()\n result = fn(*data)\n elapsed = 1000 * (time.perf_counter() - start) \n return result, elapsed\n\ndef add(x, y):\n return x + y\n\ndata = (3, 5)\nresult, elapsed = measure_performance(add, data)\nprint('Result:', result)\nprint('Elapsed time (ms):', elapsed)"}
{"instruction":"Can you build a neural network model in Python that classifies a set of hand-written digits?","input":"","output":"# Import the necessary libraries\nimport matplotlib.pyplot as plt\nfrom keras.datasets import mnist \nfrom keras.models import Sequential\nfrom keras.layers import Dense \n\n# Load the datasets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# Reshape the input\nX_train = X_train.reshape(60000, 784)\nX_test = X_test.reshape(10000, 784)\n\n# Build a fully-connected neural network \nmodel = Sequential()\nmodel.add(Dense(units=64, activation='relu', input_dim=784))\nmodel.add(Dense(units=10, activation='softmax'))\n\n# Compile the model \nmodel.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, batch_size=32, epochs=3, verbose=1)\n\n# Test the model by evaluating on the test data \nscore = model.evaluate(X_test, y_test, verbose=1)\n\n# Summary \nprint(\"Test accuracy: \", score[1])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you build a neural network model in Python that classifies a set of hand-written digits?\n\n### Input:\n\n\n### Output:\n# Import the necessary libraries\nimport matplotlib.pyplot as plt\nfrom keras.datasets import mnist \nfrom keras.models import Sequential\nfrom keras.layers import Dense \n\n# Load the datasets\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# Reshape the input\nX_train = X_train.reshape(60000, 784)\nX_test = X_test.reshape(10000, 784)\n\n# Build a fully-connected neural network \nmodel = Sequential()\nmodel.add(Dense(units=64, activation='relu', input_dim=784))\nmodel.add(Dense(units=10, activation='softmax'))\n\n# Compile the model \nmodel.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, batch_size=32, epochs=3, verbose=1)\n\n# Test the model by evaluating on the test data \nscore = model.evaluate(X_test, y_test, verbose=1)\n\n# Summary \nprint(\"Test accuracy: \", score[1])"}
{"instruction":"Write a function in Python to generate a list of integers from 0 to 10,000, inclusive.","input":"Not applicable","output":"def generate_list():  \n  my_list = []\n  for i in range(0, 10001):\n    my_list.append(i)\n\n  return my_list","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to generate a list of integers from 0 to 10,000, inclusive.\n\n### Input:\nNot applicable\n\n### Output:\ndef generate_list():  \n  my_list = []\n  for i in range(0, 10001):\n    my_list.append(i)\n\n  return my_list"}
{"instruction":"Construct a script in Bash that can install a given software.","input":"Python 3.8.5","output":"#!\/bin\/bash\n\n# Download latest version of Python\ncurl -O https:\/\/www.python.org\/ftp\/python\/3.8.5\/Python-3.8.5.tgz\n\n# Extract the tgz file\ntar -xzf Python-3.8.5.tgz\n\n# Move into the Python directory\ncd Python-3.8.5\n\n# Run the configure script\n.\/configure\n\n# Compile and install\nmake\nmake install","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a script in Bash that can install a given software.\n\n### Input:\nPython 3.8.5\n\n### Output:\n#!\/bin\/bash\n\n# Download latest version of Python\ncurl -O https:\/\/www.python.org\/ftp\/python\/3.8.5\/Python-3.8.5.tgz\n\n# Extract the tgz file\ntar -xzf Python-3.8.5.tgz\n\n# Move into the Python directory\ncd Python-3.8.5\n\n# Run the configure script\n.\/configure\n\n# Compile and install\nmake\nmake install"}
{"instruction":"Write a Python program to remove all whitespace from a string.","input":"The quick brown fox jumps over the lazy dog","output":"text_without_whitespace = \"\".join(text.split())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to remove all whitespace from a string.\n\n### Input:\nThe quick brown fox jumps over the lazy dog\n\n### Output:\ntext_without_whitespace = \"\".join(text.split())"}
{"instruction":"Create a python program that encrypts a message.","input":"message = 'Hello World!'","output":"#library to generate random numbers \nimport random \n#library to perform string operations  \nimport string \n# function to encrypt the string  \ndef encryptMessage(message): \n    # convert message to uppercase \n    message = message.upper()  \n    # make a list of possible characters \n    chars = string.ascii_uppercase  \n    #stores the encrypted form of the message \n    encryptedMessage = \"\" \n    # loops through the message \n    for char in message: \n        if char in chars: \n            # finds the corresponding position of character \n            position = chars.find(char) \n            # takes a random element from alphabet list \n            newposition = random.randrange(0,26) \n            # replace the character by the character in new position \n            encryptedMessage += chars[newposition] \n    return encryptedMessage \n# Driver Code \nencryptedMessage = encryptMessage(message)  \nprint(encryptedMessage)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that encrypts a message.\n\n### Input:\nmessage = 'Hello World!'\n\n### Output:\n#library to generate random numbers \nimport random \n#library to perform string operations  \nimport string \n# function to encrypt the string  \ndef encryptMessage(message): \n    # convert message to uppercase \n    message = message.upper()  \n    # make a list of possible characters \n    chars = string.ascii_uppercase  \n    #stores the encrypted form of the message \n    encryptedMessage = \"\" \n    # loops through the message \n    for char in message: \n        if char in chars: \n            # finds the corresponding position of character \n            position = chars.find(char) \n            # takes a random element from alphabet list \n            newposition = random.randrange(0,26) \n            # replace the character by the character in new position \n            encryptedMessage += chars[newposition] \n    return encryptedMessage \n# Driver Code \nencryptedMessage = encryptMessage(message)  \nprint(encryptedMessage)"}
{"instruction":"Create a Python program to count the occurrence of each character in a given string and return a dictionary object.","input":"","output":"def count_characters(string):\n    chars = {}\n    for char in string:\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    return chars","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to count the occurrence of each character in a given string and return a dictionary object.\n\n### Input:\n\n\n### Output:\ndef count_characters(string):\n    chars = {}\n    for char in string:\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    return chars"}
{"instruction":"From the input, create Python code that checks if a given number is a palindrome or not.","input":"num = 12321","output":"def is_palindrome(num):\n    \"\"\"Check if a given number is a palindrome or not\"\"\"\n    str_num = str(num)\n    length = len(str_num)\n    if length % 2 == 0:\n        left = str_num[:length\/\/2]\n        right = str_num[length\/\/2:]\n        right_rev = right[::-1]\n        return left == right_rev\n    else:\n        left = str_num[:length\/\/2]\n        middle = str_num[length\/\/2]\n        right = str_num[(length\/\/2)+1:]\n        right_rev = right[::-1]\n        return left == right_rev and middle == middle","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFrom the input, create Python code that checks if a given number is a palindrome or not.\n\n### Input:\nnum = 12321\n\n### Output:\ndef is_palindrome(num):\n    \"\"\"Check if a given number is a palindrome or not\"\"\"\n    str_num = str(num)\n    length = len(str_num)\n    if length % 2 == 0:\n        left = str_num[:length\/\/2]\n        right = str_num[length\/\/2:]\n        right_rev = right[::-1]\n        return left == right_rev\n    else:\n        left = str_num[:length\/\/2]\n        middle = str_num[length\/\/2]\n        right = str_num[(length\/\/2)+1:]\n        right_rev = right[::-1]\n        return left == right_rev and middle == middle"}
{"instruction":"Write a Python program to detect and remove the first vowel from a given string.","input":"string = \"this is a test string\"","output":"def removeVowel(string):\n # define a set of vowels \n vowels = {'a', 'e', 'i', 'o', 'u'}\n \n # loop through each character of the string \n for i in range(len(string)): \n # check if the character is a vowel \n if string[i] in vowels: \n # return the modified string \n return string[:i] + string[i + 1:]\n \nreturn string\n \nstring = \"this is a test string\"\nprint(removeVowel(string))\n# Output: thrs is a test strng","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to detect and remove the first vowel from a given string.\n\n### Input:\nstring = \"this is a test string\"\n\n### Output:\ndef removeVowel(string):\n # define a set of vowels \n vowels = {'a', 'e', 'i', 'o', 'u'}\n \n # loop through each character of the string \n for i in range(len(string)): \n # check if the character is a vowel \n if string[i] in vowels: \n # return the modified string \n return string[:i] + string[i + 1:]\n \nreturn string\n \nstring = \"this is a test string\"\nprint(removeVowel(string))\n# Output: thrs is a test strng"}
{"instruction":"In Python, generate a script to find the length of a given list.","input":"Input List: [1, 3, 5, 7, 9]","output":"def lengthList(arr):\n    length = 0\n    for i in arr:\n        length += 1\n    return length\n \nprint(lengthList([1, 3, 5, 7, 9])) # Outputs: 5","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, generate a script to find the length of a given list.\n\n### Input:\nInput List: [1, 3, 5, 7, 9]\n\n### Output:\ndef lengthList(arr):\n    length = 0\n    for i in arr:\n        length += 1\n    return length\n \nprint(lengthList([1, 3, 5, 7, 9])) # Outputs: 5"}
{"instruction":"Create a Python function that takes a list of strings as input and returns the longest string in the list.","input":"['Data', 'Science', 'Machine', 'Learning']","output":"def find_longest_string(string_list):\n    longest_string = ''\n    for string in string_list:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes a list of strings as input and returns the longest string in the list.\n\n### Input:\n['Data', 'Science', 'Machine', 'Learning']\n\n### Output:\ndef find_longest_string(string_list):\n    longest_string = ''\n    for string in string_list:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"}
{"instruction":"Assign a constant to the value of Pi in a Python program.","input":"","output":"PI = 3.141592653589793","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAssign a constant to the value of Pi in a Python program.\n\n### Input:\n\n\n### Output:\nPI = 3.141592653589793"}
{"instruction":"Develop a Python program to compare two given lists and remove any duplicate elements from the list.","input":"","output":"def remove_duplicates(list1, list2): \n    # Merge two lists into a single list\n    combined_list = list1 + list2\n    # Create a new empty list\n    new_list = [] \n    \n    # Iterate over the combined list  \n    for element in combined_list: \n        # If element is not present in new_list  \n        if element not in new_list: \n            new_list.append(element) \n    return new_list \n\n# Main Program\nlist1 = [11, 7, 10, 2, 4]\nlist2 = [10, 5, 8, 11]\n\nnew_list = remove_duplicates(list1, list2)\n\nprint(\"The resulting list is: \", new_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to compare two given lists and remove any duplicate elements from the list.\n\n### Input:\n\n\n### Output:\ndef remove_duplicates(list1, list2): \n    # Merge two lists into a single list\n    combined_list = list1 + list2\n    # Create a new empty list\n    new_list = [] \n    \n    # Iterate over the combined list  \n    for element in combined_list: \n        # If element is not present in new_list  \n        if element not in new_list: \n            new_list.append(element) \n    return new_list \n\n# Main Program\nlist1 = [11, 7, 10, 2, 4]\nlist2 = [10, 5, 8, 11]\n\nnew_list = remove_duplicates(list1, list2)\n\nprint(\"The resulting list is: \", new_list)"}
{"instruction":"Create a Python function that takes an integer as an input and returns all positive integers less than the input number.","input":"Integer: 10","output":"def get_pos_int(num):\n    pos_ints = []\n    for i in range(num):\n        if i > 0:\n            pos_ints.append(i)\n    return pos_ints\n\npos_ints = get_pos_int(10)\nprint(pos_ints)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes an integer as an input and returns all positive integers less than the input number.\n\n### Input:\nInteger: 10\n\n### Output:\ndef get_pos_int(num):\n    pos_ints = []\n    for i in range(num):\n        if i > 0:\n            pos_ints.append(i)\n    return pos_ints\n\npos_ints = get_pos_int(10)\nprint(pos_ints)"}
{"instruction":"Write a function in Python to find the number of prime numbers up to a given number.","input":"100","output":"def countPrimes(num): \n    if num <= 1:  \n        return 0\n \n    primes = [2] \n    x = 3\n    \n    while x <= num: \n        for y in primes: \n            if x % y == 0: \n                x += 2\n                continue\n        primes.append(x) \n        x += 2\n    \n    return len(primes) \n\nnum_primes = countPrimes(100)\nprint(\"Number of primes between 1 and 100:\", num_primes)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to find the number of prime numbers up to a given number.\n\n### Input:\n100\n\n### Output:\ndef countPrimes(num): \n    if num <= 1:  \n        return 0\n \n    primes = [2] \n    x = 3\n    \n    while x <= num: \n        for y in primes: \n            if x % y == 0: \n                x += 2\n                continue\n        primes.append(x) \n        x += 2\n    \n    return len(primes) \n\nnum_primes = countPrimes(100)\nprint(\"Number of primes between 1 and 100:\", num_primes)"}
{"instruction":"Design a recursive function in Python that prints the nth Fibonacci number.","input":"","output":"def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1 \n    else:\n        return fibonacci(n-1) + fibonacci(n-2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a recursive function in Python that prints the nth Fibonacci number.\n\n### Input:\n\n\n### Output:\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1 \n    else:\n        return fibonacci(n-1) + fibonacci(n-2)"}
{"instruction":"Declare a Python class that demonstrates inheritance.","input":"","output":"class ParentClass:\n    def __init__(self):\n        self.message = 'Hello, Parent'\n\nclass ChildClass(ParentClass):\n    def __init__(self):\n        ParentClass.__init__(self)\n        self.message = 'Hello, Child'\n\nobj = ChildClass()\nprint(obj.message) \/\/Prints 'Hello, Child'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDeclare a Python class that demonstrates inheritance.\n\n### Input:\n\n\n### Output:\nclass ParentClass:\n    def __init__(self):\n        self.message = 'Hello, Parent'\n\nclass ChildClass(ParentClass):\n    def __init__(self):\n        ParentClass.__init__(self)\n        self.message = 'Hello, Child'\n\nobj = ChildClass()\nprint(obj.message) \/\/Prints 'Hello, Child'"}
{"instruction":"Build a deep learning model in Python to classify the sentiment of different movie reviews.","input":"Dataset: The IMDB dataset which contains 25000 positive and 25000 negative reviews.","output":"import tensorflow as tf\n\ntf.compat.v1.enable_eager_execution() \n\n# Load training data\n\ntrain_data = tf.keras.datasets.imdb.load_data('imdb.npz', num_words=10000)\ntrain_data[0]\n\n# Preprocess data\n\ntrain_x = tf.keras.preprocessing.sequence.pad_sequences(train_data[0], maxlen=500)\ntrain_y = train_data[1]\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(10000, 64),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nmodel.fit(train_x, train_y, epochs=10)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a deep learning model in Python to classify the sentiment of different movie reviews.\n\n### Input:\nDataset: The IMDB dataset which contains 25000 positive and 25000 negative reviews.\n\n### Output:\nimport tensorflow as tf\n\ntf.compat.v1.enable_eager_execution() \n\n# Load training data\n\ntrain_data = tf.keras.datasets.imdb.load_data('imdb.npz', num_words=10000)\ntrain_data[0]\n\n# Preprocess data\n\ntrain_x = tf.keras.preprocessing.sequence.pad_sequences(train_data[0], maxlen=500)\ntrain_y = train_data[1]\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(10000, 64),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nmodel.fit(train_x, train_y, epochs=10)"}
{"instruction":"Write a python program to generate random passwords of 8 characters, containing uppercase and lowercase alphabets and numbers.","input":"","output":"import string\nimport random\n\ndef generate_password():\n    characters = string.ascii_letters + string.digits\n    return ''.join(random.choice(characters) for i in range (8)) \n\nprint(generate_password())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to generate random passwords of 8 characters, containing uppercase and lowercase alphabets and numbers.\n\n### Input:\n\n\n### Output:\nimport string\nimport random\n\ndef generate_password():\n    characters = string.ascii_letters + string.digits\n    return ''.join(random.choice(characters) for i in range (8)) \n\nprint(generate_password())"}
{"instruction":"Develop a function to delete duplicates from a given string in Python.","input":"string=\"mississippi\"","output":"def remove_duplicates(string):\n    new_string = \"\"\n    for char in string:\n        if char not in new_string:\n            new_string += char\n    return new_string\n\nno_duplicates = remove_duplicates(\"mississippi\")\nprint(no_duplicates)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function to delete duplicates from a given string in Python.\n\n### Input:\nstring=\"mississippi\"\n\n### Output:\ndef remove_duplicates(string):\n    new_string = \"\"\n    for char in string:\n        if char not in new_string:\n            new_string += char\n    return new_string\n\nno_duplicates = remove_duplicates(\"mississippi\")\nprint(no_duplicates)"}
{"instruction":"Write a python program that displays all prime numbers up to 100","input":"","output":"# Print all prime numbers up to 100\n\nfor num in range(2,101):  \n   if all(num%i!=0 for i in range(2,num)):\n      print(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that displays all prime numbers up to 100\n\n### Input:\n\n\n### Output:\n# Print all prime numbers up to 100\n\nfor num in range(2,101):  \n   if all(num%i!=0 for i in range(2,num)):\n      print(num)"}
{"instruction":"Design a web application in Python that reads a web page and counts the total number of words in the page.","input":"","output":"import requests \nfrom bs4 import BeautifulSoup \nimport re\n\n# Fetch the web page \npage = requests.get(\"THE_WEBPAGE_URL\") \n# Parse the content of the page\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Find all visible text in the page \ntext = soup.find_all(text=True)\n\n# Remove text inside scripts and style tags\nfor t in text: \n    if t.parent.name in ['style', 'script', 'head', 'title', 'meta', '[document]']: \n        text.remove(t)\n\n# Remove extra spaces\ntext_string = \" \".join(text)\ntext_string = re.sub('\\s+', ' ', text_string)\n\n# Count the total number of words \nword_count = len(text_string.split()) \n\nprint(\"Total number of words:\", word_count)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a web application in Python that reads a web page and counts the total number of words in the page.\n\n### Input:\n\n\n### Output:\nimport requests \nfrom bs4 import BeautifulSoup \nimport re\n\n# Fetch the web page \npage = requests.get(\"THE_WEBPAGE_URL\") \n# Parse the content of the page\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Find all visible text in the page \ntext = soup.find_all(text=True)\n\n# Remove text inside scripts and style tags\nfor t in text: \n    if t.parent.name in ['style', 'script', 'head', 'title', 'meta', '[document]']: \n        text.remove(t)\n\n# Remove extra spaces\ntext_string = \" \".join(text)\ntext_string = re.sub('\\s+', ' ', text_string)\n\n# Count the total number of words \nword_count = len(text_string.split()) \n\nprint(\"Total number of words:\", word_count)"}
{"instruction":"Can you provide a Python code snippet to generate a random integer between 1 and 10, inclusive?","input":"","output":"import random\n\nrandom_int = random.randint(1, 10)\nprint(random_int)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you provide a Python code snippet to generate a random integer between 1 and 10, inclusive?\n\n### Input:\n\n\n### Output:\nimport random\n\nrandom_int = random.randint(1, 10)\nprint(random_int)"}
{"instruction":"Use a GPT model to generate a Python function for calculating the area of a triangle.","input":"Not applicable","output":"def area_of_triangle(base, height):\n return 0.5 * base * height\n\n# Calculate the area of triangle\na = area_of_triangle(5, 4)\nprint('The area of the triangle is: ', a)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse a GPT model to generate a Python function for calculating the area of a triangle.\n\n### Input:\nNot applicable\n\n### Output:\ndef area_of_triangle(base, height):\n return 0.5 * base * height\n\n# Calculate the area of triangle\na = area_of_triangle(5, 4)\nprint('The area of the triangle is: ', a)"}
{"instruction":"Code a function in Python to find the maximum value in a dictionary.","input":"","output":"def max_in_dictionary(dic):\n    max_value = float('-inf')\n    for key,value in dic.items():\n        if value > max_value:\n            max_value = value\n    return max_value","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a function in Python to find the maximum value in a dictionary.\n\n### Input:\n\n\n### Output:\ndef max_in_dictionary(dic):\n    max_value = float('-inf')\n    for key,value in dic.items():\n        if value > max_value:\n            max_value = value\n    return max_value"}
{"instruction":"Execute the following python program","input":"# Sum of elements of the given list \ndef sumEle(lst): \n    sum = 0\n    for ele in lst: \n        sum += ele \n    return sum","output":"The output of the code is 12.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExecute the following python program\n\n### Input:\n# Sum of elements of the given list \ndef sumEle(lst): \n    sum = 0\n    for ele in lst: \n        sum += ele \n    return sum\n\n### Output:\nThe output of the code is 12."}
{"instruction":"Write a Python program to get the latest news article from a news website.","input":"Not applicable","output":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/example.com\/news'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'lxml')\n\nlatest_news = soup.find('div', id='latest_news')\nlatest_article = latest_news.find('h2')\n\nprint(latest_article.text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to get the latest news article from a news website.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/example.com\/news'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'lxml')\n\nlatest_news = soup.find('div', id='latest_news')\nlatest_article = latest_news.find('h2')\n\nprint(latest_article.text)"}
{"instruction":"Build a Python class that can generate a random password of length 10 with at least 1 uppercase character, 1 lowercase character, 1 digit and 1 special character.","input":"","output":"import random\nimport string\n\nclass PasswordGenerator:\n    def __init__(self, length=10):\n        self.length = length\n    \n    def generate_password(self):\n        chars = string.ascii_letters + string.digits + '!@#$%^&*()?'\n        random_chars = ''.join(random.sample(chars, self.length))\n        \n        uppercase_chars = [char for char in random_chars if char.isupper()]\n        lowercase_chars = [char for char in random_chars if char.islower()]\n        digits = [char for char in random_chars if char.isdigit()]\n        special_chars = [char for char in random_chars if not char.isalnum()]\n        \n        if len(uppercase_chars) >=1 and len(lowercase_chars) >=1 and len(digits) >= 1 and len(special_chars) >= 1:\n            return random_chars\n        else:\n            return self.generate_password()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python class that can generate a random password of length 10 with at least 1 uppercase character, 1 lowercase character, 1 digit and 1 special character.\n\n### Input:\n\n\n### Output:\nimport random\nimport string\n\nclass PasswordGenerator:\n    def __init__(self, length=10):\n        self.length = length\n    \n    def generate_password(self):\n        chars = string.ascii_letters + string.digits + '!@#$%^&*()?'\n        random_chars = ''.join(random.sample(chars, self.length))\n        \n        uppercase_chars = [char for char in random_chars if char.isupper()]\n        lowercase_chars = [char for char in random_chars if char.islower()]\n        digits = [char for char in random_chars if char.isdigit()]\n        special_chars = [char for char in random_chars if not char.isalnum()]\n        \n        if len(uppercase_chars) >=1 and len(lowercase_chars) >=1 and len(digits) >= 1 and len(special_chars) >= 1:\n            return random_chars\n        else:\n            return self.generate_password()"}
{"instruction":"Design a python function that finds the closest palindrome to a given number.","input":"","output":"def findClosestPalindrome(num):\n    # Convert number to string\n    num_str = str(num)\n    # Get length of number\n    length = len(num_str)\n\n    # Initialize solution\n    solution = None\n\n    # Loop over all possible number of same length\n    for i in range(10**length):\n        temp_str = str(i).zfill(length)\n        # Check if number is palindrome\n        if temp_str == temp_str[::-1]:\n            diff = abs(i-num)\n            if solution is None or diff < solution[1]:\n                solution = (i, diff)\n\n    # Return the closest palindrome\n    return solution[0]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python function that finds the closest palindrome to a given number.\n\n### Input:\n\n\n### Output:\ndef findClosestPalindrome(num):\n    # Convert number to string\n    num_str = str(num)\n    # Get length of number\n    length = len(num_str)\n\n    # Initialize solution\n    solution = None\n\n    # Loop over all possible number of same length\n    for i in range(10**length):\n        temp_str = str(i).zfill(length)\n        # Check if number is palindrome\n        if temp_str == temp_str[::-1]:\n            diff = abs(i-num)\n            if solution is None or diff < solution[1]:\n                solution = (i, diff)\n\n    # Return the closest palindrome\n    return solution[0]"}
{"instruction":"Create a Python program for analyzing the sentiment of given text. The program should categorize the text into positive, negative, and neutral sentiments.","input":"Not applicable","output":"import nltk\nfrom nltk.tokenize import sent_tokenize\nfrom nltk.classify import NaiveBayesClassifier\n\ndef analyze_sentiment(text):\n    sents = sent_tokenize(text)\n    neg = 0\n    pos = 0\n    for sentence in sents:\n        sentiment_analysis = NaiveBayesClassifier.classify(sentence)\n        if sentiment_analysis == 'neg':\n            neg += 1\n        if sentiment_analysis == 'pos':\n            pos += 1\n    \n    if neg > pos:\n        sentiment = 'negative'\n    elif pos > neg:\n        sentiment = 'positive'\n    else:\n        sentiment = 'neutral'\n    \n    return sentiment\n\n# End analyze sentiment definition","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for analyzing the sentiment of given text. The program should categorize the text into positive, negative, and neutral sentiments.\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\nfrom nltk.tokenize import sent_tokenize\nfrom nltk.classify import NaiveBayesClassifier\n\ndef analyze_sentiment(text):\n    sents = sent_tokenize(text)\n    neg = 0\n    pos = 0\n    for sentence in sents:\n        sentiment_analysis = NaiveBayesClassifier.classify(sentence)\n        if sentiment_analysis == 'neg':\n            neg += 1\n        if sentiment_analysis == 'pos':\n            pos += 1\n    \n    if neg > pos:\n        sentiment = 'negative'\n    elif pos > neg:\n        sentiment = 'positive'\n    else:\n        sentiment = 'neutral'\n    \n    return sentiment\n\n# End analyze sentiment definition"}
{"instruction":"Generate a random set of 10 numbers between 1 and 100 in Python.","input":"Not applicable","output":"import random\n\nrandom_nums = random.sample(range(1,101), 10)\nprint(random_nums)\n\n\/\/ Output: [45, 76, 70, 83, 24, 53, 22, 81, 77, 71]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random set of 10 numbers between 1 and 100 in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\nrandom_nums = random.sample(range(1,101), 10)\nprint(random_nums)\n\n\/\/ Output: [45, 76, 70, 83, 24, 53, 22, 81, 77, 71]"}
{"instruction":"Create a Python program to sort a list of tuples based on the second elements of the tuples.","input":"l = [(1, 3), (2, 5), (4, 1), (6, 4)]","output":"def sortTuples(l): \n    l.sort(key = lambda x: x[1]) \n    return l\n \n# Sample Output \n# [(4, 1), (1, 3), (6, 4), (2, 5)] \nprint(sortTuples(l))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to sort a list of tuples based on the second elements of the tuples.\n\n### Input:\nl = [(1, 3), (2, 5), (4, 1), (6, 4)]\n\n### Output:\ndef sortTuples(l): \n    l.sort(key = lambda x: x[1]) \n    return l\n \n# Sample Output \n# [(4, 1), (1, 3), (6, 4), (2, 5)] \nprint(sortTuples(l))"}
{"instruction":"Generate a Python code to print all the permutations of an array.","input":"","output":"def permutation(arr):\n    if not arr:\n        return []\n    elif len(arr) == 1:\n        return [arr]\n    else:\n        l = []\n        for i in range(len(arr)):\n            data = arr[i]\n            remainders = arr[:i] + arr[i+1:]\n            for p in permutation(remainders):\n                l.append([data] + p)\n        return l","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code to print all the permutations of an array.\n\n### Input:\n\n\n### Output:\ndef permutation(arr):\n    if not arr:\n        return []\n    elif len(arr) == 1:\n        return [arr]\n    else:\n        l = []\n        for i in range(len(arr)):\n            data = arr[i]\n            remainders = arr[:i] + arr[i+1:]\n            for p in permutation(remainders):\n                l.append([data] + p)\n        return l"}
{"instruction":"Write a Python program to generate all possible strings by rearranging the characters of a given string.","input":"String = \"ABC\"","output":"def generate_all_strings(string):\n   if len(string) == 1: \n       return [string]\n    result = []\n    for i, letter in enumerate(string):\n        for permutation in generate_all_strings(string[:i] + string[i+1:]):\n            result += [letter + permutation]\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate all possible strings by rearranging the characters of a given string.\n\n### Input:\nString = \"ABC\"\n\n### Output:\ndef generate_all_strings(string):\n   if len(string) == 1: \n       return [string]\n    result = []\n    for i, letter in enumerate(string):\n        for permutation in generate_all_strings(string[:i] + string[i+1:]):\n            result += [letter + permutation]\n    return result"}
{"instruction":"Generate an optimization algorithm with Python using the scipy.optimize library.","input":"An array of values for parameters a, b and c, and an optimization goal of maximizing the function f(x) = a * x + b * sin(c * x).","output":"from scipy.optimize import minimize\nimport numpy as np\n\n# define the parameters\na, b, c = <array of values for parameters a, b and c>\n\n# define the objective function\ndef f(x):\n return a * x + b * np.sin(c * x)\n\n# optimize\nresult = minimize(f, 0, method='BFGS')\n\n# print the results\nprint(result.x)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an optimization algorithm with Python using the scipy.optimize library.\n\n### Input:\nAn array of values for parameters a, b and c, and an optimization goal of maximizing the function f(x) = a * x + b * sin(c * x).\n\n### Output:\nfrom scipy.optimize import minimize\nimport numpy as np\n\n# define the parameters\na, b, c = <array of values for parameters a, b and c>\n\n# define the objective function\ndef f(x):\n return a * x + b * np.sin(c * x)\n\n# optimize\nresult = minimize(f, 0, method='BFGS')\n\n# print the results\nprint(result.x)"}
{"instruction":"Using the given Python data, create dictionaries of all students and all courses with the corresponding IDs as keys.","input":"students = [('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)]\ncourses = [('math', 'B', 18), ('science', 'A', 20)]","output":"student_dict = {'john': {'grade': 'A', 'age': 15},\n 'jane': {'grade': 'B', 'age': 12},\n 'dave': {'grade': 'B', 'age': 10}}\n\ncourses_dict = {'math': {'grade': 'B', 'duration': 18},\n 'science': {'grade': 'A', 'duration': 20}}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the given Python data, create dictionaries of all students and all courses with the corresponding IDs as keys.\n\n### Input:\nstudents = [('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)]\ncourses = [('math', 'B', 18), ('science', 'A', 20)]\n\n### Output:\nstudent_dict = {'john': {'grade': 'A', 'age': 15},\n 'jane': {'grade': 'B', 'age': 12},\n 'dave': {'grade': 'B', 'age': 10}}\n\ncourses_dict = {'math': {'grade': 'B', 'duration': 18},\n 'science': {'grade': 'A', 'duration': 20}}"}
{"instruction":"Create a Python program which takes a list of strings as input and outputs a dictionary containing the count of each string.","input":"A list of strings including:\n['Python', 'Java', 'C', 'Python', 'JavaScript']","output":"string_list = ['Python', 'Java', 'C', 'Python', 'JavaScript']\n\nstring_dict = {}\nfor string in string_list:\n if string in string_dict:\n string_dict[string] += 1\n else:\n string_dict[string] = 1\n\nprint(string_dict) # Output: {'Python': 2, 'Java': 2, 'C': 1, 'JavaScript': 1}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program which takes a list of strings as input and outputs a dictionary containing the count of each string.\n\n### Input:\nA list of strings including:\n['Python', 'Java', 'C', 'Python', 'JavaScript']\n\n### Output:\nstring_list = ['Python', 'Java', 'C', 'Python', 'JavaScript']\n\nstring_dict = {}\nfor string in string_list:\n if string in string_dict:\n string_dict[string] += 1\n else:\n string_dict[string] = 1\n\nprint(string_dict) # Output: {'Python': 2, 'Java': 2, 'C': 1, 'JavaScript': 1}"}
{"instruction":"Generate Python code to render a web page.","input":"","output":"import webbrowser \n\nurl = \"http:\/\/example.com\/\" \n\n# open url in new window, with autoraise \n# possible options are: \n# 1. open a browser window \n# 2. open a new tab \n# 3. open a background tab \n\nwebbrowser.open_new_tab(url + 'page.html')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to render a web page.\n\n### Input:\n\n\n### Output:\nimport webbrowser \n\nurl = \"http:\/\/example.com\/\" \n\n# open url in new window, with autoraise \n# possible options are: \n# 1. open a browser window \n# 2. open a new tab \n# 3. open a background tab \n\nwebbrowser.open_new_tab(url + 'page.html')"}
{"instruction":"Create a basic RNN model using Keras in Python that can generate text.","input":"Not applicable","output":"import keras\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Embedding, LSTM, Dense, Dropout\nfrom keras.models import Sequential\n\n#Data loading and preprocessing\ntext = open('text_file.txt').read()\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts([text])\nencoded = tokenizer.texts_to_sequences([text])[0]\n\n# Generating sequences\nsequence_length = 15\nsequences = list()\nfor i in range(sequence_length, len(encoded)):\n    seq = encoded[i-sequence_length:i]\n    line = ' '.join(map(str, seq))\n    sequences.append(line)\n\n# Generate model\nmodel = Sequential()\nmodel.add(Embedding(20000, 128, input_length=sequence_length)) \nmodel.add(LSTM(256)) \nmodel.add(Dense(500, activation='relu')) \nmodel.add(Dense(20000, activation='softmax')) \nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(sequences, encoded, epochs=50, verbose=2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic RNN model using Keras in Python that can generate text.\n\n### Input:\nNot applicable\n\n### Output:\nimport keras\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Embedding, LSTM, Dense, Dropout\nfrom keras.models import Sequential\n\n#Data loading and preprocessing\ntext = open('text_file.txt').read()\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts([text])\nencoded = tokenizer.texts_to_sequences([text])[0]\n\n# Generating sequences\nsequence_length = 15\nsequences = list()\nfor i in range(sequence_length, len(encoded)):\n    seq = encoded[i-sequence_length:i]\n    line = ' '.join(map(str, seq))\n    sequences.append(line)\n\n# Generate model\nmodel = Sequential()\nmodel.add(Embedding(20000, 128, input_length=sequence_length)) \nmodel.add(LSTM(256)) \nmodel.add(Dense(500, activation='relu')) \nmodel.add(Dense(20000, activation='softmax')) \nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(sequences, encoded, epochs=50, verbose=2)"}
{"instruction":"Create a python script to print the following patterns in the output","input":"","output":"def print_pattern(n): \n      \n    k = 0\n    for i in range(1, n+1): \n        # logic to print pattern\n        for j in range(i, n+1): \n            print(\"* \", end=\"\") \n        k = 0\n        for j in range(1, i*2): \n            if k == 0: \n                print(i, end=\"\")\n                k += 1\n            else: \n                print(\"$\", end=\"\")\n        print() \n   \nif __name__ == '__main__':\n    print_pattern(4)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to print the following patterns in the output\n\n### Input:\n\n\n### Output:\ndef print_pattern(n): \n      \n    k = 0\n    for i in range(1, n+1): \n        # logic to print pattern\n        for j in range(i, n+1): \n            print(\"* \", end=\"\") \n        k = 0\n        for j in range(1, i*2): \n            if k == 0: \n                print(i, end=\"\")\n                k += 1\n            else: \n                print(\"$\", end=\"\")\n        print() \n   \nif __name__ == '__main__':\n    print_pattern(4)"}
{"instruction":"Generate a program that translates a program written in one language to another language","input":"The following code is written in Javascript:\n\nfunction doubleValue(num) {\n return num * 2;\n}","output":"def doubleValue(num):\n return num * 2\n \n# Javascript to Python \n\ndef doubleValue(num): \n return num * 2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program that translates a program written in one language to another language\n\n### Input:\nThe following code is written in Javascript:\n\nfunction doubleValue(num) {\n return num * 2;\n}\n\n### Output:\ndef doubleValue(num):\n return num * 2\n \n# Javascript to Python \n\ndef doubleValue(num): \n return num * 2"}
{"instruction":"Use a machine learning model in Python to predict whether a song belongs to a given genre.","input":"Sample datasets for the genre, artist, and song","output":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\n\n# Load the dataset\ndata = pd.read_csv(\"data.csv\")\n\n# Split the dataset into training and testing sets\nX = data.drop(['genre', 'artist', 'song'], axis=1)\ny = data['genre']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Encode the labels\nencoder = LabelEncoder()\ny_train = encoder.fit_transform(y_train)\ny_test = encoder.transform(y_test)\n\n# Train a Support Vector Classifier model\nclf = SVC(kernel='linear')\nclf.fit(X_train, y_train)\n\n# Make predictions\ny_pred = clf.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse a machine learning model in Python to predict whether a song belongs to a given genre.\n\n### Input:\nSample datasets for the genre, artist, and song\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\n\n# Load the dataset\ndata = pd.read_csv(\"data.csv\")\n\n# Split the dataset into training and testing sets\nX = data.drop(['genre', 'artist', 'song'], axis=1)\ny = data['genre']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Encode the labels\nencoder = LabelEncoder()\ny_train = encoder.fit_transform(y_train)\ny_test = encoder.transform(y_test)\n\n# Train a Support Vector Classifier model\nclf = SVC(kernel='linear')\nclf.fit(X_train, y_train)\n\n# Make predictions\ny_pred = clf.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)"}
{"instruction":"Design a Python algorithm to find the largest element in a list.","input":"lst = [3, 45, 18, 5, 9]","output":"def find_largest_element(lst):\n   largest_element = None\n   for elem in lst:\n      if largest_element is None or largest_element < elem:\n         largest_element = elem\n  return largest_element\n\nlargest_element = find_largest_element(lst)\nprint(largest_element) # 45","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python algorithm to find the largest element in a list.\n\n### Input:\nlst = [3, 45, 18, 5, 9]\n\n### Output:\ndef find_largest_element(lst):\n   largest_element = None\n   for elem in lst:\n      if largest_element is None or largest_element < elem:\n         largest_element = elem\n  return largest_element\n\nlargest_element = find_largest_element(lst)\nprint(largest_element) # 45"}
{"instruction":"Use a Python program to print out the first five odd numbers.","input":"","output":"for num in range(1,11):\n    if num % 2 != 0:\n        print(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse a Python program to print out the first five odd numbers.\n\n### Input:\n\n\n### Output:\nfor num in range(1,11):\n    if num % 2 != 0:\n        print(num)"}
{"instruction":"Create a python script to find and print the most common word in a string.","input":"string = \u201cThe quick brown fox jumps over the lazy dog.\u201d","output":"from collections import Counter\n\ndef most_common_word(string):\n    counter = Counter()\n    for word in string.split():\n        counter[word] += 1\n    most_common = counter.most_common(1)[0]\n    return most_common[0], most_common[1]\n    \nstring = \u201cThe quick brown fox jumps over the lazy dog.\u201d\nmost_common = most_common_word(string)\nprint(f\"The most common word is '{most_common[0]}' and it appears {most_common[1]} times\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to find and print the most common word in a string.\n\n### Input:\nstring = \u201cThe quick brown fox jumps over the lazy dog.\u201d\n\n### Output:\nfrom collections import Counter\n\ndef most_common_word(string):\n    counter = Counter()\n    for word in string.split():\n        counter[word] += 1\n    most_common = counter.most_common(1)[0]\n    return most_common[0], most_common[1]\n    \nstring = \u201cThe quick brown fox jumps over the lazy dog.\u201d\nmost_common = most_common_word(string)\nprint(f\"The most common word is '{most_common[0]}' and it appears {most_common[1]} times\")"}
{"instruction":"Create a for-loop in Python and use it to find the sum of a list of integers.","input":"[1, 4, 9, 16, 25]","output":"total = 0\nfor num in [1, 4, 9, 16, 25]:\n  total += num\nprint(total)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a for-loop in Python and use it to find the sum of a list of integers.\n\n### Input:\n[1, 4, 9, 16, 25]\n\n### Output:\ntotal = 0\nfor num in [1, 4, 9, 16, 25]:\n  total += num\nprint(total)"}
{"instruction":"Write a Python script to calculate the average age of a group of people.","input":"[{'name': 'John', 'age': 25}, {'name': 'Mia', 'age': 28}, {'name': 'Jack', 'age': 33}]","output":"people = [\n    {'name': 'John', 'age': 25}, \n    {'name': 'Mia', 'age': 28}, \n    {'name': 'Jack', 'age': 33}\n]\n\ntotal_age = 0\n\nfor person in people:\n    total_age += person['age']\n\naverage_age = total_age \/ len(people)\n\nprint(\"Average age: {}\".format(average_age))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to calculate the average age of a group of people.\n\n### Input:\n[{'name': 'John', 'age': 25}, {'name': 'Mia', 'age': 28}, {'name': 'Jack', 'age': 33}]\n\n### Output:\npeople = [\n    {'name': 'John', 'age': 25}, \n    {'name': 'Mia', 'age': 28}, \n    {'name': 'Jack', 'age': 33}\n]\n\ntotal_age = 0\n\nfor person in people:\n    total_age += person['age']\n\naverage_age = total_age \/ len(people)\n\nprint(\"Average age: {}\".format(average_age))"}
{"instruction":"Write a Python program to construct a parser to detect an input has errors or not.","input":"Input Code:\n# include <stdio.h>\nvoid main()\n {\n printf(\"Hello World\")\n }","output":"def detect_errors(input_code):\n error_tokens = [\"!\", \"@\", \"#\", \"$\"]\n counter = 0\n for line in input_code.splitlines():\n tokens = line.strip().split()\n if any(x in tokens for x in error_tokens):\n counter += 1\n if counter > 0:\n return True\n else:\n return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to construct a parser to detect an input has errors or not.\n\n### Input:\nInput Code:\n# include <stdio.h>\nvoid main()\n {\n printf(\"Hello World\")\n }\n\n### Output:\ndef detect_errors(input_code):\n error_tokens = [\"!\", \"@\", \"#\", \"$\"]\n counter = 0\n for line in input_code.splitlines():\n tokens = line.strip().split()\n if any(x in tokens for x in error_tokens):\n counter += 1\n if counter > 0:\n return True\n else:\n return False"}
{"instruction":"Generate a function in Python which takes two lists of strings as input and merges the two lists into a single list with unique elements.","input":"list1 = [\"apple\",\"orange\",\"banana\"]\nlist2 = [\"cherry\",\"pineapple\",\"apple\"]","output":"def merge_list(list1, list2):\n    merged_list = list1 + list2\n    final_list = list(dict.fromkeys(merged_list))\n    return final_list\n\nlist1 = [\"apple\",\"orange\",\"banana\"]\nlist2 = [\"cherry\",\"pineapple\",\"apple\"]\n\nresult = merge_list(list1, list2)\nprint(result) # Output: [\"apple\", \"orange\", \"banana\", \"cherry\", \"pineapple\"]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python which takes two lists of strings as input and merges the two lists into a single list with unique elements.\n\n### Input:\nlist1 = [\"apple\",\"orange\",\"banana\"]\nlist2 = [\"cherry\",\"pineapple\",\"apple\"]\n\n### Output:\ndef merge_list(list1, list2):\n    merged_list = list1 + list2\n    final_list = list(dict.fromkeys(merged_list))\n    return final_list\n\nlist1 = [\"apple\",\"orange\",\"banana\"]\nlist2 = [\"cherry\",\"pineapple\",\"apple\"]\n\nresult = merge_list(list1, list2)\nprint(result) # Output: [\"apple\", \"orange\", \"banana\", \"cherry\", \"pineapple\"]"}
{"instruction":"Generate a correct Python program to copy a list.","input":"list_x = [1,2,3,4]","output":"def copy_list(list_x):\n\tlist_y = list_x [:]\n\treturn list_y","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a correct Python program to copy a list.\n\n### Input:\nlist_x = [1,2,3,4]\n\n### Output:\ndef copy_list(list_x):\n\tlist_y = list_x [:]\n\treturn list_y"}
{"instruction":"Create a list in Python from a given list of numbers.","input":"[1, 2, 4, 8, 16]","output":"myList = [1, 2, 4, 8, 16]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a list in Python from a given list of numbers.\n\n### Input:\n[1, 2, 4, 8, 16]\n\n### Output:\nmyList = [1, 2, 4, 8, 16]"}
{"instruction":"Create an end-to-end machine learning system in Python by using a deep neural network to solve a multi-class classification problem.","input":"Not applicable","output":"# Importing Libraries\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Defining Input and Output\nx = np.array([[1, 3], [1, 4], [2, 4], [3, 1], [4, 1], [4, 2]])\ny = np.array([[1], [1], [2], [3], [3], [2]])\n\n# Defining and Compiling the Model\nmodel = Sequential()\nmodel.add(Dense(4, input_dim=2, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Training the Model\nmodel.fit(x, y, epochs=100, batch_size=5)\n\n# Testing the Model\ntest_x = np.array([[5, 2], [4, 3]])\nresults = model.predict(test_x)\nprint(\"Classes predicted: \", np.round(results))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an end-to-end machine learning system in Python by using a deep neural network to solve a multi-class classification problem.\n\n### Input:\nNot applicable\n\n### Output:\n# Importing Libraries\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Defining Input and Output\nx = np.array([[1, 3], [1, 4], [2, 4], [3, 1], [4, 1], [4, 2]])\ny = np.array([[1], [1], [2], [3], [3], [2]])\n\n# Defining and Compiling the Model\nmodel = Sequential()\nmodel.add(Dense(4, input_dim=2, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Training the Model\nmodel.fit(x, y, epochs=100, batch_size=5)\n\n# Testing the Model\ntest_x = np.array([[5, 2], [4, 3]])\nresults = model.predict(test_x)\nprint(\"Classes predicted: \", np.round(results))"}
{"instruction":"Write a function in Python that finds the longest consecutive sequence in a given array.","input":"array = [2, 5, 1, 4, 3, 5, 7, 6]","output":"def find_longest_sequence(arr):\n    max_length = 0\n    start_index = 0\n\n    # find first non-matching element\n    while start_index < len(arr) - 1 and arr[start_index] + 1 == arr[start_index + 1]:\n        start_index += 1\n\n    # compare subsequent elements\n    for i in range(start_index + 1, len(arr)):\n        prev = arr[i-1]\n        curr = arr[i]\n\n        # count length of consecutive sequence\n        if prev + 1 == curr:\n            length = i - start_index + 1\n\n            # update max length\n            if  length > max_length:\n                max_length = length\n        else:\n            # current sequence ended, reset\n            start_index = i\n    return max_length","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that finds the longest consecutive sequence in a given array.\n\n### Input:\narray = [2, 5, 1, 4, 3, 5, 7, 6]\n\n### Output:\ndef find_longest_sequence(arr):\n    max_length = 0\n    start_index = 0\n\n    # find first non-matching element\n    while start_index < len(arr) - 1 and arr[start_index] + 1 == arr[start_index + 1]:\n        start_index += 1\n\n    # compare subsequent elements\n    for i in range(start_index + 1, len(arr)):\n        prev = arr[i-1]\n        curr = arr[i]\n\n        # count length of consecutive sequence\n        if prev + 1 == curr:\n            length = i - start_index + 1\n\n            # update max length\n            if  length > max_length:\n                max_length = length\n        else:\n            # current sequence ended, reset\n            start_index = i\n    return max_length"}
{"instruction":"Write a Python script to extract the text of all comments from a given HTML page.","input":"","output":"from bs4 import BeautifulSoup \n\n# Get the page contents \nwith open('example.html', 'r') as html_file:\n\tsoup = BeautifulSoup(html_file, 'lxml')\n\n# Extract the comments \ncomments = soup.find_all(\"div\", class_=\"comment\")\n\n# Print the extracted comments\nfor comment in comments:\n\tprint(comment.text)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to extract the text of all comments from a given HTML page.\n\n### Input:\n\n\n### Output:\nfrom bs4 import BeautifulSoup \n\n# Get the page contents \nwith open('example.html', 'r') as html_file:\n\tsoup = BeautifulSoup(html_file, 'lxml')\n\n# Extract the comments \ncomments = soup.find_all(\"div\", class_=\"comment\")\n\n# Print the extracted comments\nfor comment in comments:\n\tprint(comment.text)"}
{"instruction":"Write a function in Python that returns an object of the following time and date: Sunday March 7 5:30 PM.","input":"","output":"from datetime import datetime\n\ndef get_date_time():\n    dt = datetime(year=2021, month=3, day=7, hour=17, minute=30)\n    return dt\n\ndate_time = get_date_time()\nprint(date_time) # will output 2021-03-07 17:30:00","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that returns an object of the following time and date: Sunday March 7 5:30 PM.\n\n### Input:\n\n\n### Output:\nfrom datetime import datetime\n\ndef get_date_time():\n    dt = datetime(year=2021, month=3, day=7, hour=17, minute=30)\n    return dt\n\ndate_time = get_date_time()\nprint(date_time) # will output 2021-03-07 17:30:00"}
{"instruction":"Create a supervised Machine Learning classification model in Python to predict the type of animal based on four numerical features.","input":"Not applicable","output":"import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Read the dataset\ndataset = pd.read_csv('dataset.csv')\n\n# Define features and labels\nX = dataset.iloc[:, :4]\ny = dataset.iloc[:, -1]\n\n# Split the dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n\n# Normalize the data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Create and train the model\nmodel = KNeighborsClassifier(n_neighbors=3)\nmodel.fit(X_train, y_train)\n\n# Test the model\naccuracy = model.score(X_test, y_test)\nprint('Accuracy: ', accuracy)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a supervised Machine Learning classification model in Python to predict the type of animal based on four numerical features.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Read the dataset\ndataset = pd.read_csv('dataset.csv')\n\n# Define features and labels\nX = dataset.iloc[:, :4]\ny = dataset.iloc[:, -1]\n\n# Split the dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n\n# Normalize the data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Create and train the model\nmodel = KNeighborsClassifier(n_neighbors=3)\nmodel.fit(X_train, y_train)\n\n# Test the model\naccuracy = model.score(X_test, y_test)\nprint('Accuracy: ', accuracy)"}
{"instruction":"Write a Python program that builds a calculator.","input":"","output":"while True: \n    print(\"Options:\")\n    print(\"Enter 'add' to add two numbers\")\n    print(\"Enter 'subtract' to subtract two numbers\")\n    print(\"Enter 'multiply' to multiply two numbers\")\n    print(\"Enter 'divide' to divide two numbers\")\n    print(\"Enter 'quit' to end the program\")\n    user_input = input(\": \")\n    \n    if user_input == \"quit\":\n        break\n    elif user_input == \"add\":\n        num1 = float(input(\"Enter a number: \"))\n        num2 = float(input(\"Enter another number: \"))\n        result = str(num1 + num2)\n        print(\"The answer is \" + result)\n    elif user_input == \"subtract\":\n        num1 = float(input(\"Enter a number: \"))\n        num2 = float(input(\"Enter another number: \"))\n        result = str(num1 - num2)\n        print(\"The answer is \" + result)\n    elif user_input == \"multiply\":\n        num1 = float(input(\"Enter a number: \"))\n        num2 = float(input(\"Enter another number: \"))\n        result = str(num1 * num2)\n        print(\"The answer is \" + result)\n    elif user_input == \"divide\":\n        num1 = float(input(\"Enter a number: \"))\n        num2 = float(input(\"Enter another number: \"))\n        result = str(num1 \/ num2)\n        print(\"The answer is \" + result)\n    else:\n        print(\"Unknown input\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that builds a calculator.\n\n### Input:\n\n\n### Output:\nwhile True: \n    print(\"Options:\")\n    print(\"Enter 'add' to add two numbers\")\n    print(\"Enter 'subtract' to subtract two numbers\")\n    print(\"Enter 'multiply' to multiply two numbers\")\n    print(\"Enter 'divide' to divide two numbers\")\n    print(\"Enter 'quit' to end the program\")\n    user_input = input(\": \")\n    \n    if user_input == \"quit\":\n        break\n    elif user_input == \"add\":\n        num1 = float(input(\"Enter a number: \"))\n        num2 = float(input(\"Enter another number: \"))\n        result = str(num1 + num2)\n        print(\"The answer is \" + result)\n    elif user_input == \"subtract\":\n        num1 = float(input(\"Enter a number: \"))\n        num2 = float(input(\"Enter another number: \"))\n        result = str(num1 - num2)\n        print(\"The answer is \" + result)\n    elif user_input == \"multiply\":\n        num1 = float(input(\"Enter a number: \"))\n        num2 = float(input(\"Enter another number: \"))\n        result = str(num1 * num2)\n        print(\"The answer is \" + result)\n    elif user_input == \"divide\":\n        num1 = float(input(\"Enter a number: \"))\n        num2 = float(input(\"Enter another number: \"))\n        result = str(num1 \/ num2)\n        print(\"The answer is \" + result)\n    else:\n        print(\"Unknown input\")"}
{"instruction":"Develop a numerical optimization algorithm in Python to minimize the cost of a given function.","input":"The function to be minimized is f(x) = x^2 + 2x + 3","output":"# Import the required libraries\nimport numpy as np\n\n# Define the objective function\ndef f(x):\n return np.square(x) + 2*x + 3\n\n# Define the optimization algorithm\ndef opt(f, x0, lr, n_iter):\n x = x0\n for i in range(n_iter):\n x_prev = x\n grad = 2 * x + 2\n x = x - lr * grad\n if np.abs(x - x_prev) < 1e-5:\n break\n\n# Print the results\nprint(\"Minimum at {} with value {}\".format(x, f(x)))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a numerical optimization algorithm in Python to minimize the cost of a given function.\n\n### Input:\nThe function to be minimized is f(x) = x^2 + 2x + 3\n\n### Output:\n# Import the required libraries\nimport numpy as np\n\n# Define the objective function\ndef f(x):\n return np.square(x) + 2*x + 3\n\n# Define the optimization algorithm\ndef opt(f, x0, lr, n_iter):\n x = x0\n for i in range(n_iter):\n x_prev = x\n grad = 2 * x + 2\n x = x - lr * grad\n if np.abs(x - x_prev) < 1e-5:\n break\n\n# Print the results\nprint(\"Minimum at {} with value {}\".format(x, f(x)))"}
{"instruction":"Create an algorithm in Python to sort a given list of integers from smallest to largest.","input":"[10, 7, 3, 5, 8]","output":"def sort_list(numbers):\n\u00a0\u00a0\u00a0\u00a0numbers.sort()\n\u00a0\u00a0\u00a0\u00a0return numbers","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to sort a given list of integers from smallest to largest.\n\n### Input:\n[10, 7, 3, 5, 8]\n\n### Output:\ndef sort_list(numbers):\n\u00a0\u00a0\u00a0\u00a0numbers.sort()\n\u00a0\u00a0\u00a0\u00a0return numbers"}
{"instruction":"Construct a Python function to convert a string of text to uppercase.","input":"Not applicable","output":"def upper_string(str1):\n    upper_str = ''\n    for i in range(len(str1)):\n        if ord(str1[i]) in range(97, 123):\n            upper_str += chr(ord(str1[i]) - 32)\n        else:\n            upper_str += str1[i]\n    return upper_str","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python function to convert a string of text to uppercase.\n\n### Input:\nNot applicable\n\n### Output:\ndef upper_string(str1):\n    upper_str = ''\n    for i in range(len(str1)):\n        if ord(str1[i]) in range(97, 123):\n            upper_str += chr(ord(str1[i]) - 32)\n        else:\n            upper_str += str1[i]\n    return upper_str"}
{"instruction":"Create a class in Python that encapsulates the information of a given website, including the URL and other meta-data such as the author, copyright, language etc.","input":"","output":"class Website:\n def __init__(self, url, author, copyright, language):\n self.url = url\n self.author = author\n self.copyright = copyright\n self.language = language\n \n def get_url(self):\n return self.url\n \n def get_author(self):\n return self.author\n \n def get_copyright(self):\n return self.copyright\n \n def get_language(self):\n return self.language","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that encapsulates the information of a given website, including the URL and other meta-data such as the author, copyright, language etc.\n\n### Input:\n\n\n### Output:\nclass Website:\n def __init__(self, url, author, copyright, language):\n self.url = url\n self.author = author\n self.copyright = copyright\n self.language = language\n \n def get_url(self):\n return self.url\n \n def get_author(self):\n return self.author\n \n def get_copyright(self):\n return self.copyright\n \n def get_language(self):\n return self.language"}
{"instruction":"Write a Python 3 script that reads input from stdin line by line and prints the number of occurrences of each word.","input":"The quick brown fox jumps over the lazy dog","output":"import sys\n\ndictionary={}\n\nfor line in sys.stdin:\n words_in_line = line.split()\n for word in words_in_line:\n word=word.lower()\n if word in dictionary:\n dictionary[word]+=1\n else:\n dictionary[word]=1\n\nfor word in dictionary:\n print(word +\":\"+ str(dictionary[word]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python 3 script that reads input from stdin line by line and prints the number of occurrences of each word.\n\n### Input:\nThe quick brown fox jumps over the lazy dog\n\n### Output:\nimport sys\n\ndictionary={}\n\nfor line in sys.stdin:\n words_in_line = line.split()\n for word in words_in_line:\n word=word.lower()\n if word in dictionary:\n dictionary[word]+=1\n else:\n dictionary[word]=1\n\nfor word in dictionary:\n print(word +\":\"+ str(dictionary[word]))"}
{"instruction":"Generate a Python function that takes an array of numbers and returns the sum of all the odd numbers in the array.","input":"[2, 4, 5, 6]","output":"def findOddSums(arr):\n    sum = 0\n    for num in arr:\n        if num % 2 != 0:\n            sum += num\n    return sum\n\nodd_sums = findOddSums([2, 4, 5, 6])\nprint(odd_sums)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that takes an array of numbers and returns the sum of all the odd numbers in the array.\n\n### Input:\n[2, 4, 5, 6]\n\n### Output:\ndef findOddSums(arr):\n    sum = 0\n    for num in arr:\n        if num % 2 != 0:\n            sum += num\n    return sum\n\nodd_sums = findOddSums([2, 4, 5, 6])\nprint(odd_sums)"}
{"instruction":"Write a Python program to generate a dictionary that contains numbers (between 1 and n) in the form (x, x*x).","input":"n = 8","output":"nums = {x: x*x for x in range(1, n+1)}\nprint(nums)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a dictionary that contains numbers (between 1 and n) in the form (x, x*x).\n\n### Input:\nn = 8\n\n### Output:\nnums = {x: x*x for x in range(1, n+1)}\nprint(nums)"}
{"instruction":"Create a program to find the Mean, Median and Mode of an array of numbers in Python.","input":"","output":"def mean(numbers):\n    return sum(numbers) \/ len(numbers)\n\ndef median(numbers):\n    numbers.sort()\n    middle_index = int(len(numbers)\/2)\n    if len(numbers) % 2 == 0:\n        return (numbers[middle_index] + numbers[middle_index-1])\/2\n    else:\n        return numbers[middle_index]\n\ndef mode(numbers):\n    max_freq = 0\n    modes = []\n    for num in set(numbers):\n        count = numbers.count(num)\n        if count > max_freq:\n            modes.clear()\n            modes.append(num)\n            max_freq = count\n        elif count == max_freq and num not in modes:\n            modes.append(num)\n    return modes","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to find the Mean, Median and Mode of an array of numbers in Python.\n\n### Input:\n\n\n### Output:\ndef mean(numbers):\n    return sum(numbers) \/ len(numbers)\n\ndef median(numbers):\n    numbers.sort()\n    middle_index = int(len(numbers)\/2)\n    if len(numbers) % 2 == 0:\n        return (numbers[middle_index] + numbers[middle_index-1])\/2\n    else:\n        return numbers[middle_index]\n\ndef mode(numbers):\n    max_freq = 0\n    modes = []\n    for num in set(numbers):\n        count = numbers.count(num)\n        if count > max_freq:\n            modes.clear()\n            modes.append(num)\n            max_freq = count\n        elif count == max_freq and num not in modes:\n            modes.append(num)\n    return modes"}
{"instruction":"Create a Python script to sort the numbers in an array.","input":"[2, 4, 5, 1, 3]","output":"def sort_array(array):\n    array.sort()\n    return array\n\nresult = sort_array([2, 4, 5, 1, 3])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to sort the numbers in an array.\n\n### Input:\n[2, 4, 5, 1, 3]\n\n### Output:\ndef sort_array(array):\n    array.sort()\n    return array\n\nresult = sort_array([2, 4, 5, 1, 3])\nprint(result)"}
{"instruction":"Write a Python function that takes a list of numbers and prints out a list of their squares.","input":"[1, 2, 3]","output":"def squares(arr):\n  res = []\n  for i in arr:\n    res.append(i**2)\n  return res\n\narr = [1, 2, 3]\nres = squares(arr)\nprint(res)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes a list of numbers and prints out a list of their squares.\n\n### Input:\n[1, 2, 3]\n\n### Output:\ndef squares(arr):\n  res = []\n  for i in arr:\n    res.append(i**2)\n  return res\n\narr = [1, 2, 3]\nres = squares(arr)\nprint(res)"}
{"instruction":"Write a Python code to check if the given number is prime.","input":"Number = 23","output":"def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n\/\/2 + 1):\n        if n % i == 0:\n            return False\n    return True\n\nif is_prime(23):\n    print('The given number is prime')\nelse:\n    print('The given number is not prime')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to check if the given number is prime.\n\n### Input:\nNumber = 23\n\n### Output:\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n\/\/2 + 1):\n        if n % i == 0:\n            return False\n    return True\n\nif is_prime(23):\n    print('The given number is prime')\nelse:\n    print('The given number is not prime')"}
{"instruction":"Write a Python program to randomly select an item from a list.","input":"list_of_names = [\"John\", \"Anna\", \"Bill\", \"Kim\", \"Claire\"]","output":"import random\n\nlist_of_names = [\"John\", \"Anna\", \"Bill\", \"Kim\", \"Claire\"]\nrandom_name = random.choice(list_of_names)\n\nprint(f'Randomly selected name from the list: {random_name}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to randomly select an item from a list.\n\n### Input:\nlist_of_names = [\"John\", \"Anna\", \"Bill\", \"Kim\", \"Claire\"]\n\n### Output:\nimport random\n\nlist_of_names = [\"John\", \"Anna\", \"Bill\", \"Kim\", \"Claire\"]\nrandom_name = random.choice(list_of_names)\n\nprint(f'Randomly selected name from the list: {random_name}')"}
{"instruction":"Write a Python program to add numbers from different columns of a multi-dimensional array.","input":"[[1, 2, 3], \n[4, 5, 6], \n[7, 8, 9]]","output":"arr = [[1, 2, 3], \n[4, 5, 6], \n[7, 8, 9]] \n\n# Initialize result \nresult = 0\n\n# Iterate every element in the array \nfor row in arr: \n  for col in row:\n    # Adding elements of each row \n    result = result + col  \n\n# Displaying sum \nprint(result)\n\n# Output: 45","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to add numbers from different columns of a multi-dimensional array.\n\n### Input:\n[[1, 2, 3], \n[4, 5, 6], \n[7, 8, 9]]\n\n### Output:\narr = [[1, 2, 3], \n[4, 5, 6], \n[7, 8, 9]] \n\n# Initialize result \nresult = 0\n\n# Iterate every element in the array \nfor row in arr: \n  for col in row:\n    # Adding elements of each row \n    result = result + col  \n\n# Displaying sum \nprint(result)\n\n# Output: 45"}
{"instruction":"Given two strings s and t, write a Python program to check if t is a substring of s.","input":"s = \"abcabc\"\nt = \"abc\"","output":"def is_substring(s, t):\n    if t in s:\n        return True\n    else:\n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two strings s and t, write a Python program to check if t is a substring of s.\n\n### Input:\ns = \"abcabc\"\nt = \"abc\"\n\n### Output:\ndef is_substring(s, t):\n    if t in s:\n        return True\n    else:\n        return False"}
{"instruction":"Write a Python script to compare two lists of numbers. The output should be the elements in the first list that are not in the second list.","input":"listA = [1, 2, 3, 4, 5]\nlistB = [2, 4, 6, 8, 10]","output":"listC = [x for x in listA if x not in listB]\nprint(listC) # prints [1, 3, 5]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to compare two lists of numbers. The output should be the elements in the first list that are not in the second list.\n\n### Input:\nlistA = [1, 2, 3, 4, 5]\nlistB = [2, 4, 6, 8, 10]\n\n### Output:\nlistC = [x for x in listA if x not in listB]\nprint(listC) # prints [1, 3, 5]"}
{"instruction":"Design an algorithm in Python that finds all the elements of an array that sum to a given number.","input":"Not applicable","output":"def findElements(arr, sum): \n    result = [] \n    for i in range(0,len(arr)-1): \n        for j in range(i + 1, len(arr)): \n            if arr[i] + arr[j] == sum: \n                result.append([arr[i], arr[j]]) \n    return result \n\narr = [3, 5, 2, -4, 8, 11] \nsum = 7\n\nprint(findElements(arr, sum))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that finds all the elements of an array that sum to a given number.\n\n### Input:\nNot applicable\n\n### Output:\ndef findElements(arr, sum): \n    result = [] \n    for i in range(0,len(arr)-1): \n        for j in range(i + 1, len(arr)): \n            if arr[i] + arr[j] == sum: \n                result.append([arr[i], arr[j]]) \n    return result \n\narr = [3, 5, 2, -4, 8, 11] \nsum = 7\n\nprint(findElements(arr, sum))"}
{"instruction":"Write a function in Python to check whether a given string is in lower case or not.","input":"String: ThisIsAnExample","output":"def is_lowercase(string):\n    for character in string:\n        if character != character.lower():\n            return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to check whether a given string is in lower case or not.\n\n### Input:\nString: ThisIsAnExample\n\n### Output:\ndef is_lowercase(string):\n    for character in string:\n        if character != character.lower():\n            return False\n    return True"}
{"instruction":"Create a Python program to generate the powers of two up to a given number.","input":"8","output":"def powersOfTwo(n):\n    powers = []\n    for i in range(n + 1):\n        powers.append(2**i)\n    return powers\n\nn = 8\nprint(powersOfTwo(n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate the powers of two up to a given number.\n\n### Input:\n8\n\n### Output:\ndef powersOfTwo(n):\n    powers = []\n    for i in range(n + 1):\n        powers.append(2**i)\n    return powers\n\nn = 8\nprint(powersOfTwo(n))"}
{"instruction":"Generate a function in Python to check if a given number is a palindrome (a number which remains the same on reversing its digits).","input":"","output":"def isPalindrome(n):\n    temp = n\n    rev = 0\n    while(temp > 0): \n        rev = (rev * 10) + (temp % 10) \n        temp = temp \/\/ 10\n    if n == rev:\n        return True\n    else:\n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python to check if a given number is a palindrome (a number which remains the same on reversing its digits).\n\n### Input:\n\n\n### Output:\ndef isPalindrome(n):\n    temp = n\n    rev = 0\n    while(temp > 0): \n        rev = (rev * 10) + (temp % 10) \n        temp = temp \/\/ 10\n    if n == rev:\n        return True\n    else:\n        return False"}
{"instruction":"Generate code to read data from an Excel spreadsheet.","input":"","output":"Generate code to read data from an Excel spreadsheet using Python's xlrd library. The code should read in the spreadsheet, open the first sheet, and then iterate over each row, reading the data and storing it in a data structure, such as a list. The code should also handle any errors that may arise.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code to read data from an Excel spreadsheet.\n\n### Input:\n\n\n### Output:\nGenerate code to read data from an Excel spreadsheet using Python's xlrd library. The code should read in the spreadsheet, open the first sheet, and then iterate over each row, reading the data and storing it in a data structure, such as a list. The code should also handle any errors that may arise."}
{"instruction":"Write a Python program that generates a random string of 10 characters.","input":"Not applicable","output":"import string\nimport random\n\ndef generate_string(length):\n    letters = string.ascii_letters\n    result_str = ''.join(random.choice(letters) for i in range(length))\n   \n    return result_str\n\nrandom_string = generate_string(10)\n\nprint(random_string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that generates a random string of 10 characters.\n\n### Input:\nNot applicable\n\n### Output:\nimport string\nimport random\n\ndef generate_string(length):\n    letters = string.ascii_letters\n    result_str = ''.join(random.choice(letters) for i in range(length))\n   \n    return result_str\n\nrandom_string = generate_string(10)\n\nprint(random_string)"}
{"instruction":"Write a Python program to calculate the total cost of a meal given the components and the quantity for each component.","input":"Quantity = {'burger': 2, 'fries': 3, 'soda': 2}; Prices = {'burger': 5, 'fries': 2, 'soda': 1}","output":"def calculateCost(quantity, prices):\n    cost = 0\n    for item in quantity:\n        cost += quantity[item] * prices[item]\n    return cost\n\nquantity = {'burger': 2, 'fries': 3, 'soda': 2}\nprices = {'burger': 5, 'fries': 2, 'soda': 1}\n\nresult = calculateCost(quantity, prices)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the total cost of a meal given the components and the quantity for each component.\n\n### Input:\nQuantity = {'burger': 2, 'fries': 3, 'soda': 2}; Prices = {'burger': 5, 'fries': 2, 'soda': 1}\n\n### Output:\ndef calculateCost(quantity, prices):\n    cost = 0\n    for item in quantity:\n        cost += quantity[item] * prices[item]\n    return cost\n\nquantity = {'burger': 2, 'fries': 3, 'soda': 2}\nprices = {'burger': 5, 'fries': 2, 'soda': 1}\n\nresult = calculateCost(quantity, prices)\nprint(result)"}
{"instruction":"Construct a function in Python that takes a string as input, and returns a list of the ten most frequent words in the string.","input":"String: \"Hello World! This is a great day to learn Python and code some beautiful solutions!\"","output":"def most_frequent_words(string):\n    '''\n    Function to find the ten most frequent words in a given string\n    \n    Parameters\n    string: string\n    \n    Returns\n    list of the ten most frequent words\n    '''\n    string = string.lower()\n    words = string.split()\n    word_frequency = {}\n    # populate the word_frequency dictionary\n    for word in words:\n        if word in word_frequency.keys():\n            word_frequency[word] += 1\n        else:\n            word_frequency[word] = 1\n    # sort the dictionary in descending order by frequency\n    sorted_words = sorted(word_frequency.items(), key=lambda kv: kv[1], reverse=True)\n    top_ten = sorted_words[:10]\n    return [word[0] for word in top_ten]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function in Python that takes a string as input, and returns a list of the ten most frequent words in the string.\n\n### Input:\nString: \"Hello World! This is a great day to learn Python and code some beautiful solutions!\"\n\n### Output:\ndef most_frequent_words(string):\n    '''\n    Function to find the ten most frequent words in a given string\n    \n    Parameters\n    string: string\n    \n    Returns\n    list of the ten most frequent words\n    '''\n    string = string.lower()\n    words = string.split()\n    word_frequency = {}\n    # populate the word_frequency dictionary\n    for word in words:\n        if word in word_frequency.keys():\n            word_frequency[word] += 1\n        else:\n            word_frequency[word] = 1\n    # sort the dictionary in descending order by frequency\n    sorted_words = sorted(word_frequency.items(), key=lambda kv: kv[1], reverse=True)\n    top_ten = sorted_words[:10]\n    return [word[0] for word in top_ten]"}
{"instruction":"Create a recursive Python program to find the sum of all the odd numbers between a given number x and 0.","input":"x = 4","output":"def sum_odd_recurse(num):\n    if num == 0:\n        return 0\n    elif num % 2 != 0:\n        return num + sum_odd_recurse(num - 1)\n    else:\n        return sum_odd_recurse(num - 1)\n\n# driver code\nx = 4\nprint(sum_odd_recurse(x)) # Output: 9 (1+3+5)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a recursive Python program to find the sum of all the odd numbers between a given number x and 0.\n\n### Input:\nx = 4\n\n### Output:\ndef sum_odd_recurse(num):\n    if num == 0:\n        return 0\n    elif num % 2 != 0:\n        return num + sum_odd_recurse(num - 1)\n    else:\n        return sum_odd_recurse(num - 1)\n\n# driver code\nx = 4\nprint(sum_odd_recurse(x)) # Output: 9 (1+3+5)"}
{"instruction":"Update the given Python code such that the output will be printed in ascending order.","input":"lst = [3, 1, 4, 5, 2]\n\nfor number in lst:\n    print(number)","output":"lst = [3, 1, 4, 5, 2]\n\nfor number in sorted(lst):\n    print(number)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUpdate the given Python code such that the output will be printed in ascending order.\n\n### Input:\nlst = [3, 1, 4, 5, 2]\n\nfor number in lst:\n    print(number)\n\n### Output:\nlst = [3, 1, 4, 5, 2]\n\nfor number in sorted(lst):\n    print(number)"}
{"instruction":"Classify different programming languages based on their features.","input":"C++, Java, Python, JavaScript","output":"C++:   Object-oriented, compiled language\nJava:  Object-oriented, compiled language\nPython: Object-oriented, interpreted language\nJavaScript: Object-oriented, interpreted language","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nClassify different programming languages based on their features.\n\n### Input:\nC++, Java, Python, JavaScript\n\n### Output:\nC++:   Object-oriented, compiled language\nJava:  Object-oriented, compiled language\nPython: Object-oriented, interpreted language\nJavaScript: Object-oriented, interpreted language"}
{"instruction":"Generate a Python program to produce a poem given a few keywords as input","input":"sky, moon, stars","output":"def create_poem(keywords):\n    poem = \"The night sky is so beautiful \\nFill with stars, moon and \" + keywords[0] + \".\\nNo matter how dark it is now,\\nHope will come if we look above.\"\n    poem += \"\\n\\nThe \" + keywords[0] + \" will shining its light,\\nBring calm and peace in the night.\\nAlong with the stars, and the \" + keywords[1] + \" above,\\nLighting our path and giving us love.\"\n    poem += \"\\n\\nThough life can be hard, don't give up \\nLook above, between the \" + keywords[2] + \". \\nShine through the darkness and keep strong,\\nWe will find hope, just like the sun.\n\n    return poem","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to produce a poem given a few keywords as input\n\n### Input:\nsky, moon, stars\n\n### Output:\ndef create_poem(keywords):\n    poem = \"The night sky is so beautiful \\nFill with stars, moon and \" + keywords[0] + \".\\nNo matter how dark it is now,\\nHope will come if we look above.\"\n    poem += \"\\n\\nThe \" + keywords[0] + \" will shining its light,\\nBring calm and peace in the night.\\nAlong with the stars, and the \" + keywords[1] + \" above,\\nLighting our path and giving us love.\"\n    poem += \"\\n\\nThough life can be hard, don't give up \\nLook above, between the \" + keywords[2] + \". \\nShine through the darkness and keep strong,\\nWe will find hope, just like the sun.\n\n    return poem"}
{"instruction":"Modify the following line of code in Python to generate a list of odd numbers in the range [1,n].","input":"[i for i in range (1, 10)]","output":"[i for i in range (1, 10) if i % 2 != 0]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following line of code in Python to generate a list of odd numbers in the range [1,n].\n\n### Input:\n[i for i in range (1, 10)]\n\n### Output:\n[i for i in range (1, 10) if i % 2 != 0]"}
{"instruction":"Write a code in Python to remove duplicate elements from a list.","input":"[1,2,3,4,2,2,4]","output":"def remove_duplicates(nums):\n  new_list = []\n  for num in nums:\n    if num not in new_list:\n      new_list.append(num)\n  return new_list\n\nprint(remove_duplicates([1,2,3,4,2,2,4]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python to remove duplicate elements from a list.\n\n### Input:\n[1,2,3,4,2,2,4]\n\n### Output:\ndef remove_duplicates(nums):\n  new_list = []\n  for num in nums:\n    if num not in new_list:\n      new_list.append(num)\n  return new_list\n\nprint(remove_duplicates([1,2,3,4,2,2,4]))"}
{"instruction":"Generate a Hangman game in Python.","input":"","output":"import random\n\n# Set the number of turns\nMAX_GUESSES = 5\n\n# Create an empty list that will contain the guessed letters\nguessed_letters = []\n\n# Welcome the user\nprint(\"Welcome to Hangman!\")\n\n# Generate a random word\nwith open(\"words.txt\", \"r\") as f:\n    words = f.read().splitlines()\nword = random.choice(words)\n\n# Create a list for the hidden word\nhidden_word = [\"_\" for i in range(len(word))]\n\n# Main game loop\nfor i in range(MAX_GUESSES):\n    # Print the current state of the game\n    print(\"\\nTurn {}\".format(i+1))\n    print(\" \".join(hidden_word))\n    print(\"Letters guessed: {}\".format(\"\".join(guessed_letters)))\n    \n    # Get a guess from the user\n    guess = input(\"Enter a letter: \")\n    guessed_letters.append(guess)\n    \n    # Update the hidden_word with the guessed letter\n    if guess in word:\n        indices = [i for i, x in enumerate(word) if x == guess]\n        for index in indices:\n            hidden_word[index] = guess\n    \n    # Check if the user won\n    if \"_\" not in hidden_word:\n        print(\"You Win!\")\n        break\n\n# Check for a loss\nif \"_\" in hidden_word:\n    print(\"You Lose! The word was {}.\".format(word))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Hangman game in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\n# Set the number of turns\nMAX_GUESSES = 5\n\n# Create an empty list that will contain the guessed letters\nguessed_letters = []\n\n# Welcome the user\nprint(\"Welcome to Hangman!\")\n\n# Generate a random word\nwith open(\"words.txt\", \"r\") as f:\n    words = f.read().splitlines()\nword = random.choice(words)\n\n# Create a list for the hidden word\nhidden_word = [\"_\" for i in range(len(word))]\n\n# Main game loop\nfor i in range(MAX_GUESSES):\n    # Print the current state of the game\n    print(\"\\nTurn {}\".format(i+1))\n    print(\" \".join(hidden_word))\n    print(\"Letters guessed: {}\".format(\"\".join(guessed_letters)))\n    \n    # Get a guess from the user\n    guess = input(\"Enter a letter: \")\n    guessed_letters.append(guess)\n    \n    # Update the hidden_word with the guessed letter\n    if guess in word:\n        indices = [i for i, x in enumerate(word) if x == guess]\n        for index in indices:\n            hidden_word[index] = guess\n    \n    # Check if the user won\n    if \"_\" not in hidden_word:\n        print(\"You Win!\")\n        break\n\n# Check for a loss\nif \"_\" in hidden_word:\n    print(\"You Lose! The word was {}.\".format(word))"}
{"instruction":"Write a Python program to replace all occurrences of a given string with an alternate string.","input":"\"Hello World!\", \"World\", \"Python\"","output":"def replace_string(input_string, target_string, replacement_string):\n    return input_string.replace(target_string, replacement_string)\n\nprint(replace_string(\"Hello World!\", \"World\", \"Python\"))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to replace all occurrences of a given string with an alternate string.\n\n### Input:\n\"Hello World!\", \"World\", \"Python\"\n\n### Output:\ndef replace_string(input_string, target_string, replacement_string):\n    return input_string.replace(target_string, replacement_string)\n\nprint(replace_string(\"Hello World!\", \"World\", \"Python\"))"}
{"instruction":"Create a Python dictionary with the given list of keys and values.","input":"keys: [chair, table, sofa]\nvalues: [4, 2, 5]","output":"dict = {\n 'chair': 4,\n 'table': 2,\n 'sofa': 5\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python dictionary with the given list of keys and values.\n\n### Input:\nkeys: [chair, table, sofa]\nvalues: [4, 2, 5]\n\n### Output:\ndict = {\n 'chair': 4,\n 'table': 2,\n 'sofa': 5\n}"}
{"instruction":"Convert the given code to a comprehensible, more readable form that follows PEP 8 and Python best practices.","input":"number_list = [-5, 0, 4, 78, -3]\n result = [] \n for i in number_list:\n  if i >= 0:\n   result.append(i ** 2)","output":"number_list = [-5, 0, 4, 78, -3]\nresult = [num ** 2 for num in number_list if num >= 0]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the given code to a comprehensible, more readable form that follows PEP 8 and Python best practices.\n\n### Input:\nnumber_list = [-5, 0, 4, 78, -3]\n result = [] \n for i in number_list:\n  if i >= 0:\n   result.append(i ** 2)\n\n### Output:\nnumber_list = [-5, 0, 4, 78, -3]\nresult = [num ** 2 for num in number_list if num >= 0]"}
{"instruction":"Create a class in Python that defines the concept of a Shape. The class should contain a method to check if an object is a valid shape.","input":"","output":"class Shape:\n  def __init__(self, sides):\n    self.sides = sides\n  \n  def isValid(self):\n    if len(self.sides) >= 3: \n      return True\n    else:\n      return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that defines the concept of a Shape. The class should contain a method to check if an object is a valid shape.\n\n### Input:\n\n\n### Output:\nclass Shape:\n  def __init__(self, sides):\n    self.sides = sides\n  \n  def isValid(self):\n    if len(self.sides) >= 3: \n      return True\n    else:\n      return False"}
{"instruction":"Write a function in Python to perform standard normalization of a given data.","input":"Data:\n[35,45,55,65,75]","output":"def normalize(data):\n    \"\"\"Performs standard normalization of a given data\"\"\"\n    mean = sum(data)\/len(data)\n    std_dev = (sum([(x-mean)**2 for x in data])\/len(data)) ** 0.5\n    return [(x-mean)\/std_dev for x in data]\n\ndata = [35,45,55,65,75]\n\nprint(normalize(data)) # output: [-1.0, -0.5, 0.0, 0.5, 1.0]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to perform standard normalization of a given data.\n\n### Input:\nData:\n[35,45,55,65,75]\n\n### Output:\ndef normalize(data):\n    \"\"\"Performs standard normalization of a given data\"\"\"\n    mean = sum(data)\/len(data)\n    std_dev = (sum([(x-mean)**2 for x in data])\/len(data)) ** 0.5\n    return [(x-mean)\/std_dev for x in data]\n\ndata = [35,45,55,65,75]\n\nprint(normalize(data)) # output: [-1.0, -0.5, 0.0, 0.5, 1.0]"}
{"instruction":"Write a function to find the sum of the prime numbers below n in Python.","input":"","output":"def sum_of_primes(n):\n    '''This function returns the sum of prime numbers below n.'''\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = False\n    primes[1] = False\n    for i in range(2,int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i**2, n, i):\n                primes[j] = False\n    return sum(i for i in range(2, n) if primes[i])\n\nif __name__ == '__main__':\n    n = 10\n    print(sum_of_primes(n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to find the sum of the prime numbers below n in Python.\n\n### Input:\n\n\n### Output:\ndef sum_of_primes(n):\n    '''This function returns the sum of prime numbers below n.'''\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = False\n    primes[1] = False\n    for i in range(2,int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i**2, n, i):\n                primes[j] = False\n    return sum(i for i in range(2, n) if primes[i])\n\nif __name__ == '__main__':\n    n = 10\n    print(sum_of_primes(n))"}
{"instruction":"Create a version of the game 'Tic-tac-toe' using Python.","input":"","output":"# create Tic-tac-toe game\nboard = [None] * 9\n\ndef draw_board(): \n  row1 = \"|{}|{}|{}|\".format(board[0], board[1], board[2])\n  row2 = \"|{}|{}|{}|\".format(board[3], board[4], board[5])\n  row3 = \"|{}|{}|{}|\".format(board[6], board[7], board[8])\n  \n  print()\n  print(row1)\n  print(row2)\n  print(row3)\n  print()\n\ndef get_row_col():\n  row = int(input(\"Enter row: \"))\n  col = int(input(\"Enter col: \"))\n  index = (row * 3) + col\n  return index \n\ndef update_board(icon, index): \n  board[index] = icon\n\ndef is_victory(icon): \n  # check victory across row\n  across1 = (board[0] == icon) and (board[1] == icon) and (board[2] == icon)\n  across2 = (board[3] == icon) and (board[4] == icon) and (board[5] == icon)\n  across3 = (board[6] == icon) and (board[7] == icon) and (board[8] == icon)\n\n  # check victory across column\n  column1 = (board[0] == icon) and (board[3] == icon) and (board[6] == icon)\n  column2 = (board[1] == icon) and (board[4] == icon) and (board[7] == icon)\n  column3 = (board[2] == icon) and (board[5] == icon) and (board[8] == icon)\n\n  # check victory across diagonal\n  diagonal1 = (board[0] == icon) and (board[4] == icon) and (board[8] == icon)\n  diagonal2 = (board[2] == icon) and (board[4] == icon) and (board[6] == icon)\n\n  if (across1 or across2 or across3 or column1 or column2 or column3 or diagonal1 or diagonal2):\n    return True\n  else:\n    return False\n\nwhile True:\n  # player 1 \n  index = get_row_col()\n  update_board(\"X\", index)\n  draw_board()\n\n  if(is_victory(\"X\")):\n    print(\"Player 1 wins\")\n    break\n\n  # player 2\n  index = get_row_col()\n  update_board(\"O\", index)\n  draw_board()\n\n  if(is_victory(\"O\")):\n    print(\"Player 2 wins\")\n    break","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a version of the game 'Tic-tac-toe' using Python.\n\n### Input:\n\n\n### Output:\n# create Tic-tac-toe game\nboard = [None] * 9\n\ndef draw_board(): \n  row1 = \"|{}|{}|{}|\".format(board[0], board[1], board[2])\n  row2 = \"|{}|{}|{}|\".format(board[3], board[4], board[5])\n  row3 = \"|{}|{}|{}|\".format(board[6], board[7], board[8])\n  \n  print()\n  print(row1)\n  print(row2)\n  print(row3)\n  print()\n\ndef get_row_col():\n  row = int(input(\"Enter row: \"))\n  col = int(input(\"Enter col: \"))\n  index = (row * 3) + col\n  return index \n\ndef update_board(icon, index): \n  board[index] = icon\n\ndef is_victory(icon): \n  # check victory across row\n  across1 = (board[0] == icon) and (board[1] == icon) and (board[2] == icon)\n  across2 = (board[3] == icon) and (board[4] == icon) and (board[5] == icon)\n  across3 = (board[6] == icon) and (board[7] == icon) and (board[8] == icon)\n\n  # check victory across column\n  column1 = (board[0] == icon) and (board[3] == icon) and (board[6] == icon)\n  column2 = (board[1] == icon) and (board[4] == icon) and (board[7] == icon)\n  column3 = (board[2] == icon) and (board[5] == icon) and (board[8] == icon)\n\n  # check victory across diagonal\n  diagonal1 = (board[0] == icon) and (board[4] == icon) and (board[8] == icon)\n  diagonal2 = (board[2] == icon) and (board[4] == icon) and (board[6] == icon)\n\n  if (across1 or across2 or across3 or column1 or column2 or column3 or diagonal1 or diagonal2):\n    return True\n  else:\n    return False\n\nwhile True:\n  # player 1 \n  index = get_row_col()\n  update_board(\"X\", index)\n  draw_board()\n\n  if(is_victory(\"X\")):\n    print(\"Player 1 wins\")\n    break\n\n  # player 2\n  index = get_row_col()\n  update_board(\"O\", index)\n  draw_board()\n\n  if(is_victory(\"O\")):\n    print(\"Player 2 wins\")\n    break"}
{"instruction":"Create a program in Python that takes a list of words and an integer n and returns a list of words that appear at least n times in the given list.","input":"words =['a', 'b', 'a', 'c', 'd', 'a', 'x', 'd', 'd']\nn = 3","output":"from collections import Counter\n\ndef frequent_words(words, n):\n    counts = Counter(words)\n    return [word for word, count in counts.items() if count >= n]\n\nresult = frequent_words(words, n)\n\nprint(result) # prints ['a', 'd']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes a list of words and an integer n and returns a list of words that appear at least n times in the given list.\n\n### Input:\nwords =['a', 'b', 'a', 'c', 'd', 'a', 'x', 'd', 'd']\nn = 3\n\n### Output:\nfrom collections import Counter\n\ndef frequent_words(words, n):\n    counts = Counter(words)\n    return [word for word, count in counts.items() if count >= n]\n\nresult = frequent_words(words, n)\n\nprint(result) # prints ['a', 'd']"}
{"instruction":"Automate a task using a python script to create a git pull request.","input":"","output":"# Import necessary libraries\nimport requests\nimport json\n\n# Set authentication credentials\nusername = 'username'\npassword = 'password'\ntoken = 'token'\n\n# Set request headers\nheaders = {\n    'Content-Type': 'application\/json',\n    'Authorization': 'token %s' % token\n}\n\n# Set the data for the request\ndata = {\n    'title': 'My pull request',\n    'head': 'master',\n    'base': 'develop',\n    'body': 'This is the body of my pull request'\n}\n\n# Make the request\nresponse = requests.post('https:\/\/api.github.com\/repos\/username\/repo\/pulls', data=json.dumps(data),\n                         auth=(username, password), headers=headers)\n\n# Check the response\nif response.status_code == 201:\n    print('Pull request created!')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAutomate a task using a python script to create a git pull request.\n\n### Input:\n\n\n### Output:\n# Import necessary libraries\nimport requests\nimport json\n\n# Set authentication credentials\nusername = 'username'\npassword = 'password'\ntoken = 'token'\n\n# Set request headers\nheaders = {\n    'Content-Type': 'application\/json',\n    'Authorization': 'token %s' % token\n}\n\n# Set the data for the request\ndata = {\n    'title': 'My pull request',\n    'head': 'master',\n    'base': 'develop',\n    'body': 'This is the body of my pull request'\n}\n\n# Make the request\nresponse = requests.post('https:\/\/api.github.com\/repos\/username\/repo\/pulls', data=json.dumps(data),\n                         auth=(username, password), headers=headers)\n\n# Check the response\nif response.status_code == 201:\n    print('Pull request created!')"}
{"instruction":"Write a python script to parse a JSON string and create two reports - one containing all the cities in the US and another one containing all the cities in Europe.","input":"jsonString = \"\"\"\n{\n  \"locations\": [\n    {\n      \"name\": \"New York\",\n      \"continent\": \"North America\"\n    },\n    {\n      \"name\": \"Berlin\",\n      \"continent\": \"Europe\"\n    },\n    {\n      \"name\": \"San Francisco\",\n      \"continent\": \"North America\"\n    },\n    {\n      \"name\": \"Paris\",\n      \"continent\": \"Europe\"\n    }\n  ]\n}\n\"\"\"","output":"import json\n\ndata = json.loads(jsonString)\n\nus_cities = []\neurope_cities = []\n\nfor location in data['locations']:\n if location['continent'] == 'North America':\n us_cities.append(location['name'])\n elif location['continent'] == 'Europe':\n europe_cities.append(location['name'])\n\nprint(f'US cities: {us_cities}\\n')\nprint(f'Europe cities: {europe_cities}\\n')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to parse a JSON string and create two reports - one containing all the cities in the US and another one containing all the cities in Europe.\n\n### Input:\njsonString = \"\"\"\n{\n  \"locations\": [\n    {\n      \"name\": \"New York\",\n      \"continent\": \"North America\"\n    },\n    {\n      \"name\": \"Berlin\",\n      \"continent\": \"Europe\"\n    },\n    {\n      \"name\": \"San Francisco\",\n      \"continent\": \"North America\"\n    },\n    {\n      \"name\": \"Paris\",\n      \"continent\": \"Europe\"\n    }\n  ]\n}\n\"\"\"\n\n### Output:\nimport json\n\ndata = json.loads(jsonString)\n\nus_cities = []\neurope_cities = []\n\nfor location in data['locations']:\n if location['continent'] == 'North America':\n us_cities.append(location['name'])\n elif location['continent'] == 'Europe':\n europe_cities.append(location['name'])\n\nprint(f'US cities: {us_cities}\\n')\nprint(f'Europe cities: {europe_cities}\\n')"}
{"instruction":"Create a Python program to count the occurrence of a specific word in a string.","input":"The quick brown fox","output":"def count_occurences(string, word):\n    count = 0\n    words = string.split(' ')\n    for w in words:\n        if w == word:\n            count += 1\n    return count\n \nstring = 'The quick brown fox'\nword = 'The'\n \noccurrences = count_occurences(string, word)\nprint('\"The\" occurs', occurrences , 'times in the string.')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to count the occurrence of a specific word in a string.\n\n### Input:\nThe quick brown fox\n\n### Output:\ndef count_occurences(string, word):\n    count = 0\n    words = string.split(' ')\n    for w in words:\n        if w == word:\n            count += 1\n    return count\n \nstring = 'The quick brown fox'\nword = 'The'\n \noccurrences = count_occurences(string, word)\nprint('\"The\" occurs', occurrences , 'times in the string.')"}
{"instruction":"Write a Python program to take a list of numbers and remove all duplicates.","input":"[5,5,5,2,1,2,3,5]","output":"OldList = [5,5,5,2,1,2,3,5]\nNewList = []\n\nfor Num in OldList:\n    if Num not in NewList:\n        NewList.append(Num)\n\nprint(NewList)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to take a list of numbers and remove all duplicates.\n\n### Input:\n[5,5,5,2,1,2,3,5]\n\n### Output:\nOldList = [5,5,5,2,1,2,3,5]\nNewList = []\n\nfor Num in OldList:\n    if Num not in NewList:\n        NewList.append(Num)\n\nprint(NewList)"}
{"instruction":"Create a natural language processing (NLP) program in Python to classify words into five categories","input":"Not applicable","output":"import nltk\nfrom nltk.classify import maxent\nfrom nltk.tokenize import word_tokenize\n\n# define the categories\nCATEGORIES = ['noun', 'verb', 'adjective', 'adverb', 'other']\n\n# generate training data\ntraining_data = [\n    (\"That's an interesting book.\", {'category': 'noun'}),\n    (\"Can I borrow it?\", {'category': 'verb'}),\n    (\"It's really amazing.\", {'category': 'adjective'}),\n    (\"I'm learning a lot.\", {'category': 'adverb'}),\n    (\"It's blue.\", {'category': 'other'})\n]\n\n# create a feature extractor\ndef extract_features(sentence):\n words = word_tokenize(sentence)\n features = {}\n for w in words:\n features[w.lower()] = True\n return features\n\n# train the classifier\nclassifier = maxent.MaxentClassifier.train(\ntraining_data, 'GIS', trace=0, encoding=None, labels=CATEGORIES\n)\n\n# classify a sentence\nsentence = \"It's yellow.\"\nfeatures = extract_features(sentence)\nlabel = classifier.classify(features)\n\n# print the result\nprint(label) # other","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a natural language processing (NLP) program in Python to classify words into five categories\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\nfrom nltk.classify import maxent\nfrom nltk.tokenize import word_tokenize\n\n# define the categories\nCATEGORIES = ['noun', 'verb', 'adjective', 'adverb', 'other']\n\n# generate training data\ntraining_data = [\n    (\"That's an interesting book.\", {'category': 'noun'}),\n    (\"Can I borrow it?\", {'category': 'verb'}),\n    (\"It's really amazing.\", {'category': 'adjective'}),\n    (\"I'm learning a lot.\", {'category': 'adverb'}),\n    (\"It's blue.\", {'category': 'other'})\n]\n\n# create a feature extractor\ndef extract_features(sentence):\n words = word_tokenize(sentence)\n features = {}\n for w in words:\n features[w.lower()] = True\n return features\n\n# train the classifier\nclassifier = maxent.MaxentClassifier.train(\ntraining_data, 'GIS', trace=0, encoding=None, labels=CATEGORIES\n)\n\n# classify a sentence\nsentence = \"It's yellow.\"\nfeatures = extract_features(sentence)\nlabel = classifier.classify(features)\n\n# print the result\nprint(label) # other"}
{"instruction":"Create a Python program that features an endless loop that repeatedly asks the user to input a number between 1 and 10. When the number is valid, the program should output the number plus one.","input":"Not applicable","output":"while True:\n    num = int(input(\"Please input a number between 1 and 10: \"))\n    if num in range(1, 11):\n        print(num + 1)\n    else:\n        print(\"Invalid number!\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that features an endless loop that repeatedly asks the user to input a number between 1 and 10. When the number is valid, the program should output the number plus one.\n\n### Input:\nNot applicable\n\n### Output:\nwhile True:\n    num = int(input(\"Please input a number between 1 and 10: \"))\n    if num in range(1, 11):\n        print(num + 1)\n    else:\n        print(\"Invalid number!\")"}
{"instruction":"What is the code for using the Python Requests module to post data to the server?","input":"URL: \"http:\/\/example.com\/data\"","output":"import requests\n \nurl = \"http:\/\/example.com\/data\"\ndata = {\"name\":\"John Doe\",\"age\":30}\n \nresponse = requests.post(url, data = data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat is the code for using the Python Requests module to post data to the server?\n\n### Input:\nURL: \"http:\/\/example.com\/data\"\n\n### Output:\nimport requests\n \nurl = \"http:\/\/example.com\/data\"\ndata = {\"name\":\"John Doe\",\"age\":30}\n \nresponse = requests.post(url, data = data)"}
{"instruction":"Create an automated execution pipeline for a given task.","input":"Task: Extracting data from UNIX server and storing it in an Oracle database.","output":"Below is a sample automated execution pipeline for a given task. \n\n1. Configure start and end points \u2013 Start by configuring the end points: the UNIX server and Oracle database. \n\n2. Set up data pipeline \u2013 Define how data should be extracted from the UNIX server and stored into the Oracle database. This includes creating tables, setting up database triggers and linking tables with the UNIX server. \n\n3. Configure scheduling \u2013 Set up a scheduling system for the automated data pipeline based on time, date or other factors.\n\n4. Write automated script \u2013 Create a script in the programming language of choice (e.g. Python, Java, C, etc.) to execute the data pipeline. \n\n5. Test the pipeline \u2013 Test the automated data pipeline to ensure it is working correctly. \n\n6. Monitor data pipeline \u2013 Monitor the automated data pipeline to detect any errors or unexpected behaviour.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an automated execution pipeline for a given task.\n\n### Input:\nTask: Extracting data from UNIX server and storing it in an Oracle database.\n\n### Output:\nBelow is a sample automated execution pipeline for a given task. \n\n1. Configure start and end points \u2013 Start by configuring the end points: the UNIX server and Oracle database. \n\n2. Set up data pipeline \u2013 Define how data should be extracted from the UNIX server and stored into the Oracle database. This includes creating tables, setting up database triggers and linking tables with the UNIX server. \n\n3. Configure scheduling \u2013 Set up a scheduling system for the automated data pipeline based on time, date or other factors.\n\n4. Write automated script \u2013 Create a script in the programming language of choice (e.g. Python, Java, C, etc.) to execute the data pipeline. \n\n5. Test the pipeline \u2013 Test the automated data pipeline to ensure it is working correctly. \n\n6. Monitor data pipeline \u2013 Monitor the automated data pipeline to detect any errors or unexpected behaviour."}
{"instruction":"Create a Python program to calculate the average age of students based on their grades.","input":"students = [ \n {'name': 'John', 'grade': 10, 'age': 10},\n {'name': 'Jane', 'grade': 8, 'age': 14},\n {'name': 'Kate', 'grade': 9, 'age': 12}\n]","output":"students = [ \n {'name': 'John', 'grade': 10, 'age': 10},\n {'name': 'Jane', 'grade': 8, 'age': 14},\n {'name': 'Kate', 'grade': 9, 'age': 12}\n]\n\ngrades = [10, 8, 9]\n\nage_sum = 0\n\nfor grade in grades:\n age_sum += [student['age'] for student in students if student['grade'] == grade ][0]\n\nprint('Average age: {}'.format(age_sum\/len(grades)))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the average age of students based on their grades.\n\n### Input:\nstudents = [ \n {'name': 'John', 'grade': 10, 'age': 10},\n {'name': 'Jane', 'grade': 8, 'age': 14},\n {'name': 'Kate', 'grade': 9, 'age': 12}\n]\n\n### Output:\nstudents = [ \n {'name': 'John', 'grade': 10, 'age': 10},\n {'name': 'Jane', 'grade': 8, 'age': 14},\n {'name': 'Kate', 'grade': 9, 'age': 12}\n]\n\ngrades = [10, 8, 9]\n\nage_sum = 0\n\nfor grade in grades:\n age_sum += [student['age'] for student in students if student['grade'] == grade ][0]\n\nprint('Average age: {}'.format(age_sum\/len(grades)))"}
{"instruction":"Develop a Python function to sum an array of integers","input":"[1, 2, 3, 4]","output":"def sumIntArray(arr):\n    arr_sum = 0\n    for num in arr:\n        arr_sum += num\n    return arr_sum\n\narr = [1, 2, 3, 4]\nprint(sumIntArray(arr)) #prints 10","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function to sum an array of integers\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\ndef sumIntArray(arr):\n    arr_sum = 0\n    for num in arr:\n        arr_sum += num\n    return arr_sum\n\narr = [1, 2, 3, 4]\nprint(sumIntArray(arr)) #prints 10"}
{"instruction":"Develop an algorithm in Python to classify an animal based on its weight and size.","input":"weight = 5, size = 40","output":"def classify_animal(weight, size):\n    if weight < 10 and size < 50:\n        return 'small'\n    elif weight >= 10 and size >= 50:\n        return 'large'\n    else:\n        return 'medium'\n\nclassify_animal(5, 40)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to classify an animal based on its weight and size.\n\n### Input:\nweight = 5, size = 40\n\n### Output:\ndef classify_animal(weight, size):\n    if weight < 10 and size < 50:\n        return 'small'\n    elif weight >= 10 and size >= 50:\n        return 'large'\n    else:\n        return 'medium'\n\nclassify_animal(5, 40)"}
{"instruction":"Construct a Python program to check if a given array of numbers is sorted in ascending order or not.","input":"[1, 2, 3, 4]","output":"def is_sorted(arr):\n    return arr == sorted(arr)\n\nprint(is_sorted([1, 2, 3, 4]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to check if a given array of numbers is sorted in ascending order or not.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\ndef is_sorted(arr):\n    return arr == sorted(arr)\n\nprint(is_sorted([1, 2, 3, 4]))"}
{"instruction":"Create a program in Python to remove the duplicates from a given array.","input":"[1, 2, 5, 7, 1, 8, 5, 9, 8]","output":"def remove_duplicates(arr):\n  res = []\n  for i in arr: \n    if i not in res: \n      res.append(i)\n  return res","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to remove the duplicates from a given array.\n\n### Input:\n[1, 2, 5, 7, 1, 8, 5, 9, 8]\n\n### Output:\ndef remove_duplicates(arr):\n  res = []\n  for i in arr: \n    if i not in res: \n      res.append(i)\n  return res"}
{"instruction":"Write a Python script to generate 100 random numbers from 1-10.","input":"Not applicable","output":"import random\n \nrandom_nums = [random.randint(1, 10) for _ in range(100)]\n \nprint(random_nums)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate 100 random numbers from 1-10.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n \nrandom_nums = [random.randint(1, 10) for _ in range(100)]\n \nprint(random_nums)"}
{"instruction":"Generate a valid Python 3 cURL request to the OpenWeatherMap API for current weather information.","input":"A city name, \"Paris\".","output":"import requests \n  \n# defining the api-endpoint \nAPI_ENDPOINT = \"https:\/\/api.openweathermap.org\/data\/2.5\/weather\"\n  \n# data to be sent to api \ndata = {\"q\" : \"Paris\", \"appid\" : YOUR_API_KEY} \n  \n# sending post request and saving response as response object \nr = requests.get(url = API_ENDPOINT, params = data) \n  \n# extracting response text  \npastebin_url = r.text \nprint(\"The current weather for Paris is :%s\"%pastebin_url)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a valid Python 3 cURL request to the OpenWeatherMap API for current weather information.\n\n### Input:\nA city name, \"Paris\".\n\n### Output:\nimport requests \n  \n# defining the api-endpoint \nAPI_ENDPOINT = \"https:\/\/api.openweathermap.org\/data\/2.5\/weather\"\n  \n# data to be sent to api \ndata = {\"q\" : \"Paris\", \"appid\" : YOUR_API_KEY} \n  \n# sending post request and saving response as response object \nr = requests.get(url = API_ENDPOINT, params = data) \n  \n# extracting response text  \npastebin_url = r.text \nprint(\"The current weather for Paris is :%s\"%pastebin_url)"}
{"instruction":"Write a Python script to rewrite the four-digit year of birth in the YYYY-MM-DD format.","input":"Year: 1985","output":"def formatYear (birthYear):\n return str(birthYear)+\"-01-01\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to rewrite the four-digit year of birth in the YYYY-MM-DD format.\n\n### Input:\nYear: 1985\n\n### Output:\ndef formatYear (birthYear):\n return str(birthYear)+\"-01-01\""}
{"instruction":"Write a function in Python to return the median of a list of given elements.","input":"list_values = [5, 1, 4, 9, 2]","output":"def getMedian(list_values):\n    # sort the list \n    list_values.sort() \n  \n    # get the length of the list \n    list_len = len(list_values) \n  \n    # check if list is even or odd \n    if list_len % 2 == 0: \n        # if even, get the two middle elements \n        # and calculate the average \n        idx = int((list_len \/ 2) - 1) \n        median = (list_values[idx] + list_values[idx + 1]) \/ 2\n    else: \n        # if odd, get the middle element \n        idx = int(list_len \/ 2) \n        median = list_values[idx] \n      \n    return median","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to return the median of a list of given elements.\n\n### Input:\nlist_values = [5, 1, 4, 9, 2]\n\n### Output:\ndef getMedian(list_values):\n    # sort the list \n    list_values.sort() \n  \n    # get the length of the list \n    list_len = len(list_values) \n  \n    # check if list is even or odd \n    if list_len % 2 == 0: \n        # if even, get the two middle elements \n        # and calculate the average \n        idx = int((list_len \/ 2) - 1) \n        median = (list_values[idx] + list_values[idx + 1]) \/ 2\n    else: \n        # if odd, get the middle element \n        idx = int(list_len \/ 2) \n        median = list_values[idx] \n      \n    return median"}
{"instruction":"Create a Python program that convert a given string to a list of integers.","input":"","output":"def to_int_list(s):\n    return [int(x) for x in s.split(',')]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that convert a given string to a list of integers.\n\n### Input:\n\n\n### Output:\ndef to_int_list(s):\n    return [int(x) for x in s.split(',')]"}
{"instruction":"Generate a class in Python that takes three parameters: name, age, and gender.","input":"","output":"class Person:\n  def __init__(self, name, age, gender):\n    self.name = name\n    self.age = age\n    self.gender = gender\n    \n    def display_person(self):\n      print(\"Name: \" + self.name + \"\\nAge: \" + str(self.age) + \"\\nGender: \" + self.gender)\n\nperson = Person(\"John\", 28, \"Male\")\nperson.display_person()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a class in Python that takes three parameters: name, age, and gender.\n\n### Input:\n\n\n### Output:\nclass Person:\n  def __init__(self, name, age, gender):\n    self.name = name\n    self.age = age\n    self.gender = gender\n    \n    def display_person(self):\n      print(\"Name: \" + self.name + \"\\nAge: \" + str(self.age) + \"\\nGender: \" + self.gender)\n\nperson = Person(\"John\", 28, \"Male\")\nperson.display_person()"}
{"instruction":"Create a Python function that calculates the area of a circle.","input":"radius=3","output":"import math\n\ndef area_circle(radius):\n    return math.pi * (radius ** 2)\n    \nprint(area_circle(3))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that calculates the area of a circle.\n\n### Input:\nradius=3\n\n### Output:\nimport math\n\ndef area_circle(radius):\n    return math.pi * (radius ** 2)\n    \nprint(area_circle(3))"}
{"instruction":"This code is an IBM Storwize V7000 autodiscovery script for Zabbix. To use it, run svc_perf_discovery_sender.py with the following options: --debug (to enable debug output), --clusters <svc1>[,<svc2>...] (comma-separated Storwize node list), --user <username> (Storwize V7000 user account with Administrator role), --password <pwd> (user password), and --discovery-types <type1>,[type2] (discovery types: 'volume-mdisk','volume','mdisk','pool'). The script sends volume\/mdisk\/pool LLD JSON data to LLD trapper items \"svc.discovery.<volume-mdisk|volume|mdisk|pool>\" and should be used with \"_Special_Storwize_Perf\" Zabbix template. See also http:\/\/www.zabbix.com\/documentation\/2.0\/manual\/discovery\/low_level_discovery.","input":"","output":"#!\/usr\/bin\/python\n# -*- coding: utf-8 -*- # coding: utf-8\n#\n# IBM Storwize V7000 autodiscovery script for Zabbix\n#\n# 2013 Matvey Marinin\n#\n# Sends volume\/mdisk\/pool LLD JSON data to LLD trapper items \"svc.discovery.<volume-mdisk|volume|mdisk|pool>\"\n# Use with \"_Special_Storwize_Perf\" Zabbix template\n#\n# See also http:\/\/www.zabbix.com\/documentation\/2.0\/manual\/discovery\/low_level_discovery\n#\n# Usage:\n# svc_perf_discovery_sender.py [--debug] --clusters <svc1>[,<svc2>...] --user <username> --password <pwd>\n#\n#   --debug    = Enable debug output\n#   --clusters = Comma-separated Storwize node list\n#   --user     = Storwize V7000 user account with Administrator role (it seems that Monitor role is not enough)\n#   --password = User password\n#\nimport pywbem\nimport getopt, sys\nfrom zbxsend import Metric, send_to_zabbix\nimport logging\n\ndef usage():\n  print >> sys.stderr, \"Usage: svc_perf_discovery_sender_zabbix.py [--debug] --clusters <svc1>[,<svc2>...] --user <username> --password <pwd> --discovery-types <type1>,[type2]\"\n  print >> sys.stderr, \"Discovery types: 'volume-mdisk','volume','mdisk','pool'\"\n\n\ntry:\n  opts, args = getopt.gnu_getopt(sys.argv[1:], \"-h\", [\"help\", \"clusters=\", \"user=\", \"password=\", \"debug\", \"discovery-types=\"])\nexcept getopt.GetoptError, err:\n  print >> sys.stderr, str(err)\n  usage()\n  sys.exit(2)\n\ndebug = False\nclusters = []\nDISCOVERY_TYPES = []\nuser = None\npassword = None\nfor o, a in opts:\n  if o == \"--clusters\" and not a.startswith('--'):\n    clusters.extend( a.split(','))\n  elif o == \"--user\" and not a.startswith('--'):\n    user = a\n  elif o == \"--password\" and not a.startswith('--'):\n    password = a\n  elif o == \"--debug\":\n    debug = True\n  elif o == \"--discovery-types\":\n    DISCOVERY_TYPES.extend( a.split(','))\n  elif o in (\"-h\", \"--help\"):\n    usage()\n    sys.exit()\n\nif not clusters:\n  print >> sys.stderr, '--clusters option must be set'\n  usage()\n  sys.exit(2)\n\nif not DISCOVERY_TYPES:\n  print >> sys.stderr, '--discovery-types option must be set'\n  usage()\n  sys.exit(2)\n\nif not user or not password:\n  print >> sys.stderr, '--user and --password options must be set'\n  usage()\n  sys.exit(2)\n\ndef debug_print(message):\n  if debug:\n    print message\n\nfor cluster in clusters:\n  debug_print('Connecting to: %s' % cluster)\n  conn = pywbem.WBEMConnection('https:\/\/'+cluster, (user, password), 'root\/ibm')\n  conn.debug = True\n\n  for discovery in DISCOVERY_TYPES:\n    output = []\n\n    if discovery == 'volume-mdisk' or discovery == 'volume':\n      for vol in conn.ExecQuery('WQL', 'select DeviceID, ElementName from IBMTSSVC_StorageVolume'):\n        output.append( '{\"{#TYPE}\":\"%s\", \"{#NAME}\":\"%s\", \"{#ID}\":\"%s\"}' % ('volume', vol.properties['ElementName'].value, vol.properties['DeviceID'].value) )\n\n    if discovery == 'volume-mdisk' or discovery == 'mdisk':\n      for mdisk in conn.ExecQuery('WQL', 'select DeviceID, ElementName from IBMTSSVC_BackendVolume'):\n        output.append( '{\"{#TYPE}\":\"%s\", \"{#NAME}\":\"%s\", \"{#ID}\":\"%s\"}' % ('mdisk', mdisk.properties['ElementName'].value, mdisk.properties['DeviceID'].value) )\n\n    if discovery == 'pool':\n      for pool in conn.ExecQuery('WQL', 'select PoolID, ElementName from IBMTSSVC_ConcreteStoragePool'):\n        output.append( '{\"{#TYPE}\":\"%s\",\"{#NAME}\":\"%s\",\"{#ID}\":\"%s\"}' % ('pool', pool.properties['ElementName'].value, pool.properties['PoolID'].value) )\n\n    json = []\n    json.append('{\"data\":[')\n\n    for i, v in enumerate( output ):\n      if i < len(output)-1:\n        json.append(v+',')\n      else:\n        json.append(v)\n    json.append(']}')\n\n    json_string = ''.join(json)\n    print(json_string)\n\n    trapper_key = 'svc.discovery.%s' % discovery\n    debug_print('Sending to host=%s, key=%s' % (cluster, trapper_key))\n\n    #send json to LLD trapper item with zbxsend module\n    if debug:\n      logging.basicConfig(level=logging.INFO)\n    else:\n      logging.basicConfig(level=logging.WARNING)\n    send_to_zabbix([Metric(cluster, trapper_key, json_string)], 'localhost', 10051)\n    debug_print('')\n\n\n\n\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is an IBM Storwize V7000 autodiscovery script for Zabbix. To use it, run svc_perf_discovery_sender.py with the following options: --debug (to enable debug output), --clusters <svc1>[,<svc2>...] (comma-separated Storwize node list), --user <username> (Storwize V7000 user account with Administrator role), --password <pwd> (user password), and --discovery-types <type1>,[type2] (discovery types: 'volume-mdisk','volume','mdisk','pool'). The script sends volume\/mdisk\/pool LLD JSON data to LLD trapper items \"svc.discovery.<volume-mdisk|volume|mdisk|pool>\" and should be used with \"_Special_Storwize_Perf\" Zabbix template. See also http:\/\/www.zabbix.com\/documentation\/2.0\/manual\/discovery\/low_level_discovery.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/python\n# -*- coding: utf-8 -*- # coding: utf-8\n#\n# IBM Storwize V7000 autodiscovery script for Zabbix\n#\n# 2013 Matvey Marinin\n#\n# Sends volume\/mdisk\/pool LLD JSON data to LLD trapper items \"svc.discovery.<volume-mdisk|volume|mdisk|pool>\"\n# Use with \"_Special_Storwize_Perf\" Zabbix template\n#\n# See also http:\/\/www.zabbix.com\/documentation\/2.0\/manual\/discovery\/low_level_discovery\n#\n# Usage:\n# svc_perf_discovery_sender.py [--debug] --clusters <svc1>[,<svc2>...] --user <username> --password <pwd>\n#\n#   --debug    = Enable debug output\n#   --clusters = Comma-separated Storwize node list\n#   --user     = Storwize V7000 user account with Administrator role (it seems that Monitor role is not enough)\n#   --password = User password\n#\nimport pywbem\nimport getopt, sys\nfrom zbxsend import Metric, send_to_zabbix\nimport logging\n\ndef usage():\n  print >> sys.stderr, \"Usage: svc_perf_discovery_sender_zabbix.py [--debug] --clusters <svc1>[,<svc2>...] --user <username> --password <pwd> --discovery-types <type1>,[type2]\"\n  print >> sys.stderr, \"Discovery types: 'volume-mdisk','volume','mdisk','pool'\"\n\n\ntry:\n  opts, args = getopt.gnu_getopt(sys.argv[1:], \"-h\", [\"help\", \"clusters=\", \"user=\", \"password=\", \"debug\", \"discovery-types=\"])\nexcept getopt.GetoptError, err:\n  print >> sys.stderr, str(err)\n  usage()\n  sys.exit(2)\n\ndebug = False\nclusters = []\nDISCOVERY_TYPES = []\nuser = None\npassword = None\nfor o, a in opts:\n  if o == \"--clusters\" and not a.startswith('--'):\n    clusters.extend( a.split(','))\n  elif o == \"--user\" and not a.startswith('--'):\n    user = a\n  elif o == \"--password\" and not a.startswith('--'):\n    password = a\n  elif o == \"--debug\":\n    debug = True\n  elif o == \"--discovery-types\":\n    DISCOVERY_TYPES.extend( a.split(','))\n  elif o in (\"-h\", \"--help\"):\n    usage()\n    sys.exit()\n\nif not clusters:\n  print >> sys.stderr, '--clusters option must be set'\n  usage()\n  sys.exit(2)\n\nif not DISCOVERY_TYPES:\n  print >> sys.stderr, '--discovery-types option must be set'\n  usage()\n  sys.exit(2)\n\nif not user or not password:\n  print >> sys.stderr, '--user and --password options must be set'\n  usage()\n  sys.exit(2)\n\ndef debug_print(message):\n  if debug:\n    print message\n\nfor cluster in clusters:\n  debug_print('Connecting to: %s' % cluster)\n  conn = pywbem.WBEMConnection('https:\/\/'+cluster, (user, password), 'root\/ibm')\n  conn.debug = True\n\n  for discovery in DISCOVERY_TYPES:\n    output = []\n\n    if discovery == 'volume-mdisk' or discovery == 'volume':\n      for vol in conn.ExecQuery('WQL', 'select DeviceID, ElementName from IBMTSSVC_StorageVolume'):\n        output.append( '{\"{#TYPE}\":\"%s\", \"{#NAME}\":\"%s\", \"{#ID}\":\"%s\"}' % ('volume', vol.properties['ElementName'].value, vol.properties['DeviceID'].value) )\n\n    if discovery == 'volume-mdisk' or discovery == 'mdisk':\n      for mdisk in conn.ExecQuery('WQL', 'select DeviceID, ElementName from IBMTSSVC_BackendVolume'):\n        output.append( '{\"{#TYPE}\":\"%s\", \"{#NAME}\":\"%s\", \"{#ID}\":\"%s\"}' % ('mdisk', mdisk.properties['ElementName'].value, mdisk.properties['DeviceID'].value) )\n\n    if discovery == 'pool':\n      for pool in conn.ExecQuery('WQL', 'select PoolID, ElementName from IBMTSSVC_ConcreteStoragePool'):\n        output.append( '{\"{#TYPE}\":\"%s\",\"{#NAME}\":\"%s\",\"{#ID}\":\"%s\"}' % ('pool', pool.properties['ElementName'].value, pool.properties['PoolID'].value) )\n\n    json = []\n    json.append('{\"data\":[')\n\n    for i, v in enumerate( output ):\n      if i < len(output)-1:\n        json.append(v+',')\n      else:\n        json.append(v)\n    json.append(']}')\n\n    json_string = ''.join(json)\n    print(json_string)\n\n    trapper_key = 'svc.discovery.%s' % discovery\n    debug_print('Sending to host=%s, key=%s' % (cluster, trapper_key))\n\n    #send json to LLD trapper item with zbxsend module\n    if debug:\n      logging.basicConfig(level=logging.INFO)\n    else:\n      logging.basicConfig(level=logging.WARNING)\n    send_to_zabbix([Metric(cluster, trapper_key, json_string)], 'localhost', 10051)\n    debug_print('')\n\n\n\n\n"}
{"instruction":"Given a list of directions, create a Python program to find the maximum cumulative sum of the list.","input":"[3, 8, -2, 10, -6]","output":"def max_sum(arr):\n max_sum = 0\n sum = 0\n for num in arr:\n sum += num\n max_sum = max(max_sum, sum)\n return max_sum\n\nmax_sum([3, 8, -2, 10, -6])  # 17","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of directions, create a Python program to find the maximum cumulative sum of the list.\n\n### Input:\n[3, 8, -2, 10, -6]\n\n### Output:\ndef max_sum(arr):\n max_sum = 0\n sum = 0\n for num in arr:\n sum += num\n max_sum = max(max_sum, sum)\n return max_sum\n\nmax_sum([3, 8, -2, 10, -6])  # 17"}
{"instruction":"Develop a Python script to print the prime factors of a given positive integer.","input":"","output":"def primeFactors(n): \n      \n    factors = []\n    while n % 2 == 0: \n        factors.append(2) \n        n = n \/ 2\n  \n    for i in range(3, int(sqrt(n))+1, 2): \n          \n        while n % i== 0: \n            factors.append(i) \n            n = n \/ i \n          \n    if n > 2: \n        factors.append(n) \n  \n    return factors \n  \nn = 315\nprint(primeFactors(n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to print the prime factors of a given positive integer.\n\n### Input:\n\n\n### Output:\ndef primeFactors(n): \n      \n    factors = []\n    while n % 2 == 0: \n        factors.append(2) \n        n = n \/ 2\n  \n    for i in range(3, int(sqrt(n))+1, 2): \n          \n        while n % i== 0: \n            factors.append(i) \n            n = n \/ i \n          \n    if n > 2: \n        factors.append(n) \n  \n    return factors \n  \nn = 315\nprint(primeFactors(n))"}
{"instruction":"Develop a Python program to sort a given list of strings by length","input":"","output":"def sort_by_length(array):\n    return sorted(array, key=len)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to sort a given list of strings by length\n\n### Input:\n\n\n### Output:\ndef sort_by_length(array):\n    return sorted(array, key=len)"}
{"instruction":"Optimize a Python program to reverse the elements of a list.","input":"my_list = [1, 2, 3, 4, 5]","output":"def reverse_list(l): \n    return [ele for ele in reversed(l)] \n  \nmy_list = [1, 2, 3, 4, 5]\n \nprint(reverse_list(my_list))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Python program to reverse the elements of a list.\n\n### Input:\nmy_list = [1, 2, 3, 4, 5]\n\n### Output:\ndef reverse_list(l): \n    return [ele for ele in reversed(l)] \n  \nmy_list = [1, 2, 3, 4, 5]\n \nprint(reverse_list(my_list))"}
{"instruction":"Given the following JSON input, write a Python program to calculate the average age of all the users.","input":"[\n  {\n  \"name\": \"Alice\",\n  \"age\": 25\n  },\n  {\n  \"name\": \"Bob\",\n  \"age\": 30\n  },\n  {\n  \"name\": \"John\",\n  \"age\": 20\n  }\n]","output":"import json\n\nusers = json.loads(input)\ntotal_age = 0\nfor user in users:\n total_age += user[\"age\"]\n\naverage_age = total_age \/ len(users)\n\nprint(f\"Average age of users is {average_age}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven the following JSON input, write a Python program to calculate the average age of all the users.\n\n### Input:\n[\n  {\n  \"name\": \"Alice\",\n  \"age\": 25\n  },\n  {\n  \"name\": \"Bob\",\n  \"age\": 30\n  },\n  {\n  \"name\": \"John\",\n  \"age\": 20\n  }\n]\n\n### Output:\nimport json\n\nusers = json.loads(input)\ntotal_age = 0\nfor user in users:\n total_age += user[\"age\"]\n\naverage_age = total_age \/ len(users)\n\nprint(f\"Average age of users is {average_age}\")"}
{"instruction":"Generate a Python function to return the elements of a given list in reverse order without using any library.","input":"","output":"def reverse_list(lst): \n  reversed_list = []\n  for i in range(len(lst)-1, -1, -1):\n    reversed_list.append(lst[i])\n  return reversed_list\n\nresult = reverse_list([1,2,3,4,5])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to return the elements of a given list in reverse order without using any library.\n\n### Input:\n\n\n### Output:\ndef reverse_list(lst): \n  reversed_list = []\n  for i in range(len(lst)-1, -1, -1):\n    reversed_list.append(lst[i])\n  return reversed_list\n\nresult = reverse_list([1,2,3,4,5])\nprint(result)"}
{"instruction":"Design an efficient algorithm to sort a list of integers in Python.","input":"[4, 2, 7, 1, 3, 8]","output":"def sort_integers(arr):\n n = len(arr)\n for i in range(n):\n  for j in range(0, n - i - 1):\n   if arr[j] > arr[j + 1]:\n    arr[j], arr[j + 1] = arr[j + 1], arr[j]\n return arr\n\nunsorted_list = [4, 2, 7, 1, 3, 8]\nprint(sort_integers(unsorted_list))\n# Output: [1,2,3,4,7,8]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an efficient algorithm to sort a list of integers in Python.\n\n### Input:\n[4, 2, 7, 1, 3, 8]\n\n### Output:\ndef sort_integers(arr):\n n = len(arr)\n for i in range(n):\n  for j in range(0, n - i - 1):\n   if arr[j] > arr[j + 1]:\n    arr[j], arr[j + 1] = arr[j + 1], arr[j]\n return arr\n\nunsorted_list = [4, 2, 7, 1, 3, 8]\nprint(sort_integers(unsorted_list))\n# Output: [1,2,3,4,7,8]"}
{"instruction":"Create a Python program to detect spam messages using Machine Learning.","input":"Not applicable","output":"import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# read data\ndata = pd.read_csv('data.csv')\n\n# create features\nvectorizer = CountVectorizer()\nfeatures = vectorizer.fit_transform(data.text)\n\n# create and train model\nmodel = MultinomialNB()\nmodel.fit(features, data.label)\n\n# predict labels\npredicted_labels = model.predict(features)\n\n# print results\nprint(predicted_labels)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to detect spam messages using Machine Learning.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# read data\ndata = pd.read_csv('data.csv')\n\n# create features\nvectorizer = CountVectorizer()\nfeatures = vectorizer.fit_transform(data.text)\n\n# create and train model\nmodel = MultinomialNB()\nmodel.fit(features, data.label)\n\n# predict labels\npredicted_labels = model.predict(features)\n\n# print results\nprint(predicted_labels)"}
{"instruction":"Edit the python code to add try-except blocks for any potential error.","input":"def function(num1, num2):\n result = num1\/num2;\n return result;","output":"def function(num1, num2):\n try:\n result = num1\/num2;\n return result;\n except ZeroDivisionError:\n  print(\"Division by 0 not allowed\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the python code to add try-except blocks for any potential error.\n\n### Input:\ndef function(num1, num2):\n result = num1\/num2;\n return result;\n\n### Output:\ndef function(num1, num2):\n try:\n result = num1\/num2;\n return result;\n except ZeroDivisionError:\n  print(\"Division by 0 not allowed\")"}
{"instruction":"Optimize the following Python code to maximize performance.","input":"for row in records:\n    for key, value in row.items():\n        do_something(key, value)","output":"for row in records:\n    for key, value in row.items():\n        try:\n            do_something(key, value)\n        except Exception:\n            pass","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python code to maximize performance.\n\n### Input:\nfor row in records:\n    for key, value in row.items():\n        do_something(key, value)\n\n### Output:\nfor row in records:\n    for key, value in row.items():\n        try:\n            do_something(key, value)\n        except Exception:\n            pass"}
{"instruction":"Implement a decision tree classifier in Python to predict car prices.","input":"[Number_of_Doors, Vehicle_Size, Price]\n\n[2, Small, 12000]\n[4, Small, 18000]\n[4, Large, 20000]\n[4, Small, 25000]","output":"import pandas as pd\nfrom sklearn import tree\n\n# Dataset\ndata = [[2, 'Small', 12000], [4, 'Small', 18000], [4, 'Large', 20000], [4, 'Small', 25000]]\n\n# Columns Headers\ncolumns= ['Number_of_Doors', 'Vehicle_size', 'Price']\n\n# Create Dataframe\ndf = pd.DataFrame(data, columns=columns)\n\n# Create Features\nX = df.iloc[:, :2].values\ny = df.Price\n\n# Create Decision Tree Classifier\nclf = tree.DecisionTreeClassifier().fit(X,y)\n\n# Making Predictions\ntest_data = [[2, 'Small']]\ntest_data_df = pd.DataFrame(test_data, columns=['Number_of_Doors', 'Vehicle_size'])\n \nresult = clf.predict(test_data_df)\n\nprint(result[0])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a decision tree classifier in Python to predict car prices.\n\n### Input:\n[Number_of_Doors, Vehicle_Size, Price]\n\n[2, Small, 12000]\n[4, Small, 18000]\n[4, Large, 20000]\n[4, Small, 25000]\n\n### Output:\nimport pandas as pd\nfrom sklearn import tree\n\n# Dataset\ndata = [[2, 'Small', 12000], [4, 'Small', 18000], [4, 'Large', 20000], [4, 'Small', 25000]]\n\n# Columns Headers\ncolumns= ['Number_of_Doors', 'Vehicle_size', 'Price']\n\n# Create Dataframe\ndf = pd.DataFrame(data, columns=columns)\n\n# Create Features\nX = df.iloc[:, :2].values\ny = df.Price\n\n# Create Decision Tree Classifier\nclf = tree.DecisionTreeClassifier().fit(X,y)\n\n# Making Predictions\ntest_data = [[2, 'Small']]\ntest_data_df = pd.DataFrame(test_data, columns=['Number_of_Doors', 'Vehicle_size'])\n \nresult = clf.predict(test_data_df)\n\nprint(result[0])"}
{"instruction":"Create a program in Python to print out the most frequent word in a given dictionary","input":"d = {'dog':3, 'cat':5, 'bird':4, 'horse':7}","output":"# Initialize a variable for the maximum count\nmax_count = 0\n\n# Initialize a variable for the most frequent word\nmost_frequent_word = \"\"\n\n# Loop the dictionary\nfor key, value in d.items():\n    if value > max_count:\n        max_count = value\n        most_frequent_word = key\n\n# Print the most frequent word\nprint(\"The most frequent word is '{}'\".format(most_frequent_word))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to print out the most frequent word in a given dictionary\n\n### Input:\nd = {'dog':3, 'cat':5, 'bird':4, 'horse':7}\n\n### Output:\n# Initialize a variable for the maximum count\nmax_count = 0\n\n# Initialize a variable for the most frequent word\nmost_frequent_word = \"\"\n\n# Loop the dictionary\nfor key, value in d.items():\n    if value > max_count:\n        max_count = value\n        most_frequent_word = key\n\n# Print the most frequent word\nprint(\"The most frequent word is '{}'\".format(most_frequent_word))"}
{"instruction":"Develop a function in Python that sorts a dictionary by value in descending order.","input":"dictionary = {'a': 10, 'b': 20, 'c': 5}","output":"def sort_dict_by_value(dict): \n    sorted_dict = dict(sorted(dict.items(), key = lambda kv: kv[1], reverse = True)) \n    return sorted_dict\n\nsorted_dict = sort_dict_by_value(dictionary)\nprint(sorted_dict)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python that sorts a dictionary by value in descending order.\n\n### Input:\ndictionary = {'a': 10, 'b': 20, 'c': 5}\n\n### Output:\ndef sort_dict_by_value(dict): \n    sorted_dict = dict(sorted(dict.items(), key = lambda kv: kv[1], reverse = True)) \n    return sorted_dict\n\nsorted_dict = sort_dict_by_value(dictionary)\nprint(sorted_dict)"}
{"instruction":"Implement a basic linear search algorithm in Python that searches a list of numbers for a given target value and returns the index of the target value if it is present, otherwise it returns -1.","input":"arr = [1, 3, 5, 6, 9, 17],\ntarget = 6","output":"def linear_search(arr, target):\n for i in range(len(arr)):\n if arr[i] == target:\n return i\n return -1\n\nprint(linear_search(arr, target)) # 3 (index of 6)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a basic linear search algorithm in Python that searches a list of numbers for a given target value and returns the index of the target value if it is present, otherwise it returns -1.\n\n### Input:\narr = [1, 3, 5, 6, 9, 17],\ntarget = 6\n\n### Output:\ndef linear_search(arr, target):\n for i in range(len(arr)):\n if arr[i] == target:\n return i\n return -1\n\nprint(linear_search(arr, target)) # 3 (index of 6)"}
{"instruction":"Optimize the following Python program to run faster.","input":"def remove_duplicates(lst):\n  s = set()\n  for item in lst:\n    if item in s:\n      pass\n    else:\n      s.add(item)\n  return s\n\nlst = [1, 2, 4, 2, 5, 6, 3, 3]\nnew_list = remove_duplicates(lst)\nprint(new_list)","output":"def remove_duplicates(lst):\n  return list(set(lst))\n\nlst = [1, 2, 4, 2, 5, 6, 3, 3]\nnew_list = remove_duplicates(lst)\nprint(new_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python program to run faster.\n\n### Input:\ndef remove_duplicates(lst):\n  s = set()\n  for item in lst:\n    if item in s:\n      pass\n    else:\n      s.add(item)\n  return s\n\nlst = [1, 2, 4, 2, 5, 6, 3, 3]\nnew_list = remove_duplicates(lst)\nprint(new_list)\n\n### Output:\ndef remove_duplicates(lst):\n  return list(set(lst))\n\nlst = [1, 2, 4, 2, 5, 6, 3, 3]\nnew_list = remove_duplicates(lst)\nprint(new_list)"}
{"instruction":"Generate Python code to print the following output.","input":"","output":"for i in range(1, 6):\n  for j in range(i):\n    print(\"*\", end=\"\")\n  print()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to print the following output.\n\n### Input:\n\n\n### Output:\nfor i in range(1, 6):\n  for j in range(i):\n    print(\"*\", end=\"\")\n  print()"}
{"instruction":"Generate a procedure in the form of a Python script to automate the process of downloading a list of websites.","input":"website_list: [\"www.example.com\", \"www.google.com\", \"www.facebook.com\"]","output":"import requests\n\nfor website in website_list:\n    response = requests.get(website)\n    with open(website.split('.')[0]+'.html', 'wb') as file:\n        file.write(response.content)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a procedure in the form of a Python script to automate the process of downloading a list of websites.\n\n### Input:\nwebsite_list: [\"www.example.com\", \"www.google.com\", \"www.facebook.com\"]\n\n### Output:\nimport requests\n\nfor website in website_list:\n    response = requests.get(website)\n    with open(website.split('.')[0]+'.html', 'wb') as file:\n        file.write(response.content)"}
{"instruction":"Create a function which takes two strings as arguments, concatenates the two strings, and capitalizes the result.","input":"str1 = 'python'\nstr2 = 'programming'","output":"def concat_and_capitalize(str1, str2):\n    result = str1 + str2\n    return result.capitalize()\n\nstr1 = 'python'\nstr2 = 'programming'\nprint(concat_and_capitalize(str1, str2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function which takes two strings as arguments, concatenates the two strings, and capitalizes the result.\n\n### Input:\nstr1 = 'python'\nstr2 = 'programming'\n\n### Output:\ndef concat_and_capitalize(str1, str2):\n    result = str1 + str2\n    return result.capitalize()\n\nstr1 = 'python'\nstr2 = 'programming'\nprint(concat_and_capitalize(str1, str2))"}
{"instruction":"Design a Python script which calculates the minimum number of edits required to convert a string into a palindrome.","input":"\"racecar\"","output":"def palindrome_edit_distance(string):\n    \"\"\"Calculates the number of one-character edit operations required\n    to make a given string a palindrome.\n\n    Args:\n      string (str): The string to be evaluated.\n\n    Returns:\n      int: The number of one-character edit operations required\n      to make the provided string a palindrome.\n    \"\"\"\n    n = len(string)\n \n    # Create a table to store results of subproblems\n    dp = [[0 for x in range(n)] for x in range(n)]\n \n    # Fill d[][] in bottom up manner\n    for gap in range(1, n):\n        for j in range(gap, n):\n            i = j - gap\n            if string[i] == string[j] and gap == 1:\n                dp[i][j] = 0\n            elif string[i] == string[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i][j - 1],   # Insert\n                                   dp[i + 1][j])   # Remove\n \n    # Return the minimum edits\n    return dp[0][n - 1]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script which calculates the minimum number of edits required to convert a string into a palindrome.\n\n### Input:\n\"racecar\"\n\n### Output:\ndef palindrome_edit_distance(string):\n    \"\"\"Calculates the number of one-character edit operations required\n    to make a given string a palindrome.\n\n    Args:\n      string (str): The string to be evaluated.\n\n    Returns:\n      int: The number of one-character edit operations required\n      to make the provided string a palindrome.\n    \"\"\"\n    n = len(string)\n \n    # Create a table to store results of subproblems\n    dp = [[0 for x in range(n)] for x in range(n)]\n \n    # Fill d[][] in bottom up manner\n    for gap in range(1, n):\n        for j in range(gap, n):\n            i = j - gap\n            if string[i] == string[j] and gap == 1:\n                dp[i][j] = 0\n            elif string[i] == string[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i][j - 1],   # Insert\n                                   dp[i + 1][j])   # Remove\n \n    # Return the minimum edits\n    return dp[0][n - 1]"}
{"instruction":"Write a python program to optimize the given objective function.","input":"","output":"from scipy.optimize import minimize \n\ndef obj_func(x):\n    # objective function\n    # ...\n\ndef optimize(): \n    # set up optimization problem\n    x0 = [0.0, 0.0, 0.0] \n    res = minimize(obj_func, x0, method='nelder-mead', options={'xtol': 1e-8, 'disp': True}) \n    return res.x\n\nprint(optimize())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to optimize the given objective function.\n\n### Input:\n\n\n### Output:\nfrom scipy.optimize import minimize \n\ndef obj_func(x):\n    # objective function\n    # ...\n\ndef optimize(): \n    # set up optimization problem\n    x0 = [0.0, 0.0, 0.0] \n    res = minimize(obj_func, x0, method='nelder-mead', options={'xtol': 1e-8, 'disp': True}) \n    return res.x\n\nprint(optimize())"}
{"instruction":"Generate a program in Python to convert a list of integers into a single integer.","input":"list = [1, 2, 3, 4]","output":"def list_to_int(list_of_ints):\n number = 0\n for int in list_of_ints:\n  number = number*10 + int\n return number","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to convert a list of integers into a single integer.\n\n### Input:\nlist = [1, 2, 3, 4]\n\n### Output:\ndef list_to_int(list_of_ints):\n number = 0\n for int in list_of_ints:\n  number = number*10 + int\n return number"}
{"instruction":"Create a text classifier in python to distinguish positive and negative sentiment.","input":"Data set containing 1000 sentences labelled as positive and 1000 sentences labelled as negative.","output":"import nltk\nimport pandas as pd\nimport numpy as np\nimport re\nimport string\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm\n\n# import data\ndata = pd.read_csv('data.csv', sep='\\t')\n\n# clean data\ncorpus = [re.sub(r'[^\\w\\s]','',text.lower()) for text in data['text']]\n\n# tokenize data\ntokenizer = nltk.tokenize.WordPunctTokenizer()\ntokenized_corpus = [tokenizer.tokenize(sent) for sent in corpus]\n\n# create features\nvectorizer = TfidfVectorizer(ngram_range=(1,2))\nX = vectorizer.fit_transform(corpus)\n\n# split data into training and test sets\ny = data['label']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# train model\nclf = svm.SVC()\nclf.fit(X_train,y_train)\n\n# test model\ny_pred = clf.predict(X_test)\n\n# print results\nprint(f'Model accuracy: {np.mean(y_test == y_pred)}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a text classifier in python to distinguish positive and negative sentiment.\n\n### Input:\nData set containing 1000 sentences labelled as positive and 1000 sentences labelled as negative.\n\n### Output:\nimport nltk\nimport pandas as pd\nimport numpy as np\nimport re\nimport string\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm\n\n# import data\ndata = pd.read_csv('data.csv', sep='\\t')\n\n# clean data\ncorpus = [re.sub(r'[^\\w\\s]','',text.lower()) for text in data['text']]\n\n# tokenize data\ntokenizer = nltk.tokenize.WordPunctTokenizer()\ntokenized_corpus = [tokenizer.tokenize(sent) for sent in corpus]\n\n# create features\nvectorizer = TfidfVectorizer(ngram_range=(1,2))\nX = vectorizer.fit_transform(corpus)\n\n# split data into training and test sets\ny = data['label']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# train model\nclf = svm.SVC()\nclf.fit(X_train,y_train)\n\n# test model\ny_pred = clf.predict(X_test)\n\n# print results\nprint(f'Model accuracy: {np.mean(y_test == y_pred)}')"}
{"instruction":"Construct a neural network model in Python to predict the sale numbers of a product.","input":"Product: A\nHistorical data of sales: [3, 4, 2, 6, 5, 10]","output":"model = Sequential()\nmodel.add(Dense(8, activation='relu', input_shape=[6]))\nmodel.add(Dense(1, activation='linear'))\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])\nmodel.fit(x_train, y_train, epochs=500, verbose=False)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a neural network model in Python to predict the sale numbers of a product.\n\n### Input:\nProduct: A\nHistorical data of sales: [3, 4, 2, 6, 5, 10]\n\n### Output:\nmodel = Sequential()\nmodel.add(Dense(8, activation='relu', input_shape=[6]))\nmodel.add(Dense(1, activation='linear'))\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])\nmodel.fit(x_train, y_train, epochs=500, verbose=False)"}
{"instruction":"Create a python class to track frequency of words.","input":"","output":"class FrequencyTracker:\n    def __init__(self):\n        self.dictionary = {}\n    \n    def add_word(self,word):\n        if word in self.dictionary:\n            self.dictionary[word] += 1\n        else:\n            self.dictionary[word] = 1\n    \n    def get_frequency(self,word):\n        if word in self.dictionary:\n            return self.dictionary[word]\n        else:\n            return 0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python class to track frequency of words.\n\n### Input:\n\n\n### Output:\nclass FrequencyTracker:\n    def __init__(self):\n        self.dictionary = {}\n    \n    def add_word(self,word):\n        if word in self.dictionary:\n            self.dictionary[word] += 1\n        else:\n            self.dictionary[word] = 1\n    \n    def get_frequency(self,word):\n        if word in self.dictionary:\n            return self.dictionary[word]\n        else:\n            return 0"}
{"instruction":"Generate a correct Python program that implements a depth-first search algorithm.","input":"","output":"def dfs(graph, node, visited):\n    if node not in visited:\n        visited.append(node)\n        for n in graph[node]:\n            dfs(graph, n, visited)\n    return visited","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a correct Python program that implements a depth-first search algorithm.\n\n### Input:\n\n\n### Output:\ndef dfs(graph, node, visited):\n    if node not in visited:\n        visited.append(node)\n        for n in graph[node]:\n            dfs(graph, n, visited)\n    return visited"}
{"instruction":"Using the NumPy library in Python, calculate the mean of the following array.","input":"array = [2, 4, 7, 8, 9]","output":"import numpy as np\n\narr = np.array([2, 4, 7, 8, 9])\n\nmean = np.mean(arr)\n\nprint(mean) # 6.2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the NumPy library in Python, calculate the mean of the following array.\n\n### Input:\narray = [2, 4, 7, 8, 9]\n\n### Output:\nimport numpy as np\n\narr = np.array([2, 4, 7, 8, 9])\n\nmean = np.mean(arr)\n\nprint(mean) # 6.2"}
{"instruction":"Create a Python program to sort a list of tuples in ascending order by their second element.","input":"[(4, 2), (3, 7), (2, 3)]","output":"def sort_tuples(tup): \n  \n    # reverse = None (Sorts in Ascending order) \n    # key is set to sort using second element of  \n    # sublist lambda has been used \n    tup.sort(key = lambda x: x[1])  \n    return tup  \n  \n# Driver Code \ntuple1 = [(4, 2), (3, 7), (2, 3)]  \nprint(sort_tuples(tuple1))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to sort a list of tuples in ascending order by their second element.\n\n### Input:\n[(4, 2), (3, 7), (2, 3)]\n\n### Output:\ndef sort_tuples(tup): \n  \n    # reverse = None (Sorts in Ascending order) \n    # key is set to sort using second element of  \n    # sublist lambda has been used \n    tup.sort(key = lambda x: x[1])  \n    return tup  \n  \n# Driver Code \ntuple1 = [(4, 2), (3, 7), (2, 3)]  \nprint(sort_tuples(tuple1))"}
{"instruction":"Sort a given list using bubble sort in Python.","input":"list = [3,5,2,4,7,5]","output":"def bubble_sort(list):\n    for i in range(len(list)):\n        for j in range(len(list)-1):\n            if list[j]>list[j+1]:\n                list[j],list[j+1] = list[j+1],list[j]\n    return list\n\nif __name__ == '__main__':\n    list = [3,5,2,4,7,5]\n    print(bubble_sort(list))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSort a given list using bubble sort in Python.\n\n### Input:\nlist = [3,5,2,4,7,5]\n\n### Output:\ndef bubble_sort(list):\n    for i in range(len(list)):\n        for j in range(len(list)-1):\n            if list[j]>list[j+1]:\n                list[j],list[j+1] = list[j+1],list[j]\n    return list\n\nif __name__ == '__main__':\n    list = [3,5,2,4,7,5]\n    print(bubble_sort(list))"}
{"instruction":"Create an AI-powered Python script to optimize any given code.","input":"Example code:\nfunction getResult(a, b, c) {\n return a + b + c;\n}","output":"# Import the required libraries\nfrom dataclasses import dataclass\n\n@dataclass\nclass Params:\n a: int\n b: int\n c: int\n\ndef get_result(params: Params) -> int:\n \"\"\"Returns the sum of the three given numbers\"\"\"\n return params.a + params.b + params.c\n\n# Optimize the code\ndef optimize(fn, params):\n best_score = 0\n best_params = None\n for a in range(params.a - 10, params.a + 10):\n for b in range(params.b - 10, params.b + 10):\n for c in range(params.c - 10, params.c + 10):\n score = fn(Params(a, b , c))\n if score > best_score:\n best_score = score\n best_params = {\n 'a': a,\n 'b': b,\n 'c': c\n }\n return best_params\n\nif __name__ == '__main__':\n # Initialize the parameters\n params = Params(a=1, b=2, c=3)\n # Get the optimized params\n best_params = optimize(get_result, params)\n # Print the optimized result\n print(\"Optimized result: %d\" % get_result(Params(best_params['a'], best_params['b'], best_params['c'])))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI-powered Python script to optimize any given code.\n\n### Input:\nExample code:\nfunction getResult(a, b, c) {\n return a + b + c;\n}\n\n### Output:\n# Import the required libraries\nfrom dataclasses import dataclass\n\n@dataclass\nclass Params:\n a: int\n b: int\n c: int\n\ndef get_result(params: Params) -> int:\n \"\"\"Returns the sum of the three given numbers\"\"\"\n return params.a + params.b + params.c\n\n# Optimize the code\ndef optimize(fn, params):\n best_score = 0\n best_params = None\n for a in range(params.a - 10, params.a + 10):\n for b in range(params.b - 10, params.b + 10):\n for c in range(params.c - 10, params.c + 10):\n score = fn(Params(a, b , c))\n if score > best_score:\n best_score = score\n best_params = {\n 'a': a,\n 'b': b,\n 'c': c\n }\n return best_params\n\nif __name__ == '__main__':\n # Initialize the parameters\n params = Params(a=1, b=2, c=3)\n # Get the optimized params\n best_params = optimize(get_result, params)\n # Print the optimized result\n print(\"Optimized result: %d\" % get_result(Params(best_params['a'], best_params['b'], best_params['c'])))"}
{"instruction":"Given a list of words, construct a python dictionary of all the words with their length as the value.","input":"words = [\"apple\", \"strawberry\", \"coffee\"]","output":"word_lengths = {\n    \"apple\": 5,\n    \"strawberry\": 10,\n    \"coffee\": 6\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of words, construct a python dictionary of all the words with their length as the value.\n\n### Input:\nwords = [\"apple\", \"strawberry\", \"coffee\"]\n\n### Output:\nword_lengths = {\n    \"apple\": 5,\n    \"strawberry\": 10,\n    \"coffee\": 6\n}"}
{"instruction":"Create a Python program that multiplies two input numbers and prints the result.","input":"a = 3\nb = 4","output":"def multiply(a, b):\n    result = a * b\n    print(result)\n\nmultiply(a, b)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that multiplies two input numbers and prints the result.\n\n### Input:\na = 3\nb = 4\n\n### Output:\ndef multiply(a, b):\n    result = a * b\n    print(result)\n\nmultiply(a, b)"}
{"instruction":"Optimize a neural network model in Python using grid search to increase its classification accuracy.","input":"A pre-existing model with associated dataset.","output":"# Importing libraries\nfrom keras import models, layers\nfrom sklearn.model_selection import GridSearchCV\nimport numpy as np\n\n# Creating model\nnum_inputs = X_train.shape[1]\nmodel = models.Sequential()\nmodel.add(layers.Dense(10, activation='relu', input_shape=(num_inputs,)))\nmodel.add(layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n# Creating grid search parameters\nparams = {'optimizer':['sgd', 'adam', 'rmsprop'],\n          'batch_size':[8, 16, 32, 64],\n          'epochs':[10, 20]}\n\n# Running grid search\ngrid_search = GridSearchCV(estimator=model,\n                           param_grid=params)\ngrid_search_results = grid_search.fit(X_train, y_train)\n\n# Outputting best parameters\nprint(\"Best parameters: {}\".format(grid_search_results.best_params_))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a neural network model in Python using grid search to increase its classification accuracy.\n\n### Input:\nA pre-existing model with associated dataset.\n\n### Output:\n# Importing libraries\nfrom keras import models, layers\nfrom sklearn.model_selection import GridSearchCV\nimport numpy as np\n\n# Creating model\nnum_inputs = X_train.shape[1]\nmodel = models.Sequential()\nmodel.add(layers.Dense(10, activation='relu', input_shape=(num_inputs,)))\nmodel.add(layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n# Creating grid search parameters\nparams = {'optimizer':['sgd', 'adam', 'rmsprop'],\n          'batch_size':[8, 16, 32, 64],\n          'epochs':[10, 20]}\n\n# Running grid search\ngrid_search = GridSearchCV(estimator=model,\n                           param_grid=params)\ngrid_search_results = grid_search.fit(X_train, y_train)\n\n# Outputting best parameters\nprint(\"Best parameters: {}\".format(grid_search_results.best_params_))"}
{"instruction":"This code updates a game server cluster in Google Cloud Game Servers. To use it, run the script `update_cluster.py` with the following arguments: `--project-id` (your cloud project ID), `--location` (your realm location), `--realm-id` (your realm ID), and `--cluster-id` (your game server cluster ID). The script will update the specified cluster by changing the labels associated with it.","input":"","output":"#!\/usr\/bin\/env python\n\n# Copyright 2020 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Game Servers sample for updating a game server cluster.\n\nExample usage:\n    python update_cluster.py --project-id <project-id> --location <location> --realm-id <realm-id> --cluster-id <cluster-id>\n\"\"\"\n\nimport argparse\n\nfrom google.cloud import gaming\nfrom google.cloud.gaming_v1.types import game_server_clusters\nfrom google.protobuf import field_mask_pb2 as field_mask\n\n\n# [START cloud_game_servers_cluster_update]\ndef update_cluster(project_id, location, realm_id, cluster_id):\n    \"\"\"Updates a game server cluster.\"\"\"\n\n    client = gaming.GameServerClustersServiceClient()\n\n    request = game_server_clusters.UpdateGameServerClusterRequest(\n        game_server_cluster=game_server_clusters.GameServerCluster(\n            name=f\"projects\/{project_id}\/locations\/{location}\/realms\/{realm_id}\/gameServerClusters\/{cluster_id}\",\n            labels={\"label-key-1\": \"label-value-1\", \"label-key-2\": \"label-value-2\"},\n        ),\n        update_mask=field_mask.FieldMask(paths=[\"labels\"]),\n    )\n\n    operation = client.update_game_server_cluster(request)\n    print(f\"Update cluster operation: {operation.operation.name}\")\n    operation.result(timeout=120)\n# [END cloud_game_servers_cluster_update]\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--project-id', help='Your cloud project ID.', required=True)\n    parser.add_argument('--location', help='Your realm location.', required=True)\n    parser.add_argument('--realm-id', help='Your realm ID.', required=True)\n    parser.add_argument('--cluster-id', help='Your game server cluster ID.', required=True)\n\n    args = parser.parse_args()\n\n    update_cluster(args.project_id, args.location, args.realm_id, args.cluster_id)\n","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code updates a game server cluster in Google Cloud Game Servers. To use it, run the script `update_cluster.py` with the following arguments: `--project-id` (your cloud project ID), `--location` (your realm location), `--realm-id` (your realm ID), and `--cluster-id` (your game server cluster ID). The script will update the specified cluster by changing the labels associated with it.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n\n# Copyright 2020 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Game Servers sample for updating a game server cluster.\n\nExample usage:\n    python update_cluster.py --project-id <project-id> --location <location> --realm-id <realm-id> --cluster-id <cluster-id>\n\"\"\"\n\nimport argparse\n\nfrom google.cloud import gaming\nfrom google.cloud.gaming_v1.types import game_server_clusters\nfrom google.protobuf import field_mask_pb2 as field_mask\n\n\n# [START cloud_game_servers_cluster_update]\ndef update_cluster(project_id, location, realm_id, cluster_id):\n    \"\"\"Updates a game server cluster.\"\"\"\n\n    client = gaming.GameServerClustersServiceClient()\n\n    request = game_server_clusters.UpdateGameServerClusterRequest(\n        game_server_cluster=game_server_clusters.GameServerCluster(\n            name=f\"projects\/{project_id}\/locations\/{location}\/realms\/{realm_id}\/gameServerClusters\/{cluster_id}\",\n            labels={\"label-key-1\": \"label-value-1\", \"label-key-2\": \"label-value-2\"},\n        ),\n        update_mask=field_mask.FieldMask(paths=[\"labels\"]),\n    )\n\n    operation = client.update_game_server_cluster(request)\n    print(f\"Update cluster operation: {operation.operation.name}\")\n    operation.result(timeout=120)\n# [END cloud_game_servers_cluster_update]\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--project-id', help='Your cloud project ID.', required=True)\n    parser.add_argument('--location', help='Your realm location.', required=True)\n    parser.add_argument('--realm-id', help='Your realm ID.', required=True)\n    parser.add_argument('--cluster-id', help='Your game server cluster ID.', required=True)\n\n    args = parser.parse_args()\n\n    update_cluster(args.project_id, args.location, args.realm_id, args.cluster_id)\n"}
{"instruction":"Generate a list of prime numbers from 1 to 100 in Python.","input":"","output":"# Initialize a list\nprimes = []\n\nfor x in range(2, 101):\n    prime = True\n    for y in range(2, x):\n        if x % y == 0:\n            prime = False\n            break\n    if prime:\n        primes.append(x)\n        \nprint(primes) # Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of prime numbers from 1 to 100 in Python.\n\n### Input:\n\n\n### Output:\n# Initialize a list\nprimes = []\n\nfor x in range(2, 101):\n    prime = True\n    for y in range(2, x):\n        if x % y == 0:\n            prime = False\n            break\n    if prime:\n        primes.append(x)\n        \nprint(primes) # Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"}
{"instruction":"Generate a python program to read 10 numbers and store their sum in a variable.","input":"","output":"sum = 0\n\nfor i in range(10):\n    num = int(input(\"Input number: \"))\n    sum += num\n\nprint(\"Sum:\", sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to read 10 numbers and store their sum in a variable.\n\n### Input:\n\n\n### Output:\nsum = 0\n\nfor i in range(10):\n    num = int(input(\"Input number: \"))\n    sum += num\n\nprint(\"Sum:\", sum)"}
{"instruction":"Suggest a Python code to identify the median element of a given list","input":"example_list = [10,20,30,40]","output":"def find_median(example_list):\n    example_list.sort()\n    if len(example_list) % 2 == 0:\n        median = (example_list[int(len(example_list)\/2)-1] + example_list[int(len(example_list)\/2)])\/2\n    else:\n        median = example_list[int((len(example_list)-1)\/2)]\n    return median","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a Python code to identify the median element of a given list\n\n### Input:\nexample_list = [10,20,30,40]\n\n### Output:\ndef find_median(example_list):\n    example_list.sort()\n    if len(example_list) % 2 == 0:\n        median = (example_list[int(len(example_list)\/2)-1] + example_list[int(len(example_list)\/2)])\/2\n    else:\n        median = example_list[int((len(example_list)-1)\/2)]\n    return median"}
{"instruction":"Create a Python function that takes in two sets and returns a set containing the items that are in the first set but not in the second.","input":"set_A = {1, 2, 3, 4}, set_B = {2, 3, 5}","output":"def diff(set_A, set_B):\n  res= set_A.difference(set_B)\n  return res\n\nset_A={1, 2, 3, 4}\nset_B={2, 3, 5}\n\nresult = diff(set_A, set_B)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes in two sets and returns a set containing the items that are in the first set but not in the second.\n\n### Input:\nset_A = {1, 2, 3, 4}, set_B = {2, 3, 5}\n\n### Output:\ndef diff(set_A, set_B):\n  res= set_A.difference(set_B)\n  return res\n\nset_A={1, 2, 3, 4}\nset_B={2, 3, 5}\n\nresult = diff(set_A, set_B)\nprint(result)"}
{"instruction":"Develop a program in Python that takes two lists as input and creates a new list that contains only the common elements of both lists.","input":"list1=[1,2,3], list2=[2,3,4]","output":"def common_elements(list1, list2):\n    common_list = []\n    for element1 in list1:\n        for element2 in list2:\n            if element1 == element2: \n                common_list.append(element1)\n    return common_list\n\ncommon_elements_list = common_elements([1,2,3], [2,3,4])\nprint(common_elements_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python that takes two lists as input and creates a new list that contains only the common elements of both lists.\n\n### Input:\nlist1=[1,2,3], list2=[2,3,4]\n\n### Output:\ndef common_elements(list1, list2):\n    common_list = []\n    for element1 in list1:\n        for element2 in list2:\n            if element1 == element2: \n                common_list.append(element1)\n    return common_list\n\ncommon_elements_list = common_elements([1,2,3], [2,3,4])\nprint(common_elements_list)"}
{"instruction":"Create a function in Python which will return the maximum and minimum elements from a given list of numbers.","input":"[3, 4, 7, 1, 9]","output":"def max_min(lst):\n  return max(lst), min(lst)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python which will return the maximum and minimum elements from a given list of numbers.\n\n### Input:\n[3, 4, 7, 1, 9]\n\n### Output:\ndef max_min(lst):\n  return max(lst), min(lst)"}
{"instruction":"Create a Python script to normalize numerical data. The script should take a list of numbers as an input, and returns a normalized list of numbers.","input":"[1, -2, 7, 5, 2]","output":"import numpy as np\n\ndef normalize(data):\n return np.divide(data, np.linalg.norm(data))\n\ndata = [1, -2, 7, 5, 2]\nprint(normalize(data))\n\n# Output\n[ 0.1245256  -0.2490512  0.8736233  0.6207616  0.2490512]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to normalize numerical data. The script should take a list of numbers as an input, and returns a normalized list of numbers.\n\n### Input:\n[1, -2, 7, 5, 2]\n\n### Output:\nimport numpy as np\n\ndef normalize(data):\n return np.divide(data, np.linalg.norm(data))\n\ndata = [1, -2, 7, 5, 2]\nprint(normalize(data))\n\n# Output\n[ 0.1245256  -0.2490512  0.8736233  0.6207616  0.2490512]"}
{"instruction":"Convert the following Python function into C++","input":"def test_func(A, B):\n return A + B","output":"#include <iostream>\n\nint test_func(int A, int B)\n{\n return A + B;\n}\n\nint main()\n{\n int A = 10;\n int B = 20;\n \n std::cout << \"The value of A + B = \" << test_func(A, B) << std::endl;\n \n return 0;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following Python function into C++\n\n### Input:\ndef test_func(A, B):\n return A + B\n\n### Output:\n#include <iostream>\n\nint test_func(int A, int B)\n{\n return A + B;\n}\n\nint main()\n{\n int A = 10;\n int B = 20;\n \n std::cout << \"The value of A + B = \" << test_func(A, B) << std::endl;\n \n return 0;\n}"}
{"instruction":"Create a simple Python application for calculating the area of different shapes (circle, square, triangle, and rectangle).","input":"Not applicable","output":"import math\n\ndef calculate_area(shape, *args):\n if shape == 'circle':\n radius = args[0]\n return math.pi * radius * radius\n \n elif shape == 'square':\n side_length = args[0]\n return side_length * side_length\n \n elif shape == 'triangle':\n base, height = args\n return 0.5 * base * height\n \n elif shape == 'rectangle':\n length, width = args\n return length * width\n \nelse:\n return 'Invalid shape'\n\nif __name__ == '__main__':\n print(calculate_area('circle', 5))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple Python application for calculating the area of different shapes (circle, square, triangle, and rectangle).\n\n### Input:\nNot applicable\n\n### Output:\nimport math\n\ndef calculate_area(shape, *args):\n if shape == 'circle':\n radius = args[0]\n return math.pi * radius * radius\n \n elif shape == 'square':\n side_length = args[0]\n return side_length * side_length\n \n elif shape == 'triangle':\n base, height = args\n return 0.5 * base * height\n \n elif shape == 'rectangle':\n length, width = args\n return length * width\n \nelse:\n return 'Invalid shape'\n\nif __name__ == '__main__':\n print(calculate_area('circle', 5))"}
{"instruction":"Write a Python program to check if all the elements in a given list are unique.","input":"","output":"def is_list_unique(list):\n    unique_list = list(dict.fromkeys(list))\n    return len(list) == len(unique_list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to check if all the elements in a given list are unique.\n\n### Input:\n\n\n### Output:\ndef is_list_unique(list):\n    unique_list = list(dict.fromkeys(list))\n    return len(list) == len(unique_list)"}
{"instruction":"Build a code in Python to convert any number to its equivalent Roman numeral.","input":"","output":"def int_to_roman(num):\n\n    # Map numbers to Roman numerals.\n    roman_numeral_map = (('M', 1000),\n                         ('CM', 900),\n                         ('D', 500),\n                         ('CD', 400),\n                         ('C', 100),\n                         ('XC', 90),\n                         ('L', 50),\n                         ('XL', 40),\n                         ('X', 10),\n                         ('IX', 9),\n                         ('V', 5),\n                         ('IV', 4),\n                         ('I', 1))\n\n    # Input validation.\n    if num <= 0:\n        raise ValueError(\"Input cannot be less than 1.\")\n\n    # Initial output.\n    output = ''\n\n    # Loop through values, look for the highest matching number\n    # and repeat the loop until num becomes 0.\n    for numeral, integer in roman_numeral_map:\n        while num >= integer:\n            output += numeral\n            num -= integer\n\n    # Return result.\n    return output\n\nif __name__ == '__main__':\n    print(int_to_roman(13))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a code in Python to convert any number to its equivalent Roman numeral.\n\n### Input:\n\n\n### Output:\ndef int_to_roman(num):\n\n    # Map numbers to Roman numerals.\n    roman_numeral_map = (('M', 1000),\n                         ('CM', 900),\n                         ('D', 500),\n                         ('CD', 400),\n                         ('C', 100),\n                         ('XC', 90),\n                         ('L', 50),\n                         ('XL', 40),\n                         ('X', 10),\n                         ('IX', 9),\n                         ('V', 5),\n                         ('IV', 4),\n                         ('I', 1))\n\n    # Input validation.\n    if num <= 0:\n        raise ValueError(\"Input cannot be less than 1.\")\n\n    # Initial output.\n    output = ''\n\n    # Loop through values, look for the highest matching number\n    # and repeat the loop until num becomes 0.\n    for numeral, integer in roman_numeral_map:\n        while num >= integer:\n            output += numeral\n            num -= integer\n\n    # Return result.\n    return output\n\nif __name__ == '__main__':\n    print(int_to_roman(13))"}
{"instruction":"Write a Python program to extract all words from a sentence and print them.","input":"The quick brown fox","output":"sentence = \"The quick brown fox\"\nwords = sentence.split(\" \")\n\nfor word in words:\n print(word)\n\n# Output\n# The\n# quick\n# brown\n# fox","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to extract all words from a sentence and print them.\n\n### Input:\nThe quick brown fox\n\n### Output:\nsentence = \"The quick brown fox\"\nwords = sentence.split(\" \")\n\nfor word in words:\n print(word)\n\n# Output\n# The\n# quick\n# brown\n# fox"}
{"instruction":"Generate a Python class to represent a customer object with the following properties: name, email, and phone number.","input":"Not applicable","output":"class Customer:\n\ndef __init__(self, name, email, phone_number):\n self.name = name\n self.email = email\n self.phone_number = phone_number\n\ndef getName(self):\n return self.name\n\ndef getEmail(self):\n return self.email\n\ndef getPhoneNumber(self):\n return self.phone_number","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class to represent a customer object with the following properties: name, email, and phone number.\n\n### Input:\nNot applicable\n\n### Output:\nclass Customer:\n\ndef __init__(self, name, email, phone_number):\n self.name = name\n self.email = email\n self.phone_number = phone_number\n\ndef getName(self):\n return self.name\n\ndef getEmail(self):\n return self.email\n\ndef getPhoneNumber(self):\n return self.phone_number"}
{"instruction":"Generate a two-dimensional array of ones using Python.","input":"r = 4, c = 5","output":"import numpy as np \n\narr = np.ones((r,c))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a two-dimensional array of ones using Python.\n\n### Input:\nr = 4, c = 5\n\n### Output:\nimport numpy as np \n\narr = np.ones((r,c))"}
{"instruction":"Write a REST API in Python to handle CRUD (Create, Read, Update, Delete) operations on the specified endpoints.","input":"Endpoints (User, Course, Grade):\n\nUser:   \/users\/{userId}\nCourse: \/courses\/{courseId}\nGrades: \/courses\/{courseId}\/grades","output":"from flask import Flask, request\nfrom flask_restful import Resource, Api\n\napp = Flask(__name__)\napi = Api(app)\n\nclass Users(Resource):\n    def get(self, userId):\n        # return user object with userId\n        pass\n\n    def post(self):\n        # create new user\n        pass\n\n    def put(self, userId):\n        # update user object with userId\n        pass\n\n    def delete(self, userId):\n        # delete user object with userId\n        pass\n\nclass Courses(Resource):\n    def get(self,courseId):\n        # return course object with courseId\n        pass\n\n    def post(self):\n        # create new course\n        pass\n\n    def put(self,courseId):\n        # update course object with courseId\n        pass\n\n    def delete(self,courseId):\n        # delete course object with courseId\n        pass\n\nclass Grades(Resource):\n    def get(self,courseId):\n        # return grade object with courseId\n        pass\n\n    def post(self):\n        # create new grade\n        pass\n\n    def put(self,courseId):\n        # update grade object with courseId\n        pass\n\n    def delete(self,courseId):\n        # delete grade object with courseId\n        pass\n\napi.add_resource(Users, '\/users\/<userId>')\napi.add_resource(Courses, '\/courses\/<courseId>')\napi.add_resource(Grades, '\/courses\/<courseId>\/grades')\n\nif __name__ == '__main__':\n    app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a REST API in Python to handle CRUD (Create, Read, Update, Delete) operations on the specified endpoints.\n\n### Input:\nEndpoints (User, Course, Grade):\n\nUser:   \/users\/{userId}\nCourse: \/courses\/{courseId}\nGrades: \/courses\/{courseId}\/grades\n\n### Output:\nfrom flask import Flask, request\nfrom flask_restful import Resource, Api\n\napp = Flask(__name__)\napi = Api(app)\n\nclass Users(Resource):\n    def get(self, userId):\n        # return user object with userId\n        pass\n\n    def post(self):\n        # create new user\n        pass\n\n    def put(self, userId):\n        # update user object with userId\n        pass\n\n    def delete(self, userId):\n        # delete user object with userId\n        pass\n\nclass Courses(Resource):\n    def get(self,courseId):\n        # return course object with courseId\n        pass\n\n    def post(self):\n        # create new course\n        pass\n\n    def put(self,courseId):\n        # update course object with courseId\n        pass\n\n    def delete(self,courseId):\n        # delete course object with courseId\n        pass\n\nclass Grades(Resource):\n    def get(self,courseId):\n        # return grade object with courseId\n        pass\n\n    def post(self):\n        # create new grade\n        pass\n\n    def put(self,courseId):\n        # update grade object with courseId\n        pass\n\n    def delete(self,courseId):\n        # delete grade object with courseId\n        pass\n\napi.add_resource(Users, '\/users\/<userId>')\napi.add_resource(Courses, '\/courses\/<courseId>')\napi.add_resource(Grades, '\/courses\/<courseId>\/grades')\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"instruction":"Write a python program to find the Longest Common Subsequence (LCS) of two sequences","input":"X = \"MZJAWXU\"\nY = \"XMJYAUX\"","output":"def lcs(X, Y, m, n): \n    if m == 0 or n == 0: \n        return 0; \n    elif X[m-1] == Y[n-1]: \n        return 1 + lcs(X, Y, m-1, n-1); \n    else: \n        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n)); \n  \n# Function to find the Longest Common Subsequence (LCS)\nX = \"MZJAWXU\"\nY = \"XMJYAUX\"\nm = len(X) \nn = len(Y) \nprint(\"Length of Longest Common Subsequence is\", lcs(X, Y, m, n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to find the Longest Common Subsequence (LCS) of two sequences\n\n### Input:\nX = \"MZJAWXU\"\nY = \"XMJYAUX\"\n\n### Output:\ndef lcs(X, Y, m, n): \n    if m == 0 or n == 0: \n        return 0; \n    elif X[m-1] == Y[n-1]: \n        return 1 + lcs(X, Y, m-1, n-1); \n    else: \n        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n)); \n  \n# Function to find the Longest Common Subsequence (LCS)\nX = \"MZJAWXU\"\nY = \"XMJYAUX\"\nm = len(X) \nn = len(Y) \nprint(\"Length of Longest Common Subsequence is\", lcs(X, Y, m, n))"}
{"instruction":"Write a function in Python which converts a given string to a list, split by words.","input":"\"Hello world!\"","output":"# Function to convert a string to a list, split by words\ndef string_to_list(string):\n    # Initialize an empty list\n    word_list = []\n    \n    # Iterate through each character of the string\n    for character in string:\n        word = \"\"\n        while character != \" \" and character != \"\":\n            word += character\n            string = string[1:]\n            character = string[0]\n        # Add each word to the list\n        word_list.append(word)\n\n    return word_list\n\n# Driver code\nmy_string = \"Hello world!\"\n\nword_list = string_to_list(my_string)\n\nprint(word_list) # prints ['Hello', 'world!']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python which converts a given string to a list, split by words.\n\n### Input:\n\"Hello world!\"\n\n### Output:\n# Function to convert a string to a list, split by words\ndef string_to_list(string):\n    # Initialize an empty list\n    word_list = []\n    \n    # Iterate through each character of the string\n    for character in string:\n        word = \"\"\n        while character != \" \" and character != \"\":\n            word += character\n            string = string[1:]\n            character = string[0]\n        # Add each word to the list\n        word_list.append(word)\n\n    return word_list\n\n# Driver code\nmy_string = \"Hello world!\"\n\nword_list = string_to_list(my_string)\n\nprint(word_list) # prints ['Hello', 'world!']"}
{"instruction":"Write a python code to perform the task of bubble sorting in a list.","input":"arr = [1, 10, 5, 4, 8]","output":"def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \nbubble_sort(arr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to perform the task of bubble sorting in a list.\n\n### Input:\narr = [1, 10, 5, 4, 8]\n\n### Output:\ndef bubble_sort(arr): \n    n = len(arr) \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \nbubble_sort(arr)"}
{"instruction":"Create a Python script to determine the roots of a quadratic equation.","input":"The coefficients of the equation (a, b, c).","output":"import math\n\ndef findRoots(a, b, c):\n    discriminant = b ** 2 - 4 * a * c\n  \n    if discriminant < 0:\n        print('No real roots.')\n  \n    elif discriminant == 0:\n        root = -b \/ (2 * a)\n        print('One root: ', root)\n  \n    else:\n        root1 = (-b + math.sqrt(discriminant)) \/ (2 * a)\n        root2 = (-b - math.sqrt(discriminant)) \/ (2 * a)\n        print('Two roots: ', root1, root2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to determine the roots of a quadratic equation.\n\n### Input:\nThe coefficients of the equation (a, b, c).\n\n### Output:\nimport math\n\ndef findRoots(a, b, c):\n    discriminant = b ** 2 - 4 * a * c\n  \n    if discriminant < 0:\n        print('No real roots.')\n  \n    elif discriminant == 0:\n        root = -b \/ (2 * a)\n        print('One root: ', root)\n  \n    else:\n        root1 = (-b + math.sqrt(discriminant)) \/ (2 * a)\n        root2 = (-b - math.sqrt(discriminant)) \/ (2 * a)\n        print('Two roots: ', root1, root2)"}
{"instruction":"Edit the following Python code so that it prints the sum of the list elements.","input":"list = [10, 20, 30, 40]","output":"list = [10, 20, 30, 40]\n\nsum = 0\nfor i in list:\n sum += i\n\nprint(\"The sum is\", sum)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code so that it prints the sum of the list elements.\n\n### Input:\nlist = [10, 20, 30, 40]\n\n### Output:\nlist = [10, 20, 30, 40]\n\nsum = 0\nfor i in list:\n sum += i\n\nprint(\"The sum is\", sum)"}
{"instruction":"Create a neural network in Python for handwritten digit recognition using the MNIST dataset.","input":"","output":"import tensorflow as tf\nfrom tensorflow.examples.tutorials.mnist import input_data\n\n# Load the MNIST dataset\nmnist = input_data.read_data_sets(\"MNIST_data\/\", one_hot=True)\n\n# Inputs and Outputs\nx = tf.placeholder(tf.float32, [None, 784])\ny_ = tf.placeholder(tf.float32, [None, 10])\n\n# Neural Network Model\nW = tf.Variable(tf.zeros([784, 10]))\nb = tf.Variable(tf.zeros([10]))\n\n# Softmax Output\ny = tf.nn.softmax(tf.matmul(x, W) + b)\n\n# Cost Function\ncross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))\n\n# Training\ntrain_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)\n\ninit = tf.initialize_all_variables()\n\nsess = tf.Session()\nsess.run(init)\n\n# Train\nfor i in range(10000):\n  batch_xs, batch_ys = mnist.train.next_batch(100)\n  sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})\n\n# Test\ncorrect_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\nprint(sess.run(accuracy, feed_dict={x: mnist.test.images, y_: mnist.test.labels}))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network in Python for handwritten digit recognition using the MNIST dataset.\n\n### Input:\n\n\n### Output:\nimport tensorflow as tf\nfrom tensorflow.examples.tutorials.mnist import input_data\n\n# Load the MNIST dataset\nmnist = input_data.read_data_sets(\"MNIST_data\/\", one_hot=True)\n\n# Inputs and Outputs\nx = tf.placeholder(tf.float32, [None, 784])\ny_ = tf.placeholder(tf.float32, [None, 10])\n\n# Neural Network Model\nW = tf.Variable(tf.zeros([784, 10]))\nb = tf.Variable(tf.zeros([10]))\n\n# Softmax Output\ny = tf.nn.softmax(tf.matmul(x, W) + b)\n\n# Cost Function\ncross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))\n\n# Training\ntrain_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)\n\ninit = tf.initialize_all_variables()\n\nsess = tf.Session()\nsess.run(init)\n\n# Train\nfor i in range(10000):\n  batch_xs, batch_ys = mnist.train.next_batch(100)\n  sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})\n\n# Test\ncorrect_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\nprint(sess.run(accuracy, feed_dict={x: mnist.test.images, y_: mnist.test.labels}))"}
{"instruction":"Debug the Python code.","input":"def gen_all_triplets(n):\ntriplets = []\nfor i in range(1, n):\n    for j in range(i+1, n):\n        for k in range(j+1, k):\n            triplets.append([i, j, k])\nreturn triplets","output":"def gen_all_triplets(n):\n    triplets = []\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                triplets.append([i, j, k])\n    return triplets","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDebug the Python code.\n\n### Input:\ndef gen_all_triplets(n):\ntriplets = []\nfor i in range(1, n):\n    for j in range(i+1, n):\n        for k in range(j+1, k):\n            triplets.append([i, j, k])\nreturn triplets\n\n### Output:\ndef gen_all_triplets(n):\n    triplets = []\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                triplets.append([i, j, k])\n    return triplets"}
{"instruction":"Develop an AI Tic-Tac-Toe game using Python.","input":"Not appliccable","output":"import random \n  \n# printing the board  \ndef drawBoard(board): \n  \n    print(\"---------------\") \n    print(\" \"+board[1]+\" | \"+board[2]+\" | \"+board[3]+\" \") \n    print(\"___|___|___\") \n    print(\" \"+board[4]+\" | \"+board[5]+\" | \"+board[6]+\" \") \n    print(\"___|___|___\") \n    print(\" \"+board[7]+\" | \"+board[8]+\" | \"+board[9]+\" \") \n    print(\"   |   |   \") \n  \n# defining the part of the game  \ndef checkWin(board, player): \n    return ( \n        (board[1] == board[2] == board[3] == player) or\n        (board[5] == board[4] == board[6] == player) or \n        (board[7] == board[8] == board[9] == player) or \n        (board[1] == board[5] == board[9] == player) or \n        (board[3] == board[5] == board[7] == player) or \n        (board[1] == board[4] == board[7] == player) or \n        (board[2] == board[5] == board[8] == player) or \n        (board[3] == board[6] == board[9] == player))  \n       \ndef getComputerSpot(board,player): \n    openSpots = [] \n    indices = [i for i, spot in enumerate(board) if spot == '-'] \n    \n    for i in indices: \n        board[i] = player  \n          \n        if checkWin(board, player):  \n            board[i] = '-'  \n            return i  \n        board[i] = '-'  \n          \n    for i in indices: \n        openSpots.append(i) \n    if len(openSpots): \n        return random.choice(openSpots) \n    else: \n        return None \n      \n                \ndef playGame(): \n    board = ['-' for x in range(10)] \n    won = False\n    turn = -1\n    while not won: \n        if turn == -1: \n            # human turn   \n            humanSpot = int(input(\"Enter your spot: \"))\n            if board[humanSpot] == '-': \n                board[humanSpot] = 'X' \n            else: \n                print(\"the spot is already filled!\") \n                continue\n            turn *= -1\n       \n        if checkWin(board,'X'): \n            drawBoard(board) \n            print(\"You won!\") \n            won = True\n            break\n          \n        if turn == 1: \n            # computer turn  \n            computerSpot = getComputerSpot(board,'O') \n            if computerSpot == None: \n                drawBoard(board) \n                print(\"The game is drawn!\")\n                break\n            else: \n                board[computerSpot] = 'O' \n            turn *= -1\n              \n        drawBoard(board) \n          \nplayGame()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI Tic-Tac-Toe game using Python.\n\n### Input:\nNot appliccable\n\n### Output:\nimport random \n  \n# printing the board  \ndef drawBoard(board): \n  \n    print(\"---------------\") \n    print(\" \"+board[1]+\" | \"+board[2]+\" | \"+board[3]+\" \") \n    print(\"___|___|___\") \n    print(\" \"+board[4]+\" | \"+board[5]+\" | \"+board[6]+\" \") \n    print(\"___|___|___\") \n    print(\" \"+board[7]+\" | \"+board[8]+\" | \"+board[9]+\" \") \n    print(\"   |   |   \") \n  \n# defining the part of the game  \ndef checkWin(board, player): \n    return ( \n        (board[1] == board[2] == board[3] == player) or\n        (board[5] == board[4] == board[6] == player) or \n        (board[7] == board[8] == board[9] == player) or \n        (board[1] == board[5] == board[9] == player) or \n        (board[3] == board[5] == board[7] == player) or \n        (board[1] == board[4] == board[7] == player) or \n        (board[2] == board[5] == board[8] == player) or \n        (board[3] == board[6] == board[9] == player))  \n       \ndef getComputerSpot(board,player): \n    openSpots = [] \n    indices = [i for i, spot in enumerate(board) if spot == '-'] \n    \n    for i in indices: \n        board[i] = player  \n          \n        if checkWin(board, player):  \n            board[i] = '-'  \n            return i  \n        board[i] = '-'  \n          \n    for i in indices: \n        openSpots.append(i) \n    if len(openSpots): \n        return random.choice(openSpots) \n    else: \n        return None \n      \n                \ndef playGame(): \n    board = ['-' for x in range(10)] \n    won = False\n    turn = -1\n    while not won: \n        if turn == -1: \n            # human turn   \n            humanSpot = int(input(\"Enter your spot: \"))\n            if board[humanSpot] == '-': \n                board[humanSpot] = 'X' \n            else: \n                print(\"the spot is already filled!\") \n                continue\n            turn *= -1\n       \n        if checkWin(board,'X'): \n            drawBoard(board) \n            print(\"You won!\") \n            won = True\n            break\n          \n        if turn == 1: \n            # computer turn  \n            computerSpot = getComputerSpot(board,'O') \n            if computerSpot == None: \n                drawBoard(board) \n                print(\"The game is drawn!\")\n                break\n            else: \n                board[computerSpot] = 'O' \n            turn *= -1\n              \n        drawBoard(board) \n          \nplayGame()"}
{"instruction":"Write a Python program to round a number to a given number of decimal places.","input":"number = 2.68\nround_places = 2","output":"number_rounded = round(number, round_places)\nprint(number_rounded)\n# Output: 2.68","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to round a number to a given number of decimal places.\n\n### Input:\nnumber = 2.68\nround_places = 2\n\n### Output:\nnumber_rounded = round(number, round_places)\nprint(number_rounded)\n# Output: 2.68"}
{"instruction":"Write an efficient Python program to find the models of cars with the highest average price.","input":"car_data = [\n {'model': 'ford taurus', 'price': 12000},\n {'model': 'honda civic', 'price': 13500},\n {'model': 'bmw m3', 'price': 65000},\n {'model': 'chevy blazer', 'price': 8000}\n]","output":"# Initialize a max_price variable and set it to 0\nmax_price = 0\n\n# Iterate through the list of car data\nfor car in car_data:\n # Retrieve the car's model and price\n model = car['model']\n price = car['price']\n\n # If the current car's price is greater than the current max_price\n if price > max_price:\n # Set the max_price to the current car's price\n max_price = price\n # Set a variable for the model with the highest price\n max_price_model = model\n\n# Print the model with the highest average price\nprint(f'The model with the highest average price is the {max_price_model} at ${max_price}.')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an efficient Python program to find the models of cars with the highest average price.\n\n### Input:\ncar_data = [\n {'model': 'ford taurus', 'price': 12000},\n {'model': 'honda civic', 'price': 13500},\n {'model': 'bmw m3', 'price': 65000},\n {'model': 'chevy blazer', 'price': 8000}\n]\n\n### Output:\n# Initialize a max_price variable and set it to 0\nmax_price = 0\n\n# Iterate through the list of car data\nfor car in car_data:\n # Retrieve the car's model and price\n model = car['model']\n price = car['price']\n\n # If the current car's price is greater than the current max_price\n if price > max_price:\n # Set the max_price to the current car's price\n max_price = price\n # Set a variable for the model with the highest price\n max_price_model = model\n\n# Print the model with the highest average price\nprint(f'The model with the highest average price is the {max_price_model} at ${max_price}.')"}
{"instruction":"Create an open-source Python program to generate random passwords.","input":"Not applicable","output":"import random\nimport string\n\n\ndef generate_password(length=12):\n password_characters = string.ascii_letters + string.digits + string.punctuation\n return ''.join(random.choice(password_characters) for i in range(length))\n\n\nif __name__ == '__main__':\n password = generate_password()\n print(f'Your randomly generated password is:\\n{password}')","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an open-source Python program to generate random passwords.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\nimport string\n\n\ndef generate_password(length=12):\n password_characters = string.ascii_letters + string.digits + string.punctuation\n return ''.join(random.choice(password_characters) for i in range(length))\n\n\nif __name__ == '__main__':\n password = generate_password()\n print(f'Your randomly generated password is:\\n{password}')"}
{"instruction":"Generate a python program that sort students according to their grades in reverse order.","input":"[\n    {\n        \"name\": \"Alice\",\n        \"grade\": 85\n    },\n    {\n        \"name\": \"Bob\",\n        \"grade\": 95\n    },\n    {\n        \"name\": \"Carol\",\n        \"grade\": 73\n    }\n]","output":"students = [\n    {\n        \"name\": \"Alice\",\n        \"grade\": 85\n    },\n    {\n        \"name\": \"Bob\",\n        \"grade\": 95\n    },\n    {\n        \"name\": \"Carol\",\n        \"grade\": 73\n    }\n]\n\ndef sortGrades(students):\n    # sort list of dictionaries by grade in reverse order\n    sortedStudents = sorted(students, reverse=True, key = lambda i: int(i['grade'])) \n    return sortedStudents\n\nsortedStudents = sortGrades(students)\n\nfor student in sortedStudents:\n    print(student)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program that sort students according to their grades in reverse order.\n\n### Input:\n[\n    {\n        \"name\": \"Alice\",\n        \"grade\": 85\n    },\n    {\n        \"name\": \"Bob\",\n        \"grade\": 95\n    },\n    {\n        \"name\": \"Carol\",\n        \"grade\": 73\n    }\n]\n\n### Output:\nstudents = [\n    {\n        \"name\": \"Alice\",\n        \"grade\": 85\n    },\n    {\n        \"name\": \"Bob\",\n        \"grade\": 95\n    },\n    {\n        \"name\": \"Carol\",\n        \"grade\": 73\n    }\n]\n\ndef sortGrades(students):\n    # sort list of dictionaries by grade in reverse order\n    sortedStudents = sorted(students, reverse=True, key = lambda i: int(i['grade'])) \n    return sortedStudents\n\nsortedStudents = sortGrades(students)\n\nfor student in sortedStudents:\n    print(student)"}
{"instruction":"Can you write a code to securely hash a given string in Python?","input":"","output":"import hashlib\n \ndef secure_hash(string):\n return hashlib.sha256(string.encode()).hexdigest()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you write a code to securely hash a given string in Python?\n\n### Input:\n\n\n### Output:\nimport hashlib\n \ndef secure_hash(string):\n return hashlib.sha256(string.encode()).hexdigest()"}
{"instruction":"Create a basic web server in Python that serves static pages from a given directory.","input":"Not applicable","output":"import http.server\nimport socketserver\n\nPORT = 8080\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n print(\"Serving at port\", PORT)\n httpd.serve_forever()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic web server in Python that serves static pages from a given directory.\n\n### Input:\nNot applicable\n\n### Output:\nimport http.server\nimport socketserver\n\nPORT = 8080\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n print(\"Serving at port\", PORT)\n httpd.serve_forever()"}
{"instruction":"Generate a python code to calculate the sum of two numbers given.","input":"a = 10\nb = 20","output":"def calculate_sum(a, b):\n    \"\"\"Calculate the sum of two numbers given.\n    \n    Parameters\n    ----------\n    a : int\n        The first argument.\n    b : int\n        The second argument.\n        \n    Returns\n    -------\n    int\n        The sum of the two numbers given.\n    \"\"\"\n    sum = a + b\n    return sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python code to calculate the sum of two numbers given.\n\n### Input:\na = 10\nb = 20\n\n### Output:\ndef calculate_sum(a, b):\n    \"\"\"Calculate the sum of two numbers given.\n    \n    Parameters\n    ----------\n    a : int\n        The first argument.\n    b : int\n        The second argument.\n        \n    Returns\n    -------\n    int\n        The sum of the two numbers given.\n    \"\"\"\n    sum = a + b\n    return sum"}
{"instruction":"Create a Python 3 program that takes an integer input from the user and prints its cube.","input":"","output":"number = int(input(\"Please enter a number: \"))\ncube = number**3\nprint(\"The cube of the number is: \" + str(cube))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python 3 program that takes an integer input from the user and prints its cube.\n\n### Input:\n\n\n### Output:\nnumber = int(input(\"Please enter a number: \"))\ncube = number**3\nprint(\"The cube of the number is: \" + str(cube))"}
{"instruction":"Create an algorithm in Python to find the median value in a given list of numbers.","input":"","output":"def find_median(numbers):\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median = (numbers[int((length\/2)-1)] + numbers[int(length\/2)])\/2\n    else:\n        median = numbers[int((length-1) \/ 2)]\n    return median","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to find the median value in a given list of numbers.\n\n### Input:\n\n\n### Output:\ndef find_median(numbers):\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median = (numbers[int((length\/2)-1)] + numbers[int(length\/2)])\/2\n    else:\n        median = numbers[int((length-1) \/ 2)]\n    return median"}
{"instruction":"Create a Python program to normalize an input string. The input string should be a paragraph of text and the output should be lowercase text with no punctuation.","input":"Welcome to the GPT Normalization Task!","output":"import re\n\ndef normalize_text(text):\n text = text.lower()\n text = re.sub(r'\\W+', ' ', text)\n return text\n\ninput_text= 'Welcome to the GPT Normalization Task!'\noutput_text = normalize_text(input_text)\nprint(output_text)\n\n# Output: welcome to the gpt normalization task","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to normalize an input string. The input string should be a paragraph of text and the output should be lowercase text with no punctuation.\n\n### Input:\nWelcome to the GPT Normalization Task!\n\n### Output:\nimport re\n\ndef normalize_text(text):\n text = text.lower()\n text = re.sub(r'\\W+', ' ', text)\n return text\n\ninput_text= 'Welcome to the GPT Normalization Task!'\noutput_text = normalize_text(input_text)\nprint(output_text)\n\n# Output: welcome to the gpt normalization task"}
{"instruction":"Convert the below pseudo-code into valid Python code.","input":"x = 0\n\nwhile x<10:\n    x = x + 2\n    if x==4:\n        continue\n    print(x)","output":"x = 0\n\nwhile x < 10:\n    x = x + 2\n    if x == 4:\n        continue\n    print(x)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the below pseudo-code into valid Python code.\n\n### Input:\nx = 0\n\nwhile x<10:\n    x = x + 2\n    if x==4:\n        continue\n    print(x)\n\n### Output:\nx = 0\n\nwhile x < 10:\n    x = x + 2\n    if x == 4:\n        continue\n    print(x)"}
{"instruction":"Create a Python list comprehension to find the sum of even numbers from two given lists.","input":"[1, 2, 3, 4]\n[9, 8, 7, 6]","output":"even_nums_sum = [x + y for x in [1, 2, 3, 4] for y in [9, 8, 7, 6] if x % 2 == 0 and y % 2 == 0]\nprint(sum(even_nums_sum))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python list comprehension to find the sum of even numbers from two given lists.\n\n### Input:\n[1, 2, 3, 4]\n[9, 8, 7, 6]\n\n### Output:\neven_nums_sum = [x + y for x in [1, 2, 3, 4] for y in [9, 8, 7, 6] if x % 2 == 0 and y % 2 == 0]\nprint(sum(even_nums_sum))"}
{"instruction":"Design a program in Python to check whether an input number is a prime number.","input":"","output":"def is_prime(n):\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to check whether an input number is a prime number.\n\n### Input:\n\n\n### Output:\ndef is_prime(n):\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True"}
{"instruction":"Build a web scraper in Python that extracts the title, author, and publication date of articles published on a given website.","input":"","output":"import requests\nfrom bs4 import BeautifulSoup\n \n# Get the html content\nurl = \"https:\/\/www.example.com\/articles\"\nr = requests.get(url)\nhtml_content = r.content\n \n# Parse the html content\nsoup = BeautifulSoup(html_content, 'html.parser')\n \n# Extract the title, author and publication date\ntitles = soup.find_all('h1', class_='title')\nauthors = soup.find_all('span', class_='author')\ndates = soup.find_all('span', class_='date')\n \nfor title, author, date in zip(titles, authors, dates):\n    print('Title: {}'.format(title.text))\n    print('Author: {}'.format(author.text))\n    print('Publication Date: {}'.format(date.text))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a web scraper in Python that extracts the title, author, and publication date of articles published on a given website.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n \n# Get the html content\nurl = \"https:\/\/www.example.com\/articles\"\nr = requests.get(url)\nhtml_content = r.content\n \n# Parse the html content\nsoup = BeautifulSoup(html_content, 'html.parser')\n \n# Extract the title, author and publication date\ntitles = soup.find_all('h1', class_='title')\nauthors = soup.find_all('span', class_='author')\ndates = soup.find_all('span', class_='date')\n \nfor title, author, date in zip(titles, authors, dates):\n    print('Title: {}'.format(title.text))\n    print('Author: {}'.format(author.text))\n    print('Publication Date: {}'.format(date.text))"}
{"instruction":"This code loads a JSON fixture file, extracts properties from it, creates Property objects from the properties, and saves them to the database. To use this code, you need to create a JSON fixture file with a \"properties\" key containing a list of property objects. Then, run the code with the appropriate command line arguments to specify the fixture file and folder. The saved objects will be printed to the console.","input":"","output":"#!\/usr\/bin\/env python\n# coding: utf-8\n\nfrom __future__ import (\n    print_function,\n    unicode_literals,\n    absolute_import\n)\n\nimport argparse\nimport json\nimport os\n\n\ndef get_path():\n    return unicode(os.path.abspath('.'))\n\n\ndef parse_args():\n    _parser = argparse.ArgumentParser()\n    _parser.add_argument('--fixture', type=str, help='fixture file to load', default='properties.json')\n    _parser.add_argument('--fixture_folder', type=str,\n                         default='models\/fixtures',\n                         help='where fixtures are stored.'\n                         )\n    return _parser.parse_args()\n\ndef main(base_path):\n    properties_to_save = []\n    args = parse_args()\n    path = os.path.sep.join([base_path,\n                             'app',\n                             args.fixture_folder,\n                             args.fixture])\n    with open(path) as file_:\n        data = json.load(file_)\n    properties = data['properties']\n    for property_ in properties:\n        property_.pop('id')\n        properties_to_save.append(Property(**property_))\n    Property.objects.insert(properties_to_save)\n\n    return len(properties_to_save)\n\n\nif __name__ == '__main__':\n    from app.models.properties import Property\n    base_path = get_path()\n    out = main(base_path)\n    print(\"{} objects saved\".format(out))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code loads a JSON fixture file, extracts properties from it, creates Property objects from the properties, and saves them to the database. To use this code, you need to create a JSON fixture file with a \"properties\" key containing a list of property objects. Then, run the code with the appropriate command line arguments to specify the fixture file and folder. The saved objects will be printed to the console.\n\n### Input:\n\n\n### Output:\n#!\/usr\/bin\/env python\n# coding: utf-8\n\nfrom __future__ import (\n    print_function,\n    unicode_literals,\n    absolute_import\n)\n\nimport argparse\nimport json\nimport os\n\n\ndef get_path():\n    return unicode(os.path.abspath('.'))\n\n\ndef parse_args():\n    _parser = argparse.ArgumentParser()\n    _parser.add_argument('--fixture', type=str, help='fixture file to load', default='properties.json')\n    _parser.add_argument('--fixture_folder', type=str,\n                         default='models\/fixtures',\n                         help='where fixtures are stored.'\n                         )\n    return _parser.parse_args()\n\ndef main(base_path):\n    properties_to_save = []\n    args = parse_args()\n    path = os.path.sep.join([base_path,\n                             'app',\n                             args.fixture_folder,\n                             args.fixture])\n    with open(path) as file_:\n        data = json.load(file_)\n    properties = data['properties']\n    for property_ in properties:\n        property_.pop('id')\n        properties_to_save.append(Property(**property_))\n    Property.objects.insert(properties_to_save)\n\n    return len(properties_to_save)\n\n\nif __name__ == '__main__':\n    from app.models.properties import Property\n    base_path = get_path()\n    out = main(base_path)\n    print(\"{} objects saved\".format(out))"}
{"instruction":"Create a Python program for encoding and decoding a text string. The program should be able to accept a text string, encode it with a custom encoding scheme, and then decode it to the original text string.","input":"\"Hello World\"","output":"# Alphabet string \nalphabets = 'abcdefghijklmnopqrstuvwxyz'\n\n# Function to encode \ndef encoding(text): \n\t\n\t# Empty string to store encoded string \n\tencoded_string = \"\" \n\n\t# iterate through all characters of text \n\tfor i in range(len(text)): \n\n\t\t# store the corresponding index \n\t\t# of current character \n\t\tc = alphabets.index(text[i]) \n\n\t\t# append the corresponding alphabet \n\t\t# from alphabet string \n\t\tencoded_string += alphabets[25-c] \n\t\n\t# Return the encoded string \n\treturn encoded_string \n\n# Function to decode \ndef decoding(encoded_string): \n\n\t# Empty string to store decoded string \n\tdecoded_string = \"\" \n\n\t# iterate through all characters of encoded string \n\tfor i in range(len(encoded_string)): \n\n\t\t# store the corresponding index \n\t\t# of current character \n\t\tc = alphabets.index(encoded_string[i]) \n\n\t\t# append the corresponding alphabet \n\t\t# from alphabet string \n\t\tdecoded_string += alphabets[25-c] \n\t\n\t# Return the decoded string \n\treturn decoded_string \n\n# Driver code \nencoded_string = encoding(\"Hello World\") \nprint(encoded_string) \n\ndecoded_string = decoding(encoded_string) \nprint(decoded_string)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for encoding and decoding a text string. The program should be able to accept a text string, encode it with a custom encoding scheme, and then decode it to the original text string.\n\n### Input:\n\"Hello World\"\n\n### Output:\n# Alphabet string \nalphabets = 'abcdefghijklmnopqrstuvwxyz'\n\n# Function to encode \ndef encoding(text): \n\t\n\t# Empty string to store encoded string \n\tencoded_string = \"\" \n\n\t# iterate through all characters of text \n\tfor i in range(len(text)): \n\n\t\t# store the corresponding index \n\t\t# of current character \n\t\tc = alphabets.index(text[i]) \n\n\t\t# append the corresponding alphabet \n\t\t# from alphabet string \n\t\tencoded_string += alphabets[25-c] \n\t\n\t# Return the encoded string \n\treturn encoded_string \n\n# Function to decode \ndef decoding(encoded_string): \n\n\t# Empty string to store decoded string \n\tdecoded_string = \"\" \n\n\t# iterate through all characters of encoded string \n\tfor i in range(len(encoded_string)): \n\n\t\t# store the corresponding index \n\t\t# of current character \n\t\tc = alphabets.index(encoded_string[i]) \n\n\t\t# append the corresponding alphabet \n\t\t# from alphabet string \n\t\tdecoded_string += alphabets[25-c] \n\t\n\t# Return the decoded string \n\treturn decoded_string \n\n# Driver code \nencoded_string = encoding(\"Hello World\") \nprint(encoded_string) \n\ndecoded_string = decoding(encoded_string) \nprint(decoded_string)"}
{"instruction":"Create a Python program for finding the maximum and minimum numbers in an array of numbers.","input":"1, 10, 3, 8, 6","output":"def find_min_max(numbers):\n \n min_num = float('inf')\n max_num = float('-inf')\n \n for num in numbers:\n  if num < min_num:\n   min_num = num\n  if num > max_num:\n   max_num = num\n \n return [min_num, max_num]\n\nnumbers = [1, 10, 3, 8, 6]\nprint(find_min_max(numbers))\n\n# Output: [1, 10]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for finding the maximum and minimum numbers in an array of numbers.\n\n### Input:\n1, 10, 3, 8, 6\n\n### Output:\ndef find_min_max(numbers):\n \n min_num = float('inf')\n max_num = float('-inf')\n \n for num in numbers:\n  if num < min_num:\n   min_num = num\n  if num > max_num:\n   max_num = num\n \n return [min_num, max_num]\n\nnumbers = [1, 10, 3, 8, 6]\nprint(find_min_max(numbers))\n\n# Output: [1, 10]"}
{"instruction":"Develop a Python script that can query a SQL database and return the total number of entries in all the tables","input":"SQL database","output":"import sqlite3\n\nconn = sqlite3.connect(\"example.db\")\ncur = conn.cursor()\n\nsql = \"SELECT name FROM sqlite_master WHERE type='table';\"\ncur.execute(sql)\ntables = cur.fetchall()\n\ncount = 0\nfor table in tables:\n    sql = f\"SELECT COUNT(*) FROM {table[0]};\"\n    cur.execute(sql)\n    count += cur.fetchone()[0]\n\nprint(f\"Number of entries: {count}\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script that can query a SQL database and return the total number of entries in all the tables\n\n### Input:\nSQL database\n\n### Output:\nimport sqlite3\n\nconn = sqlite3.connect(\"example.db\")\ncur = conn.cursor()\n\nsql = \"SELECT name FROM sqlite_master WHERE type='table';\"\ncur.execute(sql)\ntables = cur.fetchall()\n\ncount = 0\nfor table in tables:\n    sql = f\"SELECT COUNT(*) FROM {table[0]};\"\n    cur.execute(sql)\n    count += cur.fetchone()[0]\n\nprint(f\"Number of entries: {count}\")"}
{"instruction":"Create a Python program to calculate the minimum cost of connecting cities together.","input":"n = 4, costs = [[0,1,1],[0,2,5],[1,2,1],[2,3,8]]","output":"def min_cost(n, costs):\n    # create cost matrix\n    matrix = [[float('inf')] * n for _ in range(n)]\n    matrix[0][0] = 0\n    # populate cost matrix\n    for cost in costs:\n        start, end, value = cost[0], cost[1], cost[2]\n        matrix[start][end] = value\n    # traverse the matrix\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if matrix[j][k] > matrix[j][i] + matrix[i][k]:\n                    matrix[j][k] = matrix[j][i] + matrix[i][k] \n    # find the minimum cost\n    min_cost = float('inf')\n    for row in matrix:\n        min_cost = min(min_cost, min(row))\n    return min_cost","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the minimum cost of connecting cities together.\n\n### Input:\nn = 4, costs = [[0,1,1],[0,2,5],[1,2,1],[2,3,8]]\n\n### Output:\ndef min_cost(n, costs):\n    # create cost matrix\n    matrix = [[float('inf')] * n for _ in range(n)]\n    matrix[0][0] = 0\n    # populate cost matrix\n    for cost in costs:\n        start, end, value = cost[0], cost[1], cost[2]\n        matrix[start][end] = value\n    # traverse the matrix\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if matrix[j][k] > matrix[j][i] + matrix[i][k]:\n                    matrix[j][k] = matrix[j][i] + matrix[i][k] \n    # find the minimum cost\n    min_cost = float('inf')\n    for row in matrix:\n        min_cost = min(min_cost, min(row))\n    return min_cost"}
{"instruction":"Create an algorithm in Python to solve a given sudoku board.","input":"","output":"def solveSudoku(board):\n    if not findUnassignedLocation(board):\n        return True\n \n    for num in range(1, 10):\n        if isSafe(board, row, col, num):\n            board[row][col] = num\n \n            if solveSudoku(board): \n                return True\n            board[row][col] = 0\n    return False\n\ndef findUnassignedLocation(board):\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                return (i, j)\n    return None\n\ndef isSafe(board, row, col, num):\n    # Check row\n    for i in range(9):\n        if board[row][i] == num:\n            return False\n \n    # Check column\n    for i in range(9):\n        if board[i][col] == num:\n            return False\n \n    # Check sub-grid\n    row_start = (row \/\/ 3) * 3\n    col_start = (col \/\/ 3) * 3\n    for i in range(row_start, row_start + 3):\n        for j in range(col_start, col_start + 3):\n            if board[i][j] == num:\n                return False\n    return True","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to solve a given sudoku board.\n\n### Input:\n\n\n### Output:\ndef solveSudoku(board):\n    if not findUnassignedLocation(board):\n        return True\n \n    for num in range(1, 10):\n        if isSafe(board, row, col, num):\n            board[row][col] = num\n \n            if solveSudoku(board): \n                return True\n            board[row][col] = 0\n    return False\n\ndef findUnassignedLocation(board):\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                return (i, j)\n    return None\n\ndef isSafe(board, row, col, num):\n    # Check row\n    for i in range(9):\n        if board[row][i] == num:\n            return False\n \n    # Check column\n    for i in range(9):\n        if board[i][col] == num:\n            return False\n \n    # Check sub-grid\n    row_start = (row \/\/ 3) * 3\n    col_start = (col \/\/ 3) * 3\n    for i in range(row_start, row_start + 3):\n        for j in range(col_start, col_start + 3):\n            if board[i][j] == num:\n                return False\n    return True"}
{"instruction":"Generate a Python program to optimize an array of numbers","input":"A = [5, 4, 8, 9, 6, 1, -4, 7]","output":"def optimize_array(A):\n    A.sort()\n    return A\n\nprint(optimize_array([5, 4, 8, 9, 6, 1, -4, 7]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to optimize an array of numbers\n\n### Input:\nA = [5, 4, 8, 9, 6, 1, -4, 7]\n\n### Output:\ndef optimize_array(A):\n    A.sort()\n    return A\n\nprint(optimize_array([5, 4, 8, 9, 6, 1, -4, 7]))"}
{"instruction":"Generate a python program that takes an integer and then prints out the factorial of it?","input":"7","output":"def factorial(num):\n    if num <= 1:\n        return 1\n    else:\n        return num * factorial(num - 1) \n\nn = int(input(\"Enter a number: \"))  \nprint(\"Factorial of\",n,\"is\",factorial(n))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program that takes an integer and then prints out the factorial of it?\n\n### Input:\n7\n\n### Output:\ndef factorial(num):\n    if num <= 1:\n        return 1\n    else:\n        return num * factorial(num - 1) \n\nn = int(input(\"Enter a number: \"))  \nprint(\"Factorial of\",n,\"is\",factorial(n))"}
{"instruction":"Generate a python function that takes a list of strings and returns the longest one.","input":"words = ['hello', 'world', 'this', 'is', 'a', 'test']","output":"def longest_string(words):\n    longest = 0\n    result = ''\n    for w in words:\n        if len(w) > longest:\n            longest = len(w)\n            result = w\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python function that takes a list of strings and returns the longest one.\n\n### Input:\nwords = ['hello', 'world', 'this', 'is', 'a', 'test']\n\n### Output:\ndef longest_string(words):\n    longest = 0\n    result = ''\n    for w in words:\n        if len(w) > longest:\n            longest = len(w)\n            result = w\n    return result"}
{"instruction":"Generate a unique random number in the range given.","input":"Range: 0 - 100","output":"A unique random number in the given range can be generated using programming languages such as Python, JavaScript, etc. It will contain code to generate a random number in the given range, and then check if it has already been generated by maintaining a list of all generated numbers.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a unique random number in the range given.\n\n### Input:\nRange: 0 - 100\n\n### Output:\nA unique random number in the given range can be generated using programming languages such as Python, JavaScript, etc. It will contain code to generate a random number in the given range, and then check if it has already been generated by maintaining a list of all generated numbers."}
{"instruction":"Implement a genetic algorithm in Python for solving an optimization problem. The algorithm should find the minimum of a given function.","input":"The function is f(x) = x^2 \u2013 5x + 6","output":"import random\n\ndef fitness_function(x):\n return x**2 - 5*x + 6 #target function\n\ndef gen_population(population_size):\n population = []\n \n for _ in range(population_size):\n individual = random.random() * 10\n population.append(individual)\n \n return population\n\ndef selection(population):\n \n # Calculate fitness values\n fitness_values = []\n for individual in population:\n fitness_values.append(fitness_function(individual))\n \n # Select fittest individual\n fittest_individual = population[fitness_values.index(min(fitness_values))]\n \n return fittest_individual\n\ndef mutate(indivudal):\n mutate_prob = 0.2\n rand = random.random()\n \n if rand < mutate_prob:\n mutated_individual = indivudal * random.uniform(0.5,1.5)\n else:\n mutated_individual = indivudal\n \n return mutated_individual\n\ndef crossover(parent1, parent2):\n crossover_prob = 0.7\n rand = random.random()\n \n if rand < crossover_prob:\n offspring = []\n \n offspring.append((parent1 + parent2)\/2)\n \n else:\n offspring = [parent1, parent2]\n \n return offspring\n \ndef genetic_algorithm(population_size):\n population = gen_population(population_size)\n \n for epoch in range(100):\n fittest_individual = selection(population)\n population = [mutate(individual) for individual in population]\n population = [crossover(parent1, parent2) for parent1, parent2 in zip(population[0::2], population[1::2])]\n \n return fittest_individual\n\nprint(genetic_algorithm(50)) # Prints the minimum of the function","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a genetic algorithm in Python for solving an optimization problem. The algorithm should find the minimum of a given function.\n\n### Input:\nThe function is f(x) = x^2 \u2013 5x + 6\n\n### Output:\nimport random\n\ndef fitness_function(x):\n return x**2 - 5*x + 6 #target function\n\ndef gen_population(population_size):\n population = []\n \n for _ in range(population_size):\n individual = random.random() * 10\n population.append(individual)\n \n return population\n\ndef selection(population):\n \n # Calculate fitness values\n fitness_values = []\n for individual in population:\n fitness_values.append(fitness_function(individual))\n \n # Select fittest individual\n fittest_individual = population[fitness_values.index(min(fitness_values))]\n \n return fittest_individual\n\ndef mutate(indivudal):\n mutate_prob = 0.2\n rand = random.random()\n \n if rand < mutate_prob:\n mutated_individual = indivudal * random.uniform(0.5,1.5)\n else:\n mutated_individual = indivudal\n \n return mutated_individual\n\ndef crossover(parent1, parent2):\n crossover_prob = 0.7\n rand = random.random()\n \n if rand < crossover_prob:\n offspring = []\n \n offspring.append((parent1 + parent2)\/2)\n \n else:\n offspring = [parent1, parent2]\n \n return offspring\n \ndef genetic_algorithm(population_size):\n population = gen_population(population_size)\n \n for epoch in range(100):\n fittest_individual = selection(population)\n population = [mutate(individual) for individual in population]\n population = [crossover(parent1, parent2) for parent1, parent2 in zip(population[0::2], population[1::2])]\n \n return fittest_individual\n\nprint(genetic_algorithm(50)) # Prints the minimum of the function"}
{"instruction":"Create a REST API in Python Flask for the following model.","input":"class User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email","output":"from flask import Flask, jsonify, request\n\n# Class\nclass User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n\n# Create the application instance\napp = Flask(__name__)\n\n# Create a URL route in our application for \"\/\"\n@app.route('\/', methods=['GET', 'POST'])\ndef index():\n\n    # POST request\n    if request.method == 'POST':\n        json_data = request.get_json(force=True)\n        if not json_data:\n            return jsonify({'message': 'No input data provided'}), 400\n        user_name = json_data['name']\n        user_email = json_data['email']\n        user = User(name=user_name, email=user_email)\n\n        return jsonify({\n            'name': user.name,\n            'email': user.email\n        })\n    \n    # GET request\n    if request.method == 'GET':\n        # Get user list\n        users = [user.__dict__ for user in users]\n        return jsonify({'users': users}), 200\n\n# Run the application\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8080, debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API in Python Flask for the following model.\n\n### Input:\nclass User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n\n### Output:\nfrom flask import Flask, jsonify, request\n\n# Class\nclass User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n\n# Create the application instance\napp = Flask(__name__)\n\n# Create a URL route in our application for \"\/\"\n@app.route('\/', methods=['GET', 'POST'])\ndef index():\n\n    # POST request\n    if request.method == 'POST':\n        json_data = request.get_json(force=True)\n        if not json_data:\n            return jsonify({'message': 'No input data provided'}), 400\n        user_name = json_data['name']\n        user_email = json_data['email']\n        user = User(name=user_name, email=user_email)\n\n        return jsonify({\n            'name': user.name,\n            'email': user.email\n        })\n    \n    # GET request\n    if request.method == 'GET':\n        # Get user list\n        users = [user.__dict__ for user in users]\n        return jsonify({'users': users}), 200\n\n# Run the application\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8080, debug=True)"}
{"instruction":"Create an AI assistant to answer questions about the Python programming language. The assistant should be able to answer questions like \"What is a while loop?\", \"What is the difference between a list and a dictionary?\"","input":"Not applicable","output":"from rasa_nlu.model import Interpreter\n\ninterpreter = Interpreter.load('.\/models\/nlu\/default\/model')\n\ndef ask_question(question):\n result = interpreter.parse(question)\n intent = result['intent']['name']\n\nif intent == 'python_while_loop':\n #return answer to \"What is a while loop?\"\nelif intent == 'python_list_dictionary':\n #return answer to \"What is the difference between a list and a dictionary?\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI assistant to answer questions about the Python programming language. The assistant should be able to answer questions like \"What is a while loop?\", \"What is the difference between a list and a dictionary?\"\n\n### Input:\nNot applicable\n\n### Output:\nfrom rasa_nlu.model import Interpreter\n\ninterpreter = Interpreter.load('.\/models\/nlu\/default\/model')\n\ndef ask_question(question):\n result = interpreter.parse(question)\n intent = result['intent']['name']\n\nif intent == 'python_while_loop':\n #return answer to \"What is a while loop?\"\nelif intent == 'python_list_dictionary':\n #return answer to \"What is the difference between a list and a dictionary?\""}
{"instruction":"Construct a function in Python to detect the minimum subset of features that can optimally separate two categories of items in the input.","input":"data = [{'x1': 0.1, 'x2': 0.2, 'x3': 0.3, 'x4': 0.4, 'category': 0},\n {'x1': 0.2, 'x2': 0.3, 'x3': 0.4, 'x4': 0.5, 'category': 1},\n {'x1': 0.3, 'x2': 0.4, 'x3': 0.5, 'x4': 0.6, 'category': 0},\n {'x1': 0.4, 'x2': 0.5, 'x3': 0.6, 'x4': 0.7, 'category': 1}]","output":"def minimum_subset(data):\n features = list(data[0].keys())[:-1] # get the feature names\n min_num_feature = float('inf')\n features_selected = []\n \n for i in range(1,len(features)+1):\n for combination in itertools.combinations(features,i):\n num_correct, num_total = 0, 0\n for datum in data:\n if all(datum[feat] > 0.5 for feat in combination):\n if datum['category'] == 1:\n num_correct += 1\n elif all(datum[feat] <= 0.5 for feat in combination):\n if datum['category'] == 0:\n num_correct += 1\n num_total += 1\n \n if num_total == 0:\n continue\n accuracy = num_correct \/ num_total\n \n if accuracy == 1 and min_num_feature > i:\n min_num_feature = i\n features_selected = combination\n \n return features_selected","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function in Python to detect the minimum subset of features that can optimally separate two categories of items in the input.\n\n### Input:\ndata = [{'x1': 0.1, 'x2': 0.2, 'x3': 0.3, 'x4': 0.4, 'category': 0},\n {'x1': 0.2, 'x2': 0.3, 'x3': 0.4, 'x4': 0.5, 'category': 1},\n {'x1': 0.3, 'x2': 0.4, 'x3': 0.5, 'x4': 0.6, 'category': 0},\n {'x1': 0.4, 'x2': 0.5, 'x3': 0.6, 'x4': 0.7, 'category': 1}]\n\n### Output:\ndef minimum_subset(data):\n features = list(data[0].keys())[:-1] # get the feature names\n min_num_feature = float('inf')\n features_selected = []\n \n for i in range(1,len(features)+1):\n for combination in itertools.combinations(features,i):\n num_correct, num_total = 0, 0\n for datum in data:\n if all(datum[feat] > 0.5 for feat in combination):\n if datum['category'] == 1:\n num_correct += 1\n elif all(datum[feat] <= 0.5 for feat in combination):\n if datum['category'] == 0:\n num_correct += 1\n num_total += 1\n \n if num_total == 0:\n continue\n accuracy = num_correct \/ num_total\n \n if accuracy == 1 and min_num_feature > i:\n min_num_feature = i\n features_selected = combination\n \n return features_selected"}
{"instruction":"Create a function to compute the maximum of two numbers in Python.","input":"","output":"def maximum(x, y):\n    if x > y:\n        return x\n    else:\n        return y","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to compute the maximum of two numbers in Python.\n\n### Input:\n\n\n### Output:\ndef maximum(x, y):\n    if x > y:\n        return x\n    else:\n        return y"}
{"instruction":"Construct a Python function that takes as input a string and returns the length of the longest word in the string.","input":"\"This is an example string.\"","output":"def longest_word_length(input_string):\n    longest_word_length = 0\n    words = input_string.split()\n    for word in words:\n        if len(word) > longest_word_length:\n            longest_word_length = len(word)\n    return longest_word_length","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python function that takes as input a string and returns the length of the longest word in the string.\n\n### Input:\n\"This is an example string.\"\n\n### Output:\ndef longest_word_length(input_string):\n    longest_word_length = 0\n    words = input_string.split()\n    for word in words:\n        if len(word) > longest_word_length:\n            longest_word_length = len(word)\n    return longest_word_length"}
{"instruction":"Generate a Python function to calculate the area of a triangle given the three sides.","input":"","output":"def triangle_area(side1, side2, side3):\n    s = (side1 + side2 + side3) \/ 2\n    area = (s * (s - side1) * (s - side2) * (s - side3)) ** 0.5\n    return area","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to calculate the area of a triangle given the three sides.\n\n### Input:\n\n\n### Output:\ndef triangle_area(side1, side2, side3):\n    s = (side1 + side2 + side3) \/ 2\n    area = (s * (s - side1) * (s - side2) * (s - side3)) ** 0.5\n    return area"}
{"instruction":"Replace a string in the following python program.","input":"string = \"Hello, world!\"\nsubstring = \"world\"\nsubstitution = \"Python\"","output":"string = \"Hello, world!\"\nsubstring = \"world\"\nsubstitution = \"Python\"\n\nprint(string.replace(substring, substitution))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nReplace a string in the following python program.\n\n### Input:\nstring = \"Hello, world!\"\nsubstring = \"world\"\nsubstitution = \"Python\"\n\n### Output:\nstring = \"Hello, world!\"\nsubstring = \"world\"\nsubstitution = \"Python\"\n\nprint(string.replace(substring, substitution))"}
{"instruction":"Create a Python script to predict the stock price of a given company in the next 30 days.","input":"Input data: Historical stock prices of a particular company","output":"\"\"\"\nPredicts the stock price of a given company in the next 30 days\n\"\"\"\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\n#Get the historical stock prices\ndata = pd.read_csv('historical_stock_prices.csv')\n\n#Train the linear regression model using the historical stock prices\nX = data['date'].values.reshape(-1,1)\ny = data['price'].values.reshape(-1,1)\nlinear_regressor = LinearRegression()  \nlinear_regressor.fit(X, y)\n\n#Predict the stock prices for the next 30 days\nnext_30_days = np.arange(X.flatten()[-1]+1, X.flatten()[-1]+30, 1).reshape(-1,1)\ny_pred = linear_regressor.predict(next_30_days)\n\n#Print the predicted stock prices\nprint(\"The predicted stock prices for the next 30 days are:\")\nfor i in range(30):\n  print(\"Date:\", next_30_days[i][0],\"Price:\",y_pred[i][0])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to predict the stock price of a given company in the next 30 days.\n\n### Input:\nInput data: Historical stock prices of a particular company\n\n### Output:\n\"\"\"\nPredicts the stock price of a given company in the next 30 days\n\"\"\"\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\n#Get the historical stock prices\ndata = pd.read_csv('historical_stock_prices.csv')\n\n#Train the linear regression model using the historical stock prices\nX = data['date'].values.reshape(-1,1)\ny = data['price'].values.reshape(-1,1)\nlinear_regressor = LinearRegression()  \nlinear_regressor.fit(X, y)\n\n#Predict the stock prices for the next 30 days\nnext_30_days = np.arange(X.flatten()[-1]+1, X.flatten()[-1]+30, 1).reshape(-1,1)\ny_pred = linear_regressor.predict(next_30_days)\n\n#Print the predicted stock prices\nprint(\"The predicted stock prices for the next 30 days are:\")\nfor i in range(30):\n  print(\"Date:\", next_30_days[i][0],\"Price:\",y_pred[i][0])"}
{"instruction":"Generate a program in Python to compute the maximum of two given numbers.","input":"Number 1: 8\nNumber 2: 4","output":"num1 = 8\nnum2 = 4\n \nif (num1 > num2):\n    print(\"The maximum of the given numbers is: \"+str(num1))\nelse:\n    print(\"The maximum of the given numbers is: \"+str(num2))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to compute the maximum of two given numbers.\n\n### Input:\nNumber 1: 8\nNumber 2: 4\n\n### Output:\nnum1 = 8\nnum2 = 4\n \nif (num1 > num2):\n    print(\"The maximum of the given numbers is: \"+str(num1))\nelse:\n    print(\"The maximum of the given numbers is: \"+str(num2))"}
{"instruction":"Generate a Python program to filter out a list of numbers and keep only those that are prime","input":"nums = [2, 3, 4, 5, 6, 7, 8, 9, 10]","output":"def filter_prime(nums):\n    # Keep track of the prime numbers\n    primes = []\n    \n    # Iterate through each number\n    for num in nums:\n        is_prime = True\n        # Check if the number is divisible by any number from 2 to itself\n        for i in range(2, num):\n            # If so, the number is not prime\n            if num % i == 0:\n                is_prime = False\n                break\n        # Add the number to the list of primes if it is prime\n        if is_prime:\n            primes.append(num)\n            \n    # Return the updated list\n    return primes","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to filter out a list of numbers and keep only those that are prime\n\n### Input:\nnums = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n### Output:\ndef filter_prime(nums):\n    # Keep track of the prime numbers\n    primes = []\n    \n    # Iterate through each number\n    for num in nums:\n        is_prime = True\n        # Check if the number is divisible by any number from 2 to itself\n        for i in range(2, num):\n            # If so, the number is not prime\n            if num % i == 0:\n                is_prime = False\n                break\n        # Add the number to the list of primes if it is prime\n        if is_prime:\n            primes.append(num)\n            \n    # Return the updated list\n    return primes"}
{"instruction":"Develop a Python program to determine the average length of words in a sentence.","input":"\"This is a sample sentence with 8 words.\"","output":"def average_length(sentence):\n    words = sentence.split()\n    char_count = 0\n    \n    for word in words:\n        char_count += len(word)\n    \n    average_length = char_count \/ len(words)\n    return average_length\n\naverage_length(\"This is a sample sentence with 8 words.\") # output: 3.5","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to determine the average length of words in a sentence.\n\n### Input:\n\"This is a sample sentence with 8 words.\"\n\n### Output:\ndef average_length(sentence):\n    words = sentence.split()\n    char_count = 0\n    \n    for word in words:\n        char_count += len(word)\n    \n    average_length = char_count \/ len(words)\n    return average_length\n\naverage_length(\"This is a sample sentence with 8 words.\") # output: 3.5"}
{"instruction":"Convert a set of Python functions to JavaScript.","input":"def say_hello(name):\n    return \"Hello, {}!\".format(name)\n\ndef add_two(num):\n    return num + 2","output":"function say_hello(name) {\n return `Hello, ${name}!`;\n}\n\nfunction add_two(num) {\n return num + 2;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a set of Python functions to JavaScript.\n\n### Input:\ndef say_hello(name):\n    return \"Hello, {}!\".format(name)\n\ndef add_two(num):\n    return num + 2\n\n### Output:\nfunction say_hello(name) {\n return `Hello, ${name}!`;\n}\n\nfunction add_two(num) {\n return num + 2;\n}"}
{"instruction":"Write a Python algorithm to generate the combinations of n distinct objects taken from an array.","input":"arr = [1, 2, 3], n = 2","output":"import itertools\n\narr = [1, 2, 3]\nn = 2\n\nresult = list(itertools.combinations(arr, n))\n\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python algorithm to generate the combinations of n distinct objects taken from an array.\n\n### Input:\narr = [1, 2, 3], n = 2\n\n### Output:\nimport itertools\n\narr = [1, 2, 3]\nn = 2\n\nresult = list(itertools.combinations(arr, n))\n\nprint(result)"}
{"instruction":"Rewrite a provided Python function to a more Pythonic version.","input":"def add_numbers(x, y):\ntotal = 0\nfor i in range(x, y):\n total = total + i\nreturn total","output":"def add_numbers(x, y):\n return sum(range(x, y))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite a provided Python function to a more Pythonic version.\n\n### Input:\ndef add_numbers(x, y):\ntotal = 0\nfor i in range(x, y):\n total = total + i\nreturn total\n\n### Output:\ndef add_numbers(x, y):\n return sum(range(x, y))"}
{"instruction":"Create a Python script that generates a random password.","input":"Not applicable","output":"import random\nimport string\n\ndef generate_password():\n  characters = string.ascii_letters + string.digits + string.punctuation\n  password = ''.join(random.choice(characters) for _ in range(15))\n  return password\n\nprint(generate_password())","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that generates a random password.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\nimport string\n\ndef generate_password():\n  characters = string.ascii_letters + string.digits + string.punctuation\n  password = ''.join(random.choice(characters) for _ in range(15))\n  return password\n\nprint(generate_password())"}
{"instruction":"Create a class to represent a door in a Python program.","input":"","output":"class Door:\n    #Initializing a door with default values\n    def __init__(self, is_open=False, color=\"brown\", material=\"wood\"):\n        self.is_open = is_open\n        self.color = color\n        self.material = material\n\n    #Function to open door \n    def open_door(self):\n        self.is_open = True\n\n    #Function to close door \n    def close_door(self):\n        self.is_open = False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class to represent a door in a Python program.\n\n### Input:\n\n\n### Output:\nclass Door:\n    #Initializing a door with default values\n    def __init__(self, is_open=False, color=\"brown\", material=\"wood\"):\n        self.is_open = is_open\n        self.color = color\n        self.material = material\n\n    #Function to open door \n    def open_door(self):\n        self.is_open = True\n\n    #Function to close door \n    def close_door(self):\n        self.is_open = False"}
{"instruction":"Create a program in Python that takes a list of integers, and prints the sum of the even numbers and the sum of the odd numbers.","input":"list=[2,4,5,7,1,3]","output":"list=[2,4,5,7,1,3]\n\neven_sum= 6\nodd_sum= 15\n\ndef sum_even_odd(list):\n    even_sum=0\n    odd_sum=0\n    \n    for num in list:\n        if num % 2 == 0:\n            even_sum+=num\n        else:\n            odd_sum+=num \n    \n    print(\"even_sum=\",even_sum)\n    print(\"odd_sum=\",odd_sum)\n    \nsum_even_odd(list)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes a list of integers, and prints the sum of the even numbers and the sum of the odd numbers.\n\n### Input:\nlist=[2,4,5,7,1,3]\n\n### Output:\nlist=[2,4,5,7,1,3]\n\neven_sum= 6\nodd_sum= 15\n\ndef sum_even_odd(list):\n    even_sum=0\n    odd_sum=0\n    \n    for num in list:\n        if num % 2 == 0:\n            even_sum+=num\n        else:\n            odd_sum+=num \n    \n    print(\"even_sum=\",even_sum)\n    print(\"odd_sum=\",odd_sum)\n    \nsum_even_odd(list)"}
{"instruction":"Design a function in Python that takes in two parameters, x and y, and returns the sum of squares of those parameters (x^2 + y^2).","input":"","output":"def sum_of_squares(x, y):\n  return x**2 + y**2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python that takes in two parameters, x and y, and returns the sum of squares of those parameters (x^2 + y^2).\n\n### Input:\n\n\n### Output:\ndef sum_of_squares(x, y):\n  return x**2 + y**2"}
{"instruction":"Change the following Python program such that you can pass any number of strings in the function.","input":"def print_strings(s1, s2):\n    print(s1)\n    print(s2)","output":"def print_strings(*strings):\n    for s in strings:\n        print(s)\n\nprint_strings(\"Hello\", \"World\")","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nChange the following Python program such that you can pass any number of strings in the function.\n\n### Input:\ndef print_strings(s1, s2):\n    print(s1)\n    print(s2)\n\n### Output:\ndef print_strings(*strings):\n    for s in strings:\n        print(s)\n\nprint_strings(\"Hello\", \"World\")"}
{"instruction":"Develop a Python program that prints a random string every time it is run.","input":"Not applicable","output":"import random\n\ndef gen_random_str():\n # generate a random string\n random_str = ''.join([random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789') for i in range(10)])\n \n # print the string\n print(random_str)\n\nif __name__ == '__main__':\n gen_random_str()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that prints a random string every time it is run.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\ndef gen_random_str():\n # generate a random string\n random_str = ''.join([random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789') for i in range(10)])\n \n # print the string\n print(random_str)\n\nif __name__ == '__main__':\n gen_random_str()"}
{"instruction":"Create a Flask Python service that serves an array of strings as JSON using a GET request.","input":"Not applicable","output":"import json\nfrom flask import Flask, request, jsonify \n\napp = Flask(__name__)\n\ndata = ['Apple', 'Banana', 'Carrot']\n\n@app.route('\/data', methods=['GET'])\ndef serve_data():\n return jsonify(data)\n\nif __name__ == '__main__':\n app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Flask Python service that serves an array of strings as JSON using a GET request.\n\n### Input:\nNot applicable\n\n### Output:\nimport json\nfrom flask import Flask, request, jsonify \n\napp = Flask(__name__)\n\ndata = ['Apple', 'Banana', 'Carrot']\n\n@app.route('\/data', methods=['GET'])\ndef serve_data():\n return jsonify(data)\n\nif __name__ == '__main__':\n app.run()"}
{"instruction":"Automate this Excel task using Python.","input":"abc,1\ndef,2\nghi,3\njkl,4","output":"import pandas as pd\n\n# Read data\ndf = pd.read_csv(\"data.csv\")\n\n# Perform tasks\ndf['result'] = df['column2'] + df['column2']\n\n# Write the result\ndf.to_csv(\"result.csv\", index=False)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAutomate this Excel task using Python.\n\n### Input:\nabc,1\ndef,2\nghi,3\njkl,4\n\n### Output:\nimport pandas as pd\n\n# Read data\ndf = pd.read_csv(\"data.csv\")\n\n# Perform tasks\ndf['result'] = df['column2'] + df['column2']\n\n# Write the result\ndf.to_csv(\"result.csv\", index=False)"}
{"instruction":"Implement a Python program that takes in a string and prints out the ASCII codes for each character in the string.","input":"\"Hello\"","output":"def get_ascii_codes(string):\n    ascii_codes = [] \n  \n    for char in string: \n        ascii_codes.append(ord(char)) \n  \n    return ascii_codes \n\n\nprint(get_ascii_codes(\"Hello\"))\n\n# Output: [72, 101, 108, 108, 111]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python program that takes in a string and prints out the ASCII codes for each character in the string.\n\n### Input:\n\"Hello\"\n\n### Output:\ndef get_ascii_codes(string):\n    ascii_codes = [] \n  \n    for char in string: \n        ascii_codes.append(ord(char)) \n  \n    return ascii_codes \n\n\nprint(get_ascii_codes(\"Hello\"))\n\n# Output: [72, 101, 108, 108, 111]"}
{"instruction":"Create a web scrapper in Python that fetches the title of headlines from a web page.","input":"","output":"import requests\nfrom bs4 import BeautifulSoup\n\nresult = requests.get(\"http:\/\/example.com\")\nsoup = BeautifulSoup(result.text, 'lxml')\n\nfor link in soup.find_all('a'):\n    title = link.text\n    print(title)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scrapper in Python that fetches the title of headlines from a web page.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nresult = requests.get(\"http:\/\/example.com\")\nsoup = BeautifulSoup(result.text, 'lxml')\n\nfor link in soup.find_all('a'):\n    title = link.text\n    print(title)"}
{"instruction":"Provide a Python function that takes a phrase as input and converts all words in the phrase to title case.","input":"\"a sample phrase\"","output":"def title_case(phrase):\n    words = phrase.split()\n    result = []\n    for word in words:\n        result.append(word[0].upper() + word[1:].lower())\n    \n    return ' '.join(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProvide a Python function that takes a phrase as input and converts all words in the phrase to title case.\n\n### Input:\n\"a sample phrase\"\n\n### Output:\ndef title_case(phrase):\n    words = phrase.split()\n    result = []\n    for word in words:\n        result.append(word[0].upper() + word[1:].lower())\n    \n    return ' '.join(result)"}
{"instruction":"Implement a Python function to search for an item in an array.","input":"arr = [15, 20, 25, 30, 35]\nitem = 25","output":"def search(arr, item):\n    for i in range(len(arr)):\n        if item == arr[i]:\n            return i\n    return -1\n\narr = [15, 20, 25, 30, 35]\nitem = 25\nindex = search(arr, item)\nif index == -1:\n    print(\"Element not found\")\nelse:\n    print(\"Element found at index\", index)\n\n# Output:\n# Element found at index 2","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python function to search for an item in an array.\n\n### Input:\narr = [15, 20, 25, 30, 35]\nitem = 25\n\n### Output:\ndef search(arr, item):\n    for i in range(len(arr)):\n        if item == arr[i]:\n            return i\n    return -1\n\narr = [15, 20, 25, 30, 35]\nitem = 25\nindex = search(arr, item)\nif index == -1:\n    print(\"Element not found\")\nelse:\n    print(\"Element found at index\", index)\n\n# Output:\n# Element found at index 2"}
{"instruction":"Develop a Python program to generate the first 10 Fibonacci numbers.","input":"","output":"def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \nprint(Fibonacci(10))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to generate the first 10 Fibonacci numbers.\n\n### Input:\n\n\n### Output:\ndef Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \nprint(Fibonacci(10))"}
{"instruction":"Create a program in Python to sort a given list of numbers in ascending order.","input":"[9, 5, 7, 4, 1]","output":"def sort_asc(lst):\n    return sorted(lst)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to sort a given list of numbers in ascending order.\n\n### Input:\n[9, 5, 7, 4, 1]\n\n### Output:\ndef sort_asc(lst):\n    return sorted(lst)"}
{"instruction":"Generate a Python program which determines if a given number is divisible by 7","input":"28","output":"def is_divisible_by_7(num):\n    if num % 7 == 0:\n        return True\n    else:\n        return False\n\nresult = is_divisible_by_7(28)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program which determines if a given number is divisible by 7\n\n### Input:\n28\n\n### Output:\ndef is_divisible_by_7(num):\n    if num % 7 == 0:\n        return True\n    else:\n        return False\n\nresult = is_divisible_by_7(28)\nprint(result)"}
